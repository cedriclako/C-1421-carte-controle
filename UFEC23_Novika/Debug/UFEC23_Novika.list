
UFEC23_Novika.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001104c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013d0  08011240  08011240  00021240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012610  08012610  0003032c  2**0
                  CONTENTS
  4 .ARM          00000008  08012610  08012610  00022610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012618  08012618  0003032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012618  08012618  00022618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801261c  0801261c  0002261c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  08012620  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003560  20000330  0801294c  00030330  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003890  0801294c  00033890  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029764  00000000  00000000  00030355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c48  00000000  00000000  00059ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ca0  00000000  00000000  0005f708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ab8  00000000  00000000  000613a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bf1  00000000  00000000  00062e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023439  00000000  00000000  00087a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca35e  00000000  00000000  000aae8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001751e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008aa4  00000000  00000000  0017523c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000330 	.word	0x20000330
 800020c:	00000000 	.word	0x00000000
 8000210:	08011224 	.word	0x08011224

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000334 	.word	0x20000334
 800022c:	08011224 	.word	0x08011224

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	; 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_frsub>:
 8000c1c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c20:	e002      	b.n	8000c28 <__addsf3>
 8000c22:	bf00      	nop

08000c24 <__aeabi_fsub>:
 8000c24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c28 <__addsf3>:
 8000c28:	0042      	lsls	r2, r0, #1
 8000c2a:	bf1f      	itttt	ne
 8000c2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c30:	ea92 0f03 	teqne	r2, r3
 8000c34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3c:	d06a      	beq.n	8000d14 <__addsf3+0xec>
 8000c3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c46:	bfc1      	itttt	gt
 8000c48:	18d2      	addgt	r2, r2, r3
 8000c4a:	4041      	eorgt	r1, r0
 8000c4c:	4048      	eorgt	r0, r1
 8000c4e:	4041      	eorgt	r1, r0
 8000c50:	bfb8      	it	lt
 8000c52:	425b      	neglt	r3, r3
 8000c54:	2b19      	cmp	r3, #25
 8000c56:	bf88      	it	hi
 8000c58:	4770      	bxhi	lr
 8000c5a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c66:	bf18      	it	ne
 8000c68:	4240      	negne	r0, r0
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c76:	bf18      	it	ne
 8000c78:	4249      	negne	r1, r1
 8000c7a:	ea92 0f03 	teq	r2, r3
 8000c7e:	d03f      	beq.n	8000d00 <__addsf3+0xd8>
 8000c80:	f1a2 0201 	sub.w	r2, r2, #1
 8000c84:	fa41 fc03 	asr.w	ip, r1, r3
 8000c88:	eb10 000c 	adds.w	r0, r0, ip
 8000c8c:	f1c3 0320 	rsb	r3, r3, #32
 8000c90:	fa01 f103 	lsl.w	r1, r1, r3
 8000c94:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__addsf3+0x78>
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ca0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ca4:	d313      	bcc.n	8000cce <__addsf3+0xa6>
 8000ca6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000caa:	d306      	bcc.n	8000cba <__addsf3+0x92>
 8000cac:	0840      	lsrs	r0, r0, #1
 8000cae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cb2:	f102 0201 	add.w	r2, r2, #1
 8000cb6:	2afe      	cmp	r2, #254	; 0xfe
 8000cb8:	d251      	bcs.n	8000d5e <__addsf3+0x136>
 8000cba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc2:	bf08      	it	eq
 8000cc4:	f020 0001 	biceq.w	r0, r0, #1
 8000cc8:	ea40 0003 	orr.w	r0, r0, r3
 8000ccc:	4770      	bx	lr
 8000cce:	0049      	lsls	r1, r1, #1
 8000cd0:	eb40 0000 	adc.w	r0, r0, r0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cdc:	d2ed      	bcs.n	8000cba <__addsf3+0x92>
 8000cde:	fab0 fc80 	clz	ip, r0
 8000ce2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ce6:	ebb2 020c 	subs.w	r2, r2, ip
 8000cea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cee:	bfaa      	itet	ge
 8000cf0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cf4:	4252      	neglt	r2, r2
 8000cf6:	4318      	orrge	r0, r3
 8000cf8:	bfbc      	itt	lt
 8000cfa:	40d0      	lsrlt	r0, r2
 8000cfc:	4318      	orrlt	r0, r3
 8000cfe:	4770      	bx	lr
 8000d00:	f092 0f00 	teq	r2, #0
 8000d04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d08:	bf06      	itte	eq
 8000d0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d0e:	3201      	addeq	r2, #1
 8000d10:	3b01      	subne	r3, #1
 8000d12:	e7b5      	b.n	8000c80 <__addsf3+0x58>
 8000d14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d1c:	bf18      	it	ne
 8000d1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d22:	d021      	beq.n	8000d68 <__addsf3+0x140>
 8000d24:	ea92 0f03 	teq	r2, r3
 8000d28:	d004      	beq.n	8000d34 <__addsf3+0x10c>
 8000d2a:	f092 0f00 	teq	r2, #0
 8000d2e:	bf08      	it	eq
 8000d30:	4608      	moveq	r0, r1
 8000d32:	4770      	bx	lr
 8000d34:	ea90 0f01 	teq	r0, r1
 8000d38:	bf1c      	itt	ne
 8000d3a:	2000      	movne	r0, #0
 8000d3c:	4770      	bxne	lr
 8000d3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d42:	d104      	bne.n	8000d4e <__addsf3+0x126>
 8000d44:	0040      	lsls	r0, r0, #1
 8000d46:	bf28      	it	cs
 8000d48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	4770      	bx	lr
 8000d4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d52:	bf3c      	itt	cc
 8000d54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d58:	4770      	bxcc	lr
 8000d5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d66:	4770      	bx	lr
 8000d68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d6c:	bf16      	itet	ne
 8000d6e:	4608      	movne	r0, r1
 8000d70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d74:	4601      	movne	r1, r0
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	bf06      	itte	eq
 8000d7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d7e:	ea90 0f01 	teqeq	r0, r1
 8000d82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_ui2f>:
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e004      	b.n	8000d98 <__aeabi_i2f+0x8>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_i2f>:
 8000d90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d94:	bf48      	it	mi
 8000d96:	4240      	negmi	r0, r0
 8000d98:	ea5f 0c00 	movs.w	ip, r0
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000da4:	4601      	mov	r1, r0
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	e01c      	b.n	8000de6 <__aeabi_l2f+0x2a>

08000dac <__aeabi_ul2f>:
 8000dac:	ea50 0201 	orrs.w	r2, r0, r1
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e00a      	b.n	8000dd0 <__aeabi_l2f+0x14>
 8000dba:	bf00      	nop

08000dbc <__aeabi_l2f>:
 8000dbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dc8:	d502      	bpl.n	8000dd0 <__aeabi_l2f+0x14>
 8000dca:	4240      	negs	r0, r0
 8000dcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd0:	ea5f 0c01 	movs.w	ip, r1
 8000dd4:	bf02      	ittt	eq
 8000dd6:	4684      	moveq	ip, r0
 8000dd8:	4601      	moveq	r1, r0
 8000dda:	2000      	moveq	r0, #0
 8000ddc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000de0:	bf08      	it	eq
 8000de2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000de6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dea:	fabc f28c 	clz	r2, ip
 8000dee:	3a08      	subs	r2, #8
 8000df0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000df4:	db10      	blt.n	8000e18 <__aeabi_l2f+0x5c>
 8000df6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e00:	f1c2 0220 	rsb	r2, r2, #32
 8000e04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e08:	fa20 f202 	lsr.w	r2, r0, r2
 8000e0c:	eb43 0002 	adc.w	r0, r3, r2
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f102 0220 	add.w	r2, r2, #32
 8000e1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e20:	f1c2 0220 	rsb	r2, r2, #32
 8000e24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e28:	fa21 f202 	lsr.w	r2, r1, r2
 8000e2c:	eb43 0002 	adc.w	r0, r3, r2
 8000e30:	bf08      	it	eq
 8000e32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e36:	4770      	bx	lr

08000e38 <__aeabi_fmul>:
 8000e38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e40:	bf1e      	ittt	ne
 8000e42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e46:	ea92 0f0c 	teqne	r2, ip
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d06f      	beq.n	8000f30 <__aeabi_fmul+0xf8>
 8000e50:	441a      	add	r2, r3
 8000e52:	ea80 0c01 	eor.w	ip, r0, r1
 8000e56:	0240      	lsls	r0, r0, #9
 8000e58:	bf18      	it	ne
 8000e5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e5e:	d01e      	beq.n	8000e9e <__aeabi_fmul+0x66>
 8000e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e78:	bf3e      	ittt	cc
 8000e7a:	0049      	lslcc	r1, r1, #1
 8000e7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e80:	005b      	lslcc	r3, r3, #1
 8000e82:	ea40 0001 	orr.w	r0, r0, r1
 8000e86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e8a:	2afd      	cmp	r2, #253	; 0xfd
 8000e8c:	d81d      	bhi.n	8000eca <__aeabi_fmul+0x92>
 8000e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e96:	bf08      	it	eq
 8000e98:	f020 0001 	biceq.w	r0, r0, #1
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea6:	bf08      	it	eq
 8000ea8:	0249      	lsleq	r1, r1, #9
 8000eaa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000eb2:	3a7f      	subs	r2, #127	; 0x7f
 8000eb4:	bfc2      	ittt	gt
 8000eb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ebe:	4770      	bxgt	lr
 8000ec0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	3a01      	subs	r2, #1
 8000eca:	dc5d      	bgt.n	8000f88 <__aeabi_fmul+0x150>
 8000ecc:	f112 0f19 	cmn.w	r2, #25
 8000ed0:	bfdc      	itt	le
 8000ed2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ed6:	4770      	bxle	lr
 8000ed8:	f1c2 0200 	rsb	r2, r2, #0
 8000edc:	0041      	lsls	r1, r0, #1
 8000ede:	fa21 f102 	lsr.w	r1, r1, r2
 8000ee2:	f1c2 0220 	rsb	r2, r2, #32
 8000ee6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eee:	f140 0000 	adc.w	r0, r0, #0
 8000ef2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ef6:	bf08      	it	eq
 8000ef8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000efc:	4770      	bx	lr
 8000efe:	f092 0f00 	teq	r2, #0
 8000f02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0040      	lsleq	r0, r0, #1
 8000f0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0e:	3a01      	subeq	r2, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fmul+0xce>
 8000f12:	ea40 000c 	orr.w	r0, r0, ip
 8000f16:	f093 0f00 	teq	r3, #0
 8000f1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0049      	lsleq	r1, r1, #1
 8000f22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f26:	3b01      	subeq	r3, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fmul+0xe6>
 8000f2a:	ea41 010c 	orr.w	r1, r1, ip
 8000f2e:	e78f      	b.n	8000e50 <__aeabi_fmul+0x18>
 8000f30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f34:	ea92 0f0c 	teq	r2, ip
 8000f38:	bf18      	it	ne
 8000f3a:	ea93 0f0c 	teqne	r3, ip
 8000f3e:	d00a      	beq.n	8000f56 <__aeabi_fmul+0x11e>
 8000f40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f44:	bf18      	it	ne
 8000f46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	d1d8      	bne.n	8000efe <__aeabi_fmul+0xc6>
 8000f4c:	ea80 0001 	eor.w	r0, r0, r1
 8000f50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f54:	4770      	bx	lr
 8000f56:	f090 0f00 	teq	r0, #0
 8000f5a:	bf17      	itett	ne
 8000f5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f60:	4608      	moveq	r0, r1
 8000f62:	f091 0f00 	teqne	r1, #0
 8000f66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f6a:	d014      	beq.n	8000f96 <__aeabi_fmul+0x15e>
 8000f6c:	ea92 0f0c 	teq	r2, ip
 8000f70:	d101      	bne.n	8000f76 <__aeabi_fmul+0x13e>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d10f      	bne.n	8000f96 <__aeabi_fmul+0x15e>
 8000f76:	ea93 0f0c 	teq	r3, ip
 8000f7a:	d103      	bne.n	8000f84 <__aeabi_fmul+0x14c>
 8000f7c:	024b      	lsls	r3, r1, #9
 8000f7e:	bf18      	it	ne
 8000f80:	4608      	movne	r0, r1
 8000f82:	d108      	bne.n	8000f96 <__aeabi_fmul+0x15e>
 8000f84:	ea80 0001 	eor.w	r0, r0, r1
 8000f88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f94:	4770      	bx	lr
 8000f96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f9e:	4770      	bx	lr

08000fa0 <__aeabi_fdiv>:
 8000fa0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fa4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fa8:	bf1e      	ittt	ne
 8000faa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fae:	ea92 0f0c 	teqne	r2, ip
 8000fb2:	ea93 0f0c 	teqne	r3, ip
 8000fb6:	d069      	beq.n	800108c <__aeabi_fdiv+0xec>
 8000fb8:	eba2 0203 	sub.w	r2, r2, r3
 8000fbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000fc0:	0249      	lsls	r1, r1, #9
 8000fc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fc6:	d037      	beq.n	8001038 <__aeabi_fdiv+0x98>
 8000fc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fcc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	bf38      	it	cc
 8000fdc:	005b      	lslcc	r3, r3, #1
 8000fde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fe2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	bf24      	itt	cs
 8000fea:	1a5b      	subcs	r3, r3, r1
 8000fec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ff0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ffa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ffe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001002:	bf24      	itt	cs
 8001004:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001008:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800100c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001010:	bf24      	itt	cs
 8001012:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001016:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	bf18      	it	ne
 800101e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001022:	d1e0      	bne.n	8000fe6 <__aeabi_fdiv+0x46>
 8001024:	2afd      	cmp	r2, #253	; 0xfd
 8001026:	f63f af50 	bhi.w	8000eca <__aeabi_fmul+0x92>
 800102a:	428b      	cmp	r3, r1
 800102c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001030:	bf08      	it	eq
 8001032:	f020 0001 	biceq.w	r0, r0, #1
 8001036:	4770      	bx	lr
 8001038:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800103c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001040:	327f      	adds	r2, #127	; 0x7f
 8001042:	bfc2      	ittt	gt
 8001044:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001048:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800104c:	4770      	bxgt	lr
 800104e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	3a01      	subs	r2, #1
 8001058:	e737      	b.n	8000eca <__aeabi_fmul+0x92>
 800105a:	f092 0f00 	teq	r2, #0
 800105e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001062:	bf02      	ittt	eq
 8001064:	0040      	lsleq	r0, r0, #1
 8001066:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800106a:	3a01      	subeq	r2, #1
 800106c:	d0f9      	beq.n	8001062 <__aeabi_fdiv+0xc2>
 800106e:	ea40 000c 	orr.w	r0, r0, ip
 8001072:	f093 0f00 	teq	r3, #0
 8001076:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800107a:	bf02      	ittt	eq
 800107c:	0049      	lsleq	r1, r1, #1
 800107e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001082:	3b01      	subeq	r3, #1
 8001084:	d0f9      	beq.n	800107a <__aeabi_fdiv+0xda>
 8001086:	ea41 010c 	orr.w	r1, r1, ip
 800108a:	e795      	b.n	8000fb8 <__aeabi_fdiv+0x18>
 800108c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001090:	ea92 0f0c 	teq	r2, ip
 8001094:	d108      	bne.n	80010a8 <__aeabi_fdiv+0x108>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	f47f af7d 	bne.w	8000f96 <__aeabi_fmul+0x15e>
 800109c:	ea93 0f0c 	teq	r3, ip
 80010a0:	f47f af70 	bne.w	8000f84 <__aeabi_fmul+0x14c>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e776      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010a8:	ea93 0f0c 	teq	r3, ip
 80010ac:	d104      	bne.n	80010b8 <__aeabi_fdiv+0x118>
 80010ae:	024b      	lsls	r3, r1, #9
 80010b0:	f43f af4c 	beq.w	8000f4c <__aeabi_fmul+0x114>
 80010b4:	4608      	mov	r0, r1
 80010b6:	e76e      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010bc:	bf18      	it	ne
 80010be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010c2:	d1ca      	bne.n	800105a <__aeabi_fdiv+0xba>
 80010c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010c8:	f47f af5c 	bne.w	8000f84 <__aeabi_fmul+0x14c>
 80010cc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010d0:	f47f af3c 	bne.w	8000f4c <__aeabi_fmul+0x114>
 80010d4:	e75f      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010d6:	bf00      	nop

080010d8 <__gesf2>:
 80010d8:	f04f 3cff 	mov.w	ip, #4294967295
 80010dc:	e006      	b.n	80010ec <__cmpsf2+0x4>
 80010de:	bf00      	nop

080010e0 <__lesf2>:
 80010e0:	f04f 0c01 	mov.w	ip, #1
 80010e4:	e002      	b.n	80010ec <__cmpsf2+0x4>
 80010e6:	bf00      	nop

080010e8 <__cmpsf2>:
 80010e8:	f04f 0c01 	mov.w	ip, #1
 80010ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010fc:	bf18      	it	ne
 80010fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001102:	d011      	beq.n	8001128 <__cmpsf2+0x40>
 8001104:	b001      	add	sp, #4
 8001106:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800110a:	bf18      	it	ne
 800110c:	ea90 0f01 	teqne	r0, r1
 8001110:	bf58      	it	pl
 8001112:	ebb2 0003 	subspl.w	r0, r2, r3
 8001116:	bf88      	it	hi
 8001118:	17c8      	asrhi	r0, r1, #31
 800111a:	bf38      	it	cc
 800111c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001120:	bf18      	it	ne
 8001122:	f040 0001 	orrne.w	r0, r0, #1
 8001126:	4770      	bx	lr
 8001128:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800112c:	d102      	bne.n	8001134 <__cmpsf2+0x4c>
 800112e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001132:	d105      	bne.n	8001140 <__cmpsf2+0x58>
 8001134:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001138:	d1e4      	bne.n	8001104 <__cmpsf2+0x1c>
 800113a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800113e:	d0e1      	beq.n	8001104 <__cmpsf2+0x1c>
 8001140:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <__aeabi_cfrcmple>:
 8001148:	4684      	mov	ip, r0
 800114a:	4608      	mov	r0, r1
 800114c:	4661      	mov	r1, ip
 800114e:	e7ff      	b.n	8001150 <__aeabi_cfcmpeq>

08001150 <__aeabi_cfcmpeq>:
 8001150:	b50f      	push	{r0, r1, r2, r3, lr}
 8001152:	f7ff ffc9 	bl	80010e8 <__cmpsf2>
 8001156:	2800      	cmp	r0, #0
 8001158:	bf48      	it	mi
 800115a:	f110 0f00 	cmnmi.w	r0, #0
 800115e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001160 <__aeabi_fcmpeq>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff fff4 	bl	8001150 <__aeabi_cfcmpeq>
 8001168:	bf0c      	ite	eq
 800116a:	2001      	moveq	r0, #1
 800116c:	2000      	movne	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmplt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffea 	bl	8001150 <__aeabi_cfcmpeq>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmple>:
 8001188:	f84d ed08 	str.w	lr, [sp, #-8]!
 800118c:	f7ff ffe0 	bl	8001150 <__aeabi_cfcmpeq>
 8001190:	bf94      	ite	ls
 8001192:	2001      	movls	r0, #1
 8001194:	2000      	movhi	r0, #0
 8001196:	f85d fb08 	ldr.w	pc, [sp], #8
 800119a:	bf00      	nop

0800119c <__aeabi_fcmpge>:
 800119c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a0:	f7ff ffd2 	bl	8001148 <__aeabi_cfrcmple>
 80011a4:	bf94      	ite	ls
 80011a6:	2001      	movls	r0, #1
 80011a8:	2000      	movhi	r0, #0
 80011aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ae:	bf00      	nop

080011b0 <__aeabi_fcmpgt>:
 80011b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b4:	f7ff ffc8 	bl	8001148 <__aeabi_cfrcmple>
 80011b8:	bf34      	ite	cc
 80011ba:	2001      	movcc	r0, #1
 80011bc:	2000      	movcs	r0, #0
 80011be:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c2:	bf00      	nop

080011c4 <__aeabi_uldivmod>:
 80011c4:	b953      	cbnz	r3, 80011dc <__aeabi_uldivmod+0x18>
 80011c6:	b94a      	cbnz	r2, 80011dc <__aeabi_uldivmod+0x18>
 80011c8:	2900      	cmp	r1, #0
 80011ca:	bf08      	it	eq
 80011cc:	2800      	cmpeq	r0, #0
 80011ce:	bf1c      	itt	ne
 80011d0:	f04f 31ff 	movne.w	r1, #4294967295
 80011d4:	f04f 30ff 	movne.w	r0, #4294967295
 80011d8:	f000 b96e 	b.w	80014b8 <__aeabi_idiv0>
 80011dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80011e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011e4:	f000 f806 	bl	80011f4 <__udivmoddi4>
 80011e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f0:	b004      	add	sp, #16
 80011f2:	4770      	bx	lr

080011f4 <__udivmoddi4>:
 80011f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011f8:	9e08      	ldr	r6, [sp, #32]
 80011fa:	460d      	mov	r5, r1
 80011fc:	4604      	mov	r4, r0
 80011fe:	468e      	mov	lr, r1
 8001200:	2b00      	cmp	r3, #0
 8001202:	f040 8083 	bne.w	800130c <__udivmoddi4+0x118>
 8001206:	428a      	cmp	r2, r1
 8001208:	4617      	mov	r7, r2
 800120a:	d947      	bls.n	800129c <__udivmoddi4+0xa8>
 800120c:	fab2 f382 	clz	r3, r2
 8001210:	b14b      	cbz	r3, 8001226 <__udivmoddi4+0x32>
 8001212:	f1c3 0120 	rsb	r1, r3, #32
 8001216:	fa05 fe03 	lsl.w	lr, r5, r3
 800121a:	fa20 f101 	lsr.w	r1, r0, r1
 800121e:	409f      	lsls	r7, r3
 8001220:	ea41 0e0e 	orr.w	lr, r1, lr
 8001224:	409c      	lsls	r4, r3
 8001226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800122a:	fbbe fcf8 	udiv	ip, lr, r8
 800122e:	fa1f f987 	uxth.w	r9, r7
 8001232:	fb08 e21c 	mls	r2, r8, ip, lr
 8001236:	fb0c f009 	mul.w	r0, ip, r9
 800123a:	0c21      	lsrs	r1, r4, #16
 800123c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001240:	4290      	cmp	r0, r2
 8001242:	d90a      	bls.n	800125a <__udivmoddi4+0x66>
 8001244:	18ba      	adds	r2, r7, r2
 8001246:	f10c 31ff 	add.w	r1, ip, #4294967295
 800124a:	f080 8118 	bcs.w	800147e <__udivmoddi4+0x28a>
 800124e:	4290      	cmp	r0, r2
 8001250:	f240 8115 	bls.w	800147e <__udivmoddi4+0x28a>
 8001254:	f1ac 0c02 	sub.w	ip, ip, #2
 8001258:	443a      	add	r2, r7
 800125a:	1a12      	subs	r2, r2, r0
 800125c:	fbb2 f0f8 	udiv	r0, r2, r8
 8001260:	fb08 2210 	mls	r2, r8, r0, r2
 8001264:	fb00 f109 	mul.w	r1, r0, r9
 8001268:	b2a4      	uxth	r4, r4
 800126a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800126e:	42a1      	cmp	r1, r4
 8001270:	d909      	bls.n	8001286 <__udivmoddi4+0x92>
 8001272:	193c      	adds	r4, r7, r4
 8001274:	f100 32ff 	add.w	r2, r0, #4294967295
 8001278:	f080 8103 	bcs.w	8001482 <__udivmoddi4+0x28e>
 800127c:	42a1      	cmp	r1, r4
 800127e:	f240 8100 	bls.w	8001482 <__udivmoddi4+0x28e>
 8001282:	3802      	subs	r0, #2
 8001284:	443c      	add	r4, r7
 8001286:	1a64      	subs	r4, r4, r1
 8001288:	2100      	movs	r1, #0
 800128a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800128e:	b11e      	cbz	r6, 8001298 <__udivmoddi4+0xa4>
 8001290:	2200      	movs	r2, #0
 8001292:	40dc      	lsrs	r4, r3
 8001294:	e9c6 4200 	strd	r4, r2, [r6]
 8001298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800129c:	b902      	cbnz	r2, 80012a0 <__udivmoddi4+0xac>
 800129e:	deff      	udf	#255	; 0xff
 80012a0:	fab2 f382 	clz	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d14f      	bne.n	8001348 <__udivmoddi4+0x154>
 80012a8:	1a8d      	subs	r5, r1, r2
 80012aa:	2101      	movs	r1, #1
 80012ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80012b0:	fa1f f882 	uxth.w	r8, r2
 80012b4:	fbb5 fcfe 	udiv	ip, r5, lr
 80012b8:	fb0e 551c 	mls	r5, lr, ip, r5
 80012bc:	fb08 f00c 	mul.w	r0, r8, ip
 80012c0:	0c22      	lsrs	r2, r4, #16
 80012c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80012c6:	42a8      	cmp	r0, r5
 80012c8:	d907      	bls.n	80012da <__udivmoddi4+0xe6>
 80012ca:	197d      	adds	r5, r7, r5
 80012cc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80012d0:	d202      	bcs.n	80012d8 <__udivmoddi4+0xe4>
 80012d2:	42a8      	cmp	r0, r5
 80012d4:	f200 80e9 	bhi.w	80014aa <__udivmoddi4+0x2b6>
 80012d8:	4694      	mov	ip, r2
 80012da:	1a2d      	subs	r5, r5, r0
 80012dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80012e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80012e4:	fb08 f800 	mul.w	r8, r8, r0
 80012e8:	b2a4      	uxth	r4, r4
 80012ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012ee:	45a0      	cmp	r8, r4
 80012f0:	d907      	bls.n	8001302 <__udivmoddi4+0x10e>
 80012f2:	193c      	adds	r4, r7, r4
 80012f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80012f8:	d202      	bcs.n	8001300 <__udivmoddi4+0x10c>
 80012fa:	45a0      	cmp	r8, r4
 80012fc:	f200 80d9 	bhi.w	80014b2 <__udivmoddi4+0x2be>
 8001300:	4610      	mov	r0, r2
 8001302:	eba4 0408 	sub.w	r4, r4, r8
 8001306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800130a:	e7c0      	b.n	800128e <__udivmoddi4+0x9a>
 800130c:	428b      	cmp	r3, r1
 800130e:	d908      	bls.n	8001322 <__udivmoddi4+0x12e>
 8001310:	2e00      	cmp	r6, #0
 8001312:	f000 80b1 	beq.w	8001478 <__udivmoddi4+0x284>
 8001316:	2100      	movs	r1, #0
 8001318:	e9c6 0500 	strd	r0, r5, [r6]
 800131c:	4608      	mov	r0, r1
 800131e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001322:	fab3 f183 	clz	r1, r3
 8001326:	2900      	cmp	r1, #0
 8001328:	d14b      	bne.n	80013c2 <__udivmoddi4+0x1ce>
 800132a:	42ab      	cmp	r3, r5
 800132c:	d302      	bcc.n	8001334 <__udivmoddi4+0x140>
 800132e:	4282      	cmp	r2, r0
 8001330:	f200 80b9 	bhi.w	80014a6 <__udivmoddi4+0x2b2>
 8001334:	1a84      	subs	r4, r0, r2
 8001336:	eb65 0303 	sbc.w	r3, r5, r3
 800133a:	2001      	movs	r0, #1
 800133c:	469e      	mov	lr, r3
 800133e:	2e00      	cmp	r6, #0
 8001340:	d0aa      	beq.n	8001298 <__udivmoddi4+0xa4>
 8001342:	e9c6 4e00 	strd	r4, lr, [r6]
 8001346:	e7a7      	b.n	8001298 <__udivmoddi4+0xa4>
 8001348:	409f      	lsls	r7, r3
 800134a:	f1c3 0220 	rsb	r2, r3, #32
 800134e:	40d1      	lsrs	r1, r2
 8001350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001354:	fbb1 f0fe 	udiv	r0, r1, lr
 8001358:	fa1f f887 	uxth.w	r8, r7
 800135c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001360:	fa24 f202 	lsr.w	r2, r4, r2
 8001364:	409d      	lsls	r5, r3
 8001366:	fb00 fc08 	mul.w	ip, r0, r8
 800136a:	432a      	orrs	r2, r5
 800136c:	0c15      	lsrs	r5, r2, #16
 800136e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001372:	45ac      	cmp	ip, r5
 8001374:	fa04 f403 	lsl.w	r4, r4, r3
 8001378:	d909      	bls.n	800138e <__udivmoddi4+0x19a>
 800137a:	197d      	adds	r5, r7, r5
 800137c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001380:	f080 808f 	bcs.w	80014a2 <__udivmoddi4+0x2ae>
 8001384:	45ac      	cmp	ip, r5
 8001386:	f240 808c 	bls.w	80014a2 <__udivmoddi4+0x2ae>
 800138a:	3802      	subs	r0, #2
 800138c:	443d      	add	r5, r7
 800138e:	eba5 050c 	sub.w	r5, r5, ip
 8001392:	fbb5 f1fe 	udiv	r1, r5, lr
 8001396:	fb0e 5c11 	mls	ip, lr, r1, r5
 800139a:	fb01 f908 	mul.w	r9, r1, r8
 800139e:	b295      	uxth	r5, r2
 80013a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80013a4:	45a9      	cmp	r9, r5
 80013a6:	d907      	bls.n	80013b8 <__udivmoddi4+0x1c4>
 80013a8:	197d      	adds	r5, r7, r5
 80013aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80013ae:	d274      	bcs.n	800149a <__udivmoddi4+0x2a6>
 80013b0:	45a9      	cmp	r9, r5
 80013b2:	d972      	bls.n	800149a <__udivmoddi4+0x2a6>
 80013b4:	3902      	subs	r1, #2
 80013b6:	443d      	add	r5, r7
 80013b8:	eba5 0509 	sub.w	r5, r5, r9
 80013bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013c0:	e778      	b.n	80012b4 <__udivmoddi4+0xc0>
 80013c2:	f1c1 0720 	rsb	r7, r1, #32
 80013c6:	408b      	lsls	r3, r1
 80013c8:	fa22 fc07 	lsr.w	ip, r2, r7
 80013cc:	ea4c 0c03 	orr.w	ip, ip, r3
 80013d0:	fa25 f407 	lsr.w	r4, r5, r7
 80013d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80013d8:	fbb4 f9fe 	udiv	r9, r4, lr
 80013dc:	fa1f f88c 	uxth.w	r8, ip
 80013e0:	fb0e 4419 	mls	r4, lr, r9, r4
 80013e4:	fa20 f307 	lsr.w	r3, r0, r7
 80013e8:	fb09 fa08 	mul.w	sl, r9, r8
 80013ec:	408d      	lsls	r5, r1
 80013ee:	431d      	orrs	r5, r3
 80013f0:	0c2b      	lsrs	r3, r5, #16
 80013f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80013f6:	45a2      	cmp	sl, r4
 80013f8:	fa02 f201 	lsl.w	r2, r2, r1
 80013fc:	fa00 f301 	lsl.w	r3, r0, r1
 8001400:	d909      	bls.n	8001416 <__udivmoddi4+0x222>
 8001402:	eb1c 0404 	adds.w	r4, ip, r4
 8001406:	f109 30ff 	add.w	r0, r9, #4294967295
 800140a:	d248      	bcs.n	800149e <__udivmoddi4+0x2aa>
 800140c:	45a2      	cmp	sl, r4
 800140e:	d946      	bls.n	800149e <__udivmoddi4+0x2aa>
 8001410:	f1a9 0902 	sub.w	r9, r9, #2
 8001414:	4464      	add	r4, ip
 8001416:	eba4 040a 	sub.w	r4, r4, sl
 800141a:	fbb4 f0fe 	udiv	r0, r4, lr
 800141e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001422:	fb00 fa08 	mul.w	sl, r0, r8
 8001426:	b2ad      	uxth	r5, r5
 8001428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800142c:	45a2      	cmp	sl, r4
 800142e:	d908      	bls.n	8001442 <__udivmoddi4+0x24e>
 8001430:	eb1c 0404 	adds.w	r4, ip, r4
 8001434:	f100 35ff 	add.w	r5, r0, #4294967295
 8001438:	d22d      	bcs.n	8001496 <__udivmoddi4+0x2a2>
 800143a:	45a2      	cmp	sl, r4
 800143c:	d92b      	bls.n	8001496 <__udivmoddi4+0x2a2>
 800143e:	3802      	subs	r0, #2
 8001440:	4464      	add	r4, ip
 8001442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001446:	fba0 8902 	umull	r8, r9, r0, r2
 800144a:	eba4 040a 	sub.w	r4, r4, sl
 800144e:	454c      	cmp	r4, r9
 8001450:	46c6      	mov	lr, r8
 8001452:	464d      	mov	r5, r9
 8001454:	d319      	bcc.n	800148a <__udivmoddi4+0x296>
 8001456:	d016      	beq.n	8001486 <__udivmoddi4+0x292>
 8001458:	b15e      	cbz	r6, 8001472 <__udivmoddi4+0x27e>
 800145a:	ebb3 020e 	subs.w	r2, r3, lr
 800145e:	eb64 0405 	sbc.w	r4, r4, r5
 8001462:	fa04 f707 	lsl.w	r7, r4, r7
 8001466:	fa22 f301 	lsr.w	r3, r2, r1
 800146a:	431f      	orrs	r7, r3
 800146c:	40cc      	lsrs	r4, r1
 800146e:	e9c6 7400 	strd	r7, r4, [r6]
 8001472:	2100      	movs	r1, #0
 8001474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001478:	4631      	mov	r1, r6
 800147a:	4630      	mov	r0, r6
 800147c:	e70c      	b.n	8001298 <__udivmoddi4+0xa4>
 800147e:	468c      	mov	ip, r1
 8001480:	e6eb      	b.n	800125a <__udivmoddi4+0x66>
 8001482:	4610      	mov	r0, r2
 8001484:	e6ff      	b.n	8001286 <__udivmoddi4+0x92>
 8001486:	4543      	cmp	r3, r8
 8001488:	d2e6      	bcs.n	8001458 <__udivmoddi4+0x264>
 800148a:	ebb8 0e02 	subs.w	lr, r8, r2
 800148e:	eb69 050c 	sbc.w	r5, r9, ip
 8001492:	3801      	subs	r0, #1
 8001494:	e7e0      	b.n	8001458 <__udivmoddi4+0x264>
 8001496:	4628      	mov	r0, r5
 8001498:	e7d3      	b.n	8001442 <__udivmoddi4+0x24e>
 800149a:	4611      	mov	r1, r2
 800149c:	e78c      	b.n	80013b8 <__udivmoddi4+0x1c4>
 800149e:	4681      	mov	r9, r0
 80014a0:	e7b9      	b.n	8001416 <__udivmoddi4+0x222>
 80014a2:	4608      	mov	r0, r1
 80014a4:	e773      	b.n	800138e <__udivmoddi4+0x19a>
 80014a6:	4608      	mov	r0, r1
 80014a8:	e749      	b.n	800133e <__udivmoddi4+0x14a>
 80014aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80014ae:	443d      	add	r5, r7
 80014b0:	e713      	b.n	80012da <__udivmoddi4+0xe6>
 80014b2:	3802      	subs	r0, #2
 80014b4:	443c      	add	r4, r7
 80014b6:	e724      	b.n	8001302 <__udivmoddi4+0x10e>

080014b8 <__aeabi_idiv0>:
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <Algo_Init>:
static uint32_t TimeOfReloadRequest;

void Algo_task(uint32_t u32CurrentTime_ms);

void Algo_Init(void const * argument)
{
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b0b0      	sub	sp, #192	; 0xc0
 80014c0:	af04      	add	r7, sp, #16
 80014c2:	6078      	str	r0, [r7, #4]
	static Mobj UFEC23;
	const PF_MotorOpeningsParam_t* pGrillMotorParam = PB_GetGrillMotorParam();
 80014c4:	f000 fe72 	bl	80021ac <PB_GetGrillMotorParam>
 80014c8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	const PF_MotorOpeningsParam_t* pPrimaryMotorParam = PB_GetPrimaryMotorParam();
 80014cc:	f000 fe5a 	bl	8002184 <PB_GetPrimaryMotorParam>
 80014d0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	const PF_MotorOpeningsParam_t* pSecondaryMotorParam = PB_GetSecondaryMotorParam();
 80014d4:	f000 fe60 	bl	8002198 <PB_GetSecondaryMotorParam>
 80014d8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	const PF_CombTempParam_t* pTemperatureParam = PB_GetTemperatureParam();
 80014dc:	f000 fe48 	bl	8002170 <PB_GetTemperatureParam>
 80014e0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	const PF_UsrParam* pUserParam = PB_GetUserParam();
 80014e4:	f000 fe6c 	bl	80021c0 <PB_GetUserParam>
 80014e8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98




	Temperature_Init();
 80014ec:	f001 f976 	bl	80027dc <Temperature_Init>
	PARAMFILE_Init();
 80014f0:	f000 fdf6 	bl	80020e0 <PARAMFILE_Init>
	ESPMANAGER_Init();
 80014f4:	f000 f8ca 	bl	800168c <ESPMANAGER_Init>
	Particle_Init();
 80014f8:	f000 ff5a 	bl	80023b0 <Particle_Init>

	// Print all parameters into the debug file
	for(uint32_t ix = 0; ix < PARAMFILE_GetParamEntryCount(); ix++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001502:	e038      	b.n	8001576 <Algo_Init+0xba>
	{
	  const PFL_SParameterItem* pParamItem = PARAMFILE_GetParamEntryByIndex(ix);
 8001504:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001508:	f000 fe08 	bl	800211c <PARAMFILE_GetParamEntryByIndex>
 800150c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	  if (pParamItem == NULL)
 8001510:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001514:	2b00      	cmp	r3, #0
 8001516:	d028      	beq.n	800156a <Algo_Init+0xae>
		  continue;

	  char tmp[128+1];
	  int32_t s32Value;
	  PFL_GetValueInt32(&PARAMFILE_g_sHandle, pParamItem->szKey, &s32Value);
 8001518:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001522:	4619      	mov	r1, r3
 8001524:	4827      	ldr	r0, [pc, #156]	; (80015c4 <Algo_Init+0x108>)
 8001526:	f000 fe9c 	bl	8002262 <PFL_GetValueInt32>
	  snprintf(tmp, sizeof(tmp), "%s | %d (default: %d, min: %d, max: %d)", pParamItem->szKey, (int)s32Value, (int)pParamItem->uType.sInt32.s32Default, (int)pParamItem->uType.sInt32.s32Min, (int)pParamItem->uType.sInt32.s32Max);
 800152a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800152e:	681d      	ldr	r5, [r3, #0]
 8001530:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001534:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001538:	6912      	ldr	r2, [r2, #16]
 800153a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800153e:	6949      	ldr	r1, [r1, #20]
 8001540:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001544:	6980      	ldr	r0, [r0, #24]
 8001546:	f107 040c 	add.w	r4, r7, #12
 800154a:	9003      	str	r0, [sp, #12]
 800154c:	9102      	str	r1, [sp, #8]
 800154e:	9201      	str	r2, [sp, #4]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	462b      	mov	r3, r5
 8001554:	4a1c      	ldr	r2, [pc, #112]	; (80015c8 <Algo_Init+0x10c>)
 8001556:	2181      	movs	r1, #129	; 0x81
 8001558:	4620      	mov	r0, r4
 800155a:	f00c fe07 	bl	800e16c <sniprintf>
	  printf(tmp);
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4618      	mov	r0, r3
 8001564:	f00c fdea 	bl	800e13c <iprintf>
 8001568:	e000      	b.n	800156c <Algo_Init+0xb0>
		  continue;
 800156a:	bf00      	nop
	for(uint32_t ix = 0; ix < PARAMFILE_GetParamEntryCount(); ix++)
 800156c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001570:	3301      	adds	r3, #1
 8001572:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001576:	f000 fdc7 	bl	8002108 <PARAMFILE_GetParamEntryCount>
 800157a:	4602      	mov	r2, r0
 800157c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001580:	4293      	cmp	r3, r2
 8001582:	d3bf      	bcc.n	8001504 <Algo_Init+0x48>
	}


    for(;;)
    {
    	TemperatureManager(&UFEC23,osKernelSysTick());
 8001584:	f008 fe47 	bl	800a216 <osKernelSysTick>
 8001588:	4603      	mov	r3, r0
 800158a:	4619      	mov	r1, r3
 800158c:	480f      	ldr	r0, [pc, #60]	; (80015cc <Algo_Init+0x110>)
 800158e:	f001 f957 	bl	8002840 <TemperatureManager>
    	DebugManager(&UFEC23,osKernelSysTick());
 8001592:	f008 fe40 	bl	800a216 <osKernelSysTick>
 8001596:	4603      	mov	r3, r0
 8001598:	4619      	mov	r1, r3
 800159a:	480c      	ldr	r0, [pc, #48]	; (80015cc <Algo_Init+0x110>)
 800159c:	f000 f838 	bl	8001610 <DebugManager>
    	ESPMANAGER_Task();
 80015a0:	f000 f8a4 	bl	80016ec <ESPMANAGER_Task>
    	ParticlesManager(osKernelSysTick());
 80015a4:	f008 fe37 	bl	800a216 <osKernelSysTick>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 ff3e 	bl	800242c <ParticlesManager>
    	Algo_task(osKernelSysTick());
 80015b0:	f008 fe31 	bl	800a216 <osKernelSysTick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f80a 	bl	80015d0 <Algo_task>
    	osDelay(10);
 80015bc:	200a      	movs	r0, #10
 80015be:	f008 fe86 	bl	800a2ce <osDelay>
    	TemperatureManager(&UFEC23,osKernelSysTick());
 80015c2:	e7df      	b.n	8001584 <Algo_Init+0xc8>
 80015c4:	200035d0 	.word	0x200035d0
 80015c8:	08011240 	.word	0x08011240
 80015cc:	2000034c 	.word	0x2000034c

080015d0 <Algo_task>:
    }

}

void Algo_task(uint32_t u32CurrentTime_ms)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	static uint32_t u32LastTime_ms = 0;
	static uint8_t caca_cadeau[6] = {0xAA,0xBB,0xCC,0xDD,0xEE,0xFF};

	if(u32CurrentTime_ms - u32LastTime_ms > SECONDS(1))
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <Algo_task+0x34>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015e4:	d909      	bls.n	80015fa <Algo_task+0x2a>
	{
		xMessageBufferSend(MotorControlHanlde,caca_cadeau,6,0);
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <Algo_task+0x38>)
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	2300      	movs	r3, #0
 80015ec:	2206      	movs	r2, #6
 80015ee:	4907      	ldr	r1, [pc, #28]	; (800160c <Algo_task+0x3c>)
 80015f0:	f009 fcbb 	bl	800af6a <xStreamBufferSend>
		//xQueueSend(MotorControlsHandle,u16MotorControls,0);
		u32LastTime_ms = u32CurrentTime_ms;
 80015f4:	4a03      	ldr	r2, [pc, #12]	; (8001604 <Algo_task+0x34>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
	}

}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000364 	.word	0x20000364
 8001608:	200036e8 	.word	0x200036e8
 800160c:	20000000 	.word	0x20000000

08001610 <DebugManager>:
/* Private variables ---------------------------------------------------------*/
/* Private function ---------------------------------------------------------*/


void DebugManager(Mobj * stove, uint32_t u32time_ms)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	static uint32_t u32LastTimeInDebug = 0;

	if(u32time_ms - u32LastTimeInDebug > SECONDS(5))
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <DebugManager+0x50>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d916      	bls.n	8001658 <DebugManager+0x48>
	{
		printf("%.2f\r\n",stove->fBaffleTemp);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff74 	bl	800051c <__aeabi_f2d>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	480a      	ldr	r0, [pc, #40]	; (8001664 <DebugManager+0x54>)
 800163a:	f00c fd7f 	bl	800e13c <iprintf>
		printf("%.2f\r\n",stove->fBaffleDeltaT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff6a 	bl	800051c <__aeabi_f2d>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <DebugManager+0x54>)
 800164e:	f00c fd75 	bl	800e13c <iprintf>
		//printf("%.2f\r\n",stove->fChamberTemp);
		//printf("%.2f\r\n",stove->fPlenumTemp);
		u32LastTimeInDebug = u32time_ms;
 8001652:	4a03      	ldr	r2, [pc, #12]	; (8001660 <DebugManager+0x50>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	6013      	str	r3, [r2, #0]
	}
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000368 	.word	0x20000368
 8001664:	08011268 	.word	0x08011268

08001668 <__io_putchar>:
 extern "C" {
#endif

extern UART_HandleTypeDef huart1;

int __io_putchar(int ch) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001670:	1d39      	adds	r1, r7, #4
 8001672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001676:	2201      	movs	r2, #1
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <__io_putchar+0x20>)
 800167a:	f007 fe5b 	bl	8009334 <HAL_UART_Transmit>
  return ch;
 800167e:	687b      	ldr	r3, [r7, #4]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200036ec 	.word	0x200036ec

0800168c <ESPMANAGER_Init>:
// --------
// Bridge state
static SBridgeState m_sBridgeState;

void ESPMANAGER_Init()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	// Initialize bridge ...
	m_sBridgeState.u32GetParameterCurrentIndex = 0;
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <ESPMANAGER_Init+0x3c>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

	m_last_DMA_count = 0;
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <ESPMANAGER_Init+0x40>)
 8001698:	2200      	movs	r2, #0
 800169a:	801a      	strh	r2, [r3, #0]

    // Encoder
    UARTPROTOCOLENC_Init(&m_sHandleEncoder, &m_sConfigEncoder);
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <ESPMANAGER_Init+0x44>)
 800169e:	480d      	ldr	r0, [pc, #52]	; (80016d4 <ESPMANAGER_Init+0x48>)
 80016a0:	f002 fedc 	bl	800445c <UARTPROTOCOLENC_Init>

    // Decoder
    UARTPROTOCOLDEC_Init(&m_sHandleDecoder, &m_sConfigDecoder);
 80016a4:	490c      	ldr	r1, [pc, #48]	; (80016d8 <ESPMANAGER_Init+0x4c>)
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <ESPMANAGER_Init+0x50>)
 80016a8:	f002 fd2a 	bl	8004100 <UARTPROTOCOLDEC_Init>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, m_u8UART_RX_DMABuffers, MAX_RX_DMA_SIZE);
 80016ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b0:	490b      	ldr	r1, [pc, #44]	; (80016e0 <ESPMANAGER_Init+0x54>)
 80016b2:	480c      	ldr	r0, [pc, #48]	; (80016e4 <ESPMANAGER_Init+0x58>)
 80016b4:	f007 ff63 	bl	800957e <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UART_RegisterCallback(&huart2, HAL_UART_ERROR_CB_ID, UARTErrorCb);
 80016b8:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <ESPMANAGER_Init+0x5c>)
 80016ba:	2104      	movs	r1, #4
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <ESPMANAGER_Init+0x58>)
 80016be:	f007 fd93 	bl	80091e8 <HAL_UART_RegisterCallback>
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000c1c 	.word	0x20000c1c
 80016cc:	2000076c 	.word	0x2000076c
 80016d0:	20000008 	.word	0x20000008
 80016d4:	200007f0 	.word	0x200007f0
 80016d8:	2000000c 	.word	0x2000000c
 80016dc:	20000bf8 	.word	0x20000bf8
 80016e0:	2000036c 	.word	0x2000036c
 80016e4:	2000377c 	.word	0x2000377c
 80016e8:	080017a9 	.word	0x080017a9

080016ec <ESPMANAGER_Task>:

void ESPMANAGER_Task(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0


		if (m_bNeedRestartDMA)
 80016f2:	4b27      	ldr	r3, [pc, #156]	; (8001790 <ESPMANAGER_Task+0xa4>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <ESPMANAGER_Task+0x22>
		{
			m_bNeedRestartDMA = false;
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <ESPMANAGER_Task+0xa4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, m_u8UART_RX_DMABuffers, MAX_RX_DMA_SIZE);
 8001702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001706:	4923      	ldr	r1, [pc, #140]	; (8001794 <ESPMANAGER_Task+0xa8>)
 8001708:	4823      	ldr	r0, [pc, #140]	; (8001798 <ESPMANAGER_Task+0xac>)
 800170a:	f007 ff38 	bl	800957e <HAL_UARTEx_ReceiveToIdle_DMA>
		}

		const uint16_t u16DMA_count = (uint16_t)(MAX_RX_DMA_SIZE - hdma_usart2_rx.Instance->CNDTR);
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <ESPMANAGER_Task+0xb0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	b29b      	uxth	r3, r3
 8001716:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800171a:	80fb      	strh	r3, [r7, #6]

		if(u16DMA_count > m_last_DMA_count)
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <ESPMANAGER_Task+0xb4>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	88fa      	ldrh	r2, [r7, #6]
 8001722:	429a      	cmp	r2, r3
 8001724:	d911      	bls.n	800174a <ESPMANAGER_Task+0x5e>
		{
			UARTPROTOCOLDEC_HandleIn(&m_sHandleDecoder,&m_u8UART_RX_DMABuffers[m_last_DMA_count],(uint16_t)(u16DMA_count-m_last_DMA_count));
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <ESPMANAGER_Task+0xb4>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <ESPMANAGER_Task+0xa8>)
 800172e:	18d1      	adds	r1, r2, r3
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <ESPMANAGER_Task+0xb4>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	88fa      	ldrh	r2, [r7, #6]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	b29b      	uxth	r3, r3
 800173a:	461a      	mov	r2, r3
 800173c:	4819      	ldr	r0, [pc, #100]	; (80017a4 <ESPMANAGER_Task+0xb8>)
 800173e:	f002 fd1d 	bl	800417c <UARTPROTOCOLDEC_HandleIn>
			m_last_DMA_count = u16DMA_count;
 8001742:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <ESPMANAGER_Task+0xb4>)
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	8013      	strh	r3, [r2, #0]

			m_last_DMA_count = u16DMA_count;
		}


}
 8001748:	e01e      	b.n	8001788 <ESPMANAGER_Task+0x9c>
		else if(u16DMA_count < m_last_DMA_count)
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <ESPMANAGER_Task+0xb4>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	88fa      	ldrh	r2, [r7, #6]
 8001750:	429a      	cmp	r2, r3
 8001752:	d219      	bcs.n	8001788 <ESPMANAGER_Task+0x9c>
			UARTPROTOCOLDEC_HandleIn(&m_sHandleDecoder,&m_u8UART_RX_DMABuffers[m_last_DMA_count],(uint16_t)(MAX_RX_DMA_SIZE-m_last_DMA_count));
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <ESPMANAGER_Task+0xb4>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <ESPMANAGER_Task+0xa8>)
 800175c:	18d1      	adds	r1, r2, r3
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <ESPMANAGER_Task+0xb4>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001766:	b29b      	uxth	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	480e      	ldr	r0, [pc, #56]	; (80017a4 <ESPMANAGER_Task+0xb8>)
 800176c:	f002 fd06 	bl	800417c <UARTPROTOCOLDEC_HandleIn>
			if(u16DMA_count != 0)
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <ESPMANAGER_Task+0x96>
				UARTPROTOCOLDEC_HandleIn(&m_sHandleDecoder,m_u8UART_RX_DMABuffers,(uint32_t)(u16DMA_count));
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	461a      	mov	r2, r3
 800177a:	4906      	ldr	r1, [pc, #24]	; (8001794 <ESPMANAGER_Task+0xa8>)
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <ESPMANAGER_Task+0xb8>)
 800177e:	f002 fcfd 	bl	800417c <UARTPROTOCOLDEC_HandleIn>
			m_last_DMA_count = u16DMA_count;
 8001782:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <ESPMANAGER_Task+0xb4>)
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	8013      	strh	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000c18 	.word	0x20000c18
 8001794:	2000036c 	.word	0x2000036c
 8001798:	2000377c 	.word	0x2000377c
 800179c:	200035dc 	.word	0x200035dc
 80017a0:	2000076c 	.word	0x2000076c
 80017a4:	20000bf8 	.word	0x20000bf8

080017a8 <UARTErrorCb>:

static void UARTErrorCb(UART_HandleTypeDef *huart)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	// If there is not enough activity it seems to trigger an error
	// in that case we need to restart the DMA
	m_bNeedRestartDMA = true;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <UARTErrorCb+0x18>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	20000c18 	.word	0x20000c18

080017c4 <EncWriteUART>:

static void EncWriteUART(const UARTPROTOCOLENC_SHandle* psHandle, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
    //uart_write_bytes(HWGPIO_BRIDGEUART_PORT_NUM, u8Datas, u32DataLen);
	// Write byte into UART ...
	HAL_UART_Transmit(&huart2, (uint8_t*)u8Datas, (uint16_t)u32DataLen, 500);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <EncWriteUART+0x24>)
 80017dc:	f007 fdaa 	bl	8009334 <HAL_UART_Transmit>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000377c 	.word	0x2000377c

080017ec <DecAcceptFrame>:


static void DecAcceptFrame(const UARTPROTOCOLDEC_SHandle* psHandle, uint8_t u8ID, const uint8_t u8Payloads[], uint16_t u16PayloadLen)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b09a      	sub	sp, #104	; 0x68
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	460b      	mov	r3, r1
 80017fa:	72fb      	strb	r3, [r7, #11]
 80017fc:	4613      	mov	r3, r2
 80017fe:	813b      	strh	r3, [r7, #8]
	switch((UFEC23PROTOCOL_FRAMEID)u8ID)
 8001800:	7afb      	ldrb	r3, [r7, #11]
 8001802:	2b10      	cmp	r3, #16
 8001804:	f000 8098 	beq.w	8001938 <DecAcceptFrame+0x14c>
 8001808:	2b10      	cmp	r3, #16
 800180a:	f300 80c7 	bgt.w	800199c <DecAcceptFrame+0x1b0>
 800180e:	2b01      	cmp	r3, #1
 8001810:	d002      	beq.n	8001818 <DecAcceptFrame+0x2c>
 8001812:	2b0f      	cmp	r3, #15
 8001814:	d020      	beq.n	8001858 <DecAcceptFrame+0x6c>
		}
		//case UFEC23PROTOCOL_FRAMEID_C2SCommitParameter:
		//	break;
		default:
			// TODO: Not a valid protocol ID... Do something? Throw into UART log?
			break;
 8001816:	e0c1      	b.n	800199c <DecAcceptFrame+0x1b0>
			if (!UFEC23ENDEC_A2AReqPingAliveDecode(&reqPing, u8Payloads, u16PayloadLen))
 8001818:	893a      	ldrh	r2, [r7, #8]
 800181a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fee0 	bl	80045e6 <UFEC23ENDEC_A2AReqPingAliveDecode>
 8001826:	4603      	mov	r3, r0
 8001828:	f083 0301 	eor.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	f040 80b6 	bne.w	80019a0 <DecAcceptFrame+0x1b4>
			const uint16_t u16Len = (uint16_t)UFEC23ENDEC_A2AReqPingAliveEncode(m_u8UARTOutputBuffers, UART_OUTBUFFER_LEN, &reqPing);
 8001834:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001838:	461a      	mov	r2, r3
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	485d      	ldr	r0, [pc, #372]	; (80019b4 <DecAcceptFrame+0x1c8>)
 800183e:	f002 febc 	bl	80045ba <UFEC23ENDEC_A2AReqPingAliveEncode>
 8001842:	4603      	mov	r3, r0
 8001844:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			UARTPROTOCOLENC_Send(&m_sHandleEncoder, UFEC23PROTOCOL_FRAMEID_A2AReqPingAliveResp, m_u8UARTOutputBuffers, u16Len);
 8001848:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800184c:	4a59      	ldr	r2, [pc, #356]	; (80019b4 <DecAcceptFrame+0x1c8>)
 800184e:	2181      	movs	r1, #129	; 0x81
 8001850:	4859      	ldr	r0, [pc, #356]	; (80019b8 <DecAcceptFrame+0x1cc>)
 8001852:	f002 fe2d 	bl	80044b0 <UARTPROTOCOLENC_Send>
			break;
 8001856:	e0a8      	b.n	80019aa <DecAcceptFrame+0x1be>
			if(!UFEC23ENDEC_C2SGetParameterDecode(&param, u8Payloads,(uint32_t) u16PayloadLen))
 8001858:	893a      	ldrh	r2, [r7, #8]
 800185a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	f002 fed5 	bl	8004610 <UFEC23ENDEC_C2SGetParameterDecode>
 8001866:	4603      	mov	r3, r0
 8001868:	f083 0301 	eor.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 8098 	bne.w	80019a4 <DecAcceptFrame+0x1b8>
			const uint32_t u32ParamEntryCount = PARAMFILE_GetParamEntryCount();
 8001874:	f000 fc48 	bl	8002108 <PARAMFILE_GetParamEntryCount>
 8001878:	6638      	str	r0, [r7, #96]	; 0x60
			if (param.eIterateOp == UFEC23ENDEC_EITERATEOP_First)
 800187a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800187e:	2b00      	cmp	r3, #0
 8001880:	d103      	bne.n	800188a <DecAcceptFrame+0x9e>
				m_sBridgeState.u32GetParameterCurrentIndex = 0;
 8001882:	4b4e      	ldr	r3, [pc, #312]	; (80019bc <DecAcceptFrame+0x1d0>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e008      	b.n	800189c <DecAcceptFrame+0xb0>
			else if (param.eIterateOp == UFEC23ENDEC_EITERATEOP_Next)
 800188a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800188e:	2b01      	cmp	r3, #1
 8001890:	d104      	bne.n	800189c <DecAcceptFrame+0xb0>
				m_sBridgeState.u32GetParameterCurrentIndex++; // Next record ....
 8001892:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <DecAcceptFrame+0x1d0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	4a48      	ldr	r2, [pc, #288]	; (80019bc <DecAcceptFrame+0x1d0>)
 800189a:	6013      	str	r3, [r2, #0]
			sResp.bHasRecord = false;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			sResp.bIsEOF = true;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			if (m_sBridgeState.u32GetParameterCurrentIndex < u32ParamEntryCount)
 80018a8:	4b44      	ldr	r3, [pc, #272]	; (80019bc <DecAcceptFrame+0x1d0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d930      	bls.n	8001914 <DecAcceptFrame+0x128>
				const PFL_SParameterItem* pParamItem = PARAMFILE_GetParamEntryByIndex(m_sBridgeState.u32GetParameterCurrentIndex);
 80018b2:	4b42      	ldr	r3, [pc, #264]	; (80019bc <DecAcceptFrame+0x1d0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fc30 	bl	800211c <PARAMFILE_GetParamEntryByIndex>
 80018bc:	65f8      	str	r0, [r7, #92]	; 0x5c
				if (pParamItem != NULL && pParamItem->eType == PFL_TYPE_Int32)
 80018be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d027      	beq.n	8001914 <DecAcceptFrame+0x128>
 80018c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c6:	7a1b      	ldrb	r3, [r3, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d123      	bne.n	8001914 <DecAcceptFrame+0x128>
					sResp.bHasRecord = true;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					sResp.bIsEOF = false;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					sResp.sEntry.eParamType = UFEC23ENDEC_EPARAMTYPE_Int32;
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					sResp.sEntry.uType.sInt32.s32Default = pParamItem->uType.sInt32.s32Default;
 80018de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
					sResp.sEntry.uType.sInt32.s32Min = pParamItem->uType.sInt32.s32Min;
 80018e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
					sResp.sEntry.uType.sInt32.s32Max = pParamItem->uType.sInt32.s32Max;
 80018ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
					strcpy(sResp.sEntry.szKey, pParamItem->szKey);
 80018f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f00c fc6a 	bl	800e1d4 <strcpy>
					PFL_GetValueInt32(&PARAMFILE_g_sHandle, pParamItem->szKey, &s32Value);
 8001900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001908:	4619      	mov	r1, r3
 800190a:	482d      	ldr	r0, [pc, #180]	; (80019c0 <DecAcceptFrame+0x1d4>)
 800190c:	f000 fca9 	bl	8002262 <PFL_GetValueInt32>
					sResp.uValue.s32Value = s32Value;
 8001910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
			const uint16_t u16Len = (uint16_t)UFEC23ENDEC_S2CGetParameterRespEncode(m_u8UARTOutputBuffers, UART_OUTBUFFER_LEN, &sResp);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	461a      	mov	r2, r3
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	4825      	ldr	r0, [pc, #148]	; (80019b4 <DecAcceptFrame+0x1c8>)
 800191e:	f002 fe92 	bl	8004646 <UFEC23ENDEC_S2CGetParameterRespEncode>
 8001922:	4603      	mov	r3, r0
 8001924:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			UARTPROTOCOLENC_Send(&m_sHandleEncoder, UFEC23PROTOCOL_FRAMEID_S2CGetParameterResp, m_u8UARTOutputBuffers, u16Len);
 8001928:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800192c:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <DecAcceptFrame+0x1c8>)
 800192e:	218f      	movs	r1, #143	; 0x8f
 8001930:	4821      	ldr	r0, [pc, #132]	; (80019b8 <DecAcceptFrame+0x1cc>)
 8001932:	f002 fdbd 	bl	80044b0 <UARTPROTOCOLENC_Send>
			break;
 8001936:	e038      	b.n	80019aa <DecAcceptFrame+0x1be>
			if(!UFEC23ENDEC_C2SSetParameterDecode(&param, u8Payloads,(uint32_t) u16PayloadLen))
 8001938:	893a      	ldrh	r2, [r7, #8]
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	f002 ff0f 	bl	8004764 <UFEC23ENDEC_C2SSetParameterDecode>
 8001946:	4603      	mov	r3, r0
 8001948:	f083 0301 	eor.w	r3, r3, #1
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d12a      	bne.n	80019a8 <DecAcceptFrame+0x1bc>
			const PFL_ESETRET setRet = PFL_SetValueInt32(&PARAMFILE_g_sHandle, param.szKey, param.uValue.s32Value);
 8001952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4619      	mov	r1, r3
 800195a:	4819      	ldr	r0, [pc, #100]	; (80019c0 <DecAcceptFrame+0x1d4>)
 800195c:	f000 fca5 	bl	80022aa <PFL_SetValueInt32>
 8001960:	4603      	mov	r3, r0
 8001962:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				.eResult = (setRet == PFL_ESETRET_OK) ? UFEC23PROTOCOL_ERESULT_Ok : UFEC23PROTOCOL_ERESULT_Fail
 8001966:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf14      	ite	ne
 800196e:	2301      	movne	r3, #1
 8001970:	2300      	moveq	r3, #0
 8001972:	b2db      	uxtb	r3, r3
			UFEC23PROTOCOL_S2CSetParameterResp s2cSetParameterResp =
 8001974:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			const uint16_t u16Len = (uint16_t)UFEC23ENDEC_S2CSetParameterRespEncode(m_u8UARTOutputBuffers, UART_OUTBUFFER_LEN, &s2cSetParameterResp);
 8001978:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800197c:	461a      	mov	r2, r3
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <DecAcceptFrame+0x1c8>)
 8001982:	f002 ff32 	bl	80047ea <UFEC23ENDEC_S2CSetParameterRespEncode>
 8001986:	4603      	mov	r3, r0
 8001988:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			UARTPROTOCOLENC_Send(&m_sHandleEncoder, UFEC23PROTOCOL_FRAMEID_S2CSetParameterResp, m_u8UARTOutputBuffers, u16Len);
 800198c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001990:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <DecAcceptFrame+0x1c8>)
 8001992:	2190      	movs	r1, #144	; 0x90
 8001994:	4808      	ldr	r0, [pc, #32]	; (80019b8 <DecAcceptFrame+0x1cc>)
 8001996:	f002 fd8b 	bl	80044b0 <UARTPROTOCOLENC_Send>
			break;
 800199a:	e006      	b.n	80019aa <DecAcceptFrame+0x1be>
			break;
 800199c:	bf00      	nop
 800199e:	e004      	b.n	80019aa <DecAcceptFrame+0x1be>
				break;
 80019a0:	bf00      	nop
 80019a2:	e002      	b.n	80019aa <DecAcceptFrame+0x1be>
				break;
 80019a4:	bf00      	nop
 80019a6:	e000      	b.n	80019aa <DecAcceptFrame+0x1be>
				break;
 80019a8:	bf00      	nop
	}

}
 80019aa:	bf00      	nop
 80019ac:	3768      	adds	r7, #104	; 0x68
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000770 	.word	0x20000770
 80019b8:	200007f0 	.word	0x200007f0
 80019bc:	20000c1c 	.word	0x20000c1c
 80019c0:	200035d0 	.word	0x200035d0

080019c4 <DecDropFrame>:

static void DecDropFrame(const UARTPROTOCOLDEC_SHandle* psHandle, const char* szReason)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
    // Exists mostly for debug purpose
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <GetTimerCountMS>:

static int64_t GetTimerCountMS(const UARTPROTOCOLDEC_SHandle* psHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	return xTaskGetTickCount() * portTICK_PERIOD_MS;
 80019e0:	f00a f888 	bl	800baf4 <xTaskGetTickCount>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	f04f 0300 	mov.w	r3, #0
}
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <Motor_Init>:
#define Step1_2_3_SLEEP() HAL_GPIO_WritePin(uc_Stepper_Sleep_GPIO_Port,uc_Stepper_Sleep_Pin,GPIO_PIN_SET);
#define Step1_2_3_WAKE() HAL_GPIO_WritePin(uc_Stepper_Sleep_GPIO_Port,uc_Stepper_Sleep_Pin,GPIO_PIN_RESET);


void Motor_Init(void const * argument)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b093      	sub	sp, #76	; 0x4c
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(uc_Stepper_Sleep_GPIO_Port,uc_Stepper_Sleep_Pin,RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2110      	movs	r1, #16
 8001a04:	489d      	ldr	r0, [pc, #628]	; (8001c7c <Motor_Init+0x284>)
 8001a06:	f003 fe48 	bl	800569a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Stepper_HalfStep_GPIO_Port,Stepper_HalfStep_Pin,SET);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a10:	489b      	ldr	r0, [pc, #620]	; (8001c80 <Motor_Init+0x288>)
 8001a12:	f003 fe42 	bl	800569a <HAL_GPIO_WritePin>

	StepObj motor[NumberOfMotors] = {
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	2230      	movs	r2, #48	; 0x30
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f00b fdcc 	bl	800d5bc <memset>
 8001a24:	2306      	movs	r3, #6
 8001a26:	74bb      	strb	r3, [r7, #18]
 8001a28:	2306      	movs	r3, #6
 8001a2a:	74fb      	strb	r3, [r7, #19]
 8001a2c:	2361      	movs	r3, #97	; 0x61
 8001a2e:	753b      	strb	r3, [r7, #20]
 8001a30:	2306      	movs	r3, #6
 8001a32:	757b      	strb	r3, [r7, #21]
 8001a34:	2301      	movs	r3, #1
 8001a36:	f887 3020 	strb.w	r3, [r7, #32]
 8001a3a:	2361      	movs	r3, #97	; 0x61
 8001a3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001a40:	2302      	movs	r3, #2
 8001a42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001a46:	2306      	movs	r3, #6
 8001a48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001a4c:	2306      	movs	r3, #6
 8001a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001a52:	2361      	movs	r3, #97	; 0x61
 8001a54:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001a58:	2306      	movs	r3, #6
 8001a5a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			STEPPER_INIT(PrimaryStepper,PF_PRIMARY_MINIMUM_OPENING,PF_PRIMARY_FULL_OPEN),
			STEPPER_INIT(GrillStepper,PF_GRILL_MINIMUM_OPENING,PF_GRILL_FULL_OPEN),
			STEPPER_INIT(SecondaryStepper,PF_SECONDARY_MINIMUM_OPENING,PF_SECONDARY_FULL_OPEN)
			};

	uint8_t u8cmd_buf[6] = {0x00};
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	2300      	movs	r3, #0
 8001a64:	81bb      	strh	r3, [r7, #12]
	uint32_t u32CurrentTime_ms = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	643b      	str	r3, [r7, #64]	; 0x40

  for(;;)
  {
	  u32CurrentTime_ms = osKernelSysTick();
 8001a6a:	f008 fbd4 	bl	800a216 <osKernelSysTick>
 8001a6e:	6438      	str	r0, [r7, #64]	; 0x40

	  if(StepperAtSetpoint(&motor[PrimaryStepper]) && StepperAtSetpoint(&motor[GrillStepper])
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 f90b 	bl	8001c90 <StepperAtSetpoint>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d060      	beq.n	8001b42 <Motor_Init+0x14a>
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	3310      	adds	r3, #16
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f902 	bl	8001c90 <StepperAtSetpoint>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d057      	beq.n	8001b42 <Motor_Init+0x14a>
			  && StepperAtSetpoint(&motor[SecondaryStepper]))
 8001a92:	f107 0310 	add.w	r3, r7, #16
 8001a96:	3320      	adds	r3, #32
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f8f9 	bl	8001c90 <StepperAtSetpoint>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d04e      	beq.n	8001b42 <Motor_Init+0x14a>
	  {
		  if(xMessageBufferReceive(MotorControlHanlde, u8cmd_buf, 6, 10) == 6)
 8001aa4:	4b77      	ldr	r3, [pc, #476]	; (8001c84 <Motor_Init+0x28c>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	f107 0108 	add.w	r1, r7, #8
 8001aac:	230a      	movs	r3, #10
 8001aae:	2206      	movs	r2, #6
 8001ab0:	f009 fb3f 	bl	800b132 <xStreamBufferReceive>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	f040 80db 	bne.w	8001c72 <Motor_Init+0x27a>
		  {
			  for(uint8_t i = 0;i < NumberOfMotors;i++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001ac2:	e039      	b.n	8001b38 <Motor_Init+0x140>
			  {
				  motor[i].u8SetPoint = RANGE(motor->u8MinValue, u8cmd_buf[2*i], motor->u8MaxValue);
 8001ac4:	7d3a      	ldrb	r2, [r7, #20]
 8001ac6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	bf28      	it	cs
 8001ada:	4613      	movcs	r3, r2
 8001adc:	b2d9      	uxtb	r1, r3
 8001ade:	7d7a      	ldrb	r2, [r7, #21]
 8001ae0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ae4:	428a      	cmp	r2, r1
 8001ae6:	bf38      	it	cc
 8001ae8:	460a      	movcc	r2, r1
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001af2:	440b      	add	r3, r1
 8001af4:	3b35      	subs	r3, #53	; 0x35
 8001af6:	701a      	strb	r2, [r3, #0]
				  motor[i].fSecPerStep = (float) (u8cmd_buf[2*i + 1])/10;
 8001af8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	3301      	adds	r3, #1
 8001b00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001b04:	4413      	add	r3, r2
 8001b06:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f93c 	bl	8000d88 <__aeabi_ui2f>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8001b16:	495c      	ldr	r1, [pc, #368]	; (8001c88 <Motor_Init+0x290>)
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fa41 	bl	8000fa0 <__aeabi_fdiv>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	0123      	lsls	r3, r4, #4
 8001b24:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b28:	440b      	add	r3, r1
 8001b2a:	3b2c      	subs	r3, #44	; 0x2c
 8001b2c:	601a      	str	r2, [r3, #0]
			  for(uint8_t i = 0;i < NumberOfMotors;i++)
 8001b2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b32:	3301      	adds	r3, #1
 8001b34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001b38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d9c1      	bls.n	8001ac4 <Motor_Init+0xcc>
		  if(xMessageBufferReceive(MotorControlHanlde, u8cmd_buf, 6, 10) == 6)
 8001b40:	e097      	b.n	8001c72 <Motor_Init+0x27a>
			  }
		  }
	  }else
	  {
		  for(uint8_t i = 0;i < NumberOfMotors;i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001b48:	e08e      	b.n	8001c68 <Motor_Init+0x270>
		  {

			  if(!StepperAtSetpoint(&motor[i]))
 8001b4a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b4e:	f107 0210 	add.w	r2, r7, #16
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f89a 	bl	8001c90 <StepperAtSetpoint>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f083 0301 	eor.w	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d07a      	beq.n	8001c5e <Motor_Init+0x266>
			  {
				  if(motor[i].fSecPerStep == 0.0)
 8001b68:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001b72:	4413      	add	r3, r2
 8001b74:	3b2c      	subs	r3, #44	; 0x2c
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff faef 	bl	8001160 <__aeabi_fcmpeq>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d012      	beq.n	8001bae <Motor_Init+0x1b6>
				  {
					  StepperAdjustPosition(&motor[i],motor[i].u8SetPoint);
 8001b88:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b8c:	f107 0210 	add.w	r2, r7, #16
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	441a      	add	r2, r3
 8001b94:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b9e:	440b      	add	r3, r1
 8001ba0:	3b35      	subs	r3, #53	; 0x35
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4610      	mov	r0, r2
 8001baa:	f000 f883 	bl	8001cb4 <StepperAdjustPosition>
				  }
				  if(u32CurrentTime_ms - motor[i].u32LastMove_ms > motor[i].fSecPerStep*1000)
 8001bae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001bb8:	4413      	add	r3, r2
 8001bba:	3b30      	subs	r3, #48	; 0x30
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f8e0 	bl	8000d88 <__aeabi_ui2f>
 8001bc8:	4604      	mov	r4, r0
 8001bca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b2c      	subs	r3, #44	; 0x2c
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	492c      	ldr	r1, [pc, #176]	; (8001c8c <Motor_Init+0x294>)
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff f92b 	bl	8000e38 <__aeabi_fmul>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4619      	mov	r1, r3
 8001be6:	4620      	mov	r0, r4
 8001be8:	f7ff fae2 	bl	80011b0 <__aeabi_fcmpgt>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d035      	beq.n	8001c5e <Motor_Init+0x266>
				  {
					  StepperAdjustPosition(&motor[i],
 8001bf2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001bf6:	f107 0210 	add.w	r2, r7, #16
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	18d0      	adds	r0, r2, r3
							  motor[i].u8Position + (motor[i].u8SetPoint - motor[i].u8Position)/abs(motor[i].u8SetPoint - motor[i].u8Position));
 8001bfe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b36      	subs	r3, #54	; 0x36
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001c1a:	440a      	add	r2, r1
 8001c1c:	3a35      	subs	r2, #53	; 0x35
 8001c1e:	7812      	ldrb	r2, [r2, #0]
 8001c20:	4611      	mov	r1, r2
 8001c22:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001c2c:	4422      	add	r2, r4
 8001c2e:	3a36      	subs	r2, #54	; 0x36
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	1a8a      	subs	r2, r1, r2
 8001c34:	2a00      	cmp	r2, #0
 8001c36:	da02      	bge.n	8001c3e <Motor_Init+0x246>
 8001c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c3c:	e000      	b.n	8001c40 <Motor_Init+0x248>
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	b29b      	uxth	r3, r3
					  StepperAdjustPosition(&motor[i],
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	4619      	mov	r1, r3
 8001c48:	f000 f834 	bl	8001cb4 <StepperAdjustPosition>
					  motor[i].u32LastMove_ms = u32CurrentTime_ms;
 8001c4c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001c56:	4413      	add	r3, r2
 8001c58:	3b30      	subs	r3, #48	; 0x30
 8001c5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c5c:	601a      	str	r2, [r3, #0]
		  for(uint8_t i = 0;i < NumberOfMotors;i++)
 8001c5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001c62:	3301      	adds	r3, #1
 8001c64:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001c68:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	f67f af6c 	bls.w	8001b4a <Motor_Init+0x152>

		  }

	  }

	  osDelay(1);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f008 fb2b 	bl	800a2ce <osDelay>
	  u32CurrentTime_ms = osKernelSysTick();
 8001c78:	e6f7      	b.n	8001a6a <Motor_Init+0x72>
 8001c7a:	bf00      	nop
 8001c7c:	40011000 	.word	0x40011000
 8001c80:	40010c00 	.word	0x40010c00
 8001c84:	200036e8 	.word	0x200036e8
 8001c88:	41200000 	.word	0x41200000
 8001c8c:	447a0000 	.word	0x447a0000

08001c90 <StepperAtSetpoint>:


}

bool StepperAtSetpoint(StepObj * motor)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	return motor->u8Position == motor->u8SetPoint;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	789a      	ldrb	r2, [r3, #2]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	78db      	ldrb	r3, [r3, #3]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <StepperAdjustPosition>:


void StepperAdjustPosition(StepObj * motor, int16_t RequestedPosition)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
	int16_t StepToPerform = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	81fb      	strh	r3, [r7, #14]

    if(LimitSwitchActive((motor_t)motor->u8ID))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f8c9 	bl	8001e60 <LimitSwitchActive>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <StepperAdjustPosition+0x38>
    {
    	motor->u8Position = motor->u8MinValue;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	795a      	ldrb	r2, [r3, #5]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	709a      	strb	r2, [r3, #2]
    	StepToPerform = motor->u8Position - RequestedPosition;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	789b      	ldrb	r3, [r3, #2]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	81fb      	strh	r3, [r7, #14]
 8001cea:	e062      	b.n	8001db2 <StepperAdjustPosition+0xfe>
    }else if (motor->u8Position == motor->u8MinValue)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	789a      	ldrb	r2, [r3, #2]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	795b      	ldrb	r3, [r3, #5]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d15c      	bne.n	8001db2 <StepperAdjustPosition+0xfe>
    {
    	StepToPerform = 1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	81fb      	strh	r3, [r7, #14]
    }


    while (StepToPerform != 0)
 8001cfc:	e059      	b.n	8001db2 <StepperAdjustPosition+0xfe>
    {
    	vEnableStepper((motor_t)motor->u8ID);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f8e8 	bl	8001ed8 <vEnableStepper>
    	vStepperMaxTorque((motor_t)motor->u8ID,true);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f922 	bl	8001f58 <vStepperMaxTorque>

    	if(StepToPerform > 0)
 8001d14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	dd26      	ble.n	8001d6a <StepperAdjustPosition+0xb6>
		{
			vSetStepperMotorDirection((motor_t)motor->u8ID, Closing);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f990 	bl	8002048 <vSetStepperMotorDirection>
			motor->u8Position = motor->u8Position - 1;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	789b      	ldrb	r3, [r3, #2]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	709a      	strb	r2, [r3, #2]

			if (motor->u8Position < motor->u8MinValue)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	789a      	ldrb	r2, [r3, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	795b      	ldrb	r3, [r3, #5]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d208      	bcs.n	8001d52 <StepperAdjustPosition+0x9e>
			{
				motor->u8Position = motor->u8MinValue;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	795a      	ldrb	r2, [r3, #5]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	709a      	strb	r2, [r3, #2]
				vDisableStepper((motor_t)motor->u8ID);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f94f 	bl	8001ff0 <vDisableStepper>
			}

 			vToggleOneStep((motor_t)motor->u8ID);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f834 	bl	8001dc4 <vToggleOneStep>
			StepToPerform--;
 8001d5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	81fb      	strh	r3, [r7, #14]
 8001d68:	e023      	b.n	8001db2 <StepperAdjustPosition+0xfe>
		}
		else if(StepToPerform < 0)
 8001d6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	da1f      	bge.n	8001db2 <StepperAdjustPosition+0xfe>
		{
			vEnableStepper((motor_t)motor->u8ID);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f8ae 	bl	8001ed8 <vEnableStepper>
			osDelay(50);
 8001d7c:	2032      	movs	r0, #50	; 0x32
 8001d7e:	f008 faa6 	bl	800a2ce <osDelay>
			vSetStepperMotorDirection((motor_t)motor->u8ID, Opening);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2101      	movs	r1, #1
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 f95d 	bl	8002048 <vSetStepperMotorDirection>
			motor->u8Position = motor->u8Position + 1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	789b      	ldrb	r3, [r3, #2]
 8001d92:	3301      	adds	r3, #1
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	709a      	strb	r2, [r3, #2]
			vToggleOneStep((motor_t)motor->u8ID);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f810 	bl	8001dc4 <vToggleOneStep>
			StepToPerform = motor->u8Position - RequestedPosition;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	789b      	ldrb	r3, [r3, #2]
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	81fb      	strh	r3, [r7, #14]
    while (StepToPerform != 0)
 8001db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1a1      	bne.n	8001cfe <StepperAdjustPosition+0x4a>
		}
	}

}
 8001dba:	bf00      	nop
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <vToggleOneStep>:

void vToggleOneStep(motor_t Motor)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
    switch(Motor)
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d02a      	beq.n	8001e2a <vToggleOneStep+0x66>
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	dc39      	bgt.n	8001e4c <vToggleOneStep+0x88>
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <vToggleOneStep+0x1e>
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d011      	beq.n	8001e04 <vToggleOneStep+0x40>
            osDelay(10);
            Secondary_Step_SetHigh();
            osDelay(10);
            break;
        default:
            break;
 8001de0:	e034      	b.n	8001e4c <vToggleOneStep+0x88>
            Primary_Step_SetLow();
 8001de2:	2200      	movs	r2, #0
 8001de4:	2108      	movs	r1, #8
 8001de6:	481c      	ldr	r0, [pc, #112]	; (8001e58 <vToggleOneStep+0x94>)
 8001de8:	f003 fc57 	bl	800569a <HAL_GPIO_WritePin>
            osDelay(10);
 8001dec:	200a      	movs	r0, #10
 8001dee:	f008 fa6e 	bl	800a2ce <osDelay>
            Primary_Step_SetHigh();
 8001df2:	2201      	movs	r2, #1
 8001df4:	2108      	movs	r1, #8
 8001df6:	4818      	ldr	r0, [pc, #96]	; (8001e58 <vToggleOneStep+0x94>)
 8001df8:	f003 fc4f 	bl	800569a <HAL_GPIO_WritePin>
            osDelay(10);
 8001dfc:	200a      	movs	r0, #10
 8001dfe:	f008 fa66 	bl	800a2ce <osDelay>
            break;
 8001e02:	e024      	b.n	8001e4e <vToggleOneStep+0x8a>
            Grill_Step_SetLow();
 8001e04:	2200      	movs	r2, #0
 8001e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e0a:	4814      	ldr	r0, [pc, #80]	; (8001e5c <vToggleOneStep+0x98>)
 8001e0c:	f003 fc45 	bl	800569a <HAL_GPIO_WritePin>
            osDelay(10);
 8001e10:	200a      	movs	r0, #10
 8001e12:	f008 fa5c 	bl	800a2ce <osDelay>
            Grill_Step_SetHigh();
 8001e16:	2201      	movs	r2, #1
 8001e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e1c:	480f      	ldr	r0, [pc, #60]	; (8001e5c <vToggleOneStep+0x98>)
 8001e1e:	f003 fc3c 	bl	800569a <HAL_GPIO_WritePin>
            osDelay(10);
 8001e22:	200a      	movs	r0, #10
 8001e24:	f008 fa53 	bl	800a2ce <osDelay>
            break;
 8001e28:	e011      	b.n	8001e4e <vToggleOneStep+0x8a>
            Secondary_Step_SetLow();
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	480a      	ldr	r0, [pc, #40]	; (8001e58 <vToggleOneStep+0x94>)
 8001e30:	f003 fc33 	bl	800569a <HAL_GPIO_WritePin>
            osDelay(10);
 8001e34:	200a      	movs	r0, #10
 8001e36:	f008 fa4a 	bl	800a2ce <osDelay>
            Secondary_Step_SetHigh();
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	4806      	ldr	r0, [pc, #24]	; (8001e58 <vToggleOneStep+0x94>)
 8001e40:	f003 fc2b 	bl	800569a <HAL_GPIO_WritePin>
            osDelay(10);
 8001e44:	200a      	movs	r0, #10
 8001e46:	f008 fa42 	bl	800a2ce <osDelay>
            break;
 8001e4a:	e000      	b.n	8001e4e <vToggleOneStep+0x8a>
            break;
 8001e4c:	bf00      	nop
    }
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40010c00 	.word	0x40010c00
 8001e5c:	40011000 	.word	0x40011000

08001e60 <LimitSwitchActive>:
bool LimitSwitchActive(motor_t MotorId)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
	bool active=false;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]
    switch(MotorId)
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d01c      	beq.n	8001eae <LimitSwitchActive+0x4e>
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	dc25      	bgt.n	8001ec4 <LimitSwitchActive+0x64>
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <LimitSwitchActive+0x22>
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d00b      	beq.n	8001e98 <LimitSwitchActive+0x38>
        case SecondaryStepper:
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch3_GPIO_Port,Limit_switch3_Pin));
        	break;

        default:
            break;
 8001e80:	e020      	b.n	8001ec4 <LimitSwitchActive+0x64>
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch1_GPIO_Port,Limit_switch1_Pin));
 8001e82:	2101      	movs	r1, #1
 8001e84:	4812      	ldr	r0, [pc, #72]	; (8001ed0 <LimitSwitchActive+0x70>)
 8001e86:	f003 fbf1 	bl	800566c <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	73fb      	strb	r3, [r7, #15]
            break;
 8001e96:	e016      	b.n	8001ec6 <LimitSwitchActive+0x66>
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch2_GPIO_Port,Limit_switch2_Pin));
 8001e98:	2102      	movs	r1, #2
 8001e9a:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <LimitSwitchActive+0x70>)
 8001e9c:	f003 fbe6 	bl	800566c <HAL_GPIO_ReadPin>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf0c      	ite	eq
 8001ea6:	2301      	moveq	r3, #1
 8001ea8:	2300      	movne	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]
        	break;
 8001eac:	e00b      	b.n	8001ec6 <LimitSwitchActive+0x66>
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch3_GPIO_Port,Limit_switch3_Pin));
 8001eae:	2140      	movs	r1, #64	; 0x40
 8001eb0:	4808      	ldr	r0, [pc, #32]	; (8001ed4 <LimitSwitchActive+0x74>)
 8001eb2:	f003 fbdb 	bl	800566c <HAL_GPIO_ReadPin>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
        	break;
 8001ec2:	e000      	b.n	8001ec6 <LimitSwitchActive+0x66>
            break;
 8001ec4:	bf00      	nop
    }
    return active;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40011000 	.word	0x40011000
 8001ed4:	40010800 	.word	0x40010800

08001ed8 <vEnableStepper>:

void vEnableStepper(motor_t Motor)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
    Step1_2_3_WAKE();
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2110      	movs	r1, #16
 8001ee6:	481a      	ldr	r0, [pc, #104]	; (8001f50 <vEnableStepper+0x78>)
 8001ee8:	f003 fbd7 	bl	800569a <HAL_GPIO_WritePin>
	switch(Motor)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d01e      	beq.n	8001f30 <vEnableStepper+0x58>
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	dc27      	bgt.n	8001f46 <vEnableStepper+0x6e>
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <vEnableStepper+0x28>
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d00b      	beq.n	8001f16 <vEnableStepper+0x3e>
        	Secondary_ENABLE();
        	Secondary_nRESET();

            break;
        default:
            break;
 8001efe:	e022      	b.n	8001f46 <vEnableStepper+0x6e>
            Primary_ENABLE();
 8001f00:	2200      	movs	r2, #0
 8001f02:	2120      	movs	r1, #32
 8001f04:	4813      	ldr	r0, [pc, #76]	; (8001f54 <vEnableStepper+0x7c>)
 8001f06:	f003 fbc8 	bl	800569a <HAL_GPIO_WritePin>
            Primary_nRESET();
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2110      	movs	r1, #16
 8001f0e:	4811      	ldr	r0, [pc, #68]	; (8001f54 <vEnableStepper+0x7c>)
 8001f10:	f003 fbc3 	bl	800569a <HAL_GPIO_WritePin>
            break;
 8001f14:	e018      	b.n	8001f48 <vEnableStepper+0x70>
            Grill_ENABLE();
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f1c:	480c      	ldr	r0, [pc, #48]	; (8001f50 <vEnableStepper+0x78>)
 8001f1e:	f003 fbbc 	bl	800569a <HAL_GPIO_WritePin>
            Grill_nRESET();
 8001f22:	2201      	movs	r2, #1
 8001f24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f28:	4809      	ldr	r0, [pc, #36]	; (8001f50 <vEnableStepper+0x78>)
 8001f2a:	f003 fbb6 	bl	800569a <HAL_GPIO_WritePin>
            break;
 8001f2e:	e00b      	b.n	8001f48 <vEnableStepper+0x70>
        	Secondary_ENABLE();
 8001f30:	2200      	movs	r2, #0
 8001f32:	2120      	movs	r1, #32
 8001f34:	4806      	ldr	r0, [pc, #24]	; (8001f50 <vEnableStepper+0x78>)
 8001f36:	f003 fbb0 	bl	800569a <HAL_GPIO_WritePin>
        	Secondary_nRESET();
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	4804      	ldr	r0, [pc, #16]	; (8001f50 <vEnableStepper+0x78>)
 8001f40:	f003 fbab 	bl	800569a <HAL_GPIO_WritePin>
            break;
 8001f44:	e000      	b.n	8001f48 <vEnableStepper+0x70>
            break;
 8001f46:	bf00      	nop
    }
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40011000 	.word	0x40011000
 8001f54:	40010c00 	.word	0x40010c00

08001f58 <vStepperMaxTorque>:
void vStepperMaxTorque(motor_t Motor,bool bApplyMaxTorque)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	460a      	mov	r2, r1
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	4613      	mov	r3, r2
 8001f66:	71bb      	strb	r3, [r7, #6]
	switch(Motor)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d028      	beq.n	8001fc0 <vStepperMaxTorque+0x68>
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	dc35      	bgt.n	8001fde <vStepperMaxTorque+0x86>
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <vStepperMaxTorque+0x24>
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d011      	beq.n	8001f9e <vStepperMaxTorque+0x46>
			{
        		Secondary_TorqueMin();
        	}
            break;
        default:
            break;
 8001f7a:	e030      	b.n	8001fde <vStepperMaxTorque+0x86>
        	if(bApplyMaxTorque)
 8001f7c:	79bb      	ldrb	r3, [r7, #6]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d006      	beq.n	8001f90 <vStepperMaxTorque+0x38>
        		Primary_TorqueMax();
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f88:	4817      	ldr	r0, [pc, #92]	; (8001fe8 <vStepperMaxTorque+0x90>)
 8001f8a:	f003 fb86 	bl	800569a <HAL_GPIO_WritePin>
            break;
 8001f8e:	e027      	b.n	8001fe0 <vStepperMaxTorque+0x88>
        		Primary_TorqueMin();
 8001f90:	2201      	movs	r2, #1
 8001f92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f96:	4814      	ldr	r0, [pc, #80]	; (8001fe8 <vStepperMaxTorque+0x90>)
 8001f98:	f003 fb7f 	bl	800569a <HAL_GPIO_WritePin>
            break;
 8001f9c:	e020      	b.n	8001fe0 <vStepperMaxTorque+0x88>
        	if(bApplyMaxTorque)
 8001f9e:	79bb      	ldrb	r3, [r7, #6]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <vStepperMaxTorque+0x5a>
        		Grill_TorqueMax();
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001faa:	480f      	ldr	r0, [pc, #60]	; (8001fe8 <vStepperMaxTorque+0x90>)
 8001fac:	f003 fb75 	bl	800569a <HAL_GPIO_WritePin>
            break;
 8001fb0:	e016      	b.n	8001fe0 <vStepperMaxTorque+0x88>
        		Grill_TorqueMin();
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fb8:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <vStepperMaxTorque+0x90>)
 8001fba:	f003 fb6e 	bl	800569a <HAL_GPIO_WritePin>
            break;
 8001fbe:	e00f      	b.n	8001fe0 <vStepperMaxTorque+0x88>
        	if(bApplyMaxTorque)
 8001fc0:	79bb      	ldrb	r3, [r7, #6]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <vStepperMaxTorque+0x7a>
        		Secondary_TorqueMax();
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2104      	movs	r1, #4
 8001fca:	4808      	ldr	r0, [pc, #32]	; (8001fec <vStepperMaxTorque+0x94>)
 8001fcc:	f003 fb65 	bl	800569a <HAL_GPIO_WritePin>
            break;
 8001fd0:	e006      	b.n	8001fe0 <vStepperMaxTorque+0x88>
        		Secondary_TorqueMin();
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <vStepperMaxTorque+0x94>)
 8001fd8:	f003 fb5f 	bl	800569a <HAL_GPIO_WritePin>
            break;
 8001fdc:	e000      	b.n	8001fe0 <vStepperMaxTorque+0x88>
            break;
 8001fde:	bf00      	nop
    }
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40011000 	.word	0x40011000
 8001fec:	40010c00 	.word	0x40010c00

08001ff0 <vDisableStepper>:

void vDisableStepper(motor_t Motor)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
	//Step1_2_3_SLEEP();
    switch(Motor)
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d013      	beq.n	8002028 <vDisableStepper+0x38>
 8002000:	2b02      	cmp	r3, #2
 8002002:	dc17      	bgt.n	8002034 <vDisableStepper+0x44>
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <vDisableStepper+0x1e>
 8002008:	2b01      	cmp	r3, #1
 800200a:	d006      	beq.n	800201a <vDisableStepper+0x2a>
            break;
        case SecondaryStepper:
        	Secondary_DISABLE();
        	break;
        default:
            break;
 800200c:	e012      	b.n	8002034 <vDisableStepper+0x44>
            Primary_DISABLE();
 800200e:	2201      	movs	r2, #1
 8002010:	2120      	movs	r1, #32
 8002012:	480b      	ldr	r0, [pc, #44]	; (8002040 <vDisableStepper+0x50>)
 8002014:	f003 fb41 	bl	800569a <HAL_GPIO_WritePin>
            break;
 8002018:	e00d      	b.n	8002036 <vDisableStepper+0x46>
            Grill_DISABLE();
 800201a:	2201      	movs	r2, #1
 800201c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002020:	4808      	ldr	r0, [pc, #32]	; (8002044 <vDisableStepper+0x54>)
 8002022:	f003 fb3a 	bl	800569a <HAL_GPIO_WritePin>
            break;
 8002026:	e006      	b.n	8002036 <vDisableStepper+0x46>
        	Secondary_DISABLE();
 8002028:	2201      	movs	r2, #1
 800202a:	2120      	movs	r1, #32
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <vDisableStepper+0x54>)
 800202e:	f003 fb34 	bl	800569a <HAL_GPIO_WritePin>
        	break;
 8002032:	e000      	b.n	8002036 <vDisableStepper+0x46>
            break;
 8002034:	bf00      	nop
    }
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40010c00 	.word	0x40010c00
 8002044:	40011000 	.word	0x40011000

08002048 <vSetStepperMotorDirection>:

void vSetStepperMotorDirection(motor_t Motor, motor_direction_t Direction)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	460a      	mov	r2, r1
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	4613      	mov	r3, r2
 8002056:	71bb      	strb	r3, [r7, #6]
    switch(Motor)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d026      	beq.n	80020ac <vSetStepperMotorDirection+0x64>
 800205e:	2b02      	cmp	r3, #2
 8002060:	dc33      	bgt.n	80020ca <vSetStepperMotorDirection+0x82>
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <vSetStepperMotorDirection+0x24>
 8002066:	2b01      	cmp	r3, #1
 8002068:	d00f      	beq.n	800208a <vSetStepperMotorDirection+0x42>
 800206a:	e02e      	b.n	80020ca <vSetStepperMotorDirection+0x82>
    {
    case PrimaryStepper:
        if(Direction == Opening)
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <vSetStepperMotorDirection+0x36>
        {
        	Primary_DIR_SetHigh();
 8002072:	2201      	movs	r2, #1
 8002074:	2104      	movs	r1, #4
 8002076:	4817      	ldr	r0, [pc, #92]	; (80020d4 <vSetStepperMotorDirection+0x8c>)
 8002078:	f003 fb0f 	bl	800569a <HAL_GPIO_WritePin>
        }
        else
        {
        	Primary_DIR_SetLow();
        }
        break;
 800207c:	e026      	b.n	80020cc <vSetStepperMotorDirection+0x84>
        	Primary_DIR_SetLow();
 800207e:	2200      	movs	r2, #0
 8002080:	2104      	movs	r1, #4
 8002082:	4814      	ldr	r0, [pc, #80]	; (80020d4 <vSetStepperMotorDirection+0x8c>)
 8002084:	f003 fb09 	bl	800569a <HAL_GPIO_WritePin>
        break;
 8002088:	e020      	b.n	80020cc <vSetStepperMotorDirection+0x84>
    case GrillStepper:
        if(Direction == Opening)
 800208a:	79bb      	ldrb	r3, [r7, #6]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d106      	bne.n	800209e <vSetStepperMotorDirection+0x56>
        {
        	Grill_DIR_SetHigh();
 8002090:	2201      	movs	r2, #1
 8002092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002096:	4810      	ldr	r0, [pc, #64]	; (80020d8 <vSetStepperMotorDirection+0x90>)
 8002098:	f003 faff 	bl	800569a <HAL_GPIO_WritePin>
        }
        else
        {
        	Grill_DIR_SetLow();
        }
        break;
 800209c:	e016      	b.n	80020cc <vSetStepperMotorDirection+0x84>
        	Grill_DIR_SetLow();
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a4:	480c      	ldr	r0, [pc, #48]	; (80020d8 <vSetStepperMotorDirection+0x90>)
 80020a6:	f003 faf8 	bl	800569a <HAL_GPIO_WritePin>
        break;
 80020aa:	e00f      	b.n	80020cc <vSetStepperMotorDirection+0x84>
    case SecondaryStepper:
        if(Direction == Opening)
 80020ac:	79bb      	ldrb	r3, [r7, #6]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <vSetStepperMotorDirection+0x76>
        {
        	Secondary_DIR_SetHigh();
 80020b2:	2201      	movs	r2, #1
 80020b4:	2120      	movs	r1, #32
 80020b6:	4809      	ldr	r0, [pc, #36]	; (80020dc <vSetStepperMotorDirection+0x94>)
 80020b8:	f003 faef 	bl	800569a <HAL_GPIO_WritePin>
        }
        else
        {
        	Secondary_DIR_SetLow();
        }
        break;
 80020bc:	e006      	b.n	80020cc <vSetStepperMotorDirection+0x84>
        	Secondary_DIR_SetLow();
 80020be:	2200      	movs	r2, #0
 80020c0:	2120      	movs	r1, #32
 80020c2:	4806      	ldr	r0, [pc, #24]	; (80020dc <vSetStepperMotorDirection+0x94>)
 80020c4:	f003 fae9 	bl	800569a <HAL_GPIO_WritePin>
        break;
 80020c8:	e000      	b.n	80020cc <vSetStepperMotorDirection+0x84>
    default:
    	while(1);
 80020ca:	e7fe      	b.n	80020ca <vSetStepperMotorDirection+0x82>
    	//wrong motor argument
    }

}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40011400 	.word	0x40011400
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40010800 	.word	0x40010800

080020e0 <PARAMFILE_Init>:

PFL_SHandle PARAMFILE_g_sHandle;
const PFL_SConfig m_sConfig = { .ptrLoadAll = LoadAllCallback, .ptrCommitAll = CommitAllCallback };

void PARAMFILE_Init()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	PFL_Init(&PARAMFILE_g_sHandle,  m_sParameterItems, PARAMETERITEM_COUNT, &m_sConfig);
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <PARAMFILE_Init+0x1c>)
 80020e6:	2245      	movs	r2, #69	; 0x45
 80020e8:	4905      	ldr	r1, [pc, #20]	; (8002100 <PARAMFILE_Init+0x20>)
 80020ea:	4806      	ldr	r0, [pc, #24]	; (8002104 <PARAMFILE_Init+0x24>)
 80020ec:	f000 f872 	bl	80021d4 <PFL_Init>
	//PFL_LoadAll(&PARAMFILE_g_sHandle);
	PFL_LoadAllDefault(&PARAMFILE_g_sHandle);
 80020f0:	4804      	ldr	r0, [pc, #16]	; (8002104 <PARAMFILE_Init+0x24>)
 80020f2:	f000 f884 	bl	80021fe <PFL_LoadAllDefault>
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	08012184 	.word	0x08012184
 8002100:	080119f8 	.word	0x080119f8
 8002104:	200035d0 	.word	0x200035d0

08002108 <PARAMFILE_GetParamEntryCount>:

uint32_t PARAMFILE_GetParamEntryCount()
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
	return PARAMFILE_g_sHandle.u32ParameterEntryCount;
 800210c:	4b02      	ldr	r3, [pc, #8]	; (8002118 <PARAMFILE_GetParamEntryCount+0x10>)
 800210e:	685b      	ldr	r3, [r3, #4]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	200035d0 	.word	0x200035d0

0800211c <PARAMFILE_GetParamEntryByIndex>:

const PFL_SParameterItem* PARAMFILE_GetParamEntryByIndex(uint32_t u32Index)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	if (u32Index >= PARAMETERITEM_COUNT)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b44      	cmp	r3, #68	; 0x44
 8002128:	d901      	bls.n	800212e <PARAMFILE_GetParamEntryByIndex+0x12>
		return NULL;
 800212a:	2300      	movs	r3, #0
 800212c:	e007      	b.n	800213e <PARAMFILE_GetParamEntryByIndex+0x22>
	return &PARAMFILE_g_sHandle.pParameterEntries[u32Index];
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <PARAMFILE_GetParamEntryByIndex+0x2c>)
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	200035d0 	.word	0x200035d0

0800214c <LoadAllCallback>:

static void LoadAllCallback(const PFL_SHandle* psHandle)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	// TODO: Flash reading is not yet implemented
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <CommitAllCallback>:

static void CommitAllCallback(const PFL_SHandle* psHandle)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
	// TODO: Flash writing is not yet implemented
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <PB_GetTemperatureParam>:


const PF_CombTempParam_t* PB_GetTemperatureParam()
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
	return &m_sTemperatureParam;
 8002174:	4b02      	ldr	r3, [pc, #8]	; (8002180 <PB_GetTemperatureParam+0x10>)
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000024 	.word	0x20000024

08002184 <PB_GetPrimaryMotorParam>:

const PF_MotorOpeningsParam_t* PB_GetPrimaryMotorParam()
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
	return &m_sPrimaryMotorParam;
 8002188:	4b02      	ldr	r3, [pc, #8]	; (8002194 <PB_GetPrimaryMotorParam+0x10>)
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000068 	.word	0x20000068

08002198 <PB_GetSecondaryMotorParam>:

const PF_MotorOpeningsParam_t* PB_GetSecondaryMotorParam()
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
	return &m_sSecondaryMotorParam;
 800219c:	4b02      	ldr	r3, [pc, #8]	; (80021a8 <PB_GetSecondaryMotorParam+0x10>)
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	200000e8 	.word	0x200000e8

080021ac <PB_GetGrillMotorParam>:

const PF_MotorOpeningsParam_t* PB_GetGrillMotorParam()
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
	return &m_sGrillMotorParam;
 80021b0:	4b02      	ldr	r3, [pc, #8]	; (80021bc <PB_GetGrillMotorParam+0x10>)
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	200000a8 	.word	0x200000a8

080021c0 <PB_GetUserParam>:

const PF_UsrParam* PB_GetUserParam()
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
	return &m_sMemBlock;
 80021c4:	4b02      	ldr	r3, [pc, #8]	; (80021d0 <PB_GetUserParam+0x10>)
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000128 	.word	0x20000128

080021d4 <PFL_Init>:

static const PFL_SParameterItem* GetParameterEntryByKey(const PFL_SHandle* pHandle, const char* szKey);
static PFL_ESETRET ValidateValueInt32(const PFL_SHandle* pHandle, const PFL_SParameterItem* pParameterFile, int32_t s32Value);

void PFL_Init(PFL_SHandle* pHandle, const PFL_SParameterItem* pParameterEntries, uint32_t u32ParameterEntryCount, const PFL_SConfig* psConfig)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
	pHandle->pParameterEntries = pParameterEntries;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	601a      	str	r2, [r3, #0]
	pHandle->u32ParameterEntryCount = u32ParameterEntryCount;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	605a      	str	r2, [r3, #4]

	pHandle->psConfig = psConfig;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	609a      	str	r2, [r3, #8]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <PFL_LoadAllDefault>:
		}
	}
}

void PFL_LoadAllDefault(PFL_SHandle* pHandle)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
	if (pHandle->psConfig->ptrLoadAll != NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d004      	beq.n	800221a <PFL_LoadAllDefault+0x1c>
		pHandle->psConfig->ptrLoadAll(pHandle);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	4798      	blx	r3

	// Verify variables and load default value if necessary
	for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e016      	b.n	800224e <PFL_LoadAllDefault+0x50>
	{
		const PFL_SParameterItem* pEnt = &pHandle->pParameterEntries[i];
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6819      	ldr	r1, [r3, #0]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	613b      	str	r3, [r7, #16]

		if (pEnt->eType == PFL_TYPE_Int32)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	7a1b      	ldrb	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <PFL_LoadAllDefault+0x4a>
		{
			int32_t* ps32Value = ((int32_t*)pEnt->vdVar);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	60fb      	str	r3, [r7, #12]
			*ps32Value = pEnt->uType.sInt32.s32Default;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3301      	adds	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	d8e3      	bhi.n	8002220 <PFL_LoadAllDefault+0x22>
		}
	}
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <PFL_GetValueInt32>:
	if (pHandle->psConfig->ptrCommitAll != NULL)
		pHandle->psConfig->ptrCommitAll(pHandle);
}

PFL_ESETRET PFL_GetValueInt32(const PFL_SHandle* pHandle, const char* szName, int32_t* psOut32Value)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
	const PFL_SParameterItem* pEnt = GetParameterEntryByKey(pHandle, szName);
 800226e:	68b9      	ldr	r1, [r7, #8]
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f873 	bl	800235c <GetParameterEntryByKey>
 8002276:	6178      	str	r0, [r7, #20]
	if (pEnt == NULL || pEnt->eType != PFL_TYPE_Int32 || pEnt->vdVar == NULL)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <PFL_GetValueInt32+0x2c>
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	7a1b      	ldrb	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <PFL_GetValueInt32+0x2c>
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <PFL_GetValueInt32+0x30>
		return PFL_ESETRET_EntryNoFound;
 800228e:	2304      	movs	r3, #4
 8002290:	e007      	b.n	80022a2 <PFL_GetValueInt32+0x40>

	const int32_t* ps32Value = ((int32_t*)pEnt->vdVar);
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	613b      	str	r3, [r7, #16]
	if (eValidateRet != PFL_ESETRET_OK)
	{
		*psOut32Value = pEnt->uType.sInt32.s32Default;
		return eValidateRet;
	}*/
	*psOut32Value = *ps32Value;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	601a      	str	r2, [r3, #0]
	return PFL_ESETRET_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <PFL_SetValueInt32>:

PFL_ESETRET PFL_SetValueInt32(const PFL_SHandle* pHandle, const char* szName, int32_t s32NewValue)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b088      	sub	sp, #32
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
	const PFL_SParameterItem* pEnt = GetParameterEntryByKey(pHandle, szName);
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f84f 	bl	800235c <GetParameterEntryByKey>
 80022be:	61f8      	str	r0, [r7, #28]
	if (pEnt == NULL || pEnt->eType != PFL_TYPE_Int32 || pEnt->vdVar == NULL)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <PFL_SetValueInt32+0x2c>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	7a1b      	ldrb	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d103      	bne.n	80022d6 <PFL_SetValueInt32+0x2c>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <PFL_SetValueInt32+0x30>
		return PFL_ESETRET_EntryNoFound;
 80022d6:	2304      	movs	r3, #4
 80022d8:	e012      	b.n	8002300 <PFL_SetValueInt32+0x56>
	int32_t* ps32Value = ((int32_t*)pEnt->vdVar);
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	61bb      	str	r3, [r7, #24]
	const PFL_ESETRET eValidateRet = ValidateValueInt32(pHandle, pEnt, s32NewValue);
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	69f9      	ldr	r1, [r7, #28]
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 f80f 	bl	8002308 <ValidateValueInt32>
 80022ea:	4603      	mov	r3, r0
 80022ec:	75fb      	strb	r3, [r7, #23]
	if (eValidateRet != PFL_ESETRET_OK)
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <PFL_SetValueInt32+0x4e>
		return eValidateRet;
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
 80022f6:	e003      	b.n	8002300 <PFL_SetValueInt32+0x56>
	// We can record if it pass validation step
	*ps32Value = s32NewValue;
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
	return PFL_ESETRET_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <ValidateValueInt32>:

static PFL_ESETRET ValidateValueInt32(const PFL_SHandle* pHandle, const PFL_SParameterItem* pParameterFile, int32_t s32Value)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
    assert(pParameterFile != NULL && pParameterFile->eType == PFL_TYPE_Int32);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <ValidateValueInt32+0x1a>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	7a1b      	ldrb	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <ValidateValueInt32+0x26>
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <ValidateValueInt32+0x48>)
 8002324:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <ValidateValueInt32+0x4c>)
 8002326:	2169      	movs	r1, #105	; 0x69
 8002328:	480b      	ldr	r0, [pc, #44]	; (8002358 <ValidateValueInt32+0x50>)
 800232a:	f00b f8df 	bl	800d4ec <__assert_func>
	if (s32Value < pParameterFile->uType.sInt32.s32Min || s32Value > pParameterFile->uType.sInt32.s32Max)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	db04      	blt.n	8002342 <ValidateValueInt32+0x3a>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	dd01      	ble.n	8002346 <ValidateValueInt32+0x3e>
		return PFL_ESETRET_InvalidRange;
 8002342:	2302      	movs	r3, #2
 8002344:	e000      	b.n	8002348 <ValidateValueInt32+0x40>
	return PFL_ESETRET_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	08011768 	.word	0x08011768
 8002354:	0801218c 	.word	0x0801218c
 8002358:	080117ac 	.word	0x080117ac

0800235c <GetParameterEntryByKey>:

static const PFL_SParameterItem* GetParameterEntryByKey(const PFL_SHandle* pHandle, const char* szKey)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	e016      	b.n	800239a <GetParameterEntryByKey+0x3e>
    {
    	const PFL_SParameterItem* pParamItem = &pHandle->pParameterEntries[i];
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6819      	ldr	r1, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	60bb      	str	r3, [r7, #8]
        if (strcmp(pParamItem->szKey, szKey) == 0)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6839      	ldr	r1, [r7, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fd ff53 	bl	8000230 <strcmp>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <GetParameterEntryByKey+0x38>
            return pParamItem;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	e008      	b.n	80023a6 <GetParameterEntryByKey+0x4a>
    for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3301      	adds	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d8e3      	bhi.n	800236c <GetParameterEntryByKey+0x10>
    }
    return NULL;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <Particle_Init>:

bool validateRxChecksum(uint8_t buffer_index);


void Particle_Init(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
	ParticleDevice.LED_current_meas = 0;
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <Particle_Init+0x6c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	831a      	strh	r2, [r3, #24]
	ParticleDevice.ch0_ON = 0;
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <Particle_Init+0x6c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	801a      	strh	r2, [r3, #0]
	ParticleDevice.ch0_OFF = 0;
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <Particle_Init+0x6c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	805a      	strh	r2, [r3, #2]
	ParticleDevice.ch1_ON = 0;
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <Particle_Init+0x6c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	809a      	strh	r2, [r3, #4]
	ParticleDevice.ch1_OFF = 0;
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <Particle_Init+0x6c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	80da      	strh	r2, [r3, #6]
	ParticleDevice.variance = 0;
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <Particle_Init+0x6c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	815a      	strh	r2, [r3, #10]
	ParticleDevice.temperature = 0;
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <Particle_Init+0x6c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	819a      	strh	r2, [r3, #12]
	ParticleDevice.LED_current_meas = 0;
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <Particle_Init+0x6c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	831a      	strh	r2, [r3, #24]
	ParticleDevice.slope = 0;
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <Particle_Init+0x6c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	615a      	str	r2, [r3, #20]
	ParticleDevice.Lux_ON = 0;
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <Particle_Init+0x6c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	835a      	strh	r2, [r3, #26]
	ParticleDevice.Lux_OFF = 0;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <Particle_Init+0x6c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	839a      	strh	r2, [r3, #28]
	ParticleDevice.TimeSinceInit = 0;
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <Particle_Init+0x6c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	621a      	str	r2, [r3, #32]
	ParticleDevice.last_particle_time = 0;
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <Particle_Init+0x6c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	625a      	str	r2, [r3, #36]	; 0x24
	ParticleDevice.normalized_zero = 80.0;
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <Particle_Init+0x6c>)
 8002404:	4a06      	ldr	r2, [pc, #24]	; (8002420 <Particle_Init+0x70>)
 8002406:	611a      	str	r2, [r3, #16]

	currentState = Idle;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <Particle_Init+0x74>)
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
	nextState = Idle;
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <Particle_Init+0x78>)
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	20000c78 	.word	0x20000c78
 8002420:	42a00000 	.word	0x42a00000
 8002424:	20000c20 	.word	0x20000c20
 8002428:	20000c21 	.word	0x20000c21

0800242c <ParticlesManager>:

void ParticlesManager(uint32_t u32Time_ms)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	static uint16_t uartErrorCount = 0;
	static uint16_t tx_checksum, rx_checksum;
	static uint8_t rx_payload_size, tx_size, zero_current;
	static uint32_t response_delay = 800;
	static uint32_t u32LastReqTime = 0;
	int slp_sign = 1;
 8002434:	2301      	movs	r3, #1
 8002436:	60fb      	str	r3, [r7, #12]


	switch(currentState)
 8002438:	4b64      	ldr	r3, [pc, #400]	; (80025cc <ParticlesManager+0x1a0>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b04      	cmp	r3, #4
 800243e:	f200 81b0 	bhi.w	80027a2 <ParticlesManager+0x376>
 8002442:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <ParticlesManager+0x1c>)
 8002444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002448:	0800245d 	.word	0x0800245d
 800244c:	080024b3 	.word	0x080024b3
 8002450:	080024e7 	.word	0x080024e7
 8002454:	08002545 	.word	0x08002545
 8002458:	08002601 	.word	0x08002601
	{
	case Idle:
		if(u32Time_ms - u32LastReqTime > SECONDS(2))
 800245c:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <ParticlesManager+0x1a4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002468:	f240 8196 	bls.w	8002798 <ParticlesManager+0x36c>
		{
			TX_BUFFER[0] = START_BYTE;
 800246c:	4b59      	ldr	r3, [pc, #356]	; (80025d4 <ParticlesManager+0x1a8>)
 800246e:	22cc      	movs	r2, #204	; 0xcc
 8002470:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = READ_CMD;
 8002472:	4b58      	ldr	r3, [pc, #352]	; (80025d4 <ParticlesManager+0x1a8>)
 8002474:	2200      	movs	r2, #0
 8002476:	705a      	strb	r2, [r3, #1]
			tx_checksum = READ_CMD;
 8002478:	4b57      	ldr	r3, [pc, #348]	; (80025d8 <ParticlesManager+0x1ac>)
 800247a:	2200      	movs	r2, #0
 800247c:	801a      	strh	r2, [r3, #0]
			TX_BUFFER[2] = (uint8_t)(tx_checksum >> 8);
 800247e:	4b56      	ldr	r3, [pc, #344]	; (80025d8 <ParticlesManager+0x1ac>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	b29b      	uxth	r3, r3
 8002486:	b2da      	uxtb	r2, r3
 8002488:	4b52      	ldr	r3, [pc, #328]	; (80025d4 <ParticlesManager+0x1a8>)
 800248a:	709a      	strb	r2, [r3, #2]
			TX_BUFFER[3] = (uint8_t)(tx_checksum & 0x00FF);
 800248c:	4b52      	ldr	r3, [pc, #328]	; (80025d8 <ParticlesManager+0x1ac>)
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <ParticlesManager+0x1a8>)
 8002494:	70da      	strb	r2, [r3, #3]
			TX_BUFFER[4] = STOP_BYTE;
 8002496:	4b4f      	ldr	r3, [pc, #316]	; (80025d4 <ParticlesManager+0x1a8>)
 8002498:	2299      	movs	r2, #153	; 0x99
 800249a:	711a      	strb	r2, [r3, #4]
			tx_size = 5;
 800249c:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <ParticlesManager+0x1b0>)
 800249e:	2205      	movs	r2, #5
 80024a0:	701a      	strb	r2, [r3, #0]
			response_delay = 800;
 80024a2:	4b4f      	ldr	r3, [pc, #316]	; (80025e0 <ParticlesManager+0x1b4>)
 80024a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80024a8:	601a      	str	r2, [r3, #0]
			nextState = Send_request;
 80024aa:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <ParticlesManager+0x1b8>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
		}

		break;
 80024b0:	e172      	b.n	8002798 <ParticlesManager+0x36c>
	case Send_request:
		HAL_UART_Transmit_IT(&huart3, TX_BUFFER, tx_size);
 80024b2:	4b4a      	ldr	r3, [pc, #296]	; (80025dc <ParticlesManager+0x1b0>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4946      	ldr	r1, [pc, #280]	; (80025d4 <ParticlesManager+0x1a8>)
 80024bc:	484a      	ldr	r0, [pc, #296]	; (80025e8 <ParticlesManager+0x1bc>)
 80024be:	f006 ffcb 	bl	8009458 <HAL_UART_Transmit_IT>
		RX_BUFFER[0] = 0;
 80024c2:	4b4a      	ldr	r3, [pc, #296]	; (80025ec <ParticlesManager+0x1c0>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
		RX_BUFFER[1] = 0;
 80024c8:	4b48      	ldr	r3, [pc, #288]	; (80025ec <ParticlesManager+0x1c0>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	705a      	strb	r2, [r3, #1]
		u32LastReqTime = u32Time_ms;
 80024ce:	4a40      	ldr	r2, [pc, #256]	; (80025d0 <ParticlesManager+0x1a4>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6013      	str	r3, [r2, #0]
		HAL_UARTEx_ReceiveToIdle_IT(&huart3, RX_BUFFER,RX_BUFFER_LENGTH);
 80024d4:	2240      	movs	r2, #64	; 0x40
 80024d6:	4945      	ldr	r1, [pc, #276]	; (80025ec <ParticlesManager+0x1c0>)
 80024d8:	4843      	ldr	r0, [pc, #268]	; (80025e8 <ParticlesManager+0x1bc>)
 80024da:	f007 f801 	bl	80094e0 <HAL_UARTEx_ReceiveToIdle_IT>
		nextState = Request_sent;
 80024de:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <ParticlesManager+0x1b8>)
 80024e0:	2202      	movs	r2, #2
 80024e2:	701a      	strb	r2, [r3, #0]
		break;
 80024e4:	e15d      	b.n	80027a2 <ParticlesManager+0x376>
	case Request_sent:
		if(RX_BUFFER[0] == START_BYTE)
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <ParticlesManager+0x1c0>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2bcc      	cmp	r3, #204	; 0xcc
 80024ec:	d117      	bne.n	800251e <ParticlesManager+0xf2>
		{
			rx_payload_size = RX_BUFFER[1] & 0x3F;
 80024ee:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <ParticlesManager+0x1c0>)
 80024f0:	785b      	ldrb	r3, [r3, #1]
 80024f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <ParticlesManager+0x1c4>)
 80024fa:	701a      	strb	r2, [r3, #0]

			if(rx_payload_size != 0 && RX_BUFFER[rx_payload_size + 4] == STOP_BYTE)
 80024fc:	4b3c      	ldr	r3, [pc, #240]	; (80025f0 <ParticlesManager+0x1c4>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 814b 	beq.w	800279c <ParticlesManager+0x370>
 8002506:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <ParticlesManager+0x1c4>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	3304      	adds	r3, #4
 800250c:	4a37      	ldr	r2, [pc, #220]	; (80025ec <ParticlesManager+0x1c0>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	2b99      	cmp	r3, #153	; 0x99
 8002512:	f040 8143 	bne.w	800279c <ParticlesManager+0x370>
			{
				nextState = Validate_data;
 8002516:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <ParticlesManager+0x1b8>)
 8002518:	2203      	movs	r2, #3
 800251a:	701a      	strb	r2, [r3, #0]
		{
			uartErrorCount++;
			nextState = Send_request;
		}

		break;
 800251c:	e13e      	b.n	800279c <ParticlesManager+0x370>
		}else if(u32Time_ms - u32LastReqTime > response_delay)
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <ParticlesManager+0x1a4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	1ad2      	subs	r2, r2, r3
 8002526:	4b2e      	ldr	r3, [pc, #184]	; (80025e0 <ParticlesManager+0x1b4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	f240 8136 	bls.w	800279c <ParticlesManager+0x370>
			uartErrorCount++;
 8002530:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <ParticlesManager+0x1c8>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <ParticlesManager+0x1c8>)
 800253a:	801a      	strh	r2, [r3, #0]
			nextState = Send_request;
 800253c:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <ParticlesManager+0x1b8>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
		break;
 8002542:	e12b      	b.n	800279c <ParticlesManager+0x370>
	case Validate_data:
		rx_checksum = RX_BUFFER[1];
 8002544:	4b29      	ldr	r3, [pc, #164]	; (80025ec <ParticlesManager+0x1c0>)
 8002546:	785b      	ldrb	r3, [r3, #1]
 8002548:	b29a      	uxth	r2, r3
 800254a:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <ParticlesManager+0x1cc>)
 800254c:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 2;i <= rx_payload_size+1;i++)
 800254e:	2302      	movs	r3, #2
 8002550:	72fb      	strb	r3, [r7, #11]
 8002552:	e00c      	b.n	800256e <ParticlesManager+0x142>
		{
			rx_checksum += RX_BUFFER[i];
 8002554:	7afb      	ldrb	r3, [r7, #11]
 8002556:	4a25      	ldr	r2, [pc, #148]	; (80025ec <ParticlesManager+0x1c0>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
 800255a:	b29a      	uxth	r2, r3
 800255c:	4b26      	ldr	r3, [pc, #152]	; (80025f8 <ParticlesManager+0x1cc>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	4413      	add	r3, r2
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <ParticlesManager+0x1cc>)
 8002566:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 2;i <= rx_payload_size+1;i++)
 8002568:	7afb      	ldrb	r3, [r7, #11]
 800256a:	3301      	adds	r3, #1
 800256c:	72fb      	strb	r3, [r7, #11]
 800256e:	7afa      	ldrb	r2, [r7, #11]
 8002570:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <ParticlesManager+0x1c4>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	429a      	cmp	r2, r3
 8002578:	ddec      	ble.n	8002554 <ParticlesManager+0x128>
		}

		if(rx_checksum == ((uint16_t)(RX_BUFFER[rx_payload_size+2] << 8) + (uint16_t)RX_BUFFER[rx_payload_size+3]))
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <ParticlesManager+0x1cc>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	4619      	mov	r1, r3
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <ParticlesManager+0x1c4>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	3302      	adds	r3, #2
 8002586:	4a19      	ldr	r2, [pc, #100]	; (80025ec <ParticlesManager+0x1c0>)
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	b29b      	uxth	r3, r3
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	b29b      	uxth	r3, r3
 8002590:	4618      	mov	r0, r3
 8002592:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <ParticlesManager+0x1c4>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	3303      	adds	r3, #3
 8002598:	4a14      	ldr	r2, [pc, #80]	; (80025ec <ParticlesManager+0x1c0>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	4403      	add	r3, r0
 800259e:	4299      	cmp	r1, r3
 80025a0:	d109      	bne.n	80025b6 <ParticlesManager+0x18a>
		{
			particleBoardAbsent = false;
 80025a2:	4b16      	ldr	r3, [pc, #88]	; (80025fc <ParticlesManager+0x1d0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
			uartErrorCount = 0;
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <ParticlesManager+0x1c8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	801a      	strh	r2, [r3, #0]
			nextState = Data_ready;
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <ParticlesManager+0x1b8>)
 80025b0:	2204      	movs	r2, #4
 80025b2:	701a      	strb	r2, [r3, #0]
		}else
		{
			uartErrorCount++;
			nextState = Send_request;
		}
		break;
 80025b4:	e0f5      	b.n	80027a2 <ParticlesManager+0x376>
			uartErrorCount++;
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <ParticlesManager+0x1c8>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <ParticlesManager+0x1c8>)
 80025c0:	801a      	strh	r2, [r3, #0]
			nextState = Send_request;
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <ParticlesManager+0x1b8>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
		break;
 80025c8:	e0eb      	b.n	80027a2 <ParticlesManager+0x376>
 80025ca:	bf00      	nop
 80025cc:	20000c20 	.word	0x20000c20
 80025d0:	20000ca4 	.word	0x20000ca4
 80025d4:	20000c64 	.word	0x20000c64
 80025d8:	20000ca8 	.word	0x20000ca8
 80025dc:	20000caa 	.word	0x20000caa
 80025e0:	20000140 	.word	0x20000140
 80025e4:	20000c21 	.word	0x20000c21
 80025e8:	20003620 	.word	0x20003620
 80025ec:	20000c24 	.word	0x20000c24
 80025f0:	20000cab 	.word	0x20000cab
 80025f4:	20000cac 	.word	0x20000cac
 80025f8:	20000cae 	.word	0x20000cae
 80025fc:	20000ca0 	.word	0x20000ca0
	case Data_ready:
		nextState = Idle;
 8002600:	4b6f      	ldr	r3, [pc, #444]	; (80027c0 <ParticlesManager+0x394>)
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
		if((RX_BUFFER[1] & 0xC0) == READ_CMD)
 8002606:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <ParticlesManager+0x398>)
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 8098 	bne.w	8002744 <ParticlesManager+0x318>
		{
			ParticleDevice.ch0_ON = (uint16_t)(RX_BUFFER[2] << 8) + (uint16_t)RX_BUFFER[3];
 8002614:	4b6b      	ldr	r3, [pc, #428]	; (80027c4 <ParticlesManager+0x398>)
 8002616:	789b      	ldrb	r3, [r3, #2]
 8002618:	b29b      	uxth	r3, r3
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	b29a      	uxth	r2, r3
 800261e:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <ParticlesManager+0x398>)
 8002620:	78db      	ldrb	r3, [r3, #3]
 8002622:	b29b      	uxth	r3, r3
 8002624:	4413      	add	r3, r2
 8002626:	b29a      	uxth	r2, r3
 8002628:	4b67      	ldr	r3, [pc, #412]	; (80027c8 <ParticlesManager+0x39c>)
 800262a:	801a      	strh	r2, [r3, #0]
			ParticleDevice.ch0_OFF = (uint16_t)(RX_BUFFER[4] << 8) + (uint16_t)RX_BUFFER[5];
 800262c:	4b65      	ldr	r3, [pc, #404]	; (80027c4 <ParticlesManager+0x398>)
 800262e:	791b      	ldrb	r3, [r3, #4]
 8002630:	b29b      	uxth	r3, r3
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	b29a      	uxth	r2, r3
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <ParticlesManager+0x398>)
 8002638:	795b      	ldrb	r3, [r3, #5]
 800263a:	b29b      	uxth	r3, r3
 800263c:	4413      	add	r3, r2
 800263e:	b29a      	uxth	r2, r3
 8002640:	4b61      	ldr	r3, [pc, #388]	; (80027c8 <ParticlesManager+0x39c>)
 8002642:	805a      	strh	r2, [r3, #2]
			ParticleDevice.ch1_ON = (uint16_t)(RX_BUFFER[6] << 8) + (uint16_t)RX_BUFFER[7];
 8002644:	4b5f      	ldr	r3, [pc, #380]	; (80027c4 <ParticlesManager+0x398>)
 8002646:	799b      	ldrb	r3, [r3, #6]
 8002648:	b29b      	uxth	r3, r3
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b5d      	ldr	r3, [pc, #372]	; (80027c4 <ParticlesManager+0x398>)
 8002650:	79db      	ldrb	r3, [r3, #7]
 8002652:	b29b      	uxth	r3, r3
 8002654:	4413      	add	r3, r2
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <ParticlesManager+0x39c>)
 800265a:	809a      	strh	r2, [r3, #4]
			ParticleDevice.ch1_OFF = (uint16_t)(RX_BUFFER[8] << 8) + (uint16_t)RX_BUFFER[9];
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <ParticlesManager+0x398>)
 800265e:	7a1b      	ldrb	r3, [r3, #8]
 8002660:	b29b      	uxth	r3, r3
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	b29a      	uxth	r2, r3
 8002666:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <ParticlesManager+0x398>)
 8002668:	7a5b      	ldrb	r3, [r3, #9]
 800266a:	b29b      	uxth	r3, r3
 800266c:	4413      	add	r3, r2
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b55      	ldr	r3, [pc, #340]	; (80027c8 <ParticlesManager+0x39c>)
 8002672:	80da      	strh	r2, [r3, #6]
			ParticleDevice.variance = (uint16_t)(RX_BUFFER[10] << 8) + (uint16_t)RX_BUFFER[11];
 8002674:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <ParticlesManager+0x398>)
 8002676:	7a9b      	ldrb	r3, [r3, #10]
 8002678:	b29b      	uxth	r3, r3
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	b29a      	uxth	r2, r3
 800267e:	4b51      	ldr	r3, [pc, #324]	; (80027c4 <ParticlesManager+0x398>)
 8002680:	7adb      	ldrb	r3, [r3, #11]
 8002682:	b29b      	uxth	r3, r3
 8002684:	4413      	add	r3, r2
 8002686:	b29a      	uxth	r2, r3
 8002688:	4b4f      	ldr	r3, [pc, #316]	; (80027c8 <ParticlesManager+0x39c>)
 800268a:	815a      	strh	r2, [r3, #10]
			ParticleDevice.temperature = (uint16_t)(RX_BUFFER[12] << 8) + (uint16_t)RX_BUFFER[13];
 800268c:	4b4d      	ldr	r3, [pc, #308]	; (80027c4 <ParticlesManager+0x398>)
 800268e:	7b1b      	ldrb	r3, [r3, #12]
 8002690:	b29b      	uxth	r3, r3
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	b29a      	uxth	r2, r3
 8002696:	4b4b      	ldr	r3, [pc, #300]	; (80027c4 <ParticlesManager+0x398>)
 8002698:	7b5b      	ldrb	r3, [r3, #13]
 800269a:	b29b      	uxth	r3, r3
 800269c:	4413      	add	r3, r2
 800269e:	b29a      	uxth	r2, r3
 80026a0:	4b49      	ldr	r3, [pc, #292]	; (80027c8 <ParticlesManager+0x39c>)
 80026a2:	819a      	strh	r2, [r3, #12]
			ParticleDevice.LED_current_meas = (uint16_t)(RX_BUFFER[14] << 8) + (uint16_t)RX_BUFFER[15];
 80026a4:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <ParticlesManager+0x398>)
 80026a6:	7b9b      	ldrb	r3, [r3, #14]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	4b45      	ldr	r3, [pc, #276]	; (80027c4 <ParticlesManager+0x398>)
 80026b0:	7bdb      	ldrb	r3, [r3, #15]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <ParticlesManager+0x39c>)
 80026ba:	831a      	strh	r2, [r3, #24]

			if(RX_BUFFER[16] & 0x80)
 80026bc:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <ParticlesManager+0x398>)
 80026be:	7c1b      	ldrb	r3, [r3, #16]
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	da09      	bge.n	80026da <ParticlesManager+0x2ae>
			{
				RX_BUFFER[16] &= 0x7F;
 80026c6:	4b3f      	ldr	r3, [pc, #252]	; (80027c4 <ParticlesManager+0x398>)
 80026c8:	7c1b      	ldrb	r3, [r3, #16]
 80026ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b3c      	ldr	r3, [pc, #240]	; (80027c4 <ParticlesManager+0x398>)
 80026d2:	741a      	strb	r2, [r3, #16]
				slp_sign = -1;
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295
 80026d8:	60fb      	str	r3, [r7, #12]
			}
			ParticleDevice.slope = slp_sign*((int)(RX_BUFFER[16] << 8) + (int)RX_BUFFER[17]);
 80026da:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <ParticlesManager+0x398>)
 80026dc:	7c1b      	ldrb	r3, [r3, #16]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	4a38      	ldr	r2, [pc, #224]	; (80027c4 <ParticlesManager+0x398>)
 80026e2:	7c52      	ldrb	r2, [r2, #17]
 80026e4:	4413      	add	r3, r2
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	4a36      	ldr	r2, [pc, #216]	; (80027c8 <ParticlesManager+0x39c>)
 80026ee:	6153      	str	r3, [r2, #20]
			ParticleDevice.Lux_ON = (uint16_t)(RX_BUFFER[18] << 8) + (uint16_t)RX_BUFFER[19];
 80026f0:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <ParticlesManager+0x398>)
 80026f2:	7c9b      	ldrb	r3, [r3, #18]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <ParticlesManager+0x398>)
 80026fc:	7cdb      	ldrb	r3, [r3, #19]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	4413      	add	r3, r2
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <ParticlesManager+0x39c>)
 8002706:	835a      	strh	r2, [r3, #26]
			ParticleDevice.Lux_OFF = (uint16_t)(RX_BUFFER[20] << 8) + (uint16_t)RX_BUFFER[21];
 8002708:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <ParticlesManager+0x398>)
 800270a:	7d1b      	ldrb	r3, [r3, #20]
 800270c:	b29b      	uxth	r3, r3
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	b29a      	uxth	r2, r3
 8002712:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <ParticlesManager+0x398>)
 8002714:	7d5b      	ldrb	r3, [r3, #21]
 8002716:	b29b      	uxth	r3, r3
 8002718:	4413      	add	r3, r2
 800271a:	b29a      	uxth	r2, r3
 800271c:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <ParticlesManager+0x39c>)
 800271e:	839a      	strh	r2, [r3, #28]
			ParticleDevice.TimeSinceInit = (uint32_t)(RX_BUFFER[22] << 24) + (uint32_t)(RX_BUFFER[23] << 16) + (uint32_t)(RX_BUFFER[24] << 8) + (uint32_t)(RX_BUFFER[25]);
 8002720:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <ParticlesManager+0x398>)
 8002722:	7d9b      	ldrb	r3, [r3, #22]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	461a      	mov	r2, r3
 8002728:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <ParticlesManager+0x398>)
 800272a:	7ddb      	ldrb	r3, [r3, #23]
 800272c:	041b      	lsls	r3, r3, #16
 800272e:	4413      	add	r3, r2
 8002730:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <ParticlesManager+0x398>)
 8002732:	7e12      	ldrb	r2, [r2, #24]
 8002734:	0212      	lsls	r2, r2, #8
 8002736:	4413      	add	r3, r2
 8002738:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <ParticlesManager+0x398>)
 800273a:	7e52      	ldrb	r2, [r2, #25]
 800273c:	4413      	add	r3, r2
 800273e:	4a22      	ldr	r2, [pc, #136]	; (80027c8 <ParticlesManager+0x39c>)
 8002740:	6213      	str	r3, [r2, #32]
		}else
		{
			uartErrorCount++;
			nextState = Send_request;
		}
		break;
 8002742:	e02d      	b.n	80027a0 <ParticlesManager+0x374>
		}else if((RX_BUFFER[1] & 0xC0) == WRITE_CMD)
 8002744:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <ParticlesManager+0x398>)
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800274c:	2bc0      	cmp	r3, #192	; 0xc0
 800274e:	d027      	beq.n	80027a0 <ParticlesManager+0x374>
		}else if((RX_BUFFER[1] & 0xC0) == SETZERO_CMD)
 8002750:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <ParticlesManager+0x398>)
 8002752:	785b      	ldrb	r3, [r3, #1]
 8002754:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d113      	bne.n	8002784 <ParticlesManager+0x358>
			setZero = false;
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <ParticlesManager+0x3a0>)
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
			ParticleDevice.zero = (uint16_t)(RX_BUFFER[4] << 8) + (uint16_t)RX_BUFFER[5];
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <ParticlesManager+0x398>)
 8002764:	791b      	ldrb	r3, [r3, #4]
 8002766:	b29b      	uxth	r3, r3
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	b29a      	uxth	r2, r3
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <ParticlesManager+0x398>)
 800276e:	795b      	ldrb	r3, [r3, #5]
 8002770:	b29b      	uxth	r3, r3
 8002772:	4413      	add	r3, r2
 8002774:	b29a      	uxth	r2, r3
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <ParticlesManager+0x39c>)
 8002778:	81da      	strh	r2, [r3, #14]
			zero_current = RX_BUFFER[7];
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <ParticlesManager+0x398>)
 800277c:	79da      	ldrb	r2, [r3, #7]
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <ParticlesManager+0x3a4>)
 8002780:	701a      	strb	r2, [r3, #0]
		break;
 8002782:	e00d      	b.n	80027a0 <ParticlesManager+0x374>
			uartErrorCount++;
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <ParticlesManager+0x3a8>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	3301      	adds	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <ParticlesManager+0x3a8>)
 800278e:	801a      	strh	r2, [r3, #0]
			nextState = Send_request;
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <ParticlesManager+0x394>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
		break;
 8002796:	e003      	b.n	80027a0 <ParticlesManager+0x374>
		break;
 8002798:	bf00      	nop
 800279a:	e002      	b.n	80027a2 <ParticlesManager+0x376>
		break;
 800279c:	bf00      	nop
 800279e:	e000      	b.n	80027a2 <ParticlesManager+0x376>
		break;
 80027a0:	bf00      	nop
	}
	if(nextState != currentState)
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <ParticlesManager+0x394>)
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <ParticlesManager+0x3ac>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d003      	beq.n	80027b6 <ParticlesManager+0x38a>
	{
		currentState = nextState;
 80027ae:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <ParticlesManager+0x394>)
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <ParticlesManager+0x3ac>)
 80027b4:	701a      	strb	r2, [r3, #0]
	}

}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000c21 	.word	0x20000c21
 80027c4:	20000c24 	.word	0x20000c24
 80027c8:	20000c78 	.word	0x20000c78
 80027cc:	20000ca1 	.word	0x20000ca1
 80027d0:	20000cb0 	.word	0x20000cb0
 80027d4:	20000cac 	.word	0x20000cac
 80027d8:	20000c20 	.word	0x20000c20

080027dc <Temperature_Init>:
float uVtoDegreeCTypeK(float uVdata,float Tref);
float VtoDegreeCRtd(float Vdata);


void Temperature_Init(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
	currentState = Sending_config;
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <Temperature_Init+0x48>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
	nextState = Sending_config;
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <Temperature_Init+0x4c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
	b_tx_pending = false;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <Temperature_Init+0x50>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <Temperature_Init+0x54>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 80027f8:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <Temperature_Init+0x58>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <Temperature_Init+0x5c>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
	Tobj.ADCConfigByte[0] = 0x9F;
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <Temperature_Init+0x60>)
 8002806:	229f      	movs	r2, #159	; 0x9f
 8002808:	741a      	strb	r2, [r3, #16]
	Tobj.ADCConfigByte[1] = 0xBF;
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <Temperature_Init+0x60>)
 800280c:	22bf      	movs	r2, #191	; 0xbf
 800280e:	745a      	strb	r2, [r3, #17]
	Tobj.ADCConfigByte[2] = 0xDC;
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <Temperature_Init+0x60>)
 8002812:	22dc      	movs	r2, #220	; 0xdc
 8002814:	749a      	strb	r2, [r3, #18]
	Tobj.ADCConfigByte[3] = 0xFC;
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <Temperature_Init+0x60>)
 8002818:	22fc      	movs	r2, #252	; 0xfc
 800281a:	74da      	strb	r2, [r3, #19]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	20000cb5 	.word	0x20000cb5
 8002828:	20000cb6 	.word	0x20000cb6
 800282c:	20000cb1 	.word	0x20000cb1
 8002830:	20000cb2 	.word	0x20000cb2
 8002834:	20000cb3 	.word	0x20000cb3
 8002838:	20000cb4 	.word	0x20000cb4
 800283c:	20000cb8 	.word	0x20000cb8

08002840 <TemperatureManager>:



void TemperatureManager(Mobj* stove, uint32_t u32time_ms)
{
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
	static int8_t ch_idx = NUMBER_OF_ADC_CH - 1;
	static uint8_t adcData[4];
	static uint32_t u32conf_time;
	int32_t i32tempReading=0;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
	float ftempReading = 0.0;
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
	float flastReading = 0.0;
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
	const float slope_filter_weight = 0.1;
 800285a:	4b85      	ldr	r3, [pc, #532]	; (8002a70 <TemperatureManager+0x230>)
 800285c:	60bb      	str	r3, [r7, #8]

	switch(currentState)
 800285e:	4b85      	ldr	r3, [pc, #532]	; (8002a74 <TemperatureManager+0x234>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b03      	cmp	r3, #3
 8002864:	f200 820a 	bhi.w	8002c7c <TemperatureManager+0x43c>
 8002868:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <TemperatureManager+0x30>)
 800286a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286e:	bf00      	nop
 8002870:	08002881 	.word	0x08002881
 8002874:	080028cb 	.word	0x080028cb
 8002878:	080028e3 	.word	0x080028e3
 800287c:	0800292f 	.word	0x0800292f
	{
	case Sending_config:
		if(b_tx_success)
 8002880:	4b7d      	ldr	r3, [pc, #500]	; (8002a78 <TemperatureManager+0x238>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <TemperatureManager+0x5c>
		{
			b_tx_success = false;
 8002888:	4b7b      	ldr	r3, [pc, #492]	; (8002a78 <TemperatureManager+0x238>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
			nextState = Wait_for_data_rdy;
 800288e:	4b7b      	ldr	r3, [pc, #492]	; (8002a7c <TemperatureManager+0x23c>)
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
			u32conf_time = u32time_ms;
 8002894:	4a7a      	ldr	r2, [pc, #488]	; (8002a80 <TemperatureManager+0x240>)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6013      	str	r3, [r2, #0]
		else if(!b_tx_pending)
		{
			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&Tobj.ADCConfigByte[ch_idx],1);
			b_tx_pending = true;
		}
		break;
 800289a:	e1e8      	b.n	8002c6e <TemperatureManager+0x42e>
		else if(!b_tx_pending)
 800289c:	4b79      	ldr	r3, [pc, #484]	; (8002a84 <TemperatureManager+0x244>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	f083 0301 	eor.w	r3, r3, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 81e1 	beq.w	8002c6e <TemperatureManager+0x42e>
			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&Tobj.ADCConfigByte[ch_idx],1);
 80028ac:	4b76      	ldr	r3, [pc, #472]	; (8002a88 <TemperatureManager+0x248>)
 80028ae:	f993 3000 	ldrsb.w	r3, [r3]
 80028b2:	3310      	adds	r3, #16
 80028b4:	4a75      	ldr	r2, [pc, #468]	; (8002a8c <TemperatureManager+0x24c>)
 80028b6:	441a      	add	r2, r3
 80028b8:	2301      	movs	r3, #1
 80028ba:	21d0      	movs	r1, #208	; 0xd0
 80028bc:	4874      	ldr	r0, [pc, #464]	; (8002a90 <TemperatureManager+0x250>)
 80028be:	f003 f849 	bl	8005954 <HAL_I2C_Master_Transmit_IT>
			b_tx_pending = true;
 80028c2:	4b70      	ldr	r3, [pc, #448]	; (8002a84 <TemperatureManager+0x244>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
		break;
 80028c8:	e1d1      	b.n	8002c6e <TemperatureManager+0x42e>
	case Wait_for_data_rdy:
		if(u32time_ms - u32conf_time > 300) //Conversion time around 266 ms
 80028ca:	4b6d      	ldr	r3, [pc, #436]	; (8002a80 <TemperatureManager+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80028d6:	f240 81cc 	bls.w	8002c72 <TemperatureManager+0x432>
		{
			nextState = Send_read_req;
 80028da:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <TemperatureManager+0x23c>)
 80028dc:	2202      	movs	r2, #2
 80028de:	701a      	strb	r2, [r3, #0]
		}
		break;
 80028e0:	e1c7      	b.n	8002c72 <TemperatureManager+0x432>
	case Send_read_req:

		if(b_rx_success)
 80028e2:	4b6c      	ldr	r3, [pc, #432]	; (8002a94 <TemperatureManager+0x254>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00f      	beq.n	800290a <TemperatureManager+0xca>
		{
			b_rx_success = false;
 80028ea:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <TemperatureManager+0x254>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
			if(IsDataNew(adcData[3]))
 80028f0:	4b69      	ldr	r3, [pc, #420]	; (8002a98 <TemperatureManager+0x258>)
 80028f2:	78db      	ldrb	r3, [r3, #3]
 80028f4:	b25b      	sxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f2c0 81bd 	blt.w	8002c76 <TemperatureManager+0x436>
			{
				adcData[3] = 0;
 80028fc:	4b66      	ldr	r3, [pc, #408]	; (8002a98 <TemperatureManager+0x258>)
 80028fe:	2200      	movs	r2, #0
 8002900:	70da      	strb	r2, [r3, #3]
				nextState = Response_received;
 8002902:	4b5e      	ldr	r3, [pc, #376]	; (8002a7c <TemperatureManager+0x23c>)
 8002904:	2203      	movs	r2, #3
 8002906:	701a      	strb	r2, [r3, #0]
		{
			HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
			b_rx_pending = true;
		}

		break;
 8002908:	e1b5      	b.n	8002c76 <TemperatureManager+0x436>
		else if(!b_rx_pending)
 800290a:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <TemperatureManager+0x25c>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	f083 0301 	eor.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 81ae 	beq.w	8002c76 <TemperatureManager+0x436>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
 800291a:	2304      	movs	r3, #4
 800291c:	4a5e      	ldr	r2, [pc, #376]	; (8002a98 <TemperatureManager+0x258>)
 800291e:	21d0      	movs	r1, #208	; 0xd0
 8002920:	485b      	ldr	r0, [pc, #364]	; (8002a90 <TemperatureManager+0x250>)
 8002922:	f003 f8bb 	bl	8005a9c <HAL_I2C_Master_Receive_IT>
			b_rx_pending = true;
 8002926:	4b5d      	ldr	r3, [pc, #372]	; (8002a9c <TemperatureManager+0x25c>)
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
		break;
 800292c:	e1a3      	b.n	8002c76 <TemperatureManager+0x436>
	case Response_received:
		i32tempReading = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
		i32tempReading = (adcData[0] << 30) + (adcData[1] << 22)  + (adcData[2] << 14); // justify the result for 32bit storage
 8002932:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <TemperatureManager+0x258>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	079a      	lsls	r2, r3, #30
 8002938:	4b57      	ldr	r3, [pc, #348]	; (8002a98 <TemperatureManager+0x258>)
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	059b      	lsls	r3, r3, #22
 800293e:	441a      	add	r2, r3
 8002940:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <TemperatureManager+0x258>)
 8002942:	789b      	ldrb	r3, [r3, #2]
 8002944:	039b      	lsls	r3, r3, #14
 8002946:	4413      	add	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
		if (i32tempReading < 0)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	da02      	bge.n	8002956 <TemperatureManager+0x116>
		{
			i32tempReading = -i32tempReading;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	425b      	negs	r3, r3
 8002954:	617b      	str	r3, [r7, #20]
		}
		i32tempReading = (i32tempReading) >> 14;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	139b      	asrs	r3, r3, #14
 800295a:	617b      	str	r3, [r7, #20]

		switch(ch_idx)
 800295c:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <TemperatureManager+0x248>)
 800295e:	f993 3000 	ldrsb.w	r3, [r3]
 8002962:	2b03      	cmp	r3, #3
 8002964:	f200 8170 	bhi.w	8002c48 <TemperatureManager+0x408>
 8002968:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <TemperatureManager+0x130>)
 800296a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296e:	bf00      	nop
 8002970:	08002981 	.word	0x08002981
 8002974:	08002ab5 	.word	0x08002ab5
 8002978:	08002ba3 	.word	0x08002ba3
 800297c:	08002bf3 	.word	0x08002bf3
		{
			case BaffleThermocouple:
				ftempReading = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 8002980:	6978      	ldr	r0, [r7, #20]
 8002982:	f7fe fa05 	bl	8000d90 <__aeabi_i2f>
 8002986:	4603      	mov	r3, r0
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fdc7 	bl	800051c <__aeabi_f2d>
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <TemperatureManager+0x260>)
 8002994:	f7fd fe1a 	bl	80005cc <__aeabi_dmul>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <TemperatureManager+0x264>)
 80029a6:	f7fd ff3b 	bl	8000820 <__aeabi_ddiv>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	f7fe f8e3 	bl	8000b7c <__aeabi_d2f>
 80029b6:	4603      	mov	r3, r0
 80029b8:	613b      	str	r3, [r7, #16]
				flastReading = stove->fBaffleTemp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]
				stove->fBaffleTemp = CELSIUS_TO_FAHRENHEIT(uVtoDegreeCTypeK(ftempReading, Tobj.fTcoldJunct)); //6.7//26.1 //board is self heating to 7.3 above ambient
 80029c0:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <TemperatureManager+0x24c>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4619      	mov	r1, r3
 80029c6:	6938      	ldr	r0, [r7, #16]
 80029c8:	f000 f9ea 	bl	8002da0 <uVtoDegreeCTypeK>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4936      	ldr	r1, [pc, #216]	; (8002aa8 <TemperatureManager+0x268>)
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe fa31 	bl	8000e38 <__aeabi_fmul>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4934      	ldr	r1, [pc, #208]	; (8002aac <TemperatureManager+0x26c>)
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fae0 	bl	8000fa0 <__aeabi_fdiv>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe f91e 	bl	8000c28 <__addsf3>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	601a      	str	r2, [r3, #0]

				if(Tobj.u32LastTimeBaffle !=0)
 80029f4:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <TemperatureManager+0x24c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d034      	beq.n	8002a66 <TemperatureManager+0x226>
				{
					stove->fBaffleDeltaT =  slope_filter_weight*stove->fBaffleDeltaT +
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fa18 	bl	8000e38 <__aeabi_fmul>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461c      	mov	r4, r3
							(1-slope_filter_weight)*(stove->fBaffleTemp-flastReading)/((u32time_ms-Tobj.u32LastTimeBaffle)/1000);
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002a12:	f7fe f907 	bl	8000c24 <__aeabi_fsub>
 8002a16:	4603      	mov	r3, r0
 8002a18:	461d      	mov	r5, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe f8ff 	bl	8000c24 <__aeabi_fsub>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	f7fe fa04 	bl	8000e38 <__aeabi_fmul>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461d      	mov	r5, r3
 8002a34:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <TemperatureManager+0x24c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <TemperatureManager+0x270>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	099b      	lsrs	r3, r3, #6
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe f99f 	bl	8000d88 <__aeabi_ui2f>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4628      	mov	r0, r5
 8002a50:	f7fe faa6 	bl	8000fa0 <__aeabi_fdiv>
 8002a54:	4603      	mov	r3, r0
					stove->fBaffleDeltaT =  slope_filter_weight*stove->fBaffleDeltaT +
 8002a56:	4619      	mov	r1, r3
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f7fe f8e5 	bl	8000c28 <__addsf3>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461a      	mov	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	60da      	str	r2, [r3, #12]
				}

				Tobj.u32LastTimeBaffle = u32time_ms;
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <TemperatureManager+0x24c>)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6013      	str	r3, [r2, #0]

				break;
 8002a6c:	e0ed      	b.n	8002c4a <TemperatureManager+0x40a>
 8002a6e:	bf00      	nop
 8002a70:	3dcccccd 	.word	0x3dcccccd
 8002a74:	20000cb5 	.word	0x20000cb5
 8002a78:	20000cb2 	.word	0x20000cb2
 8002a7c:	20000cb6 	.word	0x20000cb6
 8002a80:	20000ccc 	.word	0x20000ccc
 8002a84:	20000cb1 	.word	0x20000cb1
 8002a88:	20000144 	.word	0x20000144
 8002a8c:	20000cb8 	.word	0x20000cb8
 8002a90:	20003694 	.word	0x20003694
 8002a94:	20000cb4 	.word	0x20000cb4
 8002a98:	20000cd0 	.word	0x20000cd0
 8002a9c:	20000cb3 	.word	0x20000cb3
 8002aa0:	402f4000 	.word	0x402f4000
 8002aa4:	40200000 	.word	0x40200000
 8002aa8:	41100000 	.word	0x41100000
 8002aac:	40a00000 	.word	0x40a00000
 8002ab0:	10624dd3 	.word	0x10624dd3
			case ChamberThermocouple:
				ftempReading = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 8002ab4:	6978      	ldr	r0, [r7, #20]
 8002ab6:	f7fe f96b 	bl	8000d90 <__aeabi_i2f>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fd2d 	bl	800051c <__aeabi_f2d>
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	4b78      	ldr	r3, [pc, #480]	; (8002ca8 <TemperatureManager+0x468>)
 8002ac8:	f7fd fd80 	bl	80005cc <__aeabi_dmul>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	4b74      	ldr	r3, [pc, #464]	; (8002cac <TemperatureManager+0x46c>)
 8002ada:	f7fd fea1 	bl	8000820 <__aeabi_ddiv>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7fe f849 	bl	8000b7c <__aeabi_d2f>
 8002aea:	4603      	mov	r3, r0
 8002aec:	613b      	str	r3, [r7, #16]
				flastReading = stove->fChamberTemp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	60fb      	str	r3, [r7, #12]
				stove->fChamberTemp = CELSIUS_TO_FAHRENHEIT(uVtoDegreeCTypeK(ftempReading, Tobj.fTcoldJunct)); //6.7//26.1 //board is self heating to 7.3 above ambient
 8002af4:	4b6e      	ldr	r3, [pc, #440]	; (8002cb0 <TemperatureManager+0x470>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4619      	mov	r1, r3
 8002afa:	6938      	ldr	r0, [r7, #16]
 8002afc:	f000 f950 	bl	8002da0 <uVtoDegreeCTypeK>
 8002b00:	4603      	mov	r3, r0
 8002b02:	496c      	ldr	r1, [pc, #432]	; (8002cb4 <TemperatureManager+0x474>)
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe f997 	bl	8000e38 <__aeabi_fmul>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	496a      	ldr	r1, [pc, #424]	; (8002cb8 <TemperatureManager+0x478>)
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fa46 	bl	8000fa0 <__aeabi_fdiv>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe f884 	bl	8000c28 <__addsf3>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461a      	mov	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	605a      	str	r2, [r3, #4]

				if(Tobj.u32LastTimeChamber !=0)
 8002b28:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <TemperatureManager+0x470>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d034      	beq.n	8002b9a <TemperatureManager+0x35a>
				{
					stove->fChamberDeltaT =  slope_filter_weight*stove->fChamberDeltaT +
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe f97e 	bl	8000e38 <__aeabi_fmul>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461c      	mov	r4, r3
											(1-slope_filter_weight)*(stove->fChamberTemp-flastReading)/((u32time_ms-Tobj.u32LastTimeChamber)/1000);
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002b46:	f7fe f86d 	bl	8000c24 <__aeabi_fsub>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	461d      	mov	r5, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	68f9      	ldr	r1, [r7, #12]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe f865 	bl	8000c24 <__aeabi_fsub>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4628      	mov	r0, r5
 8002b60:	f7fe f96a 	bl	8000e38 <__aeabi_fmul>
 8002b64:	4603      	mov	r3, r0
 8002b66:	461d      	mov	r5, r3
 8002b68:	4b51      	ldr	r3, [pc, #324]	; (8002cb0 <TemperatureManager+0x470>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <TemperatureManager+0x47c>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	099b      	lsrs	r3, r3, #6
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe f905 	bl	8000d88 <__aeabi_ui2f>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4619      	mov	r1, r3
 8002b82:	4628      	mov	r0, r5
 8002b84:	f7fe fa0c 	bl	8000fa0 <__aeabi_fdiv>
 8002b88:	4603      	mov	r3, r0
					stove->fChamberDeltaT =  slope_filter_weight*stove->fChamberDeltaT +
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7fe f84b 	bl	8000c28 <__addsf3>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	611a      	str	r2, [r3, #16]
				}

				Tobj.u32LastTimeChamber = u32time_ms;
 8002b9a:	4a45      	ldr	r2, [pc, #276]	; (8002cb0 <TemperatureManager+0x470>)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6053      	str	r3, [r2, #4]
				break;
 8002ba0:	e053      	b.n	8002c4a <TemperatureManager+0x40a>
			case PlenumRtd:
				ftempReading = (float)(i32tempReading*15.625e-6);
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f7fd fca8 	bl	80004f8 <__aeabi_i2d>
 8002ba8:	a33b      	add	r3, pc, #236	; (adr r3, 8002c98 <TemperatureManager+0x458>)
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f7fd fd0d 	bl	80005cc <__aeabi_dmul>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f7fd ffdf 	bl	8000b7c <__aeabi_d2f>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	613b      	str	r3, [r7, #16]
				stove->fPlenumTemp = CELSIUS_TO_FAHRENHEIT(VtoDegreeCRtd(ftempReading));
 8002bc2:	6938      	ldr	r0, [r7, #16]
 8002bc4:	f000 fc10 	bl	80033e8 <VtoDegreeCRtd>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	493a      	ldr	r1, [pc, #232]	; (8002cb4 <TemperatureManager+0x474>)
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe f933 	bl	8000e38 <__aeabi_fmul>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4938      	ldr	r1, [pc, #224]	; (8002cb8 <TemperatureManager+0x478>)
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe f9e2 	bl	8000fa0 <__aeabi_fdiv>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe f820 	bl	8000c28 <__addsf3>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	609a      	str	r2, [r3, #8]

				break;
 8002bf0:	e02b      	b.n	8002c4a <TemperatureManager+0x40a>
			case TempSense_board:
				ftempReading = (float)(i32tempReading*15.625e-6);
 8002bf2:	6978      	ldr	r0, [r7, #20]
 8002bf4:	f7fd fc80 	bl	80004f8 <__aeabi_i2d>
 8002bf8:	a327      	add	r3, pc, #156	; (adr r3, 8002c98 <TemperatureManager+0x458>)
 8002bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfe:	f7fd fce5 	bl	80005cc <__aeabi_dmul>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7fd ffb7 	bl	8000b7c <__aeabi_d2f>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	613b      	str	r3, [r7, #16]
				Tobj.fTcoldJunct = (ftempReading-0.500)/.010;
 8002c12:	6938      	ldr	r0, [r7, #16]
 8002c14:	f7fd fc82 	bl	800051c <__aeabi_f2d>
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <TemperatureManager+0x480>)
 8002c1e:	f7fd fb1d 	bl	800025c <__aeabi_dsub>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	a31d      	add	r3, pc, #116	; (adr r3, 8002ca0 <TemperatureManager+0x460>)
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f7fd fdf6 	bl	8000820 <__aeabi_ddiv>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f7fd ff9e 	bl	8000b7c <__aeabi_d2f>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4a1b      	ldr	r2, [pc, #108]	; (8002cb0 <TemperatureManager+0x470>)
 8002c44:	60d3      	str	r3, [r2, #12]
				break;
 8002c46:	e000      	b.n	8002c4a <TemperatureManager+0x40a>
			default:
				break;
 8002c48:	bf00      	nop
		}

		nextState = Sending_config;
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <TemperatureManager+0x484>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
		if(ch_idx-- < 0)
 8002c50:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <TemperatureManager+0x488>)
 8002c52:	f993 3000 	ldrsb.w	r3, [r3]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	3a01      	subs	r2, #1
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	b251      	sxtb	r1, r2
 8002c5e:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <TemperatureManager+0x488>)
 8002c60:	7011      	strb	r1, [r2, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	da09      	bge.n	8002c7a <TemperatureManager+0x43a>
		{
			ch_idx = NUMBER_OF_ADC_CH - 1;
 8002c66:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <TemperatureManager+0x488>)
 8002c68:	2203      	movs	r2, #3
 8002c6a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002c6c:	e005      	b.n	8002c7a <TemperatureManager+0x43a>
		break;
 8002c6e:	bf00      	nop
 8002c70:	e004      	b.n	8002c7c <TemperatureManager+0x43c>
		break;
 8002c72:	bf00      	nop
 8002c74:	e002      	b.n	8002c7c <TemperatureManager+0x43c>
		break;
 8002c76:	bf00      	nop
 8002c78:	e000      	b.n	8002c7c <TemperatureManager+0x43c>
		break;
 8002c7a:	bf00      	nop
	}

	if(nextState != currentState)
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <TemperatureManager+0x484>)
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <TemperatureManager+0x48c>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d003      	beq.n	8002c90 <TemperatureManager+0x450>
	{
		currentState = nextState;
 8002c88:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <TemperatureManager+0x484>)
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <TemperatureManager+0x48c>)
 8002c8e:	701a      	strb	r2, [r3, #0]
	}

}
 8002c90:	bf00      	nop
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bdb0      	pop	{r4, r5, r7, pc}
 8002c98:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c9c:	3ef0624d 	.word	0x3ef0624d
 8002ca0:	47ae147b 	.word	0x47ae147b
 8002ca4:	3f847ae1 	.word	0x3f847ae1
 8002ca8:	402f4000 	.word	0x402f4000
 8002cac:	40200000 	.word	0x40200000
 8002cb0:	20000cb8 	.word	0x20000cb8
 8002cb4:	41100000 	.word	0x41100000
 8002cb8:	40a00000 	.word	0x40a00000
 8002cbc:	10624dd3 	.word	0x10624dd3
 8002cc0:	3fe00000 	.word	0x3fe00000
 8002cc4:	20000cb6 	.word	0x20000cb6
 8002cc8:	20000144 	.word	0x20000144
 8002ccc:	20000cb5 	.word	0x20000cb5

08002cd0 <HAL_I2C_MasterTxCpltCallback>:
{
	return Tboard;
}

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	b_tx_success = true;
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_I2C_MasterTxCpltCallback+0x20>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
	b_tx_pending = false;
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000cb2 	.word	0x20000cb2
 8002cf4:	20000cb1 	.word	0x20000cb1

08002cf8 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	b_rx_success = true;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_I2C_MasterRxCpltCallback+0x20>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_I2C_MasterRxCpltCallback+0x24>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000cb4 	.word	0x20000cb4
 8002d1c:	20000cb3 	.word	0x20000cb3

08002d20 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	b_tx_pending = false;
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_I2C_ErrorCallback+0x30>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_I2C_ErrorCallback+0x34>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <HAL_I2C_ErrorCallback+0x38>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_I2C_ErrorCallback+0x3c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
	uint32_t errorcode = hi2c->ErrorCode;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	60fb      	str	r3, [r7, #12]
	UNUSED(errorcode);
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	20000cb1 	.word	0x20000cb1
 8002d54:	20000cb2 	.word	0x20000cb2
 8002d58:	20000cb3 	.word	0x20000cb3
 8002d5c:	20000cb4 	.word	0x20000cb4

08002d60 <HAL_I2C_AbortCpltCallback>:
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	b_tx_pending = false;
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_I2C_AbortCpltCallback+0x30>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_I2C_AbortCpltCallback+0x34>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_I2C_AbortCpltCallback+0x38>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_I2C_AbortCpltCallback+0x3c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
	uint32_t errorcode = hi2c->ErrorCode;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	60fb      	str	r3, [r7, #12]
	UNUSED(errorcode);
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	20000cb1 	.word	0x20000cb1
 8002d94:	20000cb2 	.word	0x20000cb2
 8002d98:	20000cb3 	.word	0x20000cb3
 8002d9c:	20000cb4 	.word	0x20000cb4

08002da0 <uVtoDegreeCTypeK>:
#define T_COEF_A0 1.185976E-1
#define T_COEF_A1 -1.183432E-4
#define T_COEF_A2 1.269686E2

float uVtoDegreeCTypeK(float uVdata,float Tref)
{
 8002da0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002da4:	b08a      	sub	sp, #40	; 0x28
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
    double Vref = T_COEF_C0 + T_COEF_C1*Tref + T_COEF_C2*pow(Tref,2) + T_COEF_C3*pow(Tref,3) + T_COEF_C4*pow(Tref,4) + T_COEF_C5*pow(Tref,5) + T_COEF_C6*pow(Tref,6) + T_COEF_C7*pow(Tref,7) + T_COEF_C8*pow(Tref,8) + T_COEF_C9*pow(Tref,9)+T_COEF_A0*pow(2.718281828,T_COEF_A1*(Tref-T_COEF_A2)*(Tref-T_COEF_A2));
 8002dac:	6838      	ldr	r0, [r7, #0]
 8002dae:	f7fd fbb5 	bl	800051c <__aeabi_f2d>
 8002db2:	a3cd      	add	r3, pc, #820	; (adr r3, 80030e8 <uVtoDegreeCTypeK+0x348>)
 8002db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db8:	f7fd fc08 	bl	80005cc <__aeabi_dmul>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	a3ca      	add	r3, pc, #808	; (adr r3, 80030f0 <uVtoDegreeCTypeK+0x350>)
 8002dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dca:	f7fd fa47 	bl	800025c <__aeabi_dsub>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4614      	mov	r4, r2
 8002dd4:	461d      	mov	r5, r3
 8002dd6:	6838      	ldr	r0, [r7, #0]
 8002dd8:	f7fd fba0 	bl	800051c <__aeabi_f2d>
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002de4:	f00d fa8e 	bl	8010304 <pow>
 8002de8:	a3c3      	add	r3, pc, #780	; (adr r3, 80030f8 <uVtoDegreeCTypeK+0x358>)
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f7fd fbed 	bl	80005cc <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4620      	mov	r0, r4
 8002df8:	4629      	mov	r1, r5
 8002dfa:	f7fd fa31 	bl	8000260 <__adddf3>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4614      	mov	r4, r2
 8002e04:	461d      	mov	r5, r3
 8002e06:	6838      	ldr	r0, [r7, #0]
 8002e08:	f7fd fb88 	bl	800051c <__aeabi_f2d>
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	4bdd      	ldr	r3, [pc, #884]	; (8003188 <uVtoDegreeCTypeK+0x3e8>)
 8002e12:	f00d fa77 	bl	8010304 <pow>
 8002e16:	a3ba      	add	r3, pc, #744	; (adr r3, 8003100 <uVtoDegreeCTypeK+0x360>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f7fd fbd6 	bl	80005cc <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4620      	mov	r0, r4
 8002e26:	4629      	mov	r1, r5
 8002e28:	f7fd fa1a 	bl	8000260 <__adddf3>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4614      	mov	r4, r2
 8002e32:	461d      	mov	r5, r3
 8002e34:	6838      	ldr	r0, [r7, #0]
 8002e36:	f7fd fb71 	bl	800051c <__aeabi_f2d>
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	4bd3      	ldr	r3, [pc, #844]	; (800318c <uVtoDegreeCTypeK+0x3ec>)
 8002e40:	f00d fa60 	bl	8010304 <pow>
 8002e44:	a3b0      	add	r3, pc, #704	; (adr r3, 8003108 <uVtoDegreeCTypeK+0x368>)
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f7fd fbbf 	bl	80005cc <__aeabi_dmul>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4620      	mov	r0, r4
 8002e54:	4629      	mov	r1, r5
 8002e56:	f7fd fa03 	bl	8000260 <__adddf3>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4614      	mov	r4, r2
 8002e60:	461d      	mov	r5, r3
 8002e62:	6838      	ldr	r0, [r7, #0]
 8002e64:	f7fd fb5a 	bl	800051c <__aeabi_f2d>
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	4bc8      	ldr	r3, [pc, #800]	; (8003190 <uVtoDegreeCTypeK+0x3f0>)
 8002e6e:	f00d fa49 	bl	8010304 <pow>
 8002e72:	a3a7      	add	r3, pc, #668	; (adr r3, 8003110 <uVtoDegreeCTypeK+0x370>)
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f7fd fba8 	bl	80005cc <__aeabi_dmul>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4620      	mov	r0, r4
 8002e82:	4629      	mov	r1, r5
 8002e84:	f7fd f9ec 	bl	8000260 <__adddf3>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4614      	mov	r4, r2
 8002e8e:	461d      	mov	r5, r3
 8002e90:	6838      	ldr	r0, [r7, #0]
 8002e92:	f7fd fb43 	bl	800051c <__aeabi_f2d>
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	4bbe      	ldr	r3, [pc, #760]	; (8003194 <uVtoDegreeCTypeK+0x3f4>)
 8002e9c:	f00d fa32 	bl	8010304 <pow>
 8002ea0:	a39d      	add	r3, pc, #628	; (adr r3, 8003118 <uVtoDegreeCTypeK+0x378>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f7fd fb91 	bl	80005cc <__aeabi_dmul>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4620      	mov	r0, r4
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	f7fd f9d5 	bl	8000260 <__adddf3>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4614      	mov	r4, r2
 8002ebc:	461d      	mov	r5, r3
 8002ebe:	6838      	ldr	r0, [r7, #0]
 8002ec0:	f7fd fb2c 	bl	800051c <__aeabi_f2d>
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	4bb3      	ldr	r3, [pc, #716]	; (8003198 <uVtoDegreeCTypeK+0x3f8>)
 8002eca:	f00d fa1b 	bl	8010304 <pow>
 8002ece:	a394      	add	r3, pc, #592	; (adr r3, 8003120 <uVtoDegreeCTypeK+0x380>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f7fd fb7a 	bl	80005cc <__aeabi_dmul>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4620      	mov	r0, r4
 8002ede:	4629      	mov	r1, r5
 8002ee0:	f7fd f9be 	bl	8000260 <__adddf3>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4614      	mov	r4, r2
 8002eea:	461d      	mov	r5, r3
 8002eec:	6838      	ldr	r0, [r7, #0]
 8002eee:	f7fd fb15 	bl	800051c <__aeabi_f2d>
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	4ba9      	ldr	r3, [pc, #676]	; (800319c <uVtoDegreeCTypeK+0x3fc>)
 8002ef8:	f00d fa04 	bl	8010304 <pow>
 8002efc:	a38a      	add	r3, pc, #552	; (adr r3, 8003128 <uVtoDegreeCTypeK+0x388>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	f7fd fb63 	bl	80005cc <__aeabi_dmul>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	f7fd f9a7 	bl	8000260 <__adddf3>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4614      	mov	r4, r2
 8002f18:	461d      	mov	r5, r3
 8002f1a:	6838      	ldr	r0, [r7, #0]
 8002f1c:	f7fd fafe 	bl	800051c <__aeabi_f2d>
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	4b9e      	ldr	r3, [pc, #632]	; (80031a0 <uVtoDegreeCTypeK+0x400>)
 8002f26:	f00d f9ed 	bl	8010304 <pow>
 8002f2a:	a381      	add	r3, pc, #516	; (adr r3, 8003130 <uVtoDegreeCTypeK+0x390>)
 8002f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f30:	f7fd fb4c 	bl	80005cc <__aeabi_dmul>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4620      	mov	r0, r4
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	f7fd f990 	bl	8000260 <__adddf3>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4614      	mov	r4, r2
 8002f46:	461d      	mov	r5, r3
 8002f48:	6838      	ldr	r0, [r7, #0]
 8002f4a:	f7fd fae7 	bl	800051c <__aeabi_f2d>
 8002f4e:	a37a      	add	r3, pc, #488	; (adr r3, 8003138 <uVtoDegreeCTypeK+0x398>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f7fd f982 	bl	800025c <__aeabi_dsub>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	a377      	add	r3, pc, #476	; (adr r3, 8003140 <uVtoDegreeCTypeK+0x3a0>)
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	f7fd fb31 	bl	80005cc <__aeabi_dmul>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4690      	mov	r8, r2
 8002f70:	4699      	mov	r9, r3
 8002f72:	6838      	ldr	r0, [r7, #0]
 8002f74:	f7fd fad2 	bl	800051c <__aeabi_f2d>
 8002f78:	a36f      	add	r3, pc, #444	; (adr r3, 8003138 <uVtoDegreeCTypeK+0x398>)
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	f7fd f96d 	bl	800025c <__aeabi_dsub>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4640      	mov	r0, r8
 8002f88:	4649      	mov	r1, r9
 8002f8a:	f7fd fb1f 	bl	80005cc <__aeabi_dmul>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	a16d      	add	r1, pc, #436	; (adr r1, 8003148 <uVtoDegreeCTypeK+0x3a8>)
 8002f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f98:	f00d f9b4 	bl	8010304 <pow>
 8002f9c:	a36c      	add	r3, pc, #432	; (adr r3, 8003150 <uVtoDegreeCTypeK+0x3b0>)
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	f7fd fb13 	bl	80005cc <__aeabi_dmul>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4620      	mov	r0, r4
 8002fac:	4629      	mov	r1, r5
 8002fae:	f7fd f957 	bl	8000260 <__adddf3>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double Vmeas = uVdata/1000; //value need to be in mV
 8002fba:	497a      	ldr	r1, [pc, #488]	; (80031a4 <uVtoDegreeCTypeK+0x404>)
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7fd ffef 	bl	8000fa0 <__aeabi_fdiv>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd faa9 	bl	800051c <__aeabi_f2d>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double totalV = Vmeas + Vref;
 8002fd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fda:	f7fd f941 	bl	8000260 <__adddf3>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	e9c7 2302 	strd	r2, r3, [r7, #8]

    double t90;
    if(totalV < 20.644)
 8002fe6:	a35c      	add	r3, pc, #368	; (adr r3, 8003158 <uVtoDegreeCTypeK+0x3b8>)
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ff0:	f7fd fd5e 	bl	8000ab0 <__aeabi_dcmplt>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 812a 	beq.w	8003250 <uVtoDegreeCTypeK+0x4b0>
    {
     t90 = T_COEF_D0_0_500 + T_COEF_D1_0_500 *totalV + T_COEF_D2_0_500 *pow(totalV,2) + T_COEF_D3_0_500 *pow(totalV,3) + T_COEF_D4_0_500 *pow(totalV,4) + T_COEF_D5_0_500 *pow(totalV,5) + T_COEF_D6_0_500 *pow(totalV,6) + T_COEF_D7_0_500 *pow(totalV,7) + T_COEF_D8_0_500 *pow(totalV,8) + T_COEF_D9_0_500 *pow(totalV,9);
 8002ffc:	a358      	add	r3, pc, #352	; (adr r3, 8003160 <uVtoDegreeCTypeK+0x3c0>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003006:	f7fd fae1 	bl	80005cc <__aeabi_dmul>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	f7fd f921 	bl	8000260 <__adddf3>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4614      	mov	r4, r2
 8003024:	461d      	mov	r5, r3
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800302e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003032:	f00d f967 	bl	8010304 <pow>
 8003036:	a34c      	add	r3, pc, #304	; (adr r3, 8003168 <uVtoDegreeCTypeK+0x3c8>)
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f7fd fac6 	bl	80005cc <__aeabi_dmul>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4620      	mov	r0, r4
 8003046:	4629      	mov	r1, r5
 8003048:	f7fd f90a 	bl	8000260 <__adddf3>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4614      	mov	r4, r2
 8003052:	461d      	mov	r5, r3
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	4b4b      	ldr	r3, [pc, #300]	; (8003188 <uVtoDegreeCTypeK+0x3e8>)
 800305a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800305e:	f00d f951 	bl	8010304 <pow>
 8003062:	a343      	add	r3, pc, #268	; (adr r3, 8003170 <uVtoDegreeCTypeK+0x3d0>)
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f7fd fab0 	bl	80005cc <__aeabi_dmul>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4620      	mov	r0, r4
 8003072:	4629      	mov	r1, r5
 8003074:	f7fd f8f4 	bl	8000260 <__adddf3>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4614      	mov	r4, r2
 800307e:	461d      	mov	r5, r3
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	4b41      	ldr	r3, [pc, #260]	; (800318c <uVtoDegreeCTypeK+0x3ec>)
 8003086:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800308a:	f00d f93b 	bl	8010304 <pow>
 800308e:	a33a      	add	r3, pc, #232	; (adr r3, 8003178 <uVtoDegreeCTypeK+0x3d8>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd fa9a 	bl	80005cc <__aeabi_dmul>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4620      	mov	r0, r4
 800309e:	4629      	mov	r1, r5
 80030a0:	f7fd f8de 	bl	8000260 <__adddf3>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4614      	mov	r4, r2
 80030aa:	461d      	mov	r5, r3
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	4b37      	ldr	r3, [pc, #220]	; (8003190 <uVtoDegreeCTypeK+0x3f0>)
 80030b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030b6:	f00d f925 	bl	8010304 <pow>
 80030ba:	a331      	add	r3, pc, #196	; (adr r3, 8003180 <uVtoDegreeCTypeK+0x3e0>)
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	f7fd fa84 	bl	80005cc <__aeabi_dmul>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4620      	mov	r0, r4
 80030ca:	4629      	mov	r1, r5
 80030cc:	f7fd f8c8 	bl	8000260 <__adddf3>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4614      	mov	r4, r2
 80030d6:	461d      	mov	r5, r3
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <uVtoDegreeCTypeK+0x3f4>)
 80030de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030e2:	e061      	b.n	80031a8 <uVtoDegreeCTypeK+0x408>
 80030e4:	f3af 8000 	nop.w
 80030e8:	ecfa2196 	.word	0xecfa2196
 80030ec:	3fa3ed7a 	.word	0x3fa3ed7a
 80030f0:	c4b5b30b 	.word	0xc4b5b30b
 80030f4:	3f9205d7 	.word	0x3f9205d7
 80030f8:	f72891e7 	.word	0xf72891e7
 80030fc:	3ef375d4 	.word	0x3ef375d4
 8003100:	7a34de08 	.word	0x7a34de08
 8003104:	be7ab2ac 	.word	0xbe7ab2ac
 8003108:	b676ec5f 	.word	0xb676ec5f
 800310c:	3df5e184 	.word	0x3df5e184
 8003110:	c620f2a8 	.word	0xc620f2a8
 8003114:	bd63ba97 	.word	0xbd63ba97
 8003118:	e5aa091d 	.word	0xe5aa091d
 800311c:	3cc43402 	.word	0x3cc43402
 8003120:	01c8db89 	.word	0x01c8db89
 8003124:	bc17a08b 	.word	0xbc17a08b
 8003128:	b8001899 	.word	0xb8001899
 800312c:	3b5d5cb4 	.word	0x3b5d5cb4
 8003130:	51ff39ec 	.word	0x51ff39ec
 8003134:	ba8df847 	.word	0xba8df847
 8003138:	8adab9f5 	.word	0x8adab9f5
 800313c:	405fbdfd 	.word	0x405fbdfd
 8003140:	b1df7541 	.word	0xb1df7541
 8003144:	bf1f05e0 	.word	0xbf1f05e0
 8003148:	8b04919b 	.word	0x8b04919b
 800314c:	4005bf0a 	.word	0x4005bf0a
 8003150:	8d6253b2 	.word	0x8d6253b2
 8003154:	3fbe5c69 	.word	0x3fbe5c69
 8003158:	2f1a9fbe 	.word	0x2f1a9fbe
 800315c:	4034a4dd 	.word	0x4034a4dd
 8003160:	886594af 	.word	0x886594af
 8003164:	40391563 	.word	0x40391563
 8003168:	f62184e0 	.word	0xf62184e0
 800316c:	3fb41f32 	.word	0x3fb41f32
 8003170:	3c90aa07 	.word	0x3c90aa07
 8003174:	bfd00521 	.word	0xbfd00521
 8003178:	cf12f82a 	.word	0xcf12f82a
 800317c:	3fb5497e 	.word	0x3fb5497e
 8003180:	55785780 	.word	0x55785780
 8003184:	bf89266f 	.word	0xbf89266f
 8003188:	40080000 	.word	0x40080000
 800318c:	40100000 	.word	0x40100000
 8003190:	40140000 	.word	0x40140000
 8003194:	40180000 	.word	0x40180000
 8003198:	401c0000 	.word	0x401c0000
 800319c:	40200000 	.word	0x40200000
 80031a0:	40220000 	.word	0x40220000
 80031a4:	447a0000 	.word	0x447a0000
 80031a8:	f00d f8ac 	bl	8010304 <pow>
 80031ac:	a370      	add	r3, pc, #448	; (adr r3, 8003370 <uVtoDegreeCTypeK+0x5d0>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f7fd fa0b 	bl	80005cc <__aeabi_dmul>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4620      	mov	r0, r4
 80031bc:	4629      	mov	r1, r5
 80031be:	f7fd f84f 	bl	8000260 <__adddf3>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4614      	mov	r4, r2
 80031c8:	461d      	mov	r5, r3
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	4b7e      	ldr	r3, [pc, #504]	; (80033c8 <uVtoDegreeCTypeK+0x628>)
 80031d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031d4:	f00d f896 	bl	8010304 <pow>
 80031d8:	a367      	add	r3, pc, #412	; (adr r3, 8003378 <uVtoDegreeCTypeK+0x5d8>)
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f7fd f9f5 	bl	80005cc <__aeabi_dmul>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4620      	mov	r0, r4
 80031e8:	4629      	mov	r1, r5
 80031ea:	f7fd f839 	bl	8000260 <__adddf3>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4614      	mov	r4, r2
 80031f4:	461d      	mov	r5, r3
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	4b74      	ldr	r3, [pc, #464]	; (80033cc <uVtoDegreeCTypeK+0x62c>)
 80031fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003200:	f00d f880 	bl	8010304 <pow>
 8003204:	a35e      	add	r3, pc, #376	; (adr r3, 8003380 <uVtoDegreeCTypeK+0x5e0>)
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	f7fd f9df 	bl	80005cc <__aeabi_dmul>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4620      	mov	r0, r4
 8003214:	4629      	mov	r1, r5
 8003216:	f7fd f823 	bl	8000260 <__adddf3>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4614      	mov	r4, r2
 8003220:	461d      	mov	r5, r3
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	4b6a      	ldr	r3, [pc, #424]	; (80033d0 <uVtoDegreeCTypeK+0x630>)
 8003228:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800322c:	f00d f86a 	bl	8010304 <pow>
 8003230:	a355      	add	r3, pc, #340	; (adr r3, 8003388 <uVtoDegreeCTypeK+0x5e8>)
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	f7fd f9c9 	bl	80005cc <__aeabi_dmul>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4620      	mov	r0, r4
 8003240:	4629      	mov	r1, r5
 8003242:	f7fd f80d 	bl	8000260 <__adddf3>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800324e:	e082      	b.n	8003356 <uVtoDegreeCTypeK+0x5b6>
    }
    else
    {
	    t90 = T_COEF_D0_500_1372 + T_COEF_D1_500_1372 *totalV + T_COEF_D2_500_1372 *pow(totalV,2) + T_COEF_D3_500_1372 *pow(totalV,3) + T_COEF_D4_500_1372 *pow(totalV,4) + T_COEF_D5_500_1372 *pow(totalV,5) + T_COEF_D6_500_1372 *pow(totalV,6);
 8003250:	a34f      	add	r3, pc, #316	; (adr r3, 8003390 <uVtoDegreeCTypeK+0x5f0>)
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800325a:	f7fd f9b7 	bl	80005cc <__aeabi_dmul>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	a34c      	add	r3, pc, #304	; (adr r3, 8003398 <uVtoDegreeCTypeK+0x5f8>)
 8003268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326c:	f7fc fff6 	bl	800025c <__aeabi_dsub>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4614      	mov	r4, r2
 8003276:	461d      	mov	r5, r3
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003280:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003284:	f00d f83e 	bl	8010304 <pow>
 8003288:	a345      	add	r3, pc, #276	; (adr r3, 80033a0 <uVtoDegreeCTypeK+0x600>)
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f7fd f99d 	bl	80005cc <__aeabi_dmul>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4620      	mov	r0, r4
 8003298:	4629      	mov	r1, r5
 800329a:	f7fc ffe1 	bl	8000260 <__adddf3>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4614      	mov	r4, r2
 80032a4:	461d      	mov	r5, r3
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	4b4a      	ldr	r3, [pc, #296]	; (80033d4 <uVtoDegreeCTypeK+0x634>)
 80032ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032b0:	f00d f828 	bl	8010304 <pow>
 80032b4:	a33c      	add	r3, pc, #240	; (adr r3, 80033a8 <uVtoDegreeCTypeK+0x608>)
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	f7fd f987 	bl	80005cc <__aeabi_dmul>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4620      	mov	r0, r4
 80032c4:	4629      	mov	r1, r5
 80032c6:	f7fc ffcb 	bl	8000260 <__adddf3>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4614      	mov	r4, r2
 80032d0:	461d      	mov	r5, r3
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <uVtoDegreeCTypeK+0x638>)
 80032d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032dc:	f00d f812 	bl	8010304 <pow>
 80032e0:	a333      	add	r3, pc, #204	; (adr r3, 80033b0 <uVtoDegreeCTypeK+0x610>)
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	f7fd f971 	bl	80005cc <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4620      	mov	r0, r4
 80032f0:	4629      	mov	r1, r5
 80032f2:	f7fc ffb5 	bl	8000260 <__adddf3>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4614      	mov	r4, r2
 80032fc:	461d      	mov	r5, r3
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	4b36      	ldr	r3, [pc, #216]	; (80033dc <uVtoDegreeCTypeK+0x63c>)
 8003304:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003308:	f00c fffc 	bl	8010304 <pow>
 800330c:	a32a      	add	r3, pc, #168	; (adr r3, 80033b8 <uVtoDegreeCTypeK+0x618>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f7fd f95b 	bl	80005cc <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4620      	mov	r0, r4
 800331c:	4629      	mov	r1, r5
 800331e:	f7fc ff9f 	bl	8000260 <__adddf3>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4614      	mov	r4, r2
 8003328:	461d      	mov	r5, r3
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <uVtoDegreeCTypeK+0x640>)
 8003330:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003334:	f00c ffe6 	bl	8010304 <pow>
 8003338:	a321      	add	r3, pc, #132	; (adr r3, 80033c0 <uVtoDegreeCTypeK+0x620>)
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	f7fd f945 	bl	80005cc <__aeabi_dmul>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4620      	mov	r0, r4
 8003348:	4629      	mov	r1, r5
 800334a:	f7fc ff89 	bl	8000260 <__adddf3>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return (float)t90;
 8003356:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800335a:	f7fd fc0f 	bl	8000b7c <__aeabi_d2f>
 800335e:	4603      	mov	r3, r0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3728      	adds	r7, #40	; 0x28
 8003364:	46bd      	mov	sp, r7
 8003366:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800336a:	bf00      	nop
 800336c:	f3af 8000 	nop.w
 8003370:	598742c5 	.word	0x598742c5
 8003374:	3f50101c 	.word	0x3f50101c
 8003378:	8fe5dfc5 	.word	0x8fe5dfc5
 800337c:	bf072311 	.word	0xbf072311
 8003380:	d5041d19 	.word	0xd5041d19
 8003384:	3eb1beee 	.word	0x3eb1beee
 8003388:	f20e972b 	.word	0xf20e972b
 800338c:	be469b94 	.word	0xbe469b94
 8003390:	251c193b 	.word	0x251c193b
 8003394:	404826af 	.word	0x404826af
 8003398:	1d14e3bd 	.word	0x1d14e3bd
 800339c:	406079c9 	.word	0x406079c9
 80033a0:	7dffe020 	.word	0x7dffe020
 80033a4:	bffa587c 	.word	0xbffa587c
 80033a8:	72875bff 	.word	0x72875bff
 80033ac:	3fabfabb 	.word	0x3fabfabb
 80033b0:	43f14f16 	.word	0x43f14f16
 80033b4:	bf4f9f9b 	.word	0xbf4f9f9b
 80033b8:	31b5afb6 	.word	0x31b5afb6
 80033bc:	3ee275a4 	.word	0x3ee275a4
 80033c0:	f722eba7 	.word	0xf722eba7
 80033c4:	be60b376 	.word	0xbe60b376
 80033c8:	401c0000 	.word	0x401c0000
 80033cc:	40200000 	.word	0x40200000
 80033d0:	40220000 	.word	0x40220000
 80033d4:	40080000 	.word	0x40080000
 80033d8:	40100000 	.word	0x40100000
 80033dc:	40140000 	.word	0x40140000
 80033e0:	40180000 	.word	0x40180000
 80033e4:	00000000 	.word	0x00000000

080033e8 <VtoDegreeCRtd>:
float VtoDegreeCRtd(float Vdata)
{
 80033e8:	b5b0      	push	{r4, r5, r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	//using a y = 366.02x^2 -942.3x +561.55 where x is the ADC voltage and y is the temperature in C
	return (Vdata*Vdata)*366.02 - 942.3*Vdata + 561.55;
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd fd20 	bl	8000e38 <__aeabi_fmul>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd f88e 	bl	800051c <__aeabi_f2d>
 8003400:	a315      	add	r3, pc, #84	; (adr r3, 8003458 <VtoDegreeCRtd+0x70>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f7fd f8e1 	bl	80005cc <__aeabi_dmul>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4614      	mov	r4, r2
 8003410:	461d      	mov	r5, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd f882 	bl	800051c <__aeabi_f2d>
 8003418:	a311      	add	r3, pc, #68	; (adr r3, 8003460 <VtoDegreeCRtd+0x78>)
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	f7fd f8d5 	bl	80005cc <__aeabi_dmul>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4620      	mov	r0, r4
 8003428:	4629      	mov	r1, r5
 800342a:	f7fc ff17 	bl	800025c <__aeabi_dsub>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4610      	mov	r0, r2
 8003434:	4619      	mov	r1, r3
 8003436:	a30c      	add	r3, pc, #48	; (adr r3, 8003468 <VtoDegreeCRtd+0x80>)
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f7fc ff10 	bl	8000260 <__adddf3>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	f7fd fb98 	bl	8000b7c <__aeabi_d2f>
 800344c:	4603      	mov	r3, r0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bdb0      	pop	{r4, r5, r7, pc}
 8003456:	bf00      	nop
 8003458:	eb851eb8 	.word	0xeb851eb8
 800345c:	4076e051 	.word	0x4076e051
 8003460:	66666666 	.word	0x66666666
 8003464:	408d7266 	.word	0x408d7266
 8003468:	66666666 	.word	0x66666666
 800346c:	40818c66 	.word	0x40818c66

08003470 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4a06      	ldr	r2, [pc, #24]	; (8003498 <vApplicationGetIdleTaskMemory+0x28>)
 8003480:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4a05      	ldr	r2, [pc, #20]	; (800349c <vApplicationGetIdleTaskMemory+0x2c>)
 8003486:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	20000cd4 	.word	0x20000cd4
 800349c:	20000d28 	.word	0x20000d28

080034a0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a07      	ldr	r2, [pc, #28]	; (80034cc <vApplicationGetTimerTaskMemory+0x2c>)
 80034b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4a06      	ldr	r2, [pc, #24]	; (80034d0 <vApplicationGetTimerTaskMemory+0x30>)
 80034b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034be:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000f28 	.word	0x20000f28
 80034d0:	20000f7c 	.word	0x20000f7c

080034d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034d4:	b5b0      	push	{r4, r5, r7, lr}
 80034d6:	b090      	sub	sp, #64	; 0x40
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034da:	f001 f9a3 	bl	8004824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034de:	f000 f859 	bl	8003594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034e2:	f000 f9d1 	bl	8003888 <MX_GPIO_Init>
  MX_DMA_Init();
 80034e6:	f000 f9b1 	bl	800384c <MX_DMA_Init>
  MX_I2C1_Init();
 80034ea:	f000 f8b9 	bl	8003660 <MX_I2C1_Init>
  MX_RTC_Init();
 80034ee:	f000 f8e5 	bl	80036bc <MX_RTC_Init>
  MX_USART1_UART_Init();
 80034f2:	f000 f92d 	bl	8003750 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80034f6:	f000 f97f 	bl	80037f8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80034fa:	f000 f953 	bl	80037a4 <MX_USART2_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer */
  osTimerDef(Timer, TimerCallback);
 80034fe:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <main+0xa4>)
 8003500:	63bb      	str	r3, [r7, #56]	; 0x38
 8003502:	2300      	movs	r3, #0
 8003504:	63fb      	str	r3, [r7, #60]	; 0x3c
  TimerHandle = osTimerCreate(osTimer(Timer), osTimerPeriodic, NULL);
 8003506:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800350a:	2200      	movs	r2, #0
 800350c:	2101      	movs	r1, #1
 800350e:	4618      	mov	r0, r3
 8003510:	f006 fef2 	bl	800a2f8 <osTimerCreate>
 8003514:	4603      	mov	r3, r0
 8003516:	4a19      	ldr	r2, [pc, #100]	; (800357c <main+0xa8>)
 8003518:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	MotorControlHanlde = xMessageBufferCreate(10);
 800351a:	2201      	movs	r2, #1
 800351c:	2100      	movs	r1, #0
 800351e:	200a      	movs	r0, #10
 8003520:	f007 fcae 	bl	800ae80 <xStreamBufferGenericCreate>
 8003524:	4603      	mov	r3, r0
 8003526:	4a16      	ldr	r2, [pc, #88]	; (8003580 <main+0xac>)
 8003528:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Algo_task */
  osThreadDef(Algo_task, Algo_Init, osPriorityNormal, 0, 512);
 800352a:	4b16      	ldr	r3, [pc, #88]	; (8003584 <main+0xb0>)
 800352c:	f107 041c 	add.w	r4, r7, #28
 8003530:	461d      	mov	r5, r3
 8003532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800353a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Algo_taskHandle = osThreadCreate(osThread(Algo_task), NULL);
 800353e:	f107 031c 	add.w	r3, r7, #28
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f006 fe76 	bl	800a236 <osThreadCreate>
 800354a:	4603      	mov	r3, r0
 800354c:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <main+0xb4>)
 800354e:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorManager */
  osThreadDef(MotorManager, Motor_Init, osPriorityAboveNormal, 0, 128);
 8003550:	4b0e      	ldr	r3, [pc, #56]	; (800358c <main+0xb8>)
 8003552:	463c      	mov	r4, r7
 8003554:	461d      	mov	r5, r3
 8003556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800355a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800355e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorManagerHandle = osThreadCreate(osThread(MotorManager), NULL);
 8003562:	463b      	mov	r3, r7
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f006 fe65 	bl	800a236 <osThreadCreate>
 800356c:	4603      	mov	r3, r0
 800356e:	4a08      	ldr	r2, [pc, #32]	; (8003590 <main+0xbc>)
 8003570:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003572:	f006 fe49 	bl	800a208 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003576:	e7fe      	b.n	8003576 <main+0xa2>
 8003578:	08003a29 	.word	0x08003a29
 800357c:	20003760 	.word	0x20003760
 8003580:	200036e8 	.word	0x200036e8
 8003584:	080117e8 	.word	0x080117e8
 8003588:	20003764 	.word	0x20003764
 800358c:	08011804 	.word	0x08011804
 8003590:	200037f0 	.word	0x200037f0

08003594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b09c      	sub	sp, #112	; 0x70
 8003598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800359a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800359e:	2238      	movs	r2, #56	; 0x38
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f00a f80a 	bl	800d5bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035b8:	1d3b      	adds	r3, r7, #4
 80035ba:	2220      	movs	r2, #32
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f009 fffc 	bl	800d5bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80035c4:	2309      	movs	r3, #9
 80035c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80035ce:	2300      	movs	r3, #0
 80035d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035d2:	2301      	movs	r3, #1
 80035d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80035d6:	2301      	movs	r3, #1
 80035d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80035da:	2300      	movs	r3, #0
 80035dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035de:	2302      	movs	r3, #2
 80035e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80035e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80035f6:	4618      	mov	r0, r3
 80035f8:	f003 ffb8 	bl	800756c <HAL_RCC_OscConfig>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003602:	f000 fa2d 	bl	8003a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003606:	230f      	movs	r3, #15
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800360a:	2302      	movs	r3, #2
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800360e:	2300      	movs	r3, #0
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003616:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003618:	2300      	movs	r3, #0
 800361a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800361c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003620:	2101      	movs	r1, #1
 8003622:	4618      	mov	r0, r3
 8003624:	f004 fab8 	bl	8007b98 <HAL_RCC_ClockConfig>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800362e:	f000 fa17 	bl	8003a60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003632:	2301      	movs	r3, #1
 8003634:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800363a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	4618      	mov	r0, r3
 8003640:	f004 fcf8 	bl	8008034 <HAL_RCCEx_PeriphCLKConfig>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800364a:	f000 fa09 	bl	8003a60 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800364e:	4b03      	ldr	r3, [pc, #12]	; (800365c <SystemClock_Config+0xc8>)
 8003650:	2201      	movs	r2, #1
 8003652:	601a      	str	r2, [r3, #0]
}
 8003654:	bf00      	nop
 8003656:	3770      	adds	r7, #112	; 0x70
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	42420070 	.word	0x42420070

08003660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003664:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <MX_I2C1_Init+0x50>)
 8003666:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <MX_I2C1_Init+0x54>)
 8003668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800366a:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <MX_I2C1_Init+0x50>)
 800366c:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <MX_I2C1_Init+0x58>)
 800366e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <MX_I2C1_Init+0x50>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <MX_I2C1_Init+0x50>)
 8003678:	2200      	movs	r2, #0
 800367a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <MX_I2C1_Init+0x50>)
 800367e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <MX_I2C1_Init+0x50>)
 8003686:	2200      	movs	r2, #0
 8003688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <MX_I2C1_Init+0x50>)
 800368c:	2200      	movs	r2, #0
 800368e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003690:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <MX_I2C1_Init+0x50>)
 8003692:	2200      	movs	r2, #0
 8003694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <MX_I2C1_Init+0x50>)
 8003698:	2200      	movs	r2, #0
 800369a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800369c:	4804      	ldr	r0, [pc, #16]	; (80036b0 <MX_I2C1_Init+0x50>)
 800369e:	f002 f815 	bl	80056cc <HAL_I2C_Init>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80036a8:	f000 f9da 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036ac:	bf00      	nop
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20003694 	.word	0x20003694
 80036b4:	40005400 	.word	0x40005400
 80036b8:	000186a0 	.word	0x000186a0

080036bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80036c2:	1d3b      	adds	r3, r7, #4
 80036c4:	2100      	movs	r1, #0
 80036c6:	460a      	mov	r2, r1
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	460a      	mov	r2, r1
 80036cc:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80036ce:	2300      	movs	r3, #0
 80036d0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <MX_RTC_Init+0x8c>)
 80036d4:	4a1d      	ldr	r2, [pc, #116]	; (800374c <MX_RTC_Init+0x90>)
 80036d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <MX_RTC_Init+0x8c>)
 80036da:	f04f 32ff 	mov.w	r2, #4294967295
 80036de:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <MX_RTC_Init+0x8c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036e6:	4818      	ldr	r0, [pc, #96]	; (8003748 <MX_RTC_Init+0x8c>)
 80036e8:	f004 ff3a 	bl	8008560 <HAL_RTC_Init>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80036f2:	f000 f9b5 	bl	8003a60 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80036fe:	2300      	movs	r3, #0
 8003700:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003702:	1d3b      	adds	r3, r7, #4
 8003704:	2201      	movs	r2, #1
 8003706:	4619      	mov	r1, r3
 8003708:	480f      	ldr	r0, [pc, #60]	; (8003748 <MX_RTC_Init+0x8c>)
 800370a:	f004 ffbf 	bl	800868c <HAL_RTC_SetTime>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8003714:	f000 f9a4 	bl	8003a60 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003718:	2301      	movs	r3, #1
 800371a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800371c:	2301      	movs	r3, #1
 800371e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8003720:	2301      	movs	r3, #1
 8003722:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8003724:	2300      	movs	r3, #0
 8003726:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8003728:	463b      	mov	r3, r7
 800372a:	2201      	movs	r2, #1
 800372c:	4619      	mov	r1, r3
 800372e:	4806      	ldr	r0, [pc, #24]	; (8003748 <MX_RTC_Init+0x8c>)
 8003730:	f005 f844 	bl	80087bc <HAL_RTC_SetDate>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800373a:	f000 f991 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20003768 	.word	0x20003768
 800374c:	40002800 	.word	0x40002800

08003750 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <MX_USART1_UART_Init+0x4c>)
 8003756:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <MX_USART1_UART_Init+0x50>)
 8003758:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <MX_USART1_UART_Init+0x4c>)
 800375c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003760:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <MX_USART1_UART_Init+0x4c>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <MX_USART1_UART_Init+0x4c>)
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <MX_USART1_UART_Init+0x4c>)
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <MX_USART1_UART_Init+0x4c>)
 8003776:	220c      	movs	r2, #12
 8003778:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <MX_USART1_UART_Init+0x4c>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <MX_USART1_UART_Init+0x4c>)
 8003782:	2200      	movs	r2, #0
 8003784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003786:	4805      	ldr	r0, [pc, #20]	; (800379c <MX_USART1_UART_Init+0x4c>)
 8003788:	f005 fcd4 	bl	8009134 <HAL_UART_Init>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003792:	f000 f965 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200036ec 	.word	0x200036ec
 80037a0:	40013800 	.word	0x40013800

080037a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <MX_USART2_UART_Init+0x50>)
 80037ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037b6:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037ca:	220c      	movs	r2, #12
 80037cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ce:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037da:	4805      	ldr	r0, [pc, #20]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037dc:	f005 fcaa 	bl	8009134 <HAL_UART_Init>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80037e6:	f000 f93b 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	2000377c 	.word	0x2000377c
 80037f4:	40004400 	.word	0x40004400

080037f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80037fc:	4b11      	ldr	r3, [pc, #68]	; (8003844 <MX_USART3_UART_Init+0x4c>)
 80037fe:	4a12      	ldr	r2, [pc, #72]	; (8003848 <MX_USART3_UART_Init+0x50>)
 8003800:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <MX_USART3_UART_Init+0x4c>)
 8003804:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003808:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <MX_USART3_UART_Init+0x4c>)
 800380c:	2200      	movs	r2, #0
 800380e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <MX_USART3_UART_Init+0x4c>)
 8003812:	2200      	movs	r2, #0
 8003814:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <MX_USART3_UART_Init+0x4c>)
 8003818:	2200      	movs	r2, #0
 800381a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <MX_USART3_UART_Init+0x4c>)
 800381e:	220c      	movs	r2, #12
 8003820:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <MX_USART3_UART_Init+0x4c>)
 8003824:	2200      	movs	r2, #0
 8003826:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <MX_USART3_UART_Init+0x4c>)
 800382a:	2200      	movs	r2, #0
 800382c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800382e:	4805      	ldr	r0, [pc, #20]	; (8003844 <MX_USART3_UART_Init+0x4c>)
 8003830:	f005 fc80 	bl	8009134 <HAL_UART_Init>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800383a:	f000 f911 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20003620 	.word	0x20003620
 8003848:	40004800 	.word	0x40004800

0800384c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <MX_DMA_Init+0x38>)
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <MX_DMA_Init+0x38>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6153      	str	r3, [r2, #20]
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <MX_DMA_Init+0x38>)
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800386a:	2200      	movs	r2, #0
 800386c:	2105      	movs	r1, #5
 800386e:	2010      	movs	r0, #16
 8003870:	f001 f8bf 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003874:	2010      	movs	r0, #16
 8003876:	f001 f8d8 	bl	8004a2a <HAL_NVIC_EnableIRQ>

}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000

08003888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388e:	f107 0310 	add.w	r3, r7, #16
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800389c:	4b5d      	ldr	r3, [pc, #372]	; (8003a14 <MX_GPIO_Init+0x18c>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	4a5c      	ldr	r2, [pc, #368]	; (8003a14 <MX_GPIO_Init+0x18c>)
 80038a2:	f043 0310 	orr.w	r3, r3, #16
 80038a6:	6193      	str	r3, [r2, #24]
 80038a8:	4b5a      	ldr	r3, [pc, #360]	; (8003a14 <MX_GPIO_Init+0x18c>)
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038b4:	4b57      	ldr	r3, [pc, #348]	; (8003a14 <MX_GPIO_Init+0x18c>)
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	4a56      	ldr	r2, [pc, #344]	; (8003a14 <MX_GPIO_Init+0x18c>)
 80038ba:	f043 0320 	orr.w	r3, r3, #32
 80038be:	6193      	str	r3, [r2, #24]
 80038c0:	4b54      	ldr	r3, [pc, #336]	; (8003a14 <MX_GPIO_Init+0x18c>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038cc:	4b51      	ldr	r3, [pc, #324]	; (8003a14 <MX_GPIO_Init+0x18c>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	4a50      	ldr	r2, [pc, #320]	; (8003a14 <MX_GPIO_Init+0x18c>)
 80038d2:	f043 0304 	orr.w	r3, r3, #4
 80038d6:	6193      	str	r3, [r2, #24]
 80038d8:	4b4e      	ldr	r3, [pc, #312]	; (8003a14 <MX_GPIO_Init+0x18c>)
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e4:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <MX_GPIO_Init+0x18c>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	4a4a      	ldr	r2, [pc, #296]	; (8003a14 <MX_GPIO_Init+0x18c>)
 80038ea:	f043 0308 	orr.w	r3, r3, #8
 80038ee:	6193      	str	r3, [r2, #24]
 80038f0:	4b48      	ldr	r3, [pc, #288]	; (8003a14 <MX_GPIO_Init+0x18c>)
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step2_LowCurrent_Pin|uc_Stepper_Sleep_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin
 80038fc:	2200      	movs	r2, #0
 80038fe:	f242 71d0 	movw	r1, #10192	; 0x27d0
 8003902:	4845      	ldr	r0, [pc, #276]	; (8003a18 <MX_GPIO_Init+0x190>)
 8003904:	f001 fec9 	bl	800569a <HAL_GPIO_WritePin>
                          |Step2_DIR_Pin|Step1_LowCurrent_Pin|Step2_STEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step3_RESET_Pin|STATUS_LED1_Pin|Step3_ENABLE_Pin|Step2_RESET_Pin
 8003908:	2201      	movs	r2, #1
 800390a:	f641 012c 	movw	r1, #6188	; 0x182c
 800390e:	4842      	ldr	r0, [pc, #264]	; (8003a18 <MX_GPIO_Init+0x190>)
 8003910:	f001 fec3 	bl	800569a <HAL_GPIO_WritePin>
                          |Step2_ENABLE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_ON_Pin|AFK_Var_Pin|USB_ENABLE_Pin, GPIO_PIN_RESET);
 8003914:	2200      	movs	r2, #0
 8003916:	f248 0182 	movw	r1, #32898	; 0x8082
 800391a:	4840      	ldr	r0, [pc, #256]	; (8003a1c <MX_GPIO_Init+0x194>)
 800391c:	f001 febd 	bl	800569a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED2_Pin|Step3_DIR_Pin|Button_LED_Pin, GPIO_PIN_SET);
 8003920:	2201      	movs	r2, #1
 8003922:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003926:	483d      	ldr	r0, [pc, #244]	; (8003a1c <MX_GPIO_Init+0x194>)
 8003928:	f001 feb7 	bl	800569a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin, GPIO_PIN_RESET);
 800392c:	2200      	movs	r2, #0
 800392e:	f248 010e 	movw	r1, #32782	; 0x800e
 8003932:	483b      	ldr	r0, [pc, #236]	; (8003a20 <MX_GPIO_Init+0x198>)
 8003934:	f001 feb1 	bl	800569a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Step1_DIR_GPIO_Port, Step1_DIR_Pin, GPIO_PIN_RESET);
 8003938:	2200      	movs	r2, #0
 800393a:	2104      	movs	r1, #4
 800393c:	4839      	ldr	r0, [pc, #228]	; (8003a24 <MX_GPIO_Init+0x19c>)
 800393e:	f001 feac 	bl	800569a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step1_RESET_Pin|Step1_ENABLE_Pin, GPIO_PIN_SET);
 8003942:	2201      	movs	r2, #1
 8003944:	2130      	movs	r1, #48	; 0x30
 8003946:	4836      	ldr	r0, [pc, #216]	; (8003a20 <MX_GPIO_Init+0x198>)
 8003948:	f001 fea7 	bl	800569a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Step2_LowCurrent_Pin Step3_RESET_Pin STATUS_LED1_Pin uc_Stepper_Sleep_Pin
                           Step3_ENABLE_Pin SPEED2_COIL_Pin SPEED3_COIL_Pin Step2_DIR_Pin
                           Step1_LowCurrent_Pin Step2_STEP_Pin Step2_RESET_Pin Step2_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step2_LowCurrent_Pin|Step3_RESET_Pin|STATUS_LED1_Pin|uc_Stepper_Sleep_Pin
 800394c:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 8003950:	613b      	str	r3, [r7, #16]
                          |Step3_ENABLE_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin|Step2_DIR_Pin
                          |Step1_LowCurrent_Pin|Step2_STEP_Pin|Step2_RESET_Pin|Step2_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003952:	2301      	movs	r3, #1
 8003954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395a:	2302      	movs	r3, #2
 800395c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800395e:	f107 0310 	add.w	r3, r7, #16
 8003962:	4619      	mov	r1, r3
 8003964:	482c      	ldr	r0, [pc, #176]	; (8003a18 <MX_GPIO_Init+0x190>)
 8003966:	f001 fcfd 	bl	8005364 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch1_Pin Limit_switch2_Pin */
  GPIO_InitStruct.Pin = Limit_switch1_Pin|Limit_switch2_Pin;
 800396a:	2303      	movs	r3, #3
 800396c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003976:	f107 0310 	add.w	r3, r7, #16
 800397a:	4619      	mov	r1, r3
 800397c:	4826      	ldr	r0, [pc, #152]	; (8003a18 <MX_GPIO_Init+0x190>)
 800397e:	f001 fcf1 	bl	8005364 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_ON_Pin STATUS_LED2_Pin Step3_DIR_Pin AFK_Var_Pin
                           Button_LED_Pin USB_ENABLE_Pin */
  GPIO_InitStruct.Pin = Buzzer_ON_Pin|STATUS_LED2_Pin|Step3_DIR_Pin|AFK_Var_Pin
 8003982:	f248 13b2 	movw	r3, #33202	; 0x81b2
 8003986:	613b      	str	r3, [r7, #16]
                          |Button_LED_Pin|USB_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003988:	2301      	movs	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003990:	2302      	movs	r3, #2
 8003992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003994:	f107 0310 	add.w	r3, r7, #16
 8003998:	4619      	mov	r1, r3
 800399a:	4820      	ldr	r0, [pc, #128]	; (8003a1c <MX_GPIO_Init+0x194>)
 800399c:	f001 fce2 	bl	8005364 <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_switch3_Pin */
  GPIO_InitStruct.Pin = Limit_switch3_Pin;
 80039a0:	2340      	movs	r3, #64	; 0x40
 80039a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Limit_switch3_GPIO_Port, &GPIO_InitStruct);
 80039ac:	f107 0310 	add.w	r3, r7, #16
 80039b0:	4619      	mov	r1, r3
 80039b2:	481a      	ldr	r0, [pc, #104]	; (8003a1c <MX_GPIO_Init+0x194>)
 80039b4:	f001 fcd6 	bl	8005364 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch_Door_Pin Thermostat_Input_Pin Safety_ON_Pin Interlock_Input_Pin
                           Button_Input_Pin USB_Fault_Pin */
  GPIO_InitStruct.Pin = Limit_switch_Door_Pin|Thermostat_Input_Pin|Safety_ON_Pin|Interlock_Input_Pin
 80039b8:	f247 3301 	movw	r3, #29441	; 0x7301
 80039bc:	613b      	str	r3, [r7, #16]
                          |Button_Input_Pin|USB_Fault_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c6:	f107 0310 	add.w	r3, r7, #16
 80039ca:	4619      	mov	r1, r3
 80039cc:	4814      	ldr	r0, [pc, #80]	; (8003a20 <MX_GPIO_Init+0x198>)
 80039ce:	f001 fcc9 	bl	8005364 <HAL_GPIO_Init>

  /*Configure GPIO pins : Step3_STEP_Pin Step3_LowCurrent_Pin Stepper_HalfStep_Pin Step1_STEP_Pin
                           Step1_RESET_Pin Step1_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin
 80039d2:	f248 033e 	movw	r3, #32830	; 0x803e
 80039d6:	613b      	str	r3, [r7, #16]
                          |Step1_RESET_Pin|Step1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d8:	2301      	movs	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e0:	2302      	movs	r3, #2
 80039e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e4:	f107 0310 	add.w	r3, r7, #16
 80039e8:	4619      	mov	r1, r3
 80039ea:	480d      	ldr	r0, [pc, #52]	; (8003a20 <MX_GPIO_Init+0x198>)
 80039ec:	f001 fcba 	bl	8005364 <HAL_GPIO_Init>

  /*Configure GPIO pin : Step1_DIR_Pin */
  GPIO_InitStruct.Pin = Step1_DIR_Pin;
 80039f0:	2304      	movs	r3, #4
 80039f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f4:	2301      	movs	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fc:	2302      	movs	r3, #2
 80039fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Step1_DIR_GPIO_Port, &GPIO_InitStruct);
 8003a00:	f107 0310 	add.w	r3, r7, #16
 8003a04:	4619      	mov	r1, r3
 8003a06:	4807      	ldr	r0, [pc, #28]	; (8003a24 <MX_GPIO_Init+0x19c>)
 8003a08:	f001 fcac 	bl	8005364 <HAL_GPIO_Init>

}
 8003a0c:	bf00      	nop
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40011000 	.word	0x40011000
 8003a1c:	40010800 	.word	0x40010800
 8003a20:	40010c00 	.word	0x40010c00
 8003a24:	40011400 	.word	0x40011400

08003a28 <TimerCallback>:
  /* USER CODE END 5 */
}

/* TimerCallback function */
void TimerCallback(void const * argument)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */

  /* USER CODE END TimerCallback */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a04      	ldr	r2, [pc, #16]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003a4e:	f000 feff 	bl	8004850 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40012c00 	.word	0x40012c00

08003a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a64:	b672      	cpsid	i
}
 8003a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a68:	e7fe      	b.n	8003a68 <Error_Handler+0x8>
	...

08003a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a72:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <HAL_MspInit+0x68>)
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <HAL_MspInit+0x68>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	6193      	str	r3, [r2, #24]
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <HAL_MspInit+0x68>)
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_MspInit+0x68>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4a11      	ldr	r2, [pc, #68]	; (8003ad4 <HAL_MspInit+0x68>)
 8003a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a94:	61d3      	str	r3, [r2, #28]
 8003a96:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <HAL_MspInit+0x68>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	210f      	movs	r1, #15
 8003aa6:	f06f 0001 	mvn.w	r0, #1
 8003aaa:	f000 ffa2 	bl	80049f2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <HAL_MspInit+0x6c>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <HAL_MspInit+0x6c>)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40010000 	.word	0x40010000

08003adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae4:	f107 0310 	add.w	r3, r7, #16
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_I2C_MspInit+0x90>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d133      	bne.n	8003b64 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afc:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <HAL_I2C_MspInit+0x94>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <HAL_I2C_MspInit+0x94>)
 8003b02:	f043 0308 	orr.w	r3, r3, #8
 8003b06:	6193      	str	r3, [r2, #24]
 8003b08:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <HAL_I2C_MspInit+0x94>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8003b14:	23c0      	movs	r3, #192	; 0xc0
 8003b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b18:	2312      	movs	r3, #18
 8003b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b20:	f107 0310 	add.w	r3, r7, #16
 8003b24:	4619      	mov	r1, r3
 8003b26:	4813      	ldr	r0, [pc, #76]	; (8003b74 <HAL_I2C_MspInit+0x98>)
 8003b28:	f001 fc1c 	bl	8005364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <HAL_I2C_MspInit+0x94>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	4a0f      	ldr	r2, [pc, #60]	; (8003b70 <HAL_I2C_MspInit+0x94>)
 8003b32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b36:	61d3      	str	r3, [r2, #28]
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <HAL_I2C_MspInit+0x94>)
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003b44:	2200      	movs	r2, #0
 8003b46:	2105      	movs	r1, #5
 8003b48:	201f      	movs	r0, #31
 8003b4a:	f000 ff52 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b4e:	201f      	movs	r0, #31
 8003b50:	f000 ff6b 	bl	8004a2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8003b54:	2200      	movs	r2, #0
 8003b56:	2105      	movs	r1, #5
 8003b58:	2020      	movs	r0, #32
 8003b5a:	f000 ff4a 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b5e:	2020      	movs	r0, #32
 8003b60:	f000 ff63 	bl	8004a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b64:	bf00      	nop
 8003b66:	3720      	adds	r7, #32
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40005400 	.word	0x40005400
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40010c00 	.word	0x40010c00

08003b78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0b      	ldr	r2, [pc, #44]	; (8003bb4 <HAL_RTC_MspInit+0x3c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d110      	bne.n	8003bac <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003b8a:	f003 fce3 	bl	8007554 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <HAL_RTC_MspInit+0x40>)
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <HAL_RTC_MspInit+0x40>)
 8003b94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b98:	61d3      	str	r3, [r2, #28]
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <HAL_RTC_MspInit+0x40>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ba6:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_RTC_MspInit+0x44>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40002800 	.word	0x40002800
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	4242043c 	.word	0x4242043c

08003bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08c      	sub	sp, #48	; 0x30
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc8:	f107 0320 	add.w	r3, r7, #32
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a72      	ldr	r2, [pc, #456]	; (8003da4 <HAL_UART_MspInit+0x1e4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d13a      	bne.n	8003c56 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003be0:	4b71      	ldr	r3, [pc, #452]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	4a70      	ldr	r2, [pc, #448]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bea:	6193      	str	r3, [r2, #24]
 8003bec:	4b6e      	ldr	r3, [pc, #440]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf8:	4b6b      	ldr	r3, [pc, #428]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	4a6a      	ldr	r2, [pc, #424]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6193      	str	r3, [r2, #24]
 8003c04:	4b68      	ldr	r3, [pc, #416]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c16:	2302      	movs	r3, #2
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1e:	f107 0320 	add.w	r3, r7, #32
 8003c22:	4619      	mov	r1, r3
 8003c24:	4861      	ldr	r0, [pc, #388]	; (8003dac <HAL_UART_MspInit+0x1ec>)
 8003c26:	f001 fb9d 	bl	8005364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c30:	2300      	movs	r3, #0
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c38:	f107 0320 	add.w	r3, r7, #32
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	485b      	ldr	r0, [pc, #364]	; (8003dac <HAL_UART_MspInit+0x1ec>)
 8003c40:	f001 fb90 	bl	8005364 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003c44:	2200      	movs	r2, #0
 8003c46:	2105      	movs	r1, #5
 8003c48:	2025      	movs	r0, #37	; 0x25
 8003c4a:	f000 fed2 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c4e:	2025      	movs	r0, #37	; 0x25
 8003c50:	f000 feeb 	bl	8004a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c54:	e0a2      	b.n	8003d9c <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a55      	ldr	r2, [pc, #340]	; (8003db0 <HAL_UART_MspInit+0x1f0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d15e      	bne.n	8003d1e <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c60:	4b51      	ldr	r3, [pc, #324]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	4a50      	ldr	r2, [pc, #320]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6a:	61d3      	str	r3, [r2, #28]
 8003c6c:	4b4e      	ldr	r3, [pc, #312]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c78:	4b4b      	ldr	r3, [pc, #300]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	4a4a      	ldr	r2, [pc, #296]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003c7e:	f043 0304 	orr.w	r3, r3, #4
 8003c82:	6193      	str	r3, [r2, #24]
 8003c84:	4b48      	ldr	r3, [pc, #288]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c90:	2304      	movs	r3, #4
 8003c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c94:	2302      	movs	r3, #2
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9c:	f107 0320 	add.w	r3, r7, #32
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4842      	ldr	r0, [pc, #264]	; (8003dac <HAL_UART_MspInit+0x1ec>)
 8003ca4:	f001 fb5e 	bl	8005364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ca8:	2308      	movs	r3, #8
 8003caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cac:	2300      	movs	r3, #0
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb4:	f107 0320 	add.w	r3, r7, #32
 8003cb8:	4619      	mov	r1, r3
 8003cba:	483c      	ldr	r0, [pc, #240]	; (8003dac <HAL_UART_MspInit+0x1ec>)
 8003cbc:	f001 fb52 	bl	8005364 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003cc0:	4b3c      	ldr	r3, [pc, #240]	; (8003db4 <HAL_UART_MspInit+0x1f4>)
 8003cc2:	4a3d      	ldr	r2, [pc, #244]	; (8003db8 <HAL_UART_MspInit+0x1f8>)
 8003cc4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <HAL_UART_MspInit+0x1f4>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ccc:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <HAL_UART_MspInit+0x1f4>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cd2:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <HAL_UART_MspInit+0x1f4>)
 8003cd4:	2280      	movs	r2, #128	; 0x80
 8003cd6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cd8:	4b36      	ldr	r3, [pc, #216]	; (8003db4 <HAL_UART_MspInit+0x1f4>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cde:	4b35      	ldr	r3, [pc, #212]	; (8003db4 <HAL_UART_MspInit+0x1f4>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003ce4:	4b33      	ldr	r3, [pc, #204]	; (8003db4 <HAL_UART_MspInit+0x1f4>)
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cea:	4b32      	ldr	r3, [pc, #200]	; (8003db4 <HAL_UART_MspInit+0x1f4>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003cf0:	4830      	ldr	r0, [pc, #192]	; (8003db4 <HAL_UART_MspInit+0x1f4>)
 8003cf2:	f000 fea9 	bl	8004a48 <HAL_DMA_Init>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8003cfc:	f7ff feb0 	bl	8003a60 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a2c      	ldr	r2, [pc, #176]	; (8003db4 <HAL_UART_MspInit+0x1f4>)
 8003d04:	639a      	str	r2, [r3, #56]	; 0x38
 8003d06:	4a2b      	ldr	r2, [pc, #172]	; (8003db4 <HAL_UART_MspInit+0x1f4>)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2105      	movs	r1, #5
 8003d10:	2026      	movs	r0, #38	; 0x26
 8003d12:	f000 fe6e 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d16:	2026      	movs	r0, #38	; 0x26
 8003d18:	f000 fe87 	bl	8004a2a <HAL_NVIC_EnableIRQ>
}
 8003d1c:	e03e      	b.n	8003d9c <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a26      	ldr	r2, [pc, #152]	; (8003dbc <HAL_UART_MspInit+0x1fc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d139      	bne.n	8003d9c <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d28:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003d2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d32:	61d3      	str	r3, [r2, #28]
 8003d34:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003d46:	f043 0308 	orr.w	r3, r3, #8
 8003d4a:	6193      	str	r3, [r2, #24]
 8003d4c:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <HAL_UART_MspInit+0x1e8>)
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d62:	2303      	movs	r3, #3
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d66:	f107 0320 	add.w	r3, r7, #32
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4814      	ldr	r0, [pc, #80]	; (8003dc0 <HAL_UART_MspInit+0x200>)
 8003d6e:	f001 faf9 	bl	8005364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003d72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d80:	f107 0320 	add.w	r3, r7, #32
 8003d84:	4619      	mov	r1, r3
 8003d86:	480e      	ldr	r0, [pc, #56]	; (8003dc0 <HAL_UART_MspInit+0x200>)
 8003d88:	f001 faec 	bl	8005364 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2105      	movs	r1, #5
 8003d90:	2027      	movs	r0, #39	; 0x27
 8003d92:	f000 fe2e 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d96:	2027      	movs	r0, #39	; 0x27
 8003d98:	f000 fe47 	bl	8004a2a <HAL_NVIC_EnableIRQ>
}
 8003d9c:	bf00      	nop
 8003d9e:	3730      	adds	r7, #48	; 0x30
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40013800 	.word	0x40013800
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40010800 	.word	0x40010800
 8003db0:	40004400 	.word	0x40004400
 8003db4:	200035dc 	.word	0x200035dc
 8003db8:	4002006c 	.word	0x4002006c
 8003dbc:	40004800 	.word	0x40004800
 8003dc0:	40010c00 	.word	0x40010c00

08003dc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08c      	sub	sp, #48	; 0x30
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	2019      	movs	r0, #25
 8003dda:	f000 fe0a 	bl	80049f2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003dde:	2019      	movs	r0, #25
 8003de0:	f000 fe23 	bl	8004a2a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003de4:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <HAL_InitTick+0x9c>)
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <HAL_InitTick+0x9c>)
 8003dea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dee:	6193      	str	r3, [r2, #24]
 8003df0:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_InitTick+0x9c>)
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003dfc:	f107 0210 	add.w	r2, r7, #16
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	4611      	mov	r1, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f004 f8c6 	bl	8007f98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f004 f8b0 	bl	8007f70 <HAL_RCC_GetPCLK2Freq>
 8003e10:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <HAL_InitTick+0xa0>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	0c9b      	lsrs	r3, r3, #18
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <HAL_InitTick+0xa4>)
 8003e22:	4a12      	ldr	r2, [pc, #72]	; (8003e6c <HAL_InitTick+0xa8>)
 8003e24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <HAL_InitTick+0xa4>)
 8003e28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003e2e:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <HAL_InitTick+0xa4>)
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <HAL_InitTick+0xa4>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_InitTick+0xa4>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003e40:	4809      	ldr	r0, [pc, #36]	; (8003e68 <HAL_InitTick+0xa4>)
 8003e42:	f004 ff1b 	bl	8008c7c <HAL_TIM_Base_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d104      	bne.n	8003e56 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003e4c:	4806      	ldr	r0, [pc, #24]	; (8003e68 <HAL_InitTick+0xa4>)
 8003e4e:	f004 ff6d 	bl	8008d2c <HAL_TIM_Base_Start_IT>
 8003e52:	4603      	mov	r3, r0
 8003e54:	e000      	b.n	8003e58 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3730      	adds	r7, #48	; 0x30
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	431bde83 	.word	0x431bde83
 8003e68:	200037f4 	.word	0x200037f4
 8003e6c:	40012c00 	.word	0x40012c00

08003e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e74:	e7fe      	b.n	8003e74 <NMI_Handler+0x4>

08003e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e76:	b480      	push	{r7}
 8003e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e7a:	e7fe      	b.n	8003e7a <HardFault_Handler+0x4>

08003e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e80:	e7fe      	b.n	8003e80 <MemManage_Handler+0x4>

08003e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e82:	b480      	push	{r7}
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e86:	e7fe      	b.n	8003e86 <BusFault_Handler+0x4>

08003e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e8c:	e7fe      	b.n	8003e8c <UsageFault_Handler+0x4>

08003e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr
	...

08003e9c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ea0:	4802      	ldr	r0, [pc, #8]	; (8003eac <DMA1_Channel6_IRQHandler+0x10>)
 8003ea2:	f000 ffe9 	bl	8004e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	200035dc 	.word	0x200035dc

08003eb0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003eb4:	4802      	ldr	r0, [pc, #8]	; (8003ec0 <TIM1_UP_IRQHandler+0x10>)
 8003eb6:	f004 ff93 	bl	8008de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	200037f4 	.word	0x200037f4

08003ec4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <I2C1_EV_IRQHandler+0x10>)
 8003eca:	f001 fe93 	bl	8005bf4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20003694 	.word	0x20003694

08003ed8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003edc:	4802      	ldr	r0, [pc, #8]	; (8003ee8 <I2C1_ER_IRQHandler+0x10>)
 8003ede:	f001 fffa 	bl	8005ed6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20003694 	.word	0x20003694

08003eec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ef0:	4802      	ldr	r0, [pc, #8]	; (8003efc <USART1_IRQHandler+0x10>)
 8003ef2:	f005 fb93 	bl	800961c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	200036ec 	.word	0x200036ec

08003f00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f04:	4802      	ldr	r0, [pc, #8]	; (8003f10 <USART2_IRQHandler+0x10>)
 8003f06:	f005 fb89 	bl	800961c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	2000377c 	.word	0x2000377c

08003f14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f18:	4802      	ldr	r0, [pc, #8]	; (8003f24 <USART3_IRQHandler+0x10>)
 8003f1a:	f005 fb7f 	bl	800961c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20003620 	.word	0x20003620

08003f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
	return 1;
 8003f2c:	2301      	movs	r3, #1
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <_kill>:

int _kill(int pid, int sig)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f40:	f009 faf2 	bl	800d528 <__errno>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2216      	movs	r2, #22
 8003f48:	601a      	str	r2, [r3, #0]
	return -1;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <_exit>:

void _exit (int status)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff ffe7 	bl	8003f36 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f68:	e7fe      	b.n	8003f68 <_exit+0x12>

08003f6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	e00a      	b.n	8003f92 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f7c:	f3af 8000 	nop.w
 8003f80:	4601      	mov	r1, r0
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	60ba      	str	r2, [r7, #8]
 8003f88:	b2ca      	uxtb	r2, r1
 8003f8a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	dbf0      	blt.n	8003f7c <_read+0x12>
	}

return len;
 8003f9a:	687b      	ldr	r3, [r7, #4]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	e009      	b.n	8003fca <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	60ba      	str	r2, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fd fb52 	bl	8001668 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	dbf1      	blt.n	8003fb6 <_write+0x12>
	}
	return len;
 8003fd2:	687b      	ldr	r3, [r7, #4]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_close>:

int _close(int file)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	return -1;
 8003fe4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004002:	605a      	str	r2, [r3, #4]
	return 0;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <_isatty>:

int _isatty(int file)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	return 1;
 8004018:	2301      	movs	r3, #1
}
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
	return 0;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004044:	4a14      	ldr	r2, [pc, #80]	; (8004098 <_sbrk+0x5c>)
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <_sbrk+0x60>)
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004050:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <_sbrk+0x64>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004058:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <_sbrk+0x64>)
 800405a:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <_sbrk+0x68>)
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <_sbrk+0x64>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	429a      	cmp	r2, r3
 800406a:	d207      	bcs.n	800407c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800406c:	f009 fa5c 	bl	800d528 <__errno>
 8004070:	4603      	mov	r3, r0
 8004072:	220c      	movs	r2, #12
 8004074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004076:	f04f 33ff 	mov.w	r3, #4294967295
 800407a:	e009      	b.n	8004090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800407c:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <_sbrk+0x64>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004082:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <_sbrk+0x64>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <_sbrk+0x64>)
 800408c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800408e:	68fb      	ldr	r3, [r7, #12]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20010000 	.word	0x20010000
 800409c:	00000400 	.word	0x00000400
 80040a0:	2000137c 	.word	0x2000137c
 80040a4:	20003890 	.word	0x20003890

080040a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040b4:	480c      	ldr	r0, [pc, #48]	; (80040e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040b6:	490d      	ldr	r1, [pc, #52]	; (80040ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040b8:	4a0d      	ldr	r2, [pc, #52]	; (80040f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040bc:	e002      	b.n	80040c4 <LoopCopyDataInit>

080040be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040c2:	3304      	adds	r3, #4

080040c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040c8:	d3f9      	bcc.n	80040be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ca:	4a0a      	ldr	r2, [pc, #40]	; (80040f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040cc:	4c0a      	ldr	r4, [pc, #40]	; (80040f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040d0:	e001      	b.n	80040d6 <LoopFillZerobss>

080040d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040d4:	3204      	adds	r2, #4

080040d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040d8:	d3fb      	bcc.n	80040d2 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 80040da:	f7ff ffe5 	bl	80040a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80040de:	f009 fa3b 	bl	800d558 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040e2:	f7ff f9f7 	bl	80034d4 <main>
  bx lr
 80040e6:	4770      	bx	lr
  ldr r0, =_sdata
 80040e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040ec:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 80040f0:	08012620 	.word	0x08012620
  ldr r2, =_sbss
 80040f4:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 80040f8:	20003890 	.word	0x20003890

080040fc <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040fc:	e7fe      	b.n	80040fc <ADC1_2_IRQHandler>
	...

08004100 <UARTPROTOCOLDEC_Init>:

static void DropFrame(UARTPROTOCOLDEC_SHandle* psHandle, const char* szReason);
static void AcceptFrame(UARTPROTOCOLDEC_SHandle* psHandle);

void UARTPROTOCOLDEC_Init(UARTPROTOCOLDEC_SHandle* psHandle, const UARTPROTOCOLDEC_SConfig* psConfig)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
    assert(psHandle != NULL && psConfig != NULL && psConfig->u8PayloadBuffers != NULL);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d006      	beq.n	800411e <UARTPROTOCOLDEC_Init+0x1e>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <UARTPROTOCOLDEC_Init+0x1e>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d105      	bne.n	800412a <UARTPROTOCOLDEC_Init+0x2a>
 800411e:	4b06      	ldr	r3, [pc, #24]	; (8004138 <UARTPROTOCOLDEC_Init+0x38>)
 8004120:	4a06      	ldr	r2, [pc, #24]	; (800413c <UARTPROTOCOLDEC_Init+0x3c>)
 8004122:	210c      	movs	r1, #12
 8004124:	4806      	ldr	r0, [pc, #24]	; (8004140 <UARTPROTOCOLDEC_Init+0x40>)
 8004126:	f009 f9e1 	bl	800d4ec <__assert_func>
    psHandle->psConfig = psConfig;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	619a      	str	r2, [r3, #24]
}
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	08011820 	.word	0x08011820
 800413c:	080121b8 	.word	0x080121b8
 8004140:	0801186c 	.word	0x0801186c

08004144 <UARTPROTOCOLDEC_Reset>:

void UARTPROTOCOLDEC_Reset(UARTPROTOCOLDEC_SHandle* psHandle)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
    psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingForStartByte;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
    psHandle->u16PayloadCount = 0;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	805a      	strh	r2, [r3, #2]

    psHandle->s64StartTimeMS = 0;
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9c1 2302 	strd	r2, r3, [r1, #8]
    psHandle->u8CurrentFrameID = 0;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	741a      	strb	r2, [r3, #16]

    psHandle->u8ChecksumCalculation = 0;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	751a      	strb	r2, [r3, #20]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <UARTPROTOCOLDEC_HandleIn>:

void UARTPROTOCOLDEC_HandleIn(UARTPROTOCOLDEC_SHandle* psHandle, const uint8_t* u8Datas, uint16_t u16DataLen)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	4613      	mov	r3, r2
 8004188:	80fb      	strh	r3, [r7, #6]
    for(uint32_t i = 0; i < u16DataLen; i++)
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	e00a      	b.n	80041a6 <UARTPROTOCOLDEC_HandleIn+0x2a>
        AddByte(psHandle, u8Datas[i]);
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	4413      	add	r3, r2
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	4619      	mov	r1, r3
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f80c 	bl	80041b8 <AddByte>
    for(uint32_t i = 0; i < u16DataLen; i++)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	3301      	adds	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d3f0      	bcc.n	8004190 <UARTPROTOCOLDEC_HandleIn+0x14>
}
 80041ae:	bf00      	nop
 80041b0:	bf00      	nop
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <AddByte>:

static void AddByte(UARTPROTOCOLDEC_SHandle* psHandle, uint8_t u8)
{
 80041b8:	b5b0      	push	{r4, r5, r7, lr}
 80041ba:	b098      	sub	sp, #96	; 0x60
 80041bc:	af02      	add	r7, sp, #8
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
    // Timeout is supported but optional ...
    if (psHandle->eStep != UARTPROTOCOLDEC_ESTEP_WaitingForStartByte)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d026      	beq.n	800421a <AddByte+0x62>
    {
        if (psHandle->psConfig->fnGetTimerCountMSCb != NULL &&
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d021      	beq.n	800421a <AddByte+0x62>
            psHandle->psConfig->u32FrameReceiveTimeOutMS > 0)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	689b      	ldr	r3, [r3, #8]
        if (psHandle->psConfig->fnGetTimerCountMSCb != NULL &&
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01c      	beq.n	800421a <AddByte+0x62>
        {       
            const int64_t s64TimeDiffMS = psHandle->psConfig->fnGetTimerCountMSCb(psHandle) - psHandle->s64StartTimeMS;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	4798      	blx	r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80041f0:	1a84      	subs	r4, r0, r2
 80041f2:	eb61 0503 	sbc.w	r5, r1, r3
 80041f6:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
            if (s64TimeDiffMS > psHandle->psConfig->u32FrameReceiveTimeOutMS)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	4618      	mov	r0, r3
 8004202:	f04f 0100 	mov.w	r1, #0
 8004206:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800420a:	4290      	cmp	r0, r2
 800420c:	eb71 0303 	sbcs.w	r3, r1, r3
 8004210:	da03      	bge.n	800421a <AddByte+0x62>
            {
                // We don't break here on purpose, we give it a chance to start a new frame.
                DropFrame(psHandle, "Timeout");
 8004212:	4973      	ldr	r1, [pc, #460]	; (80043e0 <AddByte+0x228>)
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f909 	bl	800442c <DropFrame>
            }
        }
    }

    switch(psHandle->eStep)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b06      	cmp	r3, #6
 8004220:	f200 80d5 	bhi.w	80043ce <AddByte+0x216>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <AddByte+0x74>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	08004249 	.word	0x08004249
 8004230:	08004293 	.word	0x08004293
 8004234:	080042af 	.word	0x080042af
 8004238:	080042cd 	.word	0x080042cd
 800423c:	08004333 	.word	0x08004333
 8004240:	08004371 	.word	0x08004371
 8004244:	080043b1 	.word	0x080043b1
    {
        case UARTPROTOCOLDEC_ESTEP_WaitingForStartByte:
        {
            // Wait until we get a start byte ...
            if (u8 == UARTPROTOCOLCOMMON_START_BYTE)
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	2bcc      	cmp	r3, #204	; 0xcc
 800424c:	f040 80c1 	bne.w	80043d2 <AddByte+0x21a>
            {
                psHandle->u16CurrentFramePayloadLen = 0;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	825a      	strh	r2, [r3, #18]
                psHandle->u8ChecksumCalculation = 0;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	751a      	strb	r2, [r3, #20]

                // IF we support timeout ...
                if (psHandle->psConfig->fnGetTimerCountMSCb != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <AddByte+0xc4>
                    psHandle->s64StartTimeMS = psHandle->psConfig->fnGetTimerCountMSCb(psHandle);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800427a:	e006      	b.n	800428a <AddByte+0xd2>
                else
                    psHandle->s64StartTimeMS = 0;
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	e9c1 2302 	strd	r2, r3, [r1, #8]

                psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingFrameID;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8004290:	e09f      	b.n	80043d2 <AddByte+0x21a>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingFrameID:
        {
            psHandle->u8ChecksumCalculation += u8;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7d1a      	ldrb	r2, [r3, #20]
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	4413      	add	r3, r2
 800429a:	b2da      	uxtb	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	751a      	strb	r2, [r3, #20]
            psHandle->u8CurrentFrameID = u8;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	78fa      	ldrb	r2, [r7, #3]
 80042a4:	741a      	strb	r2, [r3, #16]
            psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingPayloadLengthB0;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2202      	movs	r2, #2
 80042aa:	701a      	strb	r2, [r3, #0]
            break;
 80042ac:	e094      	b.n	80043d8 <AddByte+0x220>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingPayloadLengthB0:
        {
            psHandle->u8ChecksumCalculation += u8;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	7d1a      	ldrb	r2, [r3, #20]
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	4413      	add	r3, r2
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	751a      	strb	r2, [r3, #20]
            psHandle->u16CurrentFramePayloadLen = u8;
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	825a      	strh	r2, [r3, #18]

            psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingPayloadLengthB1;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2203      	movs	r2, #3
 80042c8:	701a      	strb	r2, [r3, #0]
            break;
 80042ca:	e085      	b.n	80043d8 <AddByte+0x220>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingPayloadLengthB1:
        {
            psHandle->u8ChecksumCalculation += u8;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7d1a      	ldrb	r2, [r3, #20]
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	4413      	add	r3, r2
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	751a      	strb	r2, [r3, #20]
            // Little endian ...
            psHandle->u16CurrentFramePayloadLen |= (uint16_t)((uint16_t)u8 << 8);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8a5a      	ldrh	r2, [r3, #18]
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	4313      	orrs	r3, r2
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	825a      	strh	r2, [r3, #18]

            if (psHandle->u16CurrentFramePayloadLen > UARTPROTOCOLCOMMON_MAXPAYLOAD)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8a5b      	ldrh	r3, [r3, #18]
 80042f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f6:	d904      	bls.n	8004302 <AddByte+0x14a>
            {
                DropFrame(psHandle, "Payload is too big for the protocol");
 80042f8:	493a      	ldr	r1, [pc, #232]	; (80043e4 <AddByte+0x22c>)
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f896 	bl	800442c <DropFrame>
                break;
 8004300:	e06a      	b.n	80043d8 <AddByte+0x220>
            }
            
            if (psHandle->u16CurrentFramePayloadLen > psHandle->psConfig->u16PayloadBufferLen)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8a5a      	ldrh	r2, [r3, #18]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	889b      	ldrh	r3, [r3, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	d904      	bls.n	800431a <AddByte+0x162>
            {
                DropFrame(psHandle, "Payload is too big for the buffer");
 8004310:	4935      	ldr	r1, [pc, #212]	; (80043e8 <AddByte+0x230>)
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f88a 	bl	800442c <DropFrame>
                break;
 8004318:	e05e      	b.n	80043d8 <AddByte+0x220>
            }

            // 0 byte payload are supported
            if (psHandle->u16CurrentFramePayloadLen == 0)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8a5b      	ldrh	r3, [r3, #18]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d103      	bne.n	800432a <AddByte+0x172>
            	psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingChecksum;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2205      	movs	r2, #5
 8004326:	701a      	strb	r2, [r3, #0]
            else
            	psHandle->eStep = UARTPROTOCOLDEC_ESTEP_GettingPayload;
            break;
 8004328:	e056      	b.n	80043d8 <AddByte+0x220>
            	psHandle->eStep = UARTPROTOCOLDEC_ESTEP_GettingPayload;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2204      	movs	r2, #4
 800432e:	701a      	strb	r2, [r3, #0]
            break;
 8004330:	e052      	b.n	80043d8 <AddByte+0x220>
        }
        case UARTPROTOCOLDEC_ESTEP_GettingPayload:
        {
            psHandle->psConfig->u8PayloadBuffers[psHandle->u16PayloadCount] = u8;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	8852      	ldrh	r2, [r2, #2]
 800433c:	4413      	add	r3, r2
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	701a      	strb	r2, [r3, #0]
            psHandle->u8ChecksumCalculation += u8;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	7d1a      	ldrb	r2, [r3, #20]
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	4413      	add	r3, r2
 800434a:	b2da      	uxtb	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	751a      	strb	r2, [r3, #20]
            psHandle->u16PayloadCount++;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	885b      	ldrh	r3, [r3, #2]
 8004354:	3301      	adds	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	805a      	strh	r2, [r3, #2]

            // Complete payload detected ...
            if (psHandle->u16PayloadCount >= (uint32_t)psHandle->u16CurrentFramePayloadLen)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	885a      	ldrh	r2, [r3, #2]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8a5b      	ldrh	r3, [r3, #18]
 8004364:	429a      	cmp	r2, r3
 8004366:	d336      	bcc.n	80043d6 <AddByte+0x21e>
                psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingChecksum;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2205      	movs	r2, #5
 800436c:	701a      	strb	r2, [r3, #0]
            break;
 800436e:	e032      	b.n	80043d6 <AddByte+0x21e>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingChecksum:
        {
            // Bitwise operation on calculated checksum ...
            // Checksum arrived ...
            const uint8_t u8CurrChecksum = ~psHandle->u8ChecksumCalculation;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	7d1b      	ldrb	r3, [r3, #20]
 8004374:	43db      	mvns	r3, r3
 8004376:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (u8CurrChecksum != u8)
 800437a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	429a      	cmp	r2, r3
 8004382:	d011      	beq.n	80043a8 <AddByte+0x1f0>
            {
                char tmp[64+1];
                snprintf(tmp, sizeof(tmp), "Invalid checksum, expected: %2X, got: %2X", u8CurrChecksum, u8);
 8004384:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	f107 000c 	add.w	r0, r7, #12
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	4613      	mov	r3, r2
 8004392:	4a16      	ldr	r2, [pc, #88]	; (80043ec <AddByte+0x234>)
 8004394:	2141      	movs	r1, #65	; 0x41
 8004396:	f009 fee9 	bl	800e16c <sniprintf>
                DropFrame(psHandle, tmp);
 800439a:	f107 030c 	add.w	r3, r7, #12
 800439e:	4619      	mov	r1, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f843 	bl	800442c <DropFrame>
                break;
 80043a6:	e017      	b.n	80043d8 <AddByte+0x220>
            }
            
            psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingStopByte;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2206      	movs	r2, #6
 80043ac:	701a      	strb	r2, [r3, #0]
            break;
 80043ae:	e013      	b.n	80043d8 <AddByte+0x220>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingStopByte:
        {
            // If we reach this point, the checksum passed
            if (u8 != UARTPROTOCOLCOMMON_STOP_BYTE)
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	2b99      	cmp	r3, #153	; 0x99
 80043b4:	d004      	beq.n	80043c0 <AddByte+0x208>
            {
                DropFrame(psHandle, "Not a stop byte");
 80043b6:	490e      	ldr	r1, [pc, #56]	; (80043f0 <AddByte+0x238>)
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f837 	bl	800442c <DropFrame>
                break;
 80043be:	e00b      	b.n	80043d8 <AddByte+0x220>
            }

            // If we reach this point it's good.
            AcceptFrame(psHandle);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f817 	bl	80043f4 <AcceptFrame>
            UARTPROTOCOLDEC_Reset(psHandle);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff febc 	bl	8004144 <UARTPROTOCOLDEC_Reset>
            break;
 80043cc:	e004      	b.n	80043d8 <AddByte+0x220>
        }
        default:
        	break;
 80043ce:	bf00      	nop
 80043d0:	e002      	b.n	80043d8 <AddByte+0x220>
            break;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <AddByte+0x220>
            break;
 80043d6:	bf00      	nop
    }
}
 80043d8:	bf00      	nop
 80043da:	3758      	adds	r7, #88	; 0x58
 80043dc:	46bd      	mov	sp, r7
 80043de:	bdb0      	pop	{r4, r5, r7, pc}
 80043e0:	0801189c 	.word	0x0801189c
 80043e4:	080118a4 	.word	0x080118a4
 80043e8:	080118c8 	.word	0x080118c8
 80043ec:	080118ec 	.word	0x080118ec
 80043f0:	08011918 	.word	0x08011918

080043f4 <AcceptFrame>:

static void AcceptFrame(UARTPROTOCOLDEC_SHandle* psHandle)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
    if (psHandle->psConfig->fnAcceptFrameCb != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <AcceptFrame+0x2a>
        psHandle->psConfig->fnAcceptFrameCb(psHandle, psHandle->u8CurrentFrameID, psHandle->psConfig->u8PayloadBuffers, psHandle->u16PayloadCount);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	68dc      	ldr	r4, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7c19      	ldrb	r1, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	885b      	ldrh	r3, [r3, #2]
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	47a0      	blx	r4
    UARTPROTOCOLDEC_Reset(psHandle);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff fe90 	bl	8004144 <UARTPROTOCOLDEC_Reset>
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	bd90      	pop	{r4, r7, pc}

0800442c <DropFrame>:

static void DropFrame(UARTPROTOCOLDEC_SHandle* psHandle, const char* szReason)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
    if (psHandle->psConfig->fnDropFrameCb != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <DropFrame+0x20>
        psHandle->psConfig->fnDropFrameCb(psHandle, szReason);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	6839      	ldr	r1, [r7, #0]
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	4798      	blx	r3
    UARTPROTOCOLDEC_Reset(psHandle);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff fe79 	bl	8004144 <UARTPROTOCOLDEC_Reset>
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <UARTPROTOCOLENC_Init>:
#include <assert.h>
#include "uart_protocol_enc.h"

void UARTPROTOCOLENC_Init(UARTPROTOCOLENC_SHandle* psHandle, const UARTPROTOCOLENC_SConfig* psConfig)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
    assert(psHandle != NULL && psConfig != NULL);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <UARTPROTOCOLENC_Init+0x16>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d105      	bne.n	800447e <UARTPROTOCOLENC_Init+0x22>
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <UARTPROTOCOLENC_Init+0x44>)
 8004474:	4a0b      	ldr	r2, [pc, #44]	; (80044a4 <UARTPROTOCOLENC_Init+0x48>)
 8004476:	2106      	movs	r1, #6
 8004478:	480b      	ldr	r0, [pc, #44]	; (80044a8 <UARTPROTOCOLENC_Init+0x4c>)
 800447a:	f009 f837 	bl	800d4ec <__assert_func>
    assert(psConfig->fnWriteCb != NULL);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d105      	bne.n	8004492 <UARTPROTOCOLENC_Init+0x36>
 8004486:	4b09      	ldr	r3, [pc, #36]	; (80044ac <UARTPROTOCOLENC_Init+0x50>)
 8004488:	4a06      	ldr	r2, [pc, #24]	; (80044a4 <UARTPROTOCOLENC_Init+0x48>)
 800448a:	2107      	movs	r1, #7
 800448c:	4806      	ldr	r0, [pc, #24]	; (80044a8 <UARTPROTOCOLENC_Init+0x4c>)
 800448e:	f009 f82d 	bl	800d4ec <__assert_func>

    psHandle->psConfig = psConfig;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	601a      	str	r2, [r3, #0]
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	08011928 	.word	0x08011928
 80044a4:	080121d0 	.word	0x080121d0
 80044a8:	08011950 	.word	0x08011950
 80044ac:	08011980 	.word	0x08011980

080044b0 <UARTPROTOCOLENC_Send>:

bool UARTPROTOCOLENC_Send(UARTPROTOCOLENC_SHandle* psHandle, uint8_t u8ID, const uint8_t u8Payloads[], uint16_t u16PayloadLen)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	461a      	mov	r2, r3
 80044bc:	460b      	mov	r3, r1
 80044be:	72fb      	strb	r3, [r7, #11]
 80044c0:	4613      	mov	r3, r2
 80044c2:	813b      	strh	r3, [r7, #8]
    if (u16PayloadLen > UARTPROTOCOLCOMMON_MAXPAYLOAD)
 80044c4:	893b      	ldrh	r3, [r7, #8]
 80044c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ca:	d901      	bls.n	80044d0 <UARTPROTOCOLENC_Send+0x20>
        return false;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e070      	b.n	80045b2 <UARTPROTOCOLENC_Send+0x102>

    uint8_t u8Checksum = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	76fb      	strb	r3, [r7, #27]
    const uint8_t u8STARTBYTE = UARTPROTOCOLCOMMON_START_BYTE;
 80044d4:	23cc      	movs	r3, #204	; 0xcc
 80044d6:	76bb      	strb	r3, [r7, #26]
    psHandle->psConfig->fnWriteCb(psHandle, &u8STARTBYTE, 1);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f107 011a 	add.w	r1, r7, #26
 80044e2:	2201      	movs	r2, #1
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	4798      	blx	r3
    psHandle->psConfig->fnWriteCb(psHandle, &u8ID, 1);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f107 010b 	add.w	r1, r7, #11
 80044f2:	2201      	movs	r2, #1
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	4798      	blx	r3
    u8Checksum += u8ID;
 80044f8:	7efa      	ldrb	r2, [r7, #27]
 80044fa:	7afb      	ldrb	r3, [r7, #11]
 80044fc:	4413      	add	r3, r2
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	76fb      	strb	r3, [r7, #27]
    // Payload in LITTLE ENDIAN format
    const uint8_t u8LenB0 = (uint8_t)(u16PayloadLen & 0xFF);
 8004502:	893b      	ldrh	r3, [r7, #8]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	767b      	strb	r3, [r7, #25]
    psHandle->psConfig->fnWriteCb(psHandle, &u8LenB0, 1);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f107 0119 	add.w	r1, r7, #25
 8004512:	2201      	movs	r2, #1
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	4798      	blx	r3
    const uint8_t u8LenB1 = (uint8_t)((u16PayloadLen >> 8) & 0xFF);
 8004518:	893b      	ldrh	r3, [r7, #8]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	b29b      	uxth	r3, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	763b      	strb	r3, [r7, #24]
    psHandle->psConfig->fnWriteCb(psHandle, &u8LenB1, 1);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f107 0118 	add.w	r1, r7, #24
 800452c:	2201      	movs	r2, #1
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	4798      	blx	r3
    // Calculate checksum on the fly ...
    if (u8Payloads != NULL && u16PayloadLen > 0)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d025      	beq.n	8004584 <UARTPROTOCOLENC_Send+0xd4>
 8004538:	893b      	ldrh	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d022      	beq.n	8004584 <UARTPROTOCOLENC_Send+0xd4>
    {
        u8Checksum += u8LenB0;
 800453e:	7efa      	ldrb	r2, [r7, #27]
 8004540:	7e7b      	ldrb	r3, [r7, #25]
 8004542:	4413      	add	r3, r2
 8004544:	b2db      	uxtb	r3, r3
 8004546:	76fb      	strb	r3, [r7, #27]
        u8Checksum += u8LenB1;
 8004548:	7efa      	ldrb	r2, [r7, #27]
 800454a:	7e3b      	ldrb	r3, [r7, #24]
 800454c:	4413      	add	r3, r2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	76fb      	strb	r3, [r7, #27]
        for(int i = 0; i < u16PayloadLen; i++)
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	e00a      	b.n	800456e <UARTPROTOCOLENC_Send+0xbe>
            u8Checksum += u8Payloads[i];
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	781a      	ldrb	r2, [r3, #0]
 8004560:	7efb      	ldrb	r3, [r7, #27]
 8004562:	4413      	add	r3, r2
 8004564:	b2db      	uxtb	r3, r3
 8004566:	76fb      	strb	r3, [r7, #27]
        for(int i = 0; i < u16PayloadLen; i++)
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	3301      	adds	r3, #1
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	893b      	ldrh	r3, [r7, #8]
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	429a      	cmp	r2, r3
 8004574:	dbf0      	blt.n	8004558 <UARTPROTOCOLENC_Send+0xa8>
        psHandle->psConfig->fnWriteCb(psHandle, u8Payloads, u16PayloadLen);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	893a      	ldrh	r2, [r7, #8]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	4798      	blx	r3
    }
    u8Checksum = ~u8Checksum;
 8004584:	7efb      	ldrb	r3, [r7, #27]
 8004586:	43db      	mvns	r3, r3
 8004588:	b2db      	uxtb	r3, r3
 800458a:	76fb      	strb	r3, [r7, #27]

    psHandle->psConfig->fnWriteCb(psHandle, &u8Checksum, 1);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f107 011b 	add.w	r1, r7, #27
 8004596:	2201      	movs	r2, #1
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	4798      	blx	r3
    const uint8_t u8STOPBYTE = UARTPROTOCOLCOMMON_STOP_BYTE;
 800459c:	2399      	movs	r3, #153	; 0x99
 800459e:	75fb      	strb	r3, [r7, #23]
    psHandle->psConfig->fnWriteCb(psHandle, &u8STOPBYTE, 1);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f107 0117 	add.w	r1, r7, #23
 80045aa:	2201      	movs	r2, #1
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	4798      	blx	r3
    return true;
 80045b0:	2301      	movs	r3, #1
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <UFEC23ENDEC_A2AReqPingAliveEncode>:
{
    
}

int32_t UFEC23ENDEC_A2AReqPingAliveEncode(uint8_t u8Dst[], uint32_t u32DstLen, const UFEC23ENDEC_A2AReqPingAlive* pSrc)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
    if (u32DstLen < UFEC23ENDEC_A2AREQPINGALIVE_COUNT)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d801      	bhi.n	80045d0 <UFEC23ENDEC_A2AReqPingAliveEncode+0x16>
        return 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e005      	b.n	80045dc <UFEC23ENDEC_A2AReqPingAliveEncode+0x22>
    memcpy(u8Dst, &pSrc->u32Ping, sizeof(uint32_t));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	601a      	str	r2, [r3, #0]
    return sizeof(uint32_t);
 80045da:	2304      	movs	r3, #4
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr

080045e6 <UFEC23ENDEC_A2AReqPingAliveDecode>:

bool UFEC23ENDEC_A2AReqPingAliveDecode(UFEC23ENDEC_A2AReqPingAlive* pDst, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
    if (u32DataLen < UFEC23ENDEC_A2AREQPINGALIVE_COUNT)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d801      	bhi.n	80045fc <UFEC23ENDEC_A2AReqPingAliveDecode+0x16>
        return false;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e004      	b.n	8004606 <UFEC23ENDEC_A2AReqPingAliveDecode+0x20>
    memcpy(&pDst->u32Ping, u8Datas, sizeof(uint32_t));
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	601a      	str	r2, [r3, #0]
    return true;
 8004604:	2301      	movs	r3, #1
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <UFEC23ENDEC_C2SGetParameterDecode>:
    u8Dst[n++] = (uint8_t)pSrc->eIterateOp;
    return n;
}

bool UFEC23ENDEC_C2SGetParameterDecode(UFEC23ENDEC_C2SGetParameter* pDst, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
    if (u32DataLen < UFEC23ENDEC_C2SGETPARAMETER_COUNT)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <UFEC23ENDEC_C2SGetParameterDecode+0x16>
        return false;
 8004622:	2300      	movs	r3, #0
 8004624:	e00a      	b.n	800463c <UFEC23ENDEC_C2SGetParameterDecode+0x2c>
    pDst->eIterateOp = (UFEC23ENDEC_EITERATEOP)u8Datas[0];
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	701a      	strb	r2, [r3, #0]
    if (pDst->eIterateOp >= UFEC23ENDEC_EITERATEOP_Count)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d901      	bls.n	800463a <UFEC23ENDEC_C2SGetParameterDecode+0x2a>
        return false;
 8004636:	2300      	movs	r3, #0
 8004638:	e000      	b.n	800463c <UFEC23ENDEC_C2SGetParameterDecode+0x2c>
    return true;
 800463a:	2301      	movs	r3, #1
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <UFEC23ENDEC_S2CGetParameterRespEncode>:
    pDst->bIsFanModeAuto = (u8Datas[3] & 0x02) ? 0x01 : 0x00;
    return true;
}

int32_t UFEC23ENDEC_S2CGetParameterRespEncode(uint8_t u8Dst[], uint32_t u32DstLen, const UFEC23ENDEC_S2CReqParameterGetResp* pSrc)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b088      	sub	sp, #32
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
    if (u32DstLen < UFEC23ENDEC_S2CREQPARAMETERGETRESP_MAX_COUNT)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b4a      	cmp	r3, #74	; 0x4a
 8004656:	d801      	bhi.n	800465c <UFEC23ENDEC_S2CGetParameterRespEncode+0x16>
        return 0;
 8004658:	2300      	movs	r3, #0
 800465a:	e07f      	b.n	800475c <UFEC23ENDEC_S2CGetParameterRespEncode+0x116>
 
    const UFEC23ENDEC_SEntry* psEntry = &pSrc->sEntry;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	61fb      	str	r3, [r7, #28]
	int32_t n = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <UFEC23ENDEC_S2CGetParameterRespEncode+0x2c>
 800466e:	2201      	movs	r2, #1
 8004670:	e000      	b.n	8004674 <UFEC23ENDEC_S2CGetParameterRespEncode+0x2e>
 8004672:	2200      	movs	r2, #0
                           (pSrc->bIsEOF ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_EOF : 0x00)) |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <UFEC23ENDEC_S2CGetParameterRespEncode+0x3c>
 800467e:	2302      	movs	r3, #2
 8004680:	e000      	b.n	8004684 <UFEC23ENDEC_S2CGetParameterRespEncode+0x3e>
 8004682:	2300      	movs	r3, #0
 8004684:	4313      	orrs	r3, r2
 8004686:	b25b      	sxtb	r3, r3
                           (pSrc->bIsFirstRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_ISFIRSTRECORD : 0x00);
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
                           (pSrc->bIsEOF ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_EOF : 0x00)) |
 800468e:	2a00      	cmp	r2, #0
 8004690:	d001      	beq.n	8004696 <UFEC23ENDEC_S2CGetParameterRespEncode+0x50>
 8004692:	2204      	movs	r2, #4
 8004694:	e000      	b.n	8004698 <UFEC23ENDEC_S2CGetParameterRespEncode+0x52>
 8004696:	2200      	movs	r2, #0
 8004698:	4313      	orrs	r3, r2
 800469a:	b259      	sxtb	r1, r3
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	61ba      	str	r2, [r7, #24]
 80046a2:	461a      	mov	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
                           (pSrc->bIsEOF ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_EOF : 0x00)) |
 80046a8:	b2ca      	uxtb	r2, r1
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 80046aa:	701a      	strb	r2, [r3, #0]
	u8Dst[n++] = (uint8_t)psEntry->eParamType;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	61ba      	str	r2, [r7, #24]
 80046b2:	461a      	mov	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	7fd2      	ldrb	r2, [r2, #31]
 80046bc:	701a      	strb	r2, [r3, #0]
	const uint8_t u8KeyLen = (uint8_t)strnlen(psEntry->szKey, UFEC23ENDEC_PARAMETERITEM_KEY_LEN+1);
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	211f      	movs	r1, #31
 80046c2:	4618      	mov	r0, r3
 80046c4:	f009 fd8e 	bl	800e1e4 <strnlen>
 80046c8:	4603      	mov	r3, r0
 80046ca:	75fb      	strb	r3, [r7, #23]
	if (u8KeyLen > UFEC23ENDEC_PARAMETERITEM_KEY_LEN)
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	2b1e      	cmp	r3, #30
 80046d0:	d901      	bls.n	80046d6 <UFEC23ENDEC_S2CGetParameterRespEncode+0x90>
		return 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e042      	b.n	800475c <UFEC23ENDEC_S2CGetParameterRespEncode+0x116>
	u8Dst[n++] = (uint8_t)u8KeyLen;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	61ba      	str	r2, [r7, #24]
 80046dc:	461a      	mov	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4413      	add	r3, r2
 80046e2:	7dfa      	ldrb	r2, [r7, #23]
 80046e4:	701a      	strb	r2, [r3, #0]
    memcpy(u8Dst + n, psEntry->szKey, (size_t)u8KeyLen);
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	69f9      	ldr	r1, [r7, #28]
 80046ee:	7dfa      	ldrb	r2, [r7, #23]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f008 ff55 	bl	800d5a0 <memcpy>
    n += u8KeyLen;
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4413      	add	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
    if (psEntry->eParamType == UFEC23ENDEC_EPARAMTYPE_Int32)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	7fdb      	ldrb	r3, [r3, #31]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d129      	bne.n	800475a <UFEC23ENDEC_S2CGetParameterRespEncode+0x114>
    {
        memcpy(&u8Dst[n], &psEntry->uType.sInt32.s32Default, sizeof(int32_t));
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	3220      	adds	r2, #32
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	3304      	adds	r3, #4
 8004718:	61bb      	str	r3, [r7, #24]
        memcpy(&u8Dst[n], &psEntry->uType.sInt32.s32Min, sizeof(int32_t));
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	3224      	adds	r2, #36	; 0x24
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	3304      	adds	r3, #4
 800472c:	61bb      	str	r3, [r7, #24]
        memcpy(&u8Dst[n], &psEntry->uType.sInt32.s32Max, sizeof(int32_t));
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	3228      	adds	r2, #40	; 0x28
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	3304      	adds	r3, #4
 8004740:	61bb      	str	r3, [r7, #24]
        memcpy(&u8Dst[n], &pSrc->uValue.s32Value, sizeof(int32_t));
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	322c      	adds	r2, #44	; 0x2c
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	3304      	adds	r3, #4
 8004754:	61bb      	str	r3, [r7, #24]
    else
    {
        // Not supported
        return 0;
    }
	return n;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	e000      	b.n	800475c <UFEC23ENDEC_S2CGetParameterRespEncode+0x116>
        return 0;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <UFEC23ENDEC_C2SSetParameterDecode>:
    n += sizeof(UFEC23ENDEC_uValue);
    return n;
}

bool UFEC23ENDEC_C2SSetParameterDecode(UFEC23PROTOCOL_C2SSetParameter* pDst, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
    if (u32DataLen < 1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <UFEC23ENDEC_C2SSetParameterDecode+0x16>
        return false;
 8004776:	2300      	movs	r3, #0
 8004778:	e033      	b.n	80047e2 <UFEC23ENDEC_C2SSetParameterDecode+0x7e>
    int n = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]
    const uint8_t u8KeyLen = u8Datas[n++];
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	617a      	str	r2, [r7, #20]
 8004784:	461a      	mov	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4413      	add	r3, r2
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	74fb      	strb	r3, [r7, #19]
    if (u32DataLen < 1 + u8KeyLen)
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	3301      	adds	r3, #1
 8004792:	461a      	mov	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4293      	cmp	r3, r2
 8004798:	d201      	bcs.n	800479e <UFEC23ENDEC_C2SSetParameterDecode+0x3a>
        return false;
 800479a:	2300      	movs	r3, #0
 800479c:	e021      	b.n	80047e2 <UFEC23ENDEC_C2SSetParameterDecode+0x7e>
    memcpy(pDst->szKey, &u8Datas[n], u8KeyLen);
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	4413      	add	r3, r2
 80047a6:	7cfa      	ldrb	r2, [r7, #19]
 80047a8:	4619      	mov	r1, r3
 80047aa:	f008 fef9 	bl	800d5a0 <memcpy>
    pDst->szKey[u8KeyLen] = 0;
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	2100      	movs	r1, #0
 80047b4:	54d1      	strb	r1, [r2, r3]
    n += u8KeyLen;
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4413      	add	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]
    if (u32DataLen < 1 + u8KeyLen + sizeof(UFEC23ENDEC_uValue))
 80047be:	7cfb      	ldrb	r3, [r7, #19]
 80047c0:	3305      	adds	r3, #5
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d201      	bcs.n	80047cc <UFEC23ENDEC_C2SSetParameterDecode+0x68>
        return false;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e00a      	b.n	80047e2 <UFEC23ENDEC_C2SSetParameterDecode+0x7e>
    memcpy(&pDst->uValue, &u8Datas[n], sizeof(UFEC23ENDEC_uValue));
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3320      	adds	r3, #32
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	440a      	add	r2, r1
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	601a      	str	r2, [r3, #0]
    n += sizeof(UFEC23ENDEC_uValue);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	3304      	adds	r3, #4
 80047de:	617b      	str	r3, [r7, #20]
    return true;
 80047e0:	2301      	movs	r3, #1
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <UFEC23ENDEC_S2CSetParameterRespEncode>:

int32_t UFEC23ENDEC_S2CSetParameterRespEncode(uint8_t u8Dst[], uint32_t u32DstLen, const UFEC23PROTOCOL_S2CSetParameterResp* pSrc)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b087      	sub	sp, #28
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	607a      	str	r2, [r7, #4]
    if (u32DstLen < UFEC23ENDEC_S2CSETPARAMETERRESP_COUNT)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <UFEC23ENDEC_S2CSetParameterRespEncode+0x16>
        return 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e00b      	b.n	8004818 <UFEC23ENDEC_S2CSetParameterRespEncode+0x2e>
    int n = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
    u8Dst[n++] = (uint8_t)pSrc->eResult;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	617a      	str	r2, [r7, #20]
 800480a:	461a      	mov	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	7812      	ldrb	r2, [r2, #0]
 8004814:	701a      	strb	r2, [r3, #0]
    return n;
 8004816:	697b      	ldr	r3, [r7, #20]
}
 8004818:	4618      	mov	r0, r3
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr
	...

08004824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004828:	4b08      	ldr	r3, [pc, #32]	; (800484c <HAL_Init+0x28>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a07      	ldr	r2, [pc, #28]	; (800484c <HAL_Init+0x28>)
 800482e:	f043 0310 	orr.w	r3, r3, #16
 8004832:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004834:	2003      	movs	r0, #3
 8004836:	f000 f8d1 	bl	80049dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800483a:	2000      	movs	r0, #0
 800483c:	f7ff fac2 	bl	8003dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004840:	f7ff f914 	bl	8003a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40022000 	.word	0x40022000

08004850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004854:	4b05      	ldr	r3, [pc, #20]	; (800486c <HAL_IncTick+0x1c>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <HAL_IncTick+0x20>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4413      	add	r3, r2
 8004860:	4a03      	ldr	r2, [pc, #12]	; (8004870 <HAL_IncTick+0x20>)
 8004862:	6013      	str	r3, [r2, #0]
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr
 800486c:	20000150 	.word	0x20000150
 8004870:	2000383c 	.word	0x2000383c

08004874 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  return uwTick;
 8004878:	4b02      	ldr	r3, [pc, #8]	; (8004884 <HAL_GetTick+0x10>)
 800487a:	681b      	ldr	r3, [r3, #0]
}
 800487c:	4618      	mov	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr
 8004884:	2000383c 	.word	0x2000383c

08004888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <__NVIC_SetPriorityGrouping+0x44>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048a4:	4013      	ands	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ba:	4a04      	ldr	r2, [pc, #16]	; (80048cc <__NVIC_SetPriorityGrouping+0x44>)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	60d3      	str	r3, [r2, #12]
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	e000ed00 	.word	0xe000ed00

080048d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <__NVIC_GetPriorityGrouping+0x18>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	0a1b      	lsrs	r3, r3, #8
 80048da:	f003 0307 	and.w	r3, r3, #7
}
 80048de:	4618      	mov	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	e000ed00 	.word	0xe000ed00

080048ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	db0b      	blt.n	8004916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	f003 021f 	and.w	r2, r3, #31
 8004904:	4906      	ldr	r1, [pc, #24]	; (8004920 <__NVIC_EnableIRQ+0x34>)
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	2001      	movs	r0, #1
 800490e:	fa00 f202 	lsl.w	r2, r0, r2
 8004912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	e000e100 	.word	0xe000e100

08004924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	6039      	str	r1, [r7, #0]
 800492e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004934:	2b00      	cmp	r3, #0
 8004936:	db0a      	blt.n	800494e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	490c      	ldr	r1, [pc, #48]	; (8004970 <__NVIC_SetPriority+0x4c>)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	0112      	lsls	r2, r2, #4
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	440b      	add	r3, r1
 8004948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800494c:	e00a      	b.n	8004964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	b2da      	uxtb	r2, r3
 8004952:	4908      	ldr	r1, [pc, #32]	; (8004974 <__NVIC_SetPriority+0x50>)
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	3b04      	subs	r3, #4
 800495c:	0112      	lsls	r2, r2, #4
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	440b      	add	r3, r1
 8004962:	761a      	strb	r2, [r3, #24]
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	bc80      	pop	{r7}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	e000e100 	.word	0xe000e100
 8004974:	e000ed00 	.word	0xe000ed00

08004978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004978:	b480      	push	{r7}
 800497a:	b089      	sub	sp, #36	; 0x24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f1c3 0307 	rsb	r3, r3, #7
 8004992:	2b04      	cmp	r3, #4
 8004994:	bf28      	it	cs
 8004996:	2304      	movcs	r3, #4
 8004998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3304      	adds	r3, #4
 800499e:	2b06      	cmp	r3, #6
 80049a0:	d902      	bls.n	80049a8 <NVIC_EncodePriority+0x30>
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3b03      	subs	r3, #3
 80049a6:	e000      	b.n	80049aa <NVIC_EncodePriority+0x32>
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049ac:	f04f 32ff 	mov.w	r2, #4294967295
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43da      	mvns	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	401a      	ands	r2, r3
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049c0:	f04f 31ff 	mov.w	r1, #4294967295
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ca:	43d9      	mvns	r1, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d0:	4313      	orrs	r3, r2
         );
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3724      	adds	r7, #36	; 0x24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff ff4f 	bl	8004888 <__NVIC_SetPriorityGrouping>
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b086      	sub	sp, #24
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	4603      	mov	r3, r0
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a04:	f7ff ff64 	bl	80048d0 <__NVIC_GetPriorityGrouping>
 8004a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	6978      	ldr	r0, [r7, #20]
 8004a10:	f7ff ffb2 	bl	8004978 <NVIC_EncodePriority>
 8004a14:	4602      	mov	r2, r0
 8004a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff ff81 	bl	8004924 <__NVIC_SetPriority>
}
 8004a22:	bf00      	nop
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	4603      	mov	r3, r0
 8004a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff ff57 	bl	80048ec <__NVIC_EnableIRQ>
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e059      	b.n	8004b12 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	4b2d      	ldr	r3, [pc, #180]	; (8004b1c <HAL_DMA_Init+0xd4>)
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d80f      	bhi.n	8004a8a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4b2b      	ldr	r3, [pc, #172]	; (8004b20 <HAL_DMA_Init+0xd8>)
 8004a72:	4413      	add	r3, r2
 8004a74:	4a2b      	ldr	r2, [pc, #172]	; (8004b24 <HAL_DMA_Init+0xdc>)
 8004a76:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	009a      	lsls	r2, r3, #2
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a28      	ldr	r2, [pc, #160]	; (8004b28 <HAL_DMA_Init+0xe0>)
 8004a86:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a88:	e00e      	b.n	8004aa8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <HAL_DMA_Init+0xe4>)
 8004a92:	4413      	add	r3, r2
 8004a94:	4a23      	ldr	r2, [pc, #140]	; (8004b24 <HAL_DMA_Init+0xdc>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	091b      	lsrs	r3, r3, #4
 8004a9c:	009a      	lsls	r2, r3, #2
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a22      	ldr	r2, [pc, #136]	; (8004b30 <HAL_DMA_Init+0xe8>)
 8004aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004abe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004ac2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ae4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr
 8004b1c:	40020407 	.word	0x40020407
 8004b20:	bffdfff8 	.word	0xbffdfff8
 8004b24:	cccccccd 	.word	0xcccccccd
 8004b28:	40020000 	.word	0x40020000
 8004b2c:	bffdfbf8 	.word	0xbffdfbf8
 8004b30:	40020400 	.word	0x40020400

08004b34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_DMA_Start_IT+0x20>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e04a      	b.n	8004bea <HAL_DMA_Start_IT+0xb6>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d13a      	bne.n	8004bdc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fbbc 	bl	8005308 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 020e 	orr.w	r2, r2, #14
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	e00f      	b.n	8004bca <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0204 	bic.w	r2, r2, #4
 8004bb8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 020a 	orr.w	r2, r2, #10
 8004bc8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0201 	orr.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	e005      	b.n	8004be8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
 8004be6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d008      	beq.n	8004c1a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e020      	b.n	8004c5c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 020e 	bic.w	r2, r2, #14
 8004c28:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0201 	bic.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	2101      	movs	r1, #1
 8004c44:	fa01 f202 	lsl.w	r2, r1, r2
 8004c48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr
	...

08004c68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d005      	beq.n	8004c8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2204      	movs	r2, #4
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
 8004c88:	e0d6      	b.n	8004e38 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 020e 	bic.w	r2, r2, #14
 8004c98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0201 	bic.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	4b64      	ldr	r3, [pc, #400]	; (8004e44 <HAL_DMA_Abort_IT+0x1dc>)
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d958      	bls.n	8004d68 <HAL_DMA_Abort_IT+0x100>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a63      	ldr	r2, [pc, #396]	; (8004e48 <HAL_DMA_Abort_IT+0x1e0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d04f      	beq.n	8004d60 <HAL_DMA_Abort_IT+0xf8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a61      	ldr	r2, [pc, #388]	; (8004e4c <HAL_DMA_Abort_IT+0x1e4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d048      	beq.n	8004d5c <HAL_DMA_Abort_IT+0xf4>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a60      	ldr	r2, [pc, #384]	; (8004e50 <HAL_DMA_Abort_IT+0x1e8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d040      	beq.n	8004d56 <HAL_DMA_Abort_IT+0xee>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a5e      	ldr	r2, [pc, #376]	; (8004e54 <HAL_DMA_Abort_IT+0x1ec>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d038      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xe8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a5d      	ldr	r2, [pc, #372]	; (8004e58 <HAL_DMA_Abort_IT+0x1f0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d030      	beq.n	8004d4a <HAL_DMA_Abort_IT+0xe2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a5b      	ldr	r2, [pc, #364]	; (8004e5c <HAL_DMA_Abort_IT+0x1f4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d028      	beq.n	8004d44 <HAL_DMA_Abort_IT+0xdc>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a53      	ldr	r2, [pc, #332]	; (8004e44 <HAL_DMA_Abort_IT+0x1dc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d020      	beq.n	8004d3e <HAL_DMA_Abort_IT+0xd6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a57      	ldr	r2, [pc, #348]	; (8004e60 <HAL_DMA_Abort_IT+0x1f8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d019      	beq.n	8004d3a <HAL_DMA_Abort_IT+0xd2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a56      	ldr	r2, [pc, #344]	; (8004e64 <HAL_DMA_Abort_IT+0x1fc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d012      	beq.n	8004d36 <HAL_DMA_Abort_IT+0xce>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a54      	ldr	r2, [pc, #336]	; (8004e68 <HAL_DMA_Abort_IT+0x200>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00a      	beq.n	8004d30 <HAL_DMA_Abort_IT+0xc8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a53      	ldr	r2, [pc, #332]	; (8004e6c <HAL_DMA_Abort_IT+0x204>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d102      	bne.n	8004d2a <HAL_DMA_Abort_IT+0xc2>
 8004d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d28:	e01b      	b.n	8004d62 <HAL_DMA_Abort_IT+0xfa>
 8004d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d2e:	e018      	b.n	8004d62 <HAL_DMA_Abort_IT+0xfa>
 8004d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d34:	e015      	b.n	8004d62 <HAL_DMA_Abort_IT+0xfa>
 8004d36:	2310      	movs	r3, #16
 8004d38:	e013      	b.n	8004d62 <HAL_DMA_Abort_IT+0xfa>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e011      	b.n	8004d62 <HAL_DMA_Abort_IT+0xfa>
 8004d3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d42:	e00e      	b.n	8004d62 <HAL_DMA_Abort_IT+0xfa>
 8004d44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d48:	e00b      	b.n	8004d62 <HAL_DMA_Abort_IT+0xfa>
 8004d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d4e:	e008      	b.n	8004d62 <HAL_DMA_Abort_IT+0xfa>
 8004d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d54:	e005      	b.n	8004d62 <HAL_DMA_Abort_IT+0xfa>
 8004d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d5a:	e002      	b.n	8004d62 <HAL_DMA_Abort_IT+0xfa>
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	e000      	b.n	8004d62 <HAL_DMA_Abort_IT+0xfa>
 8004d60:	2301      	movs	r3, #1
 8004d62:	4a43      	ldr	r2, [pc, #268]	; (8004e70 <HAL_DMA_Abort_IT+0x208>)
 8004d64:	6053      	str	r3, [r2, #4]
 8004d66:	e057      	b.n	8004e18 <HAL_DMA_Abort_IT+0x1b0>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a36      	ldr	r2, [pc, #216]	; (8004e48 <HAL_DMA_Abort_IT+0x1e0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d04f      	beq.n	8004e12 <HAL_DMA_Abort_IT+0x1aa>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a35      	ldr	r2, [pc, #212]	; (8004e4c <HAL_DMA_Abort_IT+0x1e4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d048      	beq.n	8004e0e <HAL_DMA_Abort_IT+0x1a6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a33      	ldr	r2, [pc, #204]	; (8004e50 <HAL_DMA_Abort_IT+0x1e8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d040      	beq.n	8004e08 <HAL_DMA_Abort_IT+0x1a0>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a32      	ldr	r2, [pc, #200]	; (8004e54 <HAL_DMA_Abort_IT+0x1ec>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d038      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x19a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a30      	ldr	r2, [pc, #192]	; (8004e58 <HAL_DMA_Abort_IT+0x1f0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d030      	beq.n	8004dfc <HAL_DMA_Abort_IT+0x194>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a2f      	ldr	r2, [pc, #188]	; (8004e5c <HAL_DMA_Abort_IT+0x1f4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d028      	beq.n	8004df6 <HAL_DMA_Abort_IT+0x18e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a26      	ldr	r2, [pc, #152]	; (8004e44 <HAL_DMA_Abort_IT+0x1dc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d020      	beq.n	8004df0 <HAL_DMA_Abort_IT+0x188>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2b      	ldr	r2, [pc, #172]	; (8004e60 <HAL_DMA_Abort_IT+0x1f8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d019      	beq.n	8004dec <HAL_DMA_Abort_IT+0x184>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a29      	ldr	r2, [pc, #164]	; (8004e64 <HAL_DMA_Abort_IT+0x1fc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d012      	beq.n	8004de8 <HAL_DMA_Abort_IT+0x180>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a28      	ldr	r2, [pc, #160]	; (8004e68 <HAL_DMA_Abort_IT+0x200>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00a      	beq.n	8004de2 <HAL_DMA_Abort_IT+0x17a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <HAL_DMA_Abort_IT+0x204>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d102      	bne.n	8004ddc <HAL_DMA_Abort_IT+0x174>
 8004dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dda:	e01b      	b.n	8004e14 <HAL_DMA_Abort_IT+0x1ac>
 8004ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004de0:	e018      	b.n	8004e14 <HAL_DMA_Abort_IT+0x1ac>
 8004de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004de6:	e015      	b.n	8004e14 <HAL_DMA_Abort_IT+0x1ac>
 8004de8:	2310      	movs	r3, #16
 8004dea:	e013      	b.n	8004e14 <HAL_DMA_Abort_IT+0x1ac>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e011      	b.n	8004e14 <HAL_DMA_Abort_IT+0x1ac>
 8004df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004df4:	e00e      	b.n	8004e14 <HAL_DMA_Abort_IT+0x1ac>
 8004df6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004dfa:	e00b      	b.n	8004e14 <HAL_DMA_Abort_IT+0x1ac>
 8004dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e00:	e008      	b.n	8004e14 <HAL_DMA_Abort_IT+0x1ac>
 8004e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e06:	e005      	b.n	8004e14 <HAL_DMA_Abort_IT+0x1ac>
 8004e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e0c:	e002      	b.n	8004e14 <HAL_DMA_Abort_IT+0x1ac>
 8004e0e:	2310      	movs	r3, #16
 8004e10:	e000      	b.n	8004e14 <HAL_DMA_Abort_IT+0x1ac>
 8004e12:	2301      	movs	r3, #1
 8004e14:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <HAL_DMA_Abort_IT+0x20c>)
 8004e16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
    } 
  }
  return status;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40020080 	.word	0x40020080
 8004e48:	40020008 	.word	0x40020008
 8004e4c:	4002001c 	.word	0x4002001c
 8004e50:	40020030 	.word	0x40020030
 8004e54:	40020044 	.word	0x40020044
 8004e58:	40020058 	.word	0x40020058
 8004e5c:	4002006c 	.word	0x4002006c
 8004e60:	40020408 	.word	0x40020408
 8004e64:	4002041c 	.word	0x4002041c
 8004e68:	40020430 	.word	0x40020430
 8004e6c:	40020444 	.word	0x40020444
 8004e70:	40020400 	.word	0x40020400
 8004e74:	40020000 	.word	0x40020000

08004e78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	2204      	movs	r2, #4
 8004e96:	409a      	lsls	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80d6 	beq.w	800504e <HAL_DMA_IRQHandler+0x1d6>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80d0 	beq.w	800504e <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d107      	bne.n	8004ecc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0204 	bic.w	r2, r2, #4
 8004eca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4b9b      	ldr	r3, [pc, #620]	; (8005140 <HAL_DMA_IRQHandler+0x2c8>)
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d958      	bls.n	8004f8a <HAL_DMA_IRQHandler+0x112>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a99      	ldr	r2, [pc, #612]	; (8005144 <HAL_DMA_IRQHandler+0x2cc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d04f      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x10a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a98      	ldr	r2, [pc, #608]	; (8005148 <HAL_DMA_IRQHandler+0x2d0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d048      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x106>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a96      	ldr	r2, [pc, #600]	; (800514c <HAL_DMA_IRQHandler+0x2d4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d040      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x100>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a95      	ldr	r2, [pc, #596]	; (8005150 <HAL_DMA_IRQHandler+0x2d8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d038      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xfa>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a93      	ldr	r2, [pc, #588]	; (8005154 <HAL_DMA_IRQHandler+0x2dc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d030      	beq.n	8004f6c <HAL_DMA_IRQHandler+0xf4>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a92      	ldr	r2, [pc, #584]	; (8005158 <HAL_DMA_IRQHandler+0x2e0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d028      	beq.n	8004f66 <HAL_DMA_IRQHandler+0xee>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a89      	ldr	r2, [pc, #548]	; (8005140 <HAL_DMA_IRQHandler+0x2c8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d020      	beq.n	8004f60 <HAL_DMA_IRQHandler+0xe8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a8e      	ldr	r2, [pc, #568]	; (800515c <HAL_DMA_IRQHandler+0x2e4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d019      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xe4>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a8c      	ldr	r2, [pc, #560]	; (8005160 <HAL_DMA_IRQHandler+0x2e8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d012      	beq.n	8004f58 <HAL_DMA_IRQHandler+0xe0>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a8b      	ldr	r2, [pc, #556]	; (8005164 <HAL_DMA_IRQHandler+0x2ec>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00a      	beq.n	8004f52 <HAL_DMA_IRQHandler+0xda>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a89      	ldr	r2, [pc, #548]	; (8005168 <HAL_DMA_IRQHandler+0x2f0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d102      	bne.n	8004f4c <HAL_DMA_IRQHandler+0xd4>
 8004f46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f4a:	e01b      	b.n	8004f84 <HAL_DMA_IRQHandler+0x10c>
 8004f4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f50:	e018      	b.n	8004f84 <HAL_DMA_IRQHandler+0x10c>
 8004f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f56:	e015      	b.n	8004f84 <HAL_DMA_IRQHandler+0x10c>
 8004f58:	2340      	movs	r3, #64	; 0x40
 8004f5a:	e013      	b.n	8004f84 <HAL_DMA_IRQHandler+0x10c>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	e011      	b.n	8004f84 <HAL_DMA_IRQHandler+0x10c>
 8004f60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004f64:	e00e      	b.n	8004f84 <HAL_DMA_IRQHandler+0x10c>
 8004f66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f6a:	e00b      	b.n	8004f84 <HAL_DMA_IRQHandler+0x10c>
 8004f6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f70:	e008      	b.n	8004f84 <HAL_DMA_IRQHandler+0x10c>
 8004f72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f76:	e005      	b.n	8004f84 <HAL_DMA_IRQHandler+0x10c>
 8004f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f7c:	e002      	b.n	8004f84 <HAL_DMA_IRQHandler+0x10c>
 8004f7e:	2340      	movs	r3, #64	; 0x40
 8004f80:	e000      	b.n	8004f84 <HAL_DMA_IRQHandler+0x10c>
 8004f82:	2304      	movs	r3, #4
 8004f84:	4a79      	ldr	r2, [pc, #484]	; (800516c <HAL_DMA_IRQHandler+0x2f4>)
 8004f86:	6053      	str	r3, [r2, #4]
 8004f88:	e057      	b.n	800503a <HAL_DMA_IRQHandler+0x1c2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a6d      	ldr	r2, [pc, #436]	; (8005144 <HAL_DMA_IRQHandler+0x2cc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d04f      	beq.n	8005034 <HAL_DMA_IRQHandler+0x1bc>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a6b      	ldr	r2, [pc, #428]	; (8005148 <HAL_DMA_IRQHandler+0x2d0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d048      	beq.n	8005030 <HAL_DMA_IRQHandler+0x1b8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a6a      	ldr	r2, [pc, #424]	; (800514c <HAL_DMA_IRQHandler+0x2d4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d040      	beq.n	800502a <HAL_DMA_IRQHandler+0x1b2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a68      	ldr	r2, [pc, #416]	; (8005150 <HAL_DMA_IRQHandler+0x2d8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d038      	beq.n	8005024 <HAL_DMA_IRQHandler+0x1ac>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a67      	ldr	r2, [pc, #412]	; (8005154 <HAL_DMA_IRQHandler+0x2dc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d030      	beq.n	800501e <HAL_DMA_IRQHandler+0x1a6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a65      	ldr	r2, [pc, #404]	; (8005158 <HAL_DMA_IRQHandler+0x2e0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d028      	beq.n	8005018 <HAL_DMA_IRQHandler+0x1a0>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a5d      	ldr	r2, [pc, #372]	; (8005140 <HAL_DMA_IRQHandler+0x2c8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d020      	beq.n	8005012 <HAL_DMA_IRQHandler+0x19a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a61      	ldr	r2, [pc, #388]	; (800515c <HAL_DMA_IRQHandler+0x2e4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d019      	beq.n	800500e <HAL_DMA_IRQHandler+0x196>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a60      	ldr	r2, [pc, #384]	; (8005160 <HAL_DMA_IRQHandler+0x2e8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d012      	beq.n	800500a <HAL_DMA_IRQHandler+0x192>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5e      	ldr	r2, [pc, #376]	; (8005164 <HAL_DMA_IRQHandler+0x2ec>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00a      	beq.n	8005004 <HAL_DMA_IRQHandler+0x18c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a5d      	ldr	r2, [pc, #372]	; (8005168 <HAL_DMA_IRQHandler+0x2f0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d102      	bne.n	8004ffe <HAL_DMA_IRQHandler+0x186>
 8004ff8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ffc:	e01b      	b.n	8005036 <HAL_DMA_IRQHandler+0x1be>
 8004ffe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005002:	e018      	b.n	8005036 <HAL_DMA_IRQHandler+0x1be>
 8005004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005008:	e015      	b.n	8005036 <HAL_DMA_IRQHandler+0x1be>
 800500a:	2340      	movs	r3, #64	; 0x40
 800500c:	e013      	b.n	8005036 <HAL_DMA_IRQHandler+0x1be>
 800500e:	2304      	movs	r3, #4
 8005010:	e011      	b.n	8005036 <HAL_DMA_IRQHandler+0x1be>
 8005012:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005016:	e00e      	b.n	8005036 <HAL_DMA_IRQHandler+0x1be>
 8005018:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800501c:	e00b      	b.n	8005036 <HAL_DMA_IRQHandler+0x1be>
 800501e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005022:	e008      	b.n	8005036 <HAL_DMA_IRQHandler+0x1be>
 8005024:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005028:	e005      	b.n	8005036 <HAL_DMA_IRQHandler+0x1be>
 800502a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800502e:	e002      	b.n	8005036 <HAL_DMA_IRQHandler+0x1be>
 8005030:	2340      	movs	r3, #64	; 0x40
 8005032:	e000      	b.n	8005036 <HAL_DMA_IRQHandler+0x1be>
 8005034:	2304      	movs	r3, #4
 8005036:	4a4e      	ldr	r2, [pc, #312]	; (8005170 <HAL_DMA_IRQHandler+0x2f8>)
 8005038:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8136 	beq.w	80052b0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800504c:	e130      	b.n	80052b0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	2202      	movs	r2, #2
 8005054:	409a      	lsls	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 80f8 	beq.w	8005250 <HAL_DMA_IRQHandler+0x3d8>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80f2 	beq.w	8005250 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10b      	bne.n	8005092 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 020a 	bic.w	r2, r2, #10
 8005088:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	4b29      	ldr	r3, [pc, #164]	; (8005140 <HAL_DMA_IRQHandler+0x2c8>)
 800509a:	429a      	cmp	r2, r3
 800509c:	d973      	bls.n	8005186 <HAL_DMA_IRQHandler+0x30e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a28      	ldr	r2, [pc, #160]	; (8005144 <HAL_DMA_IRQHandler+0x2cc>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d06a      	beq.n	800517e <HAL_DMA_IRQHandler+0x306>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a26      	ldr	r2, [pc, #152]	; (8005148 <HAL_DMA_IRQHandler+0x2d0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d063      	beq.n	800517a <HAL_DMA_IRQHandler+0x302>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a25      	ldr	r2, [pc, #148]	; (800514c <HAL_DMA_IRQHandler+0x2d4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d05b      	beq.n	8005174 <HAL_DMA_IRQHandler+0x2fc>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a23      	ldr	r2, [pc, #140]	; (8005150 <HAL_DMA_IRQHandler+0x2d8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d038      	beq.n	8005138 <HAL_DMA_IRQHandler+0x2c0>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a22      	ldr	r2, [pc, #136]	; (8005154 <HAL_DMA_IRQHandler+0x2dc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d030      	beq.n	8005132 <HAL_DMA_IRQHandler+0x2ba>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a20      	ldr	r2, [pc, #128]	; (8005158 <HAL_DMA_IRQHandler+0x2e0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d028      	beq.n	800512c <HAL_DMA_IRQHandler+0x2b4>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a18      	ldr	r2, [pc, #96]	; (8005140 <HAL_DMA_IRQHandler+0x2c8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d020      	beq.n	8005126 <HAL_DMA_IRQHandler+0x2ae>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1c      	ldr	r2, [pc, #112]	; (800515c <HAL_DMA_IRQHandler+0x2e4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d019      	beq.n	8005122 <HAL_DMA_IRQHandler+0x2aa>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <HAL_DMA_IRQHandler+0x2e8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d012      	beq.n	800511e <HAL_DMA_IRQHandler+0x2a6>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a19      	ldr	r2, [pc, #100]	; (8005164 <HAL_DMA_IRQHandler+0x2ec>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00a      	beq.n	8005118 <HAL_DMA_IRQHandler+0x2a0>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a18      	ldr	r2, [pc, #96]	; (8005168 <HAL_DMA_IRQHandler+0x2f0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d102      	bne.n	8005112 <HAL_DMA_IRQHandler+0x29a>
 800510c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005110:	e036      	b.n	8005180 <HAL_DMA_IRQHandler+0x308>
 8005112:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005116:	e033      	b.n	8005180 <HAL_DMA_IRQHandler+0x308>
 8005118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800511c:	e030      	b.n	8005180 <HAL_DMA_IRQHandler+0x308>
 800511e:	2320      	movs	r3, #32
 8005120:	e02e      	b.n	8005180 <HAL_DMA_IRQHandler+0x308>
 8005122:	2302      	movs	r3, #2
 8005124:	e02c      	b.n	8005180 <HAL_DMA_IRQHandler+0x308>
 8005126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800512a:	e029      	b.n	8005180 <HAL_DMA_IRQHandler+0x308>
 800512c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005130:	e026      	b.n	8005180 <HAL_DMA_IRQHandler+0x308>
 8005132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005136:	e023      	b.n	8005180 <HAL_DMA_IRQHandler+0x308>
 8005138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800513c:	e020      	b.n	8005180 <HAL_DMA_IRQHandler+0x308>
 800513e:	bf00      	nop
 8005140:	40020080 	.word	0x40020080
 8005144:	40020008 	.word	0x40020008
 8005148:	4002001c 	.word	0x4002001c
 800514c:	40020030 	.word	0x40020030
 8005150:	40020044 	.word	0x40020044
 8005154:	40020058 	.word	0x40020058
 8005158:	4002006c 	.word	0x4002006c
 800515c:	40020408 	.word	0x40020408
 8005160:	4002041c 	.word	0x4002041c
 8005164:	40020430 	.word	0x40020430
 8005168:	40020444 	.word	0x40020444
 800516c:	40020400 	.word	0x40020400
 8005170:	40020000 	.word	0x40020000
 8005174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005178:	e002      	b.n	8005180 <HAL_DMA_IRQHandler+0x308>
 800517a:	2320      	movs	r3, #32
 800517c:	e000      	b.n	8005180 <HAL_DMA_IRQHandler+0x308>
 800517e:	2302      	movs	r3, #2
 8005180:	4a4e      	ldr	r2, [pc, #312]	; (80052bc <HAL_DMA_IRQHandler+0x444>)
 8005182:	6053      	str	r3, [r2, #4]
 8005184:	e057      	b.n	8005236 <HAL_DMA_IRQHandler+0x3be>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a4d      	ldr	r2, [pc, #308]	; (80052c0 <HAL_DMA_IRQHandler+0x448>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d04f      	beq.n	8005230 <HAL_DMA_IRQHandler+0x3b8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a4b      	ldr	r2, [pc, #300]	; (80052c4 <HAL_DMA_IRQHandler+0x44c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d048      	beq.n	800522c <HAL_DMA_IRQHandler+0x3b4>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a4a      	ldr	r2, [pc, #296]	; (80052c8 <HAL_DMA_IRQHandler+0x450>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d040      	beq.n	8005226 <HAL_DMA_IRQHandler+0x3ae>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a48      	ldr	r2, [pc, #288]	; (80052cc <HAL_DMA_IRQHandler+0x454>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d038      	beq.n	8005220 <HAL_DMA_IRQHandler+0x3a8>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a47      	ldr	r2, [pc, #284]	; (80052d0 <HAL_DMA_IRQHandler+0x458>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d030      	beq.n	800521a <HAL_DMA_IRQHandler+0x3a2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a45      	ldr	r2, [pc, #276]	; (80052d4 <HAL_DMA_IRQHandler+0x45c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d028      	beq.n	8005214 <HAL_DMA_IRQHandler+0x39c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a44      	ldr	r2, [pc, #272]	; (80052d8 <HAL_DMA_IRQHandler+0x460>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d020      	beq.n	800520e <HAL_DMA_IRQHandler+0x396>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a42      	ldr	r2, [pc, #264]	; (80052dc <HAL_DMA_IRQHandler+0x464>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d019      	beq.n	800520a <HAL_DMA_IRQHandler+0x392>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a41      	ldr	r2, [pc, #260]	; (80052e0 <HAL_DMA_IRQHandler+0x468>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d012      	beq.n	8005206 <HAL_DMA_IRQHandler+0x38e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a3f      	ldr	r2, [pc, #252]	; (80052e4 <HAL_DMA_IRQHandler+0x46c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00a      	beq.n	8005200 <HAL_DMA_IRQHandler+0x388>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a3e      	ldr	r2, [pc, #248]	; (80052e8 <HAL_DMA_IRQHandler+0x470>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d102      	bne.n	80051fa <HAL_DMA_IRQHandler+0x382>
 80051f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051f8:	e01b      	b.n	8005232 <HAL_DMA_IRQHandler+0x3ba>
 80051fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051fe:	e018      	b.n	8005232 <HAL_DMA_IRQHandler+0x3ba>
 8005200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005204:	e015      	b.n	8005232 <HAL_DMA_IRQHandler+0x3ba>
 8005206:	2320      	movs	r3, #32
 8005208:	e013      	b.n	8005232 <HAL_DMA_IRQHandler+0x3ba>
 800520a:	2302      	movs	r3, #2
 800520c:	e011      	b.n	8005232 <HAL_DMA_IRQHandler+0x3ba>
 800520e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005212:	e00e      	b.n	8005232 <HAL_DMA_IRQHandler+0x3ba>
 8005214:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005218:	e00b      	b.n	8005232 <HAL_DMA_IRQHandler+0x3ba>
 800521a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800521e:	e008      	b.n	8005232 <HAL_DMA_IRQHandler+0x3ba>
 8005220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005224:	e005      	b.n	8005232 <HAL_DMA_IRQHandler+0x3ba>
 8005226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800522a:	e002      	b.n	8005232 <HAL_DMA_IRQHandler+0x3ba>
 800522c:	2320      	movs	r3, #32
 800522e:	e000      	b.n	8005232 <HAL_DMA_IRQHandler+0x3ba>
 8005230:	2302      	movs	r3, #2
 8005232:	4a2e      	ldr	r2, [pc, #184]	; (80052ec <HAL_DMA_IRQHandler+0x474>)
 8005234:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005242:	2b00      	cmp	r3, #0
 8005244:	d034      	beq.n	80052b0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800524e:	e02f      	b.n	80052b0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	2208      	movs	r2, #8
 8005256:	409a      	lsls	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4013      	ands	r3, r2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d028      	beq.n	80052b2 <HAL_DMA_IRQHandler+0x43a>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d023      	beq.n	80052b2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 020e 	bic.w	r2, r2, #14
 8005278:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	2101      	movs	r1, #1
 8005284:	fa01 f202 	lsl.w	r2, r1, r2
 8005288:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	4798      	blx	r3
    }
  }
  return;
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
}
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40020400 	.word	0x40020400
 80052c0:	40020008 	.word	0x40020008
 80052c4:	4002001c 	.word	0x4002001c
 80052c8:	40020030 	.word	0x40020030
 80052cc:	40020044 	.word	0x40020044
 80052d0:	40020058 	.word	0x40020058
 80052d4:	4002006c 	.word	0x4002006c
 80052d8:	40020080 	.word	0x40020080
 80052dc:	40020408 	.word	0x40020408
 80052e0:	4002041c 	.word	0x4002041c
 80052e4:	40020430 	.word	0x40020430
 80052e8:	40020444 	.word	0x40020444
 80052ec:	40020000 	.word	0x40020000

080052f0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531e:	2101      	movs	r1, #1
 8005320:	fa01 f202 	lsl.w	r2, r1, r2
 8005324:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b10      	cmp	r3, #16
 8005334:	d108      	bne.n	8005348 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005346:	e007      	b.n	8005358 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr
	...

08005364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005364:	b480      	push	{r7}
 8005366:	b08b      	sub	sp, #44	; 0x2c
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800536e:	2300      	movs	r3, #0
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005372:	2300      	movs	r3, #0
 8005374:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005376:	e169      	b.n	800564c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005378:	2201      	movs	r2, #1
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	4013      	ands	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	429a      	cmp	r2, r3
 8005392:	f040 8158 	bne.w	8005646 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	4a9a      	ldr	r2, [pc, #616]	; (8005604 <HAL_GPIO_Init+0x2a0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d05e      	beq.n	800545e <HAL_GPIO_Init+0xfa>
 80053a0:	4a98      	ldr	r2, [pc, #608]	; (8005604 <HAL_GPIO_Init+0x2a0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d875      	bhi.n	8005492 <HAL_GPIO_Init+0x12e>
 80053a6:	4a98      	ldr	r2, [pc, #608]	; (8005608 <HAL_GPIO_Init+0x2a4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d058      	beq.n	800545e <HAL_GPIO_Init+0xfa>
 80053ac:	4a96      	ldr	r2, [pc, #600]	; (8005608 <HAL_GPIO_Init+0x2a4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d86f      	bhi.n	8005492 <HAL_GPIO_Init+0x12e>
 80053b2:	4a96      	ldr	r2, [pc, #600]	; (800560c <HAL_GPIO_Init+0x2a8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d052      	beq.n	800545e <HAL_GPIO_Init+0xfa>
 80053b8:	4a94      	ldr	r2, [pc, #592]	; (800560c <HAL_GPIO_Init+0x2a8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d869      	bhi.n	8005492 <HAL_GPIO_Init+0x12e>
 80053be:	4a94      	ldr	r2, [pc, #592]	; (8005610 <HAL_GPIO_Init+0x2ac>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d04c      	beq.n	800545e <HAL_GPIO_Init+0xfa>
 80053c4:	4a92      	ldr	r2, [pc, #584]	; (8005610 <HAL_GPIO_Init+0x2ac>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d863      	bhi.n	8005492 <HAL_GPIO_Init+0x12e>
 80053ca:	4a92      	ldr	r2, [pc, #584]	; (8005614 <HAL_GPIO_Init+0x2b0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d046      	beq.n	800545e <HAL_GPIO_Init+0xfa>
 80053d0:	4a90      	ldr	r2, [pc, #576]	; (8005614 <HAL_GPIO_Init+0x2b0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d85d      	bhi.n	8005492 <HAL_GPIO_Init+0x12e>
 80053d6:	2b12      	cmp	r3, #18
 80053d8:	d82a      	bhi.n	8005430 <HAL_GPIO_Init+0xcc>
 80053da:	2b12      	cmp	r3, #18
 80053dc:	d859      	bhi.n	8005492 <HAL_GPIO_Init+0x12e>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <HAL_GPIO_Init+0x80>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	0800545f 	.word	0x0800545f
 80053e8:	08005439 	.word	0x08005439
 80053ec:	0800544b 	.word	0x0800544b
 80053f0:	0800548d 	.word	0x0800548d
 80053f4:	08005493 	.word	0x08005493
 80053f8:	08005493 	.word	0x08005493
 80053fc:	08005493 	.word	0x08005493
 8005400:	08005493 	.word	0x08005493
 8005404:	08005493 	.word	0x08005493
 8005408:	08005493 	.word	0x08005493
 800540c:	08005493 	.word	0x08005493
 8005410:	08005493 	.word	0x08005493
 8005414:	08005493 	.word	0x08005493
 8005418:	08005493 	.word	0x08005493
 800541c:	08005493 	.word	0x08005493
 8005420:	08005493 	.word	0x08005493
 8005424:	08005493 	.word	0x08005493
 8005428:	08005441 	.word	0x08005441
 800542c:	08005455 	.word	0x08005455
 8005430:	4a79      	ldr	r2, [pc, #484]	; (8005618 <HAL_GPIO_Init+0x2b4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d013      	beq.n	800545e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005436:	e02c      	b.n	8005492 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	623b      	str	r3, [r7, #32]
          break;
 800543e:	e029      	b.n	8005494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	3304      	adds	r3, #4
 8005446:	623b      	str	r3, [r7, #32]
          break;
 8005448:	e024      	b.n	8005494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	3308      	adds	r3, #8
 8005450:	623b      	str	r3, [r7, #32]
          break;
 8005452:	e01f      	b.n	8005494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	330c      	adds	r3, #12
 800545a:	623b      	str	r3, [r7, #32]
          break;
 800545c:	e01a      	b.n	8005494 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d102      	bne.n	800546c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005466:	2304      	movs	r3, #4
 8005468:	623b      	str	r3, [r7, #32]
          break;
 800546a:	e013      	b.n	8005494 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d105      	bne.n	8005480 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005474:	2308      	movs	r3, #8
 8005476:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	611a      	str	r2, [r3, #16]
          break;
 800547e:	e009      	b.n	8005494 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005480:	2308      	movs	r3, #8
 8005482:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	615a      	str	r2, [r3, #20]
          break;
 800548a:	e003      	b.n	8005494 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800548c:	2300      	movs	r3, #0
 800548e:	623b      	str	r3, [r7, #32]
          break;
 8005490:	e000      	b.n	8005494 <HAL_GPIO_Init+0x130>
          break;
 8005492:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2bff      	cmp	r3, #255	; 0xff
 8005498:	d801      	bhi.n	800549e <HAL_GPIO_Init+0x13a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	e001      	b.n	80054a2 <HAL_GPIO_Init+0x13e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3304      	adds	r3, #4
 80054a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2bff      	cmp	r3, #255	; 0xff
 80054a8:	d802      	bhi.n	80054b0 <HAL_GPIO_Init+0x14c>
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	e002      	b.n	80054b6 <HAL_GPIO_Init+0x152>
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	3b08      	subs	r3, #8
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	210f      	movs	r1, #15
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	fa01 f303 	lsl.w	r3, r1, r3
 80054c4:	43db      	mvns	r3, r3
 80054c6:	401a      	ands	r2, r3
 80054c8:	6a39      	ldr	r1, [r7, #32]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	fa01 f303 	lsl.w	r3, r1, r3
 80054d0:	431a      	orrs	r2, r3
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 80b1 	beq.w	8005646 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80054e4:	4b4d      	ldr	r3, [pc, #308]	; (800561c <HAL_GPIO_Init+0x2b8>)
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	4a4c      	ldr	r2, [pc, #304]	; (800561c <HAL_GPIO_Init+0x2b8>)
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	6193      	str	r3, [r2, #24]
 80054f0:	4b4a      	ldr	r3, [pc, #296]	; (800561c <HAL_GPIO_Init+0x2b8>)
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80054fc:	4a48      	ldr	r2, [pc, #288]	; (8005620 <HAL_GPIO_Init+0x2bc>)
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	089b      	lsrs	r3, r3, #2
 8005502:	3302      	adds	r3, #2
 8005504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005508:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	220f      	movs	r2, #15
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	43db      	mvns	r3, r3
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4013      	ands	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a40      	ldr	r2, [pc, #256]	; (8005624 <HAL_GPIO_Init+0x2c0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <HAL_GPIO_Init+0x1ec>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a3f      	ldr	r2, [pc, #252]	; (8005628 <HAL_GPIO_Init+0x2c4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00d      	beq.n	800554c <HAL_GPIO_Init+0x1e8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3e      	ldr	r2, [pc, #248]	; (800562c <HAL_GPIO_Init+0x2c8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d007      	beq.n	8005548 <HAL_GPIO_Init+0x1e4>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3d      	ldr	r2, [pc, #244]	; (8005630 <HAL_GPIO_Init+0x2cc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d101      	bne.n	8005544 <HAL_GPIO_Init+0x1e0>
 8005540:	2303      	movs	r3, #3
 8005542:	e006      	b.n	8005552 <HAL_GPIO_Init+0x1ee>
 8005544:	2304      	movs	r3, #4
 8005546:	e004      	b.n	8005552 <HAL_GPIO_Init+0x1ee>
 8005548:	2302      	movs	r3, #2
 800554a:	e002      	b.n	8005552 <HAL_GPIO_Init+0x1ee>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <HAL_GPIO_Init+0x1ee>
 8005550:	2300      	movs	r3, #0
 8005552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005554:	f002 0203 	and.w	r2, r2, #3
 8005558:	0092      	lsls	r2, r2, #2
 800555a:	4093      	lsls	r3, r2
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005562:	492f      	ldr	r1, [pc, #188]	; (8005620 <HAL_GPIO_Init+0x2bc>)
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	089b      	lsrs	r3, r3, #2
 8005568:	3302      	adds	r3, #2
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d006      	beq.n	800558a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800557c:	4b2d      	ldr	r3, [pc, #180]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	492c      	ldr	r1, [pc, #176]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	4313      	orrs	r3, r2
 8005586:	600b      	str	r3, [r1, #0]
 8005588:	e006      	b.n	8005598 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800558a:	4b2a      	ldr	r3, [pc, #168]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	43db      	mvns	r3, r3
 8005592:	4928      	ldr	r1, [pc, #160]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 8005594:	4013      	ands	r3, r2
 8005596:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d006      	beq.n	80055b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80055a4:	4b23      	ldr	r3, [pc, #140]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	4922      	ldr	r1, [pc, #136]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	604b      	str	r3, [r1, #4]
 80055b0:	e006      	b.n	80055c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80055b2:	4b20      	ldr	r3, [pc, #128]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	43db      	mvns	r3, r3
 80055ba:	491e      	ldr	r1, [pc, #120]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 80055bc:	4013      	ands	r3, r2
 80055be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d006      	beq.n	80055da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80055cc:	4b19      	ldr	r3, [pc, #100]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	4918      	ldr	r1, [pc, #96]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	608b      	str	r3, [r1, #8]
 80055d8:	e006      	b.n	80055e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80055da:	4b16      	ldr	r3, [pc, #88]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	43db      	mvns	r3, r3
 80055e2:	4914      	ldr	r1, [pc, #80]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d021      	beq.n	8005638 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80055f4:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	490e      	ldr	r1, [pc, #56]	; (8005634 <HAL_GPIO_Init+0x2d0>)
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60cb      	str	r3, [r1, #12]
 8005600:	e021      	b.n	8005646 <HAL_GPIO_Init+0x2e2>
 8005602:	bf00      	nop
 8005604:	10320000 	.word	0x10320000
 8005608:	10310000 	.word	0x10310000
 800560c:	10220000 	.word	0x10220000
 8005610:	10210000 	.word	0x10210000
 8005614:	10120000 	.word	0x10120000
 8005618:	10110000 	.word	0x10110000
 800561c:	40021000 	.word	0x40021000
 8005620:	40010000 	.word	0x40010000
 8005624:	40010800 	.word	0x40010800
 8005628:	40010c00 	.word	0x40010c00
 800562c:	40011000 	.word	0x40011000
 8005630:	40011400 	.word	0x40011400
 8005634:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <HAL_GPIO_Init+0x304>)
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	43db      	mvns	r3, r3
 8005640:	4909      	ldr	r1, [pc, #36]	; (8005668 <HAL_GPIO_Init+0x304>)
 8005642:	4013      	ands	r3, r2
 8005644:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	3301      	adds	r3, #1
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	fa22 f303 	lsr.w	r3, r2, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	f47f ae8e 	bne.w	8005378 <HAL_GPIO_Init+0x14>
  }
}
 800565c:	bf00      	nop
 800565e:	bf00      	nop
 8005660:	372c      	adds	r7, #44	; 0x2c
 8005662:	46bd      	mov	sp, r7
 8005664:	bc80      	pop	{r7}
 8005666:	4770      	bx	lr
 8005668:	40010400 	.word	0x40010400

0800566c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	887b      	ldrh	r3, [r7, #2]
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005684:	2301      	movs	r3, #1
 8005686:	73fb      	strb	r3, [r7, #15]
 8005688:	e001      	b.n	800568e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800568e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	460b      	mov	r3, r1
 80056a4:	807b      	strh	r3, [r7, #2]
 80056a6:	4613      	mov	r3, r2
 80056a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056aa:	787b      	ldrb	r3, [r7, #1]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056b0:	887a      	ldrh	r2, [r7, #2]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80056b6:	e003      	b.n	80056c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80056b8:	887b      	ldrh	r3, [r7, #2]
 80056ba:	041a      	lsls	r2, r3, #16
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	611a      	str	r2, [r3, #16]
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr
	...

080056cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e12b      	b.n	8005936 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fe f9f2 	bl	8003adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2224      	movs	r2, #36	; 0x24
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0201 	bic.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800571e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800572e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005730:	f002 fc0a 	bl	8007f48 <HAL_RCC_GetPCLK1Freq>
 8005734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4a81      	ldr	r2, [pc, #516]	; (8005940 <HAL_I2C_Init+0x274>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d807      	bhi.n	8005750 <HAL_I2C_Init+0x84>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a80      	ldr	r2, [pc, #512]	; (8005944 <HAL_I2C_Init+0x278>)
 8005744:	4293      	cmp	r3, r2
 8005746:	bf94      	ite	ls
 8005748:	2301      	movls	r3, #1
 800574a:	2300      	movhi	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e006      	b.n	800575e <HAL_I2C_Init+0x92>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4a7d      	ldr	r2, [pc, #500]	; (8005948 <HAL_I2C_Init+0x27c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	bf94      	ite	ls
 8005758:	2301      	movls	r3, #1
 800575a:	2300      	movhi	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e0e7      	b.n	8005936 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4a78      	ldr	r2, [pc, #480]	; (800594c <HAL_I2C_Init+0x280>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	0c9b      	lsrs	r3, r3, #18
 8005770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	430a      	orrs	r2, r1
 8005784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	4a6a      	ldr	r2, [pc, #424]	; (8005940 <HAL_I2C_Init+0x274>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d802      	bhi.n	80057a0 <HAL_I2C_Init+0xd4>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	3301      	adds	r3, #1
 800579e:	e009      	b.n	80057b4 <HAL_I2C_Init+0xe8>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80057a6:	fb02 f303 	mul.w	r3, r2, r3
 80057aa:	4a69      	ldr	r2, [pc, #420]	; (8005950 <HAL_I2C_Init+0x284>)
 80057ac:	fba2 2303 	umull	r2, r3, r2, r3
 80057b0:	099b      	lsrs	r3, r3, #6
 80057b2:	3301      	adds	r3, #1
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	430b      	orrs	r3, r1
 80057ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	495c      	ldr	r1, [pc, #368]	; (8005940 <HAL_I2C_Init+0x274>)
 80057d0:	428b      	cmp	r3, r1
 80057d2:	d819      	bhi.n	8005808 <HAL_I2C_Init+0x13c>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	1e59      	subs	r1, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	fbb1 f3f3 	udiv	r3, r1, r3
 80057e2:	1c59      	adds	r1, r3, #1
 80057e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057e8:	400b      	ands	r3, r1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_I2C_Init+0x138>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	1e59      	subs	r1, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80057fc:	3301      	adds	r3, #1
 80057fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005802:	e051      	b.n	80058a8 <HAL_I2C_Init+0x1dc>
 8005804:	2304      	movs	r3, #4
 8005806:	e04f      	b.n	80058a8 <HAL_I2C_Init+0x1dc>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d111      	bne.n	8005834 <HAL_I2C_Init+0x168>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	1e58      	subs	r0, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6859      	ldr	r1, [r3, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	440b      	add	r3, r1
 800581e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005822:	3301      	adds	r3, #1
 8005824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005828:	2b00      	cmp	r3, #0
 800582a:	bf0c      	ite	eq
 800582c:	2301      	moveq	r3, #1
 800582e:	2300      	movne	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	e012      	b.n	800585a <HAL_I2C_Init+0x18e>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	1e58      	subs	r0, r3, #1
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6859      	ldr	r1, [r3, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	0099      	lsls	r1, r3, #2
 8005844:	440b      	add	r3, r1
 8005846:	fbb0 f3f3 	udiv	r3, r0, r3
 800584a:	3301      	adds	r3, #1
 800584c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005850:	2b00      	cmp	r3, #0
 8005852:	bf0c      	ite	eq
 8005854:	2301      	moveq	r3, #1
 8005856:	2300      	movne	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_I2C_Init+0x196>
 800585e:	2301      	movs	r3, #1
 8005860:	e022      	b.n	80058a8 <HAL_I2C_Init+0x1dc>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10e      	bne.n	8005888 <HAL_I2C_Init+0x1bc>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1e58      	subs	r0, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6859      	ldr	r1, [r3, #4]
 8005872:	460b      	mov	r3, r1
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	440b      	add	r3, r1
 8005878:	fbb0 f3f3 	udiv	r3, r0, r3
 800587c:	3301      	adds	r3, #1
 800587e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005886:	e00f      	b.n	80058a8 <HAL_I2C_Init+0x1dc>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	1e58      	subs	r0, r3, #1
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6859      	ldr	r1, [r3, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	0099      	lsls	r1, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	fbb0 f3f3 	udiv	r3, r0, r3
 800589e:	3301      	adds	r3, #1
 80058a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	6809      	ldr	r1, [r1, #0]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69da      	ldr	r2, [r3, #28]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80058d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6911      	ldr	r1, [r2, #16]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	68d2      	ldr	r2, [r2, #12]
 80058e2:	4311      	orrs	r1, r2
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	430b      	orrs	r3, r1
 80058ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	000186a0 	.word	0x000186a0
 8005944:	001e847f 	.word	0x001e847f
 8005948:	003d08ff 	.word	0x003d08ff
 800594c:	431bde83 	.word	0x431bde83
 8005950:	10624dd3 	.word	0x10624dd3

08005954 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	607a      	str	r2, [r7, #4]
 800595e:	461a      	mov	r2, r3
 8005960:	460b      	mov	r3, r1
 8005962:	817b      	strh	r3, [r7, #10]
 8005964:	4613      	mov	r3, r2
 8005966:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b20      	cmp	r3, #32
 8005976:	f040 8085 	bne.w	8005a84 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800597a:	4b45      	ldr	r3, [pc, #276]	; (8005a90 <HAL_I2C_Master_Transmit_IT+0x13c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	08db      	lsrs	r3, r3, #3
 8005980:	4a44      	ldr	r2, [pc, #272]	; (8005a94 <HAL_I2C_Master_Transmit_IT+0x140>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	0a1a      	lsrs	r2, r3, #8
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	009a      	lsls	r2, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	3b01      	subs	r3, #1
 8005998:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d116      	bne.n	80059ce <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f043 0220 	orr.w	r2, r3, #32
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e05b      	b.n	8005a86 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d0db      	beq.n	8005994 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_I2C_Master_Transmit_IT+0x96>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e04d      	b.n	8005a86 <HAL_I2C_Master_Transmit_IT+0x132>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d007      	beq.n	8005a10 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2221      	movs	r2, #33	; 0x21
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2210      	movs	r2, #16
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	893a      	ldrh	r2, [r7, #8]
 8005a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4a12      	ldr	r2, [pc, #72]	; (8005a98 <HAL_I2C_Master_Transmit_IT+0x144>)
 8005a50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005a52:	897a      	ldrh	r2, [r7, #10]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005a6e:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a7e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	e000      	b.n	8005a86 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005a84:	2302      	movs	r3, #2
  }
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr
 8005a90:	20000148 	.word	0x20000148
 8005a94:	14f8b589 	.word	0x14f8b589
 8005a98:	ffff0000 	.word	0xffff0000

08005a9c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	817b      	strh	r3, [r7, #10]
 8005aac:	4613      	mov	r3, r2
 8005aae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	f040 808d 	bne.w	8005bdc <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ac2:	4b49      	ldr	r3, [pc, #292]	; (8005be8 <HAL_I2C_Master_Receive_IT+0x14c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	08db      	lsrs	r3, r3, #3
 8005ac8:	4a48      	ldr	r2, [pc, #288]	; (8005bec <HAL_I2C_Master_Receive_IT+0x150>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	0a1a      	lsrs	r2, r3, #8
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009a      	lsls	r2, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d116      	bne.n	8005b16 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f043 0220 	orr.w	r2, r3, #32
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e063      	b.n	8005bde <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d0db      	beq.n	8005adc <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_I2C_Master_Receive_IT+0x96>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e055      	b.n	8005bde <HAL_I2C_Master_Receive_IT+0x142>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d007      	beq.n	8005b58 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2222      	movs	r2, #34	; 0x22
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2210      	movs	r2, #16
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	893a      	ldrh	r2, [r7, #8]
 8005b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <HAL_I2C_Master_Receive_IT+0x154>)
 8005b98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005b9a:	897a      	ldrh	r2, [r7, #10]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005bb6:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bc6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e000      	b.n	8005bde <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005bdc:	2302      	movs	r3, #2
  }
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr
 8005be8:	20000148 	.word	0x20000148
 8005bec:	14f8b589 	.word	0x14f8b589
 8005bf0:	ffff0000 	.word	0xffff0000

08005bf4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c14:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	d003      	beq.n	8005c2c <HAL_I2C_EV_IRQHandler+0x38>
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	2b40      	cmp	r3, #64	; 0x40
 8005c28:	f040 80c1 	bne.w	8005dae <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10d      	bne.n	8005c62 <HAL_I2C_EV_IRQHandler+0x6e>
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c4c:	d003      	beq.n	8005c56 <HAL_I2C_EV_IRQHandler+0x62>
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c54:	d101      	bne.n	8005c5a <HAL_I2C_EV_IRQHandler+0x66>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <HAL_I2C_EV_IRQHandler+0x68>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	f000 8132 	beq.w	8005ec6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00c      	beq.n	8005c86 <HAL_I2C_EV_IRQHandler+0x92>
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	0a5b      	lsrs	r3, r3, #9
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d006      	beq.n	8005c86 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f001 fc51 	bl	8007520 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fd53 	bl	800672a <I2C_Master_SB>
 8005c84:	e092      	b.n	8005dac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	08db      	lsrs	r3, r3, #3
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <HAL_I2C_EV_IRQHandler+0xb2>
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	0a5b      	lsrs	r3, r3, #9
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fdc8 	bl	8006834 <I2C_Master_ADD10>
 8005ca4:	e082      	b.n	8005dac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	085b      	lsrs	r3, r3, #1
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <HAL_I2C_EV_IRQHandler+0xd2>
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	0a5b      	lsrs	r3, r3, #9
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fde1 	bl	8006886 <I2C_Master_ADDR>
 8005cc4:	e072      	b.n	8005dac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	089b      	lsrs	r3, r3, #2
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d03b      	beq.n	8005d4a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce0:	f000 80f3 	beq.w	8005eca <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	09db      	lsrs	r3, r3, #7
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00f      	beq.n	8005d10 <HAL_I2C_EV_IRQHandler+0x11c>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	0a9b      	lsrs	r3, r3, #10
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d009      	beq.n	8005d10 <HAL_I2C_EV_IRQHandler+0x11c>
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	089b      	lsrs	r3, r3, #2
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d103      	bne.n	8005d10 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f9cd 	bl	80060a8 <I2C_MasterTransmit_TXE>
 8005d0e:	e04d      	b.n	8005dac <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	089b      	lsrs	r3, r3, #2
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80d6 	beq.w	8005eca <HAL_I2C_EV_IRQHandler+0x2d6>
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	0a5b      	lsrs	r3, r3, #9
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 80cf 	beq.w	8005eca <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005d2c:	7bbb      	ldrb	r3, [r7, #14]
 8005d2e:	2b21      	cmp	r3, #33	; 0x21
 8005d30:	d103      	bne.n	8005d3a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fa54 	bl	80061e0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d38:	e0c7      	b.n	8005eca <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	2b40      	cmp	r3, #64	; 0x40
 8005d3e:	f040 80c4 	bne.w	8005eca <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fac2 	bl	80062cc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d48:	e0bf      	b.n	8005eca <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d58:	f000 80b7 	beq.w	8005eca <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	099b      	lsrs	r3, r3, #6
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00f      	beq.n	8005d88 <HAL_I2C_EV_IRQHandler+0x194>
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	0a9b      	lsrs	r3, r3, #10
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d009      	beq.n	8005d88 <HAL_I2C_EV_IRQHandler+0x194>
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	089b      	lsrs	r3, r3, #2
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d103      	bne.n	8005d88 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fb37 	bl	80063f4 <I2C_MasterReceive_RXNE>
 8005d86:	e011      	b.n	8005dac <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	089b      	lsrs	r3, r3, #2
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 809a 	beq.w	8005eca <HAL_I2C_EV_IRQHandler+0x2d6>
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	0a5b      	lsrs	r3, r3, #9
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8093 	beq.w	8005eca <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fbd6 	bl	8006556 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005daa:	e08e      	b.n	8005eca <HAL_I2C_EV_IRQHandler+0x2d6>
 8005dac:	e08d      	b.n	8005eca <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d004      	beq.n	8005dc0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	61fb      	str	r3, [r7, #28]
 8005dbe:	e007      	b.n	8005dd0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d012      	beq.n	8005e02 <HAL_I2C_EV_IRQHandler+0x20e>
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	0a5b      	lsrs	r3, r3, #9
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00c      	beq.n	8005e02 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005df8:	69b9      	ldr	r1, [r7, #24]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 ff9a 	bl	8006d34 <I2C_Slave_ADDR>
 8005e00:	e066      	b.n	8005ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <HAL_I2C_EV_IRQHandler+0x22e>
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	0a5b      	lsrs	r3, r3, #9
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 ffd4 	bl	8006dc8 <I2C_Slave_STOPF>
 8005e20:	e056      	b.n	8005ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e22:	7bbb      	ldrb	r3, [r7, #14]
 8005e24:	2b21      	cmp	r3, #33	; 0x21
 8005e26:	d002      	beq.n	8005e2e <HAL_I2C_EV_IRQHandler+0x23a>
 8005e28:	7bbb      	ldrb	r3, [r7, #14]
 8005e2a:	2b29      	cmp	r3, #41	; 0x29
 8005e2c:	d125      	bne.n	8005e7a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	09db      	lsrs	r3, r3, #7
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00f      	beq.n	8005e5a <HAL_I2C_EV_IRQHandler+0x266>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	0a9b      	lsrs	r3, r3, #10
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <HAL_I2C_EV_IRQHandler+0x266>
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	089b      	lsrs	r3, r3, #2
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d103      	bne.n	8005e5a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 feb2 	bl	8006bbc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e58:	e039      	b.n	8005ece <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	089b      	lsrs	r3, r3, #2
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d033      	beq.n	8005ece <HAL_I2C_EV_IRQHandler+0x2da>
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	0a5b      	lsrs	r3, r3, #9
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d02d      	beq.n	8005ece <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fedf 	bl	8006c36 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e78:	e029      	b.n	8005ece <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	099b      	lsrs	r3, r3, #6
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00f      	beq.n	8005ea6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	0a9b      	lsrs	r3, r3, #10
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d009      	beq.n	8005ea6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	089b      	lsrs	r3, r3, #2
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d103      	bne.n	8005ea6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fee9 	bl	8006c76 <I2C_SlaveReceive_RXNE>
 8005ea4:	e014      	b.n	8005ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	089b      	lsrs	r3, r3, #2
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00e      	beq.n	8005ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	0a5b      	lsrs	r3, r3, #9
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 ff17 	bl	8006cf2 <I2C_SlaveReceive_BTF>
 8005ec4:	e004      	b.n	8005ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005ec6:	bf00      	nop
 8005ec8:	e002      	b.n	8005ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005eca:	bf00      	nop
 8005ecc:	e000      	b.n	8005ed0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ece:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b08a      	sub	sp, #40	; 0x28
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ef8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	0a1b      	lsrs	r3, r3, #8
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d016      	beq.n	8005f34 <HAL_I2C_ER_IRQHandler+0x5e>
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	0a1b      	lsrs	r3, r3, #8
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d010      	beq.n	8005f34 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f22:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f32:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	0a5b      	lsrs	r3, r3, #9
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00e      	beq.n	8005f5e <HAL_I2C_ER_IRQHandler+0x88>
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	0a1b      	lsrs	r3, r3, #8
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	f043 0302 	orr.w	r3, r3, #2
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005f5c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	0a9b      	lsrs	r3, r3, #10
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d03f      	beq.n	8005fea <HAL_I2C_ER_IRQHandler+0x114>
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	0a1b      	lsrs	r3, r3, #8
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d039      	beq.n	8005fea <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8005f76:	7efb      	ldrb	r3, [r7, #27]
 8005f78:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f88:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005f90:	7ebb      	ldrb	r3, [r7, #26]
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	d112      	bne.n	8005fbc <HAL_I2C_ER_IRQHandler+0xe6>
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10f      	bne.n	8005fbc <HAL_I2C_ER_IRQHandler+0xe6>
 8005f9c:	7cfb      	ldrb	r3, [r7, #19]
 8005f9e:	2b21      	cmp	r3, #33	; 0x21
 8005fa0:	d008      	beq.n	8005fb4 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005fa2:	7cfb      	ldrb	r3, [r7, #19]
 8005fa4:	2b29      	cmp	r3, #41	; 0x29
 8005fa6:	d005      	beq.n	8005fb4 <HAL_I2C_ER_IRQHandler+0xde>
 8005fa8:	7cfb      	ldrb	r3, [r7, #19]
 8005faa:	2b28      	cmp	r3, #40	; 0x28
 8005fac:	d106      	bne.n	8005fbc <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b21      	cmp	r3, #33	; 0x21
 8005fb2:	d103      	bne.n	8005fbc <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f001 f837 	bl	8007028 <I2C_Slave_AF>
 8005fba:	e016      	b.n	8005fea <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fc4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	f043 0304 	orr.w	r3, r3, #4
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005fce:	7efb      	ldrb	r3, [r7, #27]
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d002      	beq.n	8005fda <HAL_I2C_ER_IRQHandler+0x104>
 8005fd4:	7efb      	ldrb	r3, [r7, #27]
 8005fd6:	2b40      	cmp	r3, #64	; 0x40
 8005fd8:	d107      	bne.n	8005fea <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	0adb      	lsrs	r3, r3, #11
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00e      	beq.n	8006014 <HAL_I2C_ER_IRQHandler+0x13e>
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	0a1b      	lsrs	r3, r3, #8
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d008      	beq.n	8006014 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	f043 0308 	orr.w	r3, r3, #8
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006012:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	2b00      	cmp	r3, #0
 8006018:	d008      	beq.n	800602c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f001 f86e 	bl	8007108 <I2C_ITError>
  }
}
 800602c:	bf00      	nop
 800602e:	3728      	adds	r7, #40	; 0x28
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr

08006046 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr

08006058 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
 8006064:	4613      	mov	r3, r2
 8006066:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr

08006072 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr

08006084 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	bc80      	pop	{r7}
 8006094:	4770      	bx	lr

08006096 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr

080060a8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d150      	bne.n	8006170 <I2C_MasterTransmit_TXE+0xc8>
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	2b21      	cmp	r3, #33	; 0x21
 80060d2:	d14d      	bne.n	8006170 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d01d      	beq.n	8006116 <I2C_MasterTransmit_TXE+0x6e>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d01a      	beq.n	8006116 <I2C_MasterTransmit_TXE+0x6e>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060e6:	d016      	beq.n	8006116 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060f6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2211      	movs	r2, #17
 80060fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fc fdde 	bl	8002cd0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006114:	e060      	b.n	80061d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006124:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006134:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b40      	cmp	r3, #64	; 0x40
 800614e:	d107      	bne.n	8006160 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff ff93 	bl	8006084 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800615e:	e03b      	b.n	80061d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7fc fdb1 	bl	8002cd0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800616e:	e033      	b.n	80061d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	2b21      	cmp	r3, #33	; 0x21
 8006174:	d005      	beq.n	8006182 <I2C_MasterTransmit_TXE+0xda>
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	2b40      	cmp	r3, #64	; 0x40
 800617a:	d12d      	bne.n	80061d8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	2b22      	cmp	r3, #34	; 0x22
 8006180:	d12a      	bne.n	80061d8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006186:	b29b      	uxth	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d108      	bne.n	800619e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800619c:	e01c      	b.n	80061d8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	d103      	bne.n	80061b2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f88e 	bl	80062cc <I2C_MemoryTransmit_TXE_BTF>
}
 80061b0:	e012      	b.n	80061d8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	781a      	ldrb	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061d6:	e7ff      	b.n	80061d8 <I2C_MasterTransmit_TXE+0x130>
 80061d8:	bf00      	nop
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b21      	cmp	r3, #33	; 0x21
 80061f8:	d164      	bne.n	80062c4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d012      	beq.n	800622a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	781a      	ldrb	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006228:	e04c      	b.n	80062c4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b08      	cmp	r3, #8
 800622e:	d01d      	beq.n	800626c <I2C_MasterTransmit_BTF+0x8c>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b20      	cmp	r3, #32
 8006234:	d01a      	beq.n	800626c <I2C_MasterTransmit_BTF+0x8c>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800623c:	d016      	beq.n	800626c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800624c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2211      	movs	r2, #17
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7fc fd33 	bl	8002cd0 <HAL_I2C_MasterTxCpltCallback>
}
 800626a:	e02b      	b.n	80062c4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800627a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800628a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b40      	cmp	r3, #64	; 0x40
 80062a4:	d107      	bne.n	80062b6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff fee8 	bl	8006084 <HAL_I2C_MemTxCpltCallback>
}
 80062b4:	e006      	b.n	80062c4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fc fd06 	bl	8002cd0 <HAL_I2C_MasterTxCpltCallback>
}
 80062c4:	bf00      	nop
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d11d      	bne.n	8006320 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d10b      	bne.n	8006304 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062fc:	1c9a      	adds	r2, r3, #2
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006302:	e073      	b.n	80063ec <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006308:	b29b      	uxth	r3, r3
 800630a:	121b      	asrs	r3, r3, #8
 800630c:	b2da      	uxtb	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800631e:	e065      	b.n	80063ec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006324:	2b01      	cmp	r3, #1
 8006326:	d10b      	bne.n	8006340 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800632c:	b2da      	uxtb	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800633e:	e055      	b.n	80063ec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006344:	2b02      	cmp	r3, #2
 8006346:	d151      	bne.n	80063ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b22      	cmp	r3, #34	; 0x22
 800634c:	d10d      	bne.n	800636a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800635c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006368:	e040      	b.n	80063ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d015      	beq.n	80063a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2b21      	cmp	r3, #33	; 0x21
 8006378:	d112      	bne.n	80063a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	781a      	ldrb	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800639e:	e025      	b.n	80063ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d120      	bne.n	80063ec <I2C_MemoryTransmit_TXE_BTF+0x120>
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	2b21      	cmp	r3, #33	; 0x21
 80063ae:	d11d      	bne.n	80063ec <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063be:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fe4c 	bl	8006084 <HAL_I2C_MemTxCpltCallback>
}
 80063ec:	bf00      	nop
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b22      	cmp	r3, #34	; 0x22
 8006406:	f040 80a2 	bne.w	800654e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640e:	b29b      	uxth	r3, r3
 8006410:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d921      	bls.n	800645c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006434:	b29b      	uxth	r3, r3
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b03      	cmp	r3, #3
 8006446:	f040 8082 	bne.w	800654e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006458:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800645a:	e078      	b.n	800654e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	2b02      	cmp	r3, #2
 8006462:	d074      	beq.n	800654e <I2C_MasterReceive_RXNE+0x15a>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d002      	beq.n	8006470 <I2C_MasterReceive_RXNE+0x7c>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d16e      	bne.n	800654e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 f823 	bl	80074bc <I2C_WaitOnSTOPRequestThroughIT>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d142      	bne.n	8006502 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800648a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800649a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	d10a      	bne.n	80064ec <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff fdd6 	bl	8006096 <HAL_I2C_MemRxCpltCallback>
}
 80064ea:	e030      	b.n	800654e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2212      	movs	r2, #18
 80064f8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fc fbfc 	bl	8002cf8 <HAL_I2C_MasterRxCpltCallback>
}
 8006500:	e025      	b.n	800654e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006510:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691a      	ldr	r2, [r3, #16]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7fc fbe9 	bl	8002d20 <HAL_I2C_ErrorCallback>
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b04      	cmp	r3, #4
 800656c:	d11b      	bne.n	80065a6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659a:	b29b      	uxth	r3, r3
 800659c:	3b01      	subs	r3, #1
 800659e:	b29a      	uxth	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80065a4:	e0bd      	b.n	8006722 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d129      	bne.n	8006604 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065be:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d00a      	beq.n	80065dc <I2C_MasterReceive_BTF+0x86>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d007      	beq.n	80065dc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006602:	e08e      	b.n	8006722 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d176      	bne.n	80066fc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d002      	beq.n	800661a <I2C_MasterReceive_BTF+0xc4>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b10      	cmp	r3, #16
 8006618:	d108      	bne.n	800662c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	e019      	b.n	8006660 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b04      	cmp	r3, #4
 8006630:	d002      	beq.n	8006638 <I2C_MasterReceive_BTF+0xe2>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b02      	cmp	r3, #2
 8006636:	d108      	bne.n	800664a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e00a      	b.n	8006660 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b10      	cmp	r3, #16
 800664e:	d007      	beq.n	8006660 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800665e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667c:	b29b      	uxth	r3, r3
 800667e:	3b01      	subs	r3, #1
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	691a      	ldr	r2, [r3, #16]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	b2d2      	uxtb	r2, r2
 8006692:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80066ba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b40      	cmp	r3, #64	; 0x40
 80066ce:	d10a      	bne.n	80066e6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff fcd9 	bl	8006096 <HAL_I2C_MemRxCpltCallback>
}
 80066e4:	e01d      	b.n	8006722 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2212      	movs	r2, #18
 80066f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7fc faff 	bl	8002cf8 <HAL_I2C_MasterRxCpltCallback>
}
 80066fa:	e012      	b.n	8006722 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691a      	ldr	r2, [r3, #16]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006722:	bf00      	nop
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b40      	cmp	r3, #64	; 0x40
 800673c:	d117      	bne.n	800676e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006742:	2b00      	cmp	r3, #0
 8006744:	d109      	bne.n	800675a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674a:	b2db      	uxtb	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006756:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006758:	e067      	b.n	800682a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675e:	b2db      	uxtb	r3, r3
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	b2da      	uxtb	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	611a      	str	r2, [r3, #16]
}
 800676c:	e05d      	b.n	800682a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006776:	d133      	bne.n	80067e0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b21      	cmp	r3, #33	; 0x21
 8006782:	d109      	bne.n	8006798 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006788:	b2db      	uxtb	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006794:	611a      	str	r2, [r3, #16]
 8006796:	e008      	b.n	80067aa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f043 0301 	orr.w	r3, r3, #1
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d004      	beq.n	80067bc <I2C_Master_SB+0x92>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d108      	bne.n	80067ce <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d032      	beq.n	800682a <I2C_Master_SB+0x100>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d02d      	beq.n	800682a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067dc:	605a      	str	r2, [r3, #4]
}
 80067de:	e024      	b.n	800682a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10e      	bne.n	8006806 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	11db      	asrs	r3, r3, #7
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	f003 0306 	and.w	r3, r3, #6
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f063 030f 	orn	r3, r3, #15
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	611a      	str	r2, [r3, #16]
}
 8006804:	e011      	b.n	800682a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680a:	2b01      	cmp	r3, #1
 800680c:	d10d      	bne.n	800682a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006812:	b29b      	uxth	r3, r3
 8006814:	11db      	asrs	r3, r3, #7
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 0306 	and.w	r3, r3, #6
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f063 030e 	orn	r3, r3, #14
 8006822:	b2da      	uxtb	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	611a      	str	r2, [r3, #16]
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr

08006834 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006840:	b2da      	uxtb	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684c:	2b00      	cmp	r3, #0
 800684e:	d004      	beq.n	800685a <I2C_Master_ADD10+0x26>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	2b00      	cmp	r3, #0
 8006858:	d108      	bne.n	800686c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00c      	beq.n	800687c <I2C_Master_ADD10+0x48>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800687a:	605a      	str	r2, [r3, #4]
  }
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	bc80      	pop	{r7}
 8006884:	4770      	bx	lr

08006886 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006886:	b480      	push	{r7}
 8006888:	b091      	sub	sp, #68	; 0x44
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006894:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b22      	cmp	r3, #34	; 0x22
 80068ae:	f040 8174 	bne.w	8006b9a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10f      	bne.n	80068da <I2C_Master_ADDR+0x54>
 80068ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068be:	2b40      	cmp	r3, #64	; 0x40
 80068c0:	d10b      	bne.n	80068da <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068c2:	2300      	movs	r3, #0
 80068c4:	633b      	str	r3, [r7, #48]	; 0x30
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	633b      	str	r3, [r7, #48]	; 0x30
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	633b      	str	r3, [r7, #48]	; 0x30
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	e16b      	b.n	8006bb2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d11d      	bne.n	800691e <I2C_Master_ADDR+0x98>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068ea:	d118      	bne.n	800691e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ec:	2300      	movs	r3, #0
 80068ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006900:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006910:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	651a      	str	r2, [r3, #80]	; 0x50
 800691c:	e149      	b.n	8006bb2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d113      	bne.n	8006950 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006928:	2300      	movs	r3, #0
 800692a:	62bb      	str	r3, [r7, #40]	; 0x28
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	62bb      	str	r3, [r7, #40]	; 0x28
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	62bb      	str	r3, [r7, #40]	; 0x28
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e120      	b.n	8006b92 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b01      	cmp	r3, #1
 8006958:	f040 808a 	bne.w	8006a70 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006962:	d137      	bne.n	80069d4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006972:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800697e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006982:	d113      	bne.n	80069ac <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006992:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006994:	2300      	movs	r3, #0
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	627b      	str	r3, [r7, #36]	; 0x24
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	e0f2      	b.n	8006b92 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ac:	2300      	movs	r3, #0
 80069ae:	623b      	str	r3, [r7, #32]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	623b      	str	r3, [r7, #32]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	623b      	str	r3, [r7, #32]
 80069c0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	e0de      	b.n	8006b92 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	d02e      	beq.n	8006a38 <I2C_Master_ADDR+0x1b2>
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	2b20      	cmp	r3, #32
 80069de:	d02b      	beq.n	8006a38 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80069e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e2:	2b12      	cmp	r3, #18
 80069e4:	d102      	bne.n	80069ec <I2C_Master_ADDR+0x166>
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d125      	bne.n	8006a38 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d00e      	beq.n	8006a10 <I2C_Master_ADDR+0x18a>
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d00b      	beq.n	8006a10 <I2C_Master_ADDR+0x18a>
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	2b10      	cmp	r3, #16
 80069fc:	d008      	beq.n	8006a10 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e007      	b.n	8006a20 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a1e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a20:	2300      	movs	r3, #0
 8006a22:	61fb      	str	r3, [r7, #28]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	61fb      	str	r3, [r7, #28]
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	e0ac      	b.n	8006b92 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a46:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a48:	2300      	movs	r3, #0
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	61bb      	str	r3, [r7, #24]
 8006a5c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	e090      	b.n	8006b92 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d158      	bne.n	8006b2c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d021      	beq.n	8006ac4 <I2C_Master_ADDR+0x23e>
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d01e      	beq.n	8006ac4 <I2C_Master_ADDR+0x23e>
 8006a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	d01b      	beq.n	8006ac4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	e012      	b.n	8006aea <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ad2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	613b      	str	r3, [r7, #16]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af8:	d14b      	bne.n	8006b92 <I2C_Master_ADDR+0x30c>
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b00:	d00b      	beq.n	8006b1a <I2C_Master_ADDR+0x294>
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d008      	beq.n	8006b1a <I2C_Master_ADDR+0x294>
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d005      	beq.n	8006b1a <I2C_Master_ADDR+0x294>
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	2b10      	cmp	r3, #16
 8006b12:	d002      	beq.n	8006b1a <I2C_Master_ADDR+0x294>
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d13b      	bne.n	8006b92 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b28:	605a      	str	r2, [r3, #4]
 8006b2a:	e032      	b.n	8006b92 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b3a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b4a:	d117      	bne.n	8006b7c <I2C_Master_ADDR+0x2f6>
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b52:	d00b      	beq.n	8006b6c <I2C_Master_ADDR+0x2e6>
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d008      	beq.n	8006b6c <I2C_Master_ADDR+0x2e6>
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d005      	beq.n	8006b6c <I2C_Master_ADDR+0x2e6>
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	2b10      	cmp	r3, #16
 8006b64:	d002      	beq.n	8006b6c <I2C_Master_ADDR+0x2e6>
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	2b20      	cmp	r3, #32
 8006b6a:	d107      	bne.n	8006b7c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b7a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006b98:	e00b      	b.n	8006bb2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60bb      	str	r3, [r7, #8]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	60bb      	str	r3, [r7, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	60bb      	str	r3, [r7, #8]
 8006bae:	68bb      	ldr	r3, [r7, #8]
}
 8006bb0:	e7ff      	b.n	8006bb2 <I2C_Master_ADDR+0x32c>
 8006bb2:	bf00      	nop
 8006bb4:	3744      	adds	r7, #68	; 0x44
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr

08006bbc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02b      	beq.n	8006c2e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	781a      	ldrb	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d114      	bne.n	8006c2e <I2C_SlaveTransmit_TXE+0x72>
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	2b29      	cmp	r3, #41	; 0x29
 8006c08:	d111      	bne.n	8006c2e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c18:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2221      	movs	r2, #33	; 0x21
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2228      	movs	r2, #40	; 0x28
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fa03 	bl	8006034 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006c2e:	bf00      	nop
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d011      	beq.n	8006c6c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	781a      	ldrb	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bc80      	pop	{r7}
 8006c74:	4770      	bx	lr

08006c76 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c84:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d02c      	beq.n	8006cea <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	691a      	ldr	r2, [r3, #16]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d114      	bne.n	8006cea <I2C_SlaveReceive_RXNE+0x74>
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cc4:	d111      	bne.n	8006cea <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cd4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2222      	movs	r2, #34	; 0x22
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2228      	movs	r2, #40	; 0x28
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff f9ae 	bl	8006046 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d012      	beq.n	8006d2a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691a      	ldr	r2, [r3, #16]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr

08006d34 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d4e:	2b28      	cmp	r3, #40	; 0x28
 8006d50:	d127      	bne.n	8006da2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d60:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	089b      	lsrs	r3, r3, #2
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	09db      	lsrs	r3, r3, #7
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	81bb      	strh	r3, [r7, #12]
 8006d84:	e002      	b.n	8006d8c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006d94:	89ba      	ldrh	r2, [r7, #12]
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff f95c 	bl	8006058 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006da0:	e00e      	b.n	8006dc0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006da2:	2300      	movs	r3, #0
 8006da4:	60bb      	str	r3, [r7, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	60bb      	str	r3, [r7, #8]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006dc0:	bf00      	nop
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006de6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006de8:	2300      	movs	r3, #0
 8006dea:	60bb      	str	r3, [r7, #8]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	60bb      	str	r3, [r7, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e14:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e24:	d172      	bne.n	8006f0c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	2b22      	cmp	r3, #34	; 0x22
 8006e2a:	d002      	beq.n	8006e32 <I2C_Slave_STOPF+0x6a>
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e30:	d135      	bne.n	8006e9e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	f043 0204 	orr.w	r2, r3, #4
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe fa40 	bl	80052f0 <HAL_DMA_GetState>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d049      	beq.n	8006f0a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	4a69      	ldr	r2, [pc, #420]	; (8007020 <I2C_Slave_STOPF+0x258>)
 8006e7c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fd fef0 	bl	8004c68 <HAL_DMA_Abort_IT>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d03d      	beq.n	8006f0a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e9c:	e035      	b.n	8006f0a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	f043 0204 	orr.w	r2, r3, #4
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ed0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe fa0a 	bl	80052f0 <HAL_DMA_GetState>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d014      	beq.n	8006f0c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee6:	4a4e      	ldr	r2, [pc, #312]	; (8007020 <I2C_Slave_STOPF+0x258>)
 8006ee8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fd feba 	bl	8004c68 <HAL_DMA_Abort_IT>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d008      	beq.n	8006f0c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
 8006f08:	e000      	b.n	8006f0c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f0a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d03e      	beq.n	8006f94 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d112      	bne.n	8006f4a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691a      	ldr	r2, [r3, #16]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f54:	2b40      	cmp	r3, #64	; 0x40
 8006f56:	d112      	bne.n	8006f7e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691a      	ldr	r2, [r3, #16]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	b2d2      	uxtb	r2, r2
 8006f64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	3b01      	subs	r3, #1
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	f043 0204 	orr.w	r2, r3, #4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f8b3 	bl	8007108 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006fa2:	e039      	b.n	8007018 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8006fa8:	d109      	bne.n	8006fbe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2228      	movs	r2, #40	; 0x28
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff f844 	bl	8006046 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b28      	cmp	r3, #40	; 0x28
 8006fc8:	d111      	bne.n	8006fee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a15      	ldr	r2, [pc, #84]	; (8007024 <I2C_Slave_STOPF+0x25c>)
 8006fce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7ff f843 	bl	8006072 <HAL_I2C_ListenCpltCallback>
}
 8006fec:	e014      	b.n	8007018 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	2b22      	cmp	r3, #34	; 0x22
 8006ff4:	d002      	beq.n	8006ffc <I2C_Slave_STOPF+0x234>
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
 8006ff8:	2b22      	cmp	r3, #34	; 0x22
 8006ffa:	d10d      	bne.n	8007018 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff f817 	bl	8006046 <HAL_I2C_SlaveRxCpltCallback>
}
 8007018:	bf00      	nop
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	0800736d 	.word	0x0800736d
 8007024:	ffff0000 	.word	0xffff0000

08007028 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007036:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b08      	cmp	r3, #8
 8007042:	d002      	beq.n	800704a <I2C_Slave_AF+0x22>
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b20      	cmp	r3, #32
 8007048:	d129      	bne.n	800709e <I2C_Slave_AF+0x76>
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	2b28      	cmp	r3, #40	; 0x28
 800704e:	d126      	bne.n	800709e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a2c      	ldr	r2, [pc, #176]	; (8007104 <I2C_Slave_AF+0xdc>)
 8007054:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007064:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800706e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800707e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7fe ffeb 	bl	8006072 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800709c:	e02e      	b.n	80070fc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	2b21      	cmp	r3, #33	; 0x21
 80070a2:	d126      	bne.n	80070f2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a17      	ldr	r2, [pc, #92]	; (8007104 <I2C_Slave_AF+0xdc>)
 80070a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2221      	movs	r2, #33	; 0x21
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070ce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070d8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070e8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fe ffa2 	bl	8006034 <HAL_I2C_SlaveTxCpltCallback>
}
 80070f0:	e004      	b.n	80070fc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070fa:	615a      	str	r2, [r3, #20]
}
 80070fc:	bf00      	nop
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	ffff0000 	.word	0xffff0000

08007108 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007116:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800711e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	2b10      	cmp	r3, #16
 8007124:	d002      	beq.n	800712c <I2C_ITError+0x24>
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b40      	cmp	r3, #64	; 0x40
 800712a:	d10a      	bne.n	8007142 <I2C_ITError+0x3a>
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	2b22      	cmp	r3, #34	; 0x22
 8007130:	d107      	bne.n	8007142 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007140:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007148:	2b28      	cmp	r3, #40	; 0x28
 800714a:	d107      	bne.n	800715c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2228      	movs	r2, #40	; 0x28
 8007156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800715a:	e015      	b.n	8007188 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800716a:	d00a      	beq.n	8007182 <I2C_ITError+0x7a>
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	2b60      	cmp	r3, #96	; 0x60
 8007170:	d007      	beq.n	8007182 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007196:	d161      	bne.n	800725c <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071a6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d020      	beq.n	80071f6 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b8:	4a6a      	ldr	r2, [pc, #424]	; (8007364 <I2C_ITError+0x25c>)
 80071ba:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fd fd51 	bl	8004c68 <HAL_DMA_Abort_IT>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 8089 	beq.w	80072e0 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0201 	bic.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071f0:	4610      	mov	r0, r2
 80071f2:	4798      	blx	r3
 80071f4:	e074      	b.n	80072e0 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	4a5a      	ldr	r2, [pc, #360]	; (8007364 <I2C_ITError+0x25c>)
 80071fc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	4618      	mov	r0, r3
 8007204:	f7fd fd30 	bl	8004c68 <HAL_DMA_Abort_IT>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d068      	beq.n	80072e0 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007218:	2b40      	cmp	r3, #64	; 0x40
 800721a:	d10b      	bne.n	8007234 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	691a      	ldr	r2, [r3, #16]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0201 	bic.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007256:	4610      	mov	r0, r2
 8007258:	4798      	blx	r3
 800725a:	e041      	b.n	80072e0 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b60      	cmp	r3, #96	; 0x60
 8007266:	d125      	bne.n	80072b4 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b40      	cmp	r3, #64	; 0x40
 8007282:	d10b      	bne.n	800729c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	691a      	ldr	r2, [r3, #16]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7fb fd57 	bl	8002d60 <HAL_I2C_AbortCpltCallback>
 80072b2:	e015      	b.n	80072e0 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	d10b      	bne.n	80072da <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7fb fd20 	bl	8002d20 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10e      	bne.n	800730e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d109      	bne.n	800730e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007300:	2b00      	cmp	r3, #0
 8007302:	d104      	bne.n	800730e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800730a:	2b00      	cmp	r3, #0
 800730c:	d007      	beq.n	800731e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800731c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007324:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b04      	cmp	r3, #4
 8007330:	d113      	bne.n	800735a <I2C_ITError+0x252>
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	2b28      	cmp	r3, #40	; 0x28
 8007336:	d110      	bne.n	800735a <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a0b      	ldr	r2, [pc, #44]	; (8007368 <I2C_ITError+0x260>)
 800733c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7fe fe8c 	bl	8006072 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800735a:	bf00      	nop
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	0800736d 	.word	0x0800736d
 8007368:	ffff0000 	.word	0xffff0000

0800736c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007384:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007386:	4b4b      	ldr	r3, [pc, #300]	; (80074b4 <I2C_DMAAbort+0x148>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	08db      	lsrs	r3, r3, #3
 800738c:	4a4a      	ldr	r2, [pc, #296]	; (80074b8 <I2C_DMAAbort+0x14c>)
 800738e:	fba2 2303 	umull	r2, r3, r2, r3
 8007392:	0a1a      	lsrs	r2, r3, #8
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	00da      	lsls	r2, r3, #3
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	f043 0220 	orr.w	r2, r3, #32
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80073b2:	e00a      	b.n	80073ca <I2C_DMAAbort+0x5e>
    }
    count--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c8:	d0ea      	beq.n	80073a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d6:	2200      	movs	r2, #0
 80073d8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e6:	2200      	movs	r2, #0
 80073e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2200      	movs	r2, #0
 80073fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740c:	2200      	movs	r2, #0
 800740e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	2200      	movs	r2, #0
 800741e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0201 	bic.w	r2, r2, #1
 800742e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b60      	cmp	r3, #96	; 0x60
 800743a:	d10e      	bne.n	800745a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2220      	movs	r2, #32
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2200      	movs	r2, #0
 8007450:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007452:	6978      	ldr	r0, [r7, #20]
 8007454:	f7fb fc84 	bl	8002d60 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007458:	e027      	b.n	80074aa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800745a:	7cfb      	ldrb	r3, [r7, #19]
 800745c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007460:	2b28      	cmp	r3, #40	; 0x28
 8007462:	d117      	bne.n	8007494 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0201 	orr.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007482:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	2200      	movs	r2, #0
 8007488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2228      	movs	r2, #40	; 0x28
 800748e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007492:	e007      	b.n	80074a4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80074a4:	6978      	ldr	r0, [r7, #20]
 80074a6:	f7fb fc3b 	bl	8002d20 <HAL_I2C_ErrorCallback>
}
 80074aa:	bf00      	nop
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20000148 	.word	0x20000148
 80074b8:	14f8b589 	.word	0x14f8b589

080074bc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80074c8:	4b13      	ldr	r3, [pc, #76]	; (8007518 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	08db      	lsrs	r3, r3, #3
 80074ce:	4a13      	ldr	r2, [pc, #76]	; (800751c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80074d0:	fba2 2303 	umull	r2, r3, r2, r3
 80074d4:	0a1a      	lsrs	r2, r3, #8
 80074d6:	4613      	mov	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3b01      	subs	r3, #1
 80074e2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d107      	bne.n	80074fa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	f043 0220 	orr.w	r2, r3, #32
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e008      	b.n	800750c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007508:	d0e9      	beq.n	80074de <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	bc80      	pop	{r7}
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20000148 	.word	0x20000148
 800751c:	14f8b589 	.word	0x14f8b589

08007520 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007530:	d103      	bne.n	800753a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007538:	e007      	b.n	800754a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007542:	d102      	bne.n	800754a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2208      	movs	r2, #8
 8007548:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	bc80      	pop	{r7}
 8007552:	4770      	bx	lr

08007554 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007554:	b480      	push	{r7}
 8007556:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007558:	4b03      	ldr	r3, [pc, #12]	; (8007568 <HAL_PWR_EnableBkUpAccess+0x14>)
 800755a:	2201      	movs	r2, #1
 800755c:	601a      	str	r2, [r3, #0]
}
 800755e:	bf00      	nop
 8007560:	46bd      	mov	sp, r7
 8007562:	bc80      	pop	{r7}
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	420e0020 	.word	0x420e0020

0800756c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e304      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 8087 	beq.w	800769a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800758c:	4b92      	ldr	r3, [pc, #584]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f003 030c 	and.w	r3, r3, #12
 8007594:	2b04      	cmp	r3, #4
 8007596:	d00c      	beq.n	80075b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007598:	4b8f      	ldr	r3, [pc, #572]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f003 030c 	and.w	r3, r3, #12
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d112      	bne.n	80075ca <HAL_RCC_OscConfig+0x5e>
 80075a4:	4b8c      	ldr	r3, [pc, #560]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b0:	d10b      	bne.n	80075ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075b2:	4b89      	ldr	r3, [pc, #548]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d06c      	beq.n	8007698 <HAL_RCC_OscConfig+0x12c>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d168      	bne.n	8007698 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e2de      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d2:	d106      	bne.n	80075e2 <HAL_RCC_OscConfig+0x76>
 80075d4:	4b80      	ldr	r3, [pc, #512]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a7f      	ldr	r2, [pc, #508]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80075da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	e02e      	b.n	8007640 <HAL_RCC_OscConfig+0xd4>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10c      	bne.n	8007604 <HAL_RCC_OscConfig+0x98>
 80075ea:	4b7b      	ldr	r3, [pc, #492]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a7a      	ldr	r2, [pc, #488]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80075f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	4b78      	ldr	r3, [pc, #480]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a77      	ldr	r2, [pc, #476]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80075fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	e01d      	b.n	8007640 <HAL_RCC_OscConfig+0xd4>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800760c:	d10c      	bne.n	8007628 <HAL_RCC_OscConfig+0xbc>
 800760e:	4b72      	ldr	r3, [pc, #456]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a71      	ldr	r2, [pc, #452]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 8007614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	4b6f      	ldr	r3, [pc, #444]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a6e      	ldr	r2, [pc, #440]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 8007620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	e00b      	b.n	8007640 <HAL_RCC_OscConfig+0xd4>
 8007628:	4b6b      	ldr	r3, [pc, #428]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a6a      	ldr	r2, [pc, #424]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 800762e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	4b68      	ldr	r3, [pc, #416]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a67      	ldr	r2, [pc, #412]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 800763a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800763e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d013      	beq.n	8007670 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007648:	f7fd f914 	bl	8004874 <HAL_GetTick>
 800764c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800764e:	e008      	b.n	8007662 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007650:	f7fd f910 	bl	8004874 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b64      	cmp	r3, #100	; 0x64
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e292      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007662:	4b5d      	ldr	r3, [pc, #372]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0f0      	beq.n	8007650 <HAL_RCC_OscConfig+0xe4>
 800766e:	e014      	b.n	800769a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007670:	f7fd f900 	bl	8004874 <HAL_GetTick>
 8007674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007676:	e008      	b.n	800768a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007678:	f7fd f8fc 	bl	8004874 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b64      	cmp	r3, #100	; 0x64
 8007684:	d901      	bls.n	800768a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e27e      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800768a:	4b53      	ldr	r3, [pc, #332]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1f0      	bne.n	8007678 <HAL_RCC_OscConfig+0x10c>
 8007696:	e000      	b.n	800769a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d063      	beq.n	800776e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80076a6:	4b4c      	ldr	r3, [pc, #304]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f003 030c 	and.w	r3, r3, #12
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00b      	beq.n	80076ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80076b2:	4b49      	ldr	r3, [pc, #292]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f003 030c 	and.w	r3, r3, #12
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	d11c      	bne.n	80076f8 <HAL_RCC_OscConfig+0x18c>
 80076be:	4b46      	ldr	r3, [pc, #280]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d116      	bne.n	80076f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076ca:	4b43      	ldr	r3, [pc, #268]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d005      	beq.n	80076e2 <HAL_RCC_OscConfig+0x176>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d001      	beq.n	80076e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e252      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076e2:	4b3d      	ldr	r3, [pc, #244]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	4939      	ldr	r1, [pc, #228]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076f6:	e03a      	b.n	800776e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d020      	beq.n	8007742 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007700:	4b36      	ldr	r3, [pc, #216]	; (80077dc <HAL_RCC_OscConfig+0x270>)
 8007702:	2201      	movs	r2, #1
 8007704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007706:	f7fd f8b5 	bl	8004874 <HAL_GetTick>
 800770a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800770c:	e008      	b.n	8007720 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800770e:	f7fd f8b1 	bl	8004874 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	d901      	bls.n	8007720 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e233      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007720:	4b2d      	ldr	r3, [pc, #180]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0f0      	beq.n	800770e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800772c:	4b2a      	ldr	r3, [pc, #168]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	4927      	ldr	r1, [pc, #156]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 800773c:	4313      	orrs	r3, r2
 800773e:	600b      	str	r3, [r1, #0]
 8007740:	e015      	b.n	800776e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007742:	4b26      	ldr	r3, [pc, #152]	; (80077dc <HAL_RCC_OscConfig+0x270>)
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007748:	f7fd f894 	bl	8004874 <HAL_GetTick>
 800774c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800774e:	e008      	b.n	8007762 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007750:	f7fd f890 	bl	8004874 <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	2b02      	cmp	r3, #2
 800775c:	d901      	bls.n	8007762 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e212      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007762:	4b1d      	ldr	r3, [pc, #116]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1f0      	bne.n	8007750 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d03a      	beq.n	80077f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d019      	beq.n	80077b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007782:	4b17      	ldr	r3, [pc, #92]	; (80077e0 <HAL_RCC_OscConfig+0x274>)
 8007784:	2201      	movs	r2, #1
 8007786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007788:	f7fd f874 	bl	8004874 <HAL_GetTick>
 800778c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800778e:	e008      	b.n	80077a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007790:	f7fd f870 	bl	8004874 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d901      	bls.n	80077a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e1f2      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077a2:	4b0d      	ldr	r3, [pc, #52]	; (80077d8 <HAL_RCC_OscConfig+0x26c>)
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0f0      	beq.n	8007790 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80077ae:	2001      	movs	r0, #1
 80077b0:	f000 fc22 	bl	8007ff8 <RCC_Delay>
 80077b4:	e01c      	b.n	80077f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077b6:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <HAL_RCC_OscConfig+0x274>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077bc:	f7fd f85a 	bl	8004874 <HAL_GetTick>
 80077c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077c2:	e00f      	b.n	80077e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077c4:	f7fd f856 	bl	8004874 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d908      	bls.n	80077e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e1d8      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
 80077d6:	bf00      	nop
 80077d8:	40021000 	.word	0x40021000
 80077dc:	42420000 	.word	0x42420000
 80077e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077e4:	4b9b      	ldr	r3, [pc, #620]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e9      	bne.n	80077c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 80a6 	beq.w	800794a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077fe:	2300      	movs	r3, #0
 8007800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007802:	4b94      	ldr	r3, [pc, #592]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10d      	bne.n	800782a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800780e:	4b91      	ldr	r3, [pc, #580]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	4a90      	ldr	r2, [pc, #576]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007818:	61d3      	str	r3, [r2, #28]
 800781a:	4b8e      	ldr	r3, [pc, #568]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007822:	60bb      	str	r3, [r7, #8]
 8007824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007826:	2301      	movs	r3, #1
 8007828:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800782a:	4b8b      	ldr	r3, [pc, #556]	; (8007a58 <HAL_RCC_OscConfig+0x4ec>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007832:	2b00      	cmp	r3, #0
 8007834:	d118      	bne.n	8007868 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007836:	4b88      	ldr	r3, [pc, #544]	; (8007a58 <HAL_RCC_OscConfig+0x4ec>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a87      	ldr	r2, [pc, #540]	; (8007a58 <HAL_RCC_OscConfig+0x4ec>)
 800783c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007842:	f7fd f817 	bl	8004874 <HAL_GetTick>
 8007846:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007848:	e008      	b.n	800785c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800784a:	f7fd f813 	bl	8004874 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	2b64      	cmp	r3, #100	; 0x64
 8007856:	d901      	bls.n	800785c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e195      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800785c:	4b7e      	ldr	r3, [pc, #504]	; (8007a58 <HAL_RCC_OscConfig+0x4ec>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007864:	2b00      	cmp	r3, #0
 8007866:	d0f0      	beq.n	800784a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d106      	bne.n	800787e <HAL_RCC_OscConfig+0x312>
 8007870:	4b78      	ldr	r3, [pc, #480]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	4a77      	ldr	r2, [pc, #476]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	6213      	str	r3, [r2, #32]
 800787c:	e02d      	b.n	80078da <HAL_RCC_OscConfig+0x36e>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10c      	bne.n	80078a0 <HAL_RCC_OscConfig+0x334>
 8007886:	4b73      	ldr	r3, [pc, #460]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	4a72      	ldr	r2, [pc, #456]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 800788c:	f023 0301 	bic.w	r3, r3, #1
 8007890:	6213      	str	r3, [r2, #32]
 8007892:	4b70      	ldr	r3, [pc, #448]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	4a6f      	ldr	r2, [pc, #444]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007898:	f023 0304 	bic.w	r3, r3, #4
 800789c:	6213      	str	r3, [r2, #32]
 800789e:	e01c      	b.n	80078da <HAL_RCC_OscConfig+0x36e>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	2b05      	cmp	r3, #5
 80078a6:	d10c      	bne.n	80078c2 <HAL_RCC_OscConfig+0x356>
 80078a8:	4b6a      	ldr	r3, [pc, #424]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	4a69      	ldr	r2, [pc, #420]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80078ae:	f043 0304 	orr.w	r3, r3, #4
 80078b2:	6213      	str	r3, [r2, #32]
 80078b4:	4b67      	ldr	r3, [pc, #412]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	4a66      	ldr	r2, [pc, #408]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80078ba:	f043 0301 	orr.w	r3, r3, #1
 80078be:	6213      	str	r3, [r2, #32]
 80078c0:	e00b      	b.n	80078da <HAL_RCC_OscConfig+0x36e>
 80078c2:	4b64      	ldr	r3, [pc, #400]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	4a63      	ldr	r2, [pc, #396]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80078c8:	f023 0301 	bic.w	r3, r3, #1
 80078cc:	6213      	str	r3, [r2, #32]
 80078ce:	4b61      	ldr	r3, [pc, #388]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	4a60      	ldr	r2, [pc, #384]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80078d4:	f023 0304 	bic.w	r3, r3, #4
 80078d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d015      	beq.n	800790e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078e2:	f7fc ffc7 	bl	8004874 <HAL_GetTick>
 80078e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078e8:	e00a      	b.n	8007900 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ea:	f7fc ffc3 	bl	8004874 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d901      	bls.n	8007900 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e143      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007900:	4b54      	ldr	r3, [pc, #336]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d0ee      	beq.n	80078ea <HAL_RCC_OscConfig+0x37e>
 800790c:	e014      	b.n	8007938 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800790e:	f7fc ffb1 	bl	8004874 <HAL_GetTick>
 8007912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007914:	e00a      	b.n	800792c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007916:	f7fc ffad 	bl	8004874 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	f241 3288 	movw	r2, #5000	; 0x1388
 8007924:	4293      	cmp	r3, r2
 8007926:	d901      	bls.n	800792c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e12d      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800792c:	4b49      	ldr	r3, [pc, #292]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1ee      	bne.n	8007916 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d105      	bne.n	800794a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800793e:	4b45      	ldr	r3, [pc, #276]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	4a44      	ldr	r2, [pc, #272]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007948:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 808c 	beq.w	8007a6c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007954:	4b3f      	ldr	r3, [pc, #252]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800795c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007960:	d10e      	bne.n	8007980 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8007962:	4b3c      	ldr	r3, [pc, #240]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800796a:	2b08      	cmp	r3, #8
 800796c:	d108      	bne.n	8007980 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800796e:	4b39      	ldr	r3, [pc, #228]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8007976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800797a:	d101      	bne.n	8007980 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e103      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	2b02      	cmp	r3, #2
 8007986:	d14e      	bne.n	8007a26 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007988:	4b32      	ldr	r3, [pc, #200]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d009      	beq.n	80079a8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8007994:	4b2f      	ldr	r3, [pc, #188]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d001      	beq.n	80079a8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e0ef      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80079a8:	4b2c      	ldr	r3, [pc, #176]	; (8007a5c <HAL_RCC_OscConfig+0x4f0>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ae:	f7fc ff61 	bl	8004874 <HAL_GetTick>
 80079b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80079b4:	e008      	b.n	80079c8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079b6:	f7fc ff5d 	bl	8004874 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b64      	cmp	r3, #100	; 0x64
 80079c2:	d901      	bls.n	80079c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e0df      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80079c8:	4b22      	ldr	r3, [pc, #136]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1f0      	bne.n	80079b6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80079d4:	4b1f      	ldr	r3, [pc, #124]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e0:	491c      	ldr	r1, [pc, #112]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80079e6:	4b1b      	ldr	r3, [pc, #108]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80079e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	4918      	ldr	r1, [pc, #96]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80079f8:	4b18      	ldr	r3, [pc, #96]	; (8007a5c <HAL_RCC_OscConfig+0x4f0>)
 80079fa:	2201      	movs	r2, #1
 80079fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079fe:	f7fc ff39 	bl	8004874 <HAL_GetTick>
 8007a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007a04:	e008      	b.n	8007a18 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a06:	f7fc ff35 	bl	8004874 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b64      	cmp	r3, #100	; 0x64
 8007a12:	d901      	bls.n	8007a18 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e0b7      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007a18:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0f0      	beq.n	8007a06 <HAL_RCC_OscConfig+0x49a>
 8007a24:	e022      	b.n	8007a6c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8007a26:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	4a0a      	ldr	r2, [pc, #40]	; (8007a54 <HAL_RCC_OscConfig+0x4e8>)
 8007a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007a32:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <HAL_RCC_OscConfig+0x4f0>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a38:	f7fc ff1c 	bl	8004874 <HAL_GetTick>
 8007a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8007a3e:	e00f      	b.n	8007a60 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a40:	f7fc ff18 	bl	8004874 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b64      	cmp	r3, #100	; 0x64
 8007a4c:	d908      	bls.n	8007a60 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e09a      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
 8007a52:	bf00      	nop
 8007a54:	40021000 	.word	0x40021000
 8007a58:	40007000 	.word	0x40007000
 8007a5c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8007a60:	4b4b      	ldr	r3, [pc, #300]	; (8007b90 <HAL_RCC_OscConfig+0x624>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e9      	bne.n	8007a40 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 8088 	beq.w	8007b86 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a76:	4b46      	ldr	r3, [pc, #280]	; (8007b90 <HAL_RCC_OscConfig+0x624>)
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f003 030c 	and.w	r3, r3, #12
 8007a7e:	2b08      	cmp	r3, #8
 8007a80:	d068      	beq.n	8007b54 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d14d      	bne.n	8007b26 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a8a:	4b42      	ldr	r3, [pc, #264]	; (8007b94 <HAL_RCC_OscConfig+0x628>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a90:	f7fc fef0 	bl	8004874 <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a96:	e008      	b.n	8007aaa <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a98:	f7fc feec 	bl	8004874 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e06e      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007aaa:	4b39      	ldr	r3, [pc, #228]	; (8007b90 <HAL_RCC_OscConfig+0x624>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1f0      	bne.n	8007a98 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007abe:	d10f      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8007ac0:	4b33      	ldr	r3, [pc, #204]	; (8007b90 <HAL_RCC_OscConfig+0x624>)
 8007ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	4931      	ldr	r1, [pc, #196]	; (8007b90 <HAL_RCC_OscConfig+0x624>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007ace:	4b30      	ldr	r3, [pc, #192]	; (8007b90 <HAL_RCC_OscConfig+0x624>)
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	f023 020f 	bic.w	r2, r3, #15
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	492d      	ldr	r1, [pc, #180]	; (8007b90 <HAL_RCC_OscConfig+0x624>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ae0:	4b2b      	ldr	r3, [pc, #172]	; (8007b90 <HAL_RCC_OscConfig+0x624>)
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af0:	430b      	orrs	r3, r1
 8007af2:	4927      	ldr	r1, [pc, #156]	; (8007b90 <HAL_RCC_OscConfig+0x624>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007af8:	4b26      	ldr	r3, [pc, #152]	; (8007b94 <HAL_RCC_OscConfig+0x628>)
 8007afa:	2201      	movs	r2, #1
 8007afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007afe:	f7fc feb9 	bl	8004874 <HAL_GetTick>
 8007b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b04:	e008      	b.n	8007b18 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b06:	f7fc feb5 	bl	8004874 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d901      	bls.n	8007b18 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e037      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b18:	4b1d      	ldr	r3, [pc, #116]	; (8007b90 <HAL_RCC_OscConfig+0x624>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0f0      	beq.n	8007b06 <HAL_RCC_OscConfig+0x59a>
 8007b24:	e02f      	b.n	8007b86 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b26:	4b1b      	ldr	r3, [pc, #108]	; (8007b94 <HAL_RCC_OscConfig+0x628>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b2c:	f7fc fea2 	bl	8004874 <HAL_GetTick>
 8007b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b32:	e008      	b.n	8007b46 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b34:	f7fc fe9e 	bl	8004874 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e020      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b46:	4b12      	ldr	r3, [pc, #72]	; (8007b90 <HAL_RCC_OscConfig+0x624>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1f0      	bne.n	8007b34 <HAL_RCC_OscConfig+0x5c8>
 8007b52:	e018      	b.n	8007b86 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d101      	bne.n	8007b60 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e013      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007b60:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <HAL_RCC_OscConfig+0x624>)
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d106      	bne.n	8007b82 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d001      	beq.n	8007b86 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e000      	b.n	8007b88 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40021000 	.word	0x40021000
 8007b94:	42420060 	.word	0x42420060

08007b98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e0d0      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007bac:	4b6a      	ldr	r3, [pc, #424]	; (8007d58 <HAL_RCC_ClockConfig+0x1c0>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0307 	and.w	r3, r3, #7
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d910      	bls.n	8007bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bba:	4b67      	ldr	r3, [pc, #412]	; (8007d58 <HAL_RCC_ClockConfig+0x1c0>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f023 0207 	bic.w	r2, r3, #7
 8007bc2:	4965      	ldr	r1, [pc, #404]	; (8007d58 <HAL_RCC_ClockConfig+0x1c0>)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bca:	4b63      	ldr	r3, [pc, #396]	; (8007d58 <HAL_RCC_ClockConfig+0x1c0>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d001      	beq.n	8007bdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e0b8      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d020      	beq.n	8007c2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bf4:	4b59      	ldr	r3, [pc, #356]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4a58      	ldr	r2, [pc, #352]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007bfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007bfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0308 	and.w	r3, r3, #8
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c0c:	4b53      	ldr	r3, [pc, #332]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	4a52      	ldr	r2, [pc, #328]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007c12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007c16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c18:	4b50      	ldr	r3, [pc, #320]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	494d      	ldr	r1, [pc, #308]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d040      	beq.n	8007cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d107      	bne.n	8007c4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c3e:	4b47      	ldr	r3, [pc, #284]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d115      	bne.n	8007c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e07f      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d107      	bne.n	8007c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c56:	4b41      	ldr	r3, [pc, #260]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d109      	bne.n	8007c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e073      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c66:	4b3d      	ldr	r3, [pc, #244]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e06b      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c76:	4b39      	ldr	r3, [pc, #228]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f023 0203 	bic.w	r2, r3, #3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	4936      	ldr	r1, [pc, #216]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c88:	f7fc fdf4 	bl	8004874 <HAL_GetTick>
 8007c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c8e:	e00a      	b.n	8007ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c90:	f7fc fdf0 	bl	8004874 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d901      	bls.n	8007ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e053      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ca6:	4b2d      	ldr	r3, [pc, #180]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f003 020c 	and.w	r2, r3, #12
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d1eb      	bne.n	8007c90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cb8:	4b27      	ldr	r3, [pc, #156]	; (8007d58 <HAL_RCC_ClockConfig+0x1c0>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0307 	and.w	r3, r3, #7
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d210      	bcs.n	8007ce8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cc6:	4b24      	ldr	r3, [pc, #144]	; (8007d58 <HAL_RCC_ClockConfig+0x1c0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f023 0207 	bic.w	r2, r3, #7
 8007cce:	4922      	ldr	r1, [pc, #136]	; (8007d58 <HAL_RCC_ClockConfig+0x1c0>)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cd6:	4b20      	ldr	r3, [pc, #128]	; (8007d58 <HAL_RCC_ClockConfig+0x1c0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d001      	beq.n	8007ce8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e032      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d008      	beq.n	8007d06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cf4:	4b19      	ldr	r3, [pc, #100]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	4916      	ldr	r1, [pc, #88]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0308 	and.w	r3, r3, #8
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d009      	beq.n	8007d26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007d12:	4b12      	ldr	r3, [pc, #72]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	490e      	ldr	r1, [pc, #56]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d26:	f000 f821 	bl	8007d6c <HAL_RCC_GetSysClockFreq>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <HAL_RCC_ClockConfig+0x1c4>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	091b      	lsrs	r3, r3, #4
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	490a      	ldr	r1, [pc, #40]	; (8007d60 <HAL_RCC_ClockConfig+0x1c8>)
 8007d38:	5ccb      	ldrb	r3, [r1, r3]
 8007d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d3e:	4a09      	ldr	r2, [pc, #36]	; (8007d64 <HAL_RCC_ClockConfig+0x1cc>)
 8007d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007d42:	4b09      	ldr	r3, [pc, #36]	; (8007d68 <HAL_RCC_ClockConfig+0x1d0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fc f83c 	bl	8003dc4 <HAL_InitTick>

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	40022000 	.word	0x40022000
 8007d5c:	40021000 	.word	0x40021000
 8007d60:	080121a0 	.word	0x080121a0
 8007d64:	20000148 	.word	0x20000148
 8007d68:	2000014c 	.word	0x2000014c

08007d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d70:	b091      	sub	sp, #68	; 0x44
 8007d72:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8007d74:	4b6a      	ldr	r3, [pc, #424]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8007d76:	f107 0414 	add.w	r4, r7, #20
 8007d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d7c:	c407      	stmia	r4!, {r0, r1, r2}
 8007d7e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8007d80:	4b68      	ldr	r3, [pc, #416]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d82:	1d3c      	adds	r4, r7, #4
 8007d84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d8e:	2300      	movs	r3, #0
 8007d90:	633b      	str	r3, [r7, #48]	; 0x30
 8007d92:	2300      	movs	r3, #0
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d96:	2300      	movs	r3, #0
 8007d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007da2:	2300      	movs	r3, #0
 8007da4:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007da6:	4b60      	ldr	r3, [pc, #384]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dae:	f003 030c 	and.w	r3, r3, #12
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d002      	beq.n	8007dbc <HAL_RCC_GetSysClockFreq+0x50>
 8007db6:	2b08      	cmp	r3, #8
 8007db8:	d003      	beq.n	8007dc2 <HAL_RCC_GetSysClockFreq+0x56>
 8007dba:	e0a8      	b.n	8007f0e <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007dbc:	4b5b      	ldr	r3, [pc, #364]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007dbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007dc0:	e0a8      	b.n	8007f14 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc4:	0c9b      	lsrs	r3, r3, #18
 8007dc6:	f003 030f 	and.w	r3, r3, #15
 8007dca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007dce:	4413      	add	r3, r2
 8007dd0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 808e 	beq.w	8007efe <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8007de2:	4b51      	ldr	r3, [pc, #324]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007dee:	4413      	add	r3, r2
 8007df0:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8007df4:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8007df6:	4b4c      	ldr	r3, [pc, #304]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d06b      	beq.n	8007eda <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8007e02:	4b49      	ldr	r3, [pc, #292]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e06:	091b      	lsrs	r3, r3, #4
 8007e08:	f003 030f 	and.w	r3, r3, #15
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8007e10:	4b45      	ldr	r3, [pc, #276]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	0a1b      	lsrs	r3, r3, #8
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	3302      	adds	r3, #2
 8007e1c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	4618      	mov	r0, r3
 8007e22:	f04f 0100 	mov.w	r1, #0
 8007e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e28:	461a      	mov	r2, r3
 8007e2a:	f04f 0300 	mov.w	r3, #0
 8007e2e:	fb02 f501 	mul.w	r5, r2, r1
 8007e32:	fb00 f403 	mul.w	r4, r0, r3
 8007e36:	192e      	adds	r6, r5, r4
 8007e38:	fba0 4502 	umull	r4, r5, r0, r2
 8007e3c:	1973      	adds	r3, r6, r5
 8007e3e:	461d      	mov	r5, r3
 8007e40:	4620      	mov	r0, r4
 8007e42:	4629      	mov	r1, r5
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	014b      	lsls	r3, r1, #5
 8007e4e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e52:	0142      	lsls	r2, r0, #5
 8007e54:	4610      	mov	r0, r2
 8007e56:	4619      	mov	r1, r3
 8007e58:	1b00      	subs	r0, r0, r4
 8007e5a:	eb61 0105 	sbc.w	r1, r1, r5
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	018b      	lsls	r3, r1, #6
 8007e68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e6c:	0182      	lsls	r2, r0, #6
 8007e6e:	1a12      	subs	r2, r2, r0
 8007e70:	eb63 0301 	sbc.w	r3, r3, r1
 8007e74:	f04f 0000 	mov.w	r0, #0
 8007e78:	f04f 0100 	mov.w	r1, #0
 8007e7c:	00d9      	lsls	r1, r3, #3
 8007e7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e82:	00d0      	lsls	r0, r2, #3
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	1912      	adds	r2, r2, r4
 8007e8a:	eb45 0303 	adc.w	r3, r5, r3
 8007e8e:	f04f 0000 	mov.w	r0, #0
 8007e92:	f04f 0100 	mov.w	r1, #0
 8007e96:	0259      	lsls	r1, r3, #9
 8007e98:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007e9c:	0250      	lsls	r0, r2, #9
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4690      	mov	r8, r2
 8007ea4:	4699      	mov	r9, r3
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f04f 0100 	mov.w	r1, #0
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	f04f 0300 	mov.w	r3, #0
 8007eb6:	fb02 f501 	mul.w	r5, r2, r1
 8007eba:	fb00 f403 	mul.w	r4, r0, r3
 8007ebe:	442c      	add	r4, r5
 8007ec0:	fba0 2302 	umull	r2, r3, r0, r2
 8007ec4:	18e1      	adds	r1, r4, r3
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4640      	mov	r0, r8
 8007eca:	4649      	mov	r1, r9
 8007ecc:	f7f9 f97a 	bl	80011c4 <__aeabi_uldivmod>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ed8:	e007      	b.n	8007eea <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007edc:	4a13      	ldr	r2, [pc, #76]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007ede:	fb02 f203 	mul.w	r2, r2, r3
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8007eea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007eee:	461a      	mov	r2, r3
 8007ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d108      	bne.n	8007f08 <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 8007ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef8:	085b      	lsrs	r3, r3, #1
 8007efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007efc:	e004      	b.n	8007f08 <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	4a0b      	ldr	r2, [pc, #44]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8007f02:	fb02 f303 	mul.w	r3, r2, r3
 8007f06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8007f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f0c:	e002      	b.n	8007f14 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007f0e:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007f10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3744      	adds	r7, #68	; 0x44
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f20:	0801199c 	.word	0x0801199c
 8007f24:	080119ac 	.word	0x080119ac
 8007f28:	40021000 	.word	0x40021000
 8007f2c:	007a1200 	.word	0x007a1200
 8007f30:	003d0900 	.word	0x003d0900

08007f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f34:	b480      	push	{r7}
 8007f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f38:	4b02      	ldr	r3, [pc, #8]	; (8007f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr
 8007f44:	20000148 	.word	0x20000148

08007f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f4c:	f7ff fff2 	bl	8007f34 <HAL_RCC_GetHCLKFreq>
 8007f50:	4602      	mov	r2, r0
 8007f52:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	0a1b      	lsrs	r3, r3, #8
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	4903      	ldr	r1, [pc, #12]	; (8007f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f5e:	5ccb      	ldrb	r3, [r1, r3]
 8007f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	080121b0 	.word	0x080121b0

08007f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f74:	f7ff ffde 	bl	8007f34 <HAL_RCC_GetHCLKFreq>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	0adb      	lsrs	r3, r3, #11
 8007f80:	f003 0307 	and.w	r3, r3, #7
 8007f84:	4903      	ldr	r1, [pc, #12]	; (8007f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f86:	5ccb      	ldrb	r3, [r1, r3]
 8007f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40021000 	.word	0x40021000
 8007f94:	080121b0 	.word	0x080121b0

08007f98 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	220f      	movs	r2, #15
 8007fa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007fa8:	4b11      	ldr	r3, [pc, #68]	; (8007ff0 <HAL_RCC_GetClockConfig+0x58>)
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f003 0203 	and.w	r2, r3, #3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007fb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ff0 <HAL_RCC_GetClockConfig+0x58>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <HAL_RCC_GetClockConfig+0x58>)
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007fcc:	4b08      	ldr	r3, [pc, #32]	; (8007ff0 <HAL_RCC_GetClockConfig+0x58>)
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	08db      	lsrs	r3, r3, #3
 8007fd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007fda:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0207 	and.w	r2, r3, #7
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr
 8007ff0:	40021000 	.word	0x40021000
 8007ff4:	40022000 	.word	0x40022000

08007ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008000:	4b0a      	ldr	r3, [pc, #40]	; (800802c <RCC_Delay+0x34>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a0a      	ldr	r2, [pc, #40]	; (8008030 <RCC_Delay+0x38>)
 8008006:	fba2 2303 	umull	r2, r3, r2, r3
 800800a:	0a5b      	lsrs	r3, r3, #9
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	fb02 f303 	mul.w	r3, r2, r3
 8008012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008014:	bf00      	nop
  }
  while (Delay --);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	1e5a      	subs	r2, r3, #1
 800801a:	60fa      	str	r2, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1f9      	bne.n	8008014 <RCC_Delay+0x1c>
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	bc80      	pop	{r7}
 800802a:	4770      	bx	lr
 800802c:	20000148 	.word	0x20000148
 8008030:	10624dd3 	.word	0x10624dd3

08008034 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	2300      	movs	r3, #0
 8008042:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	2b00      	cmp	r3, #0
 8008052:	d07d      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8008054:	2300      	movs	r3, #0
 8008056:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008058:	4b8b      	ldr	r3, [pc, #556]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10d      	bne.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008064:	4b88      	ldr	r3, [pc, #544]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	4a87      	ldr	r2, [pc, #540]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800806a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800806e:	61d3      	str	r3, [r2, #28]
 8008070:	4b85      	ldr	r3, [pc, #532]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800807c:	2301      	movs	r3, #1
 800807e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008080:	4b82      	ldr	r3, [pc, #520]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008088:	2b00      	cmp	r3, #0
 800808a:	d118      	bne.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800808c:	4b7f      	ldr	r3, [pc, #508]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a7e      	ldr	r2, [pc, #504]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008096:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008098:	f7fc fbec 	bl	8004874 <HAL_GetTick>
 800809c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800809e:	e008      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080a0:	f7fc fbe8 	bl	8004874 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	2b64      	cmp	r3, #100	; 0x64
 80080ac:	d901      	bls.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e0e5      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080b2:	4b76      	ldr	r3, [pc, #472]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d0f0      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80080be:	4b72      	ldr	r3, [pc, #456]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080c6:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d02e      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d027      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080dc:	4b6a      	ldr	r3, [pc, #424]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80080e6:	4b6a      	ldr	r3, [pc, #424]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80080e8:	2201      	movs	r2, #1
 80080ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80080ec:	4b68      	ldr	r3, [pc, #416]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80080f2:	4a65      	ldr	r2, [pc, #404]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d014      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008102:	f7fc fbb7 	bl	8004874 <HAL_GetTick>
 8008106:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008108:	e00a      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800810a:	f7fc fbb3 	bl	8004874 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	f241 3288 	movw	r2, #5000	; 0x1388
 8008118:	4293      	cmp	r3, r2
 800811a:	d901      	bls.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e0ae      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008120:	4b59      	ldr	r3, [pc, #356]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0ee      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800812c:	4b56      	ldr	r3, [pc, #344]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	4953      	ldr	r1, [pc, #332]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800813a:	4313      	orrs	r3, r2
 800813c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800813e:	7efb      	ldrb	r3, [r7, #27]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d105      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008144:	4b50      	ldr	r3, [pc, #320]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	4a4f      	ldr	r2, [pc, #316]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800814a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800814e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d008      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800815c:	4b4a      	ldr	r3, [pc, #296]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	4947      	ldr	r1, [pc, #284]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800816a:	4313      	orrs	r3, r2
 800816c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0304 	and.w	r3, r3, #4
 8008176:	2b00      	cmp	r3, #0
 8008178:	d008      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800817a:	4b43      	ldr	r3, [pc, #268]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	4940      	ldr	r1, [pc, #256]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008188:	4313      	orrs	r3, r2
 800818a:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0308 	and.w	r3, r3, #8
 8008194:	2b00      	cmp	r3, #0
 8008196:	d008      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8008198:	4b3b      	ldr	r3, [pc, #236]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	4938      	ldr	r1, [pc, #224]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80081aa:	4b37      	ldr	r3, [pc, #220]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d105      	bne.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80081b6:	4b34      	ldr	r3, [pc, #208]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80081c2:	2301      	movs	r3, #1
 80081c4:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d148      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80081cc:	4b2e      	ldr	r3, [pc, #184]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d138      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80081d8:	4b2b      	ldr	r3, [pc, #172]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d009      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80081e4:	4b28      	ldr	r3, [pc, #160]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d001      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e042      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80081f8:	4b23      	ldr	r3, [pc, #140]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	4920      	ldr	r1, [pc, #128]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008206:	4313      	orrs	r3, r2
 8008208:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800820a:	4b1f      	ldr	r3, [pc, #124]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	491c      	ldr	r1, [pc, #112]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008218:	4313      	orrs	r3, r2
 800821a:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 800821c:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800821e:	2201      	movs	r2, #1
 8008220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008222:	f7fc fb27 	bl	8004874 <HAL_GetTick>
 8008226:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008228:	e008      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800822a:	f7fc fb23 	bl	8004874 <HAL_GetTick>
 800822e:	4602      	mov	r2, r0
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b64      	cmp	r3, #100	; 0x64
 8008236:	d901      	bls.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e020      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800823c:	4b12      	ldr	r3, [pc, #72]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0f0      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008248:	e009      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800824a:	4b0f      	ldr	r3, [pc, #60]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800824c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	429a      	cmp	r2, r3
 8008258:	d001      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e00f      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0310 	and.w	r3, r3, #16
 8008266:	2b00      	cmp	r3, #0
 8008268:	d008      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800826a:	4b07      	ldr	r3, [pc, #28]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	4904      	ldr	r1, [pc, #16]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008278:	4313      	orrs	r3, r2
 800827a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3720      	adds	r7, #32
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	40021000 	.word	0x40021000
 800828c:	40007000 	.word	0x40007000
 8008290:	42420440 	.word	0x42420440
 8008294:	42420070 	.word	0x42420070

08008298 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008298:	b590      	push	{r4, r7, lr}
 800829a:	b093      	sub	sp, #76	; 0x4c
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80082a0:	4ba9      	ldr	r3, [pc, #676]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80082a2:	f107 0418 	add.w	r4, r7, #24
 80082a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082a8:	c407      	stmia	r4!, {r0, r1, r2}
 80082aa:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80082ac:	4ba7      	ldr	r3, [pc, #668]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80082ae:	f107 0408 	add.w	r4, r7, #8
 80082b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082bc:	2300      	movs	r3, #0
 80082be:	647b      	str	r3, [r7, #68]	; 0x44
 80082c0:	2300      	movs	r3, #0
 80082c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	637b      	str	r3, [r7, #52]	; 0x34
 80082c8:	2300      	movs	r3, #0
 80082ca:	633b      	str	r3, [r7, #48]	; 0x30
 80082cc:	2300      	movs	r3, #0
 80082ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80082d4:	2300      	movs	r3, #0
 80082d6:	643b      	str	r3, [r7, #64]	; 0x40
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3b01      	subs	r3, #1
 80082dc:	2b0f      	cmp	r3, #15
 80082de:	f200 8124 	bhi.w	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80082e2:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	080084a9 	.word	0x080084a9
 80082ec:	0800850f 	.word	0x0800850f
 80082f0:	0800852b 	.word	0x0800852b
 80082f4:	08008407 	.word	0x08008407
 80082f8:	0800852b 	.word	0x0800852b
 80082fc:	0800852b 	.word	0x0800852b
 8008300:	0800852b 	.word	0x0800852b
 8008304:	08008459 	.word	0x08008459
 8008308:	0800852b 	.word	0x0800852b
 800830c:	0800852b 	.word	0x0800852b
 8008310:	0800852b 	.word	0x0800852b
 8008314:	0800852b 	.word	0x0800852b
 8008318:	0800852b 	.word	0x0800852b
 800831c:	0800852b 	.word	0x0800852b
 8008320:	0800852b 	.word	0x0800852b
 8008324:	08008329 	.word	0x08008329
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8008328:	4b89      	ldr	r3, [pc, #548]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800832e:	4b88      	ldr	r3, [pc, #544]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 80f9 	beq.w	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	0c9b      	lsrs	r3, r3, #18
 8008340:	f003 030f 	and.w	r3, r3, #15
 8008344:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008348:	4413      	add	r3, r2
 800834a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800834e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d03e      	beq.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800835a:	4b7d      	ldr	r3, [pc, #500]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800835c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008366:	4413      	add	r3, r2
 8008368:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800836c:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800836e:	4b78      	ldr	r3, [pc, #480]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d01c      	beq.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800837a:	4b75      	ldr	r3, [pc, #468]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837e:	091b      	lsrs	r3, r3, #4
 8008380:	f003 030f 	and.w	r3, r3, #15
 8008384:	3301      	adds	r3, #1
 8008386:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8008388:	4b71      	ldr	r3, [pc, #452]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	0a1b      	lsrs	r3, r3, #8
 800838e:	f003 030f 	and.w	r3, r3, #15
 8008392:	3302      	adds	r3, #2
 8008394:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8008396:	4a6f      	ldr	r2, [pc, #444]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839a:	fbb2 f3f3 	udiv	r3, r2, r3
 800839e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083a0:	fb02 f203 	mul.w	r2, r2, r3
 80083a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	fb02 f303 	mul.w	r3, r2, r3
 80083b0:	647b      	str	r3, [r7, #68]	; 0x44
 80083b2:	e007      	b.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80083b4:	4a67      	ldr	r2, [pc, #412]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80083b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	fb02 f303 	mul.w	r3, r2, r3
 80083c2:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80083c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80083c8:	461a      	mov	r2, r3
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d108      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 80083d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083d2:	085b      	lsrs	r3, r3, #1
 80083d4:	647b      	str	r3, [r7, #68]	; 0x44
 80083d6:	e004      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	4a5f      	ldr	r2, [pc, #380]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80083dc:	fb02 f303 	mul.w	r3, r2, r3
 80083e0:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 80083e2:	4b5b      	ldr	r3, [pc, #364]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083ee:	d102      	bne.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 80083f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083f2:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80083f4:	e09b      	b.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 80083f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	4a58      	ldr	r2, [pc, #352]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80083fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008400:	085b      	lsrs	r3, r3, #1
 8008402:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008404:	e093      	b.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8008406:	4b52      	ldr	r3, [pc, #328]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d103      	bne.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8008412:	f7ff fcab 	bl	8007d6c <HAL_RCC_GetSysClockFreq>
 8008416:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008418:	e08b      	b.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 800841a:	4b4d      	ldr	r3, [pc, #308]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 8085 	beq.w	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008428:	4b49      	ldr	r3, [pc, #292]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800842a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842c:	091b      	lsrs	r3, r3, #4
 800842e:	f003 030f 	and.w	r3, r3, #15
 8008432:	3301      	adds	r3, #1
 8008434:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8008436:	4b46      	ldr	r3, [pc, #280]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843a:	0b1b      	lsrs	r3, r3, #12
 800843c:	f003 030f 	and.w	r3, r3, #15
 8008440:	3302      	adds	r3, #2
 8008442:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8008444:	4a43      	ldr	r2, [pc, #268]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008448:	fbb2 f3f3 	udiv	r3, r2, r3
 800844c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800844e:	fb02 f303 	mul.w	r3, r2, r3
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008456:	e06c      	b.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8008458:	4b3d      	ldr	r3, [pc, #244]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800845a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d103      	bne.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8008464:	f7ff fc82 	bl	8007d6c <HAL_RCC_GetSysClockFreq>
 8008468:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800846a:	e064      	b.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 800846c:	4b38      	ldr	r3, [pc, #224]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d05e      	beq.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008478:	4b35      	ldr	r3, [pc, #212]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	091b      	lsrs	r3, r3, #4
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	3301      	adds	r3, #1
 8008484:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8008486:	4b32      	ldr	r3, [pc, #200]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848a:	0b1b      	lsrs	r3, r3, #12
 800848c:	f003 030f 	and.w	r3, r3, #15
 8008490:	3302      	adds	r3, #2
 8008492:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8008494:	4a2f      	ldr	r2, [pc, #188]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008498:	fbb2 f3f3 	udiv	r3, r2, r3
 800849c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800849e:	fb02 f303 	mul.w	r3, r2, r3
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80084a6:	e046      	b.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80084a8:	4b29      	ldr	r3, [pc, #164]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80084ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084b8:	d108      	bne.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d003      	beq.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 80084c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084c8:	643b      	str	r3, [r7, #64]	; 0x40
 80084ca:	e01f      	b.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084d6:	d109      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80084d8:	4b1d      	ldr	r3, [pc, #116]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80084da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 80084e4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80084e8:	643b      	str	r3, [r7, #64]	; 0x40
 80084ea:	e00f      	b.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084f6:	d120      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 80084f8:	4b15      	ldr	r3, [pc, #84]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d01a      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 8008504:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008508:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800850a:	e016      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800850c:	e015      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800850e:	f7ff fd2f 	bl	8007f70 <HAL_RCC_GetPCLK2Freq>
 8008512:	4602      	mov	r2, r0
 8008514:	4b0e      	ldr	r3, [pc, #56]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	0b9b      	lsrs	r3, r3, #14
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	3301      	adds	r3, #1
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	fbb2 f3f3 	udiv	r3, r2, r3
 8008526:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008528:	e008      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 800852a:	bf00      	nop
 800852c:	e006      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 800852e:	bf00      	nop
 8008530:	e004      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8008532:	bf00      	nop
 8008534:	e002      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8008536:	bf00      	nop
 8008538:	e000      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 800853a:	bf00      	nop
    }
  }
  return (frequency);
 800853c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800853e:	4618      	mov	r0, r3
 8008540:	374c      	adds	r7, #76	; 0x4c
 8008542:	46bd      	mov	sp, r7
 8008544:	bd90      	pop	{r4, r7, pc}
 8008546:	bf00      	nop
 8008548:	080119bc 	.word	0x080119bc
 800854c:	080119cc 	.word	0x080119cc
 8008550:	40021000 	.word	0x40021000
 8008554:	007a1200 	.word	0x007a1200
 8008558:	003d0900 	.word	0x003d0900
 800855c:	aaaaaaab 	.word	0xaaaaaaab

08008560 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e084      	b.n	8008680 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	7c5b      	ldrb	r3, [r3, #17]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d105      	bne.n	800858c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7fb faf6 	bl	8003b78 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f9c8 	bl	8008928 <HAL_RTC_WaitForSynchro>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d004      	beq.n	80085a8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2204      	movs	r2, #4
 80085a2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e06b      	b.n	8008680 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fa81 	bl	8008ab0 <RTC_EnterInitMode>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d004      	beq.n	80085be <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2204      	movs	r2, #4
 80085b8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e060      	b.n	8008680 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0207 	bic.w	r2, r2, #7
 80085cc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d005      	beq.n	80085e2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80085d6:	4b2c      	ldr	r3, [pc, #176]	; (8008688 <HAL_RTC_Init+0x128>)
 80085d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085da:	4a2b      	ldr	r2, [pc, #172]	; (8008688 <HAL_RTC_Init+0x128>)
 80085dc:	f023 0301 	bic.w	r3, r3, #1
 80085e0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80085e2:	4b29      	ldr	r3, [pc, #164]	; (8008688 <HAL_RTC_Init+0x128>)
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	4926      	ldr	r1, [pc, #152]	; (8008688 <HAL_RTC_Init+0x128>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fc:	d003      	beq.n	8008606 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	e00e      	b.n	8008624 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8008606:	2001      	movs	r0, #1
 8008608:	f7ff fe46 	bl	8008298 <HAL_RCCEx_GetPeriphCLKFreq>
 800860c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d104      	bne.n	800861e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2204      	movs	r2, #4
 8008618:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e030      	b.n	8008680 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3b01      	subs	r3, #1
 8008622:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f023 010f 	bic.w	r1, r3, #15
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	0c1a      	lsrs	r2, r3, #16
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	0c1b      	lsrs	r3, r3, #16
 8008642:	041b      	lsls	r3, r3, #16
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	b291      	uxth	r1, r2
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	6812      	ldr	r2, [r2, #0]
 800864c:	430b      	orrs	r3, r1
 800864e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fa55 	bl	8008b00 <RTC_ExitInitMode>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2204      	movs	r2, #4
 8008660:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e00c      	b.n	8008680 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800867e:	2300      	movs	r3, #0
  }
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	40006c00 	.word	0x40006c00

0800868c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800868c:	b590      	push	{r4, r7, lr}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8008698:	2300      	movs	r3, #0
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	2300      	movs	r3, #0
 800869e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <HAL_RTC_SetTime+0x20>
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e080      	b.n	80087b2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	7c1b      	ldrb	r3, [r3, #16]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <HAL_RTC_SetTime+0x30>
 80086b8:	2302      	movs	r3, #2
 80086ba:	e07a      	b.n	80087b2 <HAL_RTC_SetTime+0x126>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2201      	movs	r2, #1
 80086c0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2202      	movs	r2, #2
 80086c6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d113      	bne.n	80086f6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80086d8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	785b      	ldrb	r3, [r3, #1]
 80086e0:	4619      	mov	r1, r3
 80086e2:	460b      	mov	r3, r1
 80086e4:	011b      	lsls	r3, r3, #4
 80086e6:	1a5b      	subs	r3, r3, r1
 80086e8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80086ea:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80086f0:	4413      	add	r3, r2
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	e01e      	b.n	8008734 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fa28 	bl	8008b50 <RTC_Bcd2ToByte>
 8008700:	4603      	mov	r3, r0
 8008702:	461a      	mov	r2, r3
 8008704:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008708:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	785b      	ldrb	r3, [r3, #1]
 8008710:	4618      	mov	r0, r3
 8008712:	f000 fa1d 	bl	8008b50 <RTC_Bcd2ToByte>
 8008716:	4603      	mov	r3, r0
 8008718:	461a      	mov	r2, r3
 800871a:	4613      	mov	r3, r2
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	1a9b      	subs	r3, r3, r2
 8008720:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008722:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	789b      	ldrb	r3, [r3, #2]
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fa11 	bl	8008b50 <RTC_Bcd2ToByte>
 800872e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008730:	4423      	add	r3, r4
 8008732:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008734:	6979      	ldr	r1, [r7, #20]
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 f953 	bl	80089e2 <RTC_WriteTimeCounter>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d007      	beq.n	8008752 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2204      	movs	r2, #4
 8008746:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e02f      	b.n	80087b2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 0205 	bic.w	r2, r2, #5
 8008760:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f000 f964 	bl	8008a30 <RTC_ReadAlarmCounter>
 8008768:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008770:	d018      	beq.n	80087a4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	429a      	cmp	r2, r3
 8008778:	d214      	bcs.n	80087a4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008780:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008784:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008786:	6939      	ldr	r1, [r7, #16]
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 f96a 	bl	8008a62 <RTC_WriteAlarmCounter>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d007      	beq.n	80087a4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2204      	movs	r2, #4
 8008798:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e006      	b.n	80087b2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80087b0:	2300      	movs	r3, #0
  }
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	371c      	adds	r7, #28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd90      	pop	{r4, r7, pc}
	...

080087bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	2300      	movs	r3, #0
 80087ce:	61bb      	str	r3, [r7, #24]
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <HAL_RTC_SetDate+0x24>
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e097      	b.n	8008914 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	7c1b      	ldrb	r3, [r3, #16]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d101      	bne.n	80087f0 <HAL_RTC_SetDate+0x34>
 80087ec:	2302      	movs	r3, #2
 80087ee:	e091      	b.n	8008914 <HAL_RTC_SetDate+0x158>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2201      	movs	r2, #1
 80087f4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2202      	movs	r2, #2
 80087fa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10c      	bne.n	800881c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	78da      	ldrb	r2, [r3, #3]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	785a      	ldrb	r2, [r3, #1]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	789a      	ldrb	r2, [r3, #2]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	739a      	strb	r2, [r3, #14]
 800881a:	e01a      	b.n	8008852 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	78db      	ldrb	r3, [r3, #3]
 8008820:	4618      	mov	r0, r3
 8008822:	f000 f995 	bl	8008b50 <RTC_Bcd2ToByte>
 8008826:	4603      	mov	r3, r0
 8008828:	461a      	mov	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	785b      	ldrb	r3, [r3, #1]
 8008832:	4618      	mov	r0, r3
 8008834:	f000 f98c 	bl	8008b50 <RTC_Bcd2ToByte>
 8008838:	4603      	mov	r3, r0
 800883a:	461a      	mov	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	789b      	ldrb	r3, [r3, #2]
 8008844:	4618      	mov	r0, r3
 8008846:	f000 f983 	bl	8008b50 <RTC_Bcd2ToByte>
 800884a:	4603      	mov	r3, r0
 800884c:	461a      	mov	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	7bdb      	ldrb	r3, [r3, #15]
 8008856:	4618      	mov	r0, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	7b59      	ldrb	r1, [r3, #13]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	7b9b      	ldrb	r3, [r3, #14]
 8008860:	461a      	mov	r2, r3
 8008862:	f000 f993 	bl	8008b8c <RTC_WeekDayNum>
 8008866:	4603      	mov	r3, r0
 8008868:	461a      	mov	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	7b1a      	ldrb	r2, [r3, #12]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 f883 	bl	8008982 <RTC_ReadTimeCounter>
 800887c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	4a26      	ldr	r2, [pc, #152]	; (800891c <HAL_RTC_SetDate+0x160>)
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	0adb      	lsrs	r3, r3, #11
 8008888:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b18      	cmp	r3, #24
 800888e:	d93a      	bls.n	8008906 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	4a23      	ldr	r2, [pc, #140]	; (8008920 <HAL_RTC_SetDate+0x164>)
 8008894:	fba2 2303 	umull	r2, r3, r2, r3
 8008898:	091b      	lsrs	r3, r3, #4
 800889a:	4a22      	ldr	r2, [pc, #136]	; (8008924 <HAL_RTC_SetDate+0x168>)
 800889c:	fb02 f303 	mul.w	r3, r2, r3
 80088a0:	69fa      	ldr	r2, [r7, #28]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80088a6:	69f9      	ldr	r1, [r7, #28]
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f89a 	bl	80089e2 <RTC_WriteTimeCounter>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d007      	beq.n	80088c4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2204      	movs	r2, #4
 80088b8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e027      	b.n	8008914 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 f8b3 	bl	8008a30 <RTC_ReadAlarmCounter>
 80088ca:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d2:	d018      	beq.n	8008906 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80088d4:	69ba      	ldr	r2, [r7, #24]
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d214      	bcs.n	8008906 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80088e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80088e6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80088e8:	69b9      	ldr	r1, [r7, #24]
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 f8b9 	bl	8008a62 <RTC_WriteAlarmCounter>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d007      	beq.n	8008906 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2204      	movs	r2, #4
 80088fa:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e006      	b.n	8008914 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3720      	adds	r7, #32
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	91a2b3c5 	.word	0x91a2b3c5
 8008920:	aaaaaaab 	.word	0xaaaaaaab
 8008924:	00015180 	.word	0x00015180

08008928 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e01d      	b.n	800897a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0208 	bic.w	r2, r2, #8
 800894c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800894e:	f7fb ff91 	bl	8004874 <HAL_GetTick>
 8008952:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008954:	e009      	b.n	800896a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008956:	f7fb ff8d 	bl	8004874 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008964:	d901      	bls.n	800896a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e007      	b.n	800897a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f003 0308 	and.w	r3, r3, #8
 8008974:	2b00      	cmp	r3, #0
 8008976:	d0ee      	beq.n	8008956 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8008982:	b480      	push	{r7}
 8008984:	b087      	sub	sp, #28
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	827b      	strh	r3, [r7, #18]
 800898e:	2300      	movs	r3, #0
 8008990:	823b      	strh	r3, [r7, #16]
 8008992:	2300      	movs	r3, #0
 8008994:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80089b2:	8a7a      	ldrh	r2, [r7, #18]
 80089b4:	8a3b      	ldrh	r3, [r7, #16]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d008      	beq.n	80089cc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80089ba:	8a3b      	ldrh	r3, [r7, #16]
 80089bc:	041a      	lsls	r2, r3, #16
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69db      	ldr	r3, [r3, #28]
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	4313      	orrs	r3, r2
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	e004      	b.n	80089d6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80089cc:	8a7b      	ldrh	r3, [r7, #18]
 80089ce:	041a      	lsls	r2, r3, #16
 80089d0:	89fb      	ldrh	r3, [r7, #14]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80089d6:	697b      	ldr	r3, [r7, #20]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	371c      	adds	r7, #28
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr

080089e2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f85d 	bl	8008ab0 <RTC_EnterInitMode>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	73fb      	strb	r3, [r7, #15]
 8008a00:	e011      	b.n	8008a26 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	0c12      	lsrs	r2, r2, #16
 8008a0a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	b292      	uxth	r2, r2
 8008a14:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f872 	bl	8008b00 <RTC_ExitInitMode>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	81fb      	strh	r3, [r7, #14]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8008a50:	89fb      	ldrh	r3, [r7, #14]
 8008a52:	041a      	lsls	r2, r3, #16
 8008a54:	89bb      	ldrh	r3, [r7, #12]
 8008a56:	4313      	orrs	r3, r2
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bc80      	pop	{r7}
 8008a60:	4770      	bx	lr

08008a62 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f81d 	bl	8008ab0 <RTC_EnterInitMode>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]
 8008a80:	e011      	b.n	8008aa6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	0c12      	lsrs	r2, r2, #16
 8008a8a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	b292      	uxth	r2, r2
 8008a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f832 	bl	8008b00 <RTC_ExitInitMode>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8008abc:	f7fb feda 	bl	8004874 <HAL_GetTick>
 8008ac0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008ac2:	e009      	b.n	8008ad8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008ac4:	f7fb fed6 	bl	8004874 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ad2:	d901      	bls.n	8008ad8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e00f      	b.n	8008af8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f003 0320 	and.w	r3, r3, #32
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0ee      	beq.n	8008ac4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f042 0210 	orr.w	r2, r2, #16
 8008af4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0210 	bic.w	r2, r2, #16
 8008b1a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008b1c:	f7fb feaa 	bl	8004874 <HAL_GetTick>
 8008b20:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008b22:	e009      	b.n	8008b38 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008b24:	f7fb fea6 	bl	8004874 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b32:	d901      	bls.n	8008b38 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e007      	b.n	8008b48 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f003 0320 	and.w	r3, r3, #32
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0ee      	beq.n	8008b24 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8008b5e:	79fb      	ldrb	r3, [r7, #7]
 8008b60:	091b      	lsrs	r3, r3, #4
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	461a      	mov	r2, r3
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008b70:	79fb      	ldrb	r3, [r7, #7]
 8008b72:	f003 030f 	and.w	r3, r3, #15
 8008b76:	b2da      	uxtb	r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	4413      	add	r3, r2
 8008b7e:	b2db      	uxtb	r3, r3
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bc80      	pop	{r7}
 8008b88:	4770      	bx	lr
	...

08008b8c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60bb      	str	r3, [r7, #8]
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008baa:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8008bac:	78fb      	ldrb	r3, [r7, #3]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d82d      	bhi.n	8008c0e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8008bb2:	78fa      	ldrb	r2, [r7, #3]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	4413      	add	r3, r2
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	1a9b      	subs	r3, r3, r2
 8008bbe:	4a2c      	ldr	r2, [pc, #176]	; (8008c70 <RTC_WeekDayNum+0xe4>)
 8008bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc4:	085a      	lsrs	r2, r3, #1
 8008bc6:	78bb      	ldrb	r3, [r7, #2]
 8008bc8:	441a      	add	r2, r3
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	441a      	add	r2, r3
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	089b      	lsrs	r3, r3, #2
 8008bd4:	441a      	add	r2, r3
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	4926      	ldr	r1, [pc, #152]	; (8008c74 <RTC_WeekDayNum+0xe8>)
 8008bdc:	fba1 1303 	umull	r1, r3, r1, r3
 8008be0:	095b      	lsrs	r3, r3, #5
 8008be2:	1ad2      	subs	r2, r2, r3
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	3b01      	subs	r3, #1
 8008be8:	4922      	ldr	r1, [pc, #136]	; (8008c74 <RTC_WeekDayNum+0xe8>)
 8008bea:	fba1 1303 	umull	r1, r3, r1, r3
 8008bee:	09db      	lsrs	r3, r3, #7
 8008bf0:	4413      	add	r3, r2
 8008bf2:	1d1a      	adds	r2, r3, #4
 8008bf4:	4b20      	ldr	r3, [pc, #128]	; (8008c78 <RTC_WeekDayNum+0xec>)
 8008bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8008bfa:	1ad1      	subs	r1, r2, r3
 8008bfc:	0849      	lsrs	r1, r1, #1
 8008bfe:	440b      	add	r3, r1
 8008c00:	0899      	lsrs	r1, r3, #2
 8008c02:	460b      	mov	r3, r1
 8008c04:	00db      	lsls	r3, r3, #3
 8008c06:	1a5b      	subs	r3, r3, r1
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	e029      	b.n	8008c62 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8008c0e:	78fa      	ldrb	r2, [r7, #3]
 8008c10:	4613      	mov	r3, r2
 8008c12:	005b      	lsls	r3, r3, #1
 8008c14:	4413      	add	r3, r2
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	1a9b      	subs	r3, r3, r2
 8008c1a:	4a15      	ldr	r2, [pc, #84]	; (8008c70 <RTC_WeekDayNum+0xe4>)
 8008c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c20:	085a      	lsrs	r2, r3, #1
 8008c22:	78bb      	ldrb	r3, [r7, #2]
 8008c24:	441a      	add	r2, r3
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	441a      	add	r2, r3
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	089b      	lsrs	r3, r3, #2
 8008c2e:	441a      	add	r2, r3
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4910      	ldr	r1, [pc, #64]	; (8008c74 <RTC_WeekDayNum+0xe8>)
 8008c34:	fba1 1303 	umull	r1, r3, r1, r3
 8008c38:	095b      	lsrs	r3, r3, #5
 8008c3a:	1ad2      	subs	r2, r2, r3
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	490d      	ldr	r1, [pc, #52]	; (8008c74 <RTC_WeekDayNum+0xe8>)
 8008c40:	fba1 1303 	umull	r1, r3, r1, r3
 8008c44:	09db      	lsrs	r3, r3, #7
 8008c46:	4413      	add	r3, r2
 8008c48:	1c9a      	adds	r2, r3, #2
 8008c4a:	4b0b      	ldr	r3, [pc, #44]	; (8008c78 <RTC_WeekDayNum+0xec>)
 8008c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c50:	1ad1      	subs	r1, r2, r3
 8008c52:	0849      	lsrs	r1, r1, #1
 8008c54:	440b      	add	r3, r1
 8008c56:	0899      	lsrs	r1, r3, #2
 8008c58:	460b      	mov	r3, r1
 8008c5a:	00db      	lsls	r3, r3, #3
 8008c5c:	1a5b      	subs	r3, r3, r1
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	b2db      	uxtb	r3, r3
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bc80      	pop	{r7}
 8008c6e:	4770      	bx	lr
 8008c70:	38e38e39 	.word	0x38e38e39
 8008c74:	51eb851f 	.word	0x51eb851f
 8008c78:	24924925 	.word	0x24924925

08008c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e041      	b.n	8008d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d106      	bne.n	8008ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f839 	bl	8008d1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f000 f9bc 	bl	8009038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b083      	sub	sp, #12
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008d22:	bf00      	nop
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bc80      	pop	{r7}
 8008d2a:	4770      	bx	lr

08008d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d001      	beq.n	8008d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e03f      	b.n	8008dc4 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f042 0201 	orr.w	r2, r2, #1
 8008d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a1b      	ldr	r2, [pc, #108]	; (8008dd0 <HAL_TIM_Base_Start_IT+0xa4>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d013      	beq.n	8008d8e <HAL_TIM_Base_Start_IT+0x62>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d6e:	d00e      	beq.n	8008d8e <HAL_TIM_Base_Start_IT+0x62>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a17      	ldr	r2, [pc, #92]	; (8008dd4 <HAL_TIM_Base_Start_IT+0xa8>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d009      	beq.n	8008d8e <HAL_TIM_Base_Start_IT+0x62>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a16      	ldr	r2, [pc, #88]	; (8008dd8 <HAL_TIM_Base_Start_IT+0xac>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d004      	beq.n	8008d8e <HAL_TIM_Base_Start_IT+0x62>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a14      	ldr	r2, [pc, #80]	; (8008ddc <HAL_TIM_Base_Start_IT+0xb0>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d111      	bne.n	8008db2 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f003 0307 	and.w	r3, r3, #7
 8008d98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b06      	cmp	r3, #6
 8008d9e:	d010      	beq.n	8008dc2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0201 	orr.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db0:	e007      	b.n	8008dc2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f042 0201 	orr.w	r2, r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bc80      	pop	{r7}
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	40012c00 	.word	0x40012c00
 8008dd4:	40000400 	.word	0x40000400
 8008dd8:	40000800 	.word	0x40000800
 8008ddc:	40000c00 	.word	0x40000c00

08008de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	f003 0302 	and.w	r3, r3, #2
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d122      	bne.n	8008e3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f003 0302 	and.w	r3, r3, #2
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d11b      	bne.n	8008e3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f06f 0202 	mvn.w	r2, #2
 8008e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	f003 0303 	and.w	r3, r3, #3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d003      	beq.n	8008e2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f8ed 	bl	8009002 <HAL_TIM_IC_CaptureCallback>
 8008e28:	e005      	b.n	8008e36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f8e0 	bl	8008ff0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f8ef 	bl	8009014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	f003 0304 	and.w	r3, r3, #4
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	d122      	bne.n	8008e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	f003 0304 	and.w	r3, r3, #4
 8008e54:	2b04      	cmp	r3, #4
 8008e56:	d11b      	bne.n	8008e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f06f 0204 	mvn.w	r2, #4
 8008e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2202      	movs	r2, #2
 8008e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f8c3 	bl	8009002 <HAL_TIM_IC_CaptureCallback>
 8008e7c:	e005      	b.n	8008e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f8b6 	bl	8008ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f8c5 	bl	8009014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	f003 0308 	and.w	r3, r3, #8
 8008e9a:	2b08      	cmp	r3, #8
 8008e9c:	d122      	bne.n	8008ee4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	f003 0308 	and.w	r3, r3, #8
 8008ea8:	2b08      	cmp	r3, #8
 8008eaa:	d11b      	bne.n	8008ee4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f06f 0208 	mvn.w	r2, #8
 8008eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2204      	movs	r2, #4
 8008eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	f003 0303 	and.w	r3, r3, #3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f899 	bl	8009002 <HAL_TIM_IC_CaptureCallback>
 8008ed0:	e005      	b.n	8008ede <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f88c 	bl	8008ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f89b 	bl	8009014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	f003 0310 	and.w	r3, r3, #16
 8008eee:	2b10      	cmp	r3, #16
 8008ef0:	d122      	bne.n	8008f38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f003 0310 	and.w	r3, r3, #16
 8008efc:	2b10      	cmp	r3, #16
 8008efe:	d11b      	bne.n	8008f38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f06f 0210 	mvn.w	r2, #16
 8008f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2208      	movs	r2, #8
 8008f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f86f 	bl	8009002 <HAL_TIM_IC_CaptureCallback>
 8008f24:	e005      	b.n	8008f32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f862 	bl	8008ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f871 	bl	8009014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d10e      	bne.n	8008f64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d107      	bne.n	8008f64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f06f 0201 	mvn.w	r2, #1
 8008f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7fa fd6c 	bl	8003a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f6e:	2b80      	cmp	r3, #128	; 0x80
 8008f70:	d10e      	bne.n	8008f90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7c:	2b80      	cmp	r3, #128	; 0x80
 8008f7e:	d107      	bne.n	8008f90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f8c9 	bl	8009122 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9a:	2b40      	cmp	r3, #64	; 0x40
 8008f9c:	d10e      	bne.n	8008fbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa8:	2b40      	cmp	r3, #64	; 0x40
 8008faa:	d107      	bne.n	8008fbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f835 	bl	8009026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	d10e      	bne.n	8008fe8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f003 0320 	and.w	r3, r3, #32
 8008fd4:	2b20      	cmp	r3, #32
 8008fd6:	d107      	bne.n	8008fe8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f06f 0220 	mvn.w	r2, #32
 8008fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f894 	bl	8009110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fe8:	bf00      	nop
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr

08009002 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800900a:	bf00      	nop
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	bc80      	pop	{r7}
 8009012:	4770      	bx	lr

08009014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	bc80      	pop	{r7}
 8009024:	4770      	bx	lr

08009026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009026:	b480      	push	{r7}
 8009028:	b083      	sub	sp, #12
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800902e:	bf00      	nop
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr

08009038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a2d      	ldr	r2, [pc, #180]	; (8009100 <TIM_Base_SetConfig+0xc8>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d00f      	beq.n	8009070 <TIM_Base_SetConfig+0x38>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009056:	d00b      	beq.n	8009070 <TIM_Base_SetConfig+0x38>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a2a      	ldr	r2, [pc, #168]	; (8009104 <TIM_Base_SetConfig+0xcc>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d007      	beq.n	8009070 <TIM_Base_SetConfig+0x38>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a29      	ldr	r2, [pc, #164]	; (8009108 <TIM_Base_SetConfig+0xd0>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d003      	beq.n	8009070 <TIM_Base_SetConfig+0x38>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a28      	ldr	r2, [pc, #160]	; (800910c <TIM_Base_SetConfig+0xd4>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d108      	bne.n	8009082 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a1e      	ldr	r2, [pc, #120]	; (8009100 <TIM_Base_SetConfig+0xc8>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00f      	beq.n	80090aa <TIM_Base_SetConfig+0x72>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009090:	d00b      	beq.n	80090aa <TIM_Base_SetConfig+0x72>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a1b      	ldr	r2, [pc, #108]	; (8009104 <TIM_Base_SetConfig+0xcc>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d007      	beq.n	80090aa <TIM_Base_SetConfig+0x72>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a1a      	ldr	r2, [pc, #104]	; (8009108 <TIM_Base_SetConfig+0xd0>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d003      	beq.n	80090aa <TIM_Base_SetConfig+0x72>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a19      	ldr	r2, [pc, #100]	; (800910c <TIM_Base_SetConfig+0xd4>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d108      	bne.n	80090bc <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	689a      	ldr	r2, [r3, #8]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a07      	ldr	r2, [pc, #28]	; (8009100 <TIM_Base_SetConfig+0xc8>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d103      	bne.n	80090f0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	691a      	ldr	r2, [r3, #16]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	615a      	str	r2, [r3, #20]
}
 80090f6:	bf00      	nop
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bc80      	pop	{r7}
 80090fe:	4770      	bx	lr
 8009100:	40012c00 	.word	0x40012c00
 8009104:	40000400 	.word	0x40000400
 8009108:	40000800 	.word	0x40000800
 800910c:	40000c00 	.word	0x40000c00

08009110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	bc80      	pop	{r7}
 8009120:	4770      	bx	lr

08009122 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009122:	b480      	push	{r7}
 8009124:	b083      	sub	sp, #12
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800912a:	bf00      	nop
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	bc80      	pop	{r7}
 8009132:	4770      	bx	lr

08009134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e04a      	b.n	80091dc <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d111      	bne.n	8009176 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fc62 	bl	8009a24 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009164:	2b00      	cmp	r3, #0
 8009166:	d102      	bne.n	800916e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a1e      	ldr	r2, [pc, #120]	; (80091e4 <HAL_UART_Init+0xb0>)
 800916c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2224      	movs	r2, #36	; 0x24
 800917a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800918c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 ff84 	bl	800a09c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	691a      	ldr	r2, [r3, #16]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	695a      	ldr	r2, [r3, #20]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2220      	movs	r2, #32
 80091ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	08003bc1 	.word	0x08003bc1

080091e8 <HAL_UART_RegisterCallback>:
  *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID, pUART_CallbackTypeDef pCallback)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	460b      	mov	r3, r1
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d107      	bne.n	8009210 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009204:	f043 0220 	orr.w	r2, r3, #32
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e08c      	b.n	800932a <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_UART_RegisterCallback+0x36>
 800921a:	2302      	movs	r3, #2
 800921c:	e085      	b.n	800932a <HAL_UART_RegisterCallback+0x142>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b20      	cmp	r3, #32
 8009230:	d151      	bne.n	80092d6 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8009232:	7afb      	ldrb	r3, [r7, #11]
 8009234:	2b0c      	cmp	r3, #12
 8009236:	d845      	bhi.n	80092c4 <HAL_UART_RegisterCallback+0xdc>
 8009238:	a201      	add	r2, pc, #4	; (adr r2, 8009240 <HAL_UART_RegisterCallback+0x58>)
 800923a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923e:	bf00      	nop
 8009240:	08009275 	.word	0x08009275
 8009244:	0800927d 	.word	0x0800927d
 8009248:	08009285 	.word	0x08009285
 800924c:	0800928d 	.word	0x0800928d
 8009250:	08009295 	.word	0x08009295
 8009254:	0800929d 	.word	0x0800929d
 8009258:	080092a5 	.word	0x080092a5
 800925c:	080092ad 	.word	0x080092ad
 8009260:	080092c5 	.word	0x080092c5
 8009264:	080092c5 	.word	0x080092c5
 8009268:	080092c5 	.word	0x080092c5
 800926c:	080092b5 	.word	0x080092b5
 8009270:	080092bd 	.word	0x080092bd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800927a:	e051      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009282:	e04d      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800928a:	e049      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009292:	e045      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800929a:	e041      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80092a2:	e03d      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80092aa:	e039      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80092b2:	e035      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80092ba:	e031      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80092c2:	e02d      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c8:	f043 0220 	orr.w	r2, r3, #32
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	75fb      	strb	r3, [r7, #23]
        break;
 80092d4:	e024      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d116      	bne.n	8009310 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80092e2:	7afb      	ldrb	r3, [r7, #11]
 80092e4:	2b0b      	cmp	r3, #11
 80092e6:	d002      	beq.n	80092ee <HAL_UART_RegisterCallback+0x106>
 80092e8:	2b0c      	cmp	r3, #12
 80092ea:	d004      	beq.n	80092f6 <HAL_UART_RegisterCallback+0x10e>
 80092ec:	e007      	b.n	80092fe <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80092f4:	e014      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80092fc:	e010      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009302:	f043 0220 	orr.w	r2, r3, #32
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	75fb      	strb	r3, [r7, #23]
        break;
 800930e:	e007      	b.n	8009320 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009314:	f043 0220 	orr.w	r2, r3, #32
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009328:	7dfb      	ldrb	r3, [r7, #23]
}
 800932a:	4618      	mov	r0, r3
 800932c:	371c      	adds	r7, #28
 800932e:	46bd      	mov	sp, r7
 8009330:	bc80      	pop	{r7}
 8009332:	4770      	bx	lr

08009334 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b08a      	sub	sp, #40	; 0x28
 8009338:	af02      	add	r7, sp, #8
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	4613      	mov	r3, r2
 8009342:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800934e:	b2db      	uxtb	r3, r3
 8009350:	2b20      	cmp	r3, #32
 8009352:	d17c      	bne.n	800944e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <HAL_UART_Transmit+0x2c>
 800935a:	88fb      	ldrh	r3, [r7, #6]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e075      	b.n	8009450 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800936a:	2b01      	cmp	r3, #1
 800936c:	d101      	bne.n	8009372 <HAL_UART_Transmit+0x3e>
 800936e:	2302      	movs	r3, #2
 8009370:	e06e      	b.n	8009450 <HAL_UART_Transmit+0x11c>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2221      	movs	r2, #33	; 0x21
 8009384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009388:	f7fb fa74 	bl	8004874 <HAL_GetTick>
 800938c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	88fa      	ldrh	r2, [r7, #6]
 8009392:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	88fa      	ldrh	r2, [r7, #6]
 8009398:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a2:	d108      	bne.n	80093b6 <HAL_UART_Transmit+0x82>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d104      	bne.n	80093b6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	61bb      	str	r3, [r7, #24]
 80093b4:	e003      	b.n	80093be <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80093c6:	e02a      	b.n	800941e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	2200      	movs	r2, #0
 80093d0:	2180      	movs	r1, #128	; 0x80
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 fc11 	bl	8009bfa <UART_WaitOnFlagUntilTimeout>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e036      	b.n	8009450 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10b      	bne.n	8009400 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	461a      	mov	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	3302      	adds	r3, #2
 80093fc:	61bb      	str	r3, [r7, #24]
 80093fe:	e007      	b.n	8009410 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	781a      	ldrb	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	3301      	adds	r3, #1
 800940e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009414:	b29b      	uxth	r3, r3
 8009416:	3b01      	subs	r3, #1
 8009418:	b29a      	uxth	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009422:	b29b      	uxth	r3, r3
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1cf      	bne.n	80093c8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	2200      	movs	r2, #0
 8009430:	2140      	movs	r1, #64	; 0x40
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fbe1 	bl	8009bfa <UART_WaitOnFlagUntilTimeout>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e006      	b.n	8009450 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2220      	movs	r2, #32
 8009446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	e000      	b.n	8009450 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800944e:	2302      	movs	r3, #2
  }
}
 8009450:	4618      	mov	r0, r3
 8009452:	3720      	adds	r7, #32
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	4613      	mov	r3, r2
 8009464:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b20      	cmp	r3, #32
 8009470:	d130      	bne.n	80094d4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <HAL_UART_Transmit_IT+0x26>
 8009478:	88fb      	ldrh	r3, [r7, #6]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e029      	b.n	80094d6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009488:	2b01      	cmp	r3, #1
 800948a:	d101      	bne.n	8009490 <HAL_UART_Transmit_IT+0x38>
 800948c:	2302      	movs	r3, #2
 800948e:	e022      	b.n	80094d6 <HAL_UART_Transmit_IT+0x7e>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	88fa      	ldrh	r2, [r7, #6]
 80094a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	88fa      	ldrh	r2, [r7, #6]
 80094a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2221      	movs	r2, #33	; 0x21
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68da      	ldr	r2, [r3, #12]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	e000      	b.n	80094d6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80094d4:	2302      	movs	r3, #2
  }
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	bc80      	pop	{r7}
 80094de:	4770      	bx	lr

080094e0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	4613      	mov	r3, r2
 80094ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b20      	cmp	r3, #32
 80094f8:	d13c      	bne.n	8009574 <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8009500:	88fb      	ldrh	r3, [r7, #6]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e035      	b.n	8009576 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009510:	2b01      	cmp	r3, #1
 8009512:	d101      	bne.n	8009518 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8009514:	2302      	movs	r3, #2
 8009516:	e02e      	b.n	8009576 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2201      	movs	r2, #1
 8009524:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8009526:	88fb      	ldrh	r3, [r7, #6]
 8009528:	461a      	mov	r2, r3
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 fbae 	bl	8009c8e <UART_Start_Receive_IT>
 8009532:	4603      	mov	r3, r0
 8009534:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009536:	7dfb      	ldrb	r3, [r7, #23]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d119      	bne.n	8009570 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009540:	2b01      	cmp	r3, #1
 8009542:	d113      	bne.n	800956c <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009544:	2300      	movs	r3, #0
 8009546:	613b      	str	r3, [r7, #16]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	613b      	str	r3, [r7, #16]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	613b      	str	r3, [r7, #16]
 8009558:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68da      	ldr	r2, [r3, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f042 0210 	orr.w	r2, r2, #16
 8009568:	60da      	str	r2, [r3, #12]
 800956a:	e001      	b.n	8009570 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	e000      	b.n	8009576 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 8009574:	2302      	movs	r3, #2
  }
}
 8009576:	4618      	mov	r0, r3
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b086      	sub	sp, #24
 8009582:	af00      	add	r7, sp, #0
 8009584:	60f8      	str	r0, [r7, #12]
 8009586:	60b9      	str	r1, [r7, #8]
 8009588:	4613      	mov	r3, r2
 800958a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b20      	cmp	r3, #32
 8009596:	d13c      	bne.n	8009612 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d002      	beq.n	80095a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800959e:	88fb      	ldrh	r3, [r7, #6]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e035      	b.n	8009614 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d101      	bne.n	80095b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80095b2:	2302      	movs	r3, #2
 80095b4:	e02e      	b.n	8009614 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2201      	movs	r2, #1
 80095c2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80095c4:	88fb      	ldrh	r3, [r7, #6]
 80095c6:	461a      	mov	r2, r3
 80095c8:	68b9      	ldr	r1, [r7, #8]
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 fb98 	bl	8009d00 <UART_Start_Receive_DMA>
 80095d0:	4603      	mov	r3, r0
 80095d2:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d119      	bne.n	800960e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d113      	bne.n	800960a <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095e2:	2300      	movs	r3, #0
 80095e4:	613b      	str	r3, [r7, #16]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	613b      	str	r3, [r7, #16]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	613b      	str	r3, [r7, #16]
 80095f6:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68da      	ldr	r2, [r3, #12]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 0210 	orr.w	r2, r2, #16
 8009606:	60da      	str	r2, [r3, #12]
 8009608:	e001      	b.n	800960e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	e000      	b.n	8009614 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8009612:	2302      	movs	r3, #2
  }
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b08a      	sub	sp, #40	; 0x28
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800963c:	2300      	movs	r3, #0
 800963e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009640:	2300      	movs	r3, #0
 8009642:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	f003 030f 	and.w	r3, r3, #15
 800964a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10d      	bne.n	800966e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009654:	f003 0320 	and.w	r3, r3, #32
 8009658:	2b00      	cmp	r3, #0
 800965a:	d008      	beq.n	800966e <HAL_UART_IRQHandler+0x52>
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	f003 0320 	and.w	r3, r3, #32
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fc6c 	bl	8009f44 <UART_Receive_IT>
      return;
 800966c:	e180      	b.n	8009970 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 80b4 	beq.w	80097de <HAL_UART_IRQHandler+0x1c2>
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	2b00      	cmp	r3, #0
 800967e:	d105      	bne.n	800968c <HAL_UART_IRQHandler+0x70>
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 80a9 	beq.w	80097de <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00a      	beq.n	80096ac <HAL_UART_IRQHandler+0x90>
 8009696:	6a3b      	ldr	r3, [r7, #32]
 8009698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a4:	f043 0201 	orr.w	r2, r3, #1
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	f003 0304 	and.w	r3, r3, #4
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <HAL_UART_IRQHandler+0xb0>
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c4:	f043 0202 	orr.w	r2, r3, #2
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	f003 0302 	and.w	r3, r3, #2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00a      	beq.n	80096ec <HAL_UART_IRQHandler+0xd0>
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e4:	f043 0204 	orr.w	r2, r3, #4
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	f003 0308 	and.w	r3, r3, #8
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00f      	beq.n	8009716 <HAL_UART_IRQHandler+0xfa>
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	f003 0320 	and.w	r3, r3, #32
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d104      	bne.n	800970a <HAL_UART_IRQHandler+0xee>
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	2b00      	cmp	r3, #0
 8009708:	d005      	beq.n	8009716 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970e:	f043 0208 	orr.w	r2, r3, #8
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 8123 	beq.w	8009966 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	f003 0320 	and.w	r3, r3, #32
 8009726:	2b00      	cmp	r3, #0
 8009728:	d007      	beq.n	800973a <HAL_UART_IRQHandler+0x11e>
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	f003 0320 	and.w	r3, r3, #32
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fc05 	bl	8009f44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	bf14      	ite	ne
 8009748:	2301      	movne	r3, #1
 800974a:	2300      	moveq	r3, #0
 800974c:	b2db      	uxtb	r3, r3
 800974e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009754:	f003 0308 	and.w	r3, r3, #8
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <HAL_UART_IRQHandler+0x146>
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d033      	beq.n	80097ca <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fb45 	bl	8009df2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009772:	2b00      	cmp	r3, #0
 8009774:	d024      	beq.n	80097c0 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	695a      	ldr	r2, [r3, #20]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009784:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978a:	2b00      	cmp	r3, #0
 800978c:	d013      	beq.n	80097b6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	4a79      	ldr	r2, [pc, #484]	; (8009978 <HAL_UART_IRQHandler+0x35c>)
 8009794:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979a:	4618      	mov	r0, r3
 800979c:	f7fb fa64 	bl	8004c68 <HAL_DMA_Abort_IT>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d019      	beq.n	80097da <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80097b0:	4610      	mov	r0, r2
 80097b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b4:	e011      	b.n	80097da <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097be:	e00c      	b.n	80097da <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c8:	e007      	b.n	80097da <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80097d8:	e0c5      	b.n	8009966 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097da:	bf00      	nop
    return;
 80097dc:	e0c3      	b.n	8009966 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	f040 80a3 	bne.w	800992e <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	f003 0310 	and.w	r3, r3, #16
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 809d 	beq.w	800992e <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	f003 0310 	and.w	r3, r3, #16
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 8097 	beq.w	800992e <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	60fb      	str	r3, [r7, #12]
 8009814:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009820:	2b00      	cmp	r3, #0
 8009822:	d04f      	beq.n	80098c4 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800982e:	8a3b      	ldrh	r3, [r7, #16]
 8009830:	2b00      	cmp	r3, #0
 8009832:	f000 809a 	beq.w	800996a <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800983a:	8a3a      	ldrh	r2, [r7, #16]
 800983c:	429a      	cmp	r2, r3
 800983e:	f080 8094 	bcs.w	800996a <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	8a3a      	ldrh	r2, [r7, #16]
 8009846:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	2b20      	cmp	r3, #32
 8009850:	d02b      	beq.n	80098aa <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68da      	ldr	r2, [r3, #12]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009860:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	695a      	ldr	r2, [r3, #20]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f022 0201 	bic.w	r2, r2, #1
 8009870:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	695a      	ldr	r2, [r3, #20]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009880:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2220      	movs	r2, #32
 8009886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68da      	ldr	r2, [r3, #12]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 0210 	bic.w	r2, r2, #16
 800989e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fb f9a4 	bl	8004bf2 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80098b6:	b292      	uxth	r2, r2
 80098b8:	1a8a      	subs	r2, r1, r2
 80098ba:	b292      	uxth	r2, r2
 80098bc:	4611      	mov	r1, r2
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 80098c2:	e052      	b.n	800996a <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d048      	beq.n	800996e <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 80098dc:	8a7b      	ldrh	r3, [r7, #18]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d045      	beq.n	800996e <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68da      	ldr	r2, [r3, #12]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80098f0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	695a      	ldr	r2, [r3, #20]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f022 0201 	bic.w	r2, r2, #1
 8009900:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2220      	movs	r2, #32
 8009906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68da      	ldr	r2, [r3, #12]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f022 0210 	bic.w	r2, r2, #16
 800991e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009924:	8a7a      	ldrh	r2, [r7, #18]
 8009926:	4611      	mov	r1, r2
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 800992c:	e01f      	b.n	800996e <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009934:	2b00      	cmp	r3, #0
 8009936:	d008      	beq.n	800994a <HAL_UART_IRQHandler+0x32e>
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fa96 	bl	8009e74 <UART_Transmit_IT>
    return;
 8009948:	e012      	b.n	8009970 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00d      	beq.n	8009970 <HAL_UART_IRQHandler+0x354>
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800995a:	2b00      	cmp	r3, #0
 800995c:	d008      	beq.n	8009970 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fad7 	bl	8009f12 <UART_EndTransmit_IT>
    return;
 8009964:	e004      	b.n	8009970 <HAL_UART_IRQHandler+0x354>
    return;
 8009966:	bf00      	nop
 8009968:	e002      	b.n	8009970 <HAL_UART_IRQHandler+0x354>
      return;
 800996a:	bf00      	nop
 800996c:	e000      	b.n	8009970 <HAL_UART_IRQHandler+0x354>
      return;
 800996e:	bf00      	nop
  }
}
 8009970:	3728      	adds	r7, #40	; 0x28
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	08009e4b 	.word	0x08009e4b

0800997c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	bc80      	pop	{r7}
 800998c:	4770      	bx	lr

0800998e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009996:	bf00      	nop
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	bc80      	pop	{r7}
 800999e:	4770      	bx	lr

080099a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bc80      	pop	{r7}
 80099b0:	4770      	bx	lr

080099b2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80099ba:	bf00      	nop
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	bc80      	pop	{r7}
 80099c2:	4770      	bx	lr

080099c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bc80      	pop	{r7}
 80099d4:	4770      	bx	lr

080099d6 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b083      	sub	sp, #12
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80099de:	bf00      	nop
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bc80      	pop	{r7}
 80099e6:	4770      	bx	lr

080099e8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bc80      	pop	{r7}
 80099f8:	4770      	bx	lr

080099fa <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80099fa:	b480      	push	{r7}
 80099fc:	b083      	sub	sp, #12
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009a02:	bf00      	nop
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bc80      	pop	{r7}
 8009a0a:	4770      	bx	lr

08009a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bc80      	pop	{r7}
 8009a20:	4770      	bx	lr
	...

08009a24 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a0f      	ldr	r2, [pc, #60]	; (8009a6c <UART_InitCallbacksToDefault+0x48>)
 8009a30:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a0e      	ldr	r2, [pc, #56]	; (8009a70 <UART_InitCallbacksToDefault+0x4c>)
 8009a36:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a0e      	ldr	r2, [pc, #56]	; (8009a74 <UART_InitCallbacksToDefault+0x50>)
 8009a3c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a0d      	ldr	r2, [pc, #52]	; (8009a78 <UART_InitCallbacksToDefault+0x54>)
 8009a42:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a0d      	ldr	r2, [pc, #52]	; (8009a7c <UART_InitCallbacksToDefault+0x58>)
 8009a48:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a0c      	ldr	r2, [pc, #48]	; (8009a80 <UART_InitCallbacksToDefault+0x5c>)
 8009a4e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a0c      	ldr	r2, [pc, #48]	; (8009a84 <UART_InitCallbacksToDefault+0x60>)
 8009a54:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a0b      	ldr	r2, [pc, #44]	; (8009a88 <UART_InitCallbacksToDefault+0x64>)
 8009a5a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a0b      	ldr	r2, [pc, #44]	; (8009a8c <UART_InitCallbacksToDefault+0x68>)
 8009a60:	669a      	str	r2, [r3, #104]	; 0x68

}
 8009a62:	bf00      	nop
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bc80      	pop	{r7}
 8009a6a:	4770      	bx	lr
 8009a6c:	0800998f 	.word	0x0800998f
 8009a70:	0800997d 	.word	0x0800997d
 8009a74:	080099b3 	.word	0x080099b3
 8009a78:	080099a1 	.word	0x080099a1
 8009a7c:	080099c5 	.word	0x080099c5
 8009a80:	080099d7 	.word	0x080099d7
 8009a84:	080099e9 	.word	0x080099e9
 8009a88:	080099fb 	.word	0x080099fb
 8009a8c:	08009a0d 	.word	0x08009a0d

08009a90 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0320 	and.w	r3, r3, #32
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d12a      	bne.n	8009b02 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68da      	ldr	r2, [r3, #12]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ac0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	695a      	ldr	r2, [r3, #20]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f022 0201 	bic.w	r2, r2, #1
 8009ad0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	695a      	ldr	r2, [r3, #20]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ae0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d107      	bne.n	8009b02 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68da      	ldr	r2, [r3, #12]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f022 0210 	bic.w	r2, r2, #16
 8009b00:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d107      	bne.n	8009b1a <UART_DMAReceiveCplt+0x8a>
  {  
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009b12:	4611      	mov	r1, r2
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b18:	e003      	b.n	8009b22 <UART_DMAReceiveCplt+0x92>
    huart->RxCpltCallback(huart);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	4798      	blx	r3
}
 8009b22:	bf00      	nop
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d109      	bne.n	8009b54 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009b48:	0852      	lsrs	r2, r2, #1
 8009b4a:	b292      	uxth	r2, r2
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b52:	e003      	b.n	8009b5c <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	4798      	blx	r3
}
 8009b5c:	bf00      	nop
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	bf14      	ite	ne
 8009b84:	2301      	movne	r3, #1
 8009b86:	2300      	moveq	r3, #0
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b21      	cmp	r3, #33	; 0x21
 8009b96:	d108      	bne.n	8009baa <UART_DMAError+0x46>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d005      	beq.n	8009baa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009ba4:	68b8      	ldr	r0, [r7, #8]
 8009ba6:	f000 f90f 	bl	8009dc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	bf14      	ite	ne
 8009bb8:	2301      	movne	r3, #1
 8009bba:	2300      	moveq	r3, #0
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b22      	cmp	r3, #34	; 0x22
 8009bca:	d108      	bne.n	8009bde <UART_DMAError+0x7a>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d005      	beq.n	8009bde <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009bd8:	68b8      	ldr	r0, [r7, #8]
 8009bda:	f000 f90a 	bl	8009df2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be2:	f043 0210 	orr.w	r2, r3, #16
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bee:	68b8      	ldr	r0, [r7, #8]
 8009bf0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	60f8      	str	r0, [r7, #12]
 8009c02:	60b9      	str	r1, [r7, #8]
 8009c04:	603b      	str	r3, [r7, #0]
 8009c06:	4613      	mov	r3, r2
 8009c08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c0a:	e02c      	b.n	8009c66 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c12:	d028      	beq.n	8009c66 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d007      	beq.n	8009c2a <UART_WaitOnFlagUntilTimeout+0x30>
 8009c1a:	f7fa fe2b 	bl	8004874 <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d21d      	bcs.n	8009c66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68da      	ldr	r2, [r3, #12]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009c38:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	695a      	ldr	r2, [r3, #20]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 0201 	bic.w	r2, r2, #1
 8009c48:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2220      	movs	r2, #32
 8009c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2220      	movs	r2, #32
 8009c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e00f      	b.n	8009c86 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	4013      	ands	r3, r2
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	bf0c      	ite	eq
 8009c76:	2301      	moveq	r3, #1
 8009c78:	2300      	movne	r3, #0
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	79fb      	ldrb	r3, [r7, #7]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d0c3      	beq.n	8009c0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b085      	sub	sp, #20
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	60f8      	str	r0, [r7, #12]
 8009c96:	60b9      	str	r1, [r7, #8]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	88fa      	ldrh	r2, [r7, #6]
 8009ca6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	88fa      	ldrh	r2, [r7, #6]
 8009cac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2222      	movs	r2, #34	; 0x22
 8009cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68da      	ldr	r2, [r3, #12]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cd2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	695a      	ldr	r2, [r3, #20]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0201 	orr.w	r2, r2, #1
 8009ce2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68da      	ldr	r2, [r3, #12]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0220 	orr.w	r2, r2, #32
 8009cf2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bc80      	pop	{r7}
 8009cfe:	4770      	bx	lr

08009d00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	88fa      	ldrh	r2, [r7, #6]
 8009d18:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2222      	movs	r2, #34	; 0x22
 8009d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2c:	4a23      	ldr	r2, [pc, #140]	; (8009dbc <UART_Start_Receive_DMA+0xbc>)
 8009d2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d34:	4a22      	ldr	r2, [pc, #136]	; (8009dc0 <UART_Start_Receive_DMA+0xc0>)
 8009d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3c:	4a21      	ldr	r2, [pc, #132]	; (8009dc4 <UART_Start_Receive_DMA+0xc4>)
 8009d3e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d44:	2200      	movs	r2, #0
 8009d46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009d48:	f107 0308 	add.w	r3, r7, #8
 8009d4c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	3304      	adds	r3, #4
 8009d58:	4619      	mov	r1, r3
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	88fb      	ldrh	r3, [r7, #6]
 8009d60:	f7fa fee8 	bl	8004b34 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009d64:	2300      	movs	r3, #0
 8009d66:	613b      	str	r3, [r7, #16]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	613b      	str	r3, [r7, #16]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	613b      	str	r3, [r7, #16]
 8009d78:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68da      	ldr	r2, [r3, #12]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d90:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	695a      	ldr	r2, [r3, #20]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f042 0201 	orr.w	r2, r2, #1
 8009da0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	695a      	ldr	r2, [r3, #20]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009db0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3718      	adds	r7, #24
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	08009a91 	.word	0x08009a91
 8009dc0:	08009b2b 	.word	0x08009b2b
 8009dc4:	08009b65 	.word	0x08009b65

08009dc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68da      	ldr	r2, [r3, #12]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009dde:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2220      	movs	r2, #32
 8009de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bc80      	pop	{r7}
 8009df0:	4770      	bx	lr

08009df2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68da      	ldr	r2, [r3, #12]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009e08:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	695a      	ldr	r2, [r3, #20]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f022 0201 	bic.w	r2, r2, #1
 8009e18:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d107      	bne.n	8009e32 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68da      	ldr	r2, [r3, #12]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f022 0210 	bic.w	r2, r2, #16
 8009e30:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2220      	movs	r2, #32
 8009e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bc80      	pop	{r7}
 8009e48:	4770      	bx	lr

08009e4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e6c:	bf00      	nop
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b21      	cmp	r3, #33	; 0x21
 8009e86:	d13e      	bne.n	8009f06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e90:	d114      	bne.n	8009ebc <UART_Transmit_IT+0x48>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d110      	bne.n	8009ebc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009eae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a1b      	ldr	r3, [r3, #32]
 8009eb4:	1c9a      	adds	r2, r3, #2
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	621a      	str	r2, [r3, #32]
 8009eba:	e008      	b.n	8009ece <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6a1b      	ldr	r3, [r3, #32]
 8009ec0:	1c59      	adds	r1, r3, #1
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	6211      	str	r1, [r2, #32]
 8009ec6:	781a      	ldrb	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	4619      	mov	r1, r3
 8009edc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10f      	bne.n	8009f02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ef0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68da      	ldr	r2, [r3, #12]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	e000      	b.n	8009f08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009f06:	2302      	movs	r3, #2
  }
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bc80      	pop	{r7}
 8009f10:	4770      	bx	lr

08009f12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b082      	sub	sp, #8
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b22      	cmp	r3, #34	; 0x22
 8009f56:	f040 809b 	bne.w	800a090 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f62:	d117      	bne.n	8009f94 <UART_Receive_IT+0x50>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d113      	bne.n	8009f94 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f74:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8c:	1c9a      	adds	r2, r3, #2
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	629a      	str	r2, [r3, #40]	; 0x28
 8009f92:	e026      	b.n	8009fe2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f98:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fa6:	d007      	beq.n	8009fb8 <UART_Receive_IT+0x74>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10a      	bne.n	8009fc6 <UART_Receive_IT+0x82>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d106      	bne.n	8009fc6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	701a      	strb	r2, [r3, #0]
 8009fc4:	e008      	b.n	8009fd8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fdc:	1c5a      	adds	r2, r3, #1
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d14a      	bne.n	800a08c <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68da      	ldr	r2, [r3, #12]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 0220 	bic.w	r2, r2, #32
 800a004:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68da      	ldr	r2, [r3, #12]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a014:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	695a      	ldr	r2, [r3, #20]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0201 	bic.w	r2, r2, #1
 800a024:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2220      	movs	r2, #32
 800a02a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a032:	2b01      	cmp	r3, #1
 800a034:	d124      	bne.n	800a080 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68da      	ldr	r2, [r3, #12]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f022 0210 	bic.w	r2, r2, #16
 800a04a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0310 	and.w	r3, r3, #16
 800a056:	2b10      	cmp	r3, #16
 800a058:	d10a      	bne.n	800a070 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a05a:	2300      	movs	r3, #0
 800a05c:	60fb      	str	r3, [r7, #12]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	60fb      	str	r3, [r7, #12]
 800a06e:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a078:	4611      	mov	r1, r2
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	4798      	blx	r3
 800a07e:	e003      	b.n	800a088 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	e002      	b.n	800a092 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	e000      	b.n	800a092 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800a090:	2302      	movs	r3, #2
  }
}
 800a092:	4618      	mov	r0, r3
 800a094:	3718      	adds	r7, #24
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
	...

0800a09c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68da      	ldr	r2, [r3, #12]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	430a      	orrs	r2, r1
 800a0b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	689a      	ldr	r2, [r3, #8]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	431a      	orrs	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	695b      	ldr	r3, [r3, #20]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a0d6:	f023 030c 	bic.w	r3, r3, #12
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	6812      	ldr	r2, [r2, #0]
 800a0de:	68b9      	ldr	r1, [r7, #8]
 800a0e0:	430b      	orrs	r3, r1
 800a0e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	699a      	ldr	r2, [r3, #24]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a2c      	ldr	r2, [pc, #176]	; (800a1b0 <UART_SetConfig+0x114>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d103      	bne.n	800a10c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a104:	f7fd ff34 	bl	8007f70 <HAL_RCC_GetPCLK2Freq>
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	e002      	b.n	800a112 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a10c:	f7fd ff1c 	bl	8007f48 <HAL_RCC_GetPCLK1Freq>
 800a110:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	009a      	lsls	r2, r3, #2
 800a11c:	441a      	add	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	fbb2 f3f3 	udiv	r3, r2, r3
 800a128:	4a22      	ldr	r2, [pc, #136]	; (800a1b4 <UART_SetConfig+0x118>)
 800a12a:	fba2 2303 	umull	r2, r3, r2, r3
 800a12e:	095b      	lsrs	r3, r3, #5
 800a130:	0119      	lsls	r1, r3, #4
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	4613      	mov	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	009a      	lsls	r2, r3, #2
 800a13c:	441a      	add	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	fbb2 f2f3 	udiv	r2, r2, r3
 800a148:	4b1a      	ldr	r3, [pc, #104]	; (800a1b4 <UART_SetConfig+0x118>)
 800a14a:	fba3 0302 	umull	r0, r3, r3, r2
 800a14e:	095b      	lsrs	r3, r3, #5
 800a150:	2064      	movs	r0, #100	; 0x64
 800a152:	fb00 f303 	mul.w	r3, r0, r3
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	011b      	lsls	r3, r3, #4
 800a15a:	3332      	adds	r3, #50	; 0x32
 800a15c:	4a15      	ldr	r2, [pc, #84]	; (800a1b4 <UART_SetConfig+0x118>)
 800a15e:	fba2 2303 	umull	r2, r3, r2, r3
 800a162:	095b      	lsrs	r3, r3, #5
 800a164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a168:	4419      	add	r1, r3
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	4613      	mov	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4413      	add	r3, r2
 800a172:	009a      	lsls	r2, r3, #2
 800a174:	441a      	add	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a180:	4b0c      	ldr	r3, [pc, #48]	; (800a1b4 <UART_SetConfig+0x118>)
 800a182:	fba3 0302 	umull	r0, r3, r3, r2
 800a186:	095b      	lsrs	r3, r3, #5
 800a188:	2064      	movs	r0, #100	; 0x64
 800a18a:	fb00 f303 	mul.w	r3, r0, r3
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	3332      	adds	r3, #50	; 0x32
 800a194:	4a07      	ldr	r2, [pc, #28]	; (800a1b4 <UART_SetConfig+0x118>)
 800a196:	fba2 2303 	umull	r2, r3, r2, r3
 800a19a:	095b      	lsrs	r3, r3, #5
 800a19c:	f003 020f 	and.w	r2, r3, #15
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	440a      	add	r2, r1
 800a1a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a1a8:	bf00      	nop
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	40013800 	.word	0x40013800
 800a1b4:	51eb851f 	.word	0x51eb851f

0800a1b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	4603      	mov	r3, r0
 800a1c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a1c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1ca:	2b84      	cmp	r3, #132	; 0x84
 800a1cc:	d005      	beq.n	800a1da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a1ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	3303      	adds	r3, #3
 800a1d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a1da:	68fb      	ldr	r3, [r7, #12]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3714      	adds	r7, #20
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bc80      	pop	{r7}
 800a1e4:	4770      	bx	lr

0800a1e6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b083      	sub	sp, #12
 800a1ea:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1ec:	f3ef 8305 	mrs	r3, IPSR
 800a1f0:	607b      	str	r3, [r7, #4]
  return(result);
 800a1f2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	bf14      	ite	ne
 800a1f8:	2301      	movne	r3, #1
 800a1fa:	2300      	moveq	r3, #0
 800a1fc:	b2db      	uxtb	r3, r3
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	bc80      	pop	{r7}
 800a206:	4770      	bx	lr

0800a208 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a20c:	f001 fb62 	bl	800b8d4 <vTaskStartScheduler>
  
  return osOK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	bd80      	pop	{r7, pc}

0800a216 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a21a:	f7ff ffe4 	bl	800a1e6 <inHandlerMode>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d003      	beq.n	800a22c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a224:	f001 fc74 	bl	800bb10 <xTaskGetTickCountFromISR>
 800a228:	4603      	mov	r3, r0
 800a22a:	e002      	b.n	800a232 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a22c:	f001 fc62 	bl	800baf4 <xTaskGetTickCount>
 800a230:	4603      	mov	r3, r0
  }
}
 800a232:	4618      	mov	r0, r3
 800a234:	bd80      	pop	{r7, pc}

0800a236 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a236:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a238:	b089      	sub	sp, #36	; 0x24
 800a23a:	af04      	add	r7, sp, #16
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	695b      	ldr	r3, [r3, #20]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d020      	beq.n	800a28a <osThreadCreate+0x54>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d01c      	beq.n	800a28a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685c      	ldr	r4, [r3, #4]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681d      	ldr	r5, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	691e      	ldr	r6, [r3, #16]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff ffa8 	bl	800a1b8 <makeFreeRtosPriority>
 800a268:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	695b      	ldr	r3, [r3, #20]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a272:	9202      	str	r2, [sp, #8]
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	9100      	str	r1, [sp, #0]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	4632      	mov	r2, r6
 800a27c:	4629      	mov	r1, r5
 800a27e:	4620      	mov	r0, r4
 800a280:	f001 f961 	bl	800b546 <xTaskCreateStatic>
 800a284:	4603      	mov	r3, r0
 800a286:	60fb      	str	r3, [r7, #12]
 800a288:	e01c      	b.n	800a2c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685c      	ldr	r4, [r3, #4]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a296:	b29e      	uxth	r6, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7ff ff8a 	bl	800a1b8 <makeFreeRtosPriority>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	f107 030c 	add.w	r3, r7, #12
 800a2aa:	9301      	str	r3, [sp, #4]
 800a2ac:	9200      	str	r2, [sp, #0]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	4632      	mov	r2, r6
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	f001 f9a2 	bl	800b5fe <xTaskCreate>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d001      	beq.n	800a2c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	e000      	b.n	800a2c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a2ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <osDelay+0x16>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	e000      	b.n	800a2e6 <osDelay+0x18>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f001 fac0 	bl	800b86c <vTaskDelay>
  
  return osOK;
 800a2ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	460b      	mov	r3, r1
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d013      	beq.n	800a336 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800a30e:	7afb      	ldrb	r3, [r7, #11]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d101      	bne.n	800a318 <osTimerCreate+0x20>
 800a314:	2101      	movs	r1, #1
 800a316:	e000      	b.n	800a31a <osTimerCreate+0x22>
 800a318:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800a322:	9201      	str	r2, [sp, #4]
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	460a      	mov	r2, r1
 800a32a:	2101      	movs	r1, #1
 800a32c:	480b      	ldr	r0, [pc, #44]	; (800a35c <osTimerCreate+0x64>)
 800a32e:	f002 f9f4 	bl	800c71a <xTimerCreateStatic>
 800a332:	4603      	mov	r3, r0
 800a334:	e00e      	b.n	800a354 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800a336:	7afb      	ldrb	r3, [r7, #11]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d101      	bne.n	800a340 <osTimerCreate+0x48>
 800a33c:	2201      	movs	r2, #1
 800a33e:	e000      	b.n	800a342 <osTimerCreate+0x4a>
 800a340:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2101      	movs	r1, #1
 800a34c:	4803      	ldr	r0, [pc, #12]	; (800a35c <osTimerCreate+0x64>)
 800a34e:	f002 f9c3 	bl	800c6d8 <xTimerCreate>
 800a352:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800a354:	4618      	mov	r0, r3
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	080119dc 	.word	0x080119dc

0800a360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f103 0208 	add.w	r2, r3, #8
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f04f 32ff 	mov.w	r2, #4294967295
 800a378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f103 0208 	add.w	r2, r3, #8
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f103 0208 	add.w	r2, r3, #8
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	bc80      	pop	{r7}
 800a39c:	4770      	bx	lr

0800a39e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b083      	sub	sp, #12
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3ac:	bf00      	nop
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bc80      	pop	{r7}
 800a3b4:	4770      	bx	lr

0800a3b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b085      	sub	sp, #20
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	689a      	ldr	r2, [r3, #8]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	1c5a      	adds	r2, r3, #1
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	601a      	str	r2, [r3, #0]
}
 800a3f2:	bf00      	nop
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bc80      	pop	{r7}
 800a3fa:	4770      	bx	lr

0800a3fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a412:	d103      	bne.n	800a41c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	60fb      	str	r3, [r7, #12]
 800a41a:	e00c      	b.n	800a436 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3308      	adds	r3, #8
 800a420:	60fb      	str	r3, [r7, #12]
 800a422:	e002      	b.n	800a42a <vListInsert+0x2e>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	60fb      	str	r3, [r7, #12]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	429a      	cmp	r2, r3
 800a434:	d2f6      	bcs.n	800a424 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	685a      	ldr	r2, [r3, #4]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	1c5a      	adds	r2, r3, #1
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	601a      	str	r2, [r3, #0]
}
 800a462:	bf00      	nop
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	bc80      	pop	{r7}
 800a46a:	4770      	bx	lr

0800a46c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	6892      	ldr	r2, [r2, #8]
 800a482:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	6852      	ldr	r2, [r2, #4]
 800a48c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	429a      	cmp	r2, r3
 800a496:	d103      	bne.n	800a4a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689a      	ldr	r2, [r3, #8]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	1e5a      	subs	r2, r3, #1
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bc80      	pop	{r7}
 800a4bc:	4770      	bx	lr
	...

0800a4c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10a      	bne.n	800a4ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a4ea:	f002 fd27 	bl	800cf3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f6:	68f9      	ldr	r1, [r7, #12]
 800a4f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4fa:	fb01 f303 	mul.w	r3, r1, r3
 800a4fe:	441a      	add	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a51a:	3b01      	subs	r3, #1
 800a51c:	68f9      	ldr	r1, [r7, #12]
 800a51e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a520:	fb01 f303 	mul.w	r3, r1, r3
 800a524:	441a      	add	r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	22ff      	movs	r2, #255	; 0xff
 800a52e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	22ff      	movs	r2, #255	; 0xff
 800a536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d114      	bne.n	800a56a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d01a      	beq.n	800a57e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3310      	adds	r3, #16
 800a54c:	4618      	mov	r0, r3
 800a54e:	f001 fc59 	bl	800be04 <xTaskRemoveFromEventList>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d012      	beq.n	800a57e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a558:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <xQueueGenericReset+0xcc>)
 800a55a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a55e:	601a      	str	r2, [r3, #0]
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	e009      	b.n	800a57e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3310      	adds	r3, #16
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff fef6 	bl	800a360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	3324      	adds	r3, #36	; 0x24
 800a578:	4618      	mov	r0, r3
 800a57a:	f7ff fef1 	bl	800a360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a57e:	f002 fd0d 	bl	800cf9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a582:	2301      	movs	r3, #1
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	e000ed04 	.word	0xe000ed04

0800a590 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08e      	sub	sp, #56	; 0x38
 800a594:	af02      	add	r7, sp, #8
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10a      	bne.n	800a5ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5b6:	bf00      	nop
 800a5b8:	e7fe      	b.n	800a5b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10a      	bne.n	800a5d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5d2:	bf00      	nop
 800a5d4:	e7fe      	b.n	800a5d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <xQueueGenericCreateStatic+0x52>
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <xQueueGenericCreateStatic+0x56>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e000      	b.n	800a5e8 <xQueueGenericCreateStatic+0x58>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	623b      	str	r3, [r7, #32]
}
 800a5fe:	bf00      	nop
 800a600:	e7fe      	b.n	800a600 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d102      	bne.n	800a60e <xQueueGenericCreateStatic+0x7e>
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <xQueueGenericCreateStatic+0x82>
 800a60e:	2301      	movs	r3, #1
 800a610:	e000      	b.n	800a614 <xQueueGenericCreateStatic+0x84>
 800a612:	2300      	movs	r3, #0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10a      	bne.n	800a62e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	61fb      	str	r3, [r7, #28]
}
 800a62a:	bf00      	nop
 800a62c:	e7fe      	b.n	800a62c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a62e:	2348      	movs	r3, #72	; 0x48
 800a630:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	2b48      	cmp	r3, #72	; 0x48
 800a636:	d00a      	beq.n	800a64e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	61bb      	str	r3, [r7, #24]
}
 800a64a:	bf00      	nop
 800a64c:	e7fe      	b.n	800a64c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00d      	beq.n	800a674 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a660:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	4613      	mov	r3, r2
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	68b9      	ldr	r1, [r7, #8]
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 f805 	bl	800a67e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a676:	4618      	mov	r0, r3
 800a678:	3730      	adds	r7, #48	; 0x30
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b084      	sub	sp, #16
 800a682:	af00      	add	r7, sp, #0
 800a684:	60f8      	str	r0, [r7, #12]
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	607a      	str	r2, [r7, #4]
 800a68a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d103      	bne.n	800a69a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	69ba      	ldr	r2, [r7, #24]
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	e002      	b.n	800a6a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	69b8      	ldr	r0, [r7, #24]
 800a6b0:	f7ff ff06 	bl	800a4c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6b4:	bf00      	nop
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b08e      	sub	sp, #56	; 0x38
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
 800a6c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10a      	bne.n	800a6ee <xQueueGenericSend+0x32>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6ea:	bf00      	nop
 800a6ec:	e7fe      	b.n	800a6ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d103      	bne.n	800a6fc <xQueueGenericSend+0x40>
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <xQueueGenericSend+0x44>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e000      	b.n	800a702 <xQueueGenericSend+0x46>
 800a700:	2300      	movs	r3, #0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10a      	bne.n	800a71c <xQueueGenericSend+0x60>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a718:	bf00      	nop
 800a71a:	e7fe      	b.n	800a71a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d103      	bne.n	800a72a <xQueueGenericSend+0x6e>
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a726:	2b01      	cmp	r3, #1
 800a728:	d101      	bne.n	800a72e <xQueueGenericSend+0x72>
 800a72a:	2301      	movs	r3, #1
 800a72c:	e000      	b.n	800a730 <xQueueGenericSend+0x74>
 800a72e:	2300      	movs	r3, #0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10a      	bne.n	800a74a <xQueueGenericSend+0x8e>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	623b      	str	r3, [r7, #32]
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a74a:	f001 fd4f 	bl	800c1ec <xTaskGetSchedulerState>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d102      	bne.n	800a75a <xQueueGenericSend+0x9e>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <xQueueGenericSend+0xa2>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e000      	b.n	800a760 <xQueueGenericSend+0xa4>
 800a75e:	2300      	movs	r3, #0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <xQueueGenericSend+0xbe>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	61fb      	str	r3, [r7, #28]
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a77a:	f002 fbdf 	bl	800cf3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a786:	429a      	cmp	r2, r3
 800a788:	d302      	bcc.n	800a790 <xQueueGenericSend+0xd4>
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d129      	bne.n	800a7e4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	68b9      	ldr	r1, [r7, #8]
 800a794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a796:	f000 fa07 	bl	800aba8 <prvCopyDataToQueue>
 800a79a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d010      	beq.n	800a7c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a6:	3324      	adds	r3, #36	; 0x24
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f001 fb2b 	bl	800be04 <xTaskRemoveFromEventList>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d013      	beq.n	800a7dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a7b4:	4b3f      	ldr	r3, [pc, #252]	; (800a8b4 <xQueueGenericSend+0x1f8>)
 800a7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ba:	601a      	str	r2, [r3, #0]
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	e00a      	b.n	800a7dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d007      	beq.n	800a7dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a7cc:	4b39      	ldr	r3, [pc, #228]	; (800a8b4 <xQueueGenericSend+0x1f8>)
 800a7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a7dc:	f002 fbde 	bl	800cf9c <vPortExitCritical>
				return pdPASS;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e063      	b.n	800a8ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d103      	bne.n	800a7f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7ea:	f002 fbd7 	bl	800cf9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	e05c      	b.n	800a8ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d106      	bne.n	800a806 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7f8:	f107 0314 	add.w	r3, r7, #20
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f001 fb89 	bl	800bf14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a802:	2301      	movs	r3, #1
 800a804:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a806:	f002 fbc9 	bl	800cf9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a80a:	f001 f8c9 	bl	800b9a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a80e:	f002 fb95 	bl	800cf3c <vPortEnterCritical>
 800a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a818:	b25b      	sxtb	r3, r3
 800a81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81e:	d103      	bne.n	800a828 <xQueueGenericSend+0x16c>
 800a820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a82e:	b25b      	sxtb	r3, r3
 800a830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a834:	d103      	bne.n	800a83e <xQueueGenericSend+0x182>
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a83e:	f002 fbad 	bl	800cf9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a842:	1d3a      	adds	r2, r7, #4
 800a844:	f107 0314 	add.w	r3, r7, #20
 800a848:	4611      	mov	r1, r2
 800a84a:	4618      	mov	r0, r3
 800a84c:	f001 fb78 	bl	800bf40 <xTaskCheckForTimeOut>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d124      	bne.n	800a8a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a858:	f000 fa9e 	bl	800ad98 <prvIsQueueFull>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d018      	beq.n	800a894 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	3310      	adds	r3, #16
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	4611      	mov	r1, r2
 800a86a:	4618      	mov	r0, r3
 800a86c:	f001 fa7a 	bl	800bd64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a872:	f000 fa29 	bl	800acc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a876:	f001 f8a1 	bl	800b9bc <xTaskResumeAll>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f47f af7c 	bne.w	800a77a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a882:	4b0c      	ldr	r3, [pc, #48]	; (800a8b4 <xQueueGenericSend+0x1f8>)
 800a884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a888:	601a      	str	r2, [r3, #0]
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	e772      	b.n	800a77a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a896:	f000 fa17 	bl	800acc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a89a:	f001 f88f 	bl	800b9bc <xTaskResumeAll>
 800a89e:	e76c      	b.n	800a77a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a8a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8a2:	f000 fa11 	bl	800acc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8a6:	f001 f889 	bl	800b9bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a8aa:	2300      	movs	r3, #0
		}
	}
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3738      	adds	r7, #56	; 0x38
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	e000ed04 	.word	0xe000ed04

0800a8b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08e      	sub	sp, #56	; 0x38
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d103      	bne.n	800a8f4 <xQueueGenericSendFromISR+0x3c>
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <xQueueGenericSendFromISR+0x40>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e000      	b.n	800a8fa <xQueueGenericSendFromISR+0x42>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10a      	bne.n	800a914 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	623b      	str	r3, [r7, #32]
}
 800a910:	bf00      	nop
 800a912:	e7fe      	b.n	800a912 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	2b02      	cmp	r3, #2
 800a918:	d103      	bne.n	800a922 <xQueueGenericSendFromISR+0x6a>
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d101      	bne.n	800a926 <xQueueGenericSendFromISR+0x6e>
 800a922:	2301      	movs	r3, #1
 800a924:	e000      	b.n	800a928 <xQueueGenericSendFromISR+0x70>
 800a926:	2300      	movs	r3, #0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10a      	bne.n	800a942 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	61fb      	str	r3, [r7, #28]
}
 800a93e:	bf00      	nop
 800a940:	e7fe      	b.n	800a940 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a942:	f002 fbbd 	bl	800d0c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a946:	f3ef 8211 	mrs	r2, BASEPRI
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	61ba      	str	r2, [r7, #24]
 800a95c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a95e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a960:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d302      	bcc.n	800a974 <xQueueGenericSendFromISR+0xbc>
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d12c      	bne.n	800a9ce <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a97a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	68b9      	ldr	r1, [r7, #8]
 800a982:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a984:	f000 f910 	bl	800aba8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a988:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a990:	d112      	bne.n	800a9b8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	d016      	beq.n	800a9c8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	3324      	adds	r3, #36	; 0x24
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f001 fa30 	bl	800be04 <xTaskRemoveFromEventList>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00e      	beq.n	800a9c8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00b      	beq.n	800a9c8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	601a      	str	r2, [r3, #0]
 800a9b6:	e007      	b.n	800a9c8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a9b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a9bc:	3301      	adds	r3, #1
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	b25a      	sxtb	r2, r3
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a9cc:	e001      	b.n	800a9d2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a9dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3738      	adds	r7, #56	; 0x38
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b08c      	sub	sp, #48	; 0x30
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10a      	bne.n	800aa18 <xQueueReceive+0x30>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	623b      	str	r3, [r7, #32]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d103      	bne.n	800aa26 <xQueueReceive+0x3e>
 800aa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <xQueueReceive+0x42>
 800aa26:	2301      	movs	r3, #1
 800aa28:	e000      	b.n	800aa2c <xQueueReceive+0x44>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10a      	bne.n	800aa46 <xQueueReceive+0x5e>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	61fb      	str	r3, [r7, #28]
}
 800aa42:	bf00      	nop
 800aa44:	e7fe      	b.n	800aa44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa46:	f001 fbd1 	bl	800c1ec <xTaskGetSchedulerState>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d102      	bne.n	800aa56 <xQueueReceive+0x6e>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d101      	bne.n	800aa5a <xQueueReceive+0x72>
 800aa56:	2301      	movs	r3, #1
 800aa58:	e000      	b.n	800aa5c <xQueueReceive+0x74>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10a      	bne.n	800aa76 <xQueueReceive+0x8e>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	61bb      	str	r3, [r7, #24]
}
 800aa72:	bf00      	nop
 800aa74:	e7fe      	b.n	800aa74 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa76:	f002 fa61 	bl	800cf3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d01f      	beq.n	800aac6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa86:	68b9      	ldr	r1, [r7, #8]
 800aa88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa8a:	f000 f8f7 	bl	800ac7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa90:	1e5a      	subs	r2, r3, #1
 800aa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00f      	beq.n	800aabe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa0:	3310      	adds	r3, #16
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f001 f9ae 	bl	800be04 <xTaskRemoveFromEventList>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d007      	beq.n	800aabe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aaae:	4b3d      	ldr	r3, [pc, #244]	; (800aba4 <xQueueReceive+0x1bc>)
 800aab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab4:	601a      	str	r2, [r3, #0]
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aabe:	f002 fa6d 	bl	800cf9c <vPortExitCritical>
				return pdPASS;
 800aac2:	2301      	movs	r3, #1
 800aac4:	e069      	b.n	800ab9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d103      	bne.n	800aad4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aacc:	f002 fa66 	bl	800cf9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aad0:	2300      	movs	r3, #0
 800aad2:	e062      	b.n	800ab9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d106      	bne.n	800aae8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aada:	f107 0310 	add.w	r3, r7, #16
 800aade:	4618      	mov	r0, r3
 800aae0:	f001 fa18 	bl	800bf14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aae4:	2301      	movs	r3, #1
 800aae6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aae8:	f002 fa58 	bl	800cf9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aaec:	f000 ff58 	bl	800b9a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aaf0:	f002 fa24 	bl	800cf3c <vPortEnterCritical>
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aafa:	b25b      	sxtb	r3, r3
 800aafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab00:	d103      	bne.n	800ab0a <xQueueReceive+0x122>
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab10:	b25b      	sxtb	r3, r3
 800ab12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab16:	d103      	bne.n	800ab20 <xQueueReceive+0x138>
 800ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab20:	f002 fa3c 	bl	800cf9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab24:	1d3a      	adds	r2, r7, #4
 800ab26:	f107 0310 	add.w	r3, r7, #16
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f001 fa07 	bl	800bf40 <xTaskCheckForTimeOut>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d123      	bne.n	800ab80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab3a:	f000 f917 	bl	800ad6c <prvIsQueueEmpty>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d017      	beq.n	800ab74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab46:	3324      	adds	r3, #36	; 0x24
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	4611      	mov	r1, r2
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f001 f909 	bl	800bd64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab54:	f000 f8b8 	bl	800acc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab58:	f000 ff30 	bl	800b9bc <xTaskResumeAll>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d189      	bne.n	800aa76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ab62:	4b10      	ldr	r3, [pc, #64]	; (800aba4 <xQueueReceive+0x1bc>)
 800ab64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab68:	601a      	str	r2, [r3, #0]
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	f3bf 8f6f 	isb	sy
 800ab72:	e780      	b.n	800aa76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab76:	f000 f8a7 	bl	800acc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab7a:	f000 ff1f 	bl	800b9bc <xTaskResumeAll>
 800ab7e:	e77a      	b.n	800aa76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab82:	f000 f8a1 	bl	800acc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab86:	f000 ff19 	bl	800b9bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab8c:	f000 f8ee 	bl	800ad6c <prvIsQueueEmpty>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f43f af6f 	beq.w	800aa76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3730      	adds	r7, #48	; 0x30
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800abb4:	2300      	movs	r3, #0
 800abb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10d      	bne.n	800abe2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d14d      	bne.n	800ac6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f001 fb28 	bl	800c228 <xTaskPriorityDisinherit>
 800abd8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	605a      	str	r2, [r3, #4]
 800abe0:	e043      	b.n	800ac6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d119      	bne.n	800ac1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6898      	ldr	r0, [r3, #8]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf0:	461a      	mov	r2, r3
 800abf2:	68b9      	ldr	r1, [r7, #8]
 800abf4:	f002 fcd4 	bl	800d5a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	689a      	ldr	r2, [r3, #8]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac00:	441a      	add	r2, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	689a      	ldr	r2, [r3, #8]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d32b      	bcc.n	800ac6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	609a      	str	r2, [r3, #8]
 800ac1a:	e026      	b.n	800ac6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	68d8      	ldr	r0, [r3, #12]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac24:	461a      	mov	r2, r3
 800ac26:	68b9      	ldr	r1, [r7, #8]
 800ac28:	f002 fcba 	bl	800d5a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	68da      	ldr	r2, [r3, #12]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac34:	425b      	negs	r3, r3
 800ac36:	441a      	add	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	68da      	ldr	r2, [r3, #12]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d207      	bcs.n	800ac58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac50:	425b      	negs	r3, r3
 800ac52:	441a      	add	r2, r3
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d105      	bne.n	800ac6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	3b01      	subs	r3, #1
 800ac68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	1c5a      	adds	r2, r3, #1
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac72:	697b      	ldr	r3, [r7, #20]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d018      	beq.n	800acc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68da      	ldr	r2, [r3, #12]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac96:	441a      	add	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	68da      	ldr	r2, [r3, #12]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d303      	bcc.n	800acb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	68d9      	ldr	r1, [r3, #12]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb8:	461a      	mov	r2, r3
 800acba:	6838      	ldr	r0, [r7, #0]
 800acbc:	f002 fc70 	bl	800d5a0 <memcpy>
	}
}
 800acc0:	bf00      	nop
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800acd0:	f002 f934 	bl	800cf3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acdc:	e011      	b.n	800ad02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d012      	beq.n	800ad0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3324      	adds	r3, #36	; 0x24
 800acea:	4618      	mov	r0, r3
 800acec:	f001 f88a 	bl	800be04 <xTaskRemoveFromEventList>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800acf6:	f001 f985 	bl	800c004 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	3b01      	subs	r3, #1
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	dce9      	bgt.n	800acde <prvUnlockQueue+0x16>
 800ad0a:	e000      	b.n	800ad0e <prvUnlockQueue+0x46>
					break;
 800ad0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	22ff      	movs	r2, #255	; 0xff
 800ad12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad16:	f002 f941 	bl	800cf9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad1a:	f002 f90f 	bl	800cf3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad26:	e011      	b.n	800ad4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d012      	beq.n	800ad56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3310      	adds	r3, #16
 800ad34:	4618      	mov	r0, r3
 800ad36:	f001 f865 	bl	800be04 <xTaskRemoveFromEventList>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad40:	f001 f960 	bl	800c004 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad44:	7bbb      	ldrb	r3, [r7, #14]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	dce9      	bgt.n	800ad28 <prvUnlockQueue+0x60>
 800ad54:	e000      	b.n	800ad58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	22ff      	movs	r2, #255	; 0xff
 800ad5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad60:	f002 f91c 	bl	800cf9c <vPortExitCritical>
}
 800ad64:	bf00      	nop
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad74:	f002 f8e2 	bl	800cf3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d102      	bne.n	800ad86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad80:	2301      	movs	r3, #1
 800ad82:	60fb      	str	r3, [r7, #12]
 800ad84:	e001      	b.n	800ad8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad86:	2300      	movs	r3, #0
 800ad88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad8a:	f002 f907 	bl	800cf9c <vPortExitCritical>

	return xReturn;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ada0:	f002 f8cc 	bl	800cf3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adac:	429a      	cmp	r2, r3
 800adae:	d102      	bne.n	800adb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800adb0:	2301      	movs	r3, #1
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	e001      	b.n	800adba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800adb6:	2300      	movs	r3, #0
 800adb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adba:	f002 f8ef 	bl	800cf9c <vPortExitCritical>

	return xReturn;
 800adbe:	68fb      	ldr	r3, [r7, #12]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800add2:	2300      	movs	r3, #0
 800add4:	60fb      	str	r3, [r7, #12]
 800add6:	e014      	b.n	800ae02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800add8:	4a0e      	ldr	r2, [pc, #56]	; (800ae14 <vQueueAddToRegistry+0x4c>)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10b      	bne.n	800adfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ade4:	490b      	ldr	r1, [pc, #44]	; (800ae14 <vQueueAddToRegistry+0x4c>)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800adee:	4a09      	ldr	r2, [pc, #36]	; (800ae14 <vQueueAddToRegistry+0x4c>)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	00db      	lsls	r3, r3, #3
 800adf4:	4413      	add	r3, r2
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800adfa:	e006      	b.n	800ae0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	3301      	adds	r3, #1
 800ae00:	60fb      	str	r3, [r7, #12]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b07      	cmp	r3, #7
 800ae06:	d9e7      	bls.n	800add8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae08:	bf00      	nop
 800ae0a:	bf00      	nop
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bc80      	pop	{r7}
 800ae12:	4770      	bx	lr
 800ae14:	20003840 	.word	0x20003840

0800ae18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae28:	f002 f888 	bl	800cf3c <vPortEnterCritical>
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae32:	b25b      	sxtb	r3, r3
 800ae34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae38:	d103      	bne.n	800ae42 <vQueueWaitForMessageRestricted+0x2a>
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae48:	b25b      	sxtb	r3, r3
 800ae4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4e:	d103      	bne.n	800ae58 <vQueueWaitForMessageRestricted+0x40>
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae58:	f002 f8a0 	bl	800cf9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d106      	bne.n	800ae72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	3324      	adds	r3, #36	; 0x24
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	68b9      	ldr	r1, [r7, #8]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 ff9d 	bl	800bdac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae72:	6978      	ldr	r0, [r7, #20]
 800ae74:	f7ff ff28 	bl	800acc8 <prvUnlockQueue>
	}
 800ae78:	bf00      	nop
 800ae7a:	3718      	adds	r7, #24
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b08a      	sub	sp, #40	; 0x28
 800ae84:	af02      	add	r7, sp, #8
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2b04      	cmp	r3, #4
 800ae90:	d80a      	bhi.n	800aea8 <xStreamBufferGenericCreate+0x28>
	__asm volatile
 800ae92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	61bb      	str	r3, [r7, #24]
}
 800aea4:	bf00      	nop
 800aea6:	e7fe      	b.n	800aea6 <xStreamBufferGenericCreate+0x26>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d90a      	bls.n	800aec6 <xStreamBufferGenericCreate+0x46>
	__asm volatile
 800aeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb4:	f383 8811 	msr	BASEPRI, r3
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	617b      	str	r3, [r7, #20]
}
 800aec2:	bf00      	nop
 800aec4:	e7fe      	b.n	800aec4 <xStreamBufferGenericCreate+0x44>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <xStreamBufferGenericCreate+0x50>
		{
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 800aecc:	2301      	movs	r3, #1
 800aece:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	3301      	adds	r3, #1
 800aed4:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3320      	adds	r3, #32
 800aeda:	4618      	mov	r0, r3
 800aedc:	f002 f92e 	bl	800d13c <pvPortMalloc>
 800aee0:	61f8      	str	r0, [r7, #28]

		if( pucAllocatedMemory != NULL )
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d009      	beq.n	800aefc <xStreamBufferGenericCreate+0x7c>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	f103 0120 	add.w	r1, r3, #32
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	69f8      	ldr	r0, [r7, #28]
 800aef8:	f000 faec 	bl	800b4d4 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t * ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800aefc:	69fb      	ldr	r3, [r7, #28]
	}
 800aefe:	4618      	mov	r0, r3
 800af00:	3720      	adds	r7, #32
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800af06:	b480      	push	{r7}
 800af08:	b087      	sub	sp, #28
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10a      	bne.n	800af2e <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1c:	f383 8811 	msr	BASEPRI, r3
 800af20:	f3bf 8f6f 	isb	sy
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	60fb      	str	r3, [r7, #12]
}
 800af2a:	bf00      	nop
 800af2c:	e7fe      	b.n	800af2c <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	689a      	ldr	r2, [r3, #8]
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4413      	add	r3, r2
 800af38:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	3b01      	subs	r3, #1
 800af48:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	429a      	cmp	r2, r3
 800af52:	d304      	bcc.n	800af5e <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800af5e:	697b      	ldr	r3, [r7, #20]
}
 800af60:	4618      	mov	r0, r3
 800af62:	371c      	adds	r7, #28
 800af64:	46bd      	mov	sp, r7
 800af66:	bc80      	pop	{r7}
 800af68:	4770      	bx	lr

0800af6a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b090      	sub	sp, #64	; 0x40
 800af6e:	af02      	add	r7, sp, #8
 800af70:	60f8      	str	r0, [r7, #12]
 800af72:	60b9      	str	r1, [r7, #8]
 800af74:	607a      	str	r2, [r7, #4]
 800af76:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10a      	bne.n	800afa0 <xStreamBufferSend+0x36>
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af9c:	bf00      	nop
 800af9e:	e7fe      	b.n	800af9e <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800afa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10a      	bne.n	800afbc <xStreamBufferSend+0x52>
	__asm volatile
 800afa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afaa:	f383 8811 	msr	BASEPRI, r3
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	623b      	str	r3, [r7, #32]
}
 800afb8:	bf00      	nop
 800afba:	e7fe      	b.n	800afba <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800afbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afbe:	7f1b      	ldrb	r3, [r3, #28]
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <xStreamBufferSend+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800afc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afca:	3304      	adds	r3, #4
 800afcc:	633b      	str	r3, [r7, #48]	; 0x30
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d03f      	beq.n	800b054 <xStreamBufferSend+0xea>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800afd4:	f107 0314 	add.w	r3, r7, #20
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 ff75 	bl	800bec8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800afde:	f001 ffad 	bl	800cf3c <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800afe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afe4:	f7ff ff8f 	bl	800af06 <xStreamBufferSpacesAvailable>
 800afe8:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800afea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	429a      	cmp	r2, r3
 800aff0:	d217      	bcs.n	800b022 <xStreamBufferSend+0xb8>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800aff2:	2000      	movs	r0, #0
 800aff4:	f001 fa9c 	bl	800c530 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800aff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affa:	695b      	ldr	r3, [r3, #20]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00a      	beq.n	800b016 <xStreamBufferSend+0xac>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	61fb      	str	r3, [r7, #28]
}
 800b012:	bf00      	nop
 800b014:	e7fe      	b.n	800b014 <xStreamBufferSend+0xaa>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800b016:	f001 f8db 	bl	800c1d0 <xTaskGetCurrentTaskHandle>
 800b01a:	4602      	mov	r2, r0
 800b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01e:	615a      	str	r2, [r3, #20]
 800b020:	e002      	b.n	800b028 <xStreamBufferSend+0xbe>
				}
				else
				{
					taskEXIT_CRITICAL();
 800b022:	f001 ffbb 	bl	800cf9c <vPortExitCritical>
					break;
 800b026:	e015      	b.n	800b054 <xStreamBufferSend+0xea>
				}
			}
			taskEXIT_CRITICAL();
 800b028:	f001 ffb8 	bl	800cf9c <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	2200      	movs	r2, #0
 800b030:	f04f 31ff 	mov.w	r1, #4294967295
 800b034:	2000      	movs	r0, #0
 800b036:	f001 f97d 	bl	800c334 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800b03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03c:	2200      	movs	r2, #0
 800b03e:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800b040:	463a      	mov	r2, r7
 800b042:	f107 0314 	add.w	r3, r7, #20
 800b046:	4611      	mov	r1, r2
 800b048:	4618      	mov	r0, r3
 800b04a:	f000 ff79 	bl	800bf40 <xTaskCheckForTimeOut>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d0c4      	beq.n	800afde <xStreamBufferSend+0x74>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800b054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b056:	2b00      	cmp	r3, #0
 800b058:	d103      	bne.n	800b062 <xStreamBufferSend+0xf8>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800b05a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b05c:	f7ff ff53 	bl	800af06 <xStreamBufferSpacesAvailable>
 800b060:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800b062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b06e:	f000 f823 	bl	800b0b8 <prvWriteMessageToBuffer>
 800b072:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	2b00      	cmp	r3, #0
 800b078:	d019      	beq.n	800b0ae <xStreamBufferSend+0x144>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800b07a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b07c:	f000 fa0b 	bl	800b496 <prvBytesInBuffer>
 800b080:	4602      	mov	r2, r0
 800b082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	429a      	cmp	r2, r3
 800b088:	d311      	bcc.n	800b0ae <xStreamBufferSend+0x144>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800b08a:	f000 fc89 	bl	800b9a0 <vTaskSuspendAll>
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d009      	beq.n	800b0aa <xStreamBufferSend+0x140>
 800b096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b098:	6918      	ldr	r0, [r3, #16]
 800b09a:	2300      	movs	r3, #0
 800b09c:	2200      	movs	r2, #0
 800b09e:	2100      	movs	r1, #0
 800b0a0:	f001 f9a2 	bl	800c3e8 <xTaskGenericNotify>
 800b0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	611a      	str	r2, [r3, #16]
 800b0aa:	f000 fc87 	bl	800b9bc <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800b0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3738      	adds	r7, #56	; 0x38
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d102      	bne.n	800b0d2 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	617b      	str	r3, [r7, #20]
 800b0d0:	e01d      	b.n	800b10e <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	7f1b      	ldrb	r3, [r3, #28]
 800b0d6:	f003 0301 	and.w	r3, r3, #1
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d108      	bne.n	800b0f0 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	bf28      	it	cs
 800b0ea:	4613      	movcs	r3, r2
 800b0ec:	607b      	str	r3, [r7, #4]
 800b0ee:	e00e      	b.n	800b10e <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	6a3b      	ldr	r3, [r7, #32]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d308      	bcc.n	800b10a <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800b0fc:	1d3b      	adds	r3, r7, #4
 800b0fe:	2204      	movs	r2, #4
 800b100:	4619      	mov	r1, r3
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f000 f8db 	bl	800b2be <prvWriteBytesToBuffer>
 800b108:	e001      	b.n	800b10e <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800b10a:	2300      	movs	r3, #0
 800b10c:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d007      	beq.n	800b124 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	461a      	mov	r2, r3
 800b118:	68b9      	ldr	r1, [r7, #8]
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f000 f8cf 	bl	800b2be <prvWriteBytesToBuffer>
 800b120:	6138      	str	r0, [r7, #16]
 800b122:	e001      	b.n	800b128 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800b124:	2300      	movs	r3, #0
 800b126:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800b128:	693b      	ldr	r3, [r7, #16]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3718      	adds	r7, #24
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b08e      	sub	sp, #56	; 0x38
 800b136:	af02      	add	r7, sp, #8
 800b138:	60f8      	str	r0, [r7, #12]
 800b13a:	60b9      	str	r1, [r7, #8]
 800b13c:	607a      	str	r2, [r7, #4]
 800b13e:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800b144:	2300      	movs	r3, #0
 800b146:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10a      	bne.n	800b164 <xStreamBufferReceive+0x32>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	61fb      	str	r3, [r7, #28]
}
 800b160:	bf00      	nop
 800b162:	e7fe      	b.n	800b162 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800b164:	6a3b      	ldr	r3, [r7, #32]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10a      	bne.n	800b180 <xStreamBufferReceive+0x4e>
	__asm volatile
 800b16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	61bb      	str	r3, [r7, #24]
}
 800b17c:	bf00      	nop
 800b17e:	e7fe      	b.n	800b17e <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800b180:	6a3b      	ldr	r3, [r7, #32]
 800b182:	7f1b      	ldrb	r3, [r3, #28]
 800b184:	f003 0301 	and.w	r3, r3, #1
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800b18c:	2304      	movs	r3, #4
 800b18e:	627b      	str	r3, [r7, #36]	; 0x24
 800b190:	e001      	b.n	800b196 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d035      	beq.n	800b208 <xStreamBufferReceive+0xd6>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800b19c:	f001 fece 	bl	800cf3c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800b1a0:	6a38      	ldr	r0, [r7, #32]
 800b1a2:	f000 f978 	bl	800b496 <prvBytesInBuffer>
 800b1a6:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800b1a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d816      	bhi.n	800b1de <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	f001 f9bd 	bl	800c530 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00a      	beq.n	800b1d4 <xStreamBufferReceive+0xa2>
	__asm volatile
 800b1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	617b      	str	r3, [r7, #20]
}
 800b1d0:	bf00      	nop
 800b1d2:	e7fe      	b.n	800b1d2 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800b1d4:	f000 fffc 	bl	800c1d0 <xTaskGetCurrentTaskHandle>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b1de:	f001 fedd 	bl	800cf9c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800b1e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d812      	bhi.n	800b210 <xStreamBufferReceive+0xde>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f04f 31ff 	mov.w	r1, #4294967295
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	f001 f89e 	bl	800c334 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800b1fe:	6a38      	ldr	r0, [r7, #32]
 800b200:	f000 f949 	bl	800b496 <prvBytesInBuffer>
 800b204:	62b8      	str	r0, [r7, #40]	; 0x28
 800b206:	e003      	b.n	800b210 <xStreamBufferReceive+0xde>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800b208:	6a38      	ldr	r0, [r7, #32]
 800b20a:	f000 f944 	bl	800b496 <prvBytesInBuffer>
 800b20e:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800b210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	429a      	cmp	r2, r3
 800b216:	d91d      	bls.n	800b254 <xStreamBufferReceive+0x122>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	68b9      	ldr	r1, [r7, #8]
 800b222:	6a38      	ldr	r0, [r7, #32]
 800b224:	f000 f81b 	bl	800b25e <prvReadMessageFromBuffer>
 800b228:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800b22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d011      	beq.n	800b254 <xStreamBufferReceive+0x122>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800b230:	f000 fbb6 	bl	800b9a0 <vTaskSuspendAll>
 800b234:	6a3b      	ldr	r3, [r7, #32]
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d009      	beq.n	800b250 <xStreamBufferReceive+0x11e>
 800b23c:	6a3b      	ldr	r3, [r7, #32]
 800b23e:	6958      	ldr	r0, [r3, #20]
 800b240:	2300      	movs	r3, #0
 800b242:	2200      	movs	r2, #0
 800b244:	2100      	movs	r1, #0
 800b246:	f001 f8cf 	bl	800c3e8 <xTaskGenericNotify>
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	2200      	movs	r2, #0
 800b24e:	615a      	str	r2, [r3, #20]
 800b250:	f000 fbb4 	bl	800b9bc <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800b254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b256:	4618      	mov	r0, r3
 800b258:	3730      	adds	r7, #48	; 0x30
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b088      	sub	sp, #32
 800b262:	af00      	add	r7, sp, #0
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	60b9      	str	r1, [r7, #8]
 800b268:	607a      	str	r2, [r7, #4]
 800b26a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d017      	beq.n	800b2a2 <prvReadMessageFromBuffer+0x44>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	61fb      	str	r3, [r7, #28]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800b278:	f107 0114 	add.w	r1, r7, #20
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f000 f88e 	bl	800b3a2 <prvReadBytesFromBuffer>

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	429a      	cmp	r2, r3
 800b294:	d207      	bcs.n	800b2a6 <prvReadMessageFromBuffer+0x48>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	69fa      	ldr	r2, [r7, #28]
 800b29a:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	617b      	str	r3, [r7, #20]
 800b2a0:	e001      	b.n	800b2a6 <prvReadMessageFromBuffer+0x48>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	617b      	str	r3, [r7, #20]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	68b9      	ldr	r1, [r7, #8]
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f000 f878 	bl	800b3a2 <prvReadBytesFromBuffer>
 800b2b2:	61b8      	str	r0, [r7, #24]

	return xReceivedLength;
 800b2b4:	69bb      	ldr	r3, [r7, #24]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3720      	adds	r7, #32
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b08a      	sub	sp, #40	; 0x28
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	60f8      	str	r0, [r7, #12]
 800b2c6:	60b9      	str	r1, [r7, #8]
 800b2c8:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10a      	bne.n	800b2e6 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800b2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	61fb      	str	r3, [r7, #28]
}
 800b2e2:	bf00      	nop
 800b2e4:	e7fe      	b.n	800b2e4 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	689a      	ldr	r2, [r3, #8]
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	bf28      	it	cs
 800b2fa:	4613      	movcs	r3, r2
 800b2fc:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800b2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	441a      	add	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d90a      	bls.n	800b322 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800b30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	61bb      	str	r3, [r7, #24]
}
 800b31e:	bf00      	nop
 800b320:	e7fe      	b.n	800b320 <prvWriteBytesToBuffer+0x62>
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	699a      	ldr	r2, [r3, #24]
 800b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b328:	4413      	add	r3, r2
 800b32a:	6a3a      	ldr	r2, [r7, #32]
 800b32c:	68b9      	ldr	r1, [r7, #8]
 800b32e:	4618      	mov	r0, r3
 800b330:	f002 f936 	bl	800d5a0 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	6a3b      	ldr	r3, [r7, #32]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d91c      	bls.n	800b376 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	1ad2      	subs	r2, r2, r3
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	429a      	cmp	r2, r3
 800b348:	d90a      	bls.n	800b360 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	617b      	str	r3, [r7, #20]
}
 800b35c:	bf00      	nop
 800b35e:	e7fe      	b.n	800b35e <prvWriteBytesToBuffer+0xa0>
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6998      	ldr	r0, [r3, #24]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	6a3b      	ldr	r3, [r7, #32]
 800b368:	18d1      	adds	r1, r2, r3
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	6a3b      	ldr	r3, [r7, #32]
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	461a      	mov	r2, r3
 800b372:	f002 f915 	bl	800d5a0 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800b376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4413      	add	r3, r2
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b384:	429a      	cmp	r2, r3
 800b386:	d304      	bcc.n	800b392 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b38e:	1ad3      	subs	r3, r2, r3
 800b390:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b396:	605a      	str	r2, [r3, #4]

	return xCount;
 800b398:	687b      	ldr	r3, [r7, #4]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3728      	adds	r7, #40	; 0x28
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b08a      	sub	sp, #40	; 0x28
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	60f8      	str	r0, [r7, #12]
 800b3aa:	60b9      	str	r1, [r7, #8]
 800b3ac:	607a      	str	r2, [r7, #4]
 800b3ae:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	bf28      	it	cs
 800b3b8:	4613      	movcs	r3, r2
 800b3ba:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800b3bc:	6a3b      	ldr	r3, [r7, #32]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d064      	beq.n	800b48c <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	689a      	ldr	r2, [r3, #8]
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	6a3a      	ldr	r2, [r7, #32]
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	bf28      	it	cs
 800b3d6:	4613      	movcs	r3, r2
 800b3d8:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800b3da:	69fa      	ldr	r2, [r7, #28]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d90a      	bls.n	800b3f8 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	61bb      	str	r3, [r7, #24]
}
 800b3f4:	bf00      	nop
 800b3f6:	e7fe      	b.n	800b3f6 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800b3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	441a      	add	r2, r3
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	429a      	cmp	r2, r3
 800b404:	d90a      	bls.n	800b41c <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800b406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40a:	f383 8811 	msr	BASEPRI, r3
 800b40e:	f3bf 8f6f 	isb	sy
 800b412:	f3bf 8f4f 	dsb	sy
 800b416:	617b      	str	r3, [r7, #20]
}
 800b418:	bf00      	nop
 800b41a:	e7fe      	b.n	800b41a <prvReadBytesFromBuffer+0x78>
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	699a      	ldr	r2, [r3, #24]
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	4413      	add	r3, r2
 800b424:	69fa      	ldr	r2, [r7, #28]
 800b426:	4619      	mov	r1, r3
 800b428:	68b8      	ldr	r0, [r7, #8]
 800b42a:	f002 f8b9 	bl	800d5a0 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800b42e:	6a3a      	ldr	r2, [r7, #32]
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	429a      	cmp	r2, r3
 800b434:	d919      	bls.n	800b46a <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800b436:	6a3a      	ldr	r2, [r7, #32]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d90a      	bls.n	800b454 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	613b      	str	r3, [r7, #16]
}
 800b450:	bf00      	nop
 800b452:	e7fe      	b.n	800b452 <prvReadBytesFromBuffer+0xb0>
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	18d0      	adds	r0, r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6999      	ldr	r1, [r3, #24]
 800b45e:	6a3a      	ldr	r2, [r7, #32]
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	461a      	mov	r2, r3
 800b466:	f002 f89b 	bl	800d5a0 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800b46a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b46c:	6a3b      	ldr	r3, [r7, #32]
 800b46e:	4413      	add	r3, r2
 800b470:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b478:	429a      	cmp	r2, r3
 800b47a:	d304      	bcc.n	800b486 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b48a:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800b48c:	6a3b      	ldr	r3, [r7, #32]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3728      	adds	r7, #40	; 0x28
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800b496:	b480      	push	{r7}
 800b498:	b085      	sub	sp, #20
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	689a      	ldr	r2, [r3, #8]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d304      	bcc.n	800b4c8 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3714      	adds	r7, #20
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bc80      	pop	{r7}
 800b4d2:	4770      	bx	lr

0800b4d4 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  BaseType_t xIsMessageBuffer )
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
 800b4e0:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800b4e2:	2355      	movs	r3, #85	; 0x55
 800b4e4:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	6979      	ldr	r1, [r7, #20]
 800b4ea:	68b8      	ldr	r0, [r7, #8]
 800b4ec:	f002 f866 	bl	800d5bc <memset>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d00a      	beq.n	800b50e <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800b4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fc:	f383 8811 	msr	BASEPRI, r3
 800b500:	f3bf 8f6f 	isb	sy
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	613b      	str	r3, [r7, #16]
}
 800b50a:	bf00      	nop
 800b50c:	e7fe      	b.n	800b50c <prvInitialiseNewStreamBuffer+0x38>
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800b50e:	2220      	movs	r2, #32
 800b510:	2100      	movs	r1, #0
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f002 f852 	bl	800d5bc <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	60da      	str	r2, [r3, #12]

	if( xIsMessageBuffer != pdFALSE )
 800b52a:	6a3b      	ldr	r3, [r7, #32]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d006      	beq.n	800b53e <prvInitialiseNewStreamBuffer+0x6a>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	7f1b      	ldrb	r3, [r3, #28]
 800b534:	f043 0301 	orr.w	r3, r3, #1
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	771a      	strb	r2, [r3, #28]
	}
}
 800b53e:	bf00      	nop
 800b540:	3718      	adds	r7, #24
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b546:	b580      	push	{r7, lr}
 800b548:	b08e      	sub	sp, #56	; 0x38
 800b54a:	af04      	add	r7, sp, #16
 800b54c:	60f8      	str	r0, [r7, #12]
 800b54e:	60b9      	str	r1, [r7, #8]
 800b550:	607a      	str	r2, [r7, #4]
 800b552:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10a      	bne.n	800b570 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	623b      	str	r3, [r7, #32]
}
 800b56c:	bf00      	nop
 800b56e:	e7fe      	b.n	800b56e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b572:	2b00      	cmp	r3, #0
 800b574:	d10a      	bne.n	800b58c <xTaskCreateStatic+0x46>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	61fb      	str	r3, [r7, #28]
}
 800b588:	bf00      	nop
 800b58a:	e7fe      	b.n	800b58a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b58c:	2354      	movs	r3, #84	; 0x54
 800b58e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	2b54      	cmp	r3, #84	; 0x54
 800b594:	d00a      	beq.n	800b5ac <xTaskCreateStatic+0x66>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	61bb      	str	r3, [r7, #24]
}
 800b5a8:	bf00      	nop
 800b5aa:	e7fe      	b.n	800b5aa <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d01e      	beq.n	800b5f0 <xTaskCreateStatic+0xaa>
 800b5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d01b      	beq.n	800b5f0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c4:	2202      	movs	r2, #2
 800b5c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	9303      	str	r3, [sp, #12]
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	9302      	str	r3, [sp, #8]
 800b5d2:	f107 0314 	add.w	r3, r7, #20
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	68b9      	ldr	r1, [r7, #8]
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f000 f850 	bl	800b688 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5ea:	f000 f8d5 	bl	800b798 <prvAddNewTaskToReadyList>
 800b5ee:	e001      	b.n	800b5f4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5f4:	697b      	ldr	r3, [r7, #20]
	}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3728      	adds	r7, #40	; 0x28
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b08c      	sub	sp, #48	; 0x30
 800b602:	af04      	add	r7, sp, #16
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	60b9      	str	r1, [r7, #8]
 800b608:	603b      	str	r3, [r7, #0]
 800b60a:	4613      	mov	r3, r2
 800b60c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b60e:	88fb      	ldrh	r3, [r7, #6]
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4618      	mov	r0, r3
 800b614:	f001 fd92 	bl	800d13c <pvPortMalloc>
 800b618:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00e      	beq.n	800b63e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b620:	2054      	movs	r0, #84	; 0x54
 800b622:	f001 fd8b 	bl	800d13c <pvPortMalloc>
 800b626:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	631a      	str	r2, [r3, #48]	; 0x30
 800b634:	e005      	b.n	800b642 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b636:	6978      	ldr	r0, [r7, #20]
 800b638:	f001 fe44 	bl	800d2c4 <vPortFree>
 800b63c:	e001      	b.n	800b642 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b63e:	2300      	movs	r3, #0
 800b640:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d017      	beq.n	800b678 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	2200      	movs	r2, #0
 800b64c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b650:	88fa      	ldrh	r2, [r7, #6]
 800b652:	2300      	movs	r3, #0
 800b654:	9303      	str	r3, [sp, #12]
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	9302      	str	r3, [sp, #8]
 800b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65c:	9301      	str	r3, [sp, #4]
 800b65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b660:	9300      	str	r3, [sp, #0]
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	68b9      	ldr	r1, [r7, #8]
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f000 f80e 	bl	800b688 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b66c:	69f8      	ldr	r0, [r7, #28]
 800b66e:	f000 f893 	bl	800b798 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b672:	2301      	movs	r3, #1
 800b674:	61bb      	str	r3, [r7, #24]
 800b676:	e002      	b.n	800b67e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b678:	f04f 33ff 	mov.w	r3, #4294967295
 800b67c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b67e:	69bb      	ldr	r3, [r7, #24]
	}
 800b680:	4618      	mov	r0, r3
 800b682:	3720      	adds	r7, #32
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
 800b694:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	461a      	mov	r2, r3
 800b6a0:	21a5      	movs	r1, #165	; 0xa5
 800b6a2:	f001 ff8b 	bl	800d5bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	4413      	add	r3, r2
 800b6b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	f023 0307 	bic.w	r3, r3, #7
 800b6be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	f003 0307 	and.w	r3, r3, #7
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00a      	beq.n	800b6e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ce:	f383 8811 	msr	BASEPRI, r3
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	617b      	str	r3, [r7, #20]
}
 800b6dc:	bf00      	nop
 800b6de:	e7fe      	b.n	800b6de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	61fb      	str	r3, [r7, #28]
 800b6e4:	e012      	b.n	800b70c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	7819      	ldrb	r1, [r3, #0]
 800b6ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	3334      	adds	r3, #52	; 0x34
 800b6f6:	460a      	mov	r2, r1
 800b6f8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b6fa:	68ba      	ldr	r2, [r7, #8]
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	4413      	add	r3, r2
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d006      	beq.n	800b714 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	3301      	adds	r3, #1
 800b70a:	61fb      	str	r3, [r7, #28]
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	2b0f      	cmp	r3, #15
 800b710:	d9e9      	bls.n	800b6e6 <prvInitialiseNewTask+0x5e>
 800b712:	e000      	b.n	800b716 <prvInitialiseNewTask+0x8e>
		{
			break;
 800b714:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b720:	2b06      	cmp	r3, #6
 800b722:	d901      	bls.n	800b728 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b724:	2306      	movs	r3, #6
 800b726:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b72c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b732:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	2200      	movs	r2, #0
 800b738:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	3304      	adds	r3, #4
 800b73e:	4618      	mov	r0, r3
 800b740:	f7fe fe2d 	bl	800a39e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	3318      	adds	r3, #24
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fe fe28 	bl	800a39e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b752:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b756:	f1c3 0207 	rsb	r2, r3, #7
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b762:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b766:	2200      	movs	r2, #0
 800b768:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	68f9      	ldr	r1, [r7, #12]
 800b776:	69b8      	ldr	r0, [r7, #24]
 800b778:	f001 faee 	bl	800cd58 <pxPortInitialiseStack>
 800b77c:	4602      	mov	r2, r0
 800b77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b780:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b78e:	bf00      	nop
 800b790:	3720      	adds	r7, #32
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
	...

0800b798 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7a0:	f001 fbcc 	bl	800cf3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7a4:	4b2a      	ldr	r3, [pc, #168]	; (800b850 <prvAddNewTaskToReadyList+0xb8>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	4a29      	ldr	r2, [pc, #164]	; (800b850 <prvAddNewTaskToReadyList+0xb8>)
 800b7ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7ae:	4b29      	ldr	r3, [pc, #164]	; (800b854 <prvAddNewTaskToReadyList+0xbc>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d109      	bne.n	800b7ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7b6:	4a27      	ldr	r2, [pc, #156]	; (800b854 <prvAddNewTaskToReadyList+0xbc>)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7bc:	4b24      	ldr	r3, [pc, #144]	; (800b850 <prvAddNewTaskToReadyList+0xb8>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d110      	bne.n	800b7e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7c4:	f000 fc42 	bl	800c04c <prvInitialiseTaskLists>
 800b7c8:	e00d      	b.n	800b7e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7ca:	4b23      	ldr	r3, [pc, #140]	; (800b858 <prvAddNewTaskToReadyList+0xc0>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d109      	bne.n	800b7e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7d2:	4b20      	ldr	r3, [pc, #128]	; (800b854 <prvAddNewTaskToReadyList+0xbc>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d802      	bhi.n	800b7e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7e0:	4a1c      	ldr	r2, [pc, #112]	; (800b854 <prvAddNewTaskToReadyList+0xbc>)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7e6:	4b1d      	ldr	r3, [pc, #116]	; (800b85c <prvAddNewTaskToReadyList+0xc4>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	4a1b      	ldr	r2, [pc, #108]	; (800b85c <prvAddNewTaskToReadyList+0xc4>)
 800b7ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	409a      	lsls	r2, r3
 800b7f8:	4b19      	ldr	r3, [pc, #100]	; (800b860 <prvAddNewTaskToReadyList+0xc8>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	4a18      	ldr	r2, [pc, #96]	; (800b860 <prvAddNewTaskToReadyList+0xc8>)
 800b800:	6013      	str	r3, [r2, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b806:	4613      	mov	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4a15      	ldr	r2, [pc, #84]	; (800b864 <prvAddNewTaskToReadyList+0xcc>)
 800b810:	441a      	add	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	3304      	adds	r3, #4
 800b816:	4619      	mov	r1, r3
 800b818:	4610      	mov	r0, r2
 800b81a:	f7fe fdcc 	bl	800a3b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b81e:	f001 fbbd 	bl	800cf9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b822:	4b0d      	ldr	r3, [pc, #52]	; (800b858 <prvAddNewTaskToReadyList+0xc0>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00e      	beq.n	800b848 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b82a:	4b0a      	ldr	r3, [pc, #40]	; (800b854 <prvAddNewTaskToReadyList+0xbc>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b834:	429a      	cmp	r2, r3
 800b836:	d207      	bcs.n	800b848 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b838:	4b0b      	ldr	r3, [pc, #44]	; (800b868 <prvAddNewTaskToReadyList+0xd0>)
 800b83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b848:	bf00      	nop
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	20001480 	.word	0x20001480
 800b854:	20001380 	.word	0x20001380
 800b858:	2000148c 	.word	0x2000148c
 800b85c:	2000149c 	.word	0x2000149c
 800b860:	20001488 	.word	0x20001488
 800b864:	20001384 	.word	0x20001384
 800b868:	e000ed04 	.word	0xe000ed04

0800b86c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b874:	2300      	movs	r3, #0
 800b876:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d017      	beq.n	800b8ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b87e:	4b13      	ldr	r3, [pc, #76]	; (800b8cc <vTaskDelay+0x60>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00a      	beq.n	800b89c <vTaskDelay+0x30>
	__asm volatile
 800b886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88a:	f383 8811 	msr	BASEPRI, r3
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f3bf 8f4f 	dsb	sy
 800b896:	60bb      	str	r3, [r7, #8]
}
 800b898:	bf00      	nop
 800b89a:	e7fe      	b.n	800b89a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b89c:	f000 f880 	bl	800b9a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fe6a 	bl	800c57c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8a8:	f000 f888 	bl	800b9bc <xTaskResumeAll>
 800b8ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d107      	bne.n	800b8c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b8b4:	4b06      	ldr	r3, [pc, #24]	; (800b8d0 <vTaskDelay+0x64>)
 800b8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ba:	601a      	str	r2, [r3, #0]
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8c4:	bf00      	nop
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	200014a8 	.word	0x200014a8
 800b8d0:	e000ed04 	.word	0xe000ed04

0800b8d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08a      	sub	sp, #40	; 0x28
 800b8d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8e2:	463a      	mov	r2, r7
 800b8e4:	1d39      	adds	r1, r7, #4
 800b8e6:	f107 0308 	add.w	r3, r7, #8
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7f7 fdc0 	bl	8003470 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8f0:	6839      	ldr	r1, [r7, #0]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	9202      	str	r2, [sp, #8]
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	2300      	movs	r3, #0
 800b900:	460a      	mov	r2, r1
 800b902:	4921      	ldr	r1, [pc, #132]	; (800b988 <vTaskStartScheduler+0xb4>)
 800b904:	4821      	ldr	r0, [pc, #132]	; (800b98c <vTaskStartScheduler+0xb8>)
 800b906:	f7ff fe1e 	bl	800b546 <xTaskCreateStatic>
 800b90a:	4603      	mov	r3, r0
 800b90c:	4a20      	ldr	r2, [pc, #128]	; (800b990 <vTaskStartScheduler+0xbc>)
 800b90e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b910:	4b1f      	ldr	r3, [pc, #124]	; (800b990 <vTaskStartScheduler+0xbc>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b918:	2301      	movs	r3, #1
 800b91a:	617b      	str	r3, [r7, #20]
 800b91c:	e001      	b.n	800b922 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b91e:	2300      	movs	r3, #0
 800b920:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	2b01      	cmp	r3, #1
 800b926:	d102      	bne.n	800b92e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b928:	f000 fe8e 	bl	800c648 <xTimerCreateTimerTask>
 800b92c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d116      	bne.n	800b962 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	613b      	str	r3, [r7, #16]
}
 800b946:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b948:	4b12      	ldr	r3, [pc, #72]	; (800b994 <vTaskStartScheduler+0xc0>)
 800b94a:	f04f 32ff 	mov.w	r2, #4294967295
 800b94e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b950:	4b11      	ldr	r3, [pc, #68]	; (800b998 <vTaskStartScheduler+0xc4>)
 800b952:	2201      	movs	r2, #1
 800b954:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b956:	4b11      	ldr	r3, [pc, #68]	; (800b99c <vTaskStartScheduler+0xc8>)
 800b958:	2200      	movs	r2, #0
 800b95a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b95c:	f001 fa7c 	bl	800ce58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b960:	e00e      	b.n	800b980 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b968:	d10a      	bne.n	800b980 <vTaskStartScheduler+0xac>
	__asm volatile
 800b96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	60fb      	str	r3, [r7, #12]
}
 800b97c:	bf00      	nop
 800b97e:	e7fe      	b.n	800b97e <vTaskStartScheduler+0xaa>
}
 800b980:	bf00      	nop
 800b982:	3718      	adds	r7, #24
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	080119e0 	.word	0x080119e0
 800b98c:	0800c01d 	.word	0x0800c01d
 800b990:	200014a4 	.word	0x200014a4
 800b994:	200014a0 	.word	0x200014a0
 800b998:	2000148c 	.word	0x2000148c
 800b99c:	20001484 	.word	0x20001484

0800b9a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b9a4:	4b04      	ldr	r3, [pc, #16]	; (800b9b8 <vTaskSuspendAll+0x18>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	4a03      	ldr	r2, [pc, #12]	; (800b9b8 <vTaskSuspendAll+0x18>)
 800b9ac:	6013      	str	r3, [r2, #0]
}
 800b9ae:	bf00      	nop
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bc80      	pop	{r7}
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	200014a8 	.word	0x200014a8

0800b9bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9ca:	4b41      	ldr	r3, [pc, #260]	; (800bad0 <xTaskResumeAll+0x114>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10a      	bne.n	800b9e8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d6:	f383 8811 	msr	BASEPRI, r3
 800b9da:	f3bf 8f6f 	isb	sy
 800b9de:	f3bf 8f4f 	dsb	sy
 800b9e2:	603b      	str	r3, [r7, #0]
}
 800b9e4:	bf00      	nop
 800b9e6:	e7fe      	b.n	800b9e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9e8:	f001 faa8 	bl	800cf3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9ec:	4b38      	ldr	r3, [pc, #224]	; (800bad0 <xTaskResumeAll+0x114>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	4a37      	ldr	r2, [pc, #220]	; (800bad0 <xTaskResumeAll+0x114>)
 800b9f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9f6:	4b36      	ldr	r3, [pc, #216]	; (800bad0 <xTaskResumeAll+0x114>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d161      	bne.n	800bac2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9fe:	4b35      	ldr	r3, [pc, #212]	; (800bad4 <xTaskResumeAll+0x118>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d05d      	beq.n	800bac2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba06:	e02e      	b.n	800ba66 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ba08:	4b33      	ldr	r3, [pc, #204]	; (800bad8 <xTaskResumeAll+0x11c>)
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	3318      	adds	r3, #24
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fe fd29 	bl	800a46c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fe fd24 	bl	800a46c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba28:	2201      	movs	r2, #1
 800ba2a:	409a      	lsls	r2, r3
 800ba2c:	4b2b      	ldr	r3, [pc, #172]	; (800badc <xTaskResumeAll+0x120>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4313      	orrs	r3, r2
 800ba32:	4a2a      	ldr	r2, [pc, #168]	; (800badc <xTaskResumeAll+0x120>)
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4413      	add	r3, r2
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	4a27      	ldr	r2, [pc, #156]	; (800bae0 <xTaskResumeAll+0x124>)
 800ba44:	441a      	add	r2, r3
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	3304      	adds	r3, #4
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	f7fe fcb2 	bl	800a3b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba56:	4b23      	ldr	r3, [pc, #140]	; (800bae4 <xTaskResumeAll+0x128>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d302      	bcc.n	800ba66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ba60:	4b21      	ldr	r3, [pc, #132]	; (800bae8 <xTaskResumeAll+0x12c>)
 800ba62:	2201      	movs	r2, #1
 800ba64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba66:	4b1c      	ldr	r3, [pc, #112]	; (800bad8 <xTaskResumeAll+0x11c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1cc      	bne.n	800ba08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d001      	beq.n	800ba78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba74:	f000 fb88 	bl	800c188 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ba78:	4b1c      	ldr	r3, [pc, #112]	; (800baec <xTaskResumeAll+0x130>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d010      	beq.n	800baa6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba84:	f000 f856 	bl	800bb34 <xTaskIncrementTick>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d002      	beq.n	800ba94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ba8e:	4b16      	ldr	r3, [pc, #88]	; (800bae8 <xTaskResumeAll+0x12c>)
 800ba90:	2201      	movs	r2, #1
 800ba92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	3b01      	subs	r3, #1
 800ba98:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1f1      	bne.n	800ba84 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800baa0:	4b12      	ldr	r3, [pc, #72]	; (800baec <xTaskResumeAll+0x130>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800baa6:	4b10      	ldr	r3, [pc, #64]	; (800bae8 <xTaskResumeAll+0x12c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d009      	beq.n	800bac2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800baae:	2301      	movs	r3, #1
 800bab0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bab2:	4b0f      	ldr	r3, [pc, #60]	; (800baf0 <xTaskResumeAll+0x134>)
 800bab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab8:	601a      	str	r2, [r3, #0]
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bac2:	f001 fa6b 	bl	800cf9c <vPortExitCritical>

	return xAlreadyYielded;
 800bac6:	68bb      	ldr	r3, [r7, #8]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	200014a8 	.word	0x200014a8
 800bad4:	20001480 	.word	0x20001480
 800bad8:	20001440 	.word	0x20001440
 800badc:	20001488 	.word	0x20001488
 800bae0:	20001384 	.word	0x20001384
 800bae4:	20001380 	.word	0x20001380
 800bae8:	20001494 	.word	0x20001494
 800baec:	20001490 	.word	0x20001490
 800baf0:	e000ed04 	.word	0xe000ed04

0800baf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bafa:	4b04      	ldr	r3, [pc, #16]	; (800bb0c <xTaskGetTickCount+0x18>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb00:	687b      	ldr	r3, [r7, #4]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bc80      	pop	{r7}
 800bb0a:	4770      	bx	lr
 800bb0c:	20001484 	.word	0x20001484

0800bb10 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb16:	f001 fad3 	bl	800d0c0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bb1e:	4b04      	ldr	r3, [pc, #16]	; (800bb30 <xTaskGetTickCountFromISR+0x20>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb24:	683b      	ldr	r3, [r7, #0]
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3708      	adds	r7, #8
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	20001484 	.word	0x20001484

0800bb34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb3e:	4b51      	ldr	r3, [pc, #324]	; (800bc84 <xTaskIncrementTick+0x150>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	f040 808d 	bne.w	800bc62 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb48:	4b4f      	ldr	r3, [pc, #316]	; (800bc88 <xTaskIncrementTick+0x154>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb50:	4a4d      	ldr	r2, [pc, #308]	; (800bc88 <xTaskIncrementTick+0x154>)
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d120      	bne.n	800bb9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb5c:	4b4b      	ldr	r3, [pc, #300]	; (800bc8c <xTaskIncrementTick+0x158>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00a      	beq.n	800bb7c <xTaskIncrementTick+0x48>
	__asm volatile
 800bb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6a:	f383 8811 	msr	BASEPRI, r3
 800bb6e:	f3bf 8f6f 	isb	sy
 800bb72:	f3bf 8f4f 	dsb	sy
 800bb76:	603b      	str	r3, [r7, #0]
}
 800bb78:	bf00      	nop
 800bb7a:	e7fe      	b.n	800bb7a <xTaskIncrementTick+0x46>
 800bb7c:	4b43      	ldr	r3, [pc, #268]	; (800bc8c <xTaskIncrementTick+0x158>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	60fb      	str	r3, [r7, #12]
 800bb82:	4b43      	ldr	r3, [pc, #268]	; (800bc90 <xTaskIncrementTick+0x15c>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a41      	ldr	r2, [pc, #260]	; (800bc8c <xTaskIncrementTick+0x158>)
 800bb88:	6013      	str	r3, [r2, #0]
 800bb8a:	4a41      	ldr	r2, [pc, #260]	; (800bc90 <xTaskIncrementTick+0x15c>)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6013      	str	r3, [r2, #0]
 800bb90:	4b40      	ldr	r3, [pc, #256]	; (800bc94 <xTaskIncrementTick+0x160>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	3301      	adds	r3, #1
 800bb96:	4a3f      	ldr	r2, [pc, #252]	; (800bc94 <xTaskIncrementTick+0x160>)
 800bb98:	6013      	str	r3, [r2, #0]
 800bb9a:	f000 faf5 	bl	800c188 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb9e:	4b3e      	ldr	r3, [pc, #248]	; (800bc98 <xTaskIncrementTick+0x164>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d34d      	bcc.n	800bc44 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bba8:	4b38      	ldr	r3, [pc, #224]	; (800bc8c <xTaskIncrementTick+0x158>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <xTaskIncrementTick+0x82>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e000      	b.n	800bbb8 <xTaskIncrementTick+0x84>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d004      	beq.n	800bbc6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbbc:	4b36      	ldr	r3, [pc, #216]	; (800bc98 <xTaskIncrementTick+0x164>)
 800bbbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc2:	601a      	str	r2, [r3, #0]
					break;
 800bbc4:	e03e      	b.n	800bc44 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bbc6:	4b31      	ldr	r3, [pc, #196]	; (800bc8c <xTaskIncrementTick+0x158>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d203      	bcs.n	800bbe6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bbde:	4a2e      	ldr	r2, [pc, #184]	; (800bc98 <xTaskIncrementTick+0x164>)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6013      	str	r3, [r2, #0]
						break;
 800bbe4:	e02e      	b.n	800bc44 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fe fc3e 	bl	800a46c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d004      	beq.n	800bc02 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	3318      	adds	r3, #24
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fe fc35 	bl	800a46c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc06:	2201      	movs	r2, #1
 800bc08:	409a      	lsls	r2, r3
 800bc0a:	4b24      	ldr	r3, [pc, #144]	; (800bc9c <xTaskIncrementTick+0x168>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	4a22      	ldr	r2, [pc, #136]	; (800bc9c <xTaskIncrementTick+0x168>)
 800bc12:	6013      	str	r3, [r2, #0]
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc18:	4613      	mov	r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4413      	add	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4a1f      	ldr	r2, [pc, #124]	; (800bca0 <xTaskIncrementTick+0x16c>)
 800bc22:	441a      	add	r2, r3
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	3304      	adds	r3, #4
 800bc28:	4619      	mov	r1, r3
 800bc2a:	4610      	mov	r0, r2
 800bc2c:	f7fe fbc3 	bl	800a3b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc34:	4b1b      	ldr	r3, [pc, #108]	; (800bca4 <xTaskIncrementTick+0x170>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d3b4      	bcc.n	800bba8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc42:	e7b1      	b.n	800bba8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc44:	4b17      	ldr	r3, [pc, #92]	; (800bca4 <xTaskIncrementTick+0x170>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc4a:	4915      	ldr	r1, [pc, #84]	; (800bca0 <xTaskIncrementTick+0x16c>)
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	440b      	add	r3, r1
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d907      	bls.n	800bc6c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	617b      	str	r3, [r7, #20]
 800bc60:	e004      	b.n	800bc6c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bc62:	4b11      	ldr	r3, [pc, #68]	; (800bca8 <xTaskIncrementTick+0x174>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	3301      	adds	r3, #1
 800bc68:	4a0f      	ldr	r2, [pc, #60]	; (800bca8 <xTaskIncrementTick+0x174>)
 800bc6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bc6c:	4b0f      	ldr	r3, [pc, #60]	; (800bcac <xTaskIncrementTick+0x178>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d001      	beq.n	800bc78 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800bc74:	2301      	movs	r3, #1
 800bc76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bc78:	697b      	ldr	r3, [r7, #20]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3718      	adds	r7, #24
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	200014a8 	.word	0x200014a8
 800bc88:	20001484 	.word	0x20001484
 800bc8c:	20001438 	.word	0x20001438
 800bc90:	2000143c 	.word	0x2000143c
 800bc94:	20001498 	.word	0x20001498
 800bc98:	200014a0 	.word	0x200014a0
 800bc9c:	20001488 	.word	0x20001488
 800bca0:	20001384 	.word	0x20001384
 800bca4:	20001380 	.word	0x20001380
 800bca8:	20001490 	.word	0x20001490
 800bcac:	20001494 	.word	0x20001494

0800bcb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b087      	sub	sp, #28
 800bcb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bcb6:	4b26      	ldr	r3, [pc, #152]	; (800bd50 <vTaskSwitchContext+0xa0>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d003      	beq.n	800bcc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bcbe:	4b25      	ldr	r3, [pc, #148]	; (800bd54 <vTaskSwitchContext+0xa4>)
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bcc4:	e03f      	b.n	800bd46 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800bcc6:	4b23      	ldr	r3, [pc, #140]	; (800bd54 <vTaskSwitchContext+0xa4>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bccc:	4b22      	ldr	r3, [pc, #136]	; (800bd58 <vTaskSwitchContext+0xa8>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	fab3 f383 	clz	r3, r3
 800bcd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bcda:	7afb      	ldrb	r3, [r7, #11]
 800bcdc:	f1c3 031f 	rsb	r3, r3, #31
 800bce0:	617b      	str	r3, [r7, #20]
 800bce2:	491e      	ldr	r1, [pc, #120]	; (800bd5c <vTaskSwitchContext+0xac>)
 800bce4:	697a      	ldr	r2, [r7, #20]
 800bce6:	4613      	mov	r3, r2
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	4413      	add	r3, r2
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	440b      	add	r3, r1
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10a      	bne.n	800bd0c <vTaskSwitchContext+0x5c>
	__asm volatile
 800bcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfa:	f383 8811 	msr	BASEPRI, r3
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	607b      	str	r3, [r7, #4]
}
 800bd08:	bf00      	nop
 800bd0a:	e7fe      	b.n	800bd0a <vTaskSwitchContext+0x5a>
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	4a11      	ldr	r2, [pc, #68]	; (800bd5c <vTaskSwitchContext+0xac>)
 800bd18:	4413      	add	r3, r2
 800bd1a:	613b      	str	r3, [r7, #16]
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	685a      	ldr	r2, [r3, #4]
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	605a      	str	r2, [r3, #4]
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	685a      	ldr	r2, [r3, #4]
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	3308      	adds	r3, #8
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d104      	bne.n	800bd3c <vTaskSwitchContext+0x8c>
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	685a      	ldr	r2, [r3, #4]
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	605a      	str	r2, [r3, #4]
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	4a07      	ldr	r2, [pc, #28]	; (800bd60 <vTaskSwitchContext+0xb0>)
 800bd44:	6013      	str	r3, [r2, #0]
}
 800bd46:	bf00      	nop
 800bd48:	371c      	adds	r7, #28
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bc80      	pop	{r7}
 800bd4e:	4770      	bx	lr
 800bd50:	200014a8 	.word	0x200014a8
 800bd54:	20001494 	.word	0x20001494
 800bd58:	20001488 	.word	0x20001488
 800bd5c:	20001384 	.word	0x20001384
 800bd60:	20001380 	.word	0x20001380

0800bd64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10a      	bne.n	800bd8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	60fb      	str	r3, [r7, #12]
}
 800bd86:	bf00      	nop
 800bd88:	e7fe      	b.n	800bd88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd8a:	4b07      	ldr	r3, [pc, #28]	; (800bda8 <vTaskPlaceOnEventList+0x44>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	3318      	adds	r3, #24
 800bd90:	4619      	mov	r1, r3
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f7fe fb32 	bl	800a3fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd98:	2101      	movs	r1, #1
 800bd9a:	6838      	ldr	r0, [r7, #0]
 800bd9c:	f000 fbee 	bl	800c57c <prvAddCurrentTaskToDelayedList>
}
 800bda0:	bf00      	nop
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	20001380 	.word	0x20001380

0800bdac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10a      	bne.n	800bdd4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	617b      	str	r3, [r7, #20]
}
 800bdd0:	bf00      	nop
 800bdd2:	e7fe      	b.n	800bdd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdd4:	4b0a      	ldr	r3, [pc, #40]	; (800be00 <vTaskPlaceOnEventListRestricted+0x54>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3318      	adds	r3, #24
 800bdda:	4619      	mov	r1, r3
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f7fe faea 	bl	800a3b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d002      	beq.n	800bdee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bde8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bdee:	6879      	ldr	r1, [r7, #4]
 800bdf0:	68b8      	ldr	r0, [r7, #8]
 800bdf2:	f000 fbc3 	bl	800c57c <prvAddCurrentTaskToDelayedList>
	}
 800bdf6:	bf00      	nop
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	20001380 	.word	0x20001380

0800be04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d10a      	bne.n	800be30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800be1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1e:	f383 8811 	msr	BASEPRI, r3
 800be22:	f3bf 8f6f 	isb	sy
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	60fb      	str	r3, [r7, #12]
}
 800be2c:	bf00      	nop
 800be2e:	e7fe      	b.n	800be2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	3318      	adds	r3, #24
 800be34:	4618      	mov	r0, r3
 800be36:	f7fe fb19 	bl	800a46c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be3a:	4b1d      	ldr	r3, [pc, #116]	; (800beb0 <xTaskRemoveFromEventList+0xac>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d11c      	bne.n	800be7c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	3304      	adds	r3, #4
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe fb10 	bl	800a46c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be50:	2201      	movs	r2, #1
 800be52:	409a      	lsls	r2, r3
 800be54:	4b17      	ldr	r3, [pc, #92]	; (800beb4 <xTaskRemoveFromEventList+0xb0>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4313      	orrs	r3, r2
 800be5a:	4a16      	ldr	r2, [pc, #88]	; (800beb4 <xTaskRemoveFromEventList+0xb0>)
 800be5c:	6013      	str	r3, [r2, #0]
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be62:	4613      	mov	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	4413      	add	r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	4a13      	ldr	r2, [pc, #76]	; (800beb8 <xTaskRemoveFromEventList+0xb4>)
 800be6c:	441a      	add	r2, r3
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	3304      	adds	r3, #4
 800be72:	4619      	mov	r1, r3
 800be74:	4610      	mov	r0, r2
 800be76:	f7fe fa9e 	bl	800a3b6 <vListInsertEnd>
 800be7a:	e005      	b.n	800be88 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	3318      	adds	r3, #24
 800be80:	4619      	mov	r1, r3
 800be82:	480e      	ldr	r0, [pc, #56]	; (800bebc <xTaskRemoveFromEventList+0xb8>)
 800be84:	f7fe fa97 	bl	800a3b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be8c:	4b0c      	ldr	r3, [pc, #48]	; (800bec0 <xTaskRemoveFromEventList+0xbc>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be92:	429a      	cmp	r2, r3
 800be94:	d905      	bls.n	800bea2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be96:	2301      	movs	r3, #1
 800be98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be9a:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <xTaskRemoveFromEventList+0xc0>)
 800be9c:	2201      	movs	r2, #1
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	e001      	b.n	800bea6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bea2:	2300      	movs	r3, #0
 800bea4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bea6:	697b      	ldr	r3, [r7, #20]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3718      	adds	r7, #24
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	200014a8 	.word	0x200014a8
 800beb4:	20001488 	.word	0x20001488
 800beb8:	20001384 	.word	0x20001384
 800bebc:	20001440 	.word	0x20001440
 800bec0:	20001380 	.word	0x20001380
 800bec4:	20001494 	.word	0x20001494

0800bec8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d10a      	bne.n	800beec <vTaskSetTimeOutState+0x24>
	__asm volatile
 800bed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	60fb      	str	r3, [r7, #12]
}
 800bee8:	bf00      	nop
 800beea:	e7fe      	b.n	800beea <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800beec:	f001 f826 	bl	800cf3c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bef0:	4b06      	ldr	r3, [pc, #24]	; (800bf0c <vTaskSetTimeOutState+0x44>)
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800bef8:	4b05      	ldr	r3, [pc, #20]	; (800bf10 <vTaskSetTimeOutState+0x48>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800bf00:	f001 f84c 	bl	800cf9c <vPortExitCritical>
}
 800bf04:	bf00      	nop
 800bf06:	3710      	adds	r7, #16
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	20001498 	.word	0x20001498
 800bf10:	20001484 	.word	0x20001484

0800bf14 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf1c:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <vTaskInternalSetTimeOutState+0x24>)
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf24:	4b05      	ldr	r3, [pc, #20]	; (800bf3c <vTaskInternalSetTimeOutState+0x28>)
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	605a      	str	r2, [r3, #4]
}
 800bf2c:	bf00      	nop
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bc80      	pop	{r7}
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	20001498 	.word	0x20001498
 800bf3c:	20001484 	.word	0x20001484

0800bf40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10a      	bne.n	800bf66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	613b      	str	r3, [r7, #16]
}
 800bf62:	bf00      	nop
 800bf64:	e7fe      	b.n	800bf64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10a      	bne.n	800bf82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf70:	f383 8811 	msr	BASEPRI, r3
 800bf74:	f3bf 8f6f 	isb	sy
 800bf78:	f3bf 8f4f 	dsb	sy
 800bf7c:	60fb      	str	r3, [r7, #12]
}
 800bf7e:	bf00      	nop
 800bf80:	e7fe      	b.n	800bf80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bf82:	f000 ffdb 	bl	800cf3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bf86:	4b1d      	ldr	r3, [pc, #116]	; (800bffc <xTaskCheckForTimeOut+0xbc>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	69ba      	ldr	r2, [r7, #24]
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf9e:	d102      	bne.n	800bfa6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	61fb      	str	r3, [r7, #28]
 800bfa4:	e023      	b.n	800bfee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	4b15      	ldr	r3, [pc, #84]	; (800c000 <xTaskCheckForTimeOut+0xc0>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d007      	beq.n	800bfc2 <xTaskCheckForTimeOut+0x82>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	69ba      	ldr	r2, [r7, #24]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d302      	bcc.n	800bfc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	61fb      	str	r3, [r7, #28]
 800bfc0:	e015      	b.n	800bfee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d20b      	bcs.n	800bfe4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	1ad2      	subs	r2, r2, r3
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f7ff ff9b 	bl	800bf14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	61fb      	str	r3, [r7, #28]
 800bfe2:	e004      	b.n	800bfee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bfea:	2301      	movs	r3, #1
 800bfec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bfee:	f000 ffd5 	bl	800cf9c <vPortExitCritical>

	return xReturn;
 800bff2:	69fb      	ldr	r3, [r7, #28]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3720      	adds	r7, #32
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	20001484 	.word	0x20001484
 800c000:	20001498 	.word	0x20001498

0800c004 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c004:	b480      	push	{r7}
 800c006:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c008:	4b03      	ldr	r3, [pc, #12]	; (800c018 <vTaskMissedYield+0x14>)
 800c00a:	2201      	movs	r2, #1
 800c00c:	601a      	str	r2, [r3, #0]
}
 800c00e:	bf00      	nop
 800c010:	46bd      	mov	sp, r7
 800c012:	bc80      	pop	{r7}
 800c014:	4770      	bx	lr
 800c016:	bf00      	nop
 800c018:	20001494 	.word	0x20001494

0800c01c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c024:	f000 f852 	bl	800c0cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c028:	4b06      	ldr	r3, [pc, #24]	; (800c044 <prvIdleTask+0x28>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d9f9      	bls.n	800c024 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c030:	4b05      	ldr	r3, [pc, #20]	; (800c048 <prvIdleTask+0x2c>)
 800c032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c036:	601a      	str	r2, [r3, #0]
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c040:	e7f0      	b.n	800c024 <prvIdleTask+0x8>
 800c042:	bf00      	nop
 800c044:	20001384 	.word	0x20001384
 800c048:	e000ed04 	.word	0xe000ed04

0800c04c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c052:	2300      	movs	r3, #0
 800c054:	607b      	str	r3, [r7, #4]
 800c056:	e00c      	b.n	800c072 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	4613      	mov	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	4413      	add	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4a12      	ldr	r2, [pc, #72]	; (800c0ac <prvInitialiseTaskLists+0x60>)
 800c064:	4413      	add	r3, r2
 800c066:	4618      	mov	r0, r3
 800c068:	f7fe f97a 	bl	800a360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	3301      	adds	r3, #1
 800c070:	607b      	str	r3, [r7, #4]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2b06      	cmp	r3, #6
 800c076:	d9ef      	bls.n	800c058 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c078:	480d      	ldr	r0, [pc, #52]	; (800c0b0 <prvInitialiseTaskLists+0x64>)
 800c07a:	f7fe f971 	bl	800a360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c07e:	480d      	ldr	r0, [pc, #52]	; (800c0b4 <prvInitialiseTaskLists+0x68>)
 800c080:	f7fe f96e 	bl	800a360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c084:	480c      	ldr	r0, [pc, #48]	; (800c0b8 <prvInitialiseTaskLists+0x6c>)
 800c086:	f7fe f96b 	bl	800a360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c08a:	480c      	ldr	r0, [pc, #48]	; (800c0bc <prvInitialiseTaskLists+0x70>)
 800c08c:	f7fe f968 	bl	800a360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c090:	480b      	ldr	r0, [pc, #44]	; (800c0c0 <prvInitialiseTaskLists+0x74>)
 800c092:	f7fe f965 	bl	800a360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c096:	4b0b      	ldr	r3, [pc, #44]	; (800c0c4 <prvInitialiseTaskLists+0x78>)
 800c098:	4a05      	ldr	r2, [pc, #20]	; (800c0b0 <prvInitialiseTaskLists+0x64>)
 800c09a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c09c:	4b0a      	ldr	r3, [pc, #40]	; (800c0c8 <prvInitialiseTaskLists+0x7c>)
 800c09e:	4a05      	ldr	r2, [pc, #20]	; (800c0b4 <prvInitialiseTaskLists+0x68>)
 800c0a0:	601a      	str	r2, [r3, #0]
}
 800c0a2:	bf00      	nop
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	20001384 	.word	0x20001384
 800c0b0:	20001410 	.word	0x20001410
 800c0b4:	20001424 	.word	0x20001424
 800c0b8:	20001440 	.word	0x20001440
 800c0bc:	20001454 	.word	0x20001454
 800c0c0:	2000146c 	.word	0x2000146c
 800c0c4:	20001438 	.word	0x20001438
 800c0c8:	2000143c 	.word	0x2000143c

0800c0cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0d2:	e019      	b.n	800c108 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c0d4:	f000 ff32 	bl	800cf3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c0d8:	4b10      	ldr	r3, [pc, #64]	; (800c11c <prvCheckTasksWaitingTermination+0x50>)
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	3304      	adds	r3, #4
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7fe f9c1 	bl	800a46c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c0ea:	4b0d      	ldr	r3, [pc, #52]	; (800c120 <prvCheckTasksWaitingTermination+0x54>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	4a0b      	ldr	r2, [pc, #44]	; (800c120 <prvCheckTasksWaitingTermination+0x54>)
 800c0f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c0f4:	4b0b      	ldr	r3, [pc, #44]	; (800c124 <prvCheckTasksWaitingTermination+0x58>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	4a0a      	ldr	r2, [pc, #40]	; (800c124 <prvCheckTasksWaitingTermination+0x58>)
 800c0fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c0fe:	f000 ff4d 	bl	800cf9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f810 	bl	800c128 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c108:	4b06      	ldr	r3, [pc, #24]	; (800c124 <prvCheckTasksWaitingTermination+0x58>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1e1      	bne.n	800c0d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c110:	bf00      	nop
 800c112:	bf00      	nop
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	20001454 	.word	0x20001454
 800c120:	20001480 	.word	0x20001480
 800c124:	20001468 	.word	0x20001468

0800c128 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c136:	2b00      	cmp	r3, #0
 800c138:	d108      	bne.n	800c14c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c13e:	4618      	mov	r0, r3
 800c140:	f001 f8c0 	bl	800d2c4 <vPortFree>
				vPortFree( pxTCB );
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f001 f8bd 	bl	800d2c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c14a:	e018      	b.n	800c17e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c152:	2b01      	cmp	r3, #1
 800c154:	d103      	bne.n	800c15e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f001 f8b4 	bl	800d2c4 <vPortFree>
	}
 800c15c:	e00f      	b.n	800c17e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c164:	2b02      	cmp	r3, #2
 800c166:	d00a      	beq.n	800c17e <prvDeleteTCB+0x56>
	__asm volatile
 800c168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	60fb      	str	r3, [r7, #12]
}
 800c17a:	bf00      	nop
 800c17c:	e7fe      	b.n	800c17c <prvDeleteTCB+0x54>
	}
 800c17e:	bf00      	nop
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
	...

0800c188 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c18e:	4b0e      	ldr	r3, [pc, #56]	; (800c1c8 <prvResetNextTaskUnblockTime+0x40>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d101      	bne.n	800c19c <prvResetNextTaskUnblockTime+0x14>
 800c198:	2301      	movs	r3, #1
 800c19a:	e000      	b.n	800c19e <prvResetNextTaskUnblockTime+0x16>
 800c19c:	2300      	movs	r3, #0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d004      	beq.n	800c1ac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c1a2:	4b0a      	ldr	r3, [pc, #40]	; (800c1cc <prvResetNextTaskUnblockTime+0x44>)
 800c1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c1aa:	e008      	b.n	800c1be <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c1ac:	4b06      	ldr	r3, [pc, #24]	; (800c1c8 <prvResetNextTaskUnblockTime+0x40>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	4a04      	ldr	r2, [pc, #16]	; (800c1cc <prvResetNextTaskUnblockTime+0x44>)
 800c1bc:	6013      	str	r3, [r2, #0]
}
 800c1be:	bf00      	nop
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bc80      	pop	{r7}
 800c1c6:	4770      	bx	lr
 800c1c8:	20001438 	.word	0x20001438
 800c1cc:	200014a0 	.word	0x200014a0

0800c1d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c1d6:	4b04      	ldr	r3, [pc, #16]	; (800c1e8 <xTaskGetCurrentTaskHandle+0x18>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c1dc:	687b      	ldr	r3, [r7, #4]
	}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	370c      	adds	r7, #12
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bc80      	pop	{r7}
 800c1e6:	4770      	bx	lr
 800c1e8:	20001380 	.word	0x20001380

0800c1ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c1f2:	4b0b      	ldr	r3, [pc, #44]	; (800c220 <xTaskGetSchedulerState+0x34>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d102      	bne.n	800c200 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	607b      	str	r3, [r7, #4]
 800c1fe:	e008      	b.n	800c212 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c200:	4b08      	ldr	r3, [pc, #32]	; (800c224 <xTaskGetSchedulerState+0x38>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d102      	bne.n	800c20e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c208:	2302      	movs	r3, #2
 800c20a:	607b      	str	r3, [r7, #4]
 800c20c:	e001      	b.n	800c212 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c20e:	2300      	movs	r3, #0
 800c210:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c212:	687b      	ldr	r3, [r7, #4]
	}
 800c214:	4618      	mov	r0, r3
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	bc80      	pop	{r7}
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	2000148c 	.word	0x2000148c
 800c224:	200014a8 	.word	0x200014a8

0800c228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b086      	sub	sp, #24
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c234:	2300      	movs	r3, #0
 800c236:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d06e      	beq.n	800c31c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c23e:	4b3a      	ldr	r3, [pc, #232]	; (800c328 <xTaskPriorityDisinherit+0x100>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	693a      	ldr	r2, [r7, #16]
 800c244:	429a      	cmp	r2, r3
 800c246:	d00a      	beq.n	800c25e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24c:	f383 8811 	msr	BASEPRI, r3
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	60fb      	str	r3, [r7, #12]
}
 800c25a:	bf00      	nop
 800c25c:	e7fe      	b.n	800c25c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c262:	2b00      	cmp	r3, #0
 800c264:	d10a      	bne.n	800c27c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	60bb      	str	r3, [r7, #8]
}
 800c278:	bf00      	nop
 800c27a:	e7fe      	b.n	800c27a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c280:	1e5a      	subs	r2, r3, #1
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c28e:	429a      	cmp	r2, r3
 800c290:	d044      	beq.n	800c31c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c296:	2b00      	cmp	r3, #0
 800c298:	d140      	bne.n	800c31c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	3304      	adds	r3, #4
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fe f8e4 	bl	800a46c <uxListRemove>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d115      	bne.n	800c2d6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ae:	491f      	ldr	r1, [pc, #124]	; (800c32c <xTaskPriorityDisinherit+0x104>)
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	440b      	add	r3, r1
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10a      	bne.n	800c2d6 <xTaskPriorityDisinherit+0xae>
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ca:	43da      	mvns	r2, r3
 800c2cc:	4b18      	ldr	r3, [pc, #96]	; (800c330 <xTaskPriorityDisinherit+0x108>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4013      	ands	r3, r2
 800c2d2:	4a17      	ldr	r2, [pc, #92]	; (800c330 <xTaskPriorityDisinherit+0x108>)
 800c2d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e2:	f1c3 0207 	rsb	r2, r3, #7
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	409a      	lsls	r2, r3
 800c2f2:	4b0f      	ldr	r3, [pc, #60]	; (800c330 <xTaskPriorityDisinherit+0x108>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	4a0d      	ldr	r2, [pc, #52]	; (800c330 <xTaskPriorityDisinherit+0x108>)
 800c2fa:	6013      	str	r3, [r2, #0]
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c300:	4613      	mov	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4413      	add	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4a08      	ldr	r2, [pc, #32]	; (800c32c <xTaskPriorityDisinherit+0x104>)
 800c30a:	441a      	add	r2, r3
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	3304      	adds	r3, #4
 800c310:	4619      	mov	r1, r3
 800c312:	4610      	mov	r0, r2
 800c314:	f7fe f84f 	bl	800a3b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c318:	2301      	movs	r3, #1
 800c31a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c31c:	697b      	ldr	r3, [r7, #20]
	}
 800c31e:	4618      	mov	r0, r3
 800c320:	3718      	adds	r7, #24
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	20001380 	.word	0x20001380
 800c32c:	20001384 	.word	0x20001384
 800c330:	20001488 	.word	0x20001488

0800c334 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c334:	b580      	push	{r7, lr}
 800c336:	b086      	sub	sp, #24
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	607a      	str	r2, [r7, #4]
 800c340:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c342:	f000 fdfb 	bl	800cf3c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c346:	4b26      	ldr	r3, [pc, #152]	; (800c3e0 <xTaskNotifyWait+0xac>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	2b02      	cmp	r3, #2
 800c352:	d01a      	beq.n	800c38a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c354:	4b22      	ldr	r3, [pc, #136]	; (800c3e0 <xTaskNotifyWait+0xac>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	43d2      	mvns	r2, r2
 800c35e:	400a      	ands	r2, r1
 800c360:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c362:	4b1f      	ldr	r3, [pc, #124]	; (800c3e0 <xTaskNotifyWait+0xac>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2201      	movs	r2, #1
 800c368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00b      	beq.n	800c38a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c372:	2101      	movs	r1, #1
 800c374:	6838      	ldr	r0, [r7, #0]
 800c376:	f000 f901 	bl	800c57c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c37a:	4b1a      	ldr	r3, [pc, #104]	; (800c3e4 <xTaskNotifyWait+0xb0>)
 800c37c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c380:	601a      	str	r2, [r3, #0]
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c38a:	f000 fe07 	bl	800cf9c <vPortExitCritical>

		taskENTER_CRITICAL();
 800c38e:	f000 fdd5 	bl	800cf3c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d004      	beq.n	800c3a2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c398:	4b11      	ldr	r3, [pc, #68]	; (800c3e0 <xTaskNotifyWait+0xac>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c3a2:	4b0f      	ldr	r3, [pc, #60]	; (800c3e0 <xTaskNotifyWait+0xac>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	2b02      	cmp	r3, #2
 800c3ae:	d002      	beq.n	800c3b6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	617b      	str	r3, [r7, #20]
 800c3b4:	e008      	b.n	800c3c8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c3b6:	4b0a      	ldr	r3, [pc, #40]	; (800c3e0 <xTaskNotifyWait+0xac>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	43d2      	mvns	r2, r2
 800c3c0:	400a      	ands	r2, r1
 800c3c2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3c8:	4b05      	ldr	r3, [pc, #20]	; (800c3e0 <xTaskNotifyWait+0xac>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800c3d2:	f000 fde3 	bl	800cf9c <vPortExitCritical>

		return xReturn;
 800c3d6:	697b      	ldr	r3, [r7, #20]
	}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3718      	adds	r7, #24
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	20001380 	.word	0x20001380
 800c3e4:	e000ed04 	.word	0xe000ed04

0800c3e8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08a      	sub	sp, #40	; 0x28
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	603b      	str	r3, [r7, #0]
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d10a      	bne.n	800c418 <xTaskGenericNotify+0x30>
	__asm volatile
 800c402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c406:	f383 8811 	msr	BASEPRI, r3
 800c40a:	f3bf 8f6f 	isb	sy
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	61bb      	str	r3, [r7, #24]
}
 800c414:	bf00      	nop
 800c416:	e7fe      	b.n	800c416 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c41c:	f000 fd8e 	bl	800cf3c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d003      	beq.n	800c42e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c426:	6a3b      	ldr	r3, [r7, #32]
 800c428:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c434:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c436:	6a3b      	ldr	r3, [r7, #32]
 800c438:	2202      	movs	r2, #2
 800c43a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800c43e:	79fb      	ldrb	r3, [r7, #7]
 800c440:	2b04      	cmp	r3, #4
 800c442:	d828      	bhi.n	800c496 <xTaskGenericNotify+0xae>
 800c444:	a201      	add	r2, pc, #4	; (adr r2, 800c44c <xTaskGenericNotify+0x64>)
 800c446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c44a:	bf00      	nop
 800c44c:	0800c497 	.word	0x0800c497
 800c450:	0800c461 	.word	0x0800c461
 800c454:	0800c46f 	.word	0x0800c46f
 800c458:	0800c47b 	.word	0x0800c47b
 800c45c:	0800c483 	.word	0x0800c483
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c460:	6a3b      	ldr	r3, [r7, #32]
 800c462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	431a      	orrs	r2, r3
 800c468:	6a3b      	ldr	r3, [r7, #32]
 800c46a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c46c:	e013      	b.n	800c496 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c46e:	6a3b      	ldr	r3, [r7, #32]
 800c470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c472:	1c5a      	adds	r2, r3, #1
 800c474:	6a3b      	ldr	r3, [r7, #32]
 800c476:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c478:	e00d      	b.n	800c496 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	68ba      	ldr	r2, [r7, #8]
 800c47e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c480:	e009      	b.n	800c496 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c482:	7ffb      	ldrb	r3, [r7, #31]
 800c484:	2b02      	cmp	r3, #2
 800c486:	d003      	beq.n	800c490 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c488:	6a3b      	ldr	r3, [r7, #32]
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c48e:	e001      	b.n	800c494 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 800c490:	2300      	movs	r3, #0
 800c492:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c494:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c496:	7ffb      	ldrb	r3, [r7, #31]
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d139      	bne.n	800c510 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c49c:	6a3b      	ldr	r3, [r7, #32]
 800c49e:	3304      	adds	r3, #4
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7fd ffe3 	bl	800a46c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c4a6:	6a3b      	ldr	r3, [r7, #32]
 800c4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	409a      	lsls	r2, r3
 800c4ae:	4b1c      	ldr	r3, [pc, #112]	; (800c520 <xTaskGenericNotify+0x138>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	4a1a      	ldr	r2, [pc, #104]	; (800c520 <xTaskGenericNotify+0x138>)
 800c4b6:	6013      	str	r3, [r2, #0]
 800c4b8:	6a3b      	ldr	r3, [r7, #32]
 800c4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4bc:	4613      	mov	r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	4413      	add	r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4a17      	ldr	r2, [pc, #92]	; (800c524 <xTaskGenericNotify+0x13c>)
 800c4c6:	441a      	add	r2, r3
 800c4c8:	6a3b      	ldr	r3, [r7, #32]
 800c4ca:	3304      	adds	r3, #4
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	4610      	mov	r0, r2
 800c4d0:	f7fd ff71 	bl	800a3b6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00a      	beq.n	800c4f2 <xTaskGenericNotify+0x10a>
	__asm volatile
 800c4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	617b      	str	r3, [r7, #20]
}
 800c4ee:	bf00      	nop
 800c4f0:	e7fe      	b.n	800c4f0 <xTaskGenericNotify+0x108>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4f2:	6a3b      	ldr	r3, [r7, #32]
 800c4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f6:	4b0c      	ldr	r3, [pc, #48]	; (800c528 <xTaskGenericNotify+0x140>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d907      	bls.n	800c510 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c500:	4b0a      	ldr	r3, [pc, #40]	; (800c52c <xTaskGenericNotify+0x144>)
 800c502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c506:	601a      	str	r2, [r3, #0]
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c510:	f000 fd44 	bl	800cf9c <vPortExitCritical>

		return xReturn;
 800c514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c516:	4618      	mov	r0, r3
 800c518:	3728      	adds	r7, #40	; 0x28
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	20001488 	.word	0x20001488
 800c524:	20001384 	.word	0x20001384
 800c528:	20001380 	.word	0x20001380
 800c52c:	e000ed04 	.word	0xe000ed04

0800c530 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d102      	bne.n	800c544 <xTaskNotifyStateClear+0x14>
 800c53e:	4b0e      	ldr	r3, [pc, #56]	; (800c578 <xTaskNotifyStateClear+0x48>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	e000      	b.n	800c546 <xTaskNotifyStateClear+0x16>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800c548:	f000 fcf8 	bl	800cf3c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c552:	b2db      	uxtb	r3, r3
 800c554:	2b02      	cmp	r3, #2
 800c556:	d106      	bne.n	800c566 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				xReturn = pdPASS;
 800c560:	2301      	movs	r3, #1
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	e001      	b.n	800c56a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800c566:	2300      	movs	r3, #0
 800c568:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800c56a:	f000 fd17 	bl	800cf9c <vPortExitCritical>

		return xReturn;
 800c56e:	68fb      	ldr	r3, [r7, #12]
	}
 800c570:	4618      	mov	r0, r3
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	20001380 	.word	0x20001380

0800c57c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c586:	4b29      	ldr	r3, [pc, #164]	; (800c62c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c58c:	4b28      	ldr	r3, [pc, #160]	; (800c630 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3304      	adds	r3, #4
 800c592:	4618      	mov	r0, r3
 800c594:	f7fd ff6a 	bl	800a46c <uxListRemove>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10b      	bne.n	800c5b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c59e:	4b24      	ldr	r3, [pc, #144]	; (800c630 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c5aa:	43da      	mvns	r2, r3
 800c5ac:	4b21      	ldr	r3, [pc, #132]	; (800c634 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4013      	ands	r3, r2
 800c5b2:	4a20      	ldr	r2, [pc, #128]	; (800c634 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c5b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5bc:	d10a      	bne.n	800c5d4 <prvAddCurrentTaskToDelayedList+0x58>
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d007      	beq.n	800c5d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5c4:	4b1a      	ldr	r3, [pc, #104]	; (800c630 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	481a      	ldr	r0, [pc, #104]	; (800c638 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c5ce:	f7fd fef2 	bl	800a3b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c5d2:	e026      	b.n	800c622 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4413      	add	r3, r2
 800c5da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5dc:	4b14      	ldr	r3, [pc, #80]	; (800c630 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	68ba      	ldr	r2, [r7, #8]
 800c5e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5e4:	68ba      	ldr	r2, [r7, #8]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d209      	bcs.n	800c600 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5ec:	4b13      	ldr	r3, [pc, #76]	; (800c63c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	4b0f      	ldr	r3, [pc, #60]	; (800c630 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	3304      	adds	r3, #4
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	4610      	mov	r0, r2
 800c5fa:	f7fd feff 	bl	800a3fc <vListInsert>
}
 800c5fe:	e010      	b.n	800c622 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c600:	4b0f      	ldr	r3, [pc, #60]	; (800c640 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	4b0a      	ldr	r3, [pc, #40]	; (800c630 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	3304      	adds	r3, #4
 800c60a:	4619      	mov	r1, r3
 800c60c:	4610      	mov	r0, r2
 800c60e:	f7fd fef5 	bl	800a3fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c612:	4b0c      	ldr	r3, [pc, #48]	; (800c644 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d202      	bcs.n	800c622 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c61c:	4a09      	ldr	r2, [pc, #36]	; (800c644 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	6013      	str	r3, [r2, #0]
}
 800c622:	bf00      	nop
 800c624:	3710      	adds	r7, #16
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	20001484 	.word	0x20001484
 800c630:	20001380 	.word	0x20001380
 800c634:	20001488 	.word	0x20001488
 800c638:	2000146c 	.word	0x2000146c
 800c63c:	2000143c 	.word	0x2000143c
 800c640:	20001438 	.word	0x20001438
 800c644:	200014a0 	.word	0x200014a0

0800c648 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b08a      	sub	sp, #40	; 0x28
 800c64c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c64e:	2300      	movs	r3, #0
 800c650:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c652:	f000 fb41 	bl	800ccd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c656:	4b1c      	ldr	r3, [pc, #112]	; (800c6c8 <xTimerCreateTimerTask+0x80>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d021      	beq.n	800c6a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c65e:	2300      	movs	r3, #0
 800c660:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c662:	2300      	movs	r3, #0
 800c664:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c666:	1d3a      	adds	r2, r7, #4
 800c668:	f107 0108 	add.w	r1, r7, #8
 800c66c:	f107 030c 	add.w	r3, r7, #12
 800c670:	4618      	mov	r0, r3
 800c672:	f7f6 ff15 	bl	80034a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c676:	6879      	ldr	r1, [r7, #4]
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	9202      	str	r2, [sp, #8]
 800c67e:	9301      	str	r3, [sp, #4]
 800c680:	2302      	movs	r3, #2
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	2300      	movs	r3, #0
 800c686:	460a      	mov	r2, r1
 800c688:	4910      	ldr	r1, [pc, #64]	; (800c6cc <xTimerCreateTimerTask+0x84>)
 800c68a:	4811      	ldr	r0, [pc, #68]	; (800c6d0 <xTimerCreateTimerTask+0x88>)
 800c68c:	f7fe ff5b 	bl	800b546 <xTaskCreateStatic>
 800c690:	4603      	mov	r3, r0
 800c692:	4a10      	ldr	r2, [pc, #64]	; (800c6d4 <xTimerCreateTimerTask+0x8c>)
 800c694:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c696:	4b0f      	ldr	r3, [pc, #60]	; (800c6d4 <xTimerCreateTimerTask+0x8c>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d001      	beq.n	800c6a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10a      	bne.n	800c6be <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ac:	f383 8811 	msr	BASEPRI, r3
 800c6b0:	f3bf 8f6f 	isb	sy
 800c6b4:	f3bf 8f4f 	dsb	sy
 800c6b8:	613b      	str	r3, [r7, #16]
}
 800c6ba:	bf00      	nop
 800c6bc:	e7fe      	b.n	800c6bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c6be:	697b      	ldr	r3, [r7, #20]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3718      	adds	r7, #24
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	200014dc 	.word	0x200014dc
 800c6cc:	080119e8 	.word	0x080119e8
 800c6d0:	0800c915 	.word	0x0800c915
 800c6d4:	200014e0 	.word	0x200014e0

0800c6d8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af02      	add	r7, sp, #8
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800c6e6:	202c      	movs	r0, #44	; 0x2c
 800c6e8:	f000 fd28 	bl	800d13c <pvPortMalloc>
 800c6ec:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00d      	beq.n	800c710 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	9301      	str	r3, [sp, #4]
 800c6f8:	6a3b      	ldr	r3, [r7, #32]
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	68b9      	ldr	r1, [r7, #8]
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f000 f846 	bl	800c794 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800c710:	697b      	ldr	r3, [r7, #20]
	}
 800c712:	4618      	mov	r0, r3
 800c714:	3718      	adds	r7, #24
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b08a      	sub	sp, #40	; 0x28
 800c71e:	af02      	add	r7, sp, #8
 800c720:	60f8      	str	r0, [r7, #12]
 800c722:	60b9      	str	r1, [r7, #8]
 800c724:	607a      	str	r2, [r7, #4]
 800c726:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c728:	232c      	movs	r3, #44	; 0x2c
 800c72a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	2b2c      	cmp	r3, #44	; 0x2c
 800c730:	d00a      	beq.n	800c748 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c736:	f383 8811 	msr	BASEPRI, r3
 800c73a:	f3bf 8f6f 	isb	sy
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	61bb      	str	r3, [r7, #24]
}
 800c744:	bf00      	nop
 800c746:	e7fe      	b.n	800c746 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10a      	bne.n	800c764 <xTimerCreateStatic+0x4a>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	617b      	str	r3, [r7, #20]
}
 800c760:	bf00      	nop
 800c762:	e7fe      	b.n	800c762 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c766:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00d      	beq.n	800c78a <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	9301      	str	r3, [sp, #4]
 800c772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	68b9      	ldr	r1, [r7, #8]
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f000 f809 	bl	800c794 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	2201      	movs	r2, #1
 800c786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800c78a:	69fb      	ldr	r3, [r7, #28]
	}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3720      	adds	r7, #32
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
 800c7a0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d10a      	bne.n	800c7be <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ac:	f383 8811 	msr	BASEPRI, r3
 800c7b0:	f3bf 8f6f 	isb	sy
 800c7b4:	f3bf 8f4f 	dsb	sy
 800c7b8:	617b      	str	r3, [r7, #20]
}
 800c7ba:	bf00      	nop
 800c7bc:	e7fe      	b.n	800c7bc <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d015      	beq.n	800c7f0 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c7c4:	f000 fa88 	bl	800ccd8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	68ba      	ldr	r2, [r7, #8]
 800c7d2:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800c7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7dc:	683a      	ldr	r2, [r7, #0]
 800c7de:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e2:	6a3a      	ldr	r2, [r7, #32]
 800c7e4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fd fdd7 	bl	800a39e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c7f0:	bf00      	nop
 800c7f2:	3718      	adds	r7, #24
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b08a      	sub	sp, #40	; 0x28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
 800c804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c806:	2300      	movs	r3, #0
 800c808:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d10a      	bne.n	800c826 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c814:	f383 8811 	msr	BASEPRI, r3
 800c818:	f3bf 8f6f 	isb	sy
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	623b      	str	r3, [r7, #32]
}
 800c822:	bf00      	nop
 800c824:	e7fe      	b.n	800c824 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c826:	4b1a      	ldr	r3, [pc, #104]	; (800c890 <xTimerGenericCommand+0x98>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d02a      	beq.n	800c884 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	2b05      	cmp	r3, #5
 800c83e:	dc18      	bgt.n	800c872 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c840:	f7ff fcd4 	bl	800c1ec <xTaskGetSchedulerState>
 800c844:	4603      	mov	r3, r0
 800c846:	2b02      	cmp	r3, #2
 800c848:	d109      	bne.n	800c85e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c84a:	4b11      	ldr	r3, [pc, #68]	; (800c890 <xTimerGenericCommand+0x98>)
 800c84c:	6818      	ldr	r0, [r3, #0]
 800c84e:	f107 0114 	add.w	r1, r7, #20
 800c852:	2300      	movs	r3, #0
 800c854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c856:	f7fd ff31 	bl	800a6bc <xQueueGenericSend>
 800c85a:	6278      	str	r0, [r7, #36]	; 0x24
 800c85c:	e012      	b.n	800c884 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c85e:	4b0c      	ldr	r3, [pc, #48]	; (800c890 <xTimerGenericCommand+0x98>)
 800c860:	6818      	ldr	r0, [r3, #0]
 800c862:	f107 0114 	add.w	r1, r7, #20
 800c866:	2300      	movs	r3, #0
 800c868:	2200      	movs	r2, #0
 800c86a:	f7fd ff27 	bl	800a6bc <xQueueGenericSend>
 800c86e:	6278      	str	r0, [r7, #36]	; 0x24
 800c870:	e008      	b.n	800c884 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c872:	4b07      	ldr	r3, [pc, #28]	; (800c890 <xTimerGenericCommand+0x98>)
 800c874:	6818      	ldr	r0, [r3, #0]
 800c876:	f107 0114 	add.w	r1, r7, #20
 800c87a:	2300      	movs	r3, #0
 800c87c:	683a      	ldr	r2, [r7, #0]
 800c87e:	f7fe f81b 	bl	800a8b8 <xQueueGenericSendFromISR>
 800c882:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c886:	4618      	mov	r0, r3
 800c888:	3728      	adds	r7, #40	; 0x28
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	200014dc 	.word	0x200014dc

0800c894 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b088      	sub	sp, #32
 800c898:	af02      	add	r7, sp, #8
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c89e:	4b1c      	ldr	r3, [pc, #112]	; (800c910 <prvProcessExpiredTimer+0x7c>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fd fddd 	bl	800a46c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	69db      	ldr	r3, [r3, #28]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d122      	bne.n	800c900 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	699a      	ldr	r2, [r3, #24]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	18d1      	adds	r1, r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	683a      	ldr	r2, [r7, #0]
 800c8c6:	6978      	ldr	r0, [r7, #20]
 800c8c8:	f000 f8c8 	bl	800ca5c <prvInsertTimerInActiveList>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d016      	beq.n	800c900 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	2100      	movs	r1, #0
 800c8dc:	6978      	ldr	r0, [r7, #20]
 800c8de:	f7ff ff8b 	bl	800c7f8 <xTimerGenericCommand>
 800c8e2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d10a      	bne.n	800c900 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	60fb      	str	r3, [r7, #12]
}
 800c8fc:	bf00      	nop
 800c8fe:	e7fe      	b.n	800c8fe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c904:	6978      	ldr	r0, [r7, #20]
 800c906:	4798      	blx	r3
}
 800c908:	bf00      	nop
 800c90a:	3718      	adds	r7, #24
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	200014d4 	.word	0x200014d4

0800c914 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c91c:	f107 0308 	add.w	r3, r7, #8
 800c920:	4618      	mov	r0, r3
 800c922:	f000 f857 	bl	800c9d4 <prvGetNextExpireTime>
 800c926:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	4619      	mov	r1, r3
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f000 f803 	bl	800c938 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c932:	f000 f8d5 	bl	800cae0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c936:	e7f1      	b.n	800c91c <prvTimerTask+0x8>

0800c938 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c942:	f7ff f82d 	bl	800b9a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c946:	f107 0308 	add.w	r3, r7, #8
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 f866 	bl	800ca1c <prvSampleTimeNow>
 800c950:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d130      	bne.n	800c9ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d10a      	bne.n	800c974 <prvProcessTimerOrBlockTask+0x3c>
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	429a      	cmp	r2, r3
 800c964:	d806      	bhi.n	800c974 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c966:	f7ff f829 	bl	800b9bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c96a:	68f9      	ldr	r1, [r7, #12]
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f7ff ff91 	bl	800c894 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c972:	e024      	b.n	800c9be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d008      	beq.n	800c98c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c97a:	4b13      	ldr	r3, [pc, #76]	; (800c9c8 <prvProcessTimerOrBlockTask+0x90>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	bf0c      	ite	eq
 800c984:	2301      	moveq	r3, #1
 800c986:	2300      	movne	r3, #0
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c98c:	4b0f      	ldr	r3, [pc, #60]	; (800c9cc <prvProcessTimerOrBlockTask+0x94>)
 800c98e:	6818      	ldr	r0, [r3, #0]
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	4619      	mov	r1, r3
 800c99a:	f7fe fa3d 	bl	800ae18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c99e:	f7ff f80d 	bl	800b9bc <xTaskResumeAll>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10a      	bne.n	800c9be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c9a8:	4b09      	ldr	r3, [pc, #36]	; (800c9d0 <prvProcessTimerOrBlockTask+0x98>)
 800c9aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ae:	601a      	str	r2, [r3, #0]
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	f3bf 8f6f 	isb	sy
}
 800c9b8:	e001      	b.n	800c9be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c9ba:	f7fe ffff 	bl	800b9bc <xTaskResumeAll>
}
 800c9be:	bf00      	nop
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	200014d8 	.word	0x200014d8
 800c9cc:	200014dc 	.word	0x200014dc
 800c9d0:	e000ed04 	.word	0xe000ed04

0800c9d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c9dc:	4b0e      	ldr	r3, [pc, #56]	; (800ca18 <prvGetNextExpireTime+0x44>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	bf0c      	ite	eq
 800c9e6:	2301      	moveq	r3, #1
 800c9e8:	2300      	movne	r3, #0
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d105      	bne.n	800ca06 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9fa:	4b07      	ldr	r3, [pc, #28]	; (800ca18 <prvGetNextExpireTime+0x44>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	60fb      	str	r3, [r7, #12]
 800ca04:	e001      	b.n	800ca0a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ca06:	2300      	movs	r3, #0
 800ca08:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3714      	adds	r7, #20
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bc80      	pop	{r7}
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	200014d4 	.word	0x200014d4

0800ca1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ca24:	f7ff f866 	bl	800baf4 <xTaskGetTickCount>
 800ca28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ca2a:	4b0b      	ldr	r3, [pc, #44]	; (800ca58 <prvSampleTimeNow+0x3c>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d205      	bcs.n	800ca40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ca34:	f000 f8ee 	bl	800cc14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	601a      	str	r2, [r3, #0]
 800ca3e:	e002      	b.n	800ca46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ca46:	4a04      	ldr	r2, [pc, #16]	; (800ca58 <prvSampleTimeNow+0x3c>)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	200014e4 	.word	0x200014e4

0800ca5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b086      	sub	sp, #24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]
 800ca68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	68ba      	ldr	r2, [r7, #8]
 800ca72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ca7a:	68ba      	ldr	r2, [r7, #8]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d812      	bhi.n	800caa8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	1ad2      	subs	r2, r2, r3
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	699b      	ldr	r3, [r3, #24]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d302      	bcc.n	800ca96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ca90:	2301      	movs	r3, #1
 800ca92:	617b      	str	r3, [r7, #20]
 800ca94:	e01b      	b.n	800cace <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ca96:	4b10      	ldr	r3, [pc, #64]	; (800cad8 <prvInsertTimerInActiveList+0x7c>)
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	4619      	mov	r1, r3
 800caa0:	4610      	mov	r0, r2
 800caa2:	f7fd fcab 	bl	800a3fc <vListInsert>
 800caa6:	e012      	b.n	800cace <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	429a      	cmp	r2, r3
 800caae:	d206      	bcs.n	800cabe <prvInsertTimerInActiveList+0x62>
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d302      	bcc.n	800cabe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cab8:	2301      	movs	r3, #1
 800caba:	617b      	str	r3, [r7, #20]
 800cabc:	e007      	b.n	800cace <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cabe:	4b07      	ldr	r3, [pc, #28]	; (800cadc <prvInsertTimerInActiveList+0x80>)
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	3304      	adds	r3, #4
 800cac6:	4619      	mov	r1, r3
 800cac8:	4610      	mov	r0, r2
 800caca:	f7fd fc97 	bl	800a3fc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cace:	697b      	ldr	r3, [r7, #20]
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3718      	adds	r7, #24
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	200014d8 	.word	0x200014d8
 800cadc:	200014d4 	.word	0x200014d4

0800cae0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b08c      	sub	sp, #48	; 0x30
 800cae4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cae6:	e081      	b.n	800cbec <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	2b00      	cmp	r3, #0
 800caec:	db7d      	blt.n	800cbea <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	695b      	ldr	r3, [r3, #20]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d004      	beq.n	800cb04 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafc:	3304      	adds	r3, #4
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fd fcb4 	bl	800a46c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb04:	1d3b      	adds	r3, r7, #4
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7ff ff88 	bl	800ca1c <prvSampleTimeNow>
 800cb0c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	2b09      	cmp	r3, #9
 800cb12:	d86b      	bhi.n	800cbec <prvProcessReceivedCommands+0x10c>
 800cb14:	a201      	add	r2, pc, #4	; (adr r2, 800cb1c <prvProcessReceivedCommands+0x3c>)
 800cb16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1a:	bf00      	nop
 800cb1c:	0800cb45 	.word	0x0800cb45
 800cb20:	0800cb45 	.word	0x0800cb45
 800cb24:	0800cb45 	.word	0x0800cb45
 800cb28:	0800cbed 	.word	0x0800cbed
 800cb2c:	0800cba1 	.word	0x0800cba1
 800cb30:	0800cbd9 	.word	0x0800cbd9
 800cb34:	0800cb45 	.word	0x0800cb45
 800cb38:	0800cb45 	.word	0x0800cb45
 800cb3c:	0800cbed 	.word	0x0800cbed
 800cb40:	0800cba1 	.word	0x0800cba1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb48:	699b      	ldr	r3, [r3, #24]
 800cb4a:	18d1      	adds	r1, r2, r3
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6a3a      	ldr	r2, [r7, #32]
 800cb50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb52:	f7ff ff83 	bl	800ca5c <prvInsertTimerInActiveList>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d047      	beq.n	800cbec <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb62:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb66:	69db      	ldr	r3, [r3, #28]
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d13f      	bne.n	800cbec <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb70:	699b      	ldr	r3, [r3, #24]
 800cb72:	441a      	add	r2, r3
 800cb74:	2300      	movs	r3, #0
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	2300      	movs	r3, #0
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb7e:	f7ff fe3b 	bl	800c7f8 <xTimerGenericCommand>
 800cb82:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d130      	bne.n	800cbec <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	61bb      	str	r3, [r7, #24]
}
 800cb9c:	bf00      	nop
 800cb9e:	e7fe      	b.n	800cb9e <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba8:	699b      	ldr	r3, [r3, #24]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10a      	bne.n	800cbc4 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	617b      	str	r3, [r7, #20]
}
 800cbc0:	bf00      	nop
 800cbc2:	e7fe      	b.n	800cbc2 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	699a      	ldr	r2, [r3, #24]
 800cbc8:	6a3b      	ldr	r3, [r7, #32]
 800cbca:	18d1      	adds	r1, r2, r3
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	6a3a      	ldr	r2, [r7, #32]
 800cbd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbd2:	f7ff ff43 	bl	800ca5c <prvInsertTimerInActiveList>
					break;
 800cbd6:	e009      	b.n	800cbec <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d104      	bne.n	800cbec <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800cbe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbe4:	f000 fb6e 	bl	800d2c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cbe8:	e000      	b.n	800cbec <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cbea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbec:	4b08      	ldr	r3, [pc, #32]	; (800cc10 <prvProcessReceivedCommands+0x130>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f107 0108 	add.w	r1, r7, #8
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7fd fef6 	bl	800a9e8 <xQueueReceive>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f47f af72 	bne.w	800cae8 <prvProcessReceivedCommands+0x8>
	}
}
 800cc04:	bf00      	nop
 800cc06:	bf00      	nop
 800cc08:	3728      	adds	r7, #40	; 0x28
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	200014dc 	.word	0x200014dc

0800cc14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b088      	sub	sp, #32
 800cc18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc1a:	e045      	b.n	800cca8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc1c:	4b2c      	ldr	r3, [pc, #176]	; (800ccd0 <prvSwitchTimerLists+0xbc>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc26:	4b2a      	ldr	r3, [pc, #168]	; (800ccd0 <prvSwitchTimerLists+0xbc>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	3304      	adds	r3, #4
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fd fc19 	bl	800a46c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	69db      	ldr	r3, [r3, #28]
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d12e      	bne.n	800cca8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	699b      	ldr	r3, [r3, #24]
 800cc4e:	693a      	ldr	r2, [r7, #16]
 800cc50:	4413      	add	r3, r2
 800cc52:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cc54:	68ba      	ldr	r2, [r7, #8]
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d90e      	bls.n	800cc7a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc68:	4b19      	ldr	r3, [pc, #100]	; (800ccd0 <prvSwitchTimerLists+0xbc>)
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	3304      	adds	r3, #4
 800cc70:	4619      	mov	r1, r3
 800cc72:	4610      	mov	r0, r2
 800cc74:	f7fd fbc2 	bl	800a3fc <vListInsert>
 800cc78:	e016      	b.n	800cca8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	2300      	movs	r3, #0
 800cc80:	693a      	ldr	r2, [r7, #16]
 800cc82:	2100      	movs	r1, #0
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f7ff fdb7 	bl	800c7f8 <xTimerGenericCommand>
 800cc8a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d10a      	bne.n	800cca8 <prvSwitchTimerLists+0x94>
	__asm volatile
 800cc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc96:	f383 8811 	msr	BASEPRI, r3
 800cc9a:	f3bf 8f6f 	isb	sy
 800cc9e:	f3bf 8f4f 	dsb	sy
 800cca2:	603b      	str	r3, [r7, #0]
}
 800cca4:	bf00      	nop
 800cca6:	e7fe      	b.n	800cca6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cca8:	4b09      	ldr	r3, [pc, #36]	; (800ccd0 <prvSwitchTimerLists+0xbc>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1b4      	bne.n	800cc1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ccb2:	4b07      	ldr	r3, [pc, #28]	; (800ccd0 <prvSwitchTimerLists+0xbc>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ccb8:	4b06      	ldr	r3, [pc, #24]	; (800ccd4 <prvSwitchTimerLists+0xc0>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a04      	ldr	r2, [pc, #16]	; (800ccd0 <prvSwitchTimerLists+0xbc>)
 800ccbe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ccc0:	4a04      	ldr	r2, [pc, #16]	; (800ccd4 <prvSwitchTimerLists+0xc0>)
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	6013      	str	r3, [r2, #0]
}
 800ccc6:	bf00      	nop
 800ccc8:	3718      	adds	r7, #24
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	200014d4 	.word	0x200014d4
 800ccd4:	200014d8 	.word	0x200014d8

0800ccd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ccde:	f000 f92d 	bl	800cf3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cce2:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <prvCheckForValidListAndQueue+0x60>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d120      	bne.n	800cd2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ccea:	4814      	ldr	r0, [pc, #80]	; (800cd3c <prvCheckForValidListAndQueue+0x64>)
 800ccec:	f7fd fb38 	bl	800a360 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ccf0:	4813      	ldr	r0, [pc, #76]	; (800cd40 <prvCheckForValidListAndQueue+0x68>)
 800ccf2:	f7fd fb35 	bl	800a360 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ccf6:	4b13      	ldr	r3, [pc, #76]	; (800cd44 <prvCheckForValidListAndQueue+0x6c>)
 800ccf8:	4a10      	ldr	r2, [pc, #64]	; (800cd3c <prvCheckForValidListAndQueue+0x64>)
 800ccfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ccfc:	4b12      	ldr	r3, [pc, #72]	; (800cd48 <prvCheckForValidListAndQueue+0x70>)
 800ccfe:	4a10      	ldr	r2, [pc, #64]	; (800cd40 <prvCheckForValidListAndQueue+0x68>)
 800cd00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cd02:	2300      	movs	r3, #0
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	4b11      	ldr	r3, [pc, #68]	; (800cd4c <prvCheckForValidListAndQueue+0x74>)
 800cd08:	4a11      	ldr	r2, [pc, #68]	; (800cd50 <prvCheckForValidListAndQueue+0x78>)
 800cd0a:	210c      	movs	r1, #12
 800cd0c:	200a      	movs	r0, #10
 800cd0e:	f7fd fc3f 	bl	800a590 <xQueueGenericCreateStatic>
 800cd12:	4603      	mov	r3, r0
 800cd14:	4a08      	ldr	r2, [pc, #32]	; (800cd38 <prvCheckForValidListAndQueue+0x60>)
 800cd16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cd18:	4b07      	ldr	r3, [pc, #28]	; (800cd38 <prvCheckForValidListAndQueue+0x60>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d005      	beq.n	800cd2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cd20:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <prvCheckForValidListAndQueue+0x60>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	490b      	ldr	r1, [pc, #44]	; (800cd54 <prvCheckForValidListAndQueue+0x7c>)
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fe f84e 	bl	800adc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd2c:	f000 f936 	bl	800cf9c <vPortExitCritical>
}
 800cd30:	bf00      	nop
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	200014dc 	.word	0x200014dc
 800cd3c:	200014ac 	.word	0x200014ac
 800cd40:	200014c0 	.word	0x200014c0
 800cd44:	200014d4 	.word	0x200014d4
 800cd48:	200014d8 	.word	0x200014d8
 800cd4c:	20001560 	.word	0x20001560
 800cd50:	200014e8 	.word	0x200014e8
 800cd54:	080119f0 	.word	0x080119f0

0800cd58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	3b04      	subs	r3, #4
 800cd68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cd70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	3b04      	subs	r3, #4
 800cd76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	f023 0201 	bic.w	r2, r3, #1
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3b04      	subs	r3, #4
 800cd86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd88:	4a08      	ldr	r2, [pc, #32]	; (800cdac <pxPortInitialiseStack+0x54>)
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3b14      	subs	r3, #20
 800cd92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	3b20      	subs	r3, #32
 800cd9e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cda0:	68fb      	ldr	r3, [r7, #12]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3714      	adds	r7, #20
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bc80      	pop	{r7}
 800cdaa:	4770      	bx	lr
 800cdac:	0800cdb1 	.word	0x0800cdb1

0800cdb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cdba:	4b12      	ldr	r3, [pc, #72]	; (800ce04 <prvTaskExitError+0x54>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc2:	d00a      	beq.n	800cdda <prvTaskExitError+0x2a>
	__asm volatile
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	f383 8811 	msr	BASEPRI, r3
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	60fb      	str	r3, [r7, #12]
}
 800cdd6:	bf00      	nop
 800cdd8:	e7fe      	b.n	800cdd8 <prvTaskExitError+0x28>
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	f383 8811 	msr	BASEPRI, r3
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	f3bf 8f4f 	dsb	sy
 800cdea:	60bb      	str	r3, [r7, #8]
}
 800cdec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cdee:	bf00      	nop
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d0fc      	beq.n	800cdf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cdf6:	bf00      	nop
 800cdf8:	bf00      	nop
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bc80      	pop	{r7}
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	20000154 	.word	0x20000154
	...

0800ce10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ce10:	4b07      	ldr	r3, [pc, #28]	; (800ce30 <pxCurrentTCBConst2>)
 800ce12:	6819      	ldr	r1, [r3, #0]
 800ce14:	6808      	ldr	r0, [r1, #0]
 800ce16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ce1a:	f380 8809 	msr	PSP, r0
 800ce1e:	f3bf 8f6f 	isb	sy
 800ce22:	f04f 0000 	mov.w	r0, #0
 800ce26:	f380 8811 	msr	BASEPRI, r0
 800ce2a:	f04e 0e0d 	orr.w	lr, lr, #13
 800ce2e:	4770      	bx	lr

0800ce30 <pxCurrentTCBConst2>:
 800ce30:	20001380 	.word	0x20001380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop

0800ce38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ce38:	4806      	ldr	r0, [pc, #24]	; (800ce54 <prvPortStartFirstTask+0x1c>)
 800ce3a:	6800      	ldr	r0, [r0, #0]
 800ce3c:	6800      	ldr	r0, [r0, #0]
 800ce3e:	f380 8808 	msr	MSP, r0
 800ce42:	b662      	cpsie	i
 800ce44:	b661      	cpsie	f
 800ce46:	f3bf 8f4f 	dsb	sy
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	df00      	svc	0
 800ce50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ce52:	bf00      	nop
 800ce54:	e000ed08 	.word	0xe000ed08

0800ce58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ce5e:	4b32      	ldr	r3, [pc, #200]	; (800cf28 <xPortStartScheduler+0xd0>)
 800ce60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	22ff      	movs	r2, #255	; 0xff
 800ce6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce78:	78fb      	ldrb	r3, [r7, #3]
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	4b2a      	ldr	r3, [pc, #168]	; (800cf2c <xPortStartScheduler+0xd4>)
 800ce84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce86:	4b2a      	ldr	r3, [pc, #168]	; (800cf30 <xPortStartScheduler+0xd8>)
 800ce88:	2207      	movs	r2, #7
 800ce8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce8c:	e009      	b.n	800cea2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ce8e:	4b28      	ldr	r3, [pc, #160]	; (800cf30 <xPortStartScheduler+0xd8>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	3b01      	subs	r3, #1
 800ce94:	4a26      	ldr	r2, [pc, #152]	; (800cf30 <xPortStartScheduler+0xd8>)
 800ce96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce98:	78fb      	ldrb	r3, [r7, #3]
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	005b      	lsls	r3, r3, #1
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cea2:	78fb      	ldrb	r3, [r7, #3]
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceaa:	2b80      	cmp	r3, #128	; 0x80
 800ceac:	d0ef      	beq.n	800ce8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ceae:	4b20      	ldr	r3, [pc, #128]	; (800cf30 <xPortStartScheduler+0xd8>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f1c3 0307 	rsb	r3, r3, #7
 800ceb6:	2b04      	cmp	r3, #4
 800ceb8:	d00a      	beq.n	800ced0 <xPortStartScheduler+0x78>
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	60bb      	str	r3, [r7, #8]
}
 800cecc:	bf00      	nop
 800cece:	e7fe      	b.n	800cece <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ced0:	4b17      	ldr	r3, [pc, #92]	; (800cf30 <xPortStartScheduler+0xd8>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	021b      	lsls	r3, r3, #8
 800ced6:	4a16      	ldr	r2, [pc, #88]	; (800cf30 <xPortStartScheduler+0xd8>)
 800ced8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ceda:	4b15      	ldr	r3, [pc, #84]	; (800cf30 <xPortStartScheduler+0xd8>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cee2:	4a13      	ldr	r2, [pc, #76]	; (800cf30 <xPortStartScheduler+0xd8>)
 800cee4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	b2da      	uxtb	r2, r3
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ceee:	4b11      	ldr	r3, [pc, #68]	; (800cf34 <xPortStartScheduler+0xdc>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a10      	ldr	r2, [pc, #64]	; (800cf34 <xPortStartScheduler+0xdc>)
 800cef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cef8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cefa:	4b0e      	ldr	r3, [pc, #56]	; (800cf34 <xPortStartScheduler+0xdc>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4a0d      	ldr	r2, [pc, #52]	; (800cf34 <xPortStartScheduler+0xdc>)
 800cf00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cf04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cf06:	f000 f8b9 	bl	800d07c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cf0a:	4b0b      	ldr	r3, [pc, #44]	; (800cf38 <xPortStartScheduler+0xe0>)
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cf10:	f7ff ff92 	bl	800ce38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cf14:	f7fe fecc 	bl	800bcb0 <vTaskSwitchContext>
	prvTaskExitError();
 800cf18:	f7ff ff4a 	bl	800cdb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf1c:	2300      	movs	r3, #0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	e000e400 	.word	0xe000e400
 800cf2c:	200015a8 	.word	0x200015a8
 800cf30:	200015ac 	.word	0x200015ac
 800cf34:	e000ed20 	.word	0xe000ed20
 800cf38:	20000154 	.word	0x20000154

0800cf3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
	__asm volatile
 800cf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	607b      	str	r3, [r7, #4]
}
 800cf54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cf56:	4b0f      	ldr	r3, [pc, #60]	; (800cf94 <vPortEnterCritical+0x58>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	4a0d      	ldr	r2, [pc, #52]	; (800cf94 <vPortEnterCritical+0x58>)
 800cf5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cf60:	4b0c      	ldr	r3, [pc, #48]	; (800cf94 <vPortEnterCritical+0x58>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d10f      	bne.n	800cf88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf68:	4b0b      	ldr	r3, [pc, #44]	; (800cf98 <vPortEnterCritical+0x5c>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00a      	beq.n	800cf88 <vPortEnterCritical+0x4c>
	__asm volatile
 800cf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf76:	f383 8811 	msr	BASEPRI, r3
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	603b      	str	r3, [r7, #0]
}
 800cf84:	bf00      	nop
 800cf86:	e7fe      	b.n	800cf86 <vPortEnterCritical+0x4a>
	}
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bc80      	pop	{r7}
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	20000154 	.word	0x20000154
 800cf98:	e000ed04 	.word	0xe000ed04

0800cf9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cfa2:	4b11      	ldr	r3, [pc, #68]	; (800cfe8 <vPortExitCritical+0x4c>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d10a      	bne.n	800cfc0 <vPortExitCritical+0x24>
	__asm volatile
 800cfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfae:	f383 8811 	msr	BASEPRI, r3
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	607b      	str	r3, [r7, #4]
}
 800cfbc:	bf00      	nop
 800cfbe:	e7fe      	b.n	800cfbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cfc0:	4b09      	ldr	r3, [pc, #36]	; (800cfe8 <vPortExitCritical+0x4c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	4a08      	ldr	r2, [pc, #32]	; (800cfe8 <vPortExitCritical+0x4c>)
 800cfc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cfca:	4b07      	ldr	r3, [pc, #28]	; (800cfe8 <vPortExitCritical+0x4c>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d105      	bne.n	800cfde <vPortExitCritical+0x42>
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	f383 8811 	msr	BASEPRI, r3
}
 800cfdc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cfde:	bf00      	nop
 800cfe0:	370c      	adds	r7, #12
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bc80      	pop	{r7}
 800cfe6:	4770      	bx	lr
 800cfe8:	20000154 	.word	0x20000154
 800cfec:	00000000 	.word	0x00000000

0800cff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cff0:	f3ef 8009 	mrs	r0, PSP
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	4b0d      	ldr	r3, [pc, #52]	; (800d030 <pxCurrentTCBConst>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d000:	6010      	str	r0, [r2, #0]
 800d002:	e92d 4008 	stmdb	sp!, {r3, lr}
 800d006:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d00a:	f380 8811 	msr	BASEPRI, r0
 800d00e:	f7fe fe4f 	bl	800bcb0 <vTaskSwitchContext>
 800d012:	f04f 0000 	mov.w	r0, #0
 800d016:	f380 8811 	msr	BASEPRI, r0
 800d01a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d01e:	6819      	ldr	r1, [r3, #0]
 800d020:	6808      	ldr	r0, [r1, #0]
 800d022:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d026:	f380 8809 	msr	PSP, r0
 800d02a:	f3bf 8f6f 	isb	sy
 800d02e:	4770      	bx	lr

0800d030 <pxCurrentTCBConst>:
 800d030:	20001380 	.word	0x20001380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d034:	bf00      	nop
 800d036:	bf00      	nop

0800d038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	607b      	str	r3, [r7, #4]
}
 800d050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d052:	f7fe fd6f 	bl	800bb34 <xTaskIncrementTick>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d003      	beq.n	800d064 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d05c:	4b06      	ldr	r3, [pc, #24]	; (800d078 <SysTick_Handler+0x40>)
 800d05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	2300      	movs	r3, #0
 800d066:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	f383 8811 	msr	BASEPRI, r3
}
 800d06e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d070:	bf00      	nop
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	e000ed04 	.word	0xe000ed04

0800d07c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d07c:	b480      	push	{r7}
 800d07e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d080:	4b0a      	ldr	r3, [pc, #40]	; (800d0ac <vPortSetupTimerInterrupt+0x30>)
 800d082:	2200      	movs	r2, #0
 800d084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d086:	4b0a      	ldr	r3, [pc, #40]	; (800d0b0 <vPortSetupTimerInterrupt+0x34>)
 800d088:	2200      	movs	r2, #0
 800d08a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d08c:	4b09      	ldr	r3, [pc, #36]	; (800d0b4 <vPortSetupTimerInterrupt+0x38>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a09      	ldr	r2, [pc, #36]	; (800d0b8 <vPortSetupTimerInterrupt+0x3c>)
 800d092:	fba2 2303 	umull	r2, r3, r2, r3
 800d096:	099b      	lsrs	r3, r3, #6
 800d098:	4a08      	ldr	r2, [pc, #32]	; (800d0bc <vPortSetupTimerInterrupt+0x40>)
 800d09a:	3b01      	subs	r3, #1
 800d09c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d09e:	4b03      	ldr	r3, [pc, #12]	; (800d0ac <vPortSetupTimerInterrupt+0x30>)
 800d0a0:	2207      	movs	r2, #7
 800d0a2:	601a      	str	r2, [r3, #0]
}
 800d0a4:	bf00      	nop
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bc80      	pop	{r7}
 800d0aa:	4770      	bx	lr
 800d0ac:	e000e010 	.word	0xe000e010
 800d0b0:	e000e018 	.word	0xe000e018
 800d0b4:	20000148 	.word	0x20000148
 800d0b8:	10624dd3 	.word	0x10624dd3
 800d0bc:	e000e014 	.word	0xe000e014

0800d0c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d0c6:	f3ef 8305 	mrs	r3, IPSR
 800d0ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2b0f      	cmp	r3, #15
 800d0d0:	d914      	bls.n	800d0fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d0d2:	4a16      	ldr	r2, [pc, #88]	; (800d12c <vPortValidateInterruptPriority+0x6c>)
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d0dc:	4b14      	ldr	r3, [pc, #80]	; (800d130 <vPortValidateInterruptPriority+0x70>)
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	7afa      	ldrb	r2, [r7, #11]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d20a      	bcs.n	800d0fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	607b      	str	r3, [r7, #4]
}
 800d0f8:	bf00      	nop
 800d0fa:	e7fe      	b.n	800d0fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d0fc:	4b0d      	ldr	r3, [pc, #52]	; (800d134 <vPortValidateInterruptPriority+0x74>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d104:	4b0c      	ldr	r3, [pc, #48]	; (800d138 <vPortValidateInterruptPriority+0x78>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d90a      	bls.n	800d122 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	603b      	str	r3, [r7, #0]
}
 800d11e:	bf00      	nop
 800d120:	e7fe      	b.n	800d120 <vPortValidateInterruptPriority+0x60>
	}
 800d122:	bf00      	nop
 800d124:	3714      	adds	r7, #20
 800d126:	46bd      	mov	sp, r7
 800d128:	bc80      	pop	{r7}
 800d12a:	4770      	bx	lr
 800d12c:	e000e3f0 	.word	0xe000e3f0
 800d130:	200015a8 	.word	0x200015a8
 800d134:	e000ed0c 	.word	0xe000ed0c
 800d138:	200015ac 	.word	0x200015ac

0800d13c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b08a      	sub	sp, #40	; 0x28
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d144:	2300      	movs	r3, #0
 800d146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d148:	f7fe fc2a 	bl	800b9a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d14c:	4b58      	ldr	r3, [pc, #352]	; (800d2b0 <pvPortMalloc+0x174>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d101      	bne.n	800d158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d154:	f000 f910 	bl	800d378 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d158:	4b56      	ldr	r3, [pc, #344]	; (800d2b4 <pvPortMalloc+0x178>)
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4013      	ands	r3, r2
 800d160:	2b00      	cmp	r3, #0
 800d162:	f040 808e 	bne.w	800d282 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d01d      	beq.n	800d1a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d16c:	2208      	movs	r2, #8
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4413      	add	r3, r2
 800d172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f003 0307 	and.w	r3, r3, #7
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d014      	beq.n	800d1a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f023 0307 	bic.w	r3, r3, #7
 800d184:	3308      	adds	r3, #8
 800d186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f003 0307 	and.w	r3, r3, #7
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00a      	beq.n	800d1a8 <pvPortMalloc+0x6c>
	__asm volatile
 800d192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d196:	f383 8811 	msr	BASEPRI, r3
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	617b      	str	r3, [r7, #20]
}
 800d1a4:	bf00      	nop
 800d1a6:	e7fe      	b.n	800d1a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d069      	beq.n	800d282 <pvPortMalloc+0x146>
 800d1ae:	4b42      	ldr	r3, [pc, #264]	; (800d2b8 <pvPortMalloc+0x17c>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d864      	bhi.n	800d282 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d1b8:	4b40      	ldr	r3, [pc, #256]	; (800d2bc <pvPortMalloc+0x180>)
 800d1ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d1bc:	4b3f      	ldr	r3, [pc, #252]	; (800d2bc <pvPortMalloc+0x180>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1c2:	e004      	b.n	800d1ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d903      	bls.n	800d1e0 <pvPortMalloc+0xa4>
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1f1      	bne.n	800d1c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d1e0:	4b33      	ldr	r3, [pc, #204]	; (800d2b0 <pvPortMalloc+0x174>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d04b      	beq.n	800d282 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d1ea:	6a3b      	ldr	r3, [r7, #32]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2208      	movs	r2, #8
 800d1f0:	4413      	add	r3, r2
 800d1f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	6a3b      	ldr	r3, [r7, #32]
 800d1fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fe:	685a      	ldr	r2, [r3, #4]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	1ad2      	subs	r2, r2, r3
 800d204:	2308      	movs	r3, #8
 800d206:	005b      	lsls	r3, r3, #1
 800d208:	429a      	cmp	r2, r3
 800d20a:	d91f      	bls.n	800d24c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d20c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4413      	add	r3, r2
 800d212:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	f003 0307 	and.w	r3, r3, #7
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00a      	beq.n	800d234 <pvPortMalloc+0xf8>
	__asm volatile
 800d21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	613b      	str	r3, [r7, #16]
}
 800d230:	bf00      	nop
 800d232:	e7fe      	b.n	800d232 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	685a      	ldr	r2, [r3, #4]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	1ad2      	subs	r2, r2, r3
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d246:	69b8      	ldr	r0, [r7, #24]
 800d248:	f000 f8f8 	bl	800d43c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d24c:	4b1a      	ldr	r3, [pc, #104]	; (800d2b8 <pvPortMalloc+0x17c>)
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	4a18      	ldr	r2, [pc, #96]	; (800d2b8 <pvPortMalloc+0x17c>)
 800d258:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d25a:	4b17      	ldr	r3, [pc, #92]	; (800d2b8 <pvPortMalloc+0x17c>)
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	4b18      	ldr	r3, [pc, #96]	; (800d2c0 <pvPortMalloc+0x184>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	429a      	cmp	r2, r3
 800d264:	d203      	bcs.n	800d26e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d266:	4b14      	ldr	r3, [pc, #80]	; (800d2b8 <pvPortMalloc+0x17c>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a15      	ldr	r2, [pc, #84]	; (800d2c0 <pvPortMalloc+0x184>)
 800d26c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d270:	685a      	ldr	r2, [r3, #4]
 800d272:	4b10      	ldr	r3, [pc, #64]	; (800d2b4 <pvPortMalloc+0x178>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	431a      	orrs	r2, r3
 800d278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27e:	2200      	movs	r2, #0
 800d280:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d282:	f7fe fb9b 	bl	800b9bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	f003 0307 	and.w	r3, r3, #7
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00a      	beq.n	800d2a6 <pvPortMalloc+0x16a>
	__asm volatile
 800d290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d294:	f383 8811 	msr	BASEPRI, r3
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	f3bf 8f4f 	dsb	sy
 800d2a0:	60fb      	str	r3, [r7, #12]
}
 800d2a2:	bf00      	nop
 800d2a4:	e7fe      	b.n	800d2a4 <pvPortMalloc+0x168>
	return pvReturn;
 800d2a6:	69fb      	ldr	r3, [r7, #28]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3728      	adds	r7, #40	; 0x28
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	200035b8 	.word	0x200035b8
 800d2b4:	200035c4 	.word	0x200035c4
 800d2b8:	200035bc 	.word	0x200035bc
 800d2bc:	200035b0 	.word	0x200035b0
 800d2c0:	200035c0 	.word	0x200035c0

0800d2c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d048      	beq.n	800d368 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d2d6:	2308      	movs	r3, #8
 800d2d8:	425b      	negs	r3, r3
 800d2da:	697a      	ldr	r2, [r7, #20]
 800d2dc:	4413      	add	r3, r2
 800d2de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	685a      	ldr	r2, [r3, #4]
 800d2e8:	4b21      	ldr	r3, [pc, #132]	; (800d370 <vPortFree+0xac>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4013      	ands	r3, r2
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d10a      	bne.n	800d308 <vPortFree+0x44>
	__asm volatile
 800d2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f6:	f383 8811 	msr	BASEPRI, r3
 800d2fa:	f3bf 8f6f 	isb	sy
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	60fb      	str	r3, [r7, #12]
}
 800d304:	bf00      	nop
 800d306:	e7fe      	b.n	800d306 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d00a      	beq.n	800d326 <vPortFree+0x62>
	__asm volatile
 800d310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d314:	f383 8811 	msr	BASEPRI, r3
 800d318:	f3bf 8f6f 	isb	sy
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	60bb      	str	r3, [r7, #8]
}
 800d322:	bf00      	nop
 800d324:	e7fe      	b.n	800d324 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	685a      	ldr	r2, [r3, #4]
 800d32a:	4b11      	ldr	r3, [pc, #68]	; (800d370 <vPortFree+0xac>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4013      	ands	r3, r2
 800d330:	2b00      	cmp	r3, #0
 800d332:	d019      	beq.n	800d368 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d115      	bne.n	800d368 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	685a      	ldr	r2, [r3, #4]
 800d340:	4b0b      	ldr	r3, [pc, #44]	; (800d370 <vPortFree+0xac>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	43db      	mvns	r3, r3
 800d346:	401a      	ands	r2, r3
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d34c:	f7fe fb28 	bl	800b9a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	685a      	ldr	r2, [r3, #4]
 800d354:	4b07      	ldr	r3, [pc, #28]	; (800d374 <vPortFree+0xb0>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4413      	add	r3, r2
 800d35a:	4a06      	ldr	r2, [pc, #24]	; (800d374 <vPortFree+0xb0>)
 800d35c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d35e:	6938      	ldr	r0, [r7, #16]
 800d360:	f000 f86c 	bl	800d43c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d364:	f7fe fb2a 	bl	800b9bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d368:	bf00      	nop
 800d36a:	3718      	adds	r7, #24
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	200035c4 	.word	0x200035c4
 800d374:	200035bc 	.word	0x200035bc

0800d378 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d378:	b480      	push	{r7}
 800d37a:	b085      	sub	sp, #20
 800d37c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d37e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d382:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d384:	4b27      	ldr	r3, [pc, #156]	; (800d424 <prvHeapInit+0xac>)
 800d386:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f003 0307 	and.w	r3, r3, #7
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00c      	beq.n	800d3ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	3307      	adds	r3, #7
 800d396:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f023 0307 	bic.w	r3, r3, #7
 800d39e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	4a1f      	ldr	r2, [pc, #124]	; (800d424 <prvHeapInit+0xac>)
 800d3a8:	4413      	add	r3, r2
 800d3aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d3b0:	4a1d      	ldr	r2, [pc, #116]	; (800d428 <prvHeapInit+0xb0>)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d3b6:	4b1c      	ldr	r3, [pc, #112]	; (800d428 <prvHeapInit+0xb0>)
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	68ba      	ldr	r2, [r7, #8]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d3c4:	2208      	movs	r2, #8
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	1a9b      	subs	r3, r3, r2
 800d3ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f023 0307 	bic.w	r3, r3, #7
 800d3d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	4a15      	ldr	r2, [pc, #84]	; (800d42c <prvHeapInit+0xb4>)
 800d3d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d3da:	4b14      	ldr	r3, [pc, #80]	; (800d42c <prvHeapInit+0xb4>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d3e2:	4b12      	ldr	r3, [pc, #72]	; (800d42c <prvHeapInit+0xb4>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	1ad2      	subs	r2, r2, r3
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d3f8:	4b0c      	ldr	r3, [pc, #48]	; (800d42c <prvHeapInit+0xb4>)
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	4a0a      	ldr	r2, [pc, #40]	; (800d430 <prvHeapInit+0xb8>)
 800d406:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	4a09      	ldr	r2, [pc, #36]	; (800d434 <prvHeapInit+0xbc>)
 800d40e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d410:	4b09      	ldr	r3, [pc, #36]	; (800d438 <prvHeapInit+0xc0>)
 800d412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d416:	601a      	str	r2, [r3, #0]
}
 800d418:	bf00      	nop
 800d41a:	3714      	adds	r7, #20
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bc80      	pop	{r7}
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	200015b0 	.word	0x200015b0
 800d428:	200035b0 	.word	0x200035b0
 800d42c:	200035b8 	.word	0x200035b8
 800d430:	200035c0 	.word	0x200035c0
 800d434:	200035bc 	.word	0x200035bc
 800d438:	200035c4 	.word	0x200035c4

0800d43c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d444:	4b27      	ldr	r3, [pc, #156]	; (800d4e4 <prvInsertBlockIntoFreeList+0xa8>)
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	e002      	b.n	800d450 <prvInsertBlockIntoFreeList+0x14>
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	60fb      	str	r3, [r7, #12]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	429a      	cmp	r2, r3
 800d458:	d8f7      	bhi.n	800d44a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	68ba      	ldr	r2, [r7, #8]
 800d464:	4413      	add	r3, r2
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d108      	bne.n	800d47e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	685a      	ldr	r2, [r3, #4]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	441a      	add	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	441a      	add	r2, r3
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d118      	bne.n	800d4c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	4b14      	ldr	r3, [pc, #80]	; (800d4e8 <prvInsertBlockIntoFreeList+0xac>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d00d      	beq.n	800d4ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	685a      	ldr	r2, [r3, #4]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	441a      	add	r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	601a      	str	r2, [r3, #0]
 800d4b8:	e008      	b.n	800d4cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d4ba:	4b0b      	ldr	r3, [pc, #44]	; (800d4e8 <prvInsertBlockIntoFreeList+0xac>)
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	601a      	str	r2, [r3, #0]
 800d4c2:	e003      	b.n	800d4cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d002      	beq.n	800d4da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4da:	bf00      	nop
 800d4dc:	3714      	adds	r7, #20
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bc80      	pop	{r7}
 800d4e2:	4770      	bx	lr
 800d4e4:	200035b0 	.word	0x200035b0
 800d4e8:	200035b8 	.word	0x200035b8

0800d4ec <__assert_func>:
 800d4ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4ee:	4614      	mov	r4, r2
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	4b09      	ldr	r3, [pc, #36]	; (800d518 <__assert_func+0x2c>)
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	68d8      	ldr	r0, [r3, #12]
 800d4fa:	b14c      	cbz	r4, 800d510 <__assert_func+0x24>
 800d4fc:	4b07      	ldr	r3, [pc, #28]	; (800d51c <__assert_func+0x30>)
 800d4fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d502:	9100      	str	r1, [sp, #0]
 800d504:	462b      	mov	r3, r5
 800d506:	4906      	ldr	r1, [pc, #24]	; (800d520 <__assert_func+0x34>)
 800d508:	f000 f814 	bl	800d534 <fiprintf>
 800d50c:	f000 ff38 	bl	800e380 <abort>
 800d510:	4b04      	ldr	r3, [pc, #16]	; (800d524 <__assert_func+0x38>)
 800d512:	461c      	mov	r4, r3
 800d514:	e7f3      	b.n	800d4fe <__assert_func+0x12>
 800d516:	bf00      	nop
 800d518:	20000158 	.word	0x20000158
 800d51c:	080121e5 	.word	0x080121e5
 800d520:	080121f2 	.word	0x080121f2
 800d524:	08012220 	.word	0x08012220

0800d528 <__errno>:
 800d528:	4b01      	ldr	r3, [pc, #4]	; (800d530 <__errno+0x8>)
 800d52a:	6818      	ldr	r0, [r3, #0]
 800d52c:	4770      	bx	lr
 800d52e:	bf00      	nop
 800d530:	20000158 	.word	0x20000158

0800d534 <fiprintf>:
 800d534:	b40e      	push	{r1, r2, r3}
 800d536:	b503      	push	{r0, r1, lr}
 800d538:	4601      	mov	r1, r0
 800d53a:	ab03      	add	r3, sp, #12
 800d53c:	4805      	ldr	r0, [pc, #20]	; (800d554 <fiprintf+0x20>)
 800d53e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d542:	6800      	ldr	r0, [r0, #0]
 800d544:	9301      	str	r3, [sp, #4]
 800d546:	f000 f869 	bl	800d61c <_vfiprintf_r>
 800d54a:	b002      	add	sp, #8
 800d54c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d550:	b003      	add	sp, #12
 800d552:	4770      	bx	lr
 800d554:	20000158 	.word	0x20000158

0800d558 <__libc_init_array>:
 800d558:	b570      	push	{r4, r5, r6, lr}
 800d55a:	2600      	movs	r6, #0
 800d55c:	4d0c      	ldr	r5, [pc, #48]	; (800d590 <__libc_init_array+0x38>)
 800d55e:	4c0d      	ldr	r4, [pc, #52]	; (800d594 <__libc_init_array+0x3c>)
 800d560:	1b64      	subs	r4, r4, r5
 800d562:	10a4      	asrs	r4, r4, #2
 800d564:	42a6      	cmp	r6, r4
 800d566:	d109      	bne.n	800d57c <__libc_init_array+0x24>
 800d568:	f003 fe5c 	bl	8011224 <_init>
 800d56c:	2600      	movs	r6, #0
 800d56e:	4d0a      	ldr	r5, [pc, #40]	; (800d598 <__libc_init_array+0x40>)
 800d570:	4c0a      	ldr	r4, [pc, #40]	; (800d59c <__libc_init_array+0x44>)
 800d572:	1b64      	subs	r4, r4, r5
 800d574:	10a4      	asrs	r4, r4, #2
 800d576:	42a6      	cmp	r6, r4
 800d578:	d105      	bne.n	800d586 <__libc_init_array+0x2e>
 800d57a:	bd70      	pop	{r4, r5, r6, pc}
 800d57c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d580:	4798      	blx	r3
 800d582:	3601      	adds	r6, #1
 800d584:	e7ee      	b.n	800d564 <__libc_init_array+0xc>
 800d586:	f855 3b04 	ldr.w	r3, [r5], #4
 800d58a:	4798      	blx	r3
 800d58c:	3601      	adds	r6, #1
 800d58e:	e7f2      	b.n	800d576 <__libc_init_array+0x1e>
 800d590:	08012618 	.word	0x08012618
 800d594:	08012618 	.word	0x08012618
 800d598:	08012618 	.word	0x08012618
 800d59c:	0801261c 	.word	0x0801261c

0800d5a0 <memcpy>:
 800d5a0:	440a      	add	r2, r1
 800d5a2:	4291      	cmp	r1, r2
 800d5a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d5a8:	d100      	bne.n	800d5ac <memcpy+0xc>
 800d5aa:	4770      	bx	lr
 800d5ac:	b510      	push	{r4, lr}
 800d5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5b2:	4291      	cmp	r1, r2
 800d5b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5b8:	d1f9      	bne.n	800d5ae <memcpy+0xe>
 800d5ba:	bd10      	pop	{r4, pc}

0800d5bc <memset>:
 800d5bc:	4603      	mov	r3, r0
 800d5be:	4402      	add	r2, r0
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d100      	bne.n	800d5c6 <memset+0xa>
 800d5c4:	4770      	bx	lr
 800d5c6:	f803 1b01 	strb.w	r1, [r3], #1
 800d5ca:	e7f9      	b.n	800d5c0 <memset+0x4>

0800d5cc <__sfputc_r>:
 800d5cc:	6893      	ldr	r3, [r2, #8]
 800d5ce:	b410      	push	{r4}
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	6093      	str	r3, [r2, #8]
 800d5d6:	da07      	bge.n	800d5e8 <__sfputc_r+0x1c>
 800d5d8:	6994      	ldr	r4, [r2, #24]
 800d5da:	42a3      	cmp	r3, r4
 800d5dc:	db01      	blt.n	800d5e2 <__sfputc_r+0x16>
 800d5de:	290a      	cmp	r1, #10
 800d5e0:	d102      	bne.n	800d5e8 <__sfputc_r+0x1c>
 800d5e2:	bc10      	pop	{r4}
 800d5e4:	f000 be0c 	b.w	800e200 <__swbuf_r>
 800d5e8:	6813      	ldr	r3, [r2, #0]
 800d5ea:	1c58      	adds	r0, r3, #1
 800d5ec:	6010      	str	r0, [r2, #0]
 800d5ee:	7019      	strb	r1, [r3, #0]
 800d5f0:	4608      	mov	r0, r1
 800d5f2:	bc10      	pop	{r4}
 800d5f4:	4770      	bx	lr

0800d5f6 <__sfputs_r>:
 800d5f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f8:	4606      	mov	r6, r0
 800d5fa:	460f      	mov	r7, r1
 800d5fc:	4614      	mov	r4, r2
 800d5fe:	18d5      	adds	r5, r2, r3
 800d600:	42ac      	cmp	r4, r5
 800d602:	d101      	bne.n	800d608 <__sfputs_r+0x12>
 800d604:	2000      	movs	r0, #0
 800d606:	e007      	b.n	800d618 <__sfputs_r+0x22>
 800d608:	463a      	mov	r2, r7
 800d60a:	4630      	mov	r0, r6
 800d60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d610:	f7ff ffdc 	bl	800d5cc <__sfputc_r>
 800d614:	1c43      	adds	r3, r0, #1
 800d616:	d1f3      	bne.n	800d600 <__sfputs_r+0xa>
 800d618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d61c <_vfiprintf_r>:
 800d61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d620:	460d      	mov	r5, r1
 800d622:	4614      	mov	r4, r2
 800d624:	4698      	mov	r8, r3
 800d626:	4606      	mov	r6, r0
 800d628:	b09d      	sub	sp, #116	; 0x74
 800d62a:	b118      	cbz	r0, 800d634 <_vfiprintf_r+0x18>
 800d62c:	6983      	ldr	r3, [r0, #24]
 800d62e:	b90b      	cbnz	r3, 800d634 <_vfiprintf_r+0x18>
 800d630:	f001 fe42 	bl	800f2b8 <__sinit>
 800d634:	4b89      	ldr	r3, [pc, #548]	; (800d85c <_vfiprintf_r+0x240>)
 800d636:	429d      	cmp	r5, r3
 800d638:	d11b      	bne.n	800d672 <_vfiprintf_r+0x56>
 800d63a:	6875      	ldr	r5, [r6, #4]
 800d63c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d63e:	07d9      	lsls	r1, r3, #31
 800d640:	d405      	bmi.n	800d64e <_vfiprintf_r+0x32>
 800d642:	89ab      	ldrh	r3, [r5, #12]
 800d644:	059a      	lsls	r2, r3, #22
 800d646:	d402      	bmi.n	800d64e <_vfiprintf_r+0x32>
 800d648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d64a:	f001 fed8 	bl	800f3fe <__retarget_lock_acquire_recursive>
 800d64e:	89ab      	ldrh	r3, [r5, #12]
 800d650:	071b      	lsls	r3, r3, #28
 800d652:	d501      	bpl.n	800d658 <_vfiprintf_r+0x3c>
 800d654:	692b      	ldr	r3, [r5, #16]
 800d656:	b9eb      	cbnz	r3, 800d694 <_vfiprintf_r+0x78>
 800d658:	4629      	mov	r1, r5
 800d65a:	4630      	mov	r0, r6
 800d65c:	f000 fe22 	bl	800e2a4 <__swsetup_r>
 800d660:	b1c0      	cbz	r0, 800d694 <_vfiprintf_r+0x78>
 800d662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d664:	07dc      	lsls	r4, r3, #31
 800d666:	d50e      	bpl.n	800d686 <_vfiprintf_r+0x6a>
 800d668:	f04f 30ff 	mov.w	r0, #4294967295
 800d66c:	b01d      	add	sp, #116	; 0x74
 800d66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d672:	4b7b      	ldr	r3, [pc, #492]	; (800d860 <_vfiprintf_r+0x244>)
 800d674:	429d      	cmp	r5, r3
 800d676:	d101      	bne.n	800d67c <_vfiprintf_r+0x60>
 800d678:	68b5      	ldr	r5, [r6, #8]
 800d67a:	e7df      	b.n	800d63c <_vfiprintf_r+0x20>
 800d67c:	4b79      	ldr	r3, [pc, #484]	; (800d864 <_vfiprintf_r+0x248>)
 800d67e:	429d      	cmp	r5, r3
 800d680:	bf08      	it	eq
 800d682:	68f5      	ldreq	r5, [r6, #12]
 800d684:	e7da      	b.n	800d63c <_vfiprintf_r+0x20>
 800d686:	89ab      	ldrh	r3, [r5, #12]
 800d688:	0598      	lsls	r0, r3, #22
 800d68a:	d4ed      	bmi.n	800d668 <_vfiprintf_r+0x4c>
 800d68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d68e:	f001 feb7 	bl	800f400 <__retarget_lock_release_recursive>
 800d692:	e7e9      	b.n	800d668 <_vfiprintf_r+0x4c>
 800d694:	2300      	movs	r3, #0
 800d696:	9309      	str	r3, [sp, #36]	; 0x24
 800d698:	2320      	movs	r3, #32
 800d69a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d69e:	2330      	movs	r3, #48	; 0x30
 800d6a0:	f04f 0901 	mov.w	r9, #1
 800d6a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d868 <_vfiprintf_r+0x24c>
 800d6ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6b0:	4623      	mov	r3, r4
 800d6b2:	469a      	mov	sl, r3
 800d6b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6b8:	b10a      	cbz	r2, 800d6be <_vfiprintf_r+0xa2>
 800d6ba:	2a25      	cmp	r2, #37	; 0x25
 800d6bc:	d1f9      	bne.n	800d6b2 <_vfiprintf_r+0x96>
 800d6be:	ebba 0b04 	subs.w	fp, sl, r4
 800d6c2:	d00b      	beq.n	800d6dc <_vfiprintf_r+0xc0>
 800d6c4:	465b      	mov	r3, fp
 800d6c6:	4622      	mov	r2, r4
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	f7ff ff93 	bl	800d5f6 <__sfputs_r>
 800d6d0:	3001      	adds	r0, #1
 800d6d2:	f000 80aa 	beq.w	800d82a <_vfiprintf_r+0x20e>
 800d6d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6d8:	445a      	add	r2, fp
 800d6da:	9209      	str	r2, [sp, #36]	; 0x24
 800d6dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	f000 80a2 	beq.w	800d82a <_vfiprintf_r+0x20e>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6f0:	f10a 0a01 	add.w	sl, sl, #1
 800d6f4:	9304      	str	r3, [sp, #16]
 800d6f6:	9307      	str	r3, [sp, #28]
 800d6f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6fc:	931a      	str	r3, [sp, #104]	; 0x68
 800d6fe:	4654      	mov	r4, sl
 800d700:	2205      	movs	r2, #5
 800d702:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d706:	4858      	ldr	r0, [pc, #352]	; (800d868 <_vfiprintf_r+0x24c>)
 800d708:	f001 fee8 	bl	800f4dc <memchr>
 800d70c:	9a04      	ldr	r2, [sp, #16]
 800d70e:	b9d8      	cbnz	r0, 800d748 <_vfiprintf_r+0x12c>
 800d710:	06d1      	lsls	r1, r2, #27
 800d712:	bf44      	itt	mi
 800d714:	2320      	movmi	r3, #32
 800d716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d71a:	0713      	lsls	r3, r2, #28
 800d71c:	bf44      	itt	mi
 800d71e:	232b      	movmi	r3, #43	; 0x2b
 800d720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d724:	f89a 3000 	ldrb.w	r3, [sl]
 800d728:	2b2a      	cmp	r3, #42	; 0x2a
 800d72a:	d015      	beq.n	800d758 <_vfiprintf_r+0x13c>
 800d72c:	4654      	mov	r4, sl
 800d72e:	2000      	movs	r0, #0
 800d730:	f04f 0c0a 	mov.w	ip, #10
 800d734:	9a07      	ldr	r2, [sp, #28]
 800d736:	4621      	mov	r1, r4
 800d738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d73c:	3b30      	subs	r3, #48	; 0x30
 800d73e:	2b09      	cmp	r3, #9
 800d740:	d94e      	bls.n	800d7e0 <_vfiprintf_r+0x1c4>
 800d742:	b1b0      	cbz	r0, 800d772 <_vfiprintf_r+0x156>
 800d744:	9207      	str	r2, [sp, #28]
 800d746:	e014      	b.n	800d772 <_vfiprintf_r+0x156>
 800d748:	eba0 0308 	sub.w	r3, r0, r8
 800d74c:	fa09 f303 	lsl.w	r3, r9, r3
 800d750:	4313      	orrs	r3, r2
 800d752:	46a2      	mov	sl, r4
 800d754:	9304      	str	r3, [sp, #16]
 800d756:	e7d2      	b.n	800d6fe <_vfiprintf_r+0xe2>
 800d758:	9b03      	ldr	r3, [sp, #12]
 800d75a:	1d19      	adds	r1, r3, #4
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	9103      	str	r1, [sp, #12]
 800d760:	2b00      	cmp	r3, #0
 800d762:	bfbb      	ittet	lt
 800d764:	425b      	neglt	r3, r3
 800d766:	f042 0202 	orrlt.w	r2, r2, #2
 800d76a:	9307      	strge	r3, [sp, #28]
 800d76c:	9307      	strlt	r3, [sp, #28]
 800d76e:	bfb8      	it	lt
 800d770:	9204      	strlt	r2, [sp, #16]
 800d772:	7823      	ldrb	r3, [r4, #0]
 800d774:	2b2e      	cmp	r3, #46	; 0x2e
 800d776:	d10c      	bne.n	800d792 <_vfiprintf_r+0x176>
 800d778:	7863      	ldrb	r3, [r4, #1]
 800d77a:	2b2a      	cmp	r3, #42	; 0x2a
 800d77c:	d135      	bne.n	800d7ea <_vfiprintf_r+0x1ce>
 800d77e:	9b03      	ldr	r3, [sp, #12]
 800d780:	3402      	adds	r4, #2
 800d782:	1d1a      	adds	r2, r3, #4
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	9203      	str	r2, [sp, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	bfb8      	it	lt
 800d78c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d790:	9305      	str	r3, [sp, #20]
 800d792:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d878 <_vfiprintf_r+0x25c>
 800d796:	2203      	movs	r2, #3
 800d798:	4650      	mov	r0, sl
 800d79a:	7821      	ldrb	r1, [r4, #0]
 800d79c:	f001 fe9e 	bl	800f4dc <memchr>
 800d7a0:	b140      	cbz	r0, 800d7b4 <_vfiprintf_r+0x198>
 800d7a2:	2340      	movs	r3, #64	; 0x40
 800d7a4:	eba0 000a 	sub.w	r0, r0, sl
 800d7a8:	fa03 f000 	lsl.w	r0, r3, r0
 800d7ac:	9b04      	ldr	r3, [sp, #16]
 800d7ae:	3401      	adds	r4, #1
 800d7b0:	4303      	orrs	r3, r0
 800d7b2:	9304      	str	r3, [sp, #16]
 800d7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7b8:	2206      	movs	r2, #6
 800d7ba:	482c      	ldr	r0, [pc, #176]	; (800d86c <_vfiprintf_r+0x250>)
 800d7bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7c0:	f001 fe8c 	bl	800f4dc <memchr>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d03f      	beq.n	800d848 <_vfiprintf_r+0x22c>
 800d7c8:	4b29      	ldr	r3, [pc, #164]	; (800d870 <_vfiprintf_r+0x254>)
 800d7ca:	bb1b      	cbnz	r3, 800d814 <_vfiprintf_r+0x1f8>
 800d7cc:	9b03      	ldr	r3, [sp, #12]
 800d7ce:	3307      	adds	r3, #7
 800d7d0:	f023 0307 	bic.w	r3, r3, #7
 800d7d4:	3308      	adds	r3, #8
 800d7d6:	9303      	str	r3, [sp, #12]
 800d7d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7da:	443b      	add	r3, r7
 800d7dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d7de:	e767      	b.n	800d6b0 <_vfiprintf_r+0x94>
 800d7e0:	460c      	mov	r4, r1
 800d7e2:	2001      	movs	r0, #1
 800d7e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7e8:	e7a5      	b.n	800d736 <_vfiprintf_r+0x11a>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	f04f 0c0a 	mov.w	ip, #10
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	3401      	adds	r4, #1
 800d7f4:	9305      	str	r3, [sp, #20]
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7fc:	3a30      	subs	r2, #48	; 0x30
 800d7fe:	2a09      	cmp	r2, #9
 800d800:	d903      	bls.n	800d80a <_vfiprintf_r+0x1ee>
 800d802:	2b00      	cmp	r3, #0
 800d804:	d0c5      	beq.n	800d792 <_vfiprintf_r+0x176>
 800d806:	9105      	str	r1, [sp, #20]
 800d808:	e7c3      	b.n	800d792 <_vfiprintf_r+0x176>
 800d80a:	4604      	mov	r4, r0
 800d80c:	2301      	movs	r3, #1
 800d80e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d812:	e7f0      	b.n	800d7f6 <_vfiprintf_r+0x1da>
 800d814:	ab03      	add	r3, sp, #12
 800d816:	9300      	str	r3, [sp, #0]
 800d818:	462a      	mov	r2, r5
 800d81a:	4630      	mov	r0, r6
 800d81c:	4b15      	ldr	r3, [pc, #84]	; (800d874 <_vfiprintf_r+0x258>)
 800d81e:	a904      	add	r1, sp, #16
 800d820:	f000 f8ca 	bl	800d9b8 <_printf_float>
 800d824:	4607      	mov	r7, r0
 800d826:	1c78      	adds	r0, r7, #1
 800d828:	d1d6      	bne.n	800d7d8 <_vfiprintf_r+0x1bc>
 800d82a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d82c:	07d9      	lsls	r1, r3, #31
 800d82e:	d405      	bmi.n	800d83c <_vfiprintf_r+0x220>
 800d830:	89ab      	ldrh	r3, [r5, #12]
 800d832:	059a      	lsls	r2, r3, #22
 800d834:	d402      	bmi.n	800d83c <_vfiprintf_r+0x220>
 800d836:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d838:	f001 fde2 	bl	800f400 <__retarget_lock_release_recursive>
 800d83c:	89ab      	ldrh	r3, [r5, #12]
 800d83e:	065b      	lsls	r3, r3, #25
 800d840:	f53f af12 	bmi.w	800d668 <_vfiprintf_r+0x4c>
 800d844:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d846:	e711      	b.n	800d66c <_vfiprintf_r+0x50>
 800d848:	ab03      	add	r3, sp, #12
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	462a      	mov	r2, r5
 800d84e:	4630      	mov	r0, r6
 800d850:	4b08      	ldr	r3, [pc, #32]	; (800d874 <_vfiprintf_r+0x258>)
 800d852:	a904      	add	r1, sp, #16
 800d854:	f000 fb4c 	bl	800def0 <_printf_i>
 800d858:	e7e4      	b.n	800d824 <_vfiprintf_r+0x208>
 800d85a:	bf00      	nop
 800d85c:	08012324 	.word	0x08012324
 800d860:	08012344 	.word	0x08012344
 800d864:	08012304 	.word	0x08012304
 800d868:	08012228 	.word	0x08012228
 800d86c:	08012232 	.word	0x08012232
 800d870:	0800d9b9 	.word	0x0800d9b9
 800d874:	0800d5f7 	.word	0x0800d5f7
 800d878:	0801222e 	.word	0x0801222e

0800d87c <__cvt>:
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d882:	461f      	mov	r7, r3
 800d884:	bfbb      	ittet	lt
 800d886:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d88a:	461f      	movlt	r7, r3
 800d88c:	2300      	movge	r3, #0
 800d88e:	232d      	movlt	r3, #45	; 0x2d
 800d890:	b088      	sub	sp, #32
 800d892:	4614      	mov	r4, r2
 800d894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d896:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d898:	7013      	strb	r3, [r2, #0]
 800d89a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d89c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d8a0:	f023 0820 	bic.w	r8, r3, #32
 800d8a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d8a8:	d005      	beq.n	800d8b6 <__cvt+0x3a>
 800d8aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d8ae:	d100      	bne.n	800d8b2 <__cvt+0x36>
 800d8b0:	3501      	adds	r5, #1
 800d8b2:	2302      	movs	r3, #2
 800d8b4:	e000      	b.n	800d8b8 <__cvt+0x3c>
 800d8b6:	2303      	movs	r3, #3
 800d8b8:	aa07      	add	r2, sp, #28
 800d8ba:	9204      	str	r2, [sp, #16]
 800d8bc:	aa06      	add	r2, sp, #24
 800d8be:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d8c2:	e9cd 3500 	strd	r3, r5, [sp]
 800d8c6:	4622      	mov	r2, r4
 800d8c8:	463b      	mov	r3, r7
 800d8ca:	f000 fded 	bl	800e4a8 <_dtoa_r>
 800d8ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d8d2:	4606      	mov	r6, r0
 800d8d4:	d102      	bne.n	800d8dc <__cvt+0x60>
 800d8d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d8d8:	07db      	lsls	r3, r3, #31
 800d8da:	d522      	bpl.n	800d922 <__cvt+0xa6>
 800d8dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d8e0:	eb06 0905 	add.w	r9, r6, r5
 800d8e4:	d110      	bne.n	800d908 <__cvt+0x8c>
 800d8e6:	7833      	ldrb	r3, [r6, #0]
 800d8e8:	2b30      	cmp	r3, #48	; 0x30
 800d8ea:	d10a      	bne.n	800d902 <__cvt+0x86>
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	4639      	mov	r1, r7
 800d8f4:	f7f3 f8d2 	bl	8000a9c <__aeabi_dcmpeq>
 800d8f8:	b918      	cbnz	r0, 800d902 <__cvt+0x86>
 800d8fa:	f1c5 0501 	rsb	r5, r5, #1
 800d8fe:	f8ca 5000 	str.w	r5, [sl]
 800d902:	f8da 3000 	ldr.w	r3, [sl]
 800d906:	4499      	add	r9, r3
 800d908:	2200      	movs	r2, #0
 800d90a:	2300      	movs	r3, #0
 800d90c:	4620      	mov	r0, r4
 800d90e:	4639      	mov	r1, r7
 800d910:	f7f3 f8c4 	bl	8000a9c <__aeabi_dcmpeq>
 800d914:	b108      	cbz	r0, 800d91a <__cvt+0x9e>
 800d916:	f8cd 901c 	str.w	r9, [sp, #28]
 800d91a:	2230      	movs	r2, #48	; 0x30
 800d91c:	9b07      	ldr	r3, [sp, #28]
 800d91e:	454b      	cmp	r3, r9
 800d920:	d307      	bcc.n	800d932 <__cvt+0xb6>
 800d922:	4630      	mov	r0, r6
 800d924:	9b07      	ldr	r3, [sp, #28]
 800d926:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d928:	1b9b      	subs	r3, r3, r6
 800d92a:	6013      	str	r3, [r2, #0]
 800d92c:	b008      	add	sp, #32
 800d92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d932:	1c59      	adds	r1, r3, #1
 800d934:	9107      	str	r1, [sp, #28]
 800d936:	701a      	strb	r2, [r3, #0]
 800d938:	e7f0      	b.n	800d91c <__cvt+0xa0>

0800d93a <__exponent>:
 800d93a:	4603      	mov	r3, r0
 800d93c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d93e:	2900      	cmp	r1, #0
 800d940:	f803 2b02 	strb.w	r2, [r3], #2
 800d944:	bfb6      	itet	lt
 800d946:	222d      	movlt	r2, #45	; 0x2d
 800d948:	222b      	movge	r2, #43	; 0x2b
 800d94a:	4249      	neglt	r1, r1
 800d94c:	2909      	cmp	r1, #9
 800d94e:	7042      	strb	r2, [r0, #1]
 800d950:	dd2b      	ble.n	800d9aa <__exponent+0x70>
 800d952:	f10d 0407 	add.w	r4, sp, #7
 800d956:	46a4      	mov	ip, r4
 800d958:	270a      	movs	r7, #10
 800d95a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d95e:	460a      	mov	r2, r1
 800d960:	46a6      	mov	lr, r4
 800d962:	fb07 1516 	mls	r5, r7, r6, r1
 800d966:	2a63      	cmp	r2, #99	; 0x63
 800d968:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800d96c:	4631      	mov	r1, r6
 800d96e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d972:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d976:	dcf0      	bgt.n	800d95a <__exponent+0x20>
 800d978:	3130      	adds	r1, #48	; 0x30
 800d97a:	f1ae 0502 	sub.w	r5, lr, #2
 800d97e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d982:	4629      	mov	r1, r5
 800d984:	1c44      	adds	r4, r0, #1
 800d986:	4561      	cmp	r1, ip
 800d988:	d30a      	bcc.n	800d9a0 <__exponent+0x66>
 800d98a:	f10d 0209 	add.w	r2, sp, #9
 800d98e:	eba2 020e 	sub.w	r2, r2, lr
 800d992:	4565      	cmp	r5, ip
 800d994:	bf88      	it	hi
 800d996:	2200      	movhi	r2, #0
 800d998:	4413      	add	r3, r2
 800d99a:	1a18      	subs	r0, r3, r0
 800d99c:	b003      	add	sp, #12
 800d99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9a4:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d9a8:	e7ed      	b.n	800d986 <__exponent+0x4c>
 800d9aa:	2330      	movs	r3, #48	; 0x30
 800d9ac:	3130      	adds	r1, #48	; 0x30
 800d9ae:	7083      	strb	r3, [r0, #2]
 800d9b0:	70c1      	strb	r1, [r0, #3]
 800d9b2:	1d03      	adds	r3, r0, #4
 800d9b4:	e7f1      	b.n	800d99a <__exponent+0x60>
	...

0800d9b8 <_printf_float>:
 800d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9bc:	b091      	sub	sp, #68	; 0x44
 800d9be:	460c      	mov	r4, r1
 800d9c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d9c4:	4616      	mov	r6, r2
 800d9c6:	461f      	mov	r7, r3
 800d9c8:	4605      	mov	r5, r0
 800d9ca:	f001 fd13 	bl	800f3f4 <_localeconv_r>
 800d9ce:	6803      	ldr	r3, [r0, #0]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d9d4:	f7f2 fc36 	bl	8000244 <strlen>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	930e      	str	r3, [sp, #56]	; 0x38
 800d9dc:	f8d8 3000 	ldr.w	r3, [r8]
 800d9e0:	900a      	str	r0, [sp, #40]	; 0x28
 800d9e2:	3307      	adds	r3, #7
 800d9e4:	f023 0307 	bic.w	r3, r3, #7
 800d9e8:	f103 0208 	add.w	r2, r3, #8
 800d9ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d9f0:	f8d4 b000 	ldr.w	fp, [r4]
 800d9f4:	f8c8 2000 	str.w	r2, [r8]
 800d9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800da00:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800da04:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800da08:	930b      	str	r3, [sp, #44]	; 0x2c
 800da0a:	f04f 32ff 	mov.w	r2, #4294967295
 800da0e:	4640      	mov	r0, r8
 800da10:	4b9c      	ldr	r3, [pc, #624]	; (800dc84 <_printf_float+0x2cc>)
 800da12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da14:	f7f3 f874 	bl	8000b00 <__aeabi_dcmpun>
 800da18:	bb70      	cbnz	r0, 800da78 <_printf_float+0xc0>
 800da1a:	f04f 32ff 	mov.w	r2, #4294967295
 800da1e:	4640      	mov	r0, r8
 800da20:	4b98      	ldr	r3, [pc, #608]	; (800dc84 <_printf_float+0x2cc>)
 800da22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da24:	f7f3 f84e 	bl	8000ac4 <__aeabi_dcmple>
 800da28:	bb30      	cbnz	r0, 800da78 <_printf_float+0xc0>
 800da2a:	2200      	movs	r2, #0
 800da2c:	2300      	movs	r3, #0
 800da2e:	4640      	mov	r0, r8
 800da30:	4651      	mov	r1, sl
 800da32:	f7f3 f83d 	bl	8000ab0 <__aeabi_dcmplt>
 800da36:	b110      	cbz	r0, 800da3e <_printf_float+0x86>
 800da38:	232d      	movs	r3, #45	; 0x2d
 800da3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da3e:	4b92      	ldr	r3, [pc, #584]	; (800dc88 <_printf_float+0x2d0>)
 800da40:	4892      	ldr	r0, [pc, #584]	; (800dc8c <_printf_float+0x2d4>)
 800da42:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800da46:	bf94      	ite	ls
 800da48:	4698      	movls	r8, r3
 800da4a:	4680      	movhi	r8, r0
 800da4c:	2303      	movs	r3, #3
 800da4e:	f04f 0a00 	mov.w	sl, #0
 800da52:	6123      	str	r3, [r4, #16]
 800da54:	f02b 0304 	bic.w	r3, fp, #4
 800da58:	6023      	str	r3, [r4, #0]
 800da5a:	4633      	mov	r3, r6
 800da5c:	4621      	mov	r1, r4
 800da5e:	4628      	mov	r0, r5
 800da60:	9700      	str	r7, [sp, #0]
 800da62:	aa0f      	add	r2, sp, #60	; 0x3c
 800da64:	f000 f9d4 	bl	800de10 <_printf_common>
 800da68:	3001      	adds	r0, #1
 800da6a:	f040 8090 	bne.w	800db8e <_printf_float+0x1d6>
 800da6e:	f04f 30ff 	mov.w	r0, #4294967295
 800da72:	b011      	add	sp, #68	; 0x44
 800da74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da78:	4642      	mov	r2, r8
 800da7a:	4653      	mov	r3, sl
 800da7c:	4640      	mov	r0, r8
 800da7e:	4651      	mov	r1, sl
 800da80:	f7f3 f83e 	bl	8000b00 <__aeabi_dcmpun>
 800da84:	b148      	cbz	r0, 800da9a <_printf_float+0xe2>
 800da86:	f1ba 0f00 	cmp.w	sl, #0
 800da8a:	bfb8      	it	lt
 800da8c:	232d      	movlt	r3, #45	; 0x2d
 800da8e:	4880      	ldr	r0, [pc, #512]	; (800dc90 <_printf_float+0x2d8>)
 800da90:	bfb8      	it	lt
 800da92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800da96:	4b7f      	ldr	r3, [pc, #508]	; (800dc94 <_printf_float+0x2dc>)
 800da98:	e7d3      	b.n	800da42 <_printf_float+0x8a>
 800da9a:	6863      	ldr	r3, [r4, #4]
 800da9c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800daa0:	1c5a      	adds	r2, r3, #1
 800daa2:	d142      	bne.n	800db2a <_printf_float+0x172>
 800daa4:	2306      	movs	r3, #6
 800daa6:	6063      	str	r3, [r4, #4]
 800daa8:	2200      	movs	r2, #0
 800daaa:	9206      	str	r2, [sp, #24]
 800daac:	aa0e      	add	r2, sp, #56	; 0x38
 800daae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800dab2:	aa0d      	add	r2, sp, #52	; 0x34
 800dab4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800dab8:	9203      	str	r2, [sp, #12]
 800daba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800dabe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dac2:	6023      	str	r3, [r4, #0]
 800dac4:	6863      	ldr	r3, [r4, #4]
 800dac6:	4642      	mov	r2, r8
 800dac8:	9300      	str	r3, [sp, #0]
 800daca:	4628      	mov	r0, r5
 800dacc:	4653      	mov	r3, sl
 800dace:	910b      	str	r1, [sp, #44]	; 0x2c
 800dad0:	f7ff fed4 	bl	800d87c <__cvt>
 800dad4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dad6:	4680      	mov	r8, r0
 800dad8:	2947      	cmp	r1, #71	; 0x47
 800dada:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dadc:	d108      	bne.n	800daf0 <_printf_float+0x138>
 800dade:	1cc8      	adds	r0, r1, #3
 800dae0:	db02      	blt.n	800dae8 <_printf_float+0x130>
 800dae2:	6863      	ldr	r3, [r4, #4]
 800dae4:	4299      	cmp	r1, r3
 800dae6:	dd40      	ble.n	800db6a <_printf_float+0x1b2>
 800dae8:	f1a9 0902 	sub.w	r9, r9, #2
 800daec:	fa5f f989 	uxtb.w	r9, r9
 800daf0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800daf4:	d81f      	bhi.n	800db36 <_printf_float+0x17e>
 800daf6:	464a      	mov	r2, r9
 800daf8:	3901      	subs	r1, #1
 800dafa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dafe:	910d      	str	r1, [sp, #52]	; 0x34
 800db00:	f7ff ff1b 	bl	800d93a <__exponent>
 800db04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db06:	4682      	mov	sl, r0
 800db08:	1813      	adds	r3, r2, r0
 800db0a:	2a01      	cmp	r2, #1
 800db0c:	6123      	str	r3, [r4, #16]
 800db0e:	dc02      	bgt.n	800db16 <_printf_float+0x15e>
 800db10:	6822      	ldr	r2, [r4, #0]
 800db12:	07d2      	lsls	r2, r2, #31
 800db14:	d501      	bpl.n	800db1a <_printf_float+0x162>
 800db16:	3301      	adds	r3, #1
 800db18:	6123      	str	r3, [r4, #16]
 800db1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d09b      	beq.n	800da5a <_printf_float+0xa2>
 800db22:	232d      	movs	r3, #45	; 0x2d
 800db24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db28:	e797      	b.n	800da5a <_printf_float+0xa2>
 800db2a:	2947      	cmp	r1, #71	; 0x47
 800db2c:	d1bc      	bne.n	800daa8 <_printf_float+0xf0>
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d1ba      	bne.n	800daa8 <_printf_float+0xf0>
 800db32:	2301      	movs	r3, #1
 800db34:	e7b7      	b.n	800daa6 <_printf_float+0xee>
 800db36:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800db3a:	d118      	bne.n	800db6e <_printf_float+0x1b6>
 800db3c:	2900      	cmp	r1, #0
 800db3e:	6863      	ldr	r3, [r4, #4]
 800db40:	dd0b      	ble.n	800db5a <_printf_float+0x1a2>
 800db42:	6121      	str	r1, [r4, #16]
 800db44:	b913      	cbnz	r3, 800db4c <_printf_float+0x194>
 800db46:	6822      	ldr	r2, [r4, #0]
 800db48:	07d0      	lsls	r0, r2, #31
 800db4a:	d502      	bpl.n	800db52 <_printf_float+0x19a>
 800db4c:	3301      	adds	r3, #1
 800db4e:	440b      	add	r3, r1
 800db50:	6123      	str	r3, [r4, #16]
 800db52:	f04f 0a00 	mov.w	sl, #0
 800db56:	65a1      	str	r1, [r4, #88]	; 0x58
 800db58:	e7df      	b.n	800db1a <_printf_float+0x162>
 800db5a:	b913      	cbnz	r3, 800db62 <_printf_float+0x1aa>
 800db5c:	6822      	ldr	r2, [r4, #0]
 800db5e:	07d2      	lsls	r2, r2, #31
 800db60:	d501      	bpl.n	800db66 <_printf_float+0x1ae>
 800db62:	3302      	adds	r3, #2
 800db64:	e7f4      	b.n	800db50 <_printf_float+0x198>
 800db66:	2301      	movs	r3, #1
 800db68:	e7f2      	b.n	800db50 <_printf_float+0x198>
 800db6a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800db6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db70:	4299      	cmp	r1, r3
 800db72:	db05      	blt.n	800db80 <_printf_float+0x1c8>
 800db74:	6823      	ldr	r3, [r4, #0]
 800db76:	6121      	str	r1, [r4, #16]
 800db78:	07d8      	lsls	r0, r3, #31
 800db7a:	d5ea      	bpl.n	800db52 <_printf_float+0x19a>
 800db7c:	1c4b      	adds	r3, r1, #1
 800db7e:	e7e7      	b.n	800db50 <_printf_float+0x198>
 800db80:	2900      	cmp	r1, #0
 800db82:	bfcc      	ite	gt
 800db84:	2201      	movgt	r2, #1
 800db86:	f1c1 0202 	rsble	r2, r1, #2
 800db8a:	4413      	add	r3, r2
 800db8c:	e7e0      	b.n	800db50 <_printf_float+0x198>
 800db8e:	6823      	ldr	r3, [r4, #0]
 800db90:	055a      	lsls	r2, r3, #21
 800db92:	d407      	bmi.n	800dba4 <_printf_float+0x1ec>
 800db94:	6923      	ldr	r3, [r4, #16]
 800db96:	4642      	mov	r2, r8
 800db98:	4631      	mov	r1, r6
 800db9a:	4628      	mov	r0, r5
 800db9c:	47b8      	blx	r7
 800db9e:	3001      	adds	r0, #1
 800dba0:	d12b      	bne.n	800dbfa <_printf_float+0x242>
 800dba2:	e764      	b.n	800da6e <_printf_float+0xb6>
 800dba4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dba8:	f240 80dd 	bls.w	800dd66 <_printf_float+0x3ae>
 800dbac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f7f2 ff72 	bl	8000a9c <__aeabi_dcmpeq>
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d033      	beq.n	800dc24 <_printf_float+0x26c>
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	4631      	mov	r1, r6
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	4a35      	ldr	r2, [pc, #212]	; (800dc98 <_printf_float+0x2e0>)
 800dbc4:	47b8      	blx	r7
 800dbc6:	3001      	adds	r0, #1
 800dbc8:	f43f af51 	beq.w	800da6e <_printf_float+0xb6>
 800dbcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	db02      	blt.n	800dbda <_printf_float+0x222>
 800dbd4:	6823      	ldr	r3, [r4, #0]
 800dbd6:	07d8      	lsls	r0, r3, #31
 800dbd8:	d50f      	bpl.n	800dbfa <_printf_float+0x242>
 800dbda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbde:	4631      	mov	r1, r6
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	47b8      	blx	r7
 800dbe4:	3001      	adds	r0, #1
 800dbe6:	f43f af42 	beq.w	800da6e <_printf_float+0xb6>
 800dbea:	f04f 0800 	mov.w	r8, #0
 800dbee:	f104 091a 	add.w	r9, r4, #26
 800dbf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbf4:	3b01      	subs	r3, #1
 800dbf6:	4543      	cmp	r3, r8
 800dbf8:	dc09      	bgt.n	800dc0e <_printf_float+0x256>
 800dbfa:	6823      	ldr	r3, [r4, #0]
 800dbfc:	079b      	lsls	r3, r3, #30
 800dbfe:	f100 8102 	bmi.w	800de06 <_printf_float+0x44e>
 800dc02:	68e0      	ldr	r0, [r4, #12]
 800dc04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc06:	4298      	cmp	r0, r3
 800dc08:	bfb8      	it	lt
 800dc0a:	4618      	movlt	r0, r3
 800dc0c:	e731      	b.n	800da72 <_printf_float+0xba>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	464a      	mov	r2, r9
 800dc12:	4631      	mov	r1, r6
 800dc14:	4628      	mov	r0, r5
 800dc16:	47b8      	blx	r7
 800dc18:	3001      	adds	r0, #1
 800dc1a:	f43f af28 	beq.w	800da6e <_printf_float+0xb6>
 800dc1e:	f108 0801 	add.w	r8, r8, #1
 800dc22:	e7e6      	b.n	800dbf2 <_printf_float+0x23a>
 800dc24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	dc38      	bgt.n	800dc9c <_printf_float+0x2e4>
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	4631      	mov	r1, r6
 800dc2e:	4628      	mov	r0, r5
 800dc30:	4a19      	ldr	r2, [pc, #100]	; (800dc98 <_printf_float+0x2e0>)
 800dc32:	47b8      	blx	r7
 800dc34:	3001      	adds	r0, #1
 800dc36:	f43f af1a 	beq.w	800da6e <_printf_float+0xb6>
 800dc3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	d102      	bne.n	800dc48 <_printf_float+0x290>
 800dc42:	6823      	ldr	r3, [r4, #0]
 800dc44:	07d9      	lsls	r1, r3, #31
 800dc46:	d5d8      	bpl.n	800dbfa <_printf_float+0x242>
 800dc48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc4c:	4631      	mov	r1, r6
 800dc4e:	4628      	mov	r0, r5
 800dc50:	47b8      	blx	r7
 800dc52:	3001      	adds	r0, #1
 800dc54:	f43f af0b 	beq.w	800da6e <_printf_float+0xb6>
 800dc58:	f04f 0900 	mov.w	r9, #0
 800dc5c:	f104 0a1a 	add.w	sl, r4, #26
 800dc60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc62:	425b      	negs	r3, r3
 800dc64:	454b      	cmp	r3, r9
 800dc66:	dc01      	bgt.n	800dc6c <_printf_float+0x2b4>
 800dc68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc6a:	e794      	b.n	800db96 <_printf_float+0x1de>
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	4652      	mov	r2, sl
 800dc70:	4631      	mov	r1, r6
 800dc72:	4628      	mov	r0, r5
 800dc74:	47b8      	blx	r7
 800dc76:	3001      	adds	r0, #1
 800dc78:	f43f aef9 	beq.w	800da6e <_printf_float+0xb6>
 800dc7c:	f109 0901 	add.w	r9, r9, #1
 800dc80:	e7ee      	b.n	800dc60 <_printf_float+0x2a8>
 800dc82:	bf00      	nop
 800dc84:	7fefffff 	.word	0x7fefffff
 800dc88:	08012239 	.word	0x08012239
 800dc8c:	0801223d 	.word	0x0801223d
 800dc90:	08012245 	.word	0x08012245
 800dc94:	08012241 	.word	0x08012241
 800dc98:	08012249 	.word	0x08012249
 800dc9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dca0:	429a      	cmp	r2, r3
 800dca2:	bfa8      	it	ge
 800dca4:	461a      	movge	r2, r3
 800dca6:	2a00      	cmp	r2, #0
 800dca8:	4691      	mov	r9, r2
 800dcaa:	dc37      	bgt.n	800dd1c <_printf_float+0x364>
 800dcac:	f04f 0b00 	mov.w	fp, #0
 800dcb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcb4:	f104 021a 	add.w	r2, r4, #26
 800dcb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800dcbc:	ebaa 0309 	sub.w	r3, sl, r9
 800dcc0:	455b      	cmp	r3, fp
 800dcc2:	dc33      	bgt.n	800dd2c <_printf_float+0x374>
 800dcc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	db3b      	blt.n	800dd44 <_printf_float+0x38c>
 800dccc:	6823      	ldr	r3, [r4, #0]
 800dcce:	07da      	lsls	r2, r3, #31
 800dcd0:	d438      	bmi.n	800dd44 <_printf_float+0x38c>
 800dcd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dcd6:	eba2 030a 	sub.w	r3, r2, sl
 800dcda:	eba2 0901 	sub.w	r9, r2, r1
 800dcde:	4599      	cmp	r9, r3
 800dce0:	bfa8      	it	ge
 800dce2:	4699      	movge	r9, r3
 800dce4:	f1b9 0f00 	cmp.w	r9, #0
 800dce8:	dc34      	bgt.n	800dd54 <_printf_float+0x39c>
 800dcea:	f04f 0800 	mov.w	r8, #0
 800dcee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcf2:	f104 0a1a 	add.w	sl, r4, #26
 800dcf6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800dcfa:	1a9b      	subs	r3, r3, r2
 800dcfc:	eba3 0309 	sub.w	r3, r3, r9
 800dd00:	4543      	cmp	r3, r8
 800dd02:	f77f af7a 	ble.w	800dbfa <_printf_float+0x242>
 800dd06:	2301      	movs	r3, #1
 800dd08:	4652      	mov	r2, sl
 800dd0a:	4631      	mov	r1, r6
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	47b8      	blx	r7
 800dd10:	3001      	adds	r0, #1
 800dd12:	f43f aeac 	beq.w	800da6e <_printf_float+0xb6>
 800dd16:	f108 0801 	add.w	r8, r8, #1
 800dd1a:	e7ec      	b.n	800dcf6 <_printf_float+0x33e>
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	4631      	mov	r1, r6
 800dd20:	4642      	mov	r2, r8
 800dd22:	4628      	mov	r0, r5
 800dd24:	47b8      	blx	r7
 800dd26:	3001      	adds	r0, #1
 800dd28:	d1c0      	bne.n	800dcac <_printf_float+0x2f4>
 800dd2a:	e6a0      	b.n	800da6e <_printf_float+0xb6>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	4631      	mov	r1, r6
 800dd30:	4628      	mov	r0, r5
 800dd32:	920b      	str	r2, [sp, #44]	; 0x2c
 800dd34:	47b8      	blx	r7
 800dd36:	3001      	adds	r0, #1
 800dd38:	f43f ae99 	beq.w	800da6e <_printf_float+0xb6>
 800dd3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd3e:	f10b 0b01 	add.w	fp, fp, #1
 800dd42:	e7b9      	b.n	800dcb8 <_printf_float+0x300>
 800dd44:	4631      	mov	r1, r6
 800dd46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	47b8      	blx	r7
 800dd4e:	3001      	adds	r0, #1
 800dd50:	d1bf      	bne.n	800dcd2 <_printf_float+0x31a>
 800dd52:	e68c      	b.n	800da6e <_printf_float+0xb6>
 800dd54:	464b      	mov	r3, r9
 800dd56:	4631      	mov	r1, r6
 800dd58:	4628      	mov	r0, r5
 800dd5a:	eb08 020a 	add.w	r2, r8, sl
 800dd5e:	47b8      	blx	r7
 800dd60:	3001      	adds	r0, #1
 800dd62:	d1c2      	bne.n	800dcea <_printf_float+0x332>
 800dd64:	e683      	b.n	800da6e <_printf_float+0xb6>
 800dd66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd68:	2a01      	cmp	r2, #1
 800dd6a:	dc01      	bgt.n	800dd70 <_printf_float+0x3b8>
 800dd6c:	07db      	lsls	r3, r3, #31
 800dd6e:	d537      	bpl.n	800dde0 <_printf_float+0x428>
 800dd70:	2301      	movs	r3, #1
 800dd72:	4642      	mov	r2, r8
 800dd74:	4631      	mov	r1, r6
 800dd76:	4628      	mov	r0, r5
 800dd78:	47b8      	blx	r7
 800dd7a:	3001      	adds	r0, #1
 800dd7c:	f43f ae77 	beq.w	800da6e <_printf_float+0xb6>
 800dd80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd84:	4631      	mov	r1, r6
 800dd86:	4628      	mov	r0, r5
 800dd88:	47b8      	blx	r7
 800dd8a:	3001      	adds	r0, #1
 800dd8c:	f43f ae6f 	beq.w	800da6e <_printf_float+0xb6>
 800dd90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd94:	2200      	movs	r2, #0
 800dd96:	2300      	movs	r3, #0
 800dd98:	f7f2 fe80 	bl	8000a9c <__aeabi_dcmpeq>
 800dd9c:	b9d8      	cbnz	r0, 800ddd6 <_printf_float+0x41e>
 800dd9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dda0:	f108 0201 	add.w	r2, r8, #1
 800dda4:	3b01      	subs	r3, #1
 800dda6:	4631      	mov	r1, r6
 800dda8:	4628      	mov	r0, r5
 800ddaa:	47b8      	blx	r7
 800ddac:	3001      	adds	r0, #1
 800ddae:	d10e      	bne.n	800ddce <_printf_float+0x416>
 800ddb0:	e65d      	b.n	800da6e <_printf_float+0xb6>
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	464a      	mov	r2, r9
 800ddb6:	4631      	mov	r1, r6
 800ddb8:	4628      	mov	r0, r5
 800ddba:	47b8      	blx	r7
 800ddbc:	3001      	adds	r0, #1
 800ddbe:	f43f ae56 	beq.w	800da6e <_printf_float+0xb6>
 800ddc2:	f108 0801 	add.w	r8, r8, #1
 800ddc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	4543      	cmp	r3, r8
 800ddcc:	dcf1      	bgt.n	800ddb2 <_printf_float+0x3fa>
 800ddce:	4653      	mov	r3, sl
 800ddd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ddd4:	e6e0      	b.n	800db98 <_printf_float+0x1e0>
 800ddd6:	f04f 0800 	mov.w	r8, #0
 800ddda:	f104 091a 	add.w	r9, r4, #26
 800ddde:	e7f2      	b.n	800ddc6 <_printf_float+0x40e>
 800dde0:	2301      	movs	r3, #1
 800dde2:	4642      	mov	r2, r8
 800dde4:	e7df      	b.n	800dda6 <_printf_float+0x3ee>
 800dde6:	2301      	movs	r3, #1
 800dde8:	464a      	mov	r2, r9
 800ddea:	4631      	mov	r1, r6
 800ddec:	4628      	mov	r0, r5
 800ddee:	47b8      	blx	r7
 800ddf0:	3001      	adds	r0, #1
 800ddf2:	f43f ae3c 	beq.w	800da6e <_printf_float+0xb6>
 800ddf6:	f108 0801 	add.w	r8, r8, #1
 800ddfa:	68e3      	ldr	r3, [r4, #12]
 800ddfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ddfe:	1a5b      	subs	r3, r3, r1
 800de00:	4543      	cmp	r3, r8
 800de02:	dcf0      	bgt.n	800dde6 <_printf_float+0x42e>
 800de04:	e6fd      	b.n	800dc02 <_printf_float+0x24a>
 800de06:	f04f 0800 	mov.w	r8, #0
 800de0a:	f104 0919 	add.w	r9, r4, #25
 800de0e:	e7f4      	b.n	800ddfa <_printf_float+0x442>

0800de10 <_printf_common>:
 800de10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de14:	4616      	mov	r6, r2
 800de16:	4699      	mov	r9, r3
 800de18:	688a      	ldr	r2, [r1, #8]
 800de1a:	690b      	ldr	r3, [r1, #16]
 800de1c:	4607      	mov	r7, r0
 800de1e:	4293      	cmp	r3, r2
 800de20:	bfb8      	it	lt
 800de22:	4613      	movlt	r3, r2
 800de24:	6033      	str	r3, [r6, #0]
 800de26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de2a:	460c      	mov	r4, r1
 800de2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de30:	b10a      	cbz	r2, 800de36 <_printf_common+0x26>
 800de32:	3301      	adds	r3, #1
 800de34:	6033      	str	r3, [r6, #0]
 800de36:	6823      	ldr	r3, [r4, #0]
 800de38:	0699      	lsls	r1, r3, #26
 800de3a:	bf42      	ittt	mi
 800de3c:	6833      	ldrmi	r3, [r6, #0]
 800de3e:	3302      	addmi	r3, #2
 800de40:	6033      	strmi	r3, [r6, #0]
 800de42:	6825      	ldr	r5, [r4, #0]
 800de44:	f015 0506 	ands.w	r5, r5, #6
 800de48:	d106      	bne.n	800de58 <_printf_common+0x48>
 800de4a:	f104 0a19 	add.w	sl, r4, #25
 800de4e:	68e3      	ldr	r3, [r4, #12]
 800de50:	6832      	ldr	r2, [r6, #0]
 800de52:	1a9b      	subs	r3, r3, r2
 800de54:	42ab      	cmp	r3, r5
 800de56:	dc28      	bgt.n	800deaa <_printf_common+0x9a>
 800de58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de5c:	1e13      	subs	r3, r2, #0
 800de5e:	6822      	ldr	r2, [r4, #0]
 800de60:	bf18      	it	ne
 800de62:	2301      	movne	r3, #1
 800de64:	0692      	lsls	r2, r2, #26
 800de66:	d42d      	bmi.n	800dec4 <_printf_common+0xb4>
 800de68:	4649      	mov	r1, r9
 800de6a:	4638      	mov	r0, r7
 800de6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de70:	47c0      	blx	r8
 800de72:	3001      	adds	r0, #1
 800de74:	d020      	beq.n	800deb8 <_printf_common+0xa8>
 800de76:	6823      	ldr	r3, [r4, #0]
 800de78:	68e5      	ldr	r5, [r4, #12]
 800de7a:	f003 0306 	and.w	r3, r3, #6
 800de7e:	2b04      	cmp	r3, #4
 800de80:	bf18      	it	ne
 800de82:	2500      	movne	r5, #0
 800de84:	6832      	ldr	r2, [r6, #0]
 800de86:	f04f 0600 	mov.w	r6, #0
 800de8a:	68a3      	ldr	r3, [r4, #8]
 800de8c:	bf08      	it	eq
 800de8e:	1aad      	subeq	r5, r5, r2
 800de90:	6922      	ldr	r2, [r4, #16]
 800de92:	bf08      	it	eq
 800de94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de98:	4293      	cmp	r3, r2
 800de9a:	bfc4      	itt	gt
 800de9c:	1a9b      	subgt	r3, r3, r2
 800de9e:	18ed      	addgt	r5, r5, r3
 800dea0:	341a      	adds	r4, #26
 800dea2:	42b5      	cmp	r5, r6
 800dea4:	d11a      	bne.n	800dedc <_printf_common+0xcc>
 800dea6:	2000      	movs	r0, #0
 800dea8:	e008      	b.n	800debc <_printf_common+0xac>
 800deaa:	2301      	movs	r3, #1
 800deac:	4652      	mov	r2, sl
 800deae:	4649      	mov	r1, r9
 800deb0:	4638      	mov	r0, r7
 800deb2:	47c0      	blx	r8
 800deb4:	3001      	adds	r0, #1
 800deb6:	d103      	bne.n	800dec0 <_printf_common+0xb0>
 800deb8:	f04f 30ff 	mov.w	r0, #4294967295
 800debc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dec0:	3501      	adds	r5, #1
 800dec2:	e7c4      	b.n	800de4e <_printf_common+0x3e>
 800dec4:	2030      	movs	r0, #48	; 0x30
 800dec6:	18e1      	adds	r1, r4, r3
 800dec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800decc:	1c5a      	adds	r2, r3, #1
 800dece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ded2:	4422      	add	r2, r4
 800ded4:	3302      	adds	r3, #2
 800ded6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800deda:	e7c5      	b.n	800de68 <_printf_common+0x58>
 800dedc:	2301      	movs	r3, #1
 800dede:	4622      	mov	r2, r4
 800dee0:	4649      	mov	r1, r9
 800dee2:	4638      	mov	r0, r7
 800dee4:	47c0      	blx	r8
 800dee6:	3001      	adds	r0, #1
 800dee8:	d0e6      	beq.n	800deb8 <_printf_common+0xa8>
 800deea:	3601      	adds	r6, #1
 800deec:	e7d9      	b.n	800dea2 <_printf_common+0x92>
	...

0800def0 <_printf_i>:
 800def0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800def4:	460c      	mov	r4, r1
 800def6:	7e27      	ldrb	r7, [r4, #24]
 800def8:	4691      	mov	r9, r2
 800defa:	2f78      	cmp	r7, #120	; 0x78
 800defc:	4680      	mov	r8, r0
 800defe:	469a      	mov	sl, r3
 800df00:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df06:	d807      	bhi.n	800df18 <_printf_i+0x28>
 800df08:	2f62      	cmp	r7, #98	; 0x62
 800df0a:	d80a      	bhi.n	800df22 <_printf_i+0x32>
 800df0c:	2f00      	cmp	r7, #0
 800df0e:	f000 80d9 	beq.w	800e0c4 <_printf_i+0x1d4>
 800df12:	2f58      	cmp	r7, #88	; 0x58
 800df14:	f000 80a4 	beq.w	800e060 <_printf_i+0x170>
 800df18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800df1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800df20:	e03a      	b.n	800df98 <_printf_i+0xa8>
 800df22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800df26:	2b15      	cmp	r3, #21
 800df28:	d8f6      	bhi.n	800df18 <_printf_i+0x28>
 800df2a:	a001      	add	r0, pc, #4	; (adr r0, 800df30 <_printf_i+0x40>)
 800df2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800df30:	0800df89 	.word	0x0800df89
 800df34:	0800df9d 	.word	0x0800df9d
 800df38:	0800df19 	.word	0x0800df19
 800df3c:	0800df19 	.word	0x0800df19
 800df40:	0800df19 	.word	0x0800df19
 800df44:	0800df19 	.word	0x0800df19
 800df48:	0800df9d 	.word	0x0800df9d
 800df4c:	0800df19 	.word	0x0800df19
 800df50:	0800df19 	.word	0x0800df19
 800df54:	0800df19 	.word	0x0800df19
 800df58:	0800df19 	.word	0x0800df19
 800df5c:	0800e0ab 	.word	0x0800e0ab
 800df60:	0800dfcd 	.word	0x0800dfcd
 800df64:	0800e08d 	.word	0x0800e08d
 800df68:	0800df19 	.word	0x0800df19
 800df6c:	0800df19 	.word	0x0800df19
 800df70:	0800e0cd 	.word	0x0800e0cd
 800df74:	0800df19 	.word	0x0800df19
 800df78:	0800dfcd 	.word	0x0800dfcd
 800df7c:	0800df19 	.word	0x0800df19
 800df80:	0800df19 	.word	0x0800df19
 800df84:	0800e095 	.word	0x0800e095
 800df88:	680b      	ldr	r3, [r1, #0]
 800df8a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800df8e:	1d1a      	adds	r2, r3, #4
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	600a      	str	r2, [r1, #0]
 800df94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df98:	2301      	movs	r3, #1
 800df9a:	e0a4      	b.n	800e0e6 <_printf_i+0x1f6>
 800df9c:	6825      	ldr	r5, [r4, #0]
 800df9e:	6808      	ldr	r0, [r1, #0]
 800dfa0:	062e      	lsls	r6, r5, #24
 800dfa2:	f100 0304 	add.w	r3, r0, #4
 800dfa6:	d50a      	bpl.n	800dfbe <_printf_i+0xce>
 800dfa8:	6805      	ldr	r5, [r0, #0]
 800dfaa:	600b      	str	r3, [r1, #0]
 800dfac:	2d00      	cmp	r5, #0
 800dfae:	da03      	bge.n	800dfb8 <_printf_i+0xc8>
 800dfb0:	232d      	movs	r3, #45	; 0x2d
 800dfb2:	426d      	negs	r5, r5
 800dfb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfb8:	230a      	movs	r3, #10
 800dfba:	485e      	ldr	r0, [pc, #376]	; (800e134 <_printf_i+0x244>)
 800dfbc:	e019      	b.n	800dff2 <_printf_i+0x102>
 800dfbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800dfc2:	6805      	ldr	r5, [r0, #0]
 800dfc4:	600b      	str	r3, [r1, #0]
 800dfc6:	bf18      	it	ne
 800dfc8:	b22d      	sxthne	r5, r5
 800dfca:	e7ef      	b.n	800dfac <_printf_i+0xbc>
 800dfcc:	680b      	ldr	r3, [r1, #0]
 800dfce:	6825      	ldr	r5, [r4, #0]
 800dfd0:	1d18      	adds	r0, r3, #4
 800dfd2:	6008      	str	r0, [r1, #0]
 800dfd4:	0628      	lsls	r0, r5, #24
 800dfd6:	d501      	bpl.n	800dfdc <_printf_i+0xec>
 800dfd8:	681d      	ldr	r5, [r3, #0]
 800dfda:	e002      	b.n	800dfe2 <_printf_i+0xf2>
 800dfdc:	0669      	lsls	r1, r5, #25
 800dfde:	d5fb      	bpl.n	800dfd8 <_printf_i+0xe8>
 800dfe0:	881d      	ldrh	r5, [r3, #0]
 800dfe2:	2f6f      	cmp	r7, #111	; 0x6f
 800dfe4:	bf0c      	ite	eq
 800dfe6:	2308      	moveq	r3, #8
 800dfe8:	230a      	movne	r3, #10
 800dfea:	4852      	ldr	r0, [pc, #328]	; (800e134 <_printf_i+0x244>)
 800dfec:	2100      	movs	r1, #0
 800dfee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dff2:	6866      	ldr	r6, [r4, #4]
 800dff4:	2e00      	cmp	r6, #0
 800dff6:	bfa8      	it	ge
 800dff8:	6821      	ldrge	r1, [r4, #0]
 800dffa:	60a6      	str	r6, [r4, #8]
 800dffc:	bfa4      	itt	ge
 800dffe:	f021 0104 	bicge.w	r1, r1, #4
 800e002:	6021      	strge	r1, [r4, #0]
 800e004:	b90d      	cbnz	r5, 800e00a <_printf_i+0x11a>
 800e006:	2e00      	cmp	r6, #0
 800e008:	d04d      	beq.n	800e0a6 <_printf_i+0x1b6>
 800e00a:	4616      	mov	r6, r2
 800e00c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e010:	fb03 5711 	mls	r7, r3, r1, r5
 800e014:	5dc7      	ldrb	r7, [r0, r7]
 800e016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e01a:	462f      	mov	r7, r5
 800e01c:	42bb      	cmp	r3, r7
 800e01e:	460d      	mov	r5, r1
 800e020:	d9f4      	bls.n	800e00c <_printf_i+0x11c>
 800e022:	2b08      	cmp	r3, #8
 800e024:	d10b      	bne.n	800e03e <_printf_i+0x14e>
 800e026:	6823      	ldr	r3, [r4, #0]
 800e028:	07df      	lsls	r7, r3, #31
 800e02a:	d508      	bpl.n	800e03e <_printf_i+0x14e>
 800e02c:	6923      	ldr	r3, [r4, #16]
 800e02e:	6861      	ldr	r1, [r4, #4]
 800e030:	4299      	cmp	r1, r3
 800e032:	bfde      	ittt	le
 800e034:	2330      	movle	r3, #48	; 0x30
 800e036:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e03a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e03e:	1b92      	subs	r2, r2, r6
 800e040:	6122      	str	r2, [r4, #16]
 800e042:	464b      	mov	r3, r9
 800e044:	4621      	mov	r1, r4
 800e046:	4640      	mov	r0, r8
 800e048:	f8cd a000 	str.w	sl, [sp]
 800e04c:	aa03      	add	r2, sp, #12
 800e04e:	f7ff fedf 	bl	800de10 <_printf_common>
 800e052:	3001      	adds	r0, #1
 800e054:	d14c      	bne.n	800e0f0 <_printf_i+0x200>
 800e056:	f04f 30ff 	mov.w	r0, #4294967295
 800e05a:	b004      	add	sp, #16
 800e05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e060:	4834      	ldr	r0, [pc, #208]	; (800e134 <_printf_i+0x244>)
 800e062:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e066:	680e      	ldr	r6, [r1, #0]
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e06e:	061f      	lsls	r7, r3, #24
 800e070:	600e      	str	r6, [r1, #0]
 800e072:	d514      	bpl.n	800e09e <_printf_i+0x1ae>
 800e074:	07d9      	lsls	r1, r3, #31
 800e076:	bf44      	itt	mi
 800e078:	f043 0320 	orrmi.w	r3, r3, #32
 800e07c:	6023      	strmi	r3, [r4, #0]
 800e07e:	b91d      	cbnz	r5, 800e088 <_printf_i+0x198>
 800e080:	6823      	ldr	r3, [r4, #0]
 800e082:	f023 0320 	bic.w	r3, r3, #32
 800e086:	6023      	str	r3, [r4, #0]
 800e088:	2310      	movs	r3, #16
 800e08a:	e7af      	b.n	800dfec <_printf_i+0xfc>
 800e08c:	6823      	ldr	r3, [r4, #0]
 800e08e:	f043 0320 	orr.w	r3, r3, #32
 800e092:	6023      	str	r3, [r4, #0]
 800e094:	2378      	movs	r3, #120	; 0x78
 800e096:	4828      	ldr	r0, [pc, #160]	; (800e138 <_printf_i+0x248>)
 800e098:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e09c:	e7e3      	b.n	800e066 <_printf_i+0x176>
 800e09e:	065e      	lsls	r6, r3, #25
 800e0a0:	bf48      	it	mi
 800e0a2:	b2ad      	uxthmi	r5, r5
 800e0a4:	e7e6      	b.n	800e074 <_printf_i+0x184>
 800e0a6:	4616      	mov	r6, r2
 800e0a8:	e7bb      	b.n	800e022 <_printf_i+0x132>
 800e0aa:	680b      	ldr	r3, [r1, #0]
 800e0ac:	6826      	ldr	r6, [r4, #0]
 800e0ae:	1d1d      	adds	r5, r3, #4
 800e0b0:	6960      	ldr	r0, [r4, #20]
 800e0b2:	600d      	str	r5, [r1, #0]
 800e0b4:	0635      	lsls	r5, r6, #24
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	d501      	bpl.n	800e0be <_printf_i+0x1ce>
 800e0ba:	6018      	str	r0, [r3, #0]
 800e0bc:	e002      	b.n	800e0c4 <_printf_i+0x1d4>
 800e0be:	0671      	lsls	r1, r6, #25
 800e0c0:	d5fb      	bpl.n	800e0ba <_printf_i+0x1ca>
 800e0c2:	8018      	strh	r0, [r3, #0]
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	4616      	mov	r6, r2
 800e0c8:	6123      	str	r3, [r4, #16]
 800e0ca:	e7ba      	b.n	800e042 <_printf_i+0x152>
 800e0cc:	680b      	ldr	r3, [r1, #0]
 800e0ce:	1d1a      	adds	r2, r3, #4
 800e0d0:	600a      	str	r2, [r1, #0]
 800e0d2:	681e      	ldr	r6, [r3, #0]
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	6862      	ldr	r2, [r4, #4]
 800e0da:	f001 f9ff 	bl	800f4dc <memchr>
 800e0de:	b108      	cbz	r0, 800e0e4 <_printf_i+0x1f4>
 800e0e0:	1b80      	subs	r0, r0, r6
 800e0e2:	6060      	str	r0, [r4, #4]
 800e0e4:	6863      	ldr	r3, [r4, #4]
 800e0e6:	6123      	str	r3, [r4, #16]
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0ee:	e7a8      	b.n	800e042 <_printf_i+0x152>
 800e0f0:	4632      	mov	r2, r6
 800e0f2:	4649      	mov	r1, r9
 800e0f4:	4640      	mov	r0, r8
 800e0f6:	6923      	ldr	r3, [r4, #16]
 800e0f8:	47d0      	blx	sl
 800e0fa:	3001      	adds	r0, #1
 800e0fc:	d0ab      	beq.n	800e056 <_printf_i+0x166>
 800e0fe:	6823      	ldr	r3, [r4, #0]
 800e100:	079b      	lsls	r3, r3, #30
 800e102:	d413      	bmi.n	800e12c <_printf_i+0x23c>
 800e104:	68e0      	ldr	r0, [r4, #12]
 800e106:	9b03      	ldr	r3, [sp, #12]
 800e108:	4298      	cmp	r0, r3
 800e10a:	bfb8      	it	lt
 800e10c:	4618      	movlt	r0, r3
 800e10e:	e7a4      	b.n	800e05a <_printf_i+0x16a>
 800e110:	2301      	movs	r3, #1
 800e112:	4632      	mov	r2, r6
 800e114:	4649      	mov	r1, r9
 800e116:	4640      	mov	r0, r8
 800e118:	47d0      	blx	sl
 800e11a:	3001      	adds	r0, #1
 800e11c:	d09b      	beq.n	800e056 <_printf_i+0x166>
 800e11e:	3501      	adds	r5, #1
 800e120:	68e3      	ldr	r3, [r4, #12]
 800e122:	9903      	ldr	r1, [sp, #12]
 800e124:	1a5b      	subs	r3, r3, r1
 800e126:	42ab      	cmp	r3, r5
 800e128:	dcf2      	bgt.n	800e110 <_printf_i+0x220>
 800e12a:	e7eb      	b.n	800e104 <_printf_i+0x214>
 800e12c:	2500      	movs	r5, #0
 800e12e:	f104 0619 	add.w	r6, r4, #25
 800e132:	e7f5      	b.n	800e120 <_printf_i+0x230>
 800e134:	0801224b 	.word	0x0801224b
 800e138:	0801225c 	.word	0x0801225c

0800e13c <iprintf>:
 800e13c:	b40f      	push	{r0, r1, r2, r3}
 800e13e:	4b0a      	ldr	r3, [pc, #40]	; (800e168 <iprintf+0x2c>)
 800e140:	b513      	push	{r0, r1, r4, lr}
 800e142:	681c      	ldr	r4, [r3, #0]
 800e144:	b124      	cbz	r4, 800e150 <iprintf+0x14>
 800e146:	69a3      	ldr	r3, [r4, #24]
 800e148:	b913      	cbnz	r3, 800e150 <iprintf+0x14>
 800e14a:	4620      	mov	r0, r4
 800e14c:	f001 f8b4 	bl	800f2b8 <__sinit>
 800e150:	ab05      	add	r3, sp, #20
 800e152:	4620      	mov	r0, r4
 800e154:	9a04      	ldr	r2, [sp, #16]
 800e156:	68a1      	ldr	r1, [r4, #8]
 800e158:	9301      	str	r3, [sp, #4]
 800e15a:	f7ff fa5f 	bl	800d61c <_vfiprintf_r>
 800e15e:	b002      	add	sp, #8
 800e160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e164:	b004      	add	sp, #16
 800e166:	4770      	bx	lr
 800e168:	20000158 	.word	0x20000158

0800e16c <sniprintf>:
 800e16c:	b40c      	push	{r2, r3}
 800e16e:	b530      	push	{r4, r5, lr}
 800e170:	4b17      	ldr	r3, [pc, #92]	; (800e1d0 <sniprintf+0x64>)
 800e172:	1e0c      	subs	r4, r1, #0
 800e174:	681d      	ldr	r5, [r3, #0]
 800e176:	b09d      	sub	sp, #116	; 0x74
 800e178:	da08      	bge.n	800e18c <sniprintf+0x20>
 800e17a:	238b      	movs	r3, #139	; 0x8b
 800e17c:	f04f 30ff 	mov.w	r0, #4294967295
 800e180:	602b      	str	r3, [r5, #0]
 800e182:	b01d      	add	sp, #116	; 0x74
 800e184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e188:	b002      	add	sp, #8
 800e18a:	4770      	bx	lr
 800e18c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e190:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e194:	bf0c      	ite	eq
 800e196:	4623      	moveq	r3, r4
 800e198:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e19c:	9304      	str	r3, [sp, #16]
 800e19e:	9307      	str	r3, [sp, #28]
 800e1a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1a4:	9002      	str	r0, [sp, #8]
 800e1a6:	9006      	str	r0, [sp, #24]
 800e1a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	ab21      	add	r3, sp, #132	; 0x84
 800e1b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e1b2:	a902      	add	r1, sp, #8
 800e1b4:	9301      	str	r3, [sp, #4]
 800e1b6:	f001 fe71 	bl	800fe9c <_svfiprintf_r>
 800e1ba:	1c43      	adds	r3, r0, #1
 800e1bc:	bfbc      	itt	lt
 800e1be:	238b      	movlt	r3, #139	; 0x8b
 800e1c0:	602b      	strlt	r3, [r5, #0]
 800e1c2:	2c00      	cmp	r4, #0
 800e1c4:	d0dd      	beq.n	800e182 <sniprintf+0x16>
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	9b02      	ldr	r3, [sp, #8]
 800e1ca:	701a      	strb	r2, [r3, #0]
 800e1cc:	e7d9      	b.n	800e182 <sniprintf+0x16>
 800e1ce:	bf00      	nop
 800e1d0:	20000158 	.word	0x20000158

0800e1d4 <strcpy>:
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1da:	f803 2b01 	strb.w	r2, [r3], #1
 800e1de:	2a00      	cmp	r2, #0
 800e1e0:	d1f9      	bne.n	800e1d6 <strcpy+0x2>
 800e1e2:	4770      	bx	lr

0800e1e4 <strnlen>:
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	b510      	push	{r4, lr}
 800e1e8:	4401      	add	r1, r0
 800e1ea:	428a      	cmp	r2, r1
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	d101      	bne.n	800e1f4 <strnlen+0x10>
 800e1f0:	1a18      	subs	r0, r3, r0
 800e1f2:	bd10      	pop	{r4, pc}
 800e1f4:	781c      	ldrb	r4, [r3, #0]
 800e1f6:	3201      	adds	r2, #1
 800e1f8:	2c00      	cmp	r4, #0
 800e1fa:	d1f6      	bne.n	800e1ea <strnlen+0x6>
 800e1fc:	e7f8      	b.n	800e1f0 <strnlen+0xc>
	...

0800e200 <__swbuf_r>:
 800e200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e202:	460e      	mov	r6, r1
 800e204:	4614      	mov	r4, r2
 800e206:	4605      	mov	r5, r0
 800e208:	b118      	cbz	r0, 800e212 <__swbuf_r+0x12>
 800e20a:	6983      	ldr	r3, [r0, #24]
 800e20c:	b90b      	cbnz	r3, 800e212 <__swbuf_r+0x12>
 800e20e:	f001 f853 	bl	800f2b8 <__sinit>
 800e212:	4b21      	ldr	r3, [pc, #132]	; (800e298 <__swbuf_r+0x98>)
 800e214:	429c      	cmp	r4, r3
 800e216:	d12b      	bne.n	800e270 <__swbuf_r+0x70>
 800e218:	686c      	ldr	r4, [r5, #4]
 800e21a:	69a3      	ldr	r3, [r4, #24]
 800e21c:	60a3      	str	r3, [r4, #8]
 800e21e:	89a3      	ldrh	r3, [r4, #12]
 800e220:	071a      	lsls	r2, r3, #28
 800e222:	d52f      	bpl.n	800e284 <__swbuf_r+0x84>
 800e224:	6923      	ldr	r3, [r4, #16]
 800e226:	b36b      	cbz	r3, 800e284 <__swbuf_r+0x84>
 800e228:	6923      	ldr	r3, [r4, #16]
 800e22a:	6820      	ldr	r0, [r4, #0]
 800e22c:	b2f6      	uxtb	r6, r6
 800e22e:	1ac0      	subs	r0, r0, r3
 800e230:	6963      	ldr	r3, [r4, #20]
 800e232:	4637      	mov	r7, r6
 800e234:	4283      	cmp	r3, r0
 800e236:	dc04      	bgt.n	800e242 <__swbuf_r+0x42>
 800e238:	4621      	mov	r1, r4
 800e23a:	4628      	mov	r0, r5
 800e23c:	f000 ffa8 	bl	800f190 <_fflush_r>
 800e240:	bb30      	cbnz	r0, 800e290 <__swbuf_r+0x90>
 800e242:	68a3      	ldr	r3, [r4, #8]
 800e244:	3001      	adds	r0, #1
 800e246:	3b01      	subs	r3, #1
 800e248:	60a3      	str	r3, [r4, #8]
 800e24a:	6823      	ldr	r3, [r4, #0]
 800e24c:	1c5a      	adds	r2, r3, #1
 800e24e:	6022      	str	r2, [r4, #0]
 800e250:	701e      	strb	r6, [r3, #0]
 800e252:	6963      	ldr	r3, [r4, #20]
 800e254:	4283      	cmp	r3, r0
 800e256:	d004      	beq.n	800e262 <__swbuf_r+0x62>
 800e258:	89a3      	ldrh	r3, [r4, #12]
 800e25a:	07db      	lsls	r3, r3, #31
 800e25c:	d506      	bpl.n	800e26c <__swbuf_r+0x6c>
 800e25e:	2e0a      	cmp	r6, #10
 800e260:	d104      	bne.n	800e26c <__swbuf_r+0x6c>
 800e262:	4621      	mov	r1, r4
 800e264:	4628      	mov	r0, r5
 800e266:	f000 ff93 	bl	800f190 <_fflush_r>
 800e26a:	b988      	cbnz	r0, 800e290 <__swbuf_r+0x90>
 800e26c:	4638      	mov	r0, r7
 800e26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e270:	4b0a      	ldr	r3, [pc, #40]	; (800e29c <__swbuf_r+0x9c>)
 800e272:	429c      	cmp	r4, r3
 800e274:	d101      	bne.n	800e27a <__swbuf_r+0x7a>
 800e276:	68ac      	ldr	r4, [r5, #8]
 800e278:	e7cf      	b.n	800e21a <__swbuf_r+0x1a>
 800e27a:	4b09      	ldr	r3, [pc, #36]	; (800e2a0 <__swbuf_r+0xa0>)
 800e27c:	429c      	cmp	r4, r3
 800e27e:	bf08      	it	eq
 800e280:	68ec      	ldreq	r4, [r5, #12]
 800e282:	e7ca      	b.n	800e21a <__swbuf_r+0x1a>
 800e284:	4621      	mov	r1, r4
 800e286:	4628      	mov	r0, r5
 800e288:	f000 f80c 	bl	800e2a4 <__swsetup_r>
 800e28c:	2800      	cmp	r0, #0
 800e28e:	d0cb      	beq.n	800e228 <__swbuf_r+0x28>
 800e290:	f04f 37ff 	mov.w	r7, #4294967295
 800e294:	e7ea      	b.n	800e26c <__swbuf_r+0x6c>
 800e296:	bf00      	nop
 800e298:	08012324 	.word	0x08012324
 800e29c:	08012344 	.word	0x08012344
 800e2a0:	08012304 	.word	0x08012304

0800e2a4 <__swsetup_r>:
 800e2a4:	4b32      	ldr	r3, [pc, #200]	; (800e370 <__swsetup_r+0xcc>)
 800e2a6:	b570      	push	{r4, r5, r6, lr}
 800e2a8:	681d      	ldr	r5, [r3, #0]
 800e2aa:	4606      	mov	r6, r0
 800e2ac:	460c      	mov	r4, r1
 800e2ae:	b125      	cbz	r5, 800e2ba <__swsetup_r+0x16>
 800e2b0:	69ab      	ldr	r3, [r5, #24]
 800e2b2:	b913      	cbnz	r3, 800e2ba <__swsetup_r+0x16>
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	f000 ffff 	bl	800f2b8 <__sinit>
 800e2ba:	4b2e      	ldr	r3, [pc, #184]	; (800e374 <__swsetup_r+0xd0>)
 800e2bc:	429c      	cmp	r4, r3
 800e2be:	d10f      	bne.n	800e2e0 <__swsetup_r+0x3c>
 800e2c0:	686c      	ldr	r4, [r5, #4]
 800e2c2:	89a3      	ldrh	r3, [r4, #12]
 800e2c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2c8:	0719      	lsls	r1, r3, #28
 800e2ca:	d42c      	bmi.n	800e326 <__swsetup_r+0x82>
 800e2cc:	06dd      	lsls	r5, r3, #27
 800e2ce:	d411      	bmi.n	800e2f4 <__swsetup_r+0x50>
 800e2d0:	2309      	movs	r3, #9
 800e2d2:	6033      	str	r3, [r6, #0]
 800e2d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2dc:	81a3      	strh	r3, [r4, #12]
 800e2de:	e03e      	b.n	800e35e <__swsetup_r+0xba>
 800e2e0:	4b25      	ldr	r3, [pc, #148]	; (800e378 <__swsetup_r+0xd4>)
 800e2e2:	429c      	cmp	r4, r3
 800e2e4:	d101      	bne.n	800e2ea <__swsetup_r+0x46>
 800e2e6:	68ac      	ldr	r4, [r5, #8]
 800e2e8:	e7eb      	b.n	800e2c2 <__swsetup_r+0x1e>
 800e2ea:	4b24      	ldr	r3, [pc, #144]	; (800e37c <__swsetup_r+0xd8>)
 800e2ec:	429c      	cmp	r4, r3
 800e2ee:	bf08      	it	eq
 800e2f0:	68ec      	ldreq	r4, [r5, #12]
 800e2f2:	e7e6      	b.n	800e2c2 <__swsetup_r+0x1e>
 800e2f4:	0758      	lsls	r0, r3, #29
 800e2f6:	d512      	bpl.n	800e31e <__swsetup_r+0x7a>
 800e2f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2fa:	b141      	cbz	r1, 800e30e <__swsetup_r+0x6a>
 800e2fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e300:	4299      	cmp	r1, r3
 800e302:	d002      	beq.n	800e30a <__swsetup_r+0x66>
 800e304:	4630      	mov	r0, r6
 800e306:	f001 fca1 	bl	800fc4c <_free_r>
 800e30a:	2300      	movs	r3, #0
 800e30c:	6363      	str	r3, [r4, #52]	; 0x34
 800e30e:	89a3      	ldrh	r3, [r4, #12]
 800e310:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e314:	81a3      	strh	r3, [r4, #12]
 800e316:	2300      	movs	r3, #0
 800e318:	6063      	str	r3, [r4, #4]
 800e31a:	6923      	ldr	r3, [r4, #16]
 800e31c:	6023      	str	r3, [r4, #0]
 800e31e:	89a3      	ldrh	r3, [r4, #12]
 800e320:	f043 0308 	orr.w	r3, r3, #8
 800e324:	81a3      	strh	r3, [r4, #12]
 800e326:	6923      	ldr	r3, [r4, #16]
 800e328:	b94b      	cbnz	r3, 800e33e <__swsetup_r+0x9a>
 800e32a:	89a3      	ldrh	r3, [r4, #12]
 800e32c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e334:	d003      	beq.n	800e33e <__swsetup_r+0x9a>
 800e336:	4621      	mov	r1, r4
 800e338:	4630      	mov	r0, r6
 800e33a:	f001 f887 	bl	800f44c <__smakebuf_r>
 800e33e:	89a0      	ldrh	r0, [r4, #12]
 800e340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e344:	f010 0301 	ands.w	r3, r0, #1
 800e348:	d00a      	beq.n	800e360 <__swsetup_r+0xbc>
 800e34a:	2300      	movs	r3, #0
 800e34c:	60a3      	str	r3, [r4, #8]
 800e34e:	6963      	ldr	r3, [r4, #20]
 800e350:	425b      	negs	r3, r3
 800e352:	61a3      	str	r3, [r4, #24]
 800e354:	6923      	ldr	r3, [r4, #16]
 800e356:	b943      	cbnz	r3, 800e36a <__swsetup_r+0xc6>
 800e358:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e35c:	d1ba      	bne.n	800e2d4 <__swsetup_r+0x30>
 800e35e:	bd70      	pop	{r4, r5, r6, pc}
 800e360:	0781      	lsls	r1, r0, #30
 800e362:	bf58      	it	pl
 800e364:	6963      	ldrpl	r3, [r4, #20]
 800e366:	60a3      	str	r3, [r4, #8]
 800e368:	e7f4      	b.n	800e354 <__swsetup_r+0xb0>
 800e36a:	2000      	movs	r0, #0
 800e36c:	e7f7      	b.n	800e35e <__swsetup_r+0xba>
 800e36e:	bf00      	nop
 800e370:	20000158 	.word	0x20000158
 800e374:	08012324 	.word	0x08012324
 800e378:	08012344 	.word	0x08012344
 800e37c:	08012304 	.word	0x08012304

0800e380 <abort>:
 800e380:	2006      	movs	r0, #6
 800e382:	b508      	push	{r3, lr}
 800e384:	f001 fec2 	bl	801010c <raise>
 800e388:	2001      	movs	r0, #1
 800e38a:	f7f5 fde4 	bl	8003f56 <_exit>

0800e38e <quorem>:
 800e38e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e392:	6903      	ldr	r3, [r0, #16]
 800e394:	690c      	ldr	r4, [r1, #16]
 800e396:	4607      	mov	r7, r0
 800e398:	42a3      	cmp	r3, r4
 800e39a:	f2c0 8083 	blt.w	800e4a4 <quorem+0x116>
 800e39e:	3c01      	subs	r4, #1
 800e3a0:	f100 0514 	add.w	r5, r0, #20
 800e3a4:	f101 0814 	add.w	r8, r1, #20
 800e3a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3ac:	9301      	str	r3, [sp, #4]
 800e3ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e3b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800e3be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e3c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e3c6:	d332      	bcc.n	800e42e <quorem+0xa0>
 800e3c8:	f04f 0e00 	mov.w	lr, #0
 800e3cc:	4640      	mov	r0, r8
 800e3ce:	46ac      	mov	ip, r5
 800e3d0:	46f2      	mov	sl, lr
 800e3d2:	f850 2b04 	ldr.w	r2, [r0], #4
 800e3d6:	b293      	uxth	r3, r2
 800e3d8:	fb06 e303 	mla	r3, r6, r3, lr
 800e3dc:	0c12      	lsrs	r2, r2, #16
 800e3de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e3e2:	fb06 e202 	mla	r2, r6, r2, lr
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	ebaa 0303 	sub.w	r3, sl, r3
 800e3ec:	f8dc a000 	ldr.w	sl, [ip]
 800e3f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e3f4:	fa1f fa8a 	uxth.w	sl, sl
 800e3f8:	4453      	add	r3, sl
 800e3fa:	fa1f fa82 	uxth.w	sl, r2
 800e3fe:	f8dc 2000 	ldr.w	r2, [ip]
 800e402:	4581      	cmp	r9, r0
 800e404:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e408:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e412:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e416:	f84c 3b04 	str.w	r3, [ip], #4
 800e41a:	d2da      	bcs.n	800e3d2 <quorem+0x44>
 800e41c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e420:	b92b      	cbnz	r3, 800e42e <quorem+0xa0>
 800e422:	9b01      	ldr	r3, [sp, #4]
 800e424:	3b04      	subs	r3, #4
 800e426:	429d      	cmp	r5, r3
 800e428:	461a      	mov	r2, r3
 800e42a:	d32f      	bcc.n	800e48c <quorem+0xfe>
 800e42c:	613c      	str	r4, [r7, #16]
 800e42e:	4638      	mov	r0, r7
 800e430:	f001 faf6 	bl	800fa20 <__mcmp>
 800e434:	2800      	cmp	r0, #0
 800e436:	db25      	blt.n	800e484 <quorem+0xf6>
 800e438:	4628      	mov	r0, r5
 800e43a:	f04f 0c00 	mov.w	ip, #0
 800e43e:	3601      	adds	r6, #1
 800e440:	f858 1b04 	ldr.w	r1, [r8], #4
 800e444:	f8d0 e000 	ldr.w	lr, [r0]
 800e448:	b28b      	uxth	r3, r1
 800e44a:	ebac 0303 	sub.w	r3, ip, r3
 800e44e:	fa1f f28e 	uxth.w	r2, lr
 800e452:	4413      	add	r3, r2
 800e454:	0c0a      	lsrs	r2, r1, #16
 800e456:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e45a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e45e:	b29b      	uxth	r3, r3
 800e460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e464:	45c1      	cmp	r9, r8
 800e466:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e46a:	f840 3b04 	str.w	r3, [r0], #4
 800e46e:	d2e7      	bcs.n	800e440 <quorem+0xb2>
 800e470:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e474:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e478:	b922      	cbnz	r2, 800e484 <quorem+0xf6>
 800e47a:	3b04      	subs	r3, #4
 800e47c:	429d      	cmp	r5, r3
 800e47e:	461a      	mov	r2, r3
 800e480:	d30a      	bcc.n	800e498 <quorem+0x10a>
 800e482:	613c      	str	r4, [r7, #16]
 800e484:	4630      	mov	r0, r6
 800e486:	b003      	add	sp, #12
 800e488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48c:	6812      	ldr	r2, [r2, #0]
 800e48e:	3b04      	subs	r3, #4
 800e490:	2a00      	cmp	r2, #0
 800e492:	d1cb      	bne.n	800e42c <quorem+0x9e>
 800e494:	3c01      	subs	r4, #1
 800e496:	e7c6      	b.n	800e426 <quorem+0x98>
 800e498:	6812      	ldr	r2, [r2, #0]
 800e49a:	3b04      	subs	r3, #4
 800e49c:	2a00      	cmp	r2, #0
 800e49e:	d1f0      	bne.n	800e482 <quorem+0xf4>
 800e4a0:	3c01      	subs	r4, #1
 800e4a2:	e7eb      	b.n	800e47c <quorem+0xee>
 800e4a4:	2000      	movs	r0, #0
 800e4a6:	e7ee      	b.n	800e486 <quorem+0xf8>

0800e4a8 <_dtoa_r>:
 800e4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ac:	4616      	mov	r6, r2
 800e4ae:	461f      	mov	r7, r3
 800e4b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e4b2:	b099      	sub	sp, #100	; 0x64
 800e4b4:	4605      	mov	r5, r0
 800e4b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e4ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800e4be:	b974      	cbnz	r4, 800e4de <_dtoa_r+0x36>
 800e4c0:	2010      	movs	r0, #16
 800e4c2:	f001 f803 	bl	800f4cc <malloc>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	6268      	str	r0, [r5, #36]	; 0x24
 800e4ca:	b920      	cbnz	r0, 800e4d6 <_dtoa_r+0x2e>
 800e4cc:	21ea      	movs	r1, #234	; 0xea
 800e4ce:	4bae      	ldr	r3, [pc, #696]	; (800e788 <_dtoa_r+0x2e0>)
 800e4d0:	48ae      	ldr	r0, [pc, #696]	; (800e78c <_dtoa_r+0x2e4>)
 800e4d2:	f7ff f80b 	bl	800d4ec <__assert_func>
 800e4d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4da:	6004      	str	r4, [r0, #0]
 800e4dc:	60c4      	str	r4, [r0, #12]
 800e4de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e4e0:	6819      	ldr	r1, [r3, #0]
 800e4e2:	b151      	cbz	r1, 800e4fa <_dtoa_r+0x52>
 800e4e4:	685a      	ldr	r2, [r3, #4]
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	4093      	lsls	r3, r2
 800e4ea:	604a      	str	r2, [r1, #4]
 800e4ec:	608b      	str	r3, [r1, #8]
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	f001 f85c 	bl	800f5ac <_Bfree>
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e4f8:	601a      	str	r2, [r3, #0]
 800e4fa:	1e3b      	subs	r3, r7, #0
 800e4fc:	bfaf      	iteee	ge
 800e4fe:	2300      	movge	r3, #0
 800e500:	2201      	movlt	r2, #1
 800e502:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e506:	9305      	strlt	r3, [sp, #20]
 800e508:	bfa8      	it	ge
 800e50a:	f8c8 3000 	strge.w	r3, [r8]
 800e50e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800e512:	4b9f      	ldr	r3, [pc, #636]	; (800e790 <_dtoa_r+0x2e8>)
 800e514:	bfb8      	it	lt
 800e516:	f8c8 2000 	strlt.w	r2, [r8]
 800e51a:	ea33 0309 	bics.w	r3, r3, r9
 800e51e:	d119      	bne.n	800e554 <_dtoa_r+0xac>
 800e520:	f242 730f 	movw	r3, #9999	; 0x270f
 800e524:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e526:	6013      	str	r3, [r2, #0]
 800e528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e52c:	4333      	orrs	r3, r6
 800e52e:	f000 8580 	beq.w	800f032 <_dtoa_r+0xb8a>
 800e532:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e534:	b953      	cbnz	r3, 800e54c <_dtoa_r+0xa4>
 800e536:	4b97      	ldr	r3, [pc, #604]	; (800e794 <_dtoa_r+0x2ec>)
 800e538:	e022      	b.n	800e580 <_dtoa_r+0xd8>
 800e53a:	4b97      	ldr	r3, [pc, #604]	; (800e798 <_dtoa_r+0x2f0>)
 800e53c:	9308      	str	r3, [sp, #32]
 800e53e:	3308      	adds	r3, #8
 800e540:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e542:	6013      	str	r3, [r2, #0]
 800e544:	9808      	ldr	r0, [sp, #32]
 800e546:	b019      	add	sp, #100	; 0x64
 800e548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e54c:	4b91      	ldr	r3, [pc, #580]	; (800e794 <_dtoa_r+0x2ec>)
 800e54e:	9308      	str	r3, [sp, #32]
 800e550:	3303      	adds	r3, #3
 800e552:	e7f5      	b.n	800e540 <_dtoa_r+0x98>
 800e554:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e558:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800e55c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e560:	2200      	movs	r2, #0
 800e562:	2300      	movs	r3, #0
 800e564:	f7f2 fa9a 	bl	8000a9c <__aeabi_dcmpeq>
 800e568:	4680      	mov	r8, r0
 800e56a:	b158      	cbz	r0, 800e584 <_dtoa_r+0xdc>
 800e56c:	2301      	movs	r3, #1
 800e56e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e570:	6013      	str	r3, [r2, #0]
 800e572:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e574:	2b00      	cmp	r3, #0
 800e576:	f000 8559 	beq.w	800f02c <_dtoa_r+0xb84>
 800e57a:	4888      	ldr	r0, [pc, #544]	; (800e79c <_dtoa_r+0x2f4>)
 800e57c:	6018      	str	r0, [r3, #0]
 800e57e:	1e43      	subs	r3, r0, #1
 800e580:	9308      	str	r3, [sp, #32]
 800e582:	e7df      	b.n	800e544 <_dtoa_r+0x9c>
 800e584:	ab16      	add	r3, sp, #88	; 0x58
 800e586:	9301      	str	r3, [sp, #4]
 800e588:	ab17      	add	r3, sp, #92	; 0x5c
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	4628      	mov	r0, r5
 800e58e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e592:	f001 faf1 	bl	800fb78 <__d2b>
 800e596:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e59a:	4682      	mov	sl, r0
 800e59c:	2c00      	cmp	r4, #0
 800e59e:	d07e      	beq.n	800e69e <_dtoa_r+0x1f6>
 800e5a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e5a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e5aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800e5b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e5b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	4b78      	ldr	r3, [pc, #480]	; (800e7a0 <_dtoa_r+0x2f8>)
 800e5be:	f7f1 fe4d 	bl	800025c <__aeabi_dsub>
 800e5c2:	a36b      	add	r3, pc, #428	; (adr r3, 800e770 <_dtoa_r+0x2c8>)
 800e5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c8:	f7f2 f800 	bl	80005cc <__aeabi_dmul>
 800e5cc:	a36a      	add	r3, pc, #424	; (adr r3, 800e778 <_dtoa_r+0x2d0>)
 800e5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d2:	f7f1 fe45 	bl	8000260 <__adddf3>
 800e5d6:	4606      	mov	r6, r0
 800e5d8:	4620      	mov	r0, r4
 800e5da:	460f      	mov	r7, r1
 800e5dc:	f7f1 ff8c 	bl	80004f8 <__aeabi_i2d>
 800e5e0:	a367      	add	r3, pc, #412	; (adr r3, 800e780 <_dtoa_r+0x2d8>)
 800e5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e6:	f7f1 fff1 	bl	80005cc <__aeabi_dmul>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	4630      	mov	r0, r6
 800e5f0:	4639      	mov	r1, r7
 800e5f2:	f7f1 fe35 	bl	8000260 <__adddf3>
 800e5f6:	4606      	mov	r6, r0
 800e5f8:	460f      	mov	r7, r1
 800e5fa:	f7f2 fa97 	bl	8000b2c <__aeabi_d2iz>
 800e5fe:	2200      	movs	r2, #0
 800e600:	4681      	mov	r9, r0
 800e602:	2300      	movs	r3, #0
 800e604:	4630      	mov	r0, r6
 800e606:	4639      	mov	r1, r7
 800e608:	f7f2 fa52 	bl	8000ab0 <__aeabi_dcmplt>
 800e60c:	b148      	cbz	r0, 800e622 <_dtoa_r+0x17a>
 800e60e:	4648      	mov	r0, r9
 800e610:	f7f1 ff72 	bl	80004f8 <__aeabi_i2d>
 800e614:	4632      	mov	r2, r6
 800e616:	463b      	mov	r3, r7
 800e618:	f7f2 fa40 	bl	8000a9c <__aeabi_dcmpeq>
 800e61c:	b908      	cbnz	r0, 800e622 <_dtoa_r+0x17a>
 800e61e:	f109 39ff 	add.w	r9, r9, #4294967295
 800e622:	f1b9 0f16 	cmp.w	r9, #22
 800e626:	d857      	bhi.n	800e6d8 <_dtoa_r+0x230>
 800e628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e62c:	4b5d      	ldr	r3, [pc, #372]	; (800e7a4 <_dtoa_r+0x2fc>)
 800e62e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e636:	f7f2 fa3b 	bl	8000ab0 <__aeabi_dcmplt>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d04e      	beq.n	800e6dc <_dtoa_r+0x234>
 800e63e:	2300      	movs	r3, #0
 800e640:	f109 39ff 	add.w	r9, r9, #4294967295
 800e644:	930f      	str	r3, [sp, #60]	; 0x3c
 800e646:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e648:	1b1c      	subs	r4, r3, r4
 800e64a:	1e63      	subs	r3, r4, #1
 800e64c:	9309      	str	r3, [sp, #36]	; 0x24
 800e64e:	bf49      	itett	mi
 800e650:	f1c4 0301 	rsbmi	r3, r4, #1
 800e654:	2300      	movpl	r3, #0
 800e656:	9306      	strmi	r3, [sp, #24]
 800e658:	2300      	movmi	r3, #0
 800e65a:	bf54      	ite	pl
 800e65c:	9306      	strpl	r3, [sp, #24]
 800e65e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800e660:	f1b9 0f00 	cmp.w	r9, #0
 800e664:	db3c      	blt.n	800e6e0 <_dtoa_r+0x238>
 800e666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e668:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e66c:	444b      	add	r3, r9
 800e66e:	9309      	str	r3, [sp, #36]	; 0x24
 800e670:	2300      	movs	r3, #0
 800e672:	930a      	str	r3, [sp, #40]	; 0x28
 800e674:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e676:	2b09      	cmp	r3, #9
 800e678:	d86c      	bhi.n	800e754 <_dtoa_r+0x2ac>
 800e67a:	2b05      	cmp	r3, #5
 800e67c:	bfc4      	itt	gt
 800e67e:	3b04      	subgt	r3, #4
 800e680:	9322      	strgt	r3, [sp, #136]	; 0x88
 800e682:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e684:	bfc8      	it	gt
 800e686:	2400      	movgt	r4, #0
 800e688:	f1a3 0302 	sub.w	r3, r3, #2
 800e68c:	bfd8      	it	le
 800e68e:	2401      	movle	r4, #1
 800e690:	2b03      	cmp	r3, #3
 800e692:	f200 808b 	bhi.w	800e7ac <_dtoa_r+0x304>
 800e696:	e8df f003 	tbb	[pc, r3]
 800e69a:	4f2d      	.short	0x4f2d
 800e69c:	5b4d      	.short	0x5b4d
 800e69e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800e6a2:	441c      	add	r4, r3
 800e6a4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800e6a8:	2b20      	cmp	r3, #32
 800e6aa:	bfc3      	ittte	gt
 800e6ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e6b0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800e6b4:	fa09 f303 	lslgt.w	r3, r9, r3
 800e6b8:	f1c3 0320 	rsble	r3, r3, #32
 800e6bc:	bfc6      	itte	gt
 800e6be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e6c2:	4318      	orrgt	r0, r3
 800e6c4:	fa06 f003 	lslle.w	r0, r6, r3
 800e6c8:	f7f1 ff06 	bl	80004d8 <__aeabi_ui2d>
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800e6d2:	3c01      	subs	r4, #1
 800e6d4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e6d6:	e770      	b.n	800e5ba <_dtoa_r+0x112>
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e7b3      	b.n	800e644 <_dtoa_r+0x19c>
 800e6dc:	900f      	str	r0, [sp, #60]	; 0x3c
 800e6de:	e7b2      	b.n	800e646 <_dtoa_r+0x19e>
 800e6e0:	9b06      	ldr	r3, [sp, #24]
 800e6e2:	eba3 0309 	sub.w	r3, r3, r9
 800e6e6:	9306      	str	r3, [sp, #24]
 800e6e8:	f1c9 0300 	rsb	r3, r9, #0
 800e6ec:	930a      	str	r3, [sp, #40]	; 0x28
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	930e      	str	r3, [sp, #56]	; 0x38
 800e6f2:	e7bf      	b.n	800e674 <_dtoa_r+0x1cc>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e6f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	dc59      	bgt.n	800e7b2 <_dtoa_r+0x30a>
 800e6fe:	f04f 0b01 	mov.w	fp, #1
 800e702:	465b      	mov	r3, fp
 800e704:	f8cd b008 	str.w	fp, [sp, #8]
 800e708:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800e70c:	2200      	movs	r2, #0
 800e70e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800e710:	6042      	str	r2, [r0, #4]
 800e712:	2204      	movs	r2, #4
 800e714:	f102 0614 	add.w	r6, r2, #20
 800e718:	429e      	cmp	r6, r3
 800e71a:	6841      	ldr	r1, [r0, #4]
 800e71c:	d94f      	bls.n	800e7be <_dtoa_r+0x316>
 800e71e:	4628      	mov	r0, r5
 800e720:	f000 ff04 	bl	800f52c <_Balloc>
 800e724:	9008      	str	r0, [sp, #32]
 800e726:	2800      	cmp	r0, #0
 800e728:	d14d      	bne.n	800e7c6 <_dtoa_r+0x31e>
 800e72a:	4602      	mov	r2, r0
 800e72c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e730:	4b1d      	ldr	r3, [pc, #116]	; (800e7a8 <_dtoa_r+0x300>)
 800e732:	e6cd      	b.n	800e4d0 <_dtoa_r+0x28>
 800e734:	2301      	movs	r3, #1
 800e736:	e7de      	b.n	800e6f6 <_dtoa_r+0x24e>
 800e738:	2300      	movs	r3, #0
 800e73a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e73c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e73e:	eb09 0b03 	add.w	fp, r9, r3
 800e742:	f10b 0301 	add.w	r3, fp, #1
 800e746:	2b01      	cmp	r3, #1
 800e748:	9302      	str	r3, [sp, #8]
 800e74a:	bfb8      	it	lt
 800e74c:	2301      	movlt	r3, #1
 800e74e:	e7dd      	b.n	800e70c <_dtoa_r+0x264>
 800e750:	2301      	movs	r3, #1
 800e752:	e7f2      	b.n	800e73a <_dtoa_r+0x292>
 800e754:	2401      	movs	r4, #1
 800e756:	2300      	movs	r3, #0
 800e758:	940b      	str	r4, [sp, #44]	; 0x2c
 800e75a:	9322      	str	r3, [sp, #136]	; 0x88
 800e75c:	f04f 3bff 	mov.w	fp, #4294967295
 800e760:	2200      	movs	r2, #0
 800e762:	2312      	movs	r3, #18
 800e764:	f8cd b008 	str.w	fp, [sp, #8]
 800e768:	9223      	str	r2, [sp, #140]	; 0x8c
 800e76a:	e7cf      	b.n	800e70c <_dtoa_r+0x264>
 800e76c:	f3af 8000 	nop.w
 800e770:	636f4361 	.word	0x636f4361
 800e774:	3fd287a7 	.word	0x3fd287a7
 800e778:	8b60c8b3 	.word	0x8b60c8b3
 800e77c:	3fc68a28 	.word	0x3fc68a28
 800e780:	509f79fb 	.word	0x509f79fb
 800e784:	3fd34413 	.word	0x3fd34413
 800e788:	0801227a 	.word	0x0801227a
 800e78c:	08012291 	.word	0x08012291
 800e790:	7ff00000 	.word	0x7ff00000
 800e794:	08012276 	.word	0x08012276
 800e798:	0801226d 	.word	0x0801226d
 800e79c:	0801224a 	.word	0x0801224a
 800e7a0:	3ff80000 	.word	0x3ff80000
 800e7a4:	080123f0 	.word	0x080123f0
 800e7a8:	080122f0 	.word	0x080122f0
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7b0:	e7d4      	b.n	800e75c <_dtoa_r+0x2b4>
 800e7b2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800e7b6:	465b      	mov	r3, fp
 800e7b8:	f8cd b008 	str.w	fp, [sp, #8]
 800e7bc:	e7a6      	b.n	800e70c <_dtoa_r+0x264>
 800e7be:	3101      	adds	r1, #1
 800e7c0:	6041      	str	r1, [r0, #4]
 800e7c2:	0052      	lsls	r2, r2, #1
 800e7c4:	e7a6      	b.n	800e714 <_dtoa_r+0x26c>
 800e7c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e7c8:	9a08      	ldr	r2, [sp, #32]
 800e7ca:	601a      	str	r2, [r3, #0]
 800e7cc:	9b02      	ldr	r3, [sp, #8]
 800e7ce:	2b0e      	cmp	r3, #14
 800e7d0:	f200 80a8 	bhi.w	800e924 <_dtoa_r+0x47c>
 800e7d4:	2c00      	cmp	r4, #0
 800e7d6:	f000 80a5 	beq.w	800e924 <_dtoa_r+0x47c>
 800e7da:	f1b9 0f00 	cmp.w	r9, #0
 800e7de:	dd34      	ble.n	800e84a <_dtoa_r+0x3a2>
 800e7e0:	4a9a      	ldr	r2, [pc, #616]	; (800ea4c <_dtoa_r+0x5a4>)
 800e7e2:	f009 030f 	and.w	r3, r9, #15
 800e7e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e7ea:	f419 7f80 	tst.w	r9, #256	; 0x100
 800e7ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e7f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e7f6:	ea4f 1429 	mov.w	r4, r9, asr #4
 800e7fa:	d016      	beq.n	800e82a <_dtoa_r+0x382>
 800e7fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e800:	4b93      	ldr	r3, [pc, #588]	; (800ea50 <_dtoa_r+0x5a8>)
 800e802:	2703      	movs	r7, #3
 800e804:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e808:	f7f2 f80a 	bl	8000820 <__aeabi_ddiv>
 800e80c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e810:	f004 040f 	and.w	r4, r4, #15
 800e814:	4e8e      	ldr	r6, [pc, #568]	; (800ea50 <_dtoa_r+0x5a8>)
 800e816:	b954      	cbnz	r4, 800e82e <_dtoa_r+0x386>
 800e818:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e81c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e820:	f7f1 fffe 	bl	8000820 <__aeabi_ddiv>
 800e824:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e828:	e029      	b.n	800e87e <_dtoa_r+0x3d6>
 800e82a:	2702      	movs	r7, #2
 800e82c:	e7f2      	b.n	800e814 <_dtoa_r+0x36c>
 800e82e:	07e1      	lsls	r1, r4, #31
 800e830:	d508      	bpl.n	800e844 <_dtoa_r+0x39c>
 800e832:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e836:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e83a:	f7f1 fec7 	bl	80005cc <__aeabi_dmul>
 800e83e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e842:	3701      	adds	r7, #1
 800e844:	1064      	asrs	r4, r4, #1
 800e846:	3608      	adds	r6, #8
 800e848:	e7e5      	b.n	800e816 <_dtoa_r+0x36e>
 800e84a:	f000 80a5 	beq.w	800e998 <_dtoa_r+0x4f0>
 800e84e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e852:	f1c9 0400 	rsb	r4, r9, #0
 800e856:	4b7d      	ldr	r3, [pc, #500]	; (800ea4c <_dtoa_r+0x5a4>)
 800e858:	f004 020f 	and.w	r2, r4, #15
 800e85c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e864:	f7f1 feb2 	bl	80005cc <__aeabi_dmul>
 800e868:	2702      	movs	r7, #2
 800e86a:	2300      	movs	r3, #0
 800e86c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e870:	4e77      	ldr	r6, [pc, #476]	; (800ea50 <_dtoa_r+0x5a8>)
 800e872:	1124      	asrs	r4, r4, #4
 800e874:	2c00      	cmp	r4, #0
 800e876:	f040 8084 	bne.w	800e982 <_dtoa_r+0x4da>
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d1d2      	bne.n	800e824 <_dtoa_r+0x37c>
 800e87e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e880:	2b00      	cmp	r3, #0
 800e882:	f000 808b 	beq.w	800e99c <_dtoa_r+0x4f4>
 800e886:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e88a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e88e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e892:	2200      	movs	r2, #0
 800e894:	4b6f      	ldr	r3, [pc, #444]	; (800ea54 <_dtoa_r+0x5ac>)
 800e896:	f7f2 f90b 	bl	8000ab0 <__aeabi_dcmplt>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d07e      	beq.n	800e99c <_dtoa_r+0x4f4>
 800e89e:	9b02      	ldr	r3, [sp, #8]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d07b      	beq.n	800e99c <_dtoa_r+0x4f4>
 800e8a4:	f1bb 0f00 	cmp.w	fp, #0
 800e8a8:	dd38      	ble.n	800e91c <_dtoa_r+0x474>
 800e8aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	4b69      	ldr	r3, [pc, #420]	; (800ea58 <_dtoa_r+0x5b0>)
 800e8b2:	f7f1 fe8b 	bl	80005cc <__aeabi_dmul>
 800e8b6:	465c      	mov	r4, fp
 800e8b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8bc:	f109 38ff 	add.w	r8, r9, #4294967295
 800e8c0:	3701      	adds	r7, #1
 800e8c2:	4638      	mov	r0, r7
 800e8c4:	f7f1 fe18 	bl	80004f8 <__aeabi_i2d>
 800e8c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8cc:	f7f1 fe7e 	bl	80005cc <__aeabi_dmul>
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	4b62      	ldr	r3, [pc, #392]	; (800ea5c <_dtoa_r+0x5b4>)
 800e8d4:	f7f1 fcc4 	bl	8000260 <__adddf3>
 800e8d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e8dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e8e0:	9611      	str	r6, [sp, #68]	; 0x44
 800e8e2:	2c00      	cmp	r4, #0
 800e8e4:	d15d      	bne.n	800e9a2 <_dtoa_r+0x4fa>
 800e8e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	4b5c      	ldr	r3, [pc, #368]	; (800ea60 <_dtoa_r+0x5b8>)
 800e8ee:	f7f1 fcb5 	bl	800025c <__aeabi_dsub>
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e8fa:	4633      	mov	r3, r6
 800e8fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e8fe:	f7f2 f8f5 	bl	8000aec <__aeabi_dcmpgt>
 800e902:	2800      	cmp	r0, #0
 800e904:	f040 829e 	bne.w	800ee44 <_dtoa_r+0x99c>
 800e908:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e90c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e90e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e912:	f7f2 f8cd 	bl	8000ab0 <__aeabi_dcmplt>
 800e916:	2800      	cmp	r0, #0
 800e918:	f040 8292 	bne.w	800ee40 <_dtoa_r+0x998>
 800e91c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800e920:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e926:	2b00      	cmp	r3, #0
 800e928:	f2c0 8153 	blt.w	800ebd2 <_dtoa_r+0x72a>
 800e92c:	f1b9 0f0e 	cmp.w	r9, #14
 800e930:	f300 814f 	bgt.w	800ebd2 <_dtoa_r+0x72a>
 800e934:	4b45      	ldr	r3, [pc, #276]	; (800ea4c <_dtoa_r+0x5a4>)
 800e936:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e93a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e93e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800e942:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e944:	2b00      	cmp	r3, #0
 800e946:	f280 80db 	bge.w	800eb00 <_dtoa_r+0x658>
 800e94a:	9b02      	ldr	r3, [sp, #8]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	f300 80d7 	bgt.w	800eb00 <_dtoa_r+0x658>
 800e952:	f040 8274 	bne.w	800ee3e <_dtoa_r+0x996>
 800e956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e95a:	2200      	movs	r2, #0
 800e95c:	4b40      	ldr	r3, [pc, #256]	; (800ea60 <_dtoa_r+0x5b8>)
 800e95e:	f7f1 fe35 	bl	80005cc <__aeabi_dmul>
 800e962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e966:	f7f2 f8b7 	bl	8000ad8 <__aeabi_dcmpge>
 800e96a:	9c02      	ldr	r4, [sp, #8]
 800e96c:	4626      	mov	r6, r4
 800e96e:	2800      	cmp	r0, #0
 800e970:	f040 824a 	bne.w	800ee08 <_dtoa_r+0x960>
 800e974:	2331      	movs	r3, #49	; 0x31
 800e976:	9f08      	ldr	r7, [sp, #32]
 800e978:	f109 0901 	add.w	r9, r9, #1
 800e97c:	f807 3b01 	strb.w	r3, [r7], #1
 800e980:	e246      	b.n	800ee10 <_dtoa_r+0x968>
 800e982:	07e2      	lsls	r2, r4, #31
 800e984:	d505      	bpl.n	800e992 <_dtoa_r+0x4ea>
 800e986:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e98a:	f7f1 fe1f 	bl	80005cc <__aeabi_dmul>
 800e98e:	2301      	movs	r3, #1
 800e990:	3701      	adds	r7, #1
 800e992:	1064      	asrs	r4, r4, #1
 800e994:	3608      	adds	r6, #8
 800e996:	e76d      	b.n	800e874 <_dtoa_r+0x3cc>
 800e998:	2702      	movs	r7, #2
 800e99a:	e770      	b.n	800e87e <_dtoa_r+0x3d6>
 800e99c:	46c8      	mov	r8, r9
 800e99e:	9c02      	ldr	r4, [sp, #8]
 800e9a0:	e78f      	b.n	800e8c2 <_dtoa_r+0x41a>
 800e9a2:	9908      	ldr	r1, [sp, #32]
 800e9a4:	4b29      	ldr	r3, [pc, #164]	; (800ea4c <_dtoa_r+0x5a4>)
 800e9a6:	4421      	add	r1, r4
 800e9a8:	9112      	str	r1, [sp, #72]	; 0x48
 800e9aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e9b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e9b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e9b8:	2900      	cmp	r1, #0
 800e9ba:	d055      	beq.n	800ea68 <_dtoa_r+0x5c0>
 800e9bc:	2000      	movs	r0, #0
 800e9be:	4929      	ldr	r1, [pc, #164]	; (800ea64 <_dtoa_r+0x5bc>)
 800e9c0:	f7f1 ff2e 	bl	8000820 <__aeabi_ddiv>
 800e9c4:	463b      	mov	r3, r7
 800e9c6:	4632      	mov	r2, r6
 800e9c8:	f7f1 fc48 	bl	800025c <__aeabi_dsub>
 800e9cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e9d0:	9f08      	ldr	r7, [sp, #32]
 800e9d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9d6:	f7f2 f8a9 	bl	8000b2c <__aeabi_d2iz>
 800e9da:	4604      	mov	r4, r0
 800e9dc:	f7f1 fd8c 	bl	80004f8 <__aeabi_i2d>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9e8:	f7f1 fc38 	bl	800025c <__aeabi_dsub>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	3430      	adds	r4, #48	; 0x30
 800e9f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e9f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e9fa:	f807 4b01 	strb.w	r4, [r7], #1
 800e9fe:	f7f2 f857 	bl	8000ab0 <__aeabi_dcmplt>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d174      	bne.n	800eaf0 <_dtoa_r+0x648>
 800ea06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea0a:	2000      	movs	r0, #0
 800ea0c:	4911      	ldr	r1, [pc, #68]	; (800ea54 <_dtoa_r+0x5ac>)
 800ea0e:	f7f1 fc25 	bl	800025c <__aeabi_dsub>
 800ea12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ea16:	f7f2 f84b 	bl	8000ab0 <__aeabi_dcmplt>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	f040 80b6 	bne.w	800eb8c <_dtoa_r+0x6e4>
 800ea20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea22:	429f      	cmp	r7, r3
 800ea24:	f43f af7a 	beq.w	800e91c <_dtoa_r+0x474>
 800ea28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	4b0a      	ldr	r3, [pc, #40]	; (800ea58 <_dtoa_r+0x5b0>)
 800ea30:	f7f1 fdcc 	bl	80005cc <__aeabi_dmul>
 800ea34:	2200      	movs	r2, #0
 800ea36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ea3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea3e:	4b06      	ldr	r3, [pc, #24]	; (800ea58 <_dtoa_r+0x5b0>)
 800ea40:	f7f1 fdc4 	bl	80005cc <__aeabi_dmul>
 800ea44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea48:	e7c3      	b.n	800e9d2 <_dtoa_r+0x52a>
 800ea4a:	bf00      	nop
 800ea4c:	080123f0 	.word	0x080123f0
 800ea50:	080123c8 	.word	0x080123c8
 800ea54:	3ff00000 	.word	0x3ff00000
 800ea58:	40240000 	.word	0x40240000
 800ea5c:	401c0000 	.word	0x401c0000
 800ea60:	40140000 	.word	0x40140000
 800ea64:	3fe00000 	.word	0x3fe00000
 800ea68:	4630      	mov	r0, r6
 800ea6a:	4639      	mov	r1, r7
 800ea6c:	f7f1 fdae 	bl	80005cc <__aeabi_dmul>
 800ea70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea72:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ea76:	9c08      	ldr	r4, [sp, #32]
 800ea78:	9314      	str	r3, [sp, #80]	; 0x50
 800ea7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea7e:	f7f2 f855 	bl	8000b2c <__aeabi_d2iz>
 800ea82:	9015      	str	r0, [sp, #84]	; 0x54
 800ea84:	f7f1 fd38 	bl	80004f8 <__aeabi_i2d>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea90:	f7f1 fbe4 	bl	800025c <__aeabi_dsub>
 800ea94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea96:	4606      	mov	r6, r0
 800ea98:	3330      	adds	r3, #48	; 0x30
 800ea9a:	f804 3b01 	strb.w	r3, [r4], #1
 800ea9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eaa0:	460f      	mov	r7, r1
 800eaa2:	429c      	cmp	r4, r3
 800eaa4:	f04f 0200 	mov.w	r2, #0
 800eaa8:	d124      	bne.n	800eaf4 <_dtoa_r+0x64c>
 800eaaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eaae:	4bb3      	ldr	r3, [pc, #716]	; (800ed7c <_dtoa_r+0x8d4>)
 800eab0:	f7f1 fbd6 	bl	8000260 <__adddf3>
 800eab4:	4602      	mov	r2, r0
 800eab6:	460b      	mov	r3, r1
 800eab8:	4630      	mov	r0, r6
 800eaba:	4639      	mov	r1, r7
 800eabc:	f7f2 f816 	bl	8000aec <__aeabi_dcmpgt>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	d162      	bne.n	800eb8a <_dtoa_r+0x6e2>
 800eac4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eac8:	2000      	movs	r0, #0
 800eaca:	49ac      	ldr	r1, [pc, #688]	; (800ed7c <_dtoa_r+0x8d4>)
 800eacc:	f7f1 fbc6 	bl	800025c <__aeabi_dsub>
 800ead0:	4602      	mov	r2, r0
 800ead2:	460b      	mov	r3, r1
 800ead4:	4630      	mov	r0, r6
 800ead6:	4639      	mov	r1, r7
 800ead8:	f7f1 ffea 	bl	8000ab0 <__aeabi_dcmplt>
 800eadc:	2800      	cmp	r0, #0
 800eade:	f43f af1d 	beq.w	800e91c <_dtoa_r+0x474>
 800eae2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800eae4:	1e7b      	subs	r3, r7, #1
 800eae6:	9314      	str	r3, [sp, #80]	; 0x50
 800eae8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800eaec:	2b30      	cmp	r3, #48	; 0x30
 800eaee:	d0f8      	beq.n	800eae2 <_dtoa_r+0x63a>
 800eaf0:	46c1      	mov	r9, r8
 800eaf2:	e03a      	b.n	800eb6a <_dtoa_r+0x6c2>
 800eaf4:	4ba2      	ldr	r3, [pc, #648]	; (800ed80 <_dtoa_r+0x8d8>)
 800eaf6:	f7f1 fd69 	bl	80005cc <__aeabi_dmul>
 800eafa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eafe:	e7bc      	b.n	800ea7a <_dtoa_r+0x5d2>
 800eb00:	9f08      	ldr	r7, [sp, #32]
 800eb02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb0a:	f7f1 fe89 	bl	8000820 <__aeabi_ddiv>
 800eb0e:	f7f2 f80d 	bl	8000b2c <__aeabi_d2iz>
 800eb12:	4604      	mov	r4, r0
 800eb14:	f7f1 fcf0 	bl	80004f8 <__aeabi_i2d>
 800eb18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb1c:	f7f1 fd56 	bl	80005cc <__aeabi_dmul>
 800eb20:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800eb24:	460b      	mov	r3, r1
 800eb26:	4602      	mov	r2, r0
 800eb28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb2c:	f7f1 fb96 	bl	800025c <__aeabi_dsub>
 800eb30:	f807 6b01 	strb.w	r6, [r7], #1
 800eb34:	9e08      	ldr	r6, [sp, #32]
 800eb36:	9b02      	ldr	r3, [sp, #8]
 800eb38:	1bbe      	subs	r6, r7, r6
 800eb3a:	42b3      	cmp	r3, r6
 800eb3c:	d13a      	bne.n	800ebb4 <_dtoa_r+0x70c>
 800eb3e:	4602      	mov	r2, r0
 800eb40:	460b      	mov	r3, r1
 800eb42:	f7f1 fb8d 	bl	8000260 <__adddf3>
 800eb46:	4602      	mov	r2, r0
 800eb48:	460b      	mov	r3, r1
 800eb4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb52:	f7f1 ffcb 	bl	8000aec <__aeabi_dcmpgt>
 800eb56:	bb58      	cbnz	r0, 800ebb0 <_dtoa_r+0x708>
 800eb58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb60:	f7f1 ff9c 	bl	8000a9c <__aeabi_dcmpeq>
 800eb64:	b108      	cbz	r0, 800eb6a <_dtoa_r+0x6c2>
 800eb66:	07e1      	lsls	r1, r4, #31
 800eb68:	d422      	bmi.n	800ebb0 <_dtoa_r+0x708>
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	4651      	mov	r1, sl
 800eb6e:	f000 fd1d 	bl	800f5ac <_Bfree>
 800eb72:	2300      	movs	r3, #0
 800eb74:	703b      	strb	r3, [r7, #0]
 800eb76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800eb78:	f109 0001 	add.w	r0, r9, #1
 800eb7c:	6018      	str	r0, [r3, #0]
 800eb7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	f43f acdf 	beq.w	800e544 <_dtoa_r+0x9c>
 800eb86:	601f      	str	r7, [r3, #0]
 800eb88:	e4dc      	b.n	800e544 <_dtoa_r+0x9c>
 800eb8a:	4627      	mov	r7, r4
 800eb8c:	463b      	mov	r3, r7
 800eb8e:	461f      	mov	r7, r3
 800eb90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb94:	2a39      	cmp	r2, #57	; 0x39
 800eb96:	d107      	bne.n	800eba8 <_dtoa_r+0x700>
 800eb98:	9a08      	ldr	r2, [sp, #32]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d1f7      	bne.n	800eb8e <_dtoa_r+0x6e6>
 800eb9e:	2230      	movs	r2, #48	; 0x30
 800eba0:	9908      	ldr	r1, [sp, #32]
 800eba2:	f108 0801 	add.w	r8, r8, #1
 800eba6:	700a      	strb	r2, [r1, #0]
 800eba8:	781a      	ldrb	r2, [r3, #0]
 800ebaa:	3201      	adds	r2, #1
 800ebac:	701a      	strb	r2, [r3, #0]
 800ebae:	e79f      	b.n	800eaf0 <_dtoa_r+0x648>
 800ebb0:	46c8      	mov	r8, r9
 800ebb2:	e7eb      	b.n	800eb8c <_dtoa_r+0x6e4>
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	4b72      	ldr	r3, [pc, #456]	; (800ed80 <_dtoa_r+0x8d8>)
 800ebb8:	f7f1 fd08 	bl	80005cc <__aeabi_dmul>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	460b      	mov	r3, r1
 800ebc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	f7f1 ff68 	bl	8000a9c <__aeabi_dcmpeq>
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	d098      	beq.n	800eb02 <_dtoa_r+0x65a>
 800ebd0:	e7cb      	b.n	800eb6a <_dtoa_r+0x6c2>
 800ebd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ebd4:	2a00      	cmp	r2, #0
 800ebd6:	f000 80cd 	beq.w	800ed74 <_dtoa_r+0x8cc>
 800ebda:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ebdc:	2a01      	cmp	r2, #1
 800ebde:	f300 80af 	bgt.w	800ed40 <_dtoa_r+0x898>
 800ebe2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ebe4:	2a00      	cmp	r2, #0
 800ebe6:	f000 80a7 	beq.w	800ed38 <_dtoa_r+0x890>
 800ebea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ebee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ebf0:	9f06      	ldr	r7, [sp, #24]
 800ebf2:	9a06      	ldr	r2, [sp, #24]
 800ebf4:	2101      	movs	r1, #1
 800ebf6:	441a      	add	r2, r3
 800ebf8:	9206      	str	r2, [sp, #24]
 800ebfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	441a      	add	r2, r3
 800ec00:	9209      	str	r2, [sp, #36]	; 0x24
 800ec02:	f000 fd8d 	bl	800f720 <__i2b>
 800ec06:	4606      	mov	r6, r0
 800ec08:	2f00      	cmp	r7, #0
 800ec0a:	dd0c      	ble.n	800ec26 <_dtoa_r+0x77e>
 800ec0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	dd09      	ble.n	800ec26 <_dtoa_r+0x77e>
 800ec12:	42bb      	cmp	r3, r7
 800ec14:	bfa8      	it	ge
 800ec16:	463b      	movge	r3, r7
 800ec18:	9a06      	ldr	r2, [sp, #24]
 800ec1a:	1aff      	subs	r7, r7, r3
 800ec1c:	1ad2      	subs	r2, r2, r3
 800ec1e:	9206      	str	r2, [sp, #24]
 800ec20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec22:	1ad3      	subs	r3, r2, r3
 800ec24:	9309      	str	r3, [sp, #36]	; 0x24
 800ec26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec28:	b1f3      	cbz	r3, 800ec68 <_dtoa_r+0x7c0>
 800ec2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	f000 80a9 	beq.w	800ed84 <_dtoa_r+0x8dc>
 800ec32:	2c00      	cmp	r4, #0
 800ec34:	dd10      	ble.n	800ec58 <_dtoa_r+0x7b0>
 800ec36:	4631      	mov	r1, r6
 800ec38:	4622      	mov	r2, r4
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	f000 fe2a 	bl	800f894 <__pow5mult>
 800ec40:	4652      	mov	r2, sl
 800ec42:	4601      	mov	r1, r0
 800ec44:	4606      	mov	r6, r0
 800ec46:	4628      	mov	r0, r5
 800ec48:	f000 fd80 	bl	800f74c <__multiply>
 800ec4c:	4680      	mov	r8, r0
 800ec4e:	4651      	mov	r1, sl
 800ec50:	4628      	mov	r0, r5
 800ec52:	f000 fcab 	bl	800f5ac <_Bfree>
 800ec56:	46c2      	mov	sl, r8
 800ec58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec5a:	1b1a      	subs	r2, r3, r4
 800ec5c:	d004      	beq.n	800ec68 <_dtoa_r+0x7c0>
 800ec5e:	4651      	mov	r1, sl
 800ec60:	4628      	mov	r0, r5
 800ec62:	f000 fe17 	bl	800f894 <__pow5mult>
 800ec66:	4682      	mov	sl, r0
 800ec68:	2101      	movs	r1, #1
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	f000 fd58 	bl	800f720 <__i2b>
 800ec70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec72:	4604      	mov	r4, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f340 8087 	ble.w	800ed88 <_dtoa_r+0x8e0>
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	4601      	mov	r1, r0
 800ec7e:	4628      	mov	r0, r5
 800ec80:	f000 fe08 	bl	800f894 <__pow5mult>
 800ec84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ec86:	4604      	mov	r4, r0
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	f340 8080 	ble.w	800ed8e <_dtoa_r+0x8e6>
 800ec8e:	f04f 0800 	mov.w	r8, #0
 800ec92:	6923      	ldr	r3, [r4, #16]
 800ec94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ec98:	6918      	ldr	r0, [r3, #16]
 800ec9a:	f000 fcf3 	bl	800f684 <__hi0bits>
 800ec9e:	f1c0 0020 	rsb	r0, r0, #32
 800eca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eca4:	4418      	add	r0, r3
 800eca6:	f010 001f 	ands.w	r0, r0, #31
 800ecaa:	f000 8092 	beq.w	800edd2 <_dtoa_r+0x92a>
 800ecae:	f1c0 0320 	rsb	r3, r0, #32
 800ecb2:	2b04      	cmp	r3, #4
 800ecb4:	f340 808a 	ble.w	800edcc <_dtoa_r+0x924>
 800ecb8:	f1c0 001c 	rsb	r0, r0, #28
 800ecbc:	9b06      	ldr	r3, [sp, #24]
 800ecbe:	4407      	add	r7, r0
 800ecc0:	4403      	add	r3, r0
 800ecc2:	9306      	str	r3, [sp, #24]
 800ecc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecc6:	4403      	add	r3, r0
 800ecc8:	9309      	str	r3, [sp, #36]	; 0x24
 800ecca:	9b06      	ldr	r3, [sp, #24]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	dd05      	ble.n	800ecdc <_dtoa_r+0x834>
 800ecd0:	4651      	mov	r1, sl
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	f000 fe37 	bl	800f948 <__lshift>
 800ecda:	4682      	mov	sl, r0
 800ecdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	dd05      	ble.n	800ecee <_dtoa_r+0x846>
 800ece2:	4621      	mov	r1, r4
 800ece4:	461a      	mov	r2, r3
 800ece6:	4628      	mov	r0, r5
 800ece8:	f000 fe2e 	bl	800f948 <__lshift>
 800ecec:	4604      	mov	r4, r0
 800ecee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d070      	beq.n	800edd6 <_dtoa_r+0x92e>
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	4650      	mov	r0, sl
 800ecf8:	f000 fe92 	bl	800fa20 <__mcmp>
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	da6a      	bge.n	800edd6 <_dtoa_r+0x92e>
 800ed00:	2300      	movs	r3, #0
 800ed02:	4651      	mov	r1, sl
 800ed04:	220a      	movs	r2, #10
 800ed06:	4628      	mov	r0, r5
 800ed08:	f000 fc72 	bl	800f5f0 <__multadd>
 800ed0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed0e:	4682      	mov	sl, r0
 800ed10:	f109 39ff 	add.w	r9, r9, #4294967295
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f000 8193 	beq.w	800f040 <_dtoa_r+0xb98>
 800ed1a:	4631      	mov	r1, r6
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	220a      	movs	r2, #10
 800ed20:	4628      	mov	r0, r5
 800ed22:	f000 fc65 	bl	800f5f0 <__multadd>
 800ed26:	f1bb 0f00 	cmp.w	fp, #0
 800ed2a:	4606      	mov	r6, r0
 800ed2c:	f300 8093 	bgt.w	800ee56 <_dtoa_r+0x9ae>
 800ed30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ed32:	2b02      	cmp	r3, #2
 800ed34:	dc57      	bgt.n	800ede6 <_dtoa_r+0x93e>
 800ed36:	e08e      	b.n	800ee56 <_dtoa_r+0x9ae>
 800ed38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ed3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ed3e:	e756      	b.n	800ebee <_dtoa_r+0x746>
 800ed40:	9b02      	ldr	r3, [sp, #8]
 800ed42:	1e5c      	subs	r4, r3, #1
 800ed44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed46:	42a3      	cmp	r3, r4
 800ed48:	bfb7      	itett	lt
 800ed4a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ed4c:	1b1c      	subge	r4, r3, r4
 800ed4e:	1ae2      	sublt	r2, r4, r3
 800ed50:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ed52:	bfbe      	ittt	lt
 800ed54:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ed56:	189b      	addlt	r3, r3, r2
 800ed58:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ed5a:	9b02      	ldr	r3, [sp, #8]
 800ed5c:	bfb8      	it	lt
 800ed5e:	2400      	movlt	r4, #0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	bfbb      	ittet	lt
 800ed64:	9b06      	ldrlt	r3, [sp, #24]
 800ed66:	9a02      	ldrlt	r2, [sp, #8]
 800ed68:	9f06      	ldrge	r7, [sp, #24]
 800ed6a:	1a9f      	sublt	r7, r3, r2
 800ed6c:	bfac      	ite	ge
 800ed6e:	9b02      	ldrge	r3, [sp, #8]
 800ed70:	2300      	movlt	r3, #0
 800ed72:	e73e      	b.n	800ebf2 <_dtoa_r+0x74a>
 800ed74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ed76:	9f06      	ldr	r7, [sp, #24]
 800ed78:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ed7a:	e745      	b.n	800ec08 <_dtoa_r+0x760>
 800ed7c:	3fe00000 	.word	0x3fe00000
 800ed80:	40240000 	.word	0x40240000
 800ed84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed86:	e76a      	b.n	800ec5e <_dtoa_r+0x7b6>
 800ed88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	dc19      	bgt.n	800edc2 <_dtoa_r+0x91a>
 800ed8e:	9b04      	ldr	r3, [sp, #16]
 800ed90:	b9bb      	cbnz	r3, 800edc2 <_dtoa_r+0x91a>
 800ed92:	9b05      	ldr	r3, [sp, #20]
 800ed94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed98:	b99b      	cbnz	r3, 800edc2 <_dtoa_r+0x91a>
 800ed9a:	9b05      	ldr	r3, [sp, #20]
 800ed9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eda0:	0d1b      	lsrs	r3, r3, #20
 800eda2:	051b      	lsls	r3, r3, #20
 800eda4:	b183      	cbz	r3, 800edc8 <_dtoa_r+0x920>
 800eda6:	f04f 0801 	mov.w	r8, #1
 800edaa:	9b06      	ldr	r3, [sp, #24]
 800edac:	3301      	adds	r3, #1
 800edae:	9306      	str	r3, [sp, #24]
 800edb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edb2:	3301      	adds	r3, #1
 800edb4:	9309      	str	r3, [sp, #36]	; 0x24
 800edb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edb8:	2b00      	cmp	r3, #0
 800edba:	f47f af6a 	bne.w	800ec92 <_dtoa_r+0x7ea>
 800edbe:	2001      	movs	r0, #1
 800edc0:	e76f      	b.n	800eca2 <_dtoa_r+0x7fa>
 800edc2:	f04f 0800 	mov.w	r8, #0
 800edc6:	e7f6      	b.n	800edb6 <_dtoa_r+0x90e>
 800edc8:	4698      	mov	r8, r3
 800edca:	e7f4      	b.n	800edb6 <_dtoa_r+0x90e>
 800edcc:	f43f af7d 	beq.w	800ecca <_dtoa_r+0x822>
 800edd0:	4618      	mov	r0, r3
 800edd2:	301c      	adds	r0, #28
 800edd4:	e772      	b.n	800ecbc <_dtoa_r+0x814>
 800edd6:	9b02      	ldr	r3, [sp, #8]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	dc36      	bgt.n	800ee4a <_dtoa_r+0x9a2>
 800eddc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800edde:	2b02      	cmp	r3, #2
 800ede0:	dd33      	ble.n	800ee4a <_dtoa_r+0x9a2>
 800ede2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ede6:	f1bb 0f00 	cmp.w	fp, #0
 800edea:	d10d      	bne.n	800ee08 <_dtoa_r+0x960>
 800edec:	4621      	mov	r1, r4
 800edee:	465b      	mov	r3, fp
 800edf0:	2205      	movs	r2, #5
 800edf2:	4628      	mov	r0, r5
 800edf4:	f000 fbfc 	bl	800f5f0 <__multadd>
 800edf8:	4601      	mov	r1, r0
 800edfa:	4604      	mov	r4, r0
 800edfc:	4650      	mov	r0, sl
 800edfe:	f000 fe0f 	bl	800fa20 <__mcmp>
 800ee02:	2800      	cmp	r0, #0
 800ee04:	f73f adb6 	bgt.w	800e974 <_dtoa_r+0x4cc>
 800ee08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ee0a:	9f08      	ldr	r7, [sp, #32]
 800ee0c:	ea6f 0903 	mvn.w	r9, r3
 800ee10:	f04f 0800 	mov.w	r8, #0
 800ee14:	4621      	mov	r1, r4
 800ee16:	4628      	mov	r0, r5
 800ee18:	f000 fbc8 	bl	800f5ac <_Bfree>
 800ee1c:	2e00      	cmp	r6, #0
 800ee1e:	f43f aea4 	beq.w	800eb6a <_dtoa_r+0x6c2>
 800ee22:	f1b8 0f00 	cmp.w	r8, #0
 800ee26:	d005      	beq.n	800ee34 <_dtoa_r+0x98c>
 800ee28:	45b0      	cmp	r8, r6
 800ee2a:	d003      	beq.n	800ee34 <_dtoa_r+0x98c>
 800ee2c:	4641      	mov	r1, r8
 800ee2e:	4628      	mov	r0, r5
 800ee30:	f000 fbbc 	bl	800f5ac <_Bfree>
 800ee34:	4631      	mov	r1, r6
 800ee36:	4628      	mov	r0, r5
 800ee38:	f000 fbb8 	bl	800f5ac <_Bfree>
 800ee3c:	e695      	b.n	800eb6a <_dtoa_r+0x6c2>
 800ee3e:	2400      	movs	r4, #0
 800ee40:	4626      	mov	r6, r4
 800ee42:	e7e1      	b.n	800ee08 <_dtoa_r+0x960>
 800ee44:	46c1      	mov	r9, r8
 800ee46:	4626      	mov	r6, r4
 800ee48:	e594      	b.n	800e974 <_dtoa_r+0x4cc>
 800ee4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee4c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f000 80fc 	beq.w	800f04e <_dtoa_r+0xba6>
 800ee56:	2f00      	cmp	r7, #0
 800ee58:	dd05      	ble.n	800ee66 <_dtoa_r+0x9be>
 800ee5a:	4631      	mov	r1, r6
 800ee5c:	463a      	mov	r2, r7
 800ee5e:	4628      	mov	r0, r5
 800ee60:	f000 fd72 	bl	800f948 <__lshift>
 800ee64:	4606      	mov	r6, r0
 800ee66:	f1b8 0f00 	cmp.w	r8, #0
 800ee6a:	d05c      	beq.n	800ef26 <_dtoa_r+0xa7e>
 800ee6c:	4628      	mov	r0, r5
 800ee6e:	6871      	ldr	r1, [r6, #4]
 800ee70:	f000 fb5c 	bl	800f52c <_Balloc>
 800ee74:	4607      	mov	r7, r0
 800ee76:	b928      	cbnz	r0, 800ee84 <_dtoa_r+0x9dc>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ee7e:	4b7e      	ldr	r3, [pc, #504]	; (800f078 <_dtoa_r+0xbd0>)
 800ee80:	f7ff bb26 	b.w	800e4d0 <_dtoa_r+0x28>
 800ee84:	6932      	ldr	r2, [r6, #16]
 800ee86:	f106 010c 	add.w	r1, r6, #12
 800ee8a:	3202      	adds	r2, #2
 800ee8c:	0092      	lsls	r2, r2, #2
 800ee8e:	300c      	adds	r0, #12
 800ee90:	f7fe fb86 	bl	800d5a0 <memcpy>
 800ee94:	2201      	movs	r2, #1
 800ee96:	4639      	mov	r1, r7
 800ee98:	4628      	mov	r0, r5
 800ee9a:	f000 fd55 	bl	800f948 <__lshift>
 800ee9e:	46b0      	mov	r8, r6
 800eea0:	4606      	mov	r6, r0
 800eea2:	9b08      	ldr	r3, [sp, #32]
 800eea4:	3301      	adds	r3, #1
 800eea6:	9302      	str	r3, [sp, #8]
 800eea8:	9b08      	ldr	r3, [sp, #32]
 800eeaa:	445b      	add	r3, fp
 800eeac:	930a      	str	r3, [sp, #40]	; 0x28
 800eeae:	9b04      	ldr	r3, [sp, #16]
 800eeb0:	f003 0301 	and.w	r3, r3, #1
 800eeb4:	9309      	str	r3, [sp, #36]	; 0x24
 800eeb6:	9b02      	ldr	r3, [sp, #8]
 800eeb8:	4621      	mov	r1, r4
 800eeba:	4650      	mov	r0, sl
 800eebc:	f103 3bff 	add.w	fp, r3, #4294967295
 800eec0:	f7ff fa65 	bl	800e38e <quorem>
 800eec4:	4603      	mov	r3, r0
 800eec6:	4641      	mov	r1, r8
 800eec8:	3330      	adds	r3, #48	; 0x30
 800eeca:	9004      	str	r0, [sp, #16]
 800eecc:	4650      	mov	r0, sl
 800eece:	930b      	str	r3, [sp, #44]	; 0x2c
 800eed0:	f000 fda6 	bl	800fa20 <__mcmp>
 800eed4:	4632      	mov	r2, r6
 800eed6:	9006      	str	r0, [sp, #24]
 800eed8:	4621      	mov	r1, r4
 800eeda:	4628      	mov	r0, r5
 800eedc:	f000 fdbc 	bl	800fa58 <__mdiff>
 800eee0:	68c2      	ldr	r2, [r0, #12]
 800eee2:	4607      	mov	r7, r0
 800eee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eee6:	bb02      	cbnz	r2, 800ef2a <_dtoa_r+0xa82>
 800eee8:	4601      	mov	r1, r0
 800eeea:	4650      	mov	r0, sl
 800eeec:	f000 fd98 	bl	800fa20 <__mcmp>
 800eef0:	4602      	mov	r2, r0
 800eef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eef4:	4639      	mov	r1, r7
 800eef6:	4628      	mov	r0, r5
 800eef8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800eefc:	f000 fb56 	bl	800f5ac <_Bfree>
 800ef00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef04:	9f02      	ldr	r7, [sp, #8]
 800ef06:	ea43 0102 	orr.w	r1, r3, r2
 800ef0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef0c:	430b      	orrs	r3, r1
 800ef0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef10:	d10d      	bne.n	800ef2e <_dtoa_r+0xa86>
 800ef12:	2b39      	cmp	r3, #57	; 0x39
 800ef14:	d027      	beq.n	800ef66 <_dtoa_r+0xabe>
 800ef16:	9a06      	ldr	r2, [sp, #24]
 800ef18:	2a00      	cmp	r2, #0
 800ef1a:	dd01      	ble.n	800ef20 <_dtoa_r+0xa78>
 800ef1c:	9b04      	ldr	r3, [sp, #16]
 800ef1e:	3331      	adds	r3, #49	; 0x31
 800ef20:	f88b 3000 	strb.w	r3, [fp]
 800ef24:	e776      	b.n	800ee14 <_dtoa_r+0x96c>
 800ef26:	4630      	mov	r0, r6
 800ef28:	e7b9      	b.n	800ee9e <_dtoa_r+0x9f6>
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	e7e2      	b.n	800eef4 <_dtoa_r+0xa4c>
 800ef2e:	9906      	ldr	r1, [sp, #24]
 800ef30:	2900      	cmp	r1, #0
 800ef32:	db04      	blt.n	800ef3e <_dtoa_r+0xa96>
 800ef34:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ef36:	4301      	orrs	r1, r0
 800ef38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef3a:	4301      	orrs	r1, r0
 800ef3c:	d120      	bne.n	800ef80 <_dtoa_r+0xad8>
 800ef3e:	2a00      	cmp	r2, #0
 800ef40:	ddee      	ble.n	800ef20 <_dtoa_r+0xa78>
 800ef42:	4651      	mov	r1, sl
 800ef44:	2201      	movs	r2, #1
 800ef46:	4628      	mov	r0, r5
 800ef48:	9302      	str	r3, [sp, #8]
 800ef4a:	f000 fcfd 	bl	800f948 <__lshift>
 800ef4e:	4621      	mov	r1, r4
 800ef50:	4682      	mov	sl, r0
 800ef52:	f000 fd65 	bl	800fa20 <__mcmp>
 800ef56:	2800      	cmp	r0, #0
 800ef58:	9b02      	ldr	r3, [sp, #8]
 800ef5a:	dc02      	bgt.n	800ef62 <_dtoa_r+0xaba>
 800ef5c:	d1e0      	bne.n	800ef20 <_dtoa_r+0xa78>
 800ef5e:	07da      	lsls	r2, r3, #31
 800ef60:	d5de      	bpl.n	800ef20 <_dtoa_r+0xa78>
 800ef62:	2b39      	cmp	r3, #57	; 0x39
 800ef64:	d1da      	bne.n	800ef1c <_dtoa_r+0xa74>
 800ef66:	2339      	movs	r3, #57	; 0x39
 800ef68:	f88b 3000 	strb.w	r3, [fp]
 800ef6c:	463b      	mov	r3, r7
 800ef6e:	461f      	mov	r7, r3
 800ef70:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ef74:	3b01      	subs	r3, #1
 800ef76:	2a39      	cmp	r2, #57	; 0x39
 800ef78:	d050      	beq.n	800f01c <_dtoa_r+0xb74>
 800ef7a:	3201      	adds	r2, #1
 800ef7c:	701a      	strb	r2, [r3, #0]
 800ef7e:	e749      	b.n	800ee14 <_dtoa_r+0x96c>
 800ef80:	2a00      	cmp	r2, #0
 800ef82:	dd03      	ble.n	800ef8c <_dtoa_r+0xae4>
 800ef84:	2b39      	cmp	r3, #57	; 0x39
 800ef86:	d0ee      	beq.n	800ef66 <_dtoa_r+0xabe>
 800ef88:	3301      	adds	r3, #1
 800ef8a:	e7c9      	b.n	800ef20 <_dtoa_r+0xa78>
 800ef8c:	9a02      	ldr	r2, [sp, #8]
 800ef8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ef90:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ef94:	428a      	cmp	r2, r1
 800ef96:	d02a      	beq.n	800efee <_dtoa_r+0xb46>
 800ef98:	4651      	mov	r1, sl
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	220a      	movs	r2, #10
 800ef9e:	4628      	mov	r0, r5
 800efa0:	f000 fb26 	bl	800f5f0 <__multadd>
 800efa4:	45b0      	cmp	r8, r6
 800efa6:	4682      	mov	sl, r0
 800efa8:	f04f 0300 	mov.w	r3, #0
 800efac:	f04f 020a 	mov.w	r2, #10
 800efb0:	4641      	mov	r1, r8
 800efb2:	4628      	mov	r0, r5
 800efb4:	d107      	bne.n	800efc6 <_dtoa_r+0xb1e>
 800efb6:	f000 fb1b 	bl	800f5f0 <__multadd>
 800efba:	4680      	mov	r8, r0
 800efbc:	4606      	mov	r6, r0
 800efbe:	9b02      	ldr	r3, [sp, #8]
 800efc0:	3301      	adds	r3, #1
 800efc2:	9302      	str	r3, [sp, #8]
 800efc4:	e777      	b.n	800eeb6 <_dtoa_r+0xa0e>
 800efc6:	f000 fb13 	bl	800f5f0 <__multadd>
 800efca:	4631      	mov	r1, r6
 800efcc:	4680      	mov	r8, r0
 800efce:	2300      	movs	r3, #0
 800efd0:	220a      	movs	r2, #10
 800efd2:	4628      	mov	r0, r5
 800efd4:	f000 fb0c 	bl	800f5f0 <__multadd>
 800efd8:	4606      	mov	r6, r0
 800efda:	e7f0      	b.n	800efbe <_dtoa_r+0xb16>
 800efdc:	f1bb 0f00 	cmp.w	fp, #0
 800efe0:	bfcc      	ite	gt
 800efe2:	465f      	movgt	r7, fp
 800efe4:	2701      	movle	r7, #1
 800efe6:	f04f 0800 	mov.w	r8, #0
 800efea:	9a08      	ldr	r2, [sp, #32]
 800efec:	4417      	add	r7, r2
 800efee:	4651      	mov	r1, sl
 800eff0:	2201      	movs	r2, #1
 800eff2:	4628      	mov	r0, r5
 800eff4:	9302      	str	r3, [sp, #8]
 800eff6:	f000 fca7 	bl	800f948 <__lshift>
 800effa:	4621      	mov	r1, r4
 800effc:	4682      	mov	sl, r0
 800effe:	f000 fd0f 	bl	800fa20 <__mcmp>
 800f002:	2800      	cmp	r0, #0
 800f004:	dcb2      	bgt.n	800ef6c <_dtoa_r+0xac4>
 800f006:	d102      	bne.n	800f00e <_dtoa_r+0xb66>
 800f008:	9b02      	ldr	r3, [sp, #8]
 800f00a:	07db      	lsls	r3, r3, #31
 800f00c:	d4ae      	bmi.n	800ef6c <_dtoa_r+0xac4>
 800f00e:	463b      	mov	r3, r7
 800f010:	461f      	mov	r7, r3
 800f012:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f016:	2a30      	cmp	r2, #48	; 0x30
 800f018:	d0fa      	beq.n	800f010 <_dtoa_r+0xb68>
 800f01a:	e6fb      	b.n	800ee14 <_dtoa_r+0x96c>
 800f01c:	9a08      	ldr	r2, [sp, #32]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d1a5      	bne.n	800ef6e <_dtoa_r+0xac6>
 800f022:	2331      	movs	r3, #49	; 0x31
 800f024:	f109 0901 	add.w	r9, r9, #1
 800f028:	7013      	strb	r3, [r2, #0]
 800f02a:	e6f3      	b.n	800ee14 <_dtoa_r+0x96c>
 800f02c:	4b13      	ldr	r3, [pc, #76]	; (800f07c <_dtoa_r+0xbd4>)
 800f02e:	f7ff baa7 	b.w	800e580 <_dtoa_r+0xd8>
 800f032:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f034:	2b00      	cmp	r3, #0
 800f036:	f47f aa80 	bne.w	800e53a <_dtoa_r+0x92>
 800f03a:	4b11      	ldr	r3, [pc, #68]	; (800f080 <_dtoa_r+0xbd8>)
 800f03c:	f7ff baa0 	b.w	800e580 <_dtoa_r+0xd8>
 800f040:	f1bb 0f00 	cmp.w	fp, #0
 800f044:	dc03      	bgt.n	800f04e <_dtoa_r+0xba6>
 800f046:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f048:	2b02      	cmp	r3, #2
 800f04a:	f73f aecc 	bgt.w	800ede6 <_dtoa_r+0x93e>
 800f04e:	9f08      	ldr	r7, [sp, #32]
 800f050:	4621      	mov	r1, r4
 800f052:	4650      	mov	r0, sl
 800f054:	f7ff f99b 	bl	800e38e <quorem>
 800f058:	9a08      	ldr	r2, [sp, #32]
 800f05a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f05e:	f807 3b01 	strb.w	r3, [r7], #1
 800f062:	1aba      	subs	r2, r7, r2
 800f064:	4593      	cmp	fp, r2
 800f066:	ddb9      	ble.n	800efdc <_dtoa_r+0xb34>
 800f068:	4651      	mov	r1, sl
 800f06a:	2300      	movs	r3, #0
 800f06c:	220a      	movs	r2, #10
 800f06e:	4628      	mov	r0, r5
 800f070:	f000 fabe 	bl	800f5f0 <__multadd>
 800f074:	4682      	mov	sl, r0
 800f076:	e7eb      	b.n	800f050 <_dtoa_r+0xba8>
 800f078:	080122f0 	.word	0x080122f0
 800f07c:	08012249 	.word	0x08012249
 800f080:	0801226d 	.word	0x0801226d

0800f084 <__sflush_r>:
 800f084:	898a      	ldrh	r2, [r1, #12]
 800f086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f08a:	4605      	mov	r5, r0
 800f08c:	0710      	lsls	r0, r2, #28
 800f08e:	460c      	mov	r4, r1
 800f090:	d458      	bmi.n	800f144 <__sflush_r+0xc0>
 800f092:	684b      	ldr	r3, [r1, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	dc05      	bgt.n	800f0a4 <__sflush_r+0x20>
 800f098:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	dc02      	bgt.n	800f0a4 <__sflush_r+0x20>
 800f09e:	2000      	movs	r0, #0
 800f0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0a6:	2e00      	cmp	r6, #0
 800f0a8:	d0f9      	beq.n	800f09e <__sflush_r+0x1a>
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f0b0:	682f      	ldr	r7, [r5, #0]
 800f0b2:	602b      	str	r3, [r5, #0]
 800f0b4:	d032      	beq.n	800f11c <__sflush_r+0x98>
 800f0b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f0b8:	89a3      	ldrh	r3, [r4, #12]
 800f0ba:	075a      	lsls	r2, r3, #29
 800f0bc:	d505      	bpl.n	800f0ca <__sflush_r+0x46>
 800f0be:	6863      	ldr	r3, [r4, #4]
 800f0c0:	1ac0      	subs	r0, r0, r3
 800f0c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0c4:	b10b      	cbz	r3, 800f0ca <__sflush_r+0x46>
 800f0c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0c8:	1ac0      	subs	r0, r0, r3
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0d0:	4628      	mov	r0, r5
 800f0d2:	6a21      	ldr	r1, [r4, #32]
 800f0d4:	47b0      	blx	r6
 800f0d6:	1c43      	adds	r3, r0, #1
 800f0d8:	89a3      	ldrh	r3, [r4, #12]
 800f0da:	d106      	bne.n	800f0ea <__sflush_r+0x66>
 800f0dc:	6829      	ldr	r1, [r5, #0]
 800f0de:	291d      	cmp	r1, #29
 800f0e0:	d82c      	bhi.n	800f13c <__sflush_r+0xb8>
 800f0e2:	4a2a      	ldr	r2, [pc, #168]	; (800f18c <__sflush_r+0x108>)
 800f0e4:	40ca      	lsrs	r2, r1
 800f0e6:	07d6      	lsls	r6, r2, #31
 800f0e8:	d528      	bpl.n	800f13c <__sflush_r+0xb8>
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	6062      	str	r2, [r4, #4]
 800f0ee:	6922      	ldr	r2, [r4, #16]
 800f0f0:	04d9      	lsls	r1, r3, #19
 800f0f2:	6022      	str	r2, [r4, #0]
 800f0f4:	d504      	bpl.n	800f100 <__sflush_r+0x7c>
 800f0f6:	1c42      	adds	r2, r0, #1
 800f0f8:	d101      	bne.n	800f0fe <__sflush_r+0x7a>
 800f0fa:	682b      	ldr	r3, [r5, #0]
 800f0fc:	b903      	cbnz	r3, 800f100 <__sflush_r+0x7c>
 800f0fe:	6560      	str	r0, [r4, #84]	; 0x54
 800f100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f102:	602f      	str	r7, [r5, #0]
 800f104:	2900      	cmp	r1, #0
 800f106:	d0ca      	beq.n	800f09e <__sflush_r+0x1a>
 800f108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f10c:	4299      	cmp	r1, r3
 800f10e:	d002      	beq.n	800f116 <__sflush_r+0x92>
 800f110:	4628      	mov	r0, r5
 800f112:	f000 fd9b 	bl	800fc4c <_free_r>
 800f116:	2000      	movs	r0, #0
 800f118:	6360      	str	r0, [r4, #52]	; 0x34
 800f11a:	e7c1      	b.n	800f0a0 <__sflush_r+0x1c>
 800f11c:	6a21      	ldr	r1, [r4, #32]
 800f11e:	2301      	movs	r3, #1
 800f120:	4628      	mov	r0, r5
 800f122:	47b0      	blx	r6
 800f124:	1c41      	adds	r1, r0, #1
 800f126:	d1c7      	bne.n	800f0b8 <__sflush_r+0x34>
 800f128:	682b      	ldr	r3, [r5, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d0c4      	beq.n	800f0b8 <__sflush_r+0x34>
 800f12e:	2b1d      	cmp	r3, #29
 800f130:	d001      	beq.n	800f136 <__sflush_r+0xb2>
 800f132:	2b16      	cmp	r3, #22
 800f134:	d101      	bne.n	800f13a <__sflush_r+0xb6>
 800f136:	602f      	str	r7, [r5, #0]
 800f138:	e7b1      	b.n	800f09e <__sflush_r+0x1a>
 800f13a:	89a3      	ldrh	r3, [r4, #12]
 800f13c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f140:	81a3      	strh	r3, [r4, #12]
 800f142:	e7ad      	b.n	800f0a0 <__sflush_r+0x1c>
 800f144:	690f      	ldr	r7, [r1, #16]
 800f146:	2f00      	cmp	r7, #0
 800f148:	d0a9      	beq.n	800f09e <__sflush_r+0x1a>
 800f14a:	0793      	lsls	r3, r2, #30
 800f14c:	bf18      	it	ne
 800f14e:	2300      	movne	r3, #0
 800f150:	680e      	ldr	r6, [r1, #0]
 800f152:	bf08      	it	eq
 800f154:	694b      	ldreq	r3, [r1, #20]
 800f156:	eba6 0807 	sub.w	r8, r6, r7
 800f15a:	600f      	str	r7, [r1, #0]
 800f15c:	608b      	str	r3, [r1, #8]
 800f15e:	f1b8 0f00 	cmp.w	r8, #0
 800f162:	dd9c      	ble.n	800f09e <__sflush_r+0x1a>
 800f164:	4643      	mov	r3, r8
 800f166:	463a      	mov	r2, r7
 800f168:	4628      	mov	r0, r5
 800f16a:	6a21      	ldr	r1, [r4, #32]
 800f16c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f16e:	47b0      	blx	r6
 800f170:	2800      	cmp	r0, #0
 800f172:	dc06      	bgt.n	800f182 <__sflush_r+0xfe>
 800f174:	89a3      	ldrh	r3, [r4, #12]
 800f176:	f04f 30ff 	mov.w	r0, #4294967295
 800f17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f17e:	81a3      	strh	r3, [r4, #12]
 800f180:	e78e      	b.n	800f0a0 <__sflush_r+0x1c>
 800f182:	4407      	add	r7, r0
 800f184:	eba8 0800 	sub.w	r8, r8, r0
 800f188:	e7e9      	b.n	800f15e <__sflush_r+0xda>
 800f18a:	bf00      	nop
 800f18c:	20400001 	.word	0x20400001

0800f190 <_fflush_r>:
 800f190:	b538      	push	{r3, r4, r5, lr}
 800f192:	690b      	ldr	r3, [r1, #16]
 800f194:	4605      	mov	r5, r0
 800f196:	460c      	mov	r4, r1
 800f198:	b913      	cbnz	r3, 800f1a0 <_fflush_r+0x10>
 800f19a:	2500      	movs	r5, #0
 800f19c:	4628      	mov	r0, r5
 800f19e:	bd38      	pop	{r3, r4, r5, pc}
 800f1a0:	b118      	cbz	r0, 800f1aa <_fflush_r+0x1a>
 800f1a2:	6983      	ldr	r3, [r0, #24]
 800f1a4:	b90b      	cbnz	r3, 800f1aa <_fflush_r+0x1a>
 800f1a6:	f000 f887 	bl	800f2b8 <__sinit>
 800f1aa:	4b14      	ldr	r3, [pc, #80]	; (800f1fc <_fflush_r+0x6c>)
 800f1ac:	429c      	cmp	r4, r3
 800f1ae:	d11b      	bne.n	800f1e8 <_fflush_r+0x58>
 800f1b0:	686c      	ldr	r4, [r5, #4]
 800f1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d0ef      	beq.n	800f19a <_fflush_r+0xa>
 800f1ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f1bc:	07d0      	lsls	r0, r2, #31
 800f1be:	d404      	bmi.n	800f1ca <_fflush_r+0x3a>
 800f1c0:	0599      	lsls	r1, r3, #22
 800f1c2:	d402      	bmi.n	800f1ca <_fflush_r+0x3a>
 800f1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1c6:	f000 f91a 	bl	800f3fe <__retarget_lock_acquire_recursive>
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	4621      	mov	r1, r4
 800f1ce:	f7ff ff59 	bl	800f084 <__sflush_r>
 800f1d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1d4:	4605      	mov	r5, r0
 800f1d6:	07da      	lsls	r2, r3, #31
 800f1d8:	d4e0      	bmi.n	800f19c <_fflush_r+0xc>
 800f1da:	89a3      	ldrh	r3, [r4, #12]
 800f1dc:	059b      	lsls	r3, r3, #22
 800f1de:	d4dd      	bmi.n	800f19c <_fflush_r+0xc>
 800f1e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1e2:	f000 f90d 	bl	800f400 <__retarget_lock_release_recursive>
 800f1e6:	e7d9      	b.n	800f19c <_fflush_r+0xc>
 800f1e8:	4b05      	ldr	r3, [pc, #20]	; (800f200 <_fflush_r+0x70>)
 800f1ea:	429c      	cmp	r4, r3
 800f1ec:	d101      	bne.n	800f1f2 <_fflush_r+0x62>
 800f1ee:	68ac      	ldr	r4, [r5, #8]
 800f1f0:	e7df      	b.n	800f1b2 <_fflush_r+0x22>
 800f1f2:	4b04      	ldr	r3, [pc, #16]	; (800f204 <_fflush_r+0x74>)
 800f1f4:	429c      	cmp	r4, r3
 800f1f6:	bf08      	it	eq
 800f1f8:	68ec      	ldreq	r4, [r5, #12]
 800f1fa:	e7da      	b.n	800f1b2 <_fflush_r+0x22>
 800f1fc:	08012324 	.word	0x08012324
 800f200:	08012344 	.word	0x08012344
 800f204:	08012304 	.word	0x08012304

0800f208 <std>:
 800f208:	2300      	movs	r3, #0
 800f20a:	b510      	push	{r4, lr}
 800f20c:	4604      	mov	r4, r0
 800f20e:	e9c0 3300 	strd	r3, r3, [r0]
 800f212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f216:	6083      	str	r3, [r0, #8]
 800f218:	8181      	strh	r1, [r0, #12]
 800f21a:	6643      	str	r3, [r0, #100]	; 0x64
 800f21c:	81c2      	strh	r2, [r0, #14]
 800f21e:	6183      	str	r3, [r0, #24]
 800f220:	4619      	mov	r1, r3
 800f222:	2208      	movs	r2, #8
 800f224:	305c      	adds	r0, #92	; 0x5c
 800f226:	f7fe f9c9 	bl	800d5bc <memset>
 800f22a:	4b05      	ldr	r3, [pc, #20]	; (800f240 <std+0x38>)
 800f22c:	6224      	str	r4, [r4, #32]
 800f22e:	6263      	str	r3, [r4, #36]	; 0x24
 800f230:	4b04      	ldr	r3, [pc, #16]	; (800f244 <std+0x3c>)
 800f232:	62a3      	str	r3, [r4, #40]	; 0x28
 800f234:	4b04      	ldr	r3, [pc, #16]	; (800f248 <std+0x40>)
 800f236:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f238:	4b04      	ldr	r3, [pc, #16]	; (800f24c <std+0x44>)
 800f23a:	6323      	str	r3, [r4, #48]	; 0x30
 800f23c:	bd10      	pop	{r4, pc}
 800f23e:	bf00      	nop
 800f240:	08010145 	.word	0x08010145
 800f244:	08010167 	.word	0x08010167
 800f248:	0801019f 	.word	0x0801019f
 800f24c:	080101c3 	.word	0x080101c3

0800f250 <_cleanup_r>:
 800f250:	4901      	ldr	r1, [pc, #4]	; (800f258 <_cleanup_r+0x8>)
 800f252:	f000 b8af 	b.w	800f3b4 <_fwalk_reent>
 800f256:	bf00      	nop
 800f258:	0800f191 	.word	0x0800f191

0800f25c <__sfmoreglue>:
 800f25c:	b570      	push	{r4, r5, r6, lr}
 800f25e:	2568      	movs	r5, #104	; 0x68
 800f260:	1e4a      	subs	r2, r1, #1
 800f262:	4355      	muls	r5, r2
 800f264:	460e      	mov	r6, r1
 800f266:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f26a:	f000 fd3b 	bl	800fce4 <_malloc_r>
 800f26e:	4604      	mov	r4, r0
 800f270:	b140      	cbz	r0, 800f284 <__sfmoreglue+0x28>
 800f272:	2100      	movs	r1, #0
 800f274:	e9c0 1600 	strd	r1, r6, [r0]
 800f278:	300c      	adds	r0, #12
 800f27a:	60a0      	str	r0, [r4, #8]
 800f27c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f280:	f7fe f99c 	bl	800d5bc <memset>
 800f284:	4620      	mov	r0, r4
 800f286:	bd70      	pop	{r4, r5, r6, pc}

0800f288 <__sfp_lock_acquire>:
 800f288:	4801      	ldr	r0, [pc, #4]	; (800f290 <__sfp_lock_acquire+0x8>)
 800f28a:	f000 b8b8 	b.w	800f3fe <__retarget_lock_acquire_recursive>
 800f28e:	bf00      	nop
 800f290:	20003888 	.word	0x20003888

0800f294 <__sfp_lock_release>:
 800f294:	4801      	ldr	r0, [pc, #4]	; (800f29c <__sfp_lock_release+0x8>)
 800f296:	f000 b8b3 	b.w	800f400 <__retarget_lock_release_recursive>
 800f29a:	bf00      	nop
 800f29c:	20003888 	.word	0x20003888

0800f2a0 <__sinit_lock_acquire>:
 800f2a0:	4801      	ldr	r0, [pc, #4]	; (800f2a8 <__sinit_lock_acquire+0x8>)
 800f2a2:	f000 b8ac 	b.w	800f3fe <__retarget_lock_acquire_recursive>
 800f2a6:	bf00      	nop
 800f2a8:	20003883 	.word	0x20003883

0800f2ac <__sinit_lock_release>:
 800f2ac:	4801      	ldr	r0, [pc, #4]	; (800f2b4 <__sinit_lock_release+0x8>)
 800f2ae:	f000 b8a7 	b.w	800f400 <__retarget_lock_release_recursive>
 800f2b2:	bf00      	nop
 800f2b4:	20003883 	.word	0x20003883

0800f2b8 <__sinit>:
 800f2b8:	b510      	push	{r4, lr}
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	f7ff fff0 	bl	800f2a0 <__sinit_lock_acquire>
 800f2c0:	69a3      	ldr	r3, [r4, #24]
 800f2c2:	b11b      	cbz	r3, 800f2cc <__sinit+0x14>
 800f2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2c8:	f7ff bff0 	b.w	800f2ac <__sinit_lock_release>
 800f2cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f2d0:	6523      	str	r3, [r4, #80]	; 0x50
 800f2d2:	4b13      	ldr	r3, [pc, #76]	; (800f320 <__sinit+0x68>)
 800f2d4:	4a13      	ldr	r2, [pc, #76]	; (800f324 <__sinit+0x6c>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f2da:	42a3      	cmp	r3, r4
 800f2dc:	bf08      	it	eq
 800f2de:	2301      	moveq	r3, #1
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	bf08      	it	eq
 800f2e4:	61a3      	streq	r3, [r4, #24]
 800f2e6:	f000 f81f 	bl	800f328 <__sfp>
 800f2ea:	6060      	str	r0, [r4, #4]
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f000 f81b 	bl	800f328 <__sfp>
 800f2f2:	60a0      	str	r0, [r4, #8]
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	f000 f817 	bl	800f328 <__sfp>
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	2104      	movs	r1, #4
 800f2fe:	60e0      	str	r0, [r4, #12]
 800f300:	6860      	ldr	r0, [r4, #4]
 800f302:	f7ff ff81 	bl	800f208 <std>
 800f306:	2201      	movs	r2, #1
 800f308:	2109      	movs	r1, #9
 800f30a:	68a0      	ldr	r0, [r4, #8]
 800f30c:	f7ff ff7c 	bl	800f208 <std>
 800f310:	2202      	movs	r2, #2
 800f312:	2112      	movs	r1, #18
 800f314:	68e0      	ldr	r0, [r4, #12]
 800f316:	f7ff ff77 	bl	800f208 <std>
 800f31a:	2301      	movs	r3, #1
 800f31c:	61a3      	str	r3, [r4, #24]
 800f31e:	e7d1      	b.n	800f2c4 <__sinit+0xc>
 800f320:	08012224 	.word	0x08012224
 800f324:	0800f251 	.word	0x0800f251

0800f328 <__sfp>:
 800f328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f32a:	4607      	mov	r7, r0
 800f32c:	f7ff ffac 	bl	800f288 <__sfp_lock_acquire>
 800f330:	4b1e      	ldr	r3, [pc, #120]	; (800f3ac <__sfp+0x84>)
 800f332:	681e      	ldr	r6, [r3, #0]
 800f334:	69b3      	ldr	r3, [r6, #24]
 800f336:	b913      	cbnz	r3, 800f33e <__sfp+0x16>
 800f338:	4630      	mov	r0, r6
 800f33a:	f7ff ffbd 	bl	800f2b8 <__sinit>
 800f33e:	3648      	adds	r6, #72	; 0x48
 800f340:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f344:	3b01      	subs	r3, #1
 800f346:	d503      	bpl.n	800f350 <__sfp+0x28>
 800f348:	6833      	ldr	r3, [r6, #0]
 800f34a:	b30b      	cbz	r3, 800f390 <__sfp+0x68>
 800f34c:	6836      	ldr	r6, [r6, #0]
 800f34e:	e7f7      	b.n	800f340 <__sfp+0x18>
 800f350:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f354:	b9d5      	cbnz	r5, 800f38c <__sfp+0x64>
 800f356:	4b16      	ldr	r3, [pc, #88]	; (800f3b0 <__sfp+0x88>)
 800f358:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f35c:	60e3      	str	r3, [r4, #12]
 800f35e:	6665      	str	r5, [r4, #100]	; 0x64
 800f360:	f000 f84c 	bl	800f3fc <__retarget_lock_init_recursive>
 800f364:	f7ff ff96 	bl	800f294 <__sfp_lock_release>
 800f368:	2208      	movs	r2, #8
 800f36a:	4629      	mov	r1, r5
 800f36c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f370:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f374:	6025      	str	r5, [r4, #0]
 800f376:	61a5      	str	r5, [r4, #24]
 800f378:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f37c:	f7fe f91e 	bl	800d5bc <memset>
 800f380:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f384:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f388:	4620      	mov	r0, r4
 800f38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f38c:	3468      	adds	r4, #104	; 0x68
 800f38e:	e7d9      	b.n	800f344 <__sfp+0x1c>
 800f390:	2104      	movs	r1, #4
 800f392:	4638      	mov	r0, r7
 800f394:	f7ff ff62 	bl	800f25c <__sfmoreglue>
 800f398:	4604      	mov	r4, r0
 800f39a:	6030      	str	r0, [r6, #0]
 800f39c:	2800      	cmp	r0, #0
 800f39e:	d1d5      	bne.n	800f34c <__sfp+0x24>
 800f3a0:	f7ff ff78 	bl	800f294 <__sfp_lock_release>
 800f3a4:	230c      	movs	r3, #12
 800f3a6:	603b      	str	r3, [r7, #0]
 800f3a8:	e7ee      	b.n	800f388 <__sfp+0x60>
 800f3aa:	bf00      	nop
 800f3ac:	08012224 	.word	0x08012224
 800f3b0:	ffff0001 	.word	0xffff0001

0800f3b4 <_fwalk_reent>:
 800f3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3b8:	4606      	mov	r6, r0
 800f3ba:	4688      	mov	r8, r1
 800f3bc:	2700      	movs	r7, #0
 800f3be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f3c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3c6:	f1b9 0901 	subs.w	r9, r9, #1
 800f3ca:	d505      	bpl.n	800f3d8 <_fwalk_reent+0x24>
 800f3cc:	6824      	ldr	r4, [r4, #0]
 800f3ce:	2c00      	cmp	r4, #0
 800f3d0:	d1f7      	bne.n	800f3c2 <_fwalk_reent+0xe>
 800f3d2:	4638      	mov	r0, r7
 800f3d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3d8:	89ab      	ldrh	r3, [r5, #12]
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d907      	bls.n	800f3ee <_fwalk_reent+0x3a>
 800f3de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	d003      	beq.n	800f3ee <_fwalk_reent+0x3a>
 800f3e6:	4629      	mov	r1, r5
 800f3e8:	4630      	mov	r0, r6
 800f3ea:	47c0      	blx	r8
 800f3ec:	4307      	orrs	r7, r0
 800f3ee:	3568      	adds	r5, #104	; 0x68
 800f3f0:	e7e9      	b.n	800f3c6 <_fwalk_reent+0x12>
	...

0800f3f4 <_localeconv_r>:
 800f3f4:	4800      	ldr	r0, [pc, #0]	; (800f3f8 <_localeconv_r+0x4>)
 800f3f6:	4770      	bx	lr
 800f3f8:	200002ac 	.word	0x200002ac

0800f3fc <__retarget_lock_init_recursive>:
 800f3fc:	4770      	bx	lr

0800f3fe <__retarget_lock_acquire_recursive>:
 800f3fe:	4770      	bx	lr

0800f400 <__retarget_lock_release_recursive>:
 800f400:	4770      	bx	lr

0800f402 <__swhatbuf_r>:
 800f402:	b570      	push	{r4, r5, r6, lr}
 800f404:	460e      	mov	r6, r1
 800f406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f40a:	4614      	mov	r4, r2
 800f40c:	2900      	cmp	r1, #0
 800f40e:	461d      	mov	r5, r3
 800f410:	b096      	sub	sp, #88	; 0x58
 800f412:	da07      	bge.n	800f424 <__swhatbuf_r+0x22>
 800f414:	2300      	movs	r3, #0
 800f416:	602b      	str	r3, [r5, #0]
 800f418:	89b3      	ldrh	r3, [r6, #12]
 800f41a:	061a      	lsls	r2, r3, #24
 800f41c:	d410      	bmi.n	800f440 <__swhatbuf_r+0x3e>
 800f41e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f422:	e00e      	b.n	800f442 <__swhatbuf_r+0x40>
 800f424:	466a      	mov	r2, sp
 800f426:	f000 fef3 	bl	8010210 <_fstat_r>
 800f42a:	2800      	cmp	r0, #0
 800f42c:	dbf2      	blt.n	800f414 <__swhatbuf_r+0x12>
 800f42e:	9a01      	ldr	r2, [sp, #4]
 800f430:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f434:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f438:	425a      	negs	r2, r3
 800f43a:	415a      	adcs	r2, r3
 800f43c:	602a      	str	r2, [r5, #0]
 800f43e:	e7ee      	b.n	800f41e <__swhatbuf_r+0x1c>
 800f440:	2340      	movs	r3, #64	; 0x40
 800f442:	2000      	movs	r0, #0
 800f444:	6023      	str	r3, [r4, #0]
 800f446:	b016      	add	sp, #88	; 0x58
 800f448:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f44c <__smakebuf_r>:
 800f44c:	898b      	ldrh	r3, [r1, #12]
 800f44e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f450:	079d      	lsls	r5, r3, #30
 800f452:	4606      	mov	r6, r0
 800f454:	460c      	mov	r4, r1
 800f456:	d507      	bpl.n	800f468 <__smakebuf_r+0x1c>
 800f458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f45c:	6023      	str	r3, [r4, #0]
 800f45e:	6123      	str	r3, [r4, #16]
 800f460:	2301      	movs	r3, #1
 800f462:	6163      	str	r3, [r4, #20]
 800f464:	b002      	add	sp, #8
 800f466:	bd70      	pop	{r4, r5, r6, pc}
 800f468:	466a      	mov	r2, sp
 800f46a:	ab01      	add	r3, sp, #4
 800f46c:	f7ff ffc9 	bl	800f402 <__swhatbuf_r>
 800f470:	9900      	ldr	r1, [sp, #0]
 800f472:	4605      	mov	r5, r0
 800f474:	4630      	mov	r0, r6
 800f476:	f000 fc35 	bl	800fce4 <_malloc_r>
 800f47a:	b948      	cbnz	r0, 800f490 <__smakebuf_r+0x44>
 800f47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f480:	059a      	lsls	r2, r3, #22
 800f482:	d4ef      	bmi.n	800f464 <__smakebuf_r+0x18>
 800f484:	f023 0303 	bic.w	r3, r3, #3
 800f488:	f043 0302 	orr.w	r3, r3, #2
 800f48c:	81a3      	strh	r3, [r4, #12]
 800f48e:	e7e3      	b.n	800f458 <__smakebuf_r+0xc>
 800f490:	4b0d      	ldr	r3, [pc, #52]	; (800f4c8 <__smakebuf_r+0x7c>)
 800f492:	62b3      	str	r3, [r6, #40]	; 0x28
 800f494:	89a3      	ldrh	r3, [r4, #12]
 800f496:	6020      	str	r0, [r4, #0]
 800f498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f49c:	81a3      	strh	r3, [r4, #12]
 800f49e:	9b00      	ldr	r3, [sp, #0]
 800f4a0:	6120      	str	r0, [r4, #16]
 800f4a2:	6163      	str	r3, [r4, #20]
 800f4a4:	9b01      	ldr	r3, [sp, #4]
 800f4a6:	b15b      	cbz	r3, 800f4c0 <__smakebuf_r+0x74>
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4ae:	f000 fec1 	bl	8010234 <_isatty_r>
 800f4b2:	b128      	cbz	r0, 800f4c0 <__smakebuf_r+0x74>
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	f023 0303 	bic.w	r3, r3, #3
 800f4ba:	f043 0301 	orr.w	r3, r3, #1
 800f4be:	81a3      	strh	r3, [r4, #12]
 800f4c0:	89a0      	ldrh	r0, [r4, #12]
 800f4c2:	4305      	orrs	r5, r0
 800f4c4:	81a5      	strh	r5, [r4, #12]
 800f4c6:	e7cd      	b.n	800f464 <__smakebuf_r+0x18>
 800f4c8:	0800f251 	.word	0x0800f251

0800f4cc <malloc>:
 800f4cc:	4b02      	ldr	r3, [pc, #8]	; (800f4d8 <malloc+0xc>)
 800f4ce:	4601      	mov	r1, r0
 800f4d0:	6818      	ldr	r0, [r3, #0]
 800f4d2:	f000 bc07 	b.w	800fce4 <_malloc_r>
 800f4d6:	bf00      	nop
 800f4d8:	20000158 	.word	0x20000158

0800f4dc <memchr>:
 800f4dc:	4603      	mov	r3, r0
 800f4de:	b510      	push	{r4, lr}
 800f4e0:	b2c9      	uxtb	r1, r1
 800f4e2:	4402      	add	r2, r0
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	d101      	bne.n	800f4ee <memchr+0x12>
 800f4ea:	2000      	movs	r0, #0
 800f4ec:	e003      	b.n	800f4f6 <memchr+0x1a>
 800f4ee:	7804      	ldrb	r4, [r0, #0]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	428c      	cmp	r4, r1
 800f4f4:	d1f6      	bne.n	800f4e4 <memchr+0x8>
 800f4f6:	bd10      	pop	{r4, pc}

0800f4f8 <memmove>:
 800f4f8:	4288      	cmp	r0, r1
 800f4fa:	b510      	push	{r4, lr}
 800f4fc:	eb01 0402 	add.w	r4, r1, r2
 800f500:	d902      	bls.n	800f508 <memmove+0x10>
 800f502:	4284      	cmp	r4, r0
 800f504:	4623      	mov	r3, r4
 800f506:	d807      	bhi.n	800f518 <memmove+0x20>
 800f508:	1e43      	subs	r3, r0, #1
 800f50a:	42a1      	cmp	r1, r4
 800f50c:	d008      	beq.n	800f520 <memmove+0x28>
 800f50e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f512:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f516:	e7f8      	b.n	800f50a <memmove+0x12>
 800f518:	4601      	mov	r1, r0
 800f51a:	4402      	add	r2, r0
 800f51c:	428a      	cmp	r2, r1
 800f51e:	d100      	bne.n	800f522 <memmove+0x2a>
 800f520:	bd10      	pop	{r4, pc}
 800f522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f52a:	e7f7      	b.n	800f51c <memmove+0x24>

0800f52c <_Balloc>:
 800f52c:	b570      	push	{r4, r5, r6, lr}
 800f52e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f530:	4604      	mov	r4, r0
 800f532:	460d      	mov	r5, r1
 800f534:	b976      	cbnz	r6, 800f554 <_Balloc+0x28>
 800f536:	2010      	movs	r0, #16
 800f538:	f7ff ffc8 	bl	800f4cc <malloc>
 800f53c:	4602      	mov	r2, r0
 800f53e:	6260      	str	r0, [r4, #36]	; 0x24
 800f540:	b920      	cbnz	r0, 800f54c <_Balloc+0x20>
 800f542:	2166      	movs	r1, #102	; 0x66
 800f544:	4b17      	ldr	r3, [pc, #92]	; (800f5a4 <_Balloc+0x78>)
 800f546:	4818      	ldr	r0, [pc, #96]	; (800f5a8 <_Balloc+0x7c>)
 800f548:	f7fd ffd0 	bl	800d4ec <__assert_func>
 800f54c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f550:	6006      	str	r6, [r0, #0]
 800f552:	60c6      	str	r6, [r0, #12]
 800f554:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f556:	68f3      	ldr	r3, [r6, #12]
 800f558:	b183      	cbz	r3, 800f57c <_Balloc+0x50>
 800f55a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f562:	b9b8      	cbnz	r0, 800f594 <_Balloc+0x68>
 800f564:	2101      	movs	r1, #1
 800f566:	fa01 f605 	lsl.w	r6, r1, r5
 800f56a:	1d72      	adds	r2, r6, #5
 800f56c:	4620      	mov	r0, r4
 800f56e:	0092      	lsls	r2, r2, #2
 800f570:	f000 fb5e 	bl	800fc30 <_calloc_r>
 800f574:	b160      	cbz	r0, 800f590 <_Balloc+0x64>
 800f576:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f57a:	e00e      	b.n	800f59a <_Balloc+0x6e>
 800f57c:	2221      	movs	r2, #33	; 0x21
 800f57e:	2104      	movs	r1, #4
 800f580:	4620      	mov	r0, r4
 800f582:	f000 fb55 	bl	800fc30 <_calloc_r>
 800f586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f588:	60f0      	str	r0, [r6, #12]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d1e4      	bne.n	800f55a <_Balloc+0x2e>
 800f590:	2000      	movs	r0, #0
 800f592:	bd70      	pop	{r4, r5, r6, pc}
 800f594:	6802      	ldr	r2, [r0, #0]
 800f596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f59a:	2300      	movs	r3, #0
 800f59c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f5a0:	e7f7      	b.n	800f592 <_Balloc+0x66>
 800f5a2:	bf00      	nop
 800f5a4:	0801227a 	.word	0x0801227a
 800f5a8:	08012364 	.word	0x08012364

0800f5ac <_Bfree>:
 800f5ac:	b570      	push	{r4, r5, r6, lr}
 800f5ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f5b0:	4605      	mov	r5, r0
 800f5b2:	460c      	mov	r4, r1
 800f5b4:	b976      	cbnz	r6, 800f5d4 <_Bfree+0x28>
 800f5b6:	2010      	movs	r0, #16
 800f5b8:	f7ff ff88 	bl	800f4cc <malloc>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	6268      	str	r0, [r5, #36]	; 0x24
 800f5c0:	b920      	cbnz	r0, 800f5cc <_Bfree+0x20>
 800f5c2:	218a      	movs	r1, #138	; 0x8a
 800f5c4:	4b08      	ldr	r3, [pc, #32]	; (800f5e8 <_Bfree+0x3c>)
 800f5c6:	4809      	ldr	r0, [pc, #36]	; (800f5ec <_Bfree+0x40>)
 800f5c8:	f7fd ff90 	bl	800d4ec <__assert_func>
 800f5cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5d0:	6006      	str	r6, [r0, #0]
 800f5d2:	60c6      	str	r6, [r0, #12]
 800f5d4:	b13c      	cbz	r4, 800f5e6 <_Bfree+0x3a>
 800f5d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f5d8:	6862      	ldr	r2, [r4, #4]
 800f5da:	68db      	ldr	r3, [r3, #12]
 800f5dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f5e0:	6021      	str	r1, [r4, #0]
 800f5e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f5e6:	bd70      	pop	{r4, r5, r6, pc}
 800f5e8:	0801227a 	.word	0x0801227a
 800f5ec:	08012364 	.word	0x08012364

0800f5f0 <__multadd>:
 800f5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f4:	4698      	mov	r8, r3
 800f5f6:	460c      	mov	r4, r1
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	690e      	ldr	r6, [r1, #16]
 800f5fc:	4607      	mov	r7, r0
 800f5fe:	f101 0014 	add.w	r0, r1, #20
 800f602:	6805      	ldr	r5, [r0, #0]
 800f604:	3301      	adds	r3, #1
 800f606:	b2a9      	uxth	r1, r5
 800f608:	fb02 8101 	mla	r1, r2, r1, r8
 800f60c:	0c2d      	lsrs	r5, r5, #16
 800f60e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f612:	fb02 c505 	mla	r5, r2, r5, ip
 800f616:	b289      	uxth	r1, r1
 800f618:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f61c:	429e      	cmp	r6, r3
 800f61e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f622:	f840 1b04 	str.w	r1, [r0], #4
 800f626:	dcec      	bgt.n	800f602 <__multadd+0x12>
 800f628:	f1b8 0f00 	cmp.w	r8, #0
 800f62c:	d022      	beq.n	800f674 <__multadd+0x84>
 800f62e:	68a3      	ldr	r3, [r4, #8]
 800f630:	42b3      	cmp	r3, r6
 800f632:	dc19      	bgt.n	800f668 <__multadd+0x78>
 800f634:	6861      	ldr	r1, [r4, #4]
 800f636:	4638      	mov	r0, r7
 800f638:	3101      	adds	r1, #1
 800f63a:	f7ff ff77 	bl	800f52c <_Balloc>
 800f63e:	4605      	mov	r5, r0
 800f640:	b928      	cbnz	r0, 800f64e <__multadd+0x5e>
 800f642:	4602      	mov	r2, r0
 800f644:	21b5      	movs	r1, #181	; 0xb5
 800f646:	4b0d      	ldr	r3, [pc, #52]	; (800f67c <__multadd+0x8c>)
 800f648:	480d      	ldr	r0, [pc, #52]	; (800f680 <__multadd+0x90>)
 800f64a:	f7fd ff4f 	bl	800d4ec <__assert_func>
 800f64e:	6922      	ldr	r2, [r4, #16]
 800f650:	f104 010c 	add.w	r1, r4, #12
 800f654:	3202      	adds	r2, #2
 800f656:	0092      	lsls	r2, r2, #2
 800f658:	300c      	adds	r0, #12
 800f65a:	f7fd ffa1 	bl	800d5a0 <memcpy>
 800f65e:	4621      	mov	r1, r4
 800f660:	4638      	mov	r0, r7
 800f662:	f7ff ffa3 	bl	800f5ac <_Bfree>
 800f666:	462c      	mov	r4, r5
 800f668:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f66c:	3601      	adds	r6, #1
 800f66e:	f8c3 8014 	str.w	r8, [r3, #20]
 800f672:	6126      	str	r6, [r4, #16]
 800f674:	4620      	mov	r0, r4
 800f676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f67a:	bf00      	nop
 800f67c:	080122f0 	.word	0x080122f0
 800f680:	08012364 	.word	0x08012364

0800f684 <__hi0bits>:
 800f684:	0c02      	lsrs	r2, r0, #16
 800f686:	0412      	lsls	r2, r2, #16
 800f688:	4603      	mov	r3, r0
 800f68a:	b9ca      	cbnz	r2, 800f6c0 <__hi0bits+0x3c>
 800f68c:	0403      	lsls	r3, r0, #16
 800f68e:	2010      	movs	r0, #16
 800f690:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f694:	bf04      	itt	eq
 800f696:	021b      	lsleq	r3, r3, #8
 800f698:	3008      	addeq	r0, #8
 800f69a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f69e:	bf04      	itt	eq
 800f6a0:	011b      	lsleq	r3, r3, #4
 800f6a2:	3004      	addeq	r0, #4
 800f6a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f6a8:	bf04      	itt	eq
 800f6aa:	009b      	lsleq	r3, r3, #2
 800f6ac:	3002      	addeq	r0, #2
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	db05      	blt.n	800f6be <__hi0bits+0x3a>
 800f6b2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800f6b6:	f100 0001 	add.w	r0, r0, #1
 800f6ba:	bf08      	it	eq
 800f6bc:	2020      	moveq	r0, #32
 800f6be:	4770      	bx	lr
 800f6c0:	2000      	movs	r0, #0
 800f6c2:	e7e5      	b.n	800f690 <__hi0bits+0xc>

0800f6c4 <__lo0bits>:
 800f6c4:	6803      	ldr	r3, [r0, #0]
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	f013 0007 	ands.w	r0, r3, #7
 800f6cc:	d00b      	beq.n	800f6e6 <__lo0bits+0x22>
 800f6ce:	07d9      	lsls	r1, r3, #31
 800f6d0:	d422      	bmi.n	800f718 <__lo0bits+0x54>
 800f6d2:	0798      	lsls	r0, r3, #30
 800f6d4:	bf49      	itett	mi
 800f6d6:	085b      	lsrmi	r3, r3, #1
 800f6d8:	089b      	lsrpl	r3, r3, #2
 800f6da:	2001      	movmi	r0, #1
 800f6dc:	6013      	strmi	r3, [r2, #0]
 800f6de:	bf5c      	itt	pl
 800f6e0:	2002      	movpl	r0, #2
 800f6e2:	6013      	strpl	r3, [r2, #0]
 800f6e4:	4770      	bx	lr
 800f6e6:	b299      	uxth	r1, r3
 800f6e8:	b909      	cbnz	r1, 800f6ee <__lo0bits+0x2a>
 800f6ea:	2010      	movs	r0, #16
 800f6ec:	0c1b      	lsrs	r3, r3, #16
 800f6ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f6f2:	bf04      	itt	eq
 800f6f4:	0a1b      	lsreq	r3, r3, #8
 800f6f6:	3008      	addeq	r0, #8
 800f6f8:	0719      	lsls	r1, r3, #28
 800f6fa:	bf04      	itt	eq
 800f6fc:	091b      	lsreq	r3, r3, #4
 800f6fe:	3004      	addeq	r0, #4
 800f700:	0799      	lsls	r1, r3, #30
 800f702:	bf04      	itt	eq
 800f704:	089b      	lsreq	r3, r3, #2
 800f706:	3002      	addeq	r0, #2
 800f708:	07d9      	lsls	r1, r3, #31
 800f70a:	d403      	bmi.n	800f714 <__lo0bits+0x50>
 800f70c:	085b      	lsrs	r3, r3, #1
 800f70e:	f100 0001 	add.w	r0, r0, #1
 800f712:	d003      	beq.n	800f71c <__lo0bits+0x58>
 800f714:	6013      	str	r3, [r2, #0]
 800f716:	4770      	bx	lr
 800f718:	2000      	movs	r0, #0
 800f71a:	4770      	bx	lr
 800f71c:	2020      	movs	r0, #32
 800f71e:	4770      	bx	lr

0800f720 <__i2b>:
 800f720:	b510      	push	{r4, lr}
 800f722:	460c      	mov	r4, r1
 800f724:	2101      	movs	r1, #1
 800f726:	f7ff ff01 	bl	800f52c <_Balloc>
 800f72a:	4602      	mov	r2, r0
 800f72c:	b928      	cbnz	r0, 800f73a <__i2b+0x1a>
 800f72e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f732:	4b04      	ldr	r3, [pc, #16]	; (800f744 <__i2b+0x24>)
 800f734:	4804      	ldr	r0, [pc, #16]	; (800f748 <__i2b+0x28>)
 800f736:	f7fd fed9 	bl	800d4ec <__assert_func>
 800f73a:	2301      	movs	r3, #1
 800f73c:	6144      	str	r4, [r0, #20]
 800f73e:	6103      	str	r3, [r0, #16]
 800f740:	bd10      	pop	{r4, pc}
 800f742:	bf00      	nop
 800f744:	080122f0 	.word	0x080122f0
 800f748:	08012364 	.word	0x08012364

0800f74c <__multiply>:
 800f74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f750:	4614      	mov	r4, r2
 800f752:	690a      	ldr	r2, [r1, #16]
 800f754:	6923      	ldr	r3, [r4, #16]
 800f756:	460d      	mov	r5, r1
 800f758:	429a      	cmp	r2, r3
 800f75a:	bfbe      	ittt	lt
 800f75c:	460b      	movlt	r3, r1
 800f75e:	4625      	movlt	r5, r4
 800f760:	461c      	movlt	r4, r3
 800f762:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f766:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f76a:	68ab      	ldr	r3, [r5, #8]
 800f76c:	6869      	ldr	r1, [r5, #4]
 800f76e:	eb0a 0709 	add.w	r7, sl, r9
 800f772:	42bb      	cmp	r3, r7
 800f774:	b085      	sub	sp, #20
 800f776:	bfb8      	it	lt
 800f778:	3101      	addlt	r1, #1
 800f77a:	f7ff fed7 	bl	800f52c <_Balloc>
 800f77e:	b930      	cbnz	r0, 800f78e <__multiply+0x42>
 800f780:	4602      	mov	r2, r0
 800f782:	f240 115d 	movw	r1, #349	; 0x15d
 800f786:	4b41      	ldr	r3, [pc, #260]	; (800f88c <__multiply+0x140>)
 800f788:	4841      	ldr	r0, [pc, #260]	; (800f890 <__multiply+0x144>)
 800f78a:	f7fd feaf 	bl	800d4ec <__assert_func>
 800f78e:	f100 0614 	add.w	r6, r0, #20
 800f792:	4633      	mov	r3, r6
 800f794:	2200      	movs	r2, #0
 800f796:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f79a:	4543      	cmp	r3, r8
 800f79c:	d31e      	bcc.n	800f7dc <__multiply+0x90>
 800f79e:	f105 0c14 	add.w	ip, r5, #20
 800f7a2:	f104 0314 	add.w	r3, r4, #20
 800f7a6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f7aa:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f7ae:	9202      	str	r2, [sp, #8]
 800f7b0:	ebac 0205 	sub.w	r2, ip, r5
 800f7b4:	3a15      	subs	r2, #21
 800f7b6:	f022 0203 	bic.w	r2, r2, #3
 800f7ba:	3204      	adds	r2, #4
 800f7bc:	f105 0115 	add.w	r1, r5, #21
 800f7c0:	458c      	cmp	ip, r1
 800f7c2:	bf38      	it	cc
 800f7c4:	2204      	movcc	r2, #4
 800f7c6:	9201      	str	r2, [sp, #4]
 800f7c8:	9a02      	ldr	r2, [sp, #8]
 800f7ca:	9303      	str	r3, [sp, #12]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d808      	bhi.n	800f7e2 <__multiply+0x96>
 800f7d0:	2f00      	cmp	r7, #0
 800f7d2:	dc55      	bgt.n	800f880 <__multiply+0x134>
 800f7d4:	6107      	str	r7, [r0, #16]
 800f7d6:	b005      	add	sp, #20
 800f7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7dc:	f843 2b04 	str.w	r2, [r3], #4
 800f7e0:	e7db      	b.n	800f79a <__multiply+0x4e>
 800f7e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800f7e6:	f1ba 0f00 	cmp.w	sl, #0
 800f7ea:	d020      	beq.n	800f82e <__multiply+0xe2>
 800f7ec:	46b1      	mov	r9, r6
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f105 0e14 	add.w	lr, r5, #20
 800f7f4:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f7f8:	f8d9 b000 	ldr.w	fp, [r9]
 800f7fc:	b2a1      	uxth	r1, r4
 800f7fe:	fa1f fb8b 	uxth.w	fp, fp
 800f802:	fb0a b101 	mla	r1, sl, r1, fp
 800f806:	4411      	add	r1, r2
 800f808:	f8d9 2000 	ldr.w	r2, [r9]
 800f80c:	0c24      	lsrs	r4, r4, #16
 800f80e:	0c12      	lsrs	r2, r2, #16
 800f810:	fb0a 2404 	mla	r4, sl, r4, r2
 800f814:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f818:	b289      	uxth	r1, r1
 800f81a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f81e:	45f4      	cmp	ip, lr
 800f820:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f824:	f849 1b04 	str.w	r1, [r9], #4
 800f828:	d8e4      	bhi.n	800f7f4 <__multiply+0xa8>
 800f82a:	9901      	ldr	r1, [sp, #4]
 800f82c:	5072      	str	r2, [r6, r1]
 800f82e:	9a03      	ldr	r2, [sp, #12]
 800f830:	3304      	adds	r3, #4
 800f832:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f836:	f1b9 0f00 	cmp.w	r9, #0
 800f83a:	d01f      	beq.n	800f87c <__multiply+0x130>
 800f83c:	46b6      	mov	lr, r6
 800f83e:	f04f 0a00 	mov.w	sl, #0
 800f842:	6834      	ldr	r4, [r6, #0]
 800f844:	f105 0114 	add.w	r1, r5, #20
 800f848:	880a      	ldrh	r2, [r1, #0]
 800f84a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f84e:	b2a4      	uxth	r4, r4
 800f850:	fb09 b202 	mla	r2, r9, r2, fp
 800f854:	4492      	add	sl, r2
 800f856:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f85a:	f84e 4b04 	str.w	r4, [lr], #4
 800f85e:	f851 4b04 	ldr.w	r4, [r1], #4
 800f862:	f8be 2000 	ldrh.w	r2, [lr]
 800f866:	0c24      	lsrs	r4, r4, #16
 800f868:	fb09 2404 	mla	r4, r9, r4, r2
 800f86c:	458c      	cmp	ip, r1
 800f86e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f872:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f876:	d8e7      	bhi.n	800f848 <__multiply+0xfc>
 800f878:	9a01      	ldr	r2, [sp, #4]
 800f87a:	50b4      	str	r4, [r6, r2]
 800f87c:	3604      	adds	r6, #4
 800f87e:	e7a3      	b.n	800f7c8 <__multiply+0x7c>
 800f880:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f884:	2b00      	cmp	r3, #0
 800f886:	d1a5      	bne.n	800f7d4 <__multiply+0x88>
 800f888:	3f01      	subs	r7, #1
 800f88a:	e7a1      	b.n	800f7d0 <__multiply+0x84>
 800f88c:	080122f0 	.word	0x080122f0
 800f890:	08012364 	.word	0x08012364

0800f894 <__pow5mult>:
 800f894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f898:	4615      	mov	r5, r2
 800f89a:	f012 0203 	ands.w	r2, r2, #3
 800f89e:	4606      	mov	r6, r0
 800f8a0:	460f      	mov	r7, r1
 800f8a2:	d007      	beq.n	800f8b4 <__pow5mult+0x20>
 800f8a4:	4c25      	ldr	r4, [pc, #148]	; (800f93c <__pow5mult+0xa8>)
 800f8a6:	3a01      	subs	r2, #1
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f8ae:	f7ff fe9f 	bl	800f5f0 <__multadd>
 800f8b2:	4607      	mov	r7, r0
 800f8b4:	10ad      	asrs	r5, r5, #2
 800f8b6:	d03d      	beq.n	800f934 <__pow5mult+0xa0>
 800f8b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f8ba:	b97c      	cbnz	r4, 800f8dc <__pow5mult+0x48>
 800f8bc:	2010      	movs	r0, #16
 800f8be:	f7ff fe05 	bl	800f4cc <malloc>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	6270      	str	r0, [r6, #36]	; 0x24
 800f8c6:	b928      	cbnz	r0, 800f8d4 <__pow5mult+0x40>
 800f8c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f8cc:	4b1c      	ldr	r3, [pc, #112]	; (800f940 <__pow5mult+0xac>)
 800f8ce:	481d      	ldr	r0, [pc, #116]	; (800f944 <__pow5mult+0xb0>)
 800f8d0:	f7fd fe0c 	bl	800d4ec <__assert_func>
 800f8d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f8d8:	6004      	str	r4, [r0, #0]
 800f8da:	60c4      	str	r4, [r0, #12]
 800f8dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f8e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f8e4:	b94c      	cbnz	r4, 800f8fa <__pow5mult+0x66>
 800f8e6:	f240 2171 	movw	r1, #625	; 0x271
 800f8ea:	4630      	mov	r0, r6
 800f8ec:	f7ff ff18 	bl	800f720 <__i2b>
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	4604      	mov	r4, r0
 800f8f4:	f8c8 0008 	str.w	r0, [r8, #8]
 800f8f8:	6003      	str	r3, [r0, #0]
 800f8fa:	f04f 0900 	mov.w	r9, #0
 800f8fe:	07eb      	lsls	r3, r5, #31
 800f900:	d50a      	bpl.n	800f918 <__pow5mult+0x84>
 800f902:	4639      	mov	r1, r7
 800f904:	4622      	mov	r2, r4
 800f906:	4630      	mov	r0, r6
 800f908:	f7ff ff20 	bl	800f74c <__multiply>
 800f90c:	4680      	mov	r8, r0
 800f90e:	4639      	mov	r1, r7
 800f910:	4630      	mov	r0, r6
 800f912:	f7ff fe4b 	bl	800f5ac <_Bfree>
 800f916:	4647      	mov	r7, r8
 800f918:	106d      	asrs	r5, r5, #1
 800f91a:	d00b      	beq.n	800f934 <__pow5mult+0xa0>
 800f91c:	6820      	ldr	r0, [r4, #0]
 800f91e:	b938      	cbnz	r0, 800f930 <__pow5mult+0x9c>
 800f920:	4622      	mov	r2, r4
 800f922:	4621      	mov	r1, r4
 800f924:	4630      	mov	r0, r6
 800f926:	f7ff ff11 	bl	800f74c <__multiply>
 800f92a:	6020      	str	r0, [r4, #0]
 800f92c:	f8c0 9000 	str.w	r9, [r0]
 800f930:	4604      	mov	r4, r0
 800f932:	e7e4      	b.n	800f8fe <__pow5mult+0x6a>
 800f934:	4638      	mov	r0, r7
 800f936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f93a:	bf00      	nop
 800f93c:	080124b8 	.word	0x080124b8
 800f940:	0801227a 	.word	0x0801227a
 800f944:	08012364 	.word	0x08012364

0800f948 <__lshift>:
 800f948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f94c:	460c      	mov	r4, r1
 800f94e:	4607      	mov	r7, r0
 800f950:	4691      	mov	r9, r2
 800f952:	6923      	ldr	r3, [r4, #16]
 800f954:	6849      	ldr	r1, [r1, #4]
 800f956:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f95a:	68a3      	ldr	r3, [r4, #8]
 800f95c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f960:	f108 0601 	add.w	r6, r8, #1
 800f964:	42b3      	cmp	r3, r6
 800f966:	db0b      	blt.n	800f980 <__lshift+0x38>
 800f968:	4638      	mov	r0, r7
 800f96a:	f7ff fddf 	bl	800f52c <_Balloc>
 800f96e:	4605      	mov	r5, r0
 800f970:	b948      	cbnz	r0, 800f986 <__lshift+0x3e>
 800f972:	4602      	mov	r2, r0
 800f974:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f978:	4b27      	ldr	r3, [pc, #156]	; (800fa18 <__lshift+0xd0>)
 800f97a:	4828      	ldr	r0, [pc, #160]	; (800fa1c <__lshift+0xd4>)
 800f97c:	f7fd fdb6 	bl	800d4ec <__assert_func>
 800f980:	3101      	adds	r1, #1
 800f982:	005b      	lsls	r3, r3, #1
 800f984:	e7ee      	b.n	800f964 <__lshift+0x1c>
 800f986:	2300      	movs	r3, #0
 800f988:	f100 0114 	add.w	r1, r0, #20
 800f98c:	f100 0210 	add.w	r2, r0, #16
 800f990:	4618      	mov	r0, r3
 800f992:	4553      	cmp	r3, sl
 800f994:	db33      	blt.n	800f9fe <__lshift+0xb6>
 800f996:	6920      	ldr	r0, [r4, #16]
 800f998:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f99c:	f104 0314 	add.w	r3, r4, #20
 800f9a0:	f019 091f 	ands.w	r9, r9, #31
 800f9a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f9a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f9ac:	d02b      	beq.n	800fa06 <__lshift+0xbe>
 800f9ae:	468a      	mov	sl, r1
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	f1c9 0e20 	rsb	lr, r9, #32
 800f9b6:	6818      	ldr	r0, [r3, #0]
 800f9b8:	fa00 f009 	lsl.w	r0, r0, r9
 800f9bc:	4302      	orrs	r2, r0
 800f9be:	f84a 2b04 	str.w	r2, [sl], #4
 800f9c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9c6:	459c      	cmp	ip, r3
 800f9c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800f9cc:	d8f3      	bhi.n	800f9b6 <__lshift+0x6e>
 800f9ce:	ebac 0304 	sub.w	r3, ip, r4
 800f9d2:	3b15      	subs	r3, #21
 800f9d4:	f023 0303 	bic.w	r3, r3, #3
 800f9d8:	3304      	adds	r3, #4
 800f9da:	f104 0015 	add.w	r0, r4, #21
 800f9de:	4584      	cmp	ip, r0
 800f9e0:	bf38      	it	cc
 800f9e2:	2304      	movcc	r3, #4
 800f9e4:	50ca      	str	r2, [r1, r3]
 800f9e6:	b10a      	cbz	r2, 800f9ec <__lshift+0xa4>
 800f9e8:	f108 0602 	add.w	r6, r8, #2
 800f9ec:	3e01      	subs	r6, #1
 800f9ee:	4638      	mov	r0, r7
 800f9f0:	4621      	mov	r1, r4
 800f9f2:	612e      	str	r6, [r5, #16]
 800f9f4:	f7ff fdda 	bl	800f5ac <_Bfree>
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa02:	3301      	adds	r3, #1
 800fa04:	e7c5      	b.n	800f992 <__lshift+0x4a>
 800fa06:	3904      	subs	r1, #4
 800fa08:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa0c:	459c      	cmp	ip, r3
 800fa0e:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa12:	d8f9      	bhi.n	800fa08 <__lshift+0xc0>
 800fa14:	e7ea      	b.n	800f9ec <__lshift+0xa4>
 800fa16:	bf00      	nop
 800fa18:	080122f0 	.word	0x080122f0
 800fa1c:	08012364 	.word	0x08012364

0800fa20 <__mcmp>:
 800fa20:	4603      	mov	r3, r0
 800fa22:	690a      	ldr	r2, [r1, #16]
 800fa24:	6900      	ldr	r0, [r0, #16]
 800fa26:	b530      	push	{r4, r5, lr}
 800fa28:	1a80      	subs	r0, r0, r2
 800fa2a:	d10d      	bne.n	800fa48 <__mcmp+0x28>
 800fa2c:	3314      	adds	r3, #20
 800fa2e:	3114      	adds	r1, #20
 800fa30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fa34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fa38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fa3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fa40:	4295      	cmp	r5, r2
 800fa42:	d002      	beq.n	800fa4a <__mcmp+0x2a>
 800fa44:	d304      	bcc.n	800fa50 <__mcmp+0x30>
 800fa46:	2001      	movs	r0, #1
 800fa48:	bd30      	pop	{r4, r5, pc}
 800fa4a:	42a3      	cmp	r3, r4
 800fa4c:	d3f4      	bcc.n	800fa38 <__mcmp+0x18>
 800fa4e:	e7fb      	b.n	800fa48 <__mcmp+0x28>
 800fa50:	f04f 30ff 	mov.w	r0, #4294967295
 800fa54:	e7f8      	b.n	800fa48 <__mcmp+0x28>
	...

0800fa58 <__mdiff>:
 800fa58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa5c:	460c      	mov	r4, r1
 800fa5e:	4606      	mov	r6, r0
 800fa60:	4611      	mov	r1, r2
 800fa62:	4620      	mov	r0, r4
 800fa64:	4692      	mov	sl, r2
 800fa66:	f7ff ffdb 	bl	800fa20 <__mcmp>
 800fa6a:	1e05      	subs	r5, r0, #0
 800fa6c:	d111      	bne.n	800fa92 <__mdiff+0x3a>
 800fa6e:	4629      	mov	r1, r5
 800fa70:	4630      	mov	r0, r6
 800fa72:	f7ff fd5b 	bl	800f52c <_Balloc>
 800fa76:	4602      	mov	r2, r0
 800fa78:	b928      	cbnz	r0, 800fa86 <__mdiff+0x2e>
 800fa7a:	f240 2132 	movw	r1, #562	; 0x232
 800fa7e:	4b3c      	ldr	r3, [pc, #240]	; (800fb70 <__mdiff+0x118>)
 800fa80:	483c      	ldr	r0, [pc, #240]	; (800fb74 <__mdiff+0x11c>)
 800fa82:	f7fd fd33 	bl	800d4ec <__assert_func>
 800fa86:	2301      	movs	r3, #1
 800fa88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa8c:	4610      	mov	r0, r2
 800fa8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa92:	bfa4      	itt	ge
 800fa94:	4653      	movge	r3, sl
 800fa96:	46a2      	movge	sl, r4
 800fa98:	4630      	mov	r0, r6
 800fa9a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800fa9e:	bfa6      	itte	ge
 800faa0:	461c      	movge	r4, r3
 800faa2:	2500      	movge	r5, #0
 800faa4:	2501      	movlt	r5, #1
 800faa6:	f7ff fd41 	bl	800f52c <_Balloc>
 800faaa:	4602      	mov	r2, r0
 800faac:	b918      	cbnz	r0, 800fab6 <__mdiff+0x5e>
 800faae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fab2:	4b2f      	ldr	r3, [pc, #188]	; (800fb70 <__mdiff+0x118>)
 800fab4:	e7e4      	b.n	800fa80 <__mdiff+0x28>
 800fab6:	f100 0814 	add.w	r8, r0, #20
 800faba:	f8da 7010 	ldr.w	r7, [sl, #16]
 800fabe:	60c5      	str	r5, [r0, #12]
 800fac0:	f04f 0c00 	mov.w	ip, #0
 800fac4:	f10a 0514 	add.w	r5, sl, #20
 800fac8:	f10a 0010 	add.w	r0, sl, #16
 800facc:	46c2      	mov	sl, r8
 800face:	6926      	ldr	r6, [r4, #16]
 800fad0:	f104 0914 	add.w	r9, r4, #20
 800fad4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800fad8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fadc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800fae0:	f859 3b04 	ldr.w	r3, [r9], #4
 800fae4:	fa1f f18b 	uxth.w	r1, fp
 800fae8:	4461      	add	r1, ip
 800faea:	fa1f fc83 	uxth.w	ip, r3
 800faee:	0c1b      	lsrs	r3, r3, #16
 800faf0:	eba1 010c 	sub.w	r1, r1, ip
 800faf4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800faf8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fafc:	b289      	uxth	r1, r1
 800fafe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800fb02:	454e      	cmp	r6, r9
 800fb04:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fb08:	f84a 3b04 	str.w	r3, [sl], #4
 800fb0c:	d8e6      	bhi.n	800fadc <__mdiff+0x84>
 800fb0e:	1b33      	subs	r3, r6, r4
 800fb10:	3b15      	subs	r3, #21
 800fb12:	f023 0303 	bic.w	r3, r3, #3
 800fb16:	3415      	adds	r4, #21
 800fb18:	3304      	adds	r3, #4
 800fb1a:	42a6      	cmp	r6, r4
 800fb1c:	bf38      	it	cc
 800fb1e:	2304      	movcc	r3, #4
 800fb20:	441d      	add	r5, r3
 800fb22:	4443      	add	r3, r8
 800fb24:	461e      	mov	r6, r3
 800fb26:	462c      	mov	r4, r5
 800fb28:	4574      	cmp	r4, lr
 800fb2a:	d30e      	bcc.n	800fb4a <__mdiff+0xf2>
 800fb2c:	f10e 0103 	add.w	r1, lr, #3
 800fb30:	1b49      	subs	r1, r1, r5
 800fb32:	f021 0103 	bic.w	r1, r1, #3
 800fb36:	3d03      	subs	r5, #3
 800fb38:	45ae      	cmp	lr, r5
 800fb3a:	bf38      	it	cc
 800fb3c:	2100      	movcc	r1, #0
 800fb3e:	4419      	add	r1, r3
 800fb40:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800fb44:	b18b      	cbz	r3, 800fb6a <__mdiff+0x112>
 800fb46:	6117      	str	r7, [r2, #16]
 800fb48:	e7a0      	b.n	800fa8c <__mdiff+0x34>
 800fb4a:	f854 8b04 	ldr.w	r8, [r4], #4
 800fb4e:	fa1f f188 	uxth.w	r1, r8
 800fb52:	4461      	add	r1, ip
 800fb54:	1408      	asrs	r0, r1, #16
 800fb56:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800fb5a:	b289      	uxth	r1, r1
 800fb5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fb60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fb64:	f846 1b04 	str.w	r1, [r6], #4
 800fb68:	e7de      	b.n	800fb28 <__mdiff+0xd0>
 800fb6a:	3f01      	subs	r7, #1
 800fb6c:	e7e8      	b.n	800fb40 <__mdiff+0xe8>
 800fb6e:	bf00      	nop
 800fb70:	080122f0 	.word	0x080122f0
 800fb74:	08012364 	.word	0x08012364

0800fb78 <__d2b>:
 800fb78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fb7c:	2101      	movs	r1, #1
 800fb7e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800fb82:	4690      	mov	r8, r2
 800fb84:	461d      	mov	r5, r3
 800fb86:	f7ff fcd1 	bl	800f52c <_Balloc>
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	b930      	cbnz	r0, 800fb9c <__d2b+0x24>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	f240 310a 	movw	r1, #778	; 0x30a
 800fb94:	4b24      	ldr	r3, [pc, #144]	; (800fc28 <__d2b+0xb0>)
 800fb96:	4825      	ldr	r0, [pc, #148]	; (800fc2c <__d2b+0xb4>)
 800fb98:	f7fd fca8 	bl	800d4ec <__assert_func>
 800fb9c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800fba0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800fba4:	bb2d      	cbnz	r5, 800fbf2 <__d2b+0x7a>
 800fba6:	9301      	str	r3, [sp, #4]
 800fba8:	f1b8 0300 	subs.w	r3, r8, #0
 800fbac:	d026      	beq.n	800fbfc <__d2b+0x84>
 800fbae:	4668      	mov	r0, sp
 800fbb0:	9300      	str	r3, [sp, #0]
 800fbb2:	f7ff fd87 	bl	800f6c4 <__lo0bits>
 800fbb6:	9900      	ldr	r1, [sp, #0]
 800fbb8:	b1f0      	cbz	r0, 800fbf8 <__d2b+0x80>
 800fbba:	9a01      	ldr	r2, [sp, #4]
 800fbbc:	f1c0 0320 	rsb	r3, r0, #32
 800fbc0:	fa02 f303 	lsl.w	r3, r2, r3
 800fbc4:	430b      	orrs	r3, r1
 800fbc6:	40c2      	lsrs	r2, r0
 800fbc8:	6163      	str	r3, [r4, #20]
 800fbca:	9201      	str	r2, [sp, #4]
 800fbcc:	9b01      	ldr	r3, [sp, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	bf14      	ite	ne
 800fbd2:	2102      	movne	r1, #2
 800fbd4:	2101      	moveq	r1, #1
 800fbd6:	61a3      	str	r3, [r4, #24]
 800fbd8:	6121      	str	r1, [r4, #16]
 800fbda:	b1c5      	cbz	r5, 800fc0e <__d2b+0x96>
 800fbdc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fbe0:	4405      	add	r5, r0
 800fbe2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fbe6:	603d      	str	r5, [r7, #0]
 800fbe8:	6030      	str	r0, [r6, #0]
 800fbea:	4620      	mov	r0, r4
 800fbec:	b002      	add	sp, #8
 800fbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fbf6:	e7d6      	b.n	800fba6 <__d2b+0x2e>
 800fbf8:	6161      	str	r1, [r4, #20]
 800fbfa:	e7e7      	b.n	800fbcc <__d2b+0x54>
 800fbfc:	a801      	add	r0, sp, #4
 800fbfe:	f7ff fd61 	bl	800f6c4 <__lo0bits>
 800fc02:	2101      	movs	r1, #1
 800fc04:	9b01      	ldr	r3, [sp, #4]
 800fc06:	6121      	str	r1, [r4, #16]
 800fc08:	6163      	str	r3, [r4, #20]
 800fc0a:	3020      	adds	r0, #32
 800fc0c:	e7e5      	b.n	800fbda <__d2b+0x62>
 800fc0e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800fc12:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc16:	6038      	str	r0, [r7, #0]
 800fc18:	6918      	ldr	r0, [r3, #16]
 800fc1a:	f7ff fd33 	bl	800f684 <__hi0bits>
 800fc1e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800fc22:	6031      	str	r1, [r6, #0]
 800fc24:	e7e1      	b.n	800fbea <__d2b+0x72>
 800fc26:	bf00      	nop
 800fc28:	080122f0 	.word	0x080122f0
 800fc2c:	08012364 	.word	0x08012364

0800fc30 <_calloc_r>:
 800fc30:	b538      	push	{r3, r4, r5, lr}
 800fc32:	fb02 f501 	mul.w	r5, r2, r1
 800fc36:	4629      	mov	r1, r5
 800fc38:	f000 f854 	bl	800fce4 <_malloc_r>
 800fc3c:	4604      	mov	r4, r0
 800fc3e:	b118      	cbz	r0, 800fc48 <_calloc_r+0x18>
 800fc40:	462a      	mov	r2, r5
 800fc42:	2100      	movs	r1, #0
 800fc44:	f7fd fcba 	bl	800d5bc <memset>
 800fc48:	4620      	mov	r0, r4
 800fc4a:	bd38      	pop	{r3, r4, r5, pc}

0800fc4c <_free_r>:
 800fc4c:	b538      	push	{r3, r4, r5, lr}
 800fc4e:	4605      	mov	r5, r0
 800fc50:	2900      	cmp	r1, #0
 800fc52:	d043      	beq.n	800fcdc <_free_r+0x90>
 800fc54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc58:	1f0c      	subs	r4, r1, #4
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	bfb8      	it	lt
 800fc5e:	18e4      	addlt	r4, r4, r3
 800fc60:	f000 fb1c 	bl	801029c <__malloc_lock>
 800fc64:	4a1e      	ldr	r2, [pc, #120]	; (800fce0 <_free_r+0x94>)
 800fc66:	6813      	ldr	r3, [r2, #0]
 800fc68:	4610      	mov	r0, r2
 800fc6a:	b933      	cbnz	r3, 800fc7a <_free_r+0x2e>
 800fc6c:	6063      	str	r3, [r4, #4]
 800fc6e:	6014      	str	r4, [r2, #0]
 800fc70:	4628      	mov	r0, r5
 800fc72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc76:	f000 bb17 	b.w	80102a8 <__malloc_unlock>
 800fc7a:	42a3      	cmp	r3, r4
 800fc7c:	d90a      	bls.n	800fc94 <_free_r+0x48>
 800fc7e:	6821      	ldr	r1, [r4, #0]
 800fc80:	1862      	adds	r2, r4, r1
 800fc82:	4293      	cmp	r3, r2
 800fc84:	bf01      	itttt	eq
 800fc86:	681a      	ldreq	r2, [r3, #0]
 800fc88:	685b      	ldreq	r3, [r3, #4]
 800fc8a:	1852      	addeq	r2, r2, r1
 800fc8c:	6022      	streq	r2, [r4, #0]
 800fc8e:	6063      	str	r3, [r4, #4]
 800fc90:	6004      	str	r4, [r0, #0]
 800fc92:	e7ed      	b.n	800fc70 <_free_r+0x24>
 800fc94:	461a      	mov	r2, r3
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	b10b      	cbz	r3, 800fc9e <_free_r+0x52>
 800fc9a:	42a3      	cmp	r3, r4
 800fc9c:	d9fa      	bls.n	800fc94 <_free_r+0x48>
 800fc9e:	6811      	ldr	r1, [r2, #0]
 800fca0:	1850      	adds	r0, r2, r1
 800fca2:	42a0      	cmp	r0, r4
 800fca4:	d10b      	bne.n	800fcbe <_free_r+0x72>
 800fca6:	6820      	ldr	r0, [r4, #0]
 800fca8:	4401      	add	r1, r0
 800fcaa:	1850      	adds	r0, r2, r1
 800fcac:	4283      	cmp	r3, r0
 800fcae:	6011      	str	r1, [r2, #0]
 800fcb0:	d1de      	bne.n	800fc70 <_free_r+0x24>
 800fcb2:	6818      	ldr	r0, [r3, #0]
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	4401      	add	r1, r0
 800fcb8:	6011      	str	r1, [r2, #0]
 800fcba:	6053      	str	r3, [r2, #4]
 800fcbc:	e7d8      	b.n	800fc70 <_free_r+0x24>
 800fcbe:	d902      	bls.n	800fcc6 <_free_r+0x7a>
 800fcc0:	230c      	movs	r3, #12
 800fcc2:	602b      	str	r3, [r5, #0]
 800fcc4:	e7d4      	b.n	800fc70 <_free_r+0x24>
 800fcc6:	6820      	ldr	r0, [r4, #0]
 800fcc8:	1821      	adds	r1, r4, r0
 800fcca:	428b      	cmp	r3, r1
 800fccc:	bf01      	itttt	eq
 800fcce:	6819      	ldreq	r1, [r3, #0]
 800fcd0:	685b      	ldreq	r3, [r3, #4]
 800fcd2:	1809      	addeq	r1, r1, r0
 800fcd4:	6021      	streq	r1, [r4, #0]
 800fcd6:	6063      	str	r3, [r4, #4]
 800fcd8:	6054      	str	r4, [r2, #4]
 800fcda:	e7c9      	b.n	800fc70 <_free_r+0x24>
 800fcdc:	bd38      	pop	{r3, r4, r5, pc}
 800fcde:	bf00      	nop
 800fce0:	200035c8 	.word	0x200035c8

0800fce4 <_malloc_r>:
 800fce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fce6:	1ccd      	adds	r5, r1, #3
 800fce8:	f025 0503 	bic.w	r5, r5, #3
 800fcec:	3508      	adds	r5, #8
 800fcee:	2d0c      	cmp	r5, #12
 800fcf0:	bf38      	it	cc
 800fcf2:	250c      	movcc	r5, #12
 800fcf4:	2d00      	cmp	r5, #0
 800fcf6:	4606      	mov	r6, r0
 800fcf8:	db01      	blt.n	800fcfe <_malloc_r+0x1a>
 800fcfa:	42a9      	cmp	r1, r5
 800fcfc:	d903      	bls.n	800fd06 <_malloc_r+0x22>
 800fcfe:	230c      	movs	r3, #12
 800fd00:	6033      	str	r3, [r6, #0]
 800fd02:	2000      	movs	r0, #0
 800fd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd06:	f000 fac9 	bl	801029c <__malloc_lock>
 800fd0a:	4921      	ldr	r1, [pc, #132]	; (800fd90 <_malloc_r+0xac>)
 800fd0c:	680a      	ldr	r2, [r1, #0]
 800fd0e:	4614      	mov	r4, r2
 800fd10:	b99c      	cbnz	r4, 800fd3a <_malloc_r+0x56>
 800fd12:	4f20      	ldr	r7, [pc, #128]	; (800fd94 <_malloc_r+0xb0>)
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	b923      	cbnz	r3, 800fd22 <_malloc_r+0x3e>
 800fd18:	4621      	mov	r1, r4
 800fd1a:	4630      	mov	r0, r6
 800fd1c:	f000 f9be 	bl	801009c <_sbrk_r>
 800fd20:	6038      	str	r0, [r7, #0]
 800fd22:	4629      	mov	r1, r5
 800fd24:	4630      	mov	r0, r6
 800fd26:	f000 f9b9 	bl	801009c <_sbrk_r>
 800fd2a:	1c43      	adds	r3, r0, #1
 800fd2c:	d123      	bne.n	800fd76 <_malloc_r+0x92>
 800fd2e:	230c      	movs	r3, #12
 800fd30:	4630      	mov	r0, r6
 800fd32:	6033      	str	r3, [r6, #0]
 800fd34:	f000 fab8 	bl	80102a8 <__malloc_unlock>
 800fd38:	e7e3      	b.n	800fd02 <_malloc_r+0x1e>
 800fd3a:	6823      	ldr	r3, [r4, #0]
 800fd3c:	1b5b      	subs	r3, r3, r5
 800fd3e:	d417      	bmi.n	800fd70 <_malloc_r+0x8c>
 800fd40:	2b0b      	cmp	r3, #11
 800fd42:	d903      	bls.n	800fd4c <_malloc_r+0x68>
 800fd44:	6023      	str	r3, [r4, #0]
 800fd46:	441c      	add	r4, r3
 800fd48:	6025      	str	r5, [r4, #0]
 800fd4a:	e004      	b.n	800fd56 <_malloc_r+0x72>
 800fd4c:	6863      	ldr	r3, [r4, #4]
 800fd4e:	42a2      	cmp	r2, r4
 800fd50:	bf0c      	ite	eq
 800fd52:	600b      	streq	r3, [r1, #0]
 800fd54:	6053      	strne	r3, [r2, #4]
 800fd56:	4630      	mov	r0, r6
 800fd58:	f000 faa6 	bl	80102a8 <__malloc_unlock>
 800fd5c:	f104 000b 	add.w	r0, r4, #11
 800fd60:	1d23      	adds	r3, r4, #4
 800fd62:	f020 0007 	bic.w	r0, r0, #7
 800fd66:	1ac2      	subs	r2, r0, r3
 800fd68:	d0cc      	beq.n	800fd04 <_malloc_r+0x20>
 800fd6a:	1a1b      	subs	r3, r3, r0
 800fd6c:	50a3      	str	r3, [r4, r2]
 800fd6e:	e7c9      	b.n	800fd04 <_malloc_r+0x20>
 800fd70:	4622      	mov	r2, r4
 800fd72:	6864      	ldr	r4, [r4, #4]
 800fd74:	e7cc      	b.n	800fd10 <_malloc_r+0x2c>
 800fd76:	1cc4      	adds	r4, r0, #3
 800fd78:	f024 0403 	bic.w	r4, r4, #3
 800fd7c:	42a0      	cmp	r0, r4
 800fd7e:	d0e3      	beq.n	800fd48 <_malloc_r+0x64>
 800fd80:	1a21      	subs	r1, r4, r0
 800fd82:	4630      	mov	r0, r6
 800fd84:	f000 f98a 	bl	801009c <_sbrk_r>
 800fd88:	3001      	adds	r0, #1
 800fd8a:	d1dd      	bne.n	800fd48 <_malloc_r+0x64>
 800fd8c:	e7cf      	b.n	800fd2e <_malloc_r+0x4a>
 800fd8e:	bf00      	nop
 800fd90:	200035c8 	.word	0x200035c8
 800fd94:	200035cc 	.word	0x200035cc

0800fd98 <_realloc_r>:
 800fd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd9a:	4607      	mov	r7, r0
 800fd9c:	4614      	mov	r4, r2
 800fd9e:	460e      	mov	r6, r1
 800fda0:	b921      	cbnz	r1, 800fdac <_realloc_r+0x14>
 800fda2:	4611      	mov	r1, r2
 800fda4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fda8:	f7ff bf9c 	b.w	800fce4 <_malloc_r>
 800fdac:	b922      	cbnz	r2, 800fdb8 <_realloc_r+0x20>
 800fdae:	f7ff ff4d 	bl	800fc4c <_free_r>
 800fdb2:	4625      	mov	r5, r4
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdb8:	f000 fa7c 	bl	80102b4 <_malloc_usable_size_r>
 800fdbc:	42a0      	cmp	r0, r4
 800fdbe:	d20f      	bcs.n	800fde0 <_realloc_r+0x48>
 800fdc0:	4621      	mov	r1, r4
 800fdc2:	4638      	mov	r0, r7
 800fdc4:	f7ff ff8e 	bl	800fce4 <_malloc_r>
 800fdc8:	4605      	mov	r5, r0
 800fdca:	2800      	cmp	r0, #0
 800fdcc:	d0f2      	beq.n	800fdb4 <_realloc_r+0x1c>
 800fdce:	4631      	mov	r1, r6
 800fdd0:	4622      	mov	r2, r4
 800fdd2:	f7fd fbe5 	bl	800d5a0 <memcpy>
 800fdd6:	4631      	mov	r1, r6
 800fdd8:	4638      	mov	r0, r7
 800fdda:	f7ff ff37 	bl	800fc4c <_free_r>
 800fdde:	e7e9      	b.n	800fdb4 <_realloc_r+0x1c>
 800fde0:	4635      	mov	r5, r6
 800fde2:	e7e7      	b.n	800fdb4 <_realloc_r+0x1c>

0800fde4 <__ssputs_r>:
 800fde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fde8:	688e      	ldr	r6, [r1, #8]
 800fdea:	4682      	mov	sl, r0
 800fdec:	429e      	cmp	r6, r3
 800fdee:	460c      	mov	r4, r1
 800fdf0:	4690      	mov	r8, r2
 800fdf2:	461f      	mov	r7, r3
 800fdf4:	d838      	bhi.n	800fe68 <__ssputs_r+0x84>
 800fdf6:	898a      	ldrh	r2, [r1, #12]
 800fdf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fdfc:	d032      	beq.n	800fe64 <__ssputs_r+0x80>
 800fdfe:	6825      	ldr	r5, [r4, #0]
 800fe00:	6909      	ldr	r1, [r1, #16]
 800fe02:	3301      	adds	r3, #1
 800fe04:	eba5 0901 	sub.w	r9, r5, r1
 800fe08:	6965      	ldr	r5, [r4, #20]
 800fe0a:	444b      	add	r3, r9
 800fe0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe14:	106d      	asrs	r5, r5, #1
 800fe16:	429d      	cmp	r5, r3
 800fe18:	bf38      	it	cc
 800fe1a:	461d      	movcc	r5, r3
 800fe1c:	0553      	lsls	r3, r2, #21
 800fe1e:	d531      	bpl.n	800fe84 <__ssputs_r+0xa0>
 800fe20:	4629      	mov	r1, r5
 800fe22:	f7ff ff5f 	bl	800fce4 <_malloc_r>
 800fe26:	4606      	mov	r6, r0
 800fe28:	b950      	cbnz	r0, 800fe40 <__ssputs_r+0x5c>
 800fe2a:	230c      	movs	r3, #12
 800fe2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe30:	f8ca 3000 	str.w	r3, [sl]
 800fe34:	89a3      	ldrh	r3, [r4, #12]
 800fe36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe3a:	81a3      	strh	r3, [r4, #12]
 800fe3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe40:	464a      	mov	r2, r9
 800fe42:	6921      	ldr	r1, [r4, #16]
 800fe44:	f7fd fbac 	bl	800d5a0 <memcpy>
 800fe48:	89a3      	ldrh	r3, [r4, #12]
 800fe4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe52:	81a3      	strh	r3, [r4, #12]
 800fe54:	6126      	str	r6, [r4, #16]
 800fe56:	444e      	add	r6, r9
 800fe58:	6026      	str	r6, [r4, #0]
 800fe5a:	463e      	mov	r6, r7
 800fe5c:	6165      	str	r5, [r4, #20]
 800fe5e:	eba5 0509 	sub.w	r5, r5, r9
 800fe62:	60a5      	str	r5, [r4, #8]
 800fe64:	42be      	cmp	r6, r7
 800fe66:	d900      	bls.n	800fe6a <__ssputs_r+0x86>
 800fe68:	463e      	mov	r6, r7
 800fe6a:	4632      	mov	r2, r6
 800fe6c:	4641      	mov	r1, r8
 800fe6e:	6820      	ldr	r0, [r4, #0]
 800fe70:	f7ff fb42 	bl	800f4f8 <memmove>
 800fe74:	68a3      	ldr	r3, [r4, #8]
 800fe76:	6822      	ldr	r2, [r4, #0]
 800fe78:	1b9b      	subs	r3, r3, r6
 800fe7a:	4432      	add	r2, r6
 800fe7c:	2000      	movs	r0, #0
 800fe7e:	60a3      	str	r3, [r4, #8]
 800fe80:	6022      	str	r2, [r4, #0]
 800fe82:	e7db      	b.n	800fe3c <__ssputs_r+0x58>
 800fe84:	462a      	mov	r2, r5
 800fe86:	f7ff ff87 	bl	800fd98 <_realloc_r>
 800fe8a:	4606      	mov	r6, r0
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	d1e1      	bne.n	800fe54 <__ssputs_r+0x70>
 800fe90:	4650      	mov	r0, sl
 800fe92:	6921      	ldr	r1, [r4, #16]
 800fe94:	f7ff feda 	bl	800fc4c <_free_r>
 800fe98:	e7c7      	b.n	800fe2a <__ssputs_r+0x46>
	...

0800fe9c <_svfiprintf_r>:
 800fe9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea0:	4698      	mov	r8, r3
 800fea2:	898b      	ldrh	r3, [r1, #12]
 800fea4:	4607      	mov	r7, r0
 800fea6:	061b      	lsls	r3, r3, #24
 800fea8:	460d      	mov	r5, r1
 800feaa:	4614      	mov	r4, r2
 800feac:	b09d      	sub	sp, #116	; 0x74
 800feae:	d50e      	bpl.n	800fece <_svfiprintf_r+0x32>
 800feb0:	690b      	ldr	r3, [r1, #16]
 800feb2:	b963      	cbnz	r3, 800fece <_svfiprintf_r+0x32>
 800feb4:	2140      	movs	r1, #64	; 0x40
 800feb6:	f7ff ff15 	bl	800fce4 <_malloc_r>
 800feba:	6028      	str	r0, [r5, #0]
 800febc:	6128      	str	r0, [r5, #16]
 800febe:	b920      	cbnz	r0, 800feca <_svfiprintf_r+0x2e>
 800fec0:	230c      	movs	r3, #12
 800fec2:	603b      	str	r3, [r7, #0]
 800fec4:	f04f 30ff 	mov.w	r0, #4294967295
 800fec8:	e0d1      	b.n	801006e <_svfiprintf_r+0x1d2>
 800feca:	2340      	movs	r3, #64	; 0x40
 800fecc:	616b      	str	r3, [r5, #20]
 800fece:	2300      	movs	r3, #0
 800fed0:	9309      	str	r3, [sp, #36]	; 0x24
 800fed2:	2320      	movs	r3, #32
 800fed4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fed8:	2330      	movs	r3, #48	; 0x30
 800feda:	f04f 0901 	mov.w	r9, #1
 800fede:	f8cd 800c 	str.w	r8, [sp, #12]
 800fee2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010088 <_svfiprintf_r+0x1ec>
 800fee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800feea:	4623      	mov	r3, r4
 800feec:	469a      	mov	sl, r3
 800feee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fef2:	b10a      	cbz	r2, 800fef8 <_svfiprintf_r+0x5c>
 800fef4:	2a25      	cmp	r2, #37	; 0x25
 800fef6:	d1f9      	bne.n	800feec <_svfiprintf_r+0x50>
 800fef8:	ebba 0b04 	subs.w	fp, sl, r4
 800fefc:	d00b      	beq.n	800ff16 <_svfiprintf_r+0x7a>
 800fefe:	465b      	mov	r3, fp
 800ff00:	4622      	mov	r2, r4
 800ff02:	4629      	mov	r1, r5
 800ff04:	4638      	mov	r0, r7
 800ff06:	f7ff ff6d 	bl	800fde4 <__ssputs_r>
 800ff0a:	3001      	adds	r0, #1
 800ff0c:	f000 80aa 	beq.w	8010064 <_svfiprintf_r+0x1c8>
 800ff10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff12:	445a      	add	r2, fp
 800ff14:	9209      	str	r2, [sp, #36]	; 0x24
 800ff16:	f89a 3000 	ldrb.w	r3, [sl]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	f000 80a2 	beq.w	8010064 <_svfiprintf_r+0x1c8>
 800ff20:	2300      	movs	r3, #0
 800ff22:	f04f 32ff 	mov.w	r2, #4294967295
 800ff26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff2a:	f10a 0a01 	add.w	sl, sl, #1
 800ff2e:	9304      	str	r3, [sp, #16]
 800ff30:	9307      	str	r3, [sp, #28]
 800ff32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff36:	931a      	str	r3, [sp, #104]	; 0x68
 800ff38:	4654      	mov	r4, sl
 800ff3a:	2205      	movs	r2, #5
 800ff3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff40:	4851      	ldr	r0, [pc, #324]	; (8010088 <_svfiprintf_r+0x1ec>)
 800ff42:	f7ff facb 	bl	800f4dc <memchr>
 800ff46:	9a04      	ldr	r2, [sp, #16]
 800ff48:	b9d8      	cbnz	r0, 800ff82 <_svfiprintf_r+0xe6>
 800ff4a:	06d0      	lsls	r0, r2, #27
 800ff4c:	bf44      	itt	mi
 800ff4e:	2320      	movmi	r3, #32
 800ff50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff54:	0711      	lsls	r1, r2, #28
 800ff56:	bf44      	itt	mi
 800ff58:	232b      	movmi	r3, #43	; 0x2b
 800ff5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ff62:	2b2a      	cmp	r3, #42	; 0x2a
 800ff64:	d015      	beq.n	800ff92 <_svfiprintf_r+0xf6>
 800ff66:	4654      	mov	r4, sl
 800ff68:	2000      	movs	r0, #0
 800ff6a:	f04f 0c0a 	mov.w	ip, #10
 800ff6e:	9a07      	ldr	r2, [sp, #28]
 800ff70:	4621      	mov	r1, r4
 800ff72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff76:	3b30      	subs	r3, #48	; 0x30
 800ff78:	2b09      	cmp	r3, #9
 800ff7a:	d94e      	bls.n	801001a <_svfiprintf_r+0x17e>
 800ff7c:	b1b0      	cbz	r0, 800ffac <_svfiprintf_r+0x110>
 800ff7e:	9207      	str	r2, [sp, #28]
 800ff80:	e014      	b.n	800ffac <_svfiprintf_r+0x110>
 800ff82:	eba0 0308 	sub.w	r3, r0, r8
 800ff86:	fa09 f303 	lsl.w	r3, r9, r3
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	46a2      	mov	sl, r4
 800ff8e:	9304      	str	r3, [sp, #16]
 800ff90:	e7d2      	b.n	800ff38 <_svfiprintf_r+0x9c>
 800ff92:	9b03      	ldr	r3, [sp, #12]
 800ff94:	1d19      	adds	r1, r3, #4
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	9103      	str	r1, [sp, #12]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	bfbb      	ittet	lt
 800ff9e:	425b      	neglt	r3, r3
 800ffa0:	f042 0202 	orrlt.w	r2, r2, #2
 800ffa4:	9307      	strge	r3, [sp, #28]
 800ffa6:	9307      	strlt	r3, [sp, #28]
 800ffa8:	bfb8      	it	lt
 800ffaa:	9204      	strlt	r2, [sp, #16]
 800ffac:	7823      	ldrb	r3, [r4, #0]
 800ffae:	2b2e      	cmp	r3, #46	; 0x2e
 800ffb0:	d10c      	bne.n	800ffcc <_svfiprintf_r+0x130>
 800ffb2:	7863      	ldrb	r3, [r4, #1]
 800ffb4:	2b2a      	cmp	r3, #42	; 0x2a
 800ffb6:	d135      	bne.n	8010024 <_svfiprintf_r+0x188>
 800ffb8:	9b03      	ldr	r3, [sp, #12]
 800ffba:	3402      	adds	r4, #2
 800ffbc:	1d1a      	adds	r2, r3, #4
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	9203      	str	r2, [sp, #12]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	bfb8      	it	lt
 800ffc6:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffca:	9305      	str	r3, [sp, #20]
 800ffcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010098 <_svfiprintf_r+0x1fc>
 800ffd0:	2203      	movs	r2, #3
 800ffd2:	4650      	mov	r0, sl
 800ffd4:	7821      	ldrb	r1, [r4, #0]
 800ffd6:	f7ff fa81 	bl	800f4dc <memchr>
 800ffda:	b140      	cbz	r0, 800ffee <_svfiprintf_r+0x152>
 800ffdc:	2340      	movs	r3, #64	; 0x40
 800ffde:	eba0 000a 	sub.w	r0, r0, sl
 800ffe2:	fa03 f000 	lsl.w	r0, r3, r0
 800ffe6:	9b04      	ldr	r3, [sp, #16]
 800ffe8:	3401      	adds	r4, #1
 800ffea:	4303      	orrs	r3, r0
 800ffec:	9304      	str	r3, [sp, #16]
 800ffee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fff2:	2206      	movs	r2, #6
 800fff4:	4825      	ldr	r0, [pc, #148]	; (801008c <_svfiprintf_r+0x1f0>)
 800fff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fffa:	f7ff fa6f 	bl	800f4dc <memchr>
 800fffe:	2800      	cmp	r0, #0
 8010000:	d038      	beq.n	8010074 <_svfiprintf_r+0x1d8>
 8010002:	4b23      	ldr	r3, [pc, #140]	; (8010090 <_svfiprintf_r+0x1f4>)
 8010004:	bb1b      	cbnz	r3, 801004e <_svfiprintf_r+0x1b2>
 8010006:	9b03      	ldr	r3, [sp, #12]
 8010008:	3307      	adds	r3, #7
 801000a:	f023 0307 	bic.w	r3, r3, #7
 801000e:	3308      	adds	r3, #8
 8010010:	9303      	str	r3, [sp, #12]
 8010012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010014:	4433      	add	r3, r6
 8010016:	9309      	str	r3, [sp, #36]	; 0x24
 8010018:	e767      	b.n	800feea <_svfiprintf_r+0x4e>
 801001a:	460c      	mov	r4, r1
 801001c:	2001      	movs	r0, #1
 801001e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010022:	e7a5      	b.n	800ff70 <_svfiprintf_r+0xd4>
 8010024:	2300      	movs	r3, #0
 8010026:	f04f 0c0a 	mov.w	ip, #10
 801002a:	4619      	mov	r1, r3
 801002c:	3401      	adds	r4, #1
 801002e:	9305      	str	r3, [sp, #20]
 8010030:	4620      	mov	r0, r4
 8010032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010036:	3a30      	subs	r2, #48	; 0x30
 8010038:	2a09      	cmp	r2, #9
 801003a:	d903      	bls.n	8010044 <_svfiprintf_r+0x1a8>
 801003c:	2b00      	cmp	r3, #0
 801003e:	d0c5      	beq.n	800ffcc <_svfiprintf_r+0x130>
 8010040:	9105      	str	r1, [sp, #20]
 8010042:	e7c3      	b.n	800ffcc <_svfiprintf_r+0x130>
 8010044:	4604      	mov	r4, r0
 8010046:	2301      	movs	r3, #1
 8010048:	fb0c 2101 	mla	r1, ip, r1, r2
 801004c:	e7f0      	b.n	8010030 <_svfiprintf_r+0x194>
 801004e:	ab03      	add	r3, sp, #12
 8010050:	9300      	str	r3, [sp, #0]
 8010052:	462a      	mov	r2, r5
 8010054:	4638      	mov	r0, r7
 8010056:	4b0f      	ldr	r3, [pc, #60]	; (8010094 <_svfiprintf_r+0x1f8>)
 8010058:	a904      	add	r1, sp, #16
 801005a:	f7fd fcad 	bl	800d9b8 <_printf_float>
 801005e:	1c42      	adds	r2, r0, #1
 8010060:	4606      	mov	r6, r0
 8010062:	d1d6      	bne.n	8010012 <_svfiprintf_r+0x176>
 8010064:	89ab      	ldrh	r3, [r5, #12]
 8010066:	065b      	lsls	r3, r3, #25
 8010068:	f53f af2c 	bmi.w	800fec4 <_svfiprintf_r+0x28>
 801006c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801006e:	b01d      	add	sp, #116	; 0x74
 8010070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010074:	ab03      	add	r3, sp, #12
 8010076:	9300      	str	r3, [sp, #0]
 8010078:	462a      	mov	r2, r5
 801007a:	4638      	mov	r0, r7
 801007c:	4b05      	ldr	r3, [pc, #20]	; (8010094 <_svfiprintf_r+0x1f8>)
 801007e:	a904      	add	r1, sp, #16
 8010080:	f7fd ff36 	bl	800def0 <_printf_i>
 8010084:	e7eb      	b.n	801005e <_svfiprintf_r+0x1c2>
 8010086:	bf00      	nop
 8010088:	08012228 	.word	0x08012228
 801008c:	08012232 	.word	0x08012232
 8010090:	0800d9b9 	.word	0x0800d9b9
 8010094:	0800fde5 	.word	0x0800fde5
 8010098:	0801222e 	.word	0x0801222e

0801009c <_sbrk_r>:
 801009c:	b538      	push	{r3, r4, r5, lr}
 801009e:	2300      	movs	r3, #0
 80100a0:	4d05      	ldr	r5, [pc, #20]	; (80100b8 <_sbrk_r+0x1c>)
 80100a2:	4604      	mov	r4, r0
 80100a4:	4608      	mov	r0, r1
 80100a6:	602b      	str	r3, [r5, #0]
 80100a8:	f7f3 ffc8 	bl	800403c <_sbrk>
 80100ac:	1c43      	adds	r3, r0, #1
 80100ae:	d102      	bne.n	80100b6 <_sbrk_r+0x1a>
 80100b0:	682b      	ldr	r3, [r5, #0]
 80100b2:	b103      	cbz	r3, 80100b6 <_sbrk_r+0x1a>
 80100b4:	6023      	str	r3, [r4, #0]
 80100b6:	bd38      	pop	{r3, r4, r5, pc}
 80100b8:	2000388c 	.word	0x2000388c

080100bc <_raise_r>:
 80100bc:	291f      	cmp	r1, #31
 80100be:	b538      	push	{r3, r4, r5, lr}
 80100c0:	4604      	mov	r4, r0
 80100c2:	460d      	mov	r5, r1
 80100c4:	d904      	bls.n	80100d0 <_raise_r+0x14>
 80100c6:	2316      	movs	r3, #22
 80100c8:	6003      	str	r3, [r0, #0]
 80100ca:	f04f 30ff 	mov.w	r0, #4294967295
 80100ce:	bd38      	pop	{r3, r4, r5, pc}
 80100d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80100d2:	b112      	cbz	r2, 80100da <_raise_r+0x1e>
 80100d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80100d8:	b94b      	cbnz	r3, 80100ee <_raise_r+0x32>
 80100da:	4620      	mov	r0, r4
 80100dc:	f000 f830 	bl	8010140 <_getpid_r>
 80100e0:	462a      	mov	r2, r5
 80100e2:	4601      	mov	r1, r0
 80100e4:	4620      	mov	r0, r4
 80100e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100ea:	f000 b817 	b.w	801011c <_kill_r>
 80100ee:	2b01      	cmp	r3, #1
 80100f0:	d00a      	beq.n	8010108 <_raise_r+0x4c>
 80100f2:	1c59      	adds	r1, r3, #1
 80100f4:	d103      	bne.n	80100fe <_raise_r+0x42>
 80100f6:	2316      	movs	r3, #22
 80100f8:	6003      	str	r3, [r0, #0]
 80100fa:	2001      	movs	r0, #1
 80100fc:	e7e7      	b.n	80100ce <_raise_r+0x12>
 80100fe:	2400      	movs	r4, #0
 8010100:	4628      	mov	r0, r5
 8010102:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010106:	4798      	blx	r3
 8010108:	2000      	movs	r0, #0
 801010a:	e7e0      	b.n	80100ce <_raise_r+0x12>

0801010c <raise>:
 801010c:	4b02      	ldr	r3, [pc, #8]	; (8010118 <raise+0xc>)
 801010e:	4601      	mov	r1, r0
 8010110:	6818      	ldr	r0, [r3, #0]
 8010112:	f7ff bfd3 	b.w	80100bc <_raise_r>
 8010116:	bf00      	nop
 8010118:	20000158 	.word	0x20000158

0801011c <_kill_r>:
 801011c:	b538      	push	{r3, r4, r5, lr}
 801011e:	2300      	movs	r3, #0
 8010120:	4d06      	ldr	r5, [pc, #24]	; (801013c <_kill_r+0x20>)
 8010122:	4604      	mov	r4, r0
 8010124:	4608      	mov	r0, r1
 8010126:	4611      	mov	r1, r2
 8010128:	602b      	str	r3, [r5, #0]
 801012a:	f7f3 ff04 	bl	8003f36 <_kill>
 801012e:	1c43      	adds	r3, r0, #1
 8010130:	d102      	bne.n	8010138 <_kill_r+0x1c>
 8010132:	682b      	ldr	r3, [r5, #0]
 8010134:	b103      	cbz	r3, 8010138 <_kill_r+0x1c>
 8010136:	6023      	str	r3, [r4, #0]
 8010138:	bd38      	pop	{r3, r4, r5, pc}
 801013a:	bf00      	nop
 801013c:	2000388c 	.word	0x2000388c

08010140 <_getpid_r>:
 8010140:	f7f3 bef2 	b.w	8003f28 <_getpid>

08010144 <__sread>:
 8010144:	b510      	push	{r4, lr}
 8010146:	460c      	mov	r4, r1
 8010148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801014c:	f000 f8ba 	bl	80102c4 <_read_r>
 8010150:	2800      	cmp	r0, #0
 8010152:	bfab      	itete	ge
 8010154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010156:	89a3      	ldrhlt	r3, [r4, #12]
 8010158:	181b      	addge	r3, r3, r0
 801015a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801015e:	bfac      	ite	ge
 8010160:	6563      	strge	r3, [r4, #84]	; 0x54
 8010162:	81a3      	strhlt	r3, [r4, #12]
 8010164:	bd10      	pop	{r4, pc}

08010166 <__swrite>:
 8010166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801016a:	461f      	mov	r7, r3
 801016c:	898b      	ldrh	r3, [r1, #12]
 801016e:	4605      	mov	r5, r0
 8010170:	05db      	lsls	r3, r3, #23
 8010172:	460c      	mov	r4, r1
 8010174:	4616      	mov	r6, r2
 8010176:	d505      	bpl.n	8010184 <__swrite+0x1e>
 8010178:	2302      	movs	r3, #2
 801017a:	2200      	movs	r2, #0
 801017c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010180:	f000 f868 	bl	8010254 <_lseek_r>
 8010184:	89a3      	ldrh	r3, [r4, #12]
 8010186:	4632      	mov	r2, r6
 8010188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801018c:	81a3      	strh	r3, [r4, #12]
 801018e:	4628      	mov	r0, r5
 8010190:	463b      	mov	r3, r7
 8010192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801019a:	f000 b817 	b.w	80101cc <_write_r>

0801019e <__sseek>:
 801019e:	b510      	push	{r4, lr}
 80101a0:	460c      	mov	r4, r1
 80101a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101a6:	f000 f855 	bl	8010254 <_lseek_r>
 80101aa:	1c43      	adds	r3, r0, #1
 80101ac:	89a3      	ldrh	r3, [r4, #12]
 80101ae:	bf15      	itete	ne
 80101b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80101b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80101b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80101ba:	81a3      	strheq	r3, [r4, #12]
 80101bc:	bf18      	it	ne
 80101be:	81a3      	strhne	r3, [r4, #12]
 80101c0:	bd10      	pop	{r4, pc}

080101c2 <__sclose>:
 80101c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101c6:	f000 b813 	b.w	80101f0 <_close_r>
	...

080101cc <_write_r>:
 80101cc:	b538      	push	{r3, r4, r5, lr}
 80101ce:	4604      	mov	r4, r0
 80101d0:	4608      	mov	r0, r1
 80101d2:	4611      	mov	r1, r2
 80101d4:	2200      	movs	r2, #0
 80101d6:	4d05      	ldr	r5, [pc, #20]	; (80101ec <_write_r+0x20>)
 80101d8:	602a      	str	r2, [r5, #0]
 80101da:	461a      	mov	r2, r3
 80101dc:	f7f3 fee2 	bl	8003fa4 <_write>
 80101e0:	1c43      	adds	r3, r0, #1
 80101e2:	d102      	bne.n	80101ea <_write_r+0x1e>
 80101e4:	682b      	ldr	r3, [r5, #0]
 80101e6:	b103      	cbz	r3, 80101ea <_write_r+0x1e>
 80101e8:	6023      	str	r3, [r4, #0]
 80101ea:	bd38      	pop	{r3, r4, r5, pc}
 80101ec:	2000388c 	.word	0x2000388c

080101f0 <_close_r>:
 80101f0:	b538      	push	{r3, r4, r5, lr}
 80101f2:	2300      	movs	r3, #0
 80101f4:	4d05      	ldr	r5, [pc, #20]	; (801020c <_close_r+0x1c>)
 80101f6:	4604      	mov	r4, r0
 80101f8:	4608      	mov	r0, r1
 80101fa:	602b      	str	r3, [r5, #0]
 80101fc:	f7f3 feee 	bl	8003fdc <_close>
 8010200:	1c43      	adds	r3, r0, #1
 8010202:	d102      	bne.n	801020a <_close_r+0x1a>
 8010204:	682b      	ldr	r3, [r5, #0]
 8010206:	b103      	cbz	r3, 801020a <_close_r+0x1a>
 8010208:	6023      	str	r3, [r4, #0]
 801020a:	bd38      	pop	{r3, r4, r5, pc}
 801020c:	2000388c 	.word	0x2000388c

08010210 <_fstat_r>:
 8010210:	b538      	push	{r3, r4, r5, lr}
 8010212:	2300      	movs	r3, #0
 8010214:	4d06      	ldr	r5, [pc, #24]	; (8010230 <_fstat_r+0x20>)
 8010216:	4604      	mov	r4, r0
 8010218:	4608      	mov	r0, r1
 801021a:	4611      	mov	r1, r2
 801021c:	602b      	str	r3, [r5, #0]
 801021e:	f7f3 fee8 	bl	8003ff2 <_fstat>
 8010222:	1c43      	adds	r3, r0, #1
 8010224:	d102      	bne.n	801022c <_fstat_r+0x1c>
 8010226:	682b      	ldr	r3, [r5, #0]
 8010228:	b103      	cbz	r3, 801022c <_fstat_r+0x1c>
 801022a:	6023      	str	r3, [r4, #0]
 801022c:	bd38      	pop	{r3, r4, r5, pc}
 801022e:	bf00      	nop
 8010230:	2000388c 	.word	0x2000388c

08010234 <_isatty_r>:
 8010234:	b538      	push	{r3, r4, r5, lr}
 8010236:	2300      	movs	r3, #0
 8010238:	4d05      	ldr	r5, [pc, #20]	; (8010250 <_isatty_r+0x1c>)
 801023a:	4604      	mov	r4, r0
 801023c:	4608      	mov	r0, r1
 801023e:	602b      	str	r3, [r5, #0]
 8010240:	f7f3 fee6 	bl	8004010 <_isatty>
 8010244:	1c43      	adds	r3, r0, #1
 8010246:	d102      	bne.n	801024e <_isatty_r+0x1a>
 8010248:	682b      	ldr	r3, [r5, #0]
 801024a:	b103      	cbz	r3, 801024e <_isatty_r+0x1a>
 801024c:	6023      	str	r3, [r4, #0]
 801024e:	bd38      	pop	{r3, r4, r5, pc}
 8010250:	2000388c 	.word	0x2000388c

08010254 <_lseek_r>:
 8010254:	b538      	push	{r3, r4, r5, lr}
 8010256:	4604      	mov	r4, r0
 8010258:	4608      	mov	r0, r1
 801025a:	4611      	mov	r1, r2
 801025c:	2200      	movs	r2, #0
 801025e:	4d05      	ldr	r5, [pc, #20]	; (8010274 <_lseek_r+0x20>)
 8010260:	602a      	str	r2, [r5, #0]
 8010262:	461a      	mov	r2, r3
 8010264:	f7f3 fede 	bl	8004024 <_lseek>
 8010268:	1c43      	adds	r3, r0, #1
 801026a:	d102      	bne.n	8010272 <_lseek_r+0x1e>
 801026c:	682b      	ldr	r3, [r5, #0]
 801026e:	b103      	cbz	r3, 8010272 <_lseek_r+0x1e>
 8010270:	6023      	str	r3, [r4, #0]
 8010272:	bd38      	pop	{r3, r4, r5, pc}
 8010274:	2000388c 	.word	0x2000388c

08010278 <__ascii_mbtowc>:
 8010278:	b082      	sub	sp, #8
 801027a:	b901      	cbnz	r1, 801027e <__ascii_mbtowc+0x6>
 801027c:	a901      	add	r1, sp, #4
 801027e:	b142      	cbz	r2, 8010292 <__ascii_mbtowc+0x1a>
 8010280:	b14b      	cbz	r3, 8010296 <__ascii_mbtowc+0x1e>
 8010282:	7813      	ldrb	r3, [r2, #0]
 8010284:	600b      	str	r3, [r1, #0]
 8010286:	7812      	ldrb	r2, [r2, #0]
 8010288:	1e10      	subs	r0, r2, #0
 801028a:	bf18      	it	ne
 801028c:	2001      	movne	r0, #1
 801028e:	b002      	add	sp, #8
 8010290:	4770      	bx	lr
 8010292:	4610      	mov	r0, r2
 8010294:	e7fb      	b.n	801028e <__ascii_mbtowc+0x16>
 8010296:	f06f 0001 	mvn.w	r0, #1
 801029a:	e7f8      	b.n	801028e <__ascii_mbtowc+0x16>

0801029c <__malloc_lock>:
 801029c:	4801      	ldr	r0, [pc, #4]	; (80102a4 <__malloc_lock+0x8>)
 801029e:	f7ff b8ae 	b.w	800f3fe <__retarget_lock_acquire_recursive>
 80102a2:	bf00      	nop
 80102a4:	20003884 	.word	0x20003884

080102a8 <__malloc_unlock>:
 80102a8:	4801      	ldr	r0, [pc, #4]	; (80102b0 <__malloc_unlock+0x8>)
 80102aa:	f7ff b8a9 	b.w	800f400 <__retarget_lock_release_recursive>
 80102ae:	bf00      	nop
 80102b0:	20003884 	.word	0x20003884

080102b4 <_malloc_usable_size_r>:
 80102b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102b8:	1f18      	subs	r0, r3, #4
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	bfbc      	itt	lt
 80102be:	580b      	ldrlt	r3, [r1, r0]
 80102c0:	18c0      	addlt	r0, r0, r3
 80102c2:	4770      	bx	lr

080102c4 <_read_r>:
 80102c4:	b538      	push	{r3, r4, r5, lr}
 80102c6:	4604      	mov	r4, r0
 80102c8:	4608      	mov	r0, r1
 80102ca:	4611      	mov	r1, r2
 80102cc:	2200      	movs	r2, #0
 80102ce:	4d05      	ldr	r5, [pc, #20]	; (80102e4 <_read_r+0x20>)
 80102d0:	602a      	str	r2, [r5, #0]
 80102d2:	461a      	mov	r2, r3
 80102d4:	f7f3 fe49 	bl	8003f6a <_read>
 80102d8:	1c43      	adds	r3, r0, #1
 80102da:	d102      	bne.n	80102e2 <_read_r+0x1e>
 80102dc:	682b      	ldr	r3, [r5, #0]
 80102de:	b103      	cbz	r3, 80102e2 <_read_r+0x1e>
 80102e0:	6023      	str	r3, [r4, #0]
 80102e2:	bd38      	pop	{r3, r4, r5, pc}
 80102e4:	2000388c 	.word	0x2000388c

080102e8 <__ascii_wctomb>:
 80102e8:	4603      	mov	r3, r0
 80102ea:	4608      	mov	r0, r1
 80102ec:	b141      	cbz	r1, 8010300 <__ascii_wctomb+0x18>
 80102ee:	2aff      	cmp	r2, #255	; 0xff
 80102f0:	d904      	bls.n	80102fc <__ascii_wctomb+0x14>
 80102f2:	228a      	movs	r2, #138	; 0x8a
 80102f4:	f04f 30ff 	mov.w	r0, #4294967295
 80102f8:	601a      	str	r2, [r3, #0]
 80102fa:	4770      	bx	lr
 80102fc:	2001      	movs	r0, #1
 80102fe:	700a      	strb	r2, [r1, #0]
 8010300:	4770      	bx	lr
	...

08010304 <pow>:
 8010304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010308:	461f      	mov	r7, r3
 801030a:	4680      	mov	r8, r0
 801030c:	4689      	mov	r9, r1
 801030e:	4616      	mov	r6, r2
 8010310:	f000 f8a6 	bl	8010460 <__ieee754_pow>
 8010314:	4b4d      	ldr	r3, [pc, #308]	; (801044c <pow+0x148>)
 8010316:	4604      	mov	r4, r0
 8010318:	f993 3000 	ldrsb.w	r3, [r3]
 801031c:	460d      	mov	r5, r1
 801031e:	3301      	adds	r3, #1
 8010320:	d015      	beq.n	801034e <pow+0x4a>
 8010322:	4632      	mov	r2, r6
 8010324:	463b      	mov	r3, r7
 8010326:	4630      	mov	r0, r6
 8010328:	4639      	mov	r1, r7
 801032a:	f7f0 fbe9 	bl	8000b00 <__aeabi_dcmpun>
 801032e:	b970      	cbnz	r0, 801034e <pow+0x4a>
 8010330:	4642      	mov	r2, r8
 8010332:	464b      	mov	r3, r9
 8010334:	4640      	mov	r0, r8
 8010336:	4649      	mov	r1, r9
 8010338:	f7f0 fbe2 	bl	8000b00 <__aeabi_dcmpun>
 801033c:	2200      	movs	r2, #0
 801033e:	2300      	movs	r3, #0
 8010340:	b148      	cbz	r0, 8010356 <pow+0x52>
 8010342:	4630      	mov	r0, r6
 8010344:	4639      	mov	r1, r7
 8010346:	f7f0 fba9 	bl	8000a9c <__aeabi_dcmpeq>
 801034a:	2800      	cmp	r0, #0
 801034c:	d17b      	bne.n	8010446 <pow+0x142>
 801034e:	4620      	mov	r0, r4
 8010350:	4629      	mov	r1, r5
 8010352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010356:	4640      	mov	r0, r8
 8010358:	4649      	mov	r1, r9
 801035a:	f7f0 fb9f 	bl	8000a9c <__aeabi_dcmpeq>
 801035e:	b1e0      	cbz	r0, 801039a <pow+0x96>
 8010360:	2200      	movs	r2, #0
 8010362:	2300      	movs	r3, #0
 8010364:	4630      	mov	r0, r6
 8010366:	4639      	mov	r1, r7
 8010368:	f7f0 fb98 	bl	8000a9c <__aeabi_dcmpeq>
 801036c:	2800      	cmp	r0, #0
 801036e:	d16a      	bne.n	8010446 <pow+0x142>
 8010370:	4630      	mov	r0, r6
 8010372:	4639      	mov	r1, r7
 8010374:	f000 fe39 	bl	8010fea <finite>
 8010378:	2800      	cmp	r0, #0
 801037a:	d0e8      	beq.n	801034e <pow+0x4a>
 801037c:	2200      	movs	r2, #0
 801037e:	2300      	movs	r3, #0
 8010380:	4630      	mov	r0, r6
 8010382:	4639      	mov	r1, r7
 8010384:	f7f0 fb94 	bl	8000ab0 <__aeabi_dcmplt>
 8010388:	2800      	cmp	r0, #0
 801038a:	d0e0      	beq.n	801034e <pow+0x4a>
 801038c:	f7fd f8cc 	bl	800d528 <__errno>
 8010390:	2321      	movs	r3, #33	; 0x21
 8010392:	2400      	movs	r4, #0
 8010394:	6003      	str	r3, [r0, #0]
 8010396:	4d2e      	ldr	r5, [pc, #184]	; (8010450 <pow+0x14c>)
 8010398:	e7d9      	b.n	801034e <pow+0x4a>
 801039a:	4620      	mov	r0, r4
 801039c:	4629      	mov	r1, r5
 801039e:	f000 fe24 	bl	8010fea <finite>
 80103a2:	bba8      	cbnz	r0, 8010410 <pow+0x10c>
 80103a4:	4640      	mov	r0, r8
 80103a6:	4649      	mov	r1, r9
 80103a8:	f000 fe1f 	bl	8010fea <finite>
 80103ac:	b380      	cbz	r0, 8010410 <pow+0x10c>
 80103ae:	4630      	mov	r0, r6
 80103b0:	4639      	mov	r1, r7
 80103b2:	f000 fe1a 	bl	8010fea <finite>
 80103b6:	b358      	cbz	r0, 8010410 <pow+0x10c>
 80103b8:	4622      	mov	r2, r4
 80103ba:	462b      	mov	r3, r5
 80103bc:	4620      	mov	r0, r4
 80103be:	4629      	mov	r1, r5
 80103c0:	f7f0 fb9e 	bl	8000b00 <__aeabi_dcmpun>
 80103c4:	b160      	cbz	r0, 80103e0 <pow+0xdc>
 80103c6:	f7fd f8af 	bl	800d528 <__errno>
 80103ca:	2321      	movs	r3, #33	; 0x21
 80103cc:	2200      	movs	r2, #0
 80103ce:	6003      	str	r3, [r0, #0]
 80103d0:	2300      	movs	r3, #0
 80103d2:	4610      	mov	r0, r2
 80103d4:	4619      	mov	r1, r3
 80103d6:	f7f0 fa23 	bl	8000820 <__aeabi_ddiv>
 80103da:	4604      	mov	r4, r0
 80103dc:	460d      	mov	r5, r1
 80103de:	e7b6      	b.n	801034e <pow+0x4a>
 80103e0:	f7fd f8a2 	bl	800d528 <__errno>
 80103e4:	2322      	movs	r3, #34	; 0x22
 80103e6:	2200      	movs	r2, #0
 80103e8:	6003      	str	r3, [r0, #0]
 80103ea:	4649      	mov	r1, r9
 80103ec:	2300      	movs	r3, #0
 80103ee:	4640      	mov	r0, r8
 80103f0:	f7f0 fb5e 	bl	8000ab0 <__aeabi_dcmplt>
 80103f4:	2400      	movs	r4, #0
 80103f6:	b148      	cbz	r0, 801040c <pow+0x108>
 80103f8:	4630      	mov	r0, r6
 80103fa:	4639      	mov	r1, r7
 80103fc:	f000 fe02 	bl	8011004 <rint>
 8010400:	4632      	mov	r2, r6
 8010402:	463b      	mov	r3, r7
 8010404:	f7f0 fb4a 	bl	8000a9c <__aeabi_dcmpeq>
 8010408:	2800      	cmp	r0, #0
 801040a:	d0c4      	beq.n	8010396 <pow+0x92>
 801040c:	4d11      	ldr	r5, [pc, #68]	; (8010454 <pow+0x150>)
 801040e:	e79e      	b.n	801034e <pow+0x4a>
 8010410:	2200      	movs	r2, #0
 8010412:	2300      	movs	r3, #0
 8010414:	4620      	mov	r0, r4
 8010416:	4629      	mov	r1, r5
 8010418:	f7f0 fb40 	bl	8000a9c <__aeabi_dcmpeq>
 801041c:	2800      	cmp	r0, #0
 801041e:	d096      	beq.n	801034e <pow+0x4a>
 8010420:	4640      	mov	r0, r8
 8010422:	4649      	mov	r1, r9
 8010424:	f000 fde1 	bl	8010fea <finite>
 8010428:	2800      	cmp	r0, #0
 801042a:	d090      	beq.n	801034e <pow+0x4a>
 801042c:	4630      	mov	r0, r6
 801042e:	4639      	mov	r1, r7
 8010430:	f000 fddb 	bl	8010fea <finite>
 8010434:	2800      	cmp	r0, #0
 8010436:	d08a      	beq.n	801034e <pow+0x4a>
 8010438:	f7fd f876 	bl	800d528 <__errno>
 801043c:	2322      	movs	r3, #34	; 0x22
 801043e:	2400      	movs	r4, #0
 8010440:	2500      	movs	r5, #0
 8010442:	6003      	str	r3, [r0, #0]
 8010444:	e783      	b.n	801034e <pow+0x4a>
 8010446:	2400      	movs	r4, #0
 8010448:	4d03      	ldr	r5, [pc, #12]	; (8010458 <pow+0x154>)
 801044a:	e780      	b.n	801034e <pow+0x4a>
 801044c:	20000328 	.word	0x20000328
 8010450:	fff00000 	.word	0xfff00000
 8010454:	7ff00000 	.word	0x7ff00000
 8010458:	3ff00000 	.word	0x3ff00000
 801045c:	00000000 	.word	0x00000000

08010460 <__ieee754_pow>:
 8010460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010464:	b093      	sub	sp, #76	; 0x4c
 8010466:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801046a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 801046e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8010472:	ea55 0302 	orrs.w	r3, r5, r2
 8010476:	4607      	mov	r7, r0
 8010478:	4688      	mov	r8, r1
 801047a:	f000 84bf 	beq.w	8010dfc <__ieee754_pow+0x99c>
 801047e:	4b7e      	ldr	r3, [pc, #504]	; (8010678 <__ieee754_pow+0x218>)
 8010480:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8010484:	429c      	cmp	r4, r3
 8010486:	4689      	mov	r9, r1
 8010488:	4682      	mov	sl, r0
 801048a:	dc09      	bgt.n	80104a0 <__ieee754_pow+0x40>
 801048c:	d103      	bne.n	8010496 <__ieee754_pow+0x36>
 801048e:	b978      	cbnz	r0, 80104b0 <__ieee754_pow+0x50>
 8010490:	42a5      	cmp	r5, r4
 8010492:	dd02      	ble.n	801049a <__ieee754_pow+0x3a>
 8010494:	e00c      	b.n	80104b0 <__ieee754_pow+0x50>
 8010496:	429d      	cmp	r5, r3
 8010498:	dc02      	bgt.n	80104a0 <__ieee754_pow+0x40>
 801049a:	429d      	cmp	r5, r3
 801049c:	d10e      	bne.n	80104bc <__ieee754_pow+0x5c>
 801049e:	b16a      	cbz	r2, 80104bc <__ieee754_pow+0x5c>
 80104a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80104a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80104a8:	ea54 030a 	orrs.w	r3, r4, sl
 80104ac:	f000 84a6 	beq.w	8010dfc <__ieee754_pow+0x99c>
 80104b0:	4872      	ldr	r0, [pc, #456]	; (801067c <__ieee754_pow+0x21c>)
 80104b2:	b013      	add	sp, #76	; 0x4c
 80104b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b8:	f000 bd9e 	b.w	8010ff8 <nan>
 80104bc:	f1b9 0f00 	cmp.w	r9, #0
 80104c0:	da39      	bge.n	8010536 <__ieee754_pow+0xd6>
 80104c2:	4b6f      	ldr	r3, [pc, #444]	; (8010680 <__ieee754_pow+0x220>)
 80104c4:	429d      	cmp	r5, r3
 80104c6:	dc54      	bgt.n	8010572 <__ieee754_pow+0x112>
 80104c8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80104cc:	429d      	cmp	r5, r3
 80104ce:	f340 84a6 	ble.w	8010e1e <__ieee754_pow+0x9be>
 80104d2:	152b      	asrs	r3, r5, #20
 80104d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80104d8:	2b14      	cmp	r3, #20
 80104da:	dd0f      	ble.n	80104fc <__ieee754_pow+0x9c>
 80104dc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80104e0:	fa22 f103 	lsr.w	r1, r2, r3
 80104e4:	fa01 f303 	lsl.w	r3, r1, r3
 80104e8:	4293      	cmp	r3, r2
 80104ea:	f040 8498 	bne.w	8010e1e <__ieee754_pow+0x9be>
 80104ee:	f001 0101 	and.w	r1, r1, #1
 80104f2:	f1c1 0302 	rsb	r3, r1, #2
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	b182      	cbz	r2, 801051c <__ieee754_pow+0xbc>
 80104fa:	e05e      	b.n	80105ba <__ieee754_pow+0x15a>
 80104fc:	2a00      	cmp	r2, #0
 80104fe:	d15a      	bne.n	80105b6 <__ieee754_pow+0x156>
 8010500:	f1c3 0314 	rsb	r3, r3, #20
 8010504:	fa45 f103 	asr.w	r1, r5, r3
 8010508:	fa01 f303 	lsl.w	r3, r1, r3
 801050c:	42ab      	cmp	r3, r5
 801050e:	f040 8483 	bne.w	8010e18 <__ieee754_pow+0x9b8>
 8010512:	f001 0101 	and.w	r1, r1, #1
 8010516:	f1c1 0302 	rsb	r3, r1, #2
 801051a:	9300      	str	r3, [sp, #0]
 801051c:	4b59      	ldr	r3, [pc, #356]	; (8010684 <__ieee754_pow+0x224>)
 801051e:	429d      	cmp	r5, r3
 8010520:	d130      	bne.n	8010584 <__ieee754_pow+0x124>
 8010522:	2e00      	cmp	r6, #0
 8010524:	f280 8474 	bge.w	8010e10 <__ieee754_pow+0x9b0>
 8010528:	463a      	mov	r2, r7
 801052a:	4643      	mov	r3, r8
 801052c:	2000      	movs	r0, #0
 801052e:	4955      	ldr	r1, [pc, #340]	; (8010684 <__ieee754_pow+0x224>)
 8010530:	f7f0 f976 	bl	8000820 <__aeabi_ddiv>
 8010534:	e02f      	b.n	8010596 <__ieee754_pow+0x136>
 8010536:	2300      	movs	r3, #0
 8010538:	9300      	str	r3, [sp, #0]
 801053a:	2a00      	cmp	r2, #0
 801053c:	d13d      	bne.n	80105ba <__ieee754_pow+0x15a>
 801053e:	4b4e      	ldr	r3, [pc, #312]	; (8010678 <__ieee754_pow+0x218>)
 8010540:	429d      	cmp	r5, r3
 8010542:	d1eb      	bne.n	801051c <__ieee754_pow+0xbc>
 8010544:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010548:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801054c:	ea53 030a 	orrs.w	r3, r3, sl
 8010550:	f000 8454 	beq.w	8010dfc <__ieee754_pow+0x99c>
 8010554:	4b4c      	ldr	r3, [pc, #304]	; (8010688 <__ieee754_pow+0x228>)
 8010556:	429c      	cmp	r4, r3
 8010558:	dd0d      	ble.n	8010576 <__ieee754_pow+0x116>
 801055a:	2e00      	cmp	r6, #0
 801055c:	f280 8454 	bge.w	8010e08 <__ieee754_pow+0x9a8>
 8010560:	f04f 0b00 	mov.w	fp, #0
 8010564:	f04f 0c00 	mov.w	ip, #0
 8010568:	4658      	mov	r0, fp
 801056a:	4661      	mov	r1, ip
 801056c:	b013      	add	sp, #76	; 0x4c
 801056e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010572:	2302      	movs	r3, #2
 8010574:	e7e0      	b.n	8010538 <__ieee754_pow+0xd8>
 8010576:	2e00      	cmp	r6, #0
 8010578:	daf2      	bge.n	8010560 <__ieee754_pow+0x100>
 801057a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801057e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8010582:	e7f1      	b.n	8010568 <__ieee754_pow+0x108>
 8010584:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8010588:	d108      	bne.n	801059c <__ieee754_pow+0x13c>
 801058a:	463a      	mov	r2, r7
 801058c:	4643      	mov	r3, r8
 801058e:	4638      	mov	r0, r7
 8010590:	4641      	mov	r1, r8
 8010592:	f7f0 f81b 	bl	80005cc <__aeabi_dmul>
 8010596:	4683      	mov	fp, r0
 8010598:	468c      	mov	ip, r1
 801059a:	e7e5      	b.n	8010568 <__ieee754_pow+0x108>
 801059c:	4b3b      	ldr	r3, [pc, #236]	; (801068c <__ieee754_pow+0x22c>)
 801059e:	429e      	cmp	r6, r3
 80105a0:	d10b      	bne.n	80105ba <__ieee754_pow+0x15a>
 80105a2:	f1b9 0f00 	cmp.w	r9, #0
 80105a6:	db08      	blt.n	80105ba <__ieee754_pow+0x15a>
 80105a8:	4638      	mov	r0, r7
 80105aa:	4641      	mov	r1, r8
 80105ac:	b013      	add	sp, #76	; 0x4c
 80105ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b2:	f000 bc6b 	b.w	8010e8c <__ieee754_sqrt>
 80105b6:	2300      	movs	r3, #0
 80105b8:	9300      	str	r3, [sp, #0]
 80105ba:	4638      	mov	r0, r7
 80105bc:	4641      	mov	r1, r8
 80105be:	f000 fd11 	bl	8010fe4 <fabs>
 80105c2:	4683      	mov	fp, r0
 80105c4:	468c      	mov	ip, r1
 80105c6:	f1ba 0f00 	cmp.w	sl, #0
 80105ca:	d129      	bne.n	8010620 <__ieee754_pow+0x1c0>
 80105cc:	b124      	cbz	r4, 80105d8 <__ieee754_pow+0x178>
 80105ce:	4b2d      	ldr	r3, [pc, #180]	; (8010684 <__ieee754_pow+0x224>)
 80105d0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d123      	bne.n	8010620 <__ieee754_pow+0x1c0>
 80105d8:	2e00      	cmp	r6, #0
 80105da:	da07      	bge.n	80105ec <__ieee754_pow+0x18c>
 80105dc:	465a      	mov	r2, fp
 80105de:	4663      	mov	r3, ip
 80105e0:	2000      	movs	r0, #0
 80105e2:	4928      	ldr	r1, [pc, #160]	; (8010684 <__ieee754_pow+0x224>)
 80105e4:	f7f0 f91c 	bl	8000820 <__aeabi_ddiv>
 80105e8:	4683      	mov	fp, r0
 80105ea:	468c      	mov	ip, r1
 80105ec:	f1b9 0f00 	cmp.w	r9, #0
 80105f0:	daba      	bge.n	8010568 <__ieee754_pow+0x108>
 80105f2:	9b00      	ldr	r3, [sp, #0]
 80105f4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80105f8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80105fc:	4323      	orrs	r3, r4
 80105fe:	d108      	bne.n	8010612 <__ieee754_pow+0x1b2>
 8010600:	465a      	mov	r2, fp
 8010602:	4663      	mov	r3, ip
 8010604:	4658      	mov	r0, fp
 8010606:	4661      	mov	r1, ip
 8010608:	f7ef fe28 	bl	800025c <__aeabi_dsub>
 801060c:	4602      	mov	r2, r0
 801060e:	460b      	mov	r3, r1
 8010610:	e78e      	b.n	8010530 <__ieee754_pow+0xd0>
 8010612:	9b00      	ldr	r3, [sp, #0]
 8010614:	2b01      	cmp	r3, #1
 8010616:	d1a7      	bne.n	8010568 <__ieee754_pow+0x108>
 8010618:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 801061c:	469c      	mov	ip, r3
 801061e:	e7a3      	b.n	8010568 <__ieee754_pow+0x108>
 8010620:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8010624:	3b01      	subs	r3, #1
 8010626:	930c      	str	r3, [sp, #48]	; 0x30
 8010628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801062a:	9b00      	ldr	r3, [sp, #0]
 801062c:	4313      	orrs	r3, r2
 801062e:	d104      	bne.n	801063a <__ieee754_pow+0x1da>
 8010630:	463a      	mov	r2, r7
 8010632:	4643      	mov	r3, r8
 8010634:	4638      	mov	r0, r7
 8010636:	4641      	mov	r1, r8
 8010638:	e7e6      	b.n	8010608 <__ieee754_pow+0x1a8>
 801063a:	4b15      	ldr	r3, [pc, #84]	; (8010690 <__ieee754_pow+0x230>)
 801063c:	429d      	cmp	r5, r3
 801063e:	f340 80f9 	ble.w	8010834 <__ieee754_pow+0x3d4>
 8010642:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010646:	429d      	cmp	r5, r3
 8010648:	4b0f      	ldr	r3, [pc, #60]	; (8010688 <__ieee754_pow+0x228>)
 801064a:	dd09      	ble.n	8010660 <__ieee754_pow+0x200>
 801064c:	429c      	cmp	r4, r3
 801064e:	dc0c      	bgt.n	801066a <__ieee754_pow+0x20a>
 8010650:	2e00      	cmp	r6, #0
 8010652:	da85      	bge.n	8010560 <__ieee754_pow+0x100>
 8010654:	a306      	add	r3, pc, #24	; (adr r3, 8010670 <__ieee754_pow+0x210>)
 8010656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065a:	4610      	mov	r0, r2
 801065c:	4619      	mov	r1, r3
 801065e:	e798      	b.n	8010592 <__ieee754_pow+0x132>
 8010660:	429c      	cmp	r4, r3
 8010662:	dbf5      	blt.n	8010650 <__ieee754_pow+0x1f0>
 8010664:	4b07      	ldr	r3, [pc, #28]	; (8010684 <__ieee754_pow+0x224>)
 8010666:	429c      	cmp	r4, r3
 8010668:	dd14      	ble.n	8010694 <__ieee754_pow+0x234>
 801066a:	2e00      	cmp	r6, #0
 801066c:	dcf2      	bgt.n	8010654 <__ieee754_pow+0x1f4>
 801066e:	e777      	b.n	8010560 <__ieee754_pow+0x100>
 8010670:	8800759c 	.word	0x8800759c
 8010674:	7e37e43c 	.word	0x7e37e43c
 8010678:	7ff00000 	.word	0x7ff00000
 801067c:	08012220 	.word	0x08012220
 8010680:	433fffff 	.word	0x433fffff
 8010684:	3ff00000 	.word	0x3ff00000
 8010688:	3fefffff 	.word	0x3fefffff
 801068c:	3fe00000 	.word	0x3fe00000
 8010690:	41e00000 	.word	0x41e00000
 8010694:	4661      	mov	r1, ip
 8010696:	2200      	movs	r2, #0
 8010698:	4658      	mov	r0, fp
 801069a:	4b61      	ldr	r3, [pc, #388]	; (8010820 <__ieee754_pow+0x3c0>)
 801069c:	f7ef fdde 	bl	800025c <__aeabi_dsub>
 80106a0:	a355      	add	r3, pc, #340	; (adr r3, 80107f8 <__ieee754_pow+0x398>)
 80106a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a6:	4604      	mov	r4, r0
 80106a8:	460d      	mov	r5, r1
 80106aa:	f7ef ff8f 	bl	80005cc <__aeabi_dmul>
 80106ae:	a354      	add	r3, pc, #336	; (adr r3, 8010800 <__ieee754_pow+0x3a0>)
 80106b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b4:	4606      	mov	r6, r0
 80106b6:	460f      	mov	r7, r1
 80106b8:	4620      	mov	r0, r4
 80106ba:	4629      	mov	r1, r5
 80106bc:	f7ef ff86 	bl	80005cc <__aeabi_dmul>
 80106c0:	2200      	movs	r2, #0
 80106c2:	4682      	mov	sl, r0
 80106c4:	468b      	mov	fp, r1
 80106c6:	4620      	mov	r0, r4
 80106c8:	4629      	mov	r1, r5
 80106ca:	4b56      	ldr	r3, [pc, #344]	; (8010824 <__ieee754_pow+0x3c4>)
 80106cc:	f7ef ff7e 	bl	80005cc <__aeabi_dmul>
 80106d0:	4602      	mov	r2, r0
 80106d2:	460b      	mov	r3, r1
 80106d4:	a14c      	add	r1, pc, #304	; (adr r1, 8010808 <__ieee754_pow+0x3a8>)
 80106d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106da:	f7ef fdbf 	bl	800025c <__aeabi_dsub>
 80106de:	4622      	mov	r2, r4
 80106e0:	462b      	mov	r3, r5
 80106e2:	f7ef ff73 	bl	80005cc <__aeabi_dmul>
 80106e6:	4602      	mov	r2, r0
 80106e8:	460b      	mov	r3, r1
 80106ea:	2000      	movs	r0, #0
 80106ec:	494e      	ldr	r1, [pc, #312]	; (8010828 <__ieee754_pow+0x3c8>)
 80106ee:	f7ef fdb5 	bl	800025c <__aeabi_dsub>
 80106f2:	4622      	mov	r2, r4
 80106f4:	462b      	mov	r3, r5
 80106f6:	4680      	mov	r8, r0
 80106f8:	4689      	mov	r9, r1
 80106fa:	4620      	mov	r0, r4
 80106fc:	4629      	mov	r1, r5
 80106fe:	f7ef ff65 	bl	80005cc <__aeabi_dmul>
 8010702:	4602      	mov	r2, r0
 8010704:	460b      	mov	r3, r1
 8010706:	4640      	mov	r0, r8
 8010708:	4649      	mov	r1, r9
 801070a:	f7ef ff5f 	bl	80005cc <__aeabi_dmul>
 801070e:	a340      	add	r3, pc, #256	; (adr r3, 8010810 <__ieee754_pow+0x3b0>)
 8010710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010714:	f7ef ff5a 	bl	80005cc <__aeabi_dmul>
 8010718:	4602      	mov	r2, r0
 801071a:	460b      	mov	r3, r1
 801071c:	4650      	mov	r0, sl
 801071e:	4659      	mov	r1, fp
 8010720:	f7ef fd9c 	bl	800025c <__aeabi_dsub>
 8010724:	f04f 0a00 	mov.w	sl, #0
 8010728:	4602      	mov	r2, r0
 801072a:	460b      	mov	r3, r1
 801072c:	4604      	mov	r4, r0
 801072e:	460d      	mov	r5, r1
 8010730:	4630      	mov	r0, r6
 8010732:	4639      	mov	r1, r7
 8010734:	f7ef fd94 	bl	8000260 <__adddf3>
 8010738:	4632      	mov	r2, r6
 801073a:	463b      	mov	r3, r7
 801073c:	4650      	mov	r0, sl
 801073e:	468b      	mov	fp, r1
 8010740:	f7ef fd8c 	bl	800025c <__aeabi_dsub>
 8010744:	4602      	mov	r2, r0
 8010746:	460b      	mov	r3, r1
 8010748:	4620      	mov	r0, r4
 801074a:	4629      	mov	r1, r5
 801074c:	f7ef fd86 	bl	800025c <__aeabi_dsub>
 8010750:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010754:	9b00      	ldr	r3, [sp, #0]
 8010756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010758:	3b01      	subs	r3, #1
 801075a:	4313      	orrs	r3, r2
 801075c:	f04f 0600 	mov.w	r6, #0
 8010760:	f04f 0200 	mov.w	r2, #0
 8010764:	bf0c      	ite	eq
 8010766:	4b31      	ldreq	r3, [pc, #196]	; (801082c <__ieee754_pow+0x3cc>)
 8010768:	4b2d      	ldrne	r3, [pc, #180]	; (8010820 <__ieee754_pow+0x3c0>)
 801076a:	4604      	mov	r4, r0
 801076c:	460d      	mov	r5, r1
 801076e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010772:	e9cd 2300 	strd	r2, r3, [sp]
 8010776:	4632      	mov	r2, r6
 8010778:	463b      	mov	r3, r7
 801077a:	f7ef fd6f 	bl	800025c <__aeabi_dsub>
 801077e:	4652      	mov	r2, sl
 8010780:	465b      	mov	r3, fp
 8010782:	f7ef ff23 	bl	80005cc <__aeabi_dmul>
 8010786:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801078a:	4680      	mov	r8, r0
 801078c:	4689      	mov	r9, r1
 801078e:	4620      	mov	r0, r4
 8010790:	4629      	mov	r1, r5
 8010792:	f7ef ff1b 	bl	80005cc <__aeabi_dmul>
 8010796:	4602      	mov	r2, r0
 8010798:	460b      	mov	r3, r1
 801079a:	4640      	mov	r0, r8
 801079c:	4649      	mov	r1, r9
 801079e:	f7ef fd5f 	bl	8000260 <__adddf3>
 80107a2:	4632      	mov	r2, r6
 80107a4:	463b      	mov	r3, r7
 80107a6:	4680      	mov	r8, r0
 80107a8:	4689      	mov	r9, r1
 80107aa:	4650      	mov	r0, sl
 80107ac:	4659      	mov	r1, fp
 80107ae:	f7ef ff0d 	bl	80005cc <__aeabi_dmul>
 80107b2:	4604      	mov	r4, r0
 80107b4:	460d      	mov	r5, r1
 80107b6:	460b      	mov	r3, r1
 80107b8:	4602      	mov	r2, r0
 80107ba:	4649      	mov	r1, r9
 80107bc:	4640      	mov	r0, r8
 80107be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80107c2:	f7ef fd4d 	bl	8000260 <__adddf3>
 80107c6:	4b1a      	ldr	r3, [pc, #104]	; (8010830 <__ieee754_pow+0x3d0>)
 80107c8:	4682      	mov	sl, r0
 80107ca:	4299      	cmp	r1, r3
 80107cc:	460f      	mov	r7, r1
 80107ce:	460e      	mov	r6, r1
 80107d0:	f340 82ed 	ble.w	8010dae <__ieee754_pow+0x94e>
 80107d4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80107d8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80107dc:	4303      	orrs	r3, r0
 80107de:	f000 81e7 	beq.w	8010bb0 <__ieee754_pow+0x750>
 80107e2:	a30d      	add	r3, pc, #52	; (adr r3, 8010818 <__ieee754_pow+0x3b8>)
 80107e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107ec:	f7ef feee 	bl	80005cc <__aeabi_dmul>
 80107f0:	a309      	add	r3, pc, #36	; (adr r3, 8010818 <__ieee754_pow+0x3b8>)
 80107f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f6:	e6cc      	b.n	8010592 <__ieee754_pow+0x132>
 80107f8:	60000000 	.word	0x60000000
 80107fc:	3ff71547 	.word	0x3ff71547
 8010800:	f85ddf44 	.word	0xf85ddf44
 8010804:	3e54ae0b 	.word	0x3e54ae0b
 8010808:	55555555 	.word	0x55555555
 801080c:	3fd55555 	.word	0x3fd55555
 8010810:	652b82fe 	.word	0x652b82fe
 8010814:	3ff71547 	.word	0x3ff71547
 8010818:	8800759c 	.word	0x8800759c
 801081c:	7e37e43c 	.word	0x7e37e43c
 8010820:	3ff00000 	.word	0x3ff00000
 8010824:	3fd00000 	.word	0x3fd00000
 8010828:	3fe00000 	.word	0x3fe00000
 801082c:	bff00000 	.word	0xbff00000
 8010830:	408fffff 	.word	0x408fffff
 8010834:	4bd4      	ldr	r3, [pc, #848]	; (8010b88 <__ieee754_pow+0x728>)
 8010836:	2200      	movs	r2, #0
 8010838:	ea09 0303 	and.w	r3, r9, r3
 801083c:	b943      	cbnz	r3, 8010850 <__ieee754_pow+0x3f0>
 801083e:	4658      	mov	r0, fp
 8010840:	4661      	mov	r1, ip
 8010842:	4bd2      	ldr	r3, [pc, #840]	; (8010b8c <__ieee754_pow+0x72c>)
 8010844:	f7ef fec2 	bl	80005cc <__aeabi_dmul>
 8010848:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801084c:	4683      	mov	fp, r0
 801084e:	460c      	mov	r4, r1
 8010850:	1523      	asrs	r3, r4, #20
 8010852:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010856:	4413      	add	r3, r2
 8010858:	930b      	str	r3, [sp, #44]	; 0x2c
 801085a:	4bcd      	ldr	r3, [pc, #820]	; (8010b90 <__ieee754_pow+0x730>)
 801085c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010860:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010864:	429c      	cmp	r4, r3
 8010866:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801086a:	dd08      	ble.n	801087e <__ieee754_pow+0x41e>
 801086c:	4bc9      	ldr	r3, [pc, #804]	; (8010b94 <__ieee754_pow+0x734>)
 801086e:	429c      	cmp	r4, r3
 8010870:	f340 819c 	ble.w	8010bac <__ieee754_pow+0x74c>
 8010874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010876:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801087a:	3301      	adds	r3, #1
 801087c:	930b      	str	r3, [sp, #44]	; 0x2c
 801087e:	2600      	movs	r6, #0
 8010880:	00f3      	lsls	r3, r6, #3
 8010882:	930d      	str	r3, [sp, #52]	; 0x34
 8010884:	4bc4      	ldr	r3, [pc, #784]	; (8010b98 <__ieee754_pow+0x738>)
 8010886:	4658      	mov	r0, fp
 8010888:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801088c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010890:	4629      	mov	r1, r5
 8010892:	461a      	mov	r2, r3
 8010894:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8010898:	4623      	mov	r3, r4
 801089a:	f7ef fcdf 	bl	800025c <__aeabi_dsub>
 801089e:	46da      	mov	sl, fp
 80108a0:	462b      	mov	r3, r5
 80108a2:	4652      	mov	r2, sl
 80108a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80108a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80108ac:	f7ef fcd8 	bl	8000260 <__adddf3>
 80108b0:	4602      	mov	r2, r0
 80108b2:	460b      	mov	r3, r1
 80108b4:	2000      	movs	r0, #0
 80108b6:	49b9      	ldr	r1, [pc, #740]	; (8010b9c <__ieee754_pow+0x73c>)
 80108b8:	f7ef ffb2 	bl	8000820 <__aeabi_ddiv>
 80108bc:	4602      	mov	r2, r0
 80108be:	460b      	mov	r3, r1
 80108c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80108c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80108c8:	f7ef fe80 	bl	80005cc <__aeabi_dmul>
 80108cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80108d0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80108d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80108d8:	2300      	movs	r3, #0
 80108da:	2200      	movs	r2, #0
 80108dc:	46ab      	mov	fp, r5
 80108de:	106d      	asrs	r5, r5, #1
 80108e0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80108e4:	9304      	str	r3, [sp, #16]
 80108e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80108ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80108ee:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80108f2:	4640      	mov	r0, r8
 80108f4:	4649      	mov	r1, r9
 80108f6:	4614      	mov	r4, r2
 80108f8:	461d      	mov	r5, r3
 80108fa:	f7ef fe67 	bl	80005cc <__aeabi_dmul>
 80108fe:	4602      	mov	r2, r0
 8010900:	460b      	mov	r3, r1
 8010902:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010906:	f7ef fca9 	bl	800025c <__aeabi_dsub>
 801090a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801090e:	4606      	mov	r6, r0
 8010910:	460f      	mov	r7, r1
 8010912:	4620      	mov	r0, r4
 8010914:	4629      	mov	r1, r5
 8010916:	f7ef fca1 	bl	800025c <__aeabi_dsub>
 801091a:	4602      	mov	r2, r0
 801091c:	460b      	mov	r3, r1
 801091e:	4650      	mov	r0, sl
 8010920:	4659      	mov	r1, fp
 8010922:	f7ef fc9b 	bl	800025c <__aeabi_dsub>
 8010926:	4642      	mov	r2, r8
 8010928:	464b      	mov	r3, r9
 801092a:	f7ef fe4f 	bl	80005cc <__aeabi_dmul>
 801092e:	4602      	mov	r2, r0
 8010930:	460b      	mov	r3, r1
 8010932:	4630      	mov	r0, r6
 8010934:	4639      	mov	r1, r7
 8010936:	f7ef fc91 	bl	800025c <__aeabi_dsub>
 801093a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801093e:	f7ef fe45 	bl	80005cc <__aeabi_dmul>
 8010942:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010946:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801094a:	4610      	mov	r0, r2
 801094c:	4619      	mov	r1, r3
 801094e:	f7ef fe3d 	bl	80005cc <__aeabi_dmul>
 8010952:	a37b      	add	r3, pc, #492	; (adr r3, 8010b40 <__ieee754_pow+0x6e0>)
 8010954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010958:	4604      	mov	r4, r0
 801095a:	460d      	mov	r5, r1
 801095c:	f7ef fe36 	bl	80005cc <__aeabi_dmul>
 8010960:	a379      	add	r3, pc, #484	; (adr r3, 8010b48 <__ieee754_pow+0x6e8>)
 8010962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010966:	f7ef fc7b 	bl	8000260 <__adddf3>
 801096a:	4622      	mov	r2, r4
 801096c:	462b      	mov	r3, r5
 801096e:	f7ef fe2d 	bl	80005cc <__aeabi_dmul>
 8010972:	a377      	add	r3, pc, #476	; (adr r3, 8010b50 <__ieee754_pow+0x6f0>)
 8010974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010978:	f7ef fc72 	bl	8000260 <__adddf3>
 801097c:	4622      	mov	r2, r4
 801097e:	462b      	mov	r3, r5
 8010980:	f7ef fe24 	bl	80005cc <__aeabi_dmul>
 8010984:	a374      	add	r3, pc, #464	; (adr r3, 8010b58 <__ieee754_pow+0x6f8>)
 8010986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098a:	f7ef fc69 	bl	8000260 <__adddf3>
 801098e:	4622      	mov	r2, r4
 8010990:	462b      	mov	r3, r5
 8010992:	f7ef fe1b 	bl	80005cc <__aeabi_dmul>
 8010996:	a372      	add	r3, pc, #456	; (adr r3, 8010b60 <__ieee754_pow+0x700>)
 8010998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099c:	f7ef fc60 	bl	8000260 <__adddf3>
 80109a0:	4622      	mov	r2, r4
 80109a2:	462b      	mov	r3, r5
 80109a4:	f7ef fe12 	bl	80005cc <__aeabi_dmul>
 80109a8:	a36f      	add	r3, pc, #444	; (adr r3, 8010b68 <__ieee754_pow+0x708>)
 80109aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ae:	f7ef fc57 	bl	8000260 <__adddf3>
 80109b2:	4622      	mov	r2, r4
 80109b4:	4606      	mov	r6, r0
 80109b6:	460f      	mov	r7, r1
 80109b8:	462b      	mov	r3, r5
 80109ba:	4620      	mov	r0, r4
 80109bc:	4629      	mov	r1, r5
 80109be:	f7ef fe05 	bl	80005cc <__aeabi_dmul>
 80109c2:	4602      	mov	r2, r0
 80109c4:	460b      	mov	r3, r1
 80109c6:	4630      	mov	r0, r6
 80109c8:	4639      	mov	r1, r7
 80109ca:	f7ef fdff 	bl	80005cc <__aeabi_dmul>
 80109ce:	4604      	mov	r4, r0
 80109d0:	460d      	mov	r5, r1
 80109d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80109d6:	4642      	mov	r2, r8
 80109d8:	464b      	mov	r3, r9
 80109da:	f7ef fc41 	bl	8000260 <__adddf3>
 80109de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80109e2:	f7ef fdf3 	bl	80005cc <__aeabi_dmul>
 80109e6:	4622      	mov	r2, r4
 80109e8:	462b      	mov	r3, r5
 80109ea:	f7ef fc39 	bl	8000260 <__adddf3>
 80109ee:	4642      	mov	r2, r8
 80109f0:	4606      	mov	r6, r0
 80109f2:	460f      	mov	r7, r1
 80109f4:	464b      	mov	r3, r9
 80109f6:	4640      	mov	r0, r8
 80109f8:	4649      	mov	r1, r9
 80109fa:	f7ef fde7 	bl	80005cc <__aeabi_dmul>
 80109fe:	2200      	movs	r2, #0
 8010a00:	4b67      	ldr	r3, [pc, #412]	; (8010ba0 <__ieee754_pow+0x740>)
 8010a02:	4682      	mov	sl, r0
 8010a04:	468b      	mov	fp, r1
 8010a06:	f7ef fc2b 	bl	8000260 <__adddf3>
 8010a0a:	4632      	mov	r2, r6
 8010a0c:	463b      	mov	r3, r7
 8010a0e:	f7ef fc27 	bl	8000260 <__adddf3>
 8010a12:	9c04      	ldr	r4, [sp, #16]
 8010a14:	460d      	mov	r5, r1
 8010a16:	4622      	mov	r2, r4
 8010a18:	460b      	mov	r3, r1
 8010a1a:	4640      	mov	r0, r8
 8010a1c:	4649      	mov	r1, r9
 8010a1e:	f7ef fdd5 	bl	80005cc <__aeabi_dmul>
 8010a22:	2200      	movs	r2, #0
 8010a24:	4680      	mov	r8, r0
 8010a26:	4689      	mov	r9, r1
 8010a28:	4620      	mov	r0, r4
 8010a2a:	4629      	mov	r1, r5
 8010a2c:	4b5c      	ldr	r3, [pc, #368]	; (8010ba0 <__ieee754_pow+0x740>)
 8010a2e:	f7ef fc15 	bl	800025c <__aeabi_dsub>
 8010a32:	4652      	mov	r2, sl
 8010a34:	465b      	mov	r3, fp
 8010a36:	f7ef fc11 	bl	800025c <__aeabi_dsub>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	4630      	mov	r0, r6
 8010a40:	4639      	mov	r1, r7
 8010a42:	f7ef fc0b 	bl	800025c <__aeabi_dsub>
 8010a46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010a4a:	f7ef fdbf 	bl	80005cc <__aeabi_dmul>
 8010a4e:	4622      	mov	r2, r4
 8010a50:	4606      	mov	r6, r0
 8010a52:	460f      	mov	r7, r1
 8010a54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010a58:	462b      	mov	r3, r5
 8010a5a:	f7ef fdb7 	bl	80005cc <__aeabi_dmul>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	460b      	mov	r3, r1
 8010a62:	4630      	mov	r0, r6
 8010a64:	4639      	mov	r1, r7
 8010a66:	f7ef fbfb 	bl	8000260 <__adddf3>
 8010a6a:	4606      	mov	r6, r0
 8010a6c:	460f      	mov	r7, r1
 8010a6e:	4602      	mov	r2, r0
 8010a70:	460b      	mov	r3, r1
 8010a72:	4640      	mov	r0, r8
 8010a74:	4649      	mov	r1, r9
 8010a76:	f7ef fbf3 	bl	8000260 <__adddf3>
 8010a7a:	a33d      	add	r3, pc, #244	; (adr r3, 8010b70 <__ieee754_pow+0x710>)
 8010a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a80:	9c04      	ldr	r4, [sp, #16]
 8010a82:	460d      	mov	r5, r1
 8010a84:	4620      	mov	r0, r4
 8010a86:	f7ef fda1 	bl	80005cc <__aeabi_dmul>
 8010a8a:	4642      	mov	r2, r8
 8010a8c:	464b      	mov	r3, r9
 8010a8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010a92:	4620      	mov	r0, r4
 8010a94:	4629      	mov	r1, r5
 8010a96:	f7ef fbe1 	bl	800025c <__aeabi_dsub>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	4639      	mov	r1, r7
 8010aa2:	f7ef fbdb 	bl	800025c <__aeabi_dsub>
 8010aa6:	a334      	add	r3, pc, #208	; (adr r3, 8010b78 <__ieee754_pow+0x718>)
 8010aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aac:	f7ef fd8e 	bl	80005cc <__aeabi_dmul>
 8010ab0:	a333      	add	r3, pc, #204	; (adr r3, 8010b80 <__ieee754_pow+0x720>)
 8010ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab6:	4606      	mov	r6, r0
 8010ab8:	460f      	mov	r7, r1
 8010aba:	4620      	mov	r0, r4
 8010abc:	4629      	mov	r1, r5
 8010abe:	f7ef fd85 	bl	80005cc <__aeabi_dmul>
 8010ac2:	4602      	mov	r2, r0
 8010ac4:	460b      	mov	r3, r1
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	4639      	mov	r1, r7
 8010aca:	f7ef fbc9 	bl	8000260 <__adddf3>
 8010ace:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ad0:	4b34      	ldr	r3, [pc, #208]	; (8010ba4 <__ieee754_pow+0x744>)
 8010ad2:	4413      	add	r3, r2
 8010ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad8:	f7ef fbc2 	bl	8000260 <__adddf3>
 8010adc:	4680      	mov	r8, r0
 8010ade:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010ae0:	4689      	mov	r9, r1
 8010ae2:	f7ef fd09 	bl	80004f8 <__aeabi_i2d>
 8010ae6:	4604      	mov	r4, r0
 8010ae8:	460d      	mov	r5, r1
 8010aea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010aec:	4b2e      	ldr	r3, [pc, #184]	; (8010ba8 <__ieee754_pow+0x748>)
 8010aee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010af2:	4413      	add	r3, r2
 8010af4:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010af8:	4642      	mov	r2, r8
 8010afa:	464b      	mov	r3, r9
 8010afc:	f7ef fbb0 	bl	8000260 <__adddf3>
 8010b00:	4632      	mov	r2, r6
 8010b02:	463b      	mov	r3, r7
 8010b04:	f7ef fbac 	bl	8000260 <__adddf3>
 8010b08:	4622      	mov	r2, r4
 8010b0a:	462b      	mov	r3, r5
 8010b0c:	f7ef fba8 	bl	8000260 <__adddf3>
 8010b10:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010b14:	4622      	mov	r2, r4
 8010b16:	462b      	mov	r3, r5
 8010b18:	4650      	mov	r0, sl
 8010b1a:	468b      	mov	fp, r1
 8010b1c:	f7ef fb9e 	bl	800025c <__aeabi_dsub>
 8010b20:	4632      	mov	r2, r6
 8010b22:	463b      	mov	r3, r7
 8010b24:	f7ef fb9a 	bl	800025c <__aeabi_dsub>
 8010b28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010b2c:	f7ef fb96 	bl	800025c <__aeabi_dsub>
 8010b30:	4602      	mov	r2, r0
 8010b32:	460b      	mov	r3, r1
 8010b34:	4640      	mov	r0, r8
 8010b36:	4649      	mov	r1, r9
 8010b38:	e608      	b.n	801074c <__ieee754_pow+0x2ec>
 8010b3a:	bf00      	nop
 8010b3c:	f3af 8000 	nop.w
 8010b40:	4a454eef 	.word	0x4a454eef
 8010b44:	3fca7e28 	.word	0x3fca7e28
 8010b48:	93c9db65 	.word	0x93c9db65
 8010b4c:	3fcd864a 	.word	0x3fcd864a
 8010b50:	a91d4101 	.word	0xa91d4101
 8010b54:	3fd17460 	.word	0x3fd17460
 8010b58:	518f264d 	.word	0x518f264d
 8010b5c:	3fd55555 	.word	0x3fd55555
 8010b60:	db6fabff 	.word	0xdb6fabff
 8010b64:	3fdb6db6 	.word	0x3fdb6db6
 8010b68:	33333303 	.word	0x33333303
 8010b6c:	3fe33333 	.word	0x3fe33333
 8010b70:	e0000000 	.word	0xe0000000
 8010b74:	3feec709 	.word	0x3feec709
 8010b78:	dc3a03fd 	.word	0xdc3a03fd
 8010b7c:	3feec709 	.word	0x3feec709
 8010b80:	145b01f5 	.word	0x145b01f5
 8010b84:	be3e2fe0 	.word	0xbe3e2fe0
 8010b88:	7ff00000 	.word	0x7ff00000
 8010b8c:	43400000 	.word	0x43400000
 8010b90:	0003988e 	.word	0x0003988e
 8010b94:	000bb679 	.word	0x000bb679
 8010b98:	080125d0 	.word	0x080125d0
 8010b9c:	3ff00000 	.word	0x3ff00000
 8010ba0:	40080000 	.word	0x40080000
 8010ba4:	080125f0 	.word	0x080125f0
 8010ba8:	080125e0 	.word	0x080125e0
 8010bac:	2601      	movs	r6, #1
 8010bae:	e667      	b.n	8010880 <__ieee754_pow+0x420>
 8010bb0:	a39d      	add	r3, pc, #628	; (adr r3, 8010e28 <__ieee754_pow+0x9c8>)
 8010bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb6:	4640      	mov	r0, r8
 8010bb8:	4649      	mov	r1, r9
 8010bba:	f7ef fb51 	bl	8000260 <__adddf3>
 8010bbe:	4622      	mov	r2, r4
 8010bc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010bc4:	462b      	mov	r3, r5
 8010bc6:	4650      	mov	r0, sl
 8010bc8:	4639      	mov	r1, r7
 8010bca:	f7ef fb47 	bl	800025c <__aeabi_dsub>
 8010bce:	4602      	mov	r2, r0
 8010bd0:	460b      	mov	r3, r1
 8010bd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bd6:	f7ef ff89 	bl	8000aec <__aeabi_dcmpgt>
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	f47f ae01 	bne.w	80107e2 <__ieee754_pow+0x382>
 8010be0:	4aa5      	ldr	r2, [pc, #660]	; (8010e78 <__ieee754_pow+0xa18>)
 8010be2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8010be6:	4293      	cmp	r3, r2
 8010be8:	f340 8103 	ble.w	8010df2 <__ieee754_pow+0x992>
 8010bec:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010bf0:	2000      	movs	r0, #0
 8010bf2:	151b      	asrs	r3, r3, #20
 8010bf4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010bf8:	fa4a f303 	asr.w	r3, sl, r3
 8010bfc:	4433      	add	r3, r6
 8010bfe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010c02:	4f9e      	ldr	r7, [pc, #632]	; (8010e7c <__ieee754_pow+0xa1c>)
 8010c04:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010c08:	4117      	asrs	r7, r2
 8010c0a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010c0e:	ea23 0107 	bic.w	r1, r3, r7
 8010c12:	f1c2 0214 	rsb	r2, r2, #20
 8010c16:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	fa4a fa02 	asr.w	sl, sl, r2
 8010c20:	2e00      	cmp	r6, #0
 8010c22:	4602      	mov	r2, r0
 8010c24:	4629      	mov	r1, r5
 8010c26:	4620      	mov	r0, r4
 8010c28:	bfb8      	it	lt
 8010c2a:	f1ca 0a00 	rsblt	sl, sl, #0
 8010c2e:	f7ef fb15 	bl	800025c <__aeabi_dsub>
 8010c32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c3a:	2400      	movs	r4, #0
 8010c3c:	4642      	mov	r2, r8
 8010c3e:	464b      	mov	r3, r9
 8010c40:	f7ef fb0e 	bl	8000260 <__adddf3>
 8010c44:	a37a      	add	r3, pc, #488	; (adr r3, 8010e30 <__ieee754_pow+0x9d0>)
 8010c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	460d      	mov	r5, r1
 8010c4e:	f7ef fcbd 	bl	80005cc <__aeabi_dmul>
 8010c52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c56:	4606      	mov	r6, r0
 8010c58:	460f      	mov	r7, r1
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	4629      	mov	r1, r5
 8010c5e:	f7ef fafd 	bl	800025c <__aeabi_dsub>
 8010c62:	4602      	mov	r2, r0
 8010c64:	460b      	mov	r3, r1
 8010c66:	4640      	mov	r0, r8
 8010c68:	4649      	mov	r1, r9
 8010c6a:	f7ef faf7 	bl	800025c <__aeabi_dsub>
 8010c6e:	a372      	add	r3, pc, #456	; (adr r3, 8010e38 <__ieee754_pow+0x9d8>)
 8010c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c74:	f7ef fcaa 	bl	80005cc <__aeabi_dmul>
 8010c78:	a371      	add	r3, pc, #452	; (adr r3, 8010e40 <__ieee754_pow+0x9e0>)
 8010c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7e:	4680      	mov	r8, r0
 8010c80:	4689      	mov	r9, r1
 8010c82:	4620      	mov	r0, r4
 8010c84:	4629      	mov	r1, r5
 8010c86:	f7ef fca1 	bl	80005cc <__aeabi_dmul>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	4640      	mov	r0, r8
 8010c90:	4649      	mov	r1, r9
 8010c92:	f7ef fae5 	bl	8000260 <__adddf3>
 8010c96:	4604      	mov	r4, r0
 8010c98:	460d      	mov	r5, r1
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	460b      	mov	r3, r1
 8010c9e:	4630      	mov	r0, r6
 8010ca0:	4639      	mov	r1, r7
 8010ca2:	f7ef fadd 	bl	8000260 <__adddf3>
 8010ca6:	4632      	mov	r2, r6
 8010ca8:	463b      	mov	r3, r7
 8010caa:	4680      	mov	r8, r0
 8010cac:	4689      	mov	r9, r1
 8010cae:	f7ef fad5 	bl	800025c <__aeabi_dsub>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	4629      	mov	r1, r5
 8010cba:	f7ef facf 	bl	800025c <__aeabi_dsub>
 8010cbe:	4642      	mov	r2, r8
 8010cc0:	4606      	mov	r6, r0
 8010cc2:	460f      	mov	r7, r1
 8010cc4:	464b      	mov	r3, r9
 8010cc6:	4640      	mov	r0, r8
 8010cc8:	4649      	mov	r1, r9
 8010cca:	f7ef fc7f 	bl	80005cc <__aeabi_dmul>
 8010cce:	a35e      	add	r3, pc, #376	; (adr r3, 8010e48 <__ieee754_pow+0x9e8>)
 8010cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd4:	4604      	mov	r4, r0
 8010cd6:	460d      	mov	r5, r1
 8010cd8:	f7ef fc78 	bl	80005cc <__aeabi_dmul>
 8010cdc:	a35c      	add	r3, pc, #368	; (adr r3, 8010e50 <__ieee754_pow+0x9f0>)
 8010cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce2:	f7ef fabb 	bl	800025c <__aeabi_dsub>
 8010ce6:	4622      	mov	r2, r4
 8010ce8:	462b      	mov	r3, r5
 8010cea:	f7ef fc6f 	bl	80005cc <__aeabi_dmul>
 8010cee:	a35a      	add	r3, pc, #360	; (adr r3, 8010e58 <__ieee754_pow+0x9f8>)
 8010cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf4:	f7ef fab4 	bl	8000260 <__adddf3>
 8010cf8:	4622      	mov	r2, r4
 8010cfa:	462b      	mov	r3, r5
 8010cfc:	f7ef fc66 	bl	80005cc <__aeabi_dmul>
 8010d00:	a357      	add	r3, pc, #348	; (adr r3, 8010e60 <__ieee754_pow+0xa00>)
 8010d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d06:	f7ef faa9 	bl	800025c <__aeabi_dsub>
 8010d0a:	4622      	mov	r2, r4
 8010d0c:	462b      	mov	r3, r5
 8010d0e:	f7ef fc5d 	bl	80005cc <__aeabi_dmul>
 8010d12:	a355      	add	r3, pc, #340	; (adr r3, 8010e68 <__ieee754_pow+0xa08>)
 8010d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d18:	f7ef faa2 	bl	8000260 <__adddf3>
 8010d1c:	4622      	mov	r2, r4
 8010d1e:	462b      	mov	r3, r5
 8010d20:	f7ef fc54 	bl	80005cc <__aeabi_dmul>
 8010d24:	4602      	mov	r2, r0
 8010d26:	460b      	mov	r3, r1
 8010d28:	4640      	mov	r0, r8
 8010d2a:	4649      	mov	r1, r9
 8010d2c:	f7ef fa96 	bl	800025c <__aeabi_dsub>
 8010d30:	4604      	mov	r4, r0
 8010d32:	460d      	mov	r5, r1
 8010d34:	4602      	mov	r2, r0
 8010d36:	460b      	mov	r3, r1
 8010d38:	4640      	mov	r0, r8
 8010d3a:	4649      	mov	r1, r9
 8010d3c:	f7ef fc46 	bl	80005cc <__aeabi_dmul>
 8010d40:	2200      	movs	r2, #0
 8010d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	4629      	mov	r1, r5
 8010d4e:	f7ef fa85 	bl	800025c <__aeabi_dsub>
 8010d52:	4602      	mov	r2, r0
 8010d54:	460b      	mov	r3, r1
 8010d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d5a:	f7ef fd61 	bl	8000820 <__aeabi_ddiv>
 8010d5e:	4632      	mov	r2, r6
 8010d60:	4604      	mov	r4, r0
 8010d62:	460d      	mov	r5, r1
 8010d64:	463b      	mov	r3, r7
 8010d66:	4640      	mov	r0, r8
 8010d68:	4649      	mov	r1, r9
 8010d6a:	f7ef fc2f 	bl	80005cc <__aeabi_dmul>
 8010d6e:	4632      	mov	r2, r6
 8010d70:	463b      	mov	r3, r7
 8010d72:	f7ef fa75 	bl	8000260 <__adddf3>
 8010d76:	4602      	mov	r2, r0
 8010d78:	460b      	mov	r3, r1
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	4629      	mov	r1, r5
 8010d7e:	f7ef fa6d 	bl	800025c <__aeabi_dsub>
 8010d82:	4642      	mov	r2, r8
 8010d84:	464b      	mov	r3, r9
 8010d86:	f7ef fa69 	bl	800025c <__aeabi_dsub>
 8010d8a:	4602      	mov	r2, r0
 8010d8c:	460b      	mov	r3, r1
 8010d8e:	2000      	movs	r0, #0
 8010d90:	493b      	ldr	r1, [pc, #236]	; (8010e80 <__ieee754_pow+0xa20>)
 8010d92:	f7ef fa63 	bl	800025c <__aeabi_dsub>
 8010d96:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8010d9a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010d9e:	da2b      	bge.n	8010df8 <__ieee754_pow+0x998>
 8010da0:	4652      	mov	r2, sl
 8010da2:	f000 f9b9 	bl	8011118 <scalbn>
 8010da6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010daa:	f7ff bbf2 	b.w	8010592 <__ieee754_pow+0x132>
 8010dae:	4b35      	ldr	r3, [pc, #212]	; (8010e84 <__ieee754_pow+0xa24>)
 8010db0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8010db4:	429f      	cmp	r7, r3
 8010db6:	f77f af13 	ble.w	8010be0 <__ieee754_pow+0x780>
 8010dba:	4b33      	ldr	r3, [pc, #204]	; (8010e88 <__ieee754_pow+0xa28>)
 8010dbc:	440b      	add	r3, r1
 8010dbe:	4303      	orrs	r3, r0
 8010dc0:	d00b      	beq.n	8010dda <__ieee754_pow+0x97a>
 8010dc2:	a32b      	add	r3, pc, #172	; (adr r3, 8010e70 <__ieee754_pow+0xa10>)
 8010dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010dcc:	f7ef fbfe 	bl	80005cc <__aeabi_dmul>
 8010dd0:	a327      	add	r3, pc, #156	; (adr r3, 8010e70 <__ieee754_pow+0xa10>)
 8010dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd6:	f7ff bbdc 	b.w	8010592 <__ieee754_pow+0x132>
 8010dda:	4622      	mov	r2, r4
 8010ddc:	462b      	mov	r3, r5
 8010dde:	f7ef fa3d 	bl	800025c <__aeabi_dsub>
 8010de2:	4642      	mov	r2, r8
 8010de4:	464b      	mov	r3, r9
 8010de6:	f7ef fe77 	bl	8000ad8 <__aeabi_dcmpge>
 8010dea:	2800      	cmp	r0, #0
 8010dec:	f43f aef8 	beq.w	8010be0 <__ieee754_pow+0x780>
 8010df0:	e7e7      	b.n	8010dc2 <__ieee754_pow+0x962>
 8010df2:	f04f 0a00 	mov.w	sl, #0
 8010df6:	e71e      	b.n	8010c36 <__ieee754_pow+0x7d6>
 8010df8:	4621      	mov	r1, r4
 8010dfa:	e7d4      	b.n	8010da6 <__ieee754_pow+0x946>
 8010dfc:	f04f 0b00 	mov.w	fp, #0
 8010e00:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010e80 <__ieee754_pow+0xa20>
 8010e04:	f7ff bbb0 	b.w	8010568 <__ieee754_pow+0x108>
 8010e08:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8010e0c:	f7ff bbac 	b.w	8010568 <__ieee754_pow+0x108>
 8010e10:	4638      	mov	r0, r7
 8010e12:	4641      	mov	r1, r8
 8010e14:	f7ff bbbf 	b.w	8010596 <__ieee754_pow+0x136>
 8010e18:	9200      	str	r2, [sp, #0]
 8010e1a:	f7ff bb7f 	b.w	801051c <__ieee754_pow+0xbc>
 8010e1e:	2300      	movs	r3, #0
 8010e20:	f7ff bb69 	b.w	80104f6 <__ieee754_pow+0x96>
 8010e24:	f3af 8000 	nop.w
 8010e28:	652b82fe 	.word	0x652b82fe
 8010e2c:	3c971547 	.word	0x3c971547
 8010e30:	00000000 	.word	0x00000000
 8010e34:	3fe62e43 	.word	0x3fe62e43
 8010e38:	fefa39ef 	.word	0xfefa39ef
 8010e3c:	3fe62e42 	.word	0x3fe62e42
 8010e40:	0ca86c39 	.word	0x0ca86c39
 8010e44:	be205c61 	.word	0xbe205c61
 8010e48:	72bea4d0 	.word	0x72bea4d0
 8010e4c:	3e663769 	.word	0x3e663769
 8010e50:	c5d26bf1 	.word	0xc5d26bf1
 8010e54:	3ebbbd41 	.word	0x3ebbbd41
 8010e58:	af25de2c 	.word	0xaf25de2c
 8010e5c:	3f11566a 	.word	0x3f11566a
 8010e60:	16bebd93 	.word	0x16bebd93
 8010e64:	3f66c16c 	.word	0x3f66c16c
 8010e68:	5555553e 	.word	0x5555553e
 8010e6c:	3fc55555 	.word	0x3fc55555
 8010e70:	c2f8f359 	.word	0xc2f8f359
 8010e74:	01a56e1f 	.word	0x01a56e1f
 8010e78:	3fe00000 	.word	0x3fe00000
 8010e7c:	000fffff 	.word	0x000fffff
 8010e80:	3ff00000 	.word	0x3ff00000
 8010e84:	4090cbff 	.word	0x4090cbff
 8010e88:	3f6f3400 	.word	0x3f6f3400

08010e8c <__ieee754_sqrt>:
 8010e8c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8010fe0 <__ieee754_sqrt+0x154>
 8010e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e94:	ea3c 0c01 	bics.w	ip, ip, r1
 8010e98:	460b      	mov	r3, r1
 8010e9a:	4606      	mov	r6, r0
 8010e9c:	460d      	mov	r5, r1
 8010e9e:	460a      	mov	r2, r1
 8010ea0:	4607      	mov	r7, r0
 8010ea2:	4604      	mov	r4, r0
 8010ea4:	d10e      	bne.n	8010ec4 <__ieee754_sqrt+0x38>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	f7ef fb90 	bl	80005cc <__aeabi_dmul>
 8010eac:	4602      	mov	r2, r0
 8010eae:	460b      	mov	r3, r1
 8010eb0:	4630      	mov	r0, r6
 8010eb2:	4629      	mov	r1, r5
 8010eb4:	f7ef f9d4 	bl	8000260 <__adddf3>
 8010eb8:	4606      	mov	r6, r0
 8010eba:	460d      	mov	r5, r1
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	4629      	mov	r1, r5
 8010ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ec4:	2900      	cmp	r1, #0
 8010ec6:	dc0d      	bgt.n	8010ee4 <__ieee754_sqrt+0x58>
 8010ec8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8010ecc:	ea5c 0707 	orrs.w	r7, ip, r7
 8010ed0:	d0f4      	beq.n	8010ebc <__ieee754_sqrt+0x30>
 8010ed2:	b139      	cbz	r1, 8010ee4 <__ieee754_sqrt+0x58>
 8010ed4:	4602      	mov	r2, r0
 8010ed6:	f7ef f9c1 	bl	800025c <__aeabi_dsub>
 8010eda:	4602      	mov	r2, r0
 8010edc:	460b      	mov	r3, r1
 8010ede:	f7ef fc9f 	bl	8000820 <__aeabi_ddiv>
 8010ee2:	e7e9      	b.n	8010eb8 <__ieee754_sqrt+0x2c>
 8010ee4:	1512      	asrs	r2, r2, #20
 8010ee6:	d074      	beq.n	8010fd2 <__ieee754_sqrt+0x146>
 8010ee8:	2000      	movs	r0, #0
 8010eea:	07d5      	lsls	r5, r2, #31
 8010eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ef0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8010ef4:	bf5e      	ittt	pl
 8010ef6:	0fe3      	lsrpl	r3, r4, #31
 8010ef8:	0064      	lslpl	r4, r4, #1
 8010efa:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8010efe:	0fe3      	lsrs	r3, r4, #31
 8010f00:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8010f04:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8010f08:	2516      	movs	r5, #22
 8010f0a:	4601      	mov	r1, r0
 8010f0c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010f10:	1076      	asrs	r6, r6, #1
 8010f12:	0064      	lsls	r4, r4, #1
 8010f14:	188f      	adds	r7, r1, r2
 8010f16:	429f      	cmp	r7, r3
 8010f18:	bfde      	ittt	le
 8010f1a:	1bdb      	suble	r3, r3, r7
 8010f1c:	18b9      	addle	r1, r7, r2
 8010f1e:	1880      	addle	r0, r0, r2
 8010f20:	005b      	lsls	r3, r3, #1
 8010f22:	3d01      	subs	r5, #1
 8010f24:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8010f28:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010f2c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8010f30:	d1f0      	bne.n	8010f14 <__ieee754_sqrt+0x88>
 8010f32:	462a      	mov	r2, r5
 8010f34:	f04f 0e20 	mov.w	lr, #32
 8010f38:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8010f3c:	428b      	cmp	r3, r1
 8010f3e:	eb07 0c05 	add.w	ip, r7, r5
 8010f42:	dc02      	bgt.n	8010f4a <__ieee754_sqrt+0xbe>
 8010f44:	d113      	bne.n	8010f6e <__ieee754_sqrt+0xe2>
 8010f46:	45a4      	cmp	ip, r4
 8010f48:	d811      	bhi.n	8010f6e <__ieee754_sqrt+0xe2>
 8010f4a:	f1bc 0f00 	cmp.w	ip, #0
 8010f4e:	eb0c 0507 	add.w	r5, ip, r7
 8010f52:	da43      	bge.n	8010fdc <__ieee754_sqrt+0x150>
 8010f54:	2d00      	cmp	r5, #0
 8010f56:	db41      	blt.n	8010fdc <__ieee754_sqrt+0x150>
 8010f58:	f101 0801 	add.w	r8, r1, #1
 8010f5c:	1a5b      	subs	r3, r3, r1
 8010f5e:	4641      	mov	r1, r8
 8010f60:	45a4      	cmp	ip, r4
 8010f62:	bf88      	it	hi
 8010f64:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010f68:	eba4 040c 	sub.w	r4, r4, ip
 8010f6c:	443a      	add	r2, r7
 8010f6e:	005b      	lsls	r3, r3, #1
 8010f70:	f1be 0e01 	subs.w	lr, lr, #1
 8010f74:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8010f78:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8010f7c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8010f80:	d1dc      	bne.n	8010f3c <__ieee754_sqrt+0xb0>
 8010f82:	4323      	orrs	r3, r4
 8010f84:	d006      	beq.n	8010f94 <__ieee754_sqrt+0x108>
 8010f86:	1c54      	adds	r4, r2, #1
 8010f88:	bf0b      	itete	eq
 8010f8a:	4672      	moveq	r2, lr
 8010f8c:	3201      	addne	r2, #1
 8010f8e:	3001      	addeq	r0, #1
 8010f90:	f022 0201 	bicne.w	r2, r2, #1
 8010f94:	1043      	asrs	r3, r0, #1
 8010f96:	07c1      	lsls	r1, r0, #31
 8010f98:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010f9c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010fa0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010fa4:	bf48      	it	mi
 8010fa6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010faa:	4610      	mov	r0, r2
 8010fac:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8010fb0:	e782      	b.n	8010eb8 <__ieee754_sqrt+0x2c>
 8010fb2:	0ae3      	lsrs	r3, r4, #11
 8010fb4:	3915      	subs	r1, #21
 8010fb6:	0564      	lsls	r4, r4, #21
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d0fa      	beq.n	8010fb2 <__ieee754_sqrt+0x126>
 8010fbc:	02de      	lsls	r6, r3, #11
 8010fbe:	d50a      	bpl.n	8010fd6 <__ieee754_sqrt+0x14a>
 8010fc0:	f1c2 0020 	rsb	r0, r2, #32
 8010fc4:	fa24 f000 	lsr.w	r0, r4, r0
 8010fc8:	1e55      	subs	r5, r2, #1
 8010fca:	4094      	lsls	r4, r2
 8010fcc:	4303      	orrs	r3, r0
 8010fce:	1b4a      	subs	r2, r1, r5
 8010fd0:	e78a      	b.n	8010ee8 <__ieee754_sqrt+0x5c>
 8010fd2:	4611      	mov	r1, r2
 8010fd4:	e7f0      	b.n	8010fb8 <__ieee754_sqrt+0x12c>
 8010fd6:	005b      	lsls	r3, r3, #1
 8010fd8:	3201      	adds	r2, #1
 8010fda:	e7ef      	b.n	8010fbc <__ieee754_sqrt+0x130>
 8010fdc:	4688      	mov	r8, r1
 8010fde:	e7bd      	b.n	8010f5c <__ieee754_sqrt+0xd0>
 8010fe0:	7ff00000 	.word	0x7ff00000

08010fe4 <fabs>:
 8010fe4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010fe8:	4770      	bx	lr

08010fea <finite>:
 8010fea:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8010fee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010ff2:	0fc0      	lsrs	r0, r0, #31
 8010ff4:	4770      	bx	lr
	...

08010ff8 <nan>:
 8010ff8:	2000      	movs	r0, #0
 8010ffa:	4901      	ldr	r1, [pc, #4]	; (8011000 <nan+0x8>)
 8010ffc:	4770      	bx	lr
 8010ffe:	bf00      	nop
 8011000:	7ff80000 	.word	0x7ff80000

08011004 <rint>:
 8011004:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8011008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801100a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 801100e:	2f13      	cmp	r7, #19
 8011010:	4602      	mov	r2, r0
 8011012:	460b      	mov	r3, r1
 8011014:	460c      	mov	r4, r1
 8011016:	4605      	mov	r5, r0
 8011018:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 801101c:	dc59      	bgt.n	80110d2 <rint+0xce>
 801101e:	2f00      	cmp	r7, #0
 8011020:	da2a      	bge.n	8011078 <rint+0x74>
 8011022:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011026:	4301      	orrs	r1, r0
 8011028:	d022      	beq.n	8011070 <rint+0x6c>
 801102a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 801102e:	4301      	orrs	r1, r0
 8011030:	424d      	negs	r5, r1
 8011032:	430d      	orrs	r5, r1
 8011034:	4936      	ldr	r1, [pc, #216]	; (8011110 <rint+0x10c>)
 8011036:	0c5c      	lsrs	r4, r3, #17
 8011038:	0b2d      	lsrs	r5, r5, #12
 801103a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 801103e:	0464      	lsls	r4, r4, #17
 8011040:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011044:	ea45 0304 	orr.w	r3, r5, r4
 8011048:	e9d1 4500 	ldrd	r4, r5, [r1]
 801104c:	4620      	mov	r0, r4
 801104e:	4629      	mov	r1, r5
 8011050:	f7ef f906 	bl	8000260 <__adddf3>
 8011054:	e9cd 0100 	strd	r0, r1, [sp]
 8011058:	e9dd 0100 	ldrd	r0, r1, [sp]
 801105c:	462b      	mov	r3, r5
 801105e:	4622      	mov	r2, r4
 8011060:	f7ef f8fc 	bl	800025c <__aeabi_dsub>
 8011064:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011068:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 801106c:	4602      	mov	r2, r0
 801106e:	460b      	mov	r3, r1
 8011070:	4610      	mov	r0, r2
 8011072:	4619      	mov	r1, r3
 8011074:	b003      	add	sp, #12
 8011076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011078:	4926      	ldr	r1, [pc, #152]	; (8011114 <rint+0x110>)
 801107a:	4139      	asrs	r1, r7
 801107c:	ea03 0001 	and.w	r0, r3, r1
 8011080:	4310      	orrs	r0, r2
 8011082:	d0f5      	beq.n	8011070 <rint+0x6c>
 8011084:	084b      	lsrs	r3, r1, #1
 8011086:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 801108a:	ea52 0501 	orrs.w	r5, r2, r1
 801108e:	d00c      	beq.n	80110aa <rint+0xa6>
 8011090:	ea24 0303 	bic.w	r3, r4, r3
 8011094:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8011098:	2f13      	cmp	r7, #19
 801109a:	bf0c      	ite	eq
 801109c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80110a0:	2500      	movne	r5, #0
 80110a2:	fa44 f707 	asr.w	r7, r4, r7
 80110a6:	ea43 0407 	orr.w	r4, r3, r7
 80110aa:	4919      	ldr	r1, [pc, #100]	; (8011110 <rint+0x10c>)
 80110ac:	4623      	mov	r3, r4
 80110ae:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80110b2:	462a      	mov	r2, r5
 80110b4:	e9d6 4500 	ldrd	r4, r5, [r6]
 80110b8:	4620      	mov	r0, r4
 80110ba:	4629      	mov	r1, r5
 80110bc:	f7ef f8d0 	bl	8000260 <__adddf3>
 80110c0:	e9cd 0100 	strd	r0, r1, [sp]
 80110c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80110c8:	4622      	mov	r2, r4
 80110ca:	462b      	mov	r3, r5
 80110cc:	f7ef f8c6 	bl	800025c <__aeabi_dsub>
 80110d0:	e7cc      	b.n	801106c <rint+0x68>
 80110d2:	2f33      	cmp	r7, #51	; 0x33
 80110d4:	dd05      	ble.n	80110e2 <rint+0xde>
 80110d6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80110da:	d1c9      	bne.n	8011070 <rint+0x6c>
 80110dc:	f7ef f8c0 	bl	8000260 <__adddf3>
 80110e0:	e7c4      	b.n	801106c <rint+0x68>
 80110e2:	f04f 31ff 	mov.w	r1, #4294967295
 80110e6:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80110ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80110ee:	4208      	tst	r0, r1
 80110f0:	d0be      	beq.n	8011070 <rint+0x6c>
 80110f2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80110f6:	bf18      	it	ne
 80110f8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80110fc:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8011100:	bf1e      	ittt	ne
 8011102:	ea20 0303 	bicne.w	r3, r0, r3
 8011106:	fa45 fc0c 	asrne.w	ip, r5, ip
 801110a:	ea43 050c 	orrne.w	r5, r3, ip
 801110e:	e7cc      	b.n	80110aa <rint+0xa6>
 8011110:	08012600 	.word	0x08012600
 8011114:	000fffff 	.word	0x000fffff

08011118 <scalbn>:
 8011118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801111a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 801111e:	4604      	mov	r4, r0
 8011120:	460d      	mov	r5, r1
 8011122:	4617      	mov	r7, r2
 8011124:	460b      	mov	r3, r1
 8011126:	b996      	cbnz	r6, 801114e <scalbn+0x36>
 8011128:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801112c:	4303      	orrs	r3, r0
 801112e:	d039      	beq.n	80111a4 <scalbn+0x8c>
 8011130:	4b35      	ldr	r3, [pc, #212]	; (8011208 <scalbn+0xf0>)
 8011132:	2200      	movs	r2, #0
 8011134:	f7ef fa4a 	bl	80005cc <__aeabi_dmul>
 8011138:	4b34      	ldr	r3, [pc, #208]	; (801120c <scalbn+0xf4>)
 801113a:	4604      	mov	r4, r0
 801113c:	429f      	cmp	r7, r3
 801113e:	460d      	mov	r5, r1
 8011140:	da0f      	bge.n	8011162 <scalbn+0x4a>
 8011142:	a32d      	add	r3, pc, #180	; (adr r3, 80111f8 <scalbn+0xe0>)
 8011144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011148:	f7ef fa40 	bl	80005cc <__aeabi_dmul>
 801114c:	e006      	b.n	801115c <scalbn+0x44>
 801114e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011152:	4296      	cmp	r6, r2
 8011154:	d10a      	bne.n	801116c <scalbn+0x54>
 8011156:	4602      	mov	r2, r0
 8011158:	f7ef f882 	bl	8000260 <__adddf3>
 801115c:	4604      	mov	r4, r0
 801115e:	460d      	mov	r5, r1
 8011160:	e020      	b.n	80111a4 <scalbn+0x8c>
 8011162:	460b      	mov	r3, r1
 8011164:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011168:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 801116c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8011170:	19b9      	adds	r1, r7, r6
 8011172:	4291      	cmp	r1, r2
 8011174:	dd0e      	ble.n	8011194 <scalbn+0x7c>
 8011176:	a322      	add	r3, pc, #136	; (adr r3, 8011200 <scalbn+0xe8>)
 8011178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8011180:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8011184:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8011188:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 801118c:	4820      	ldr	r0, [pc, #128]	; (8011210 <scalbn+0xf8>)
 801118e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8011192:	e7d9      	b.n	8011148 <scalbn+0x30>
 8011194:	2900      	cmp	r1, #0
 8011196:	dd08      	ble.n	80111aa <scalbn+0x92>
 8011198:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801119c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80111a0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80111a4:	4620      	mov	r0, r4
 80111a6:	4629      	mov	r1, r5
 80111a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111aa:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80111ae:	da16      	bge.n	80111de <scalbn+0xc6>
 80111b0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80111b4:	429f      	cmp	r7, r3
 80111b6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80111ba:	dd08      	ble.n	80111ce <scalbn+0xb6>
 80111bc:	4c15      	ldr	r4, [pc, #84]	; (8011214 <scalbn+0xfc>)
 80111be:	4814      	ldr	r0, [pc, #80]	; (8011210 <scalbn+0xf8>)
 80111c0:	f363 74df 	bfi	r4, r3, #31, #1
 80111c4:	a30e      	add	r3, pc, #56	; (adr r3, 8011200 <scalbn+0xe8>)
 80111c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ca:	4621      	mov	r1, r4
 80111cc:	e7bc      	b.n	8011148 <scalbn+0x30>
 80111ce:	4c12      	ldr	r4, [pc, #72]	; (8011218 <scalbn+0x100>)
 80111d0:	4812      	ldr	r0, [pc, #72]	; (801121c <scalbn+0x104>)
 80111d2:	f363 74df 	bfi	r4, r3, #31, #1
 80111d6:	a308      	add	r3, pc, #32	; (adr r3, 80111f8 <scalbn+0xe0>)
 80111d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111dc:	e7f5      	b.n	80111ca <scalbn+0xb2>
 80111de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80111e2:	3136      	adds	r1, #54	; 0x36
 80111e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80111e8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80111ec:	4620      	mov	r0, r4
 80111ee:	4629      	mov	r1, r5
 80111f0:	2200      	movs	r2, #0
 80111f2:	4b0b      	ldr	r3, [pc, #44]	; (8011220 <scalbn+0x108>)
 80111f4:	e7a8      	b.n	8011148 <scalbn+0x30>
 80111f6:	bf00      	nop
 80111f8:	c2f8f359 	.word	0xc2f8f359
 80111fc:	01a56e1f 	.word	0x01a56e1f
 8011200:	8800759c 	.word	0x8800759c
 8011204:	7e37e43c 	.word	0x7e37e43c
 8011208:	43500000 	.word	0x43500000
 801120c:	ffff3cb0 	.word	0xffff3cb0
 8011210:	8800759c 	.word	0x8800759c
 8011214:	7e37e43c 	.word	0x7e37e43c
 8011218:	01a56e1f 	.word	0x01a56e1f
 801121c:	c2f8f359 	.word	0xc2f8f359
 8011220:	3c900000 	.word	0x3c900000

08011224 <_init>:
 8011224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011226:	bf00      	nop
 8011228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801122a:	bc08      	pop	{r3}
 801122c:	469e      	mov	lr, r3
 801122e:	4770      	bx	lr

08011230 <_fini>:
 8011230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011232:	bf00      	nop
 8011234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011236:	bc08      	pop	{r3}
 8011238:	469e      	mov	lr, r3
 801123a:	4770      	bx	lr
