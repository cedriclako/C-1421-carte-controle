
UFEC23_Novika.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e104  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800e2f8  0800e2f8  0001e2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7c0  0800e7c0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7c0  0800e7c0  0001e7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7c8  0800e7c8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7c8  0800e7c8  0001e7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7cc  0800e7cc  0001e7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e7d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c04  200001e8  0800e9b8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dec  0800e9b8  00022dec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205ae  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047b4  00000000  00000000  000407bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  00044f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  000468a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b6d  00000000  00000000  00048038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7f5  00000000  00000000  0006bba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c693c  00000000  00000000  0008939a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014fcd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b6c  00000000  00000000  0014fd2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001e8 	.word	0x200001e8
 800020c:	00000000 	.word	0x00000000
 8000210:	0800e2dc 	.word	0x0800e2dc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001ec 	.word	0x200001ec
 800022c:	0800e2dc 	.word	0x0800e2dc

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_frsub>:
 8000c08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c0c:	e002      	b.n	8000c14 <__addsf3>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_fsub>:
 8000c10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c14 <__addsf3>:
 8000c14:	0042      	lsls	r2, r0, #1
 8000c16:	bf1f      	itttt	ne
 8000c18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c1c:	ea92 0f03 	teqne	r2, r3
 8000c20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c28:	d06a      	beq.n	8000d00 <__addsf3+0xec>
 8000c2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c32:	bfc1      	itttt	gt
 8000c34:	18d2      	addgt	r2, r2, r3
 8000c36:	4041      	eorgt	r1, r0
 8000c38:	4048      	eorgt	r0, r1
 8000c3a:	4041      	eorgt	r1, r0
 8000c3c:	bfb8      	it	lt
 8000c3e:	425b      	neglt	r3, r3
 8000c40:	2b19      	cmp	r3, #25
 8000c42:	bf88      	it	hi
 8000c44:	4770      	bxhi	lr
 8000c46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4240      	negne	r0, r0
 8000c56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c62:	bf18      	it	ne
 8000c64:	4249      	negne	r1, r1
 8000c66:	ea92 0f03 	teq	r2, r3
 8000c6a:	d03f      	beq.n	8000cec <__addsf3+0xd8>
 8000c6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c70:	fa41 fc03 	asr.w	ip, r1, r3
 8000c74:	eb10 000c 	adds.w	r0, r0, ip
 8000c78:	f1c3 0320 	rsb	r3, r3, #32
 8000c7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__addsf3+0x78>
 8000c86:	4249      	negs	r1, r1
 8000c88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c90:	d313      	bcc.n	8000cba <__addsf3+0xa6>
 8000c92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c96:	d306      	bcc.n	8000ca6 <__addsf3+0x92>
 8000c98:	0840      	lsrs	r0, r0, #1
 8000c9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c9e:	f102 0201 	add.w	r2, r2, #1
 8000ca2:	2afe      	cmp	r2, #254	; 0xfe
 8000ca4:	d251      	bcs.n	8000d4a <__addsf3+0x136>
 8000ca6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000caa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cae:	bf08      	it	eq
 8000cb0:	f020 0001 	biceq.w	r0, r0, #1
 8000cb4:	ea40 0003 	orr.w	r0, r0, r3
 8000cb8:	4770      	bx	lr
 8000cba:	0049      	lsls	r1, r1, #1
 8000cbc:	eb40 0000 	adc.w	r0, r0, r0
 8000cc0:	3a01      	subs	r2, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc8:	d2ed      	bcs.n	8000ca6 <__addsf3+0x92>
 8000cca:	fab0 fc80 	clz	ip, r0
 8000cce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cda:	bfaa      	itet	ge
 8000cdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ce0:	4252      	neglt	r2, r2
 8000ce2:	4318      	orrge	r0, r3
 8000ce4:	bfbc      	itt	lt
 8000ce6:	40d0      	lsrlt	r0, r2
 8000ce8:	4318      	orrlt	r0, r3
 8000cea:	4770      	bx	lr
 8000cec:	f092 0f00 	teq	r2, #0
 8000cf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cf4:	bf06      	itte	eq
 8000cf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cfa:	3201      	addeq	r2, #1
 8000cfc:	3b01      	subne	r3, #1
 8000cfe:	e7b5      	b.n	8000c6c <__addsf3+0x58>
 8000d00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d08:	bf18      	it	ne
 8000d0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0e:	d021      	beq.n	8000d54 <__addsf3+0x140>
 8000d10:	ea92 0f03 	teq	r2, r3
 8000d14:	d004      	beq.n	8000d20 <__addsf3+0x10c>
 8000d16:	f092 0f00 	teq	r2, #0
 8000d1a:	bf08      	it	eq
 8000d1c:	4608      	moveq	r0, r1
 8000d1e:	4770      	bx	lr
 8000d20:	ea90 0f01 	teq	r0, r1
 8000d24:	bf1c      	itt	ne
 8000d26:	2000      	movne	r0, #0
 8000d28:	4770      	bxne	lr
 8000d2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d2e:	d104      	bne.n	8000d3a <__addsf3+0x126>
 8000d30:	0040      	lsls	r0, r0, #1
 8000d32:	bf28      	it	cs
 8000d34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d38:	4770      	bx	lr
 8000d3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d3e:	bf3c      	itt	cc
 8000d40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bxcc	lr
 8000d46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d52:	4770      	bx	lr
 8000d54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d58:	bf16      	itet	ne
 8000d5a:	4608      	movne	r0, r1
 8000d5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d60:	4601      	movne	r1, r0
 8000d62:	0242      	lsls	r2, r0, #9
 8000d64:	bf06      	itte	eq
 8000d66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d6a:	ea90 0f01 	teqeq	r0, r1
 8000d6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_ui2f>:
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	e004      	b.n	8000d84 <__aeabi_i2f+0x8>
 8000d7a:	bf00      	nop

08000d7c <__aeabi_i2f>:
 8000d7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d80:	bf48      	it	mi
 8000d82:	4240      	negmi	r0, r0
 8000d84:	ea5f 0c00 	movs.w	ip, r0
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d90:	4601      	mov	r1, r0
 8000d92:	f04f 0000 	mov.w	r0, #0
 8000d96:	e01c      	b.n	8000dd2 <__aeabi_l2f+0x2a>

08000d98 <__aeabi_ul2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	e00a      	b.n	8000dbc <__aeabi_l2f+0x14>
 8000da6:	bf00      	nop

08000da8 <__aeabi_l2f>:
 8000da8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dac:	bf08      	it	eq
 8000dae:	4770      	bxeq	lr
 8000db0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000db4:	d502      	bpl.n	8000dbc <__aeabi_l2f+0x14>
 8000db6:	4240      	negs	r0, r0
 8000db8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dbc:	ea5f 0c01 	movs.w	ip, r1
 8000dc0:	bf02      	ittt	eq
 8000dc2:	4684      	moveq	ip, r0
 8000dc4:	4601      	moveq	r1, r0
 8000dc6:	2000      	moveq	r0, #0
 8000dc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dcc:	bf08      	it	eq
 8000dce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dd6:	fabc f28c 	clz	r2, ip
 8000dda:	3a08      	subs	r2, #8
 8000ddc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000de0:	db10      	blt.n	8000e04 <__aeabi_l2f+0x5c>
 8000de2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de6:	4463      	add	r3, ip
 8000de8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000df4:	fa20 f202 	lsr.w	r2, r0, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	f020 0001 	biceq.w	r0, r0, #1
 8000e02:	4770      	bx	lr
 8000e04:	f102 0220 	add.w	r2, r2, #32
 8000e08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0c:	f1c2 0220 	rsb	r2, r2, #32
 8000e10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e14:	fa21 f202 	lsr.w	r2, r1, r2
 8000e18:	eb43 0002 	adc.w	r0, r3, r2
 8000e1c:	bf08      	it	eq
 8000e1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_fmul>:
 8000e24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e2c:	bf1e      	ittt	ne
 8000e2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e32:	ea92 0f0c 	teqne	r2, ip
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d06f      	beq.n	8000f1c <__aeabi_fmul+0xf8>
 8000e3c:	441a      	add	r2, r3
 8000e3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e42:	0240      	lsls	r0, r0, #9
 8000e44:	bf18      	it	ne
 8000e46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e4a:	d01e      	beq.n	8000e8a <__aeabi_fmul+0x66>
 8000e4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e58:	fba0 3101 	umull	r3, r1, r0, r1
 8000e5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e64:	bf3e      	ittt	cc
 8000e66:	0049      	lslcc	r1, r1, #1
 8000e68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e6c:	005b      	lslcc	r3, r3, #1
 8000e6e:	ea40 0001 	orr.w	r0, r0, r1
 8000e72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e76:	2afd      	cmp	r2, #253	; 0xfd
 8000e78:	d81d      	bhi.n	8000eb6 <__aeabi_fmul+0x92>
 8000e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e82:	bf08      	it	eq
 8000e84:	f020 0001 	biceq.w	r0, r0, #1
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e92:	bf08      	it	eq
 8000e94:	0249      	lsleq	r1, r1, #9
 8000e96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e9e:	3a7f      	subs	r2, #127	; 0x7f
 8000ea0:	bfc2      	ittt	gt
 8000ea2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eaa:	4770      	bxgt	lr
 8000eac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb0:	f04f 0300 	mov.w	r3, #0
 8000eb4:	3a01      	subs	r2, #1
 8000eb6:	dc5d      	bgt.n	8000f74 <__aeabi_fmul+0x150>
 8000eb8:	f112 0f19 	cmn.w	r2, #25
 8000ebc:	bfdc      	itt	le
 8000ebe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ec2:	4770      	bxle	lr
 8000ec4:	f1c2 0200 	rsb	r2, r2, #0
 8000ec8:	0041      	lsls	r1, r0, #1
 8000eca:	fa21 f102 	lsr.w	r1, r1, r2
 8000ece:	f1c2 0220 	rsb	r2, r2, #32
 8000ed2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ed6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eda:	f140 0000 	adc.w	r0, r0, #0
 8000ede:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ee2:	bf08      	it	eq
 8000ee4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee8:	4770      	bx	lr
 8000eea:	f092 0f00 	teq	r2, #0
 8000eee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0040      	lsleq	r0, r0, #1
 8000ef6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000efa:	3a01      	subeq	r2, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fmul+0xce>
 8000efe:	ea40 000c 	orr.w	r0, r0, ip
 8000f02:	f093 0f00 	teq	r3, #0
 8000f06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0049      	lsleq	r1, r1, #1
 8000f0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f12:	3b01      	subeq	r3, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fmul+0xe6>
 8000f16:	ea41 010c 	orr.w	r1, r1, ip
 8000f1a:	e78f      	b.n	8000e3c <__aeabi_fmul+0x18>
 8000f1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f20:	ea92 0f0c 	teq	r2, ip
 8000f24:	bf18      	it	ne
 8000f26:	ea93 0f0c 	teqne	r3, ip
 8000f2a:	d00a      	beq.n	8000f42 <__aeabi_fmul+0x11e>
 8000f2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f30:	bf18      	it	ne
 8000f32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	d1d8      	bne.n	8000eea <__aeabi_fmul+0xc6>
 8000f38:	ea80 0001 	eor.w	r0, r0, r1
 8000f3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f40:	4770      	bx	lr
 8000f42:	f090 0f00 	teq	r0, #0
 8000f46:	bf17      	itett	ne
 8000f48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f4c:	4608      	moveq	r0, r1
 8000f4e:	f091 0f00 	teqne	r1, #0
 8000f52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f56:	d014      	beq.n	8000f82 <__aeabi_fmul+0x15e>
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	d101      	bne.n	8000f62 <__aeabi_fmul+0x13e>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	d10f      	bne.n	8000f82 <__aeabi_fmul+0x15e>
 8000f62:	ea93 0f0c 	teq	r3, ip
 8000f66:	d103      	bne.n	8000f70 <__aeabi_fmul+0x14c>
 8000f68:	024b      	lsls	r3, r1, #9
 8000f6a:	bf18      	it	ne
 8000f6c:	4608      	movne	r0, r1
 8000f6e:	d108      	bne.n	8000f82 <__aeabi_fmul+0x15e>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f80:	4770      	bx	lr
 8000f82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f8a:	4770      	bx	lr

08000f8c <__aeabi_fdiv>:
 8000f8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f94:	bf1e      	ittt	ne
 8000f96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f9a:	ea92 0f0c 	teqne	r2, ip
 8000f9e:	ea93 0f0c 	teqne	r3, ip
 8000fa2:	d069      	beq.n	8001078 <__aeabi_fdiv+0xec>
 8000fa4:	eba2 0203 	sub.w	r2, r2, r3
 8000fa8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fac:	0249      	lsls	r1, r1, #9
 8000fae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fb2:	d037      	beq.n	8001024 <__aeabi_fdiv+0x98>
 8000fb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fbc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fc4:	428b      	cmp	r3, r1
 8000fc6:	bf38      	it	cc
 8000fc8:	005b      	lslcc	r3, r3, #1
 8000fca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	bf24      	itt	cs
 8000fd6:	1a5b      	subcs	r3, r3, r1
 8000fd8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fdc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fe0:	bf24      	itt	cs
 8000fe2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fe6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fee:	bf24      	itt	cs
 8000ff0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ff4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ffc:	bf24      	itt	cs
 8000ffe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001002:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	bf18      	it	ne
 800100a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800100e:	d1e0      	bne.n	8000fd2 <__aeabi_fdiv+0x46>
 8001010:	2afd      	cmp	r2, #253	; 0xfd
 8001012:	f63f af50 	bhi.w	8000eb6 <__aeabi_fmul+0x92>
 8001016:	428b      	cmp	r3, r1
 8001018:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800101c:	bf08      	it	eq
 800101e:	f020 0001 	biceq.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001028:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800102c:	327f      	adds	r2, #127	; 0x7f
 800102e:	bfc2      	ittt	gt
 8001030:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001034:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001038:	4770      	bxgt	lr
 800103a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	3a01      	subs	r2, #1
 8001044:	e737      	b.n	8000eb6 <__aeabi_fmul+0x92>
 8001046:	f092 0f00 	teq	r2, #0
 800104a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800104e:	bf02      	ittt	eq
 8001050:	0040      	lsleq	r0, r0, #1
 8001052:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001056:	3a01      	subeq	r2, #1
 8001058:	d0f9      	beq.n	800104e <__aeabi_fdiv+0xc2>
 800105a:	ea40 000c 	orr.w	r0, r0, ip
 800105e:	f093 0f00 	teq	r3, #0
 8001062:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001066:	bf02      	ittt	eq
 8001068:	0049      	lsleq	r1, r1, #1
 800106a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800106e:	3b01      	subeq	r3, #1
 8001070:	d0f9      	beq.n	8001066 <__aeabi_fdiv+0xda>
 8001072:	ea41 010c 	orr.w	r1, r1, ip
 8001076:	e795      	b.n	8000fa4 <__aeabi_fdiv+0x18>
 8001078:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800107c:	ea92 0f0c 	teq	r2, ip
 8001080:	d108      	bne.n	8001094 <__aeabi_fdiv+0x108>
 8001082:	0242      	lsls	r2, r0, #9
 8001084:	f47f af7d 	bne.w	8000f82 <__aeabi_fmul+0x15e>
 8001088:	ea93 0f0c 	teq	r3, ip
 800108c:	f47f af70 	bne.w	8000f70 <__aeabi_fmul+0x14c>
 8001090:	4608      	mov	r0, r1
 8001092:	e776      	b.n	8000f82 <__aeabi_fmul+0x15e>
 8001094:	ea93 0f0c 	teq	r3, ip
 8001098:	d104      	bne.n	80010a4 <__aeabi_fdiv+0x118>
 800109a:	024b      	lsls	r3, r1, #9
 800109c:	f43f af4c 	beq.w	8000f38 <__aeabi_fmul+0x114>
 80010a0:	4608      	mov	r0, r1
 80010a2:	e76e      	b.n	8000f82 <__aeabi_fmul+0x15e>
 80010a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a8:	bf18      	it	ne
 80010aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010ae:	d1ca      	bne.n	8001046 <__aeabi_fdiv+0xba>
 80010b0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010b4:	f47f af5c 	bne.w	8000f70 <__aeabi_fmul+0x14c>
 80010b8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010bc:	f47f af3c 	bne.w	8000f38 <__aeabi_fmul+0x114>
 80010c0:	e75f      	b.n	8000f82 <__aeabi_fmul+0x15e>
 80010c2:	bf00      	nop

080010c4 <__aeabi_uldivmod>:
 80010c4:	b953      	cbnz	r3, 80010dc <__aeabi_uldivmod+0x18>
 80010c6:	b94a      	cbnz	r2, 80010dc <__aeabi_uldivmod+0x18>
 80010c8:	2900      	cmp	r1, #0
 80010ca:	bf08      	it	eq
 80010cc:	2800      	cmpeq	r0, #0
 80010ce:	bf1c      	itt	ne
 80010d0:	f04f 31ff 	movne.w	r1, #4294967295
 80010d4:	f04f 30ff 	movne.w	r0, #4294967295
 80010d8:	f000 b96e 	b.w	80013b8 <__aeabi_idiv0>
 80010dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80010e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010e4:	f000 f806 	bl	80010f4 <__udivmoddi4>
 80010e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010f0:	b004      	add	sp, #16
 80010f2:	4770      	bx	lr

080010f4 <__udivmoddi4>:
 80010f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f8:	9e08      	ldr	r6, [sp, #32]
 80010fa:	460d      	mov	r5, r1
 80010fc:	4604      	mov	r4, r0
 80010fe:	468e      	mov	lr, r1
 8001100:	2b00      	cmp	r3, #0
 8001102:	f040 8083 	bne.w	800120c <__udivmoddi4+0x118>
 8001106:	428a      	cmp	r2, r1
 8001108:	4617      	mov	r7, r2
 800110a:	d947      	bls.n	800119c <__udivmoddi4+0xa8>
 800110c:	fab2 f382 	clz	r3, r2
 8001110:	b14b      	cbz	r3, 8001126 <__udivmoddi4+0x32>
 8001112:	f1c3 0120 	rsb	r1, r3, #32
 8001116:	fa05 fe03 	lsl.w	lr, r5, r3
 800111a:	fa20 f101 	lsr.w	r1, r0, r1
 800111e:	409f      	lsls	r7, r3
 8001120:	ea41 0e0e 	orr.w	lr, r1, lr
 8001124:	409c      	lsls	r4, r3
 8001126:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800112a:	fbbe fcf8 	udiv	ip, lr, r8
 800112e:	fa1f f987 	uxth.w	r9, r7
 8001132:	fb08 e21c 	mls	r2, r8, ip, lr
 8001136:	fb0c f009 	mul.w	r0, ip, r9
 800113a:	0c21      	lsrs	r1, r4, #16
 800113c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001140:	4290      	cmp	r0, r2
 8001142:	d90a      	bls.n	800115a <__udivmoddi4+0x66>
 8001144:	18ba      	adds	r2, r7, r2
 8001146:	f10c 31ff 	add.w	r1, ip, #4294967295
 800114a:	f080 8118 	bcs.w	800137e <__udivmoddi4+0x28a>
 800114e:	4290      	cmp	r0, r2
 8001150:	f240 8115 	bls.w	800137e <__udivmoddi4+0x28a>
 8001154:	f1ac 0c02 	sub.w	ip, ip, #2
 8001158:	443a      	add	r2, r7
 800115a:	1a12      	subs	r2, r2, r0
 800115c:	fbb2 f0f8 	udiv	r0, r2, r8
 8001160:	fb08 2210 	mls	r2, r8, r0, r2
 8001164:	fb00 f109 	mul.w	r1, r0, r9
 8001168:	b2a4      	uxth	r4, r4
 800116a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800116e:	42a1      	cmp	r1, r4
 8001170:	d909      	bls.n	8001186 <__udivmoddi4+0x92>
 8001172:	193c      	adds	r4, r7, r4
 8001174:	f100 32ff 	add.w	r2, r0, #4294967295
 8001178:	f080 8103 	bcs.w	8001382 <__udivmoddi4+0x28e>
 800117c:	42a1      	cmp	r1, r4
 800117e:	f240 8100 	bls.w	8001382 <__udivmoddi4+0x28e>
 8001182:	3802      	subs	r0, #2
 8001184:	443c      	add	r4, r7
 8001186:	1a64      	subs	r4, r4, r1
 8001188:	2100      	movs	r1, #0
 800118a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800118e:	b11e      	cbz	r6, 8001198 <__udivmoddi4+0xa4>
 8001190:	2200      	movs	r2, #0
 8001192:	40dc      	lsrs	r4, r3
 8001194:	e9c6 4200 	strd	r4, r2, [r6]
 8001198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800119c:	b902      	cbnz	r2, 80011a0 <__udivmoddi4+0xac>
 800119e:	deff      	udf	#255	; 0xff
 80011a0:	fab2 f382 	clz	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d14f      	bne.n	8001248 <__udivmoddi4+0x154>
 80011a8:	1a8d      	subs	r5, r1, r2
 80011aa:	2101      	movs	r1, #1
 80011ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80011b0:	fa1f f882 	uxth.w	r8, r2
 80011b4:	fbb5 fcfe 	udiv	ip, r5, lr
 80011b8:	fb0e 551c 	mls	r5, lr, ip, r5
 80011bc:	fb08 f00c 	mul.w	r0, r8, ip
 80011c0:	0c22      	lsrs	r2, r4, #16
 80011c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80011c6:	42a8      	cmp	r0, r5
 80011c8:	d907      	bls.n	80011da <__udivmoddi4+0xe6>
 80011ca:	197d      	adds	r5, r7, r5
 80011cc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80011d0:	d202      	bcs.n	80011d8 <__udivmoddi4+0xe4>
 80011d2:	42a8      	cmp	r0, r5
 80011d4:	f200 80e9 	bhi.w	80013aa <__udivmoddi4+0x2b6>
 80011d8:	4694      	mov	ip, r2
 80011da:	1a2d      	subs	r5, r5, r0
 80011dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80011e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80011e4:	fb08 f800 	mul.w	r8, r8, r0
 80011e8:	b2a4      	uxth	r4, r4
 80011ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80011ee:	45a0      	cmp	r8, r4
 80011f0:	d907      	bls.n	8001202 <__udivmoddi4+0x10e>
 80011f2:	193c      	adds	r4, r7, r4
 80011f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80011f8:	d202      	bcs.n	8001200 <__udivmoddi4+0x10c>
 80011fa:	45a0      	cmp	r8, r4
 80011fc:	f200 80d9 	bhi.w	80013b2 <__udivmoddi4+0x2be>
 8001200:	4610      	mov	r0, r2
 8001202:	eba4 0408 	sub.w	r4, r4, r8
 8001206:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800120a:	e7c0      	b.n	800118e <__udivmoddi4+0x9a>
 800120c:	428b      	cmp	r3, r1
 800120e:	d908      	bls.n	8001222 <__udivmoddi4+0x12e>
 8001210:	2e00      	cmp	r6, #0
 8001212:	f000 80b1 	beq.w	8001378 <__udivmoddi4+0x284>
 8001216:	2100      	movs	r1, #0
 8001218:	e9c6 0500 	strd	r0, r5, [r6]
 800121c:	4608      	mov	r0, r1
 800121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001222:	fab3 f183 	clz	r1, r3
 8001226:	2900      	cmp	r1, #0
 8001228:	d14b      	bne.n	80012c2 <__udivmoddi4+0x1ce>
 800122a:	42ab      	cmp	r3, r5
 800122c:	d302      	bcc.n	8001234 <__udivmoddi4+0x140>
 800122e:	4282      	cmp	r2, r0
 8001230:	f200 80b9 	bhi.w	80013a6 <__udivmoddi4+0x2b2>
 8001234:	1a84      	subs	r4, r0, r2
 8001236:	eb65 0303 	sbc.w	r3, r5, r3
 800123a:	2001      	movs	r0, #1
 800123c:	469e      	mov	lr, r3
 800123e:	2e00      	cmp	r6, #0
 8001240:	d0aa      	beq.n	8001198 <__udivmoddi4+0xa4>
 8001242:	e9c6 4e00 	strd	r4, lr, [r6]
 8001246:	e7a7      	b.n	8001198 <__udivmoddi4+0xa4>
 8001248:	409f      	lsls	r7, r3
 800124a:	f1c3 0220 	rsb	r2, r3, #32
 800124e:	40d1      	lsrs	r1, r2
 8001250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001254:	fbb1 f0fe 	udiv	r0, r1, lr
 8001258:	fa1f f887 	uxth.w	r8, r7
 800125c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001260:	fa24 f202 	lsr.w	r2, r4, r2
 8001264:	409d      	lsls	r5, r3
 8001266:	fb00 fc08 	mul.w	ip, r0, r8
 800126a:	432a      	orrs	r2, r5
 800126c:	0c15      	lsrs	r5, r2, #16
 800126e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001272:	45ac      	cmp	ip, r5
 8001274:	fa04 f403 	lsl.w	r4, r4, r3
 8001278:	d909      	bls.n	800128e <__udivmoddi4+0x19a>
 800127a:	197d      	adds	r5, r7, r5
 800127c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001280:	f080 808f 	bcs.w	80013a2 <__udivmoddi4+0x2ae>
 8001284:	45ac      	cmp	ip, r5
 8001286:	f240 808c 	bls.w	80013a2 <__udivmoddi4+0x2ae>
 800128a:	3802      	subs	r0, #2
 800128c:	443d      	add	r5, r7
 800128e:	eba5 050c 	sub.w	r5, r5, ip
 8001292:	fbb5 f1fe 	udiv	r1, r5, lr
 8001296:	fb0e 5c11 	mls	ip, lr, r1, r5
 800129a:	fb01 f908 	mul.w	r9, r1, r8
 800129e:	b295      	uxth	r5, r2
 80012a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80012a4:	45a9      	cmp	r9, r5
 80012a6:	d907      	bls.n	80012b8 <__udivmoddi4+0x1c4>
 80012a8:	197d      	adds	r5, r7, r5
 80012aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80012ae:	d274      	bcs.n	800139a <__udivmoddi4+0x2a6>
 80012b0:	45a9      	cmp	r9, r5
 80012b2:	d972      	bls.n	800139a <__udivmoddi4+0x2a6>
 80012b4:	3902      	subs	r1, #2
 80012b6:	443d      	add	r5, r7
 80012b8:	eba5 0509 	sub.w	r5, r5, r9
 80012bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012c0:	e778      	b.n	80011b4 <__udivmoddi4+0xc0>
 80012c2:	f1c1 0720 	rsb	r7, r1, #32
 80012c6:	408b      	lsls	r3, r1
 80012c8:	fa22 fc07 	lsr.w	ip, r2, r7
 80012cc:	ea4c 0c03 	orr.w	ip, ip, r3
 80012d0:	fa25 f407 	lsr.w	r4, r5, r7
 80012d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80012d8:	fbb4 f9fe 	udiv	r9, r4, lr
 80012dc:	fa1f f88c 	uxth.w	r8, ip
 80012e0:	fb0e 4419 	mls	r4, lr, r9, r4
 80012e4:	fa20 f307 	lsr.w	r3, r0, r7
 80012e8:	fb09 fa08 	mul.w	sl, r9, r8
 80012ec:	408d      	lsls	r5, r1
 80012ee:	431d      	orrs	r5, r3
 80012f0:	0c2b      	lsrs	r3, r5, #16
 80012f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80012f6:	45a2      	cmp	sl, r4
 80012f8:	fa02 f201 	lsl.w	r2, r2, r1
 80012fc:	fa00 f301 	lsl.w	r3, r0, r1
 8001300:	d909      	bls.n	8001316 <__udivmoddi4+0x222>
 8001302:	eb1c 0404 	adds.w	r4, ip, r4
 8001306:	f109 30ff 	add.w	r0, r9, #4294967295
 800130a:	d248      	bcs.n	800139e <__udivmoddi4+0x2aa>
 800130c:	45a2      	cmp	sl, r4
 800130e:	d946      	bls.n	800139e <__udivmoddi4+0x2aa>
 8001310:	f1a9 0902 	sub.w	r9, r9, #2
 8001314:	4464      	add	r4, ip
 8001316:	eba4 040a 	sub.w	r4, r4, sl
 800131a:	fbb4 f0fe 	udiv	r0, r4, lr
 800131e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001322:	fb00 fa08 	mul.w	sl, r0, r8
 8001326:	b2ad      	uxth	r5, r5
 8001328:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800132c:	45a2      	cmp	sl, r4
 800132e:	d908      	bls.n	8001342 <__udivmoddi4+0x24e>
 8001330:	eb1c 0404 	adds.w	r4, ip, r4
 8001334:	f100 35ff 	add.w	r5, r0, #4294967295
 8001338:	d22d      	bcs.n	8001396 <__udivmoddi4+0x2a2>
 800133a:	45a2      	cmp	sl, r4
 800133c:	d92b      	bls.n	8001396 <__udivmoddi4+0x2a2>
 800133e:	3802      	subs	r0, #2
 8001340:	4464      	add	r4, ip
 8001342:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001346:	fba0 8902 	umull	r8, r9, r0, r2
 800134a:	eba4 040a 	sub.w	r4, r4, sl
 800134e:	454c      	cmp	r4, r9
 8001350:	46c6      	mov	lr, r8
 8001352:	464d      	mov	r5, r9
 8001354:	d319      	bcc.n	800138a <__udivmoddi4+0x296>
 8001356:	d016      	beq.n	8001386 <__udivmoddi4+0x292>
 8001358:	b15e      	cbz	r6, 8001372 <__udivmoddi4+0x27e>
 800135a:	ebb3 020e 	subs.w	r2, r3, lr
 800135e:	eb64 0405 	sbc.w	r4, r4, r5
 8001362:	fa04 f707 	lsl.w	r7, r4, r7
 8001366:	fa22 f301 	lsr.w	r3, r2, r1
 800136a:	431f      	orrs	r7, r3
 800136c:	40cc      	lsrs	r4, r1
 800136e:	e9c6 7400 	strd	r7, r4, [r6]
 8001372:	2100      	movs	r1, #0
 8001374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001378:	4631      	mov	r1, r6
 800137a:	4630      	mov	r0, r6
 800137c:	e70c      	b.n	8001198 <__udivmoddi4+0xa4>
 800137e:	468c      	mov	ip, r1
 8001380:	e6eb      	b.n	800115a <__udivmoddi4+0x66>
 8001382:	4610      	mov	r0, r2
 8001384:	e6ff      	b.n	8001186 <__udivmoddi4+0x92>
 8001386:	4543      	cmp	r3, r8
 8001388:	d2e6      	bcs.n	8001358 <__udivmoddi4+0x264>
 800138a:	ebb8 0e02 	subs.w	lr, r8, r2
 800138e:	eb69 050c 	sbc.w	r5, r9, ip
 8001392:	3801      	subs	r0, #1
 8001394:	e7e0      	b.n	8001358 <__udivmoddi4+0x264>
 8001396:	4628      	mov	r0, r5
 8001398:	e7d3      	b.n	8001342 <__udivmoddi4+0x24e>
 800139a:	4611      	mov	r1, r2
 800139c:	e78c      	b.n	80012b8 <__udivmoddi4+0x1c4>
 800139e:	4681      	mov	r9, r0
 80013a0:	e7b9      	b.n	8001316 <__udivmoddi4+0x222>
 80013a2:	4608      	mov	r0, r1
 80013a4:	e773      	b.n	800128e <__udivmoddi4+0x19a>
 80013a6:	4608      	mov	r0, r1
 80013a8:	e749      	b.n	800123e <__udivmoddi4+0x14a>
 80013aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80013ae:	443d      	add	r5, r7
 80013b0:	e713      	b.n	80011da <__udivmoddi4+0xe6>
 80013b2:	3802      	subs	r0, #2
 80013b4:	443c      	add	r4, r7
 80013b6:	e724      	b.n	8001202 <__udivmoddi4+0x10e>

080013b8 <__aeabi_idiv0>:
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop

080013bc <Algo_Init>:
static State currentState = ZEROING_STEPPER;
static uint32_t timeSinceStateEntry;
static uint32_t TimeOfReloadRequest;

void Algo_Init(void const * argument)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	static Mobj UFEC23;

	Temperature_Init();
 80013c4:	f000 f852 	bl	800146c <Temperature_Init>

    for(;;)
    {
    	TemperatureManager(&UFEC23,osKernelSysTick());
 80013c8:	f006 fe2d 	bl	8008026 <osKernelSysTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4619      	mov	r1, r3
 80013d0:	4806      	ldr	r0, [pc, #24]	; (80013ec <Algo_Init+0x30>)
 80013d2:	f000 f885 	bl	80014e0 <TemperatureManager>
    	DebugManager(&UFEC23,osKernelSysTick());
 80013d6:	f006 fe26 	bl	8008026 <osKernelSysTick>
 80013da:	4603      	mov	r3, r0
 80013dc:	4619      	mov	r1, r3
 80013de:	4803      	ldr	r0, [pc, #12]	; (80013ec <Algo_Init+0x30>)
 80013e0:	f000 f806 	bl	80013f0 <DebugManager>
    	osDelay(100);
 80013e4:	2064      	movs	r0, #100	; 0x64
 80013e6:	f006 fe7a 	bl	80080de <osDelay>
    	TemperatureManager(&UFEC23,osKernelSysTick());
 80013ea:	e7ed      	b.n	80013c8 <Algo_Init+0xc>
 80013ec:	20000204 	.word	0x20000204

080013f0 <DebugManager>:
/* Private variables ---------------------------------------------------------*/
/* Private function ---------------------------------------------------------*/


void DebugManager(Mobj * stove, uint32_t u32time_ms)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	static uint32_t u32LastTimeInDebug = 0;

	if(u32time_ms - u32LastTimeInDebug > SECONDS(5))
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <DebugManager+0x50>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f241 3288 	movw	r2, #5000	; 0x1388
 8001406:	4293      	cmp	r3, r2
 8001408:	d916      	bls.n	8001438 <DebugManager+0x48>
	{
		printf("%.2f\r\n",stove->fBaffleTemp);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f87a 	bl	8000508 <__aeabi_f2d>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	480a      	ldr	r0, [pc, #40]	; (8001444 <DebugManager+0x54>)
 800141a:	f00a f8d7 	bl	800b5cc <iprintf>
		printf("%.2f\r\n",stove->fBaffleDeltaT);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f870 	bl	8000508 <__aeabi_f2d>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <DebugManager+0x54>)
 800142e:	f00a f8cd 	bl	800b5cc <iprintf>
		//printf("%.2f\r\n",stove->fChamberTemp);
		//printf("%.2f\r\n",stove->fPlenumTemp);
		u32LastTimeInDebug = u32time_ms;
 8001432:	4a03      	ldr	r2, [pc, #12]	; (8001440 <DebugManager+0x50>)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	6013      	str	r3, [r2, #0]
	}
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	2000021c 	.word	0x2000021c
 8001444:	0800e2f8 	.word	0x0800e2f8

08001448 <__io_putchar>:
 extern "C" {
#endif

extern UART_HandleTypeDef huart1;

int __io_putchar(int ch) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001450:	1d39      	adds	r1, r7, #4
 8001452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001456:	2201      	movs	r2, #1
 8001458:	4803      	ldr	r0, [pc, #12]	; (8001468 <__io_putchar+0x20>)
 800145a:	f006 f8bd 	bl	80075d8 <HAL_UART_Transmit>
  return ch;
 800145e:	687b      	ldr	r3, [r7, #4]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20002c4c 	.word	0x20002c4c

0800146c <Temperature_Init>:
float uVtoDegreeCTypeK(float uVdata,float Tref);
float VtoDegreeCRtd(float Vdata);


void Temperature_Init(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	currentState = Sending_config;
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <Temperature_Init+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
	nextState = Sending_config;
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <Temperature_Init+0x54>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
	b_tx_pending = false;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <Temperature_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <Temperature_Init+0x5c>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <Temperature_Init+0x60>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <Temperature_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
	u32conf_time = 0;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <Temperature_Init+0x68>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
	Tobj.ADCConfigByte[0] = 0x9F;
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <Temperature_Init+0x6c>)
 800149c:	229f      	movs	r2, #159	; 0x9f
 800149e:	741a      	strb	r2, [r3, #16]
	Tobj.ADCConfigByte[1] = 0xBF;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <Temperature_Init+0x6c>)
 80014a2:	22bf      	movs	r2, #191	; 0xbf
 80014a4:	745a      	strb	r2, [r3, #17]
	Tobj.ADCConfigByte[2] = 0xDC;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <Temperature_Init+0x6c>)
 80014a8:	22dc      	movs	r2, #220	; 0xdc
 80014aa:	749a      	strb	r2, [r3, #18]
	Tobj.ADCConfigByte[3] = 0xFC;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <Temperature_Init+0x6c>)
 80014ae:	22fc      	movs	r2, #252	; 0xfc
 80014b0:	74da      	strb	r2, [r3, #19]
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000022c 	.word	0x2000022c
 80014c0:	2000022d 	.word	0x2000022d
 80014c4:	20000220 	.word	0x20000220
 80014c8:	20000221 	.word	0x20000221
 80014cc:	20000222 	.word	0x20000222
 80014d0:	20000223 	.word	0x20000223
 80014d4:	20000224 	.word	0x20000224
 80014d8:	20000230 	.word	0x20000230
 80014dc:	00000000 	.word	0x00000000

080014e0 <TemperatureManager>:



void TemperatureManager(Mobj* stove, uint32_t u32time_ms)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	static int8_t ch_idx = NUMBER_OF_ADC_CH - 1;
	int32_t i32tempReading=0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
	float ftempReading = 0.0;
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
	float flastReading = 0.0;
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
	const float slope_filter_weight = 0.2;
 80014fa:	4b85      	ldr	r3, [pc, #532]	; (8001710 <TemperatureManager+0x230>)
 80014fc:	60bb      	str	r3, [r7, #8]

	switch(currentState)
 80014fe:	4b85      	ldr	r3, [pc, #532]	; (8001714 <TemperatureManager+0x234>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b03      	cmp	r3, #3
 8001504:	f200 820a 	bhi.w	800191c <TemperatureManager+0x43c>
 8001508:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <TemperatureManager+0x30>)
 800150a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150e:	bf00      	nop
 8001510:	08001521 	.word	0x08001521
 8001514:	0800156b 	.word	0x0800156b
 8001518:	08001583 	.word	0x08001583
 800151c:	080015cf 	.word	0x080015cf
	{
	case Sending_config:
		if(b_tx_success)
 8001520:	4b7d      	ldr	r3, [pc, #500]	; (8001718 <TemperatureManager+0x238>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d009      	beq.n	800153c <TemperatureManager+0x5c>
		{
			b_tx_success = false;
 8001528:	4b7b      	ldr	r3, [pc, #492]	; (8001718 <TemperatureManager+0x238>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
			nextState = Wait_for_data_rdy;
 800152e:	4b7b      	ldr	r3, [pc, #492]	; (800171c <TemperatureManager+0x23c>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
			u32conf_time = u32time_ms;
 8001534:	4a7a      	ldr	r2, [pc, #488]	; (8001720 <TemperatureManager+0x240>)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	6013      	str	r3, [r2, #0]
		else if(!b_tx_pending)
		{
			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&Tobj.ADCConfigByte[ch_idx],1);
			b_tx_pending = true;
		}
		break;
 800153a:	e1e8      	b.n	800190e <TemperatureManager+0x42e>
		else if(!b_tx_pending)
 800153c:	4b79      	ldr	r3, [pc, #484]	; (8001724 <TemperatureManager+0x244>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	f083 0301 	eor.w	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 81e1 	beq.w	800190e <TemperatureManager+0x42e>
			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&Tobj.ADCConfigByte[ch_idx],1);
 800154c:	4b76      	ldr	r3, [pc, #472]	; (8001728 <TemperatureManager+0x248>)
 800154e:	f993 3000 	ldrsb.w	r3, [r3]
 8001552:	3310      	adds	r3, #16
 8001554:	4a75      	ldr	r2, [pc, #468]	; (800172c <TemperatureManager+0x24c>)
 8001556:	441a      	add	r2, r3
 8001558:	2301      	movs	r3, #1
 800155a:	21d0      	movs	r1, #208	; 0xd0
 800155c:	4874      	ldr	r0, [pc, #464]	; (8001730 <TemperatureManager+0x250>)
 800155e:	f002 fbf1 	bl	8003d44 <HAL_I2C_Master_Transmit_IT>
			b_tx_pending = true;
 8001562:	4b70      	ldr	r3, [pc, #448]	; (8001724 <TemperatureManager+0x244>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
		break;
 8001568:	e1d1      	b.n	800190e <TemperatureManager+0x42e>
	case Wait_for_data_rdy:
		if(u32time_ms - u32conf_time > 300) //Conversion time around 266 ms
 800156a:	4b6d      	ldr	r3, [pc, #436]	; (8001720 <TemperatureManager+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001576:	f240 81cc 	bls.w	8001912 <TemperatureManager+0x432>
		{
			nextState = Send_read_req;
 800157a:	4b68      	ldr	r3, [pc, #416]	; (800171c <TemperatureManager+0x23c>)
 800157c:	2202      	movs	r2, #2
 800157e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001580:	e1c7      	b.n	8001912 <TemperatureManager+0x432>
	case Send_read_req:

		if(b_rx_success)
 8001582:	4b6c      	ldr	r3, [pc, #432]	; (8001734 <TemperatureManager+0x254>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00f      	beq.n	80015aa <TemperatureManager+0xca>
		{
			b_rx_success = false;
 800158a:	4b6a      	ldr	r3, [pc, #424]	; (8001734 <TemperatureManager+0x254>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
			if(IsDataNew(adcData[3]))
 8001590:	4b69      	ldr	r3, [pc, #420]	; (8001738 <TemperatureManager+0x258>)
 8001592:	78db      	ldrb	r3, [r3, #3]
 8001594:	b25b      	sxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	f2c0 81bd 	blt.w	8001916 <TemperatureManager+0x436>
			{
				adcData[3] = 0;
 800159c:	4b66      	ldr	r3, [pc, #408]	; (8001738 <TemperatureManager+0x258>)
 800159e:	2200      	movs	r2, #0
 80015a0:	70da      	strb	r2, [r3, #3]
				nextState = Response_received;
 80015a2:	4b5e      	ldr	r3, [pc, #376]	; (800171c <TemperatureManager+0x23c>)
 80015a4:	2203      	movs	r2, #3
 80015a6:	701a      	strb	r2, [r3, #0]
		{
			HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
			b_rx_pending = true;
		}

		break;
 80015a8:	e1b5      	b.n	8001916 <TemperatureManager+0x436>
		else if(!b_rx_pending)
 80015aa:	4b64      	ldr	r3, [pc, #400]	; (800173c <TemperatureManager+0x25c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f083 0301 	eor.w	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 81ae 	beq.w	8001916 <TemperatureManager+0x436>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
 80015ba:	2304      	movs	r3, #4
 80015bc:	4a5e      	ldr	r2, [pc, #376]	; (8001738 <TemperatureManager+0x258>)
 80015be:	21d0      	movs	r1, #208	; 0xd0
 80015c0:	485b      	ldr	r0, [pc, #364]	; (8001730 <TemperatureManager+0x250>)
 80015c2:	f002 fc63 	bl	8003e8c <HAL_I2C_Master_Receive_IT>
			b_rx_pending = true;
 80015c6:	4b5d      	ldr	r3, [pc, #372]	; (800173c <TemperatureManager+0x25c>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
		break;
 80015cc:	e1a3      	b.n	8001916 <TemperatureManager+0x436>
	case Response_received:
		i32tempReading = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
		i32tempReading = (adcData[0] << 30) + (adcData[1] << 22)  + (adcData[2] << 14); // justify the result for 32bit storage
 80015d2:	4b59      	ldr	r3, [pc, #356]	; (8001738 <TemperatureManager+0x258>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	079a      	lsls	r2, r3, #30
 80015d8:	4b57      	ldr	r3, [pc, #348]	; (8001738 <TemperatureManager+0x258>)
 80015da:	785b      	ldrb	r3, [r3, #1]
 80015dc:	059b      	lsls	r3, r3, #22
 80015de:	441a      	add	r2, r3
 80015e0:	4b55      	ldr	r3, [pc, #340]	; (8001738 <TemperatureManager+0x258>)
 80015e2:	789b      	ldrb	r3, [r3, #2]
 80015e4:	039b      	lsls	r3, r3, #14
 80015e6:	4413      	add	r3, r2
 80015e8:	617b      	str	r3, [r7, #20]
		if (i32tempReading < 0)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da02      	bge.n	80015f6 <TemperatureManager+0x116>
		{
			i32tempReading = -i32tempReading;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	425b      	negs	r3, r3
 80015f4:	617b      	str	r3, [r7, #20]
		}
		i32tempReading = (i32tempReading) >> 14;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	139b      	asrs	r3, r3, #14
 80015fa:	617b      	str	r3, [r7, #20]

		switch(ch_idx)
 80015fc:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <TemperatureManager+0x248>)
 80015fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001602:	2b03      	cmp	r3, #3
 8001604:	f200 8170 	bhi.w	80018e8 <TemperatureManager+0x408>
 8001608:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <TemperatureManager+0x130>)
 800160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160e:	bf00      	nop
 8001610:	08001621 	.word	0x08001621
 8001614:	08001755 	.word	0x08001755
 8001618:	08001843 	.word	0x08001843
 800161c:	08001893 	.word	0x08001893
		{
			case BaffleThermocouple:
				ftempReading = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 8001620:	6978      	ldr	r0, [r7, #20]
 8001622:	f7ff fbab 	bl	8000d7c <__aeabi_i2f>
 8001626:	4603      	mov	r3, r0
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff6d 	bl	8000508 <__aeabi_f2d>
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	4b43      	ldr	r3, [pc, #268]	; (8001740 <TemperatureManager+0x260>)
 8001634:	f7fe ffc0 	bl	80005b8 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <TemperatureManager+0x264>)
 8001646:	f7ff f8e1 	bl	800080c <__aeabi_ddiv>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fa89 	bl	8000b68 <__aeabi_d2f>
 8001656:	4603      	mov	r3, r0
 8001658:	613b      	str	r3, [r7, #16]
				flastReading = stove->fBaffleTemp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	60fb      	str	r3, [r7, #12]
				stove->fBaffleTemp = CELSIUS_TO_FAHRENHEIT(uVtoDegreeCTypeK(ftempReading, Tobj.fTcoldJunct)); //6.7//26.1 //board is self heating to 7.3 above ambient
 8001660:	4b32      	ldr	r3, [pc, #200]	; (800172c <TemperatureManager+0x24c>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4619      	mov	r1, r3
 8001666:	6938      	ldr	r0, [r7, #16]
 8001668:	f000 f9ea 	bl	8001a40 <uVtoDegreeCTypeK>
 800166c:	4603      	mov	r3, r0
 800166e:	4936      	ldr	r1, [pc, #216]	; (8001748 <TemperatureManager+0x268>)
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fbd7 	bl	8000e24 <__aeabi_fmul>
 8001676:	4603      	mov	r3, r0
 8001678:	4934      	ldr	r1, [pc, #208]	; (800174c <TemperatureManager+0x26c>)
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fc86 	bl	8000f8c <__aeabi_fdiv>
 8001680:	4603      	mov	r3, r0
 8001682:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fac4 	bl	8000c14 <__addsf3>
 800168c:	4603      	mov	r3, r0
 800168e:	461a      	mov	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	601a      	str	r2, [r3, #0]

				if(Tobj.u32LastTimeBaffle !=0)
 8001694:	4b25      	ldr	r3, [pc, #148]	; (800172c <TemperatureManager+0x24c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d034      	beq.n	8001706 <TemperatureManager+0x226>
				{
					stove->fBaffleDeltaT =  slope_filter_weight*stove->fBaffleDeltaT +
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fbbe 	bl	8000e24 <__aeabi_fmul>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461c      	mov	r4, r3
							(1-slope_filter_weight)*(stove->fBaffleTemp-flastReading)/((u32time_ms-Tobj.u32LastTimeBaffle)/1000);
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80016b2:	f7ff faad 	bl	8000c10 <__aeabi_fsub>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461d      	mov	r5, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68f9      	ldr	r1, [r7, #12]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff faa5 	bl	8000c10 <__aeabi_fsub>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4619      	mov	r1, r3
 80016ca:	4628      	mov	r0, r5
 80016cc:	f7ff fbaa 	bl	8000e24 <__aeabi_fmul>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461d      	mov	r5, r3
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <TemperatureManager+0x24c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <TemperatureManager+0x270>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	099b      	lsrs	r3, r3, #6
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb45 	bl	8000d74 <__aeabi_ui2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4619      	mov	r1, r3
 80016ee:	4628      	mov	r0, r5
 80016f0:	f7ff fc4c 	bl	8000f8c <__aeabi_fdiv>
 80016f4:	4603      	mov	r3, r0
					stove->fBaffleDeltaT =  slope_filter_weight*stove->fBaffleDeltaT +
 80016f6:	4619      	mov	r1, r3
 80016f8:	4620      	mov	r0, r4
 80016fa:	f7ff fa8b 	bl	8000c14 <__addsf3>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60da      	str	r2, [r3, #12]
				}

				Tobj.u32LastTimeBaffle = u32time_ms;
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <TemperatureManager+0x24c>)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	6013      	str	r3, [r2, #0]

				break;
 800170c:	e0ed      	b.n	80018ea <TemperatureManager+0x40a>
 800170e:	bf00      	nop
 8001710:	3e4ccccd 	.word	0x3e4ccccd
 8001714:	2000022c 	.word	0x2000022c
 8001718:	20000221 	.word	0x20000221
 800171c:	2000022d 	.word	0x2000022d
 8001720:	20000224 	.word	0x20000224
 8001724:	20000220 	.word	0x20000220
 8001728:	20000000 	.word	0x20000000
 800172c:	20000230 	.word	0x20000230
 8001730:	20002bf8 	.word	0x20002bf8
 8001734:	20000223 	.word	0x20000223
 8001738:	20000228 	.word	0x20000228
 800173c:	20000222 	.word	0x20000222
 8001740:	402f4000 	.word	0x402f4000
 8001744:	40200000 	.word	0x40200000
 8001748:	41100000 	.word	0x41100000
 800174c:	40a00000 	.word	0x40a00000
 8001750:	10624dd3 	.word	0x10624dd3
			case ChamberThermocouple:
				ftempReading = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 8001754:	6978      	ldr	r0, [r7, #20]
 8001756:	f7ff fb11 	bl	8000d7c <__aeabi_i2f>
 800175a:	4603      	mov	r3, r0
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fed3 	bl	8000508 <__aeabi_f2d>
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	4b78      	ldr	r3, [pc, #480]	; (8001948 <TemperatureManager+0x468>)
 8001768:	f7fe ff26 	bl	80005b8 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	4b74      	ldr	r3, [pc, #464]	; (800194c <TemperatureManager+0x46c>)
 800177a:	f7ff f847 	bl	800080c <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff f9ef 	bl	8000b68 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
 800178c:	613b      	str	r3, [r7, #16]
				flastReading = stove->fChamberTemp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	60fb      	str	r3, [r7, #12]
				stove->fChamberTemp = CELSIUS_TO_FAHRENHEIT(uVtoDegreeCTypeK(ftempReading, Tobj.fTcoldJunct)); //6.7//26.1 //board is self heating to 7.3 above ambient
 8001794:	4b6e      	ldr	r3, [pc, #440]	; (8001950 <TemperatureManager+0x470>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4619      	mov	r1, r3
 800179a:	6938      	ldr	r0, [r7, #16]
 800179c:	f000 f950 	bl	8001a40 <uVtoDegreeCTypeK>
 80017a0:	4603      	mov	r3, r0
 80017a2:	496c      	ldr	r1, [pc, #432]	; (8001954 <TemperatureManager+0x474>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fb3d 	bl	8000e24 <__aeabi_fmul>
 80017aa:	4603      	mov	r3, r0
 80017ac:	496a      	ldr	r1, [pc, #424]	; (8001958 <TemperatureManager+0x478>)
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fbec 	bl	8000f8c <__aeabi_fdiv>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fa2a 	bl	8000c14 <__addsf3>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	605a      	str	r2, [r3, #4]

				if(Tobj.u32LastTimeChamber !=0)
 80017c8:	4b61      	ldr	r3, [pc, #388]	; (8001950 <TemperatureManager+0x470>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d034      	beq.n	800183a <TemperatureManager+0x35a>
				{
					stove->fChamberDeltaT =  slope_filter_weight*stove->fChamberDeltaT +
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fb24 	bl	8000e24 <__aeabi_fmul>
 80017dc:	4603      	mov	r3, r0
 80017de:	461c      	mov	r4, r3
											(1-slope_filter_weight)*(stove->fChamberTemp-flastReading)/((u32time_ms-Tobj.u32LastTimeChamber)/1000);
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80017e6:	f7ff fa13 	bl	8000c10 <__aeabi_fsub>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461d      	mov	r5, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	68f9      	ldr	r1, [r7, #12]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fa0b 	bl	8000c10 <__aeabi_fsub>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4619      	mov	r1, r3
 80017fe:	4628      	mov	r0, r5
 8001800:	f7ff fb10 	bl	8000e24 <__aeabi_fmul>
 8001804:	4603      	mov	r3, r0
 8001806:	461d      	mov	r5, r3
 8001808:	4b51      	ldr	r3, [pc, #324]	; (8001950 <TemperatureManager+0x470>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	4a52      	ldr	r2, [pc, #328]	; (800195c <TemperatureManager+0x47c>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff faab 	bl	8000d74 <__aeabi_ui2f>
 800181e:	4603      	mov	r3, r0
 8001820:	4619      	mov	r1, r3
 8001822:	4628      	mov	r0, r5
 8001824:	f7ff fbb2 	bl	8000f8c <__aeabi_fdiv>
 8001828:	4603      	mov	r3, r0
					stove->fChamberDeltaT =  slope_filter_weight*stove->fChamberDeltaT +
 800182a:	4619      	mov	r1, r3
 800182c:	4620      	mov	r0, r4
 800182e:	f7ff f9f1 	bl	8000c14 <__addsf3>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	611a      	str	r2, [r3, #16]
				}

				Tobj.u32LastTimeChamber = u32time_ms;
 800183a:	4a45      	ldr	r2, [pc, #276]	; (8001950 <TemperatureManager+0x470>)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	6053      	str	r3, [r2, #4]
				break;
 8001840:	e053      	b.n	80018ea <TemperatureManager+0x40a>
			case PlenumRtd:
				ftempReading = (float)(i32tempReading*15.625e-6);
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7fe fe4e 	bl	80004e4 <__aeabi_i2d>
 8001848:	a33b      	add	r3, pc, #236	; (adr r3, 8001938 <TemperatureManager+0x458>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe feb3 	bl	80005b8 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff f985 	bl	8000b68 <__aeabi_d2f>
 800185e:	4603      	mov	r3, r0
 8001860:	613b      	str	r3, [r7, #16]
				stove->fPlenumTemp = CELSIUS_TO_FAHRENHEIT(VtoDegreeCRtd(ftempReading));
 8001862:	6938      	ldr	r0, [r7, #16]
 8001864:	f000 fc10 	bl	8002088 <VtoDegreeCRtd>
 8001868:	4603      	mov	r3, r0
 800186a:	493a      	ldr	r1, [pc, #232]	; (8001954 <TemperatureManager+0x474>)
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fad9 	bl	8000e24 <__aeabi_fmul>
 8001872:	4603      	mov	r3, r0
 8001874:	4938      	ldr	r1, [pc, #224]	; (8001958 <TemperatureManager+0x478>)
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fb88 	bl	8000f8c <__aeabi_fdiv>
 800187c:	4603      	mov	r3, r0
 800187e:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff f9c6 	bl	8000c14 <__addsf3>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	609a      	str	r2, [r3, #8]

				break;
 8001890:	e02b      	b.n	80018ea <TemperatureManager+0x40a>
			case TempSense_board:
				ftempReading = (float)(i32tempReading*15.625e-6);
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7fe fe26 	bl	80004e4 <__aeabi_i2d>
 8001898:	a327      	add	r3, pc, #156	; (adr r3, 8001938 <TemperatureManager+0x458>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe fe8b 	bl	80005b8 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f95d 	bl	8000b68 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	613b      	str	r3, [r7, #16]
				Tobj.fTcoldJunct = (ftempReading-0.500)/.010;
 80018b2:	6938      	ldr	r0, [r7, #16]
 80018b4:	f7fe fe28 	bl	8000508 <__aeabi_f2d>
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <TemperatureManager+0x480>)
 80018be:	f7fe fcc3 	bl	8000248 <__aeabi_dsub>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	a31d      	add	r3, pc, #116	; (adr r3, 8001940 <TemperatureManager+0x460>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe ff9c 	bl	800080c <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f944 	bl	8000b68 <__aeabi_d2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <TemperatureManager+0x470>)
 80018e4:	60d3      	str	r3, [r2, #12]
				break;
 80018e6:	e000      	b.n	80018ea <TemperatureManager+0x40a>
			default:
				break;
 80018e8:	bf00      	nop
		}

		nextState = Sending_config;
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <TemperatureManager+0x484>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
		if(ch_idx-- < 0)
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <TemperatureManager+0x488>)
 80018f2:	f993 3000 	ldrsb.w	r3, [r3]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	3a01      	subs	r2, #1
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	b251      	sxtb	r1, r2
 80018fe:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <TemperatureManager+0x488>)
 8001900:	7011      	strb	r1, [r2, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	da09      	bge.n	800191a <TemperatureManager+0x43a>
		{
			ch_idx = NUMBER_OF_ADC_CH - 1;
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <TemperatureManager+0x488>)
 8001908:	2203      	movs	r2, #3
 800190a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800190c:	e005      	b.n	800191a <TemperatureManager+0x43a>
		break;
 800190e:	bf00      	nop
 8001910:	e004      	b.n	800191c <TemperatureManager+0x43c>
		break;
 8001912:	bf00      	nop
 8001914:	e002      	b.n	800191c <TemperatureManager+0x43c>
		break;
 8001916:	bf00      	nop
 8001918:	e000      	b.n	800191c <TemperatureManager+0x43c>
		break;
 800191a:	bf00      	nop
	}

	if(nextState != currentState)
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <TemperatureManager+0x484>)
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <TemperatureManager+0x48c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d003      	beq.n	8001930 <TemperatureManager+0x450>
	{
		currentState = nextState;
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <TemperatureManager+0x484>)
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <TemperatureManager+0x48c>)
 800192e:	701a      	strb	r2, [r3, #0]
	}

}
 8001930:	bf00      	nop
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bdb0      	pop	{r4, r5, r7, pc}
 8001938:	d2f1a9fc 	.word	0xd2f1a9fc
 800193c:	3ef0624d 	.word	0x3ef0624d
 8001940:	47ae147b 	.word	0x47ae147b
 8001944:	3f847ae1 	.word	0x3f847ae1
 8001948:	402f4000 	.word	0x402f4000
 800194c:	40200000 	.word	0x40200000
 8001950:	20000230 	.word	0x20000230
 8001954:	41100000 	.word	0x41100000
 8001958:	40a00000 	.word	0x40a00000
 800195c:	10624dd3 	.word	0x10624dd3
 8001960:	3fe00000 	.word	0x3fe00000
 8001964:	2000022d 	.word	0x2000022d
 8001968:	20000000 	.word	0x20000000
 800196c:	2000022c 	.word	0x2000022c

08001970 <HAL_I2C_MasterTxCpltCallback>:
{
	return Tboard;
}

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	b_tx_success = true;
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_I2C_MasterTxCpltCallback+0x20>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
	b_tx_pending = false;
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000221 	.word	0x20000221
 8001994:	20000220 	.word	0x20000220

08001998 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	b_rx_success = true;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_I2C_MasterRxCpltCallback+0x20>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_I2C_MasterRxCpltCallback+0x24>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000223 	.word	0x20000223
 80019bc:	20000222 	.word	0x20000222

080019c0 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	b_tx_pending = false;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_I2C_ErrorCallback+0x30>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_I2C_ErrorCallback+0x34>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_I2C_ErrorCallback+0x38>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_I2C_ErrorCallback+0x3c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
	uint32_t errorcode = hi2c->ErrorCode;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	60fb      	str	r3, [r7, #12]
	UNUSED(errorcode);
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	20000220 	.word	0x20000220
 80019f4:	20000221 	.word	0x20000221
 80019f8:	20000222 	.word	0x20000222
 80019fc:	20000223 	.word	0x20000223

08001a00 <HAL_I2C_AbortCpltCallback>:
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	b_tx_pending = false;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_I2C_AbortCpltCallback+0x30>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_I2C_AbortCpltCallback+0x34>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_I2C_AbortCpltCallback+0x38>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_I2C_AbortCpltCallback+0x3c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
	uint32_t errorcode = hi2c->ErrorCode;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	60fb      	str	r3, [r7, #12]
	UNUSED(errorcode);
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	20000220 	.word	0x20000220
 8001a34:	20000221 	.word	0x20000221
 8001a38:	20000222 	.word	0x20000222
 8001a3c:	20000223 	.word	0x20000223

08001a40 <uVtoDegreeCTypeK>:
#define T_COEF_A0 1.185976E-1
#define T_COEF_A1 -1.183432E-4
#define T_COEF_A2 1.269686E2

float uVtoDegreeCTypeK(float uVdata,float Tref)
{
 8001a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a44:	b08a      	sub	sp, #40	; 0x28
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
    double Vref = T_COEF_C0 + T_COEF_C1*Tref + T_COEF_C2*pow(Tref,2) + T_COEF_C3*pow(Tref,3) + T_COEF_C4*pow(Tref,4) + T_COEF_C5*pow(Tref,5) + T_COEF_C6*pow(Tref,6) + T_COEF_C7*pow(Tref,7) + T_COEF_C8*pow(Tref,8) + T_COEF_C9*pow(Tref,9)+T_COEF_A0*pow(2.718281828,T_COEF_A1*(Tref-T_COEF_A2)*(Tref-T_COEF_A2));
 8001a4c:	6838      	ldr	r0, [r7, #0]
 8001a4e:	f7fe fd5b 	bl	8000508 <__aeabi_f2d>
 8001a52:	a3cd      	add	r3, pc, #820	; (adr r3, 8001d88 <uVtoDegreeCTypeK+0x348>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fdae 	bl	80005b8 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	a3ca      	add	r3, pc, #808	; (adr r3, 8001d90 <uVtoDegreeCTypeK+0x350>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fbed 	bl	8000248 <__aeabi_dsub>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4614      	mov	r4, r2
 8001a74:	461d      	mov	r5, r3
 8001a76:	6838      	ldr	r0, [r7, #0]
 8001a78:	f7fe fd46 	bl	8000508 <__aeabi_f2d>
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a84:	f00b fc9a 	bl	800d3bc <pow>
 8001a88:	a3c3      	add	r3, pc, #780	; (adr r3, 8001d98 <uVtoDegreeCTypeK+0x358>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fd93 	bl	80005b8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4620      	mov	r0, r4
 8001a98:	4629      	mov	r1, r5
 8001a9a:	f7fe fbd7 	bl	800024c <__adddf3>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4614      	mov	r4, r2
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	6838      	ldr	r0, [r7, #0]
 8001aa8:	f7fe fd2e 	bl	8000508 <__aeabi_f2d>
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4bdd      	ldr	r3, [pc, #884]	; (8001e28 <uVtoDegreeCTypeK+0x3e8>)
 8001ab2:	f00b fc83 	bl	800d3bc <pow>
 8001ab6:	a3ba      	add	r3, pc, #744	; (adr r3, 8001da0 <uVtoDegreeCTypeK+0x360>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fd7c 	bl	80005b8 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	f7fe fbc0 	bl	800024c <__adddf3>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	6838      	ldr	r0, [r7, #0]
 8001ad6:	f7fe fd17 	bl	8000508 <__aeabi_f2d>
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4bd3      	ldr	r3, [pc, #844]	; (8001e2c <uVtoDegreeCTypeK+0x3ec>)
 8001ae0:	f00b fc6c 	bl	800d3bc <pow>
 8001ae4:	a3b0      	add	r3, pc, #704	; (adr r3, 8001da8 <uVtoDegreeCTypeK+0x368>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fd65 	bl	80005b8 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f7fe fba9 	bl	800024c <__adddf3>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4614      	mov	r4, r2
 8001b00:	461d      	mov	r5, r3
 8001b02:	6838      	ldr	r0, [r7, #0]
 8001b04:	f7fe fd00 	bl	8000508 <__aeabi_f2d>
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	4bc8      	ldr	r3, [pc, #800]	; (8001e30 <uVtoDegreeCTypeK+0x3f0>)
 8001b0e:	f00b fc55 	bl	800d3bc <pow>
 8001b12:	a3a7      	add	r3, pc, #668	; (adr r3, 8001db0 <uVtoDegreeCTypeK+0x370>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fd4e 	bl	80005b8 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4620      	mov	r0, r4
 8001b22:	4629      	mov	r1, r5
 8001b24:	f7fe fb92 	bl	800024c <__adddf3>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4614      	mov	r4, r2
 8001b2e:	461d      	mov	r5, r3
 8001b30:	6838      	ldr	r0, [r7, #0]
 8001b32:	f7fe fce9 	bl	8000508 <__aeabi_f2d>
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	4bbe      	ldr	r3, [pc, #760]	; (8001e34 <uVtoDegreeCTypeK+0x3f4>)
 8001b3c:	f00b fc3e 	bl	800d3bc <pow>
 8001b40:	a39d      	add	r3, pc, #628	; (adr r3, 8001db8 <uVtoDegreeCTypeK+0x378>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe fd37 	bl	80005b8 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4620      	mov	r0, r4
 8001b50:	4629      	mov	r1, r5
 8001b52:	f7fe fb7b 	bl	800024c <__adddf3>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4614      	mov	r4, r2
 8001b5c:	461d      	mov	r5, r3
 8001b5e:	6838      	ldr	r0, [r7, #0]
 8001b60:	f7fe fcd2 	bl	8000508 <__aeabi_f2d>
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4bb3      	ldr	r3, [pc, #716]	; (8001e38 <uVtoDegreeCTypeK+0x3f8>)
 8001b6a:	f00b fc27 	bl	800d3bc <pow>
 8001b6e:	a394      	add	r3, pc, #592	; (adr r3, 8001dc0 <uVtoDegreeCTypeK+0x380>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fd20 	bl	80005b8 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	4629      	mov	r1, r5
 8001b80:	f7fe fb64 	bl	800024c <__adddf3>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4614      	mov	r4, r2
 8001b8a:	461d      	mov	r5, r3
 8001b8c:	6838      	ldr	r0, [r7, #0]
 8001b8e:	f7fe fcbb 	bl	8000508 <__aeabi_f2d>
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	4ba9      	ldr	r3, [pc, #676]	; (8001e3c <uVtoDegreeCTypeK+0x3fc>)
 8001b98:	f00b fc10 	bl	800d3bc <pow>
 8001b9c:	a38a      	add	r3, pc, #552	; (adr r3, 8001dc8 <uVtoDegreeCTypeK+0x388>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fd09 	bl	80005b8 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4620      	mov	r0, r4
 8001bac:	4629      	mov	r1, r5
 8001bae:	f7fe fb4d 	bl	800024c <__adddf3>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4614      	mov	r4, r2
 8001bb8:	461d      	mov	r5, r3
 8001bba:	6838      	ldr	r0, [r7, #0]
 8001bbc:	f7fe fca4 	bl	8000508 <__aeabi_f2d>
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	4b9e      	ldr	r3, [pc, #632]	; (8001e40 <uVtoDegreeCTypeK+0x400>)
 8001bc6:	f00b fbf9 	bl	800d3bc <pow>
 8001bca:	a381      	add	r3, pc, #516	; (adr r3, 8001dd0 <uVtoDegreeCTypeK+0x390>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	f7fe fcf2 	bl	80005b8 <__aeabi_dmul>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4620      	mov	r0, r4
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f7fe fb36 	bl	800024c <__adddf3>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4614      	mov	r4, r2
 8001be6:	461d      	mov	r5, r3
 8001be8:	6838      	ldr	r0, [r7, #0]
 8001bea:	f7fe fc8d 	bl	8000508 <__aeabi_f2d>
 8001bee:	a37a      	add	r3, pc, #488	; (adr r3, 8001dd8 <uVtoDegreeCTypeK+0x398>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	f7fe fb28 	bl	8000248 <__aeabi_dsub>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	a377      	add	r3, pc, #476	; (adr r3, 8001de0 <uVtoDegreeCTypeK+0x3a0>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fcd7 	bl	80005b8 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4690      	mov	r8, r2
 8001c10:	4699      	mov	r9, r3
 8001c12:	6838      	ldr	r0, [r7, #0]
 8001c14:	f7fe fc78 	bl	8000508 <__aeabi_f2d>
 8001c18:	a36f      	add	r3, pc, #444	; (adr r3, 8001dd8 <uVtoDegreeCTypeK+0x398>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe fb13 	bl	8000248 <__aeabi_dsub>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4640      	mov	r0, r8
 8001c28:	4649      	mov	r1, r9
 8001c2a:	f7fe fcc5 	bl	80005b8 <__aeabi_dmul>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	a16d      	add	r1, pc, #436	; (adr r1, 8001de8 <uVtoDegreeCTypeK+0x3a8>)
 8001c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c38:	f00b fbc0 	bl	800d3bc <pow>
 8001c3c:	a36c      	add	r3, pc, #432	; (adr r3, 8001df0 <uVtoDegreeCTypeK+0x3b0>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fcb9 	bl	80005b8 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7fe fafd 	bl	800024c <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double Vmeas = uVdata/1000; //value need to be in mV
 8001c5a:	497a      	ldr	r1, [pc, #488]	; (8001e44 <uVtoDegreeCTypeK+0x404>)
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff f995 	bl	8000f8c <__aeabi_fdiv>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc4f 	bl	8000508 <__aeabi_f2d>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double totalV = Vmeas + Vref;
 8001c72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c7a:	f7fe fae7 	bl	800024c <__adddf3>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	e9c7 2302 	strd	r2, r3, [r7, #8]

    double t90;
    if(totalV < 20.644)
 8001c86:	a35c      	add	r3, pc, #368	; (adr r3, 8001df8 <uVtoDegreeCTypeK+0x3b8>)
 8001c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c90:	f7fe ff04 	bl	8000a9c <__aeabi_dcmplt>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 812a 	beq.w	8001ef0 <uVtoDegreeCTypeK+0x4b0>
    {
     t90 = T_COEF_D0_0_500 + T_COEF_D1_0_500 *totalV + T_COEF_D2_0_500 *pow(totalV,2) + T_COEF_D3_0_500 *pow(totalV,3) + T_COEF_D4_0_500 *pow(totalV,4) + T_COEF_D5_0_500 *pow(totalV,5) + T_COEF_D6_0_500 *pow(totalV,6) + T_COEF_D7_0_500 *pow(totalV,7) + T_COEF_D8_0_500 *pow(totalV,8) + T_COEF_D9_0_500 *pow(totalV,9);
 8001c9c:	a358      	add	r3, pc, #352	; (adr r3, 8001e00 <uVtoDegreeCTypeK+0x3c0>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ca6:	f7fe fc87 	bl	80005b8 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	f7fe fac7 	bl	800024c <__adddf3>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4614      	mov	r4, r2
 8001cc4:	461d      	mov	r5, r3
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cd2:	f00b fb73 	bl	800d3bc <pow>
 8001cd6:	a34c      	add	r3, pc, #304	; (adr r3, 8001e08 <uVtoDegreeCTypeK+0x3c8>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fc6c 	bl	80005b8 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	f7fe fab0 	bl	800024c <__adddf3>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4614      	mov	r4, r2
 8001cf2:	461d      	mov	r5, r3
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b4b      	ldr	r3, [pc, #300]	; (8001e28 <uVtoDegreeCTypeK+0x3e8>)
 8001cfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cfe:	f00b fb5d 	bl	800d3bc <pow>
 8001d02:	a343      	add	r3, pc, #268	; (adr r3, 8001e10 <uVtoDegreeCTypeK+0x3d0>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fc56 	bl	80005b8 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4620      	mov	r0, r4
 8001d12:	4629      	mov	r1, r5
 8001d14:	f7fe fa9a 	bl	800024c <__adddf3>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4614      	mov	r4, r2
 8001d1e:	461d      	mov	r5, r3
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <uVtoDegreeCTypeK+0x3ec>)
 8001d26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d2a:	f00b fb47 	bl	800d3bc <pow>
 8001d2e:	a33a      	add	r3, pc, #232	; (adr r3, 8001e18 <uVtoDegreeCTypeK+0x3d8>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc40 	bl	80005b8 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	4629      	mov	r1, r5
 8001d40:	f7fe fa84 	bl	800024c <__adddf3>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4614      	mov	r4, r2
 8001d4a:	461d      	mov	r5, r3
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <uVtoDegreeCTypeK+0x3f0>)
 8001d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d56:	f00b fb31 	bl	800d3bc <pow>
 8001d5a:	a331      	add	r3, pc, #196	; (adr r3, 8001e20 <uVtoDegreeCTypeK+0x3e0>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fc2a 	bl	80005b8 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f7fe fa6e 	bl	800024c <__adddf3>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4614      	mov	r4, r2
 8001d76:	461d      	mov	r5, r3
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <uVtoDegreeCTypeK+0x3f4>)
 8001d7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d82:	e061      	b.n	8001e48 <uVtoDegreeCTypeK+0x408>
 8001d84:	f3af 8000 	nop.w
 8001d88:	ecfa2196 	.word	0xecfa2196
 8001d8c:	3fa3ed7a 	.word	0x3fa3ed7a
 8001d90:	c4b5b30b 	.word	0xc4b5b30b
 8001d94:	3f9205d7 	.word	0x3f9205d7
 8001d98:	f72891e7 	.word	0xf72891e7
 8001d9c:	3ef375d4 	.word	0x3ef375d4
 8001da0:	7a34de08 	.word	0x7a34de08
 8001da4:	be7ab2ac 	.word	0xbe7ab2ac
 8001da8:	b676ec5f 	.word	0xb676ec5f
 8001dac:	3df5e184 	.word	0x3df5e184
 8001db0:	c620f2a8 	.word	0xc620f2a8
 8001db4:	bd63ba97 	.word	0xbd63ba97
 8001db8:	e5aa091d 	.word	0xe5aa091d
 8001dbc:	3cc43402 	.word	0x3cc43402
 8001dc0:	01c8db89 	.word	0x01c8db89
 8001dc4:	bc17a08b 	.word	0xbc17a08b
 8001dc8:	b8001899 	.word	0xb8001899
 8001dcc:	3b5d5cb4 	.word	0x3b5d5cb4
 8001dd0:	51ff39ec 	.word	0x51ff39ec
 8001dd4:	ba8df847 	.word	0xba8df847
 8001dd8:	8adab9f5 	.word	0x8adab9f5
 8001ddc:	405fbdfd 	.word	0x405fbdfd
 8001de0:	b1df7541 	.word	0xb1df7541
 8001de4:	bf1f05e0 	.word	0xbf1f05e0
 8001de8:	8b04919b 	.word	0x8b04919b
 8001dec:	4005bf0a 	.word	0x4005bf0a
 8001df0:	8d6253b2 	.word	0x8d6253b2
 8001df4:	3fbe5c69 	.word	0x3fbe5c69
 8001df8:	2f1a9fbe 	.word	0x2f1a9fbe
 8001dfc:	4034a4dd 	.word	0x4034a4dd
 8001e00:	886594af 	.word	0x886594af
 8001e04:	40391563 	.word	0x40391563
 8001e08:	f62184e0 	.word	0xf62184e0
 8001e0c:	3fb41f32 	.word	0x3fb41f32
 8001e10:	3c90aa07 	.word	0x3c90aa07
 8001e14:	bfd00521 	.word	0xbfd00521
 8001e18:	cf12f82a 	.word	0xcf12f82a
 8001e1c:	3fb5497e 	.word	0x3fb5497e
 8001e20:	55785780 	.word	0x55785780
 8001e24:	bf89266f 	.word	0xbf89266f
 8001e28:	40080000 	.word	0x40080000
 8001e2c:	40100000 	.word	0x40100000
 8001e30:	40140000 	.word	0x40140000
 8001e34:	40180000 	.word	0x40180000
 8001e38:	401c0000 	.word	0x401c0000
 8001e3c:	40200000 	.word	0x40200000
 8001e40:	40220000 	.word	0x40220000
 8001e44:	447a0000 	.word	0x447a0000
 8001e48:	f00b fab8 	bl	800d3bc <pow>
 8001e4c:	a370      	add	r3, pc, #448	; (adr r3, 8002010 <uVtoDegreeCTypeK+0x5d0>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fbb1 	bl	80005b8 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	f7fe f9f5 	bl	800024c <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4614      	mov	r4, r2
 8001e68:	461d      	mov	r5, r3
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	4b7e      	ldr	r3, [pc, #504]	; (8002068 <uVtoDegreeCTypeK+0x628>)
 8001e70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e74:	f00b faa2 	bl	800d3bc <pow>
 8001e78:	a367      	add	r3, pc, #412	; (adr r3, 8002018 <uVtoDegreeCTypeK+0x5d8>)
 8001e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7e:	f7fe fb9b 	bl	80005b8 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4620      	mov	r0, r4
 8001e88:	4629      	mov	r1, r5
 8001e8a:	f7fe f9df 	bl	800024c <__adddf3>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4614      	mov	r4, r2
 8001e94:	461d      	mov	r5, r3
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	4b74      	ldr	r3, [pc, #464]	; (800206c <uVtoDegreeCTypeK+0x62c>)
 8001e9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ea0:	f00b fa8c 	bl	800d3bc <pow>
 8001ea4:	a35e      	add	r3, pc, #376	; (adr r3, 8002020 <uVtoDegreeCTypeK+0x5e0>)
 8001ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eaa:	f7fe fb85 	bl	80005b8 <__aeabi_dmul>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	4629      	mov	r1, r5
 8001eb6:	f7fe f9c9 	bl	800024c <__adddf3>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4614      	mov	r4, r2
 8001ec0:	461d      	mov	r5, r3
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <uVtoDegreeCTypeK+0x630>)
 8001ec8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ecc:	f00b fa76 	bl	800d3bc <pow>
 8001ed0:	a355      	add	r3, pc, #340	; (adr r3, 8002028 <uVtoDegreeCTypeK+0x5e8>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f7fe fb6f 	bl	80005b8 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4620      	mov	r0, r4
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	f7fe f9b3 	bl	800024c <__adddf3>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001eee:	e082      	b.n	8001ff6 <uVtoDegreeCTypeK+0x5b6>
    }
    else
    {
	    t90 = T_COEF_D0_500_1372 + T_COEF_D1_500_1372 *totalV + T_COEF_D2_500_1372 *pow(totalV,2) + T_COEF_D3_500_1372 *pow(totalV,3) + T_COEF_D4_500_1372 *pow(totalV,4) + T_COEF_D5_500_1372 *pow(totalV,5) + T_COEF_D6_500_1372 *pow(totalV,6);
 8001ef0:	a34f      	add	r3, pc, #316	; (adr r3, 8002030 <uVtoDegreeCTypeK+0x5f0>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001efa:	f7fe fb5d 	bl	80005b8 <__aeabi_dmul>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	a34c      	add	r3, pc, #304	; (adr r3, 8002038 <uVtoDegreeCTypeK+0x5f8>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe f99c 	bl	8000248 <__aeabi_dsub>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4614      	mov	r4, r2
 8001f16:	461d      	mov	r5, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f24:	f00b fa4a 	bl	800d3bc <pow>
 8001f28:	a345      	add	r3, pc, #276	; (adr r3, 8002040 <uVtoDegreeCTypeK+0x600>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fb43 	bl	80005b8 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4620      	mov	r0, r4
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f7fe f987 	bl	800024c <__adddf3>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4614      	mov	r4, r2
 8001f44:	461d      	mov	r5, r3
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <uVtoDegreeCTypeK+0x634>)
 8001f4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f50:	f00b fa34 	bl	800d3bc <pow>
 8001f54:	a33c      	add	r3, pc, #240	; (adr r3, 8002048 <uVtoDegreeCTypeK+0x608>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	f7fe fb2d 	bl	80005b8 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4620      	mov	r0, r4
 8001f64:	4629      	mov	r1, r5
 8001f66:	f7fe f971 	bl	800024c <__adddf3>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4614      	mov	r4, r2
 8001f70:	461d      	mov	r5, r3
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b40      	ldr	r3, [pc, #256]	; (8002078 <uVtoDegreeCTypeK+0x638>)
 8001f78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f7c:	f00b fa1e 	bl	800d3bc <pow>
 8001f80:	a333      	add	r3, pc, #204	; (adr r3, 8002050 <uVtoDegreeCTypeK+0x610>)
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	f7fe fb17 	bl	80005b8 <__aeabi_dmul>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4620      	mov	r0, r4
 8001f90:	4629      	mov	r1, r5
 8001f92:	f7fe f95b 	bl	800024c <__adddf3>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4614      	mov	r4, r2
 8001f9c:	461d      	mov	r5, r3
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	4b36      	ldr	r3, [pc, #216]	; (800207c <uVtoDegreeCTypeK+0x63c>)
 8001fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa8:	f00b fa08 	bl	800d3bc <pow>
 8001fac:	a32a      	add	r3, pc, #168	; (adr r3, 8002058 <uVtoDegreeCTypeK+0x618>)
 8001fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb2:	f7fe fb01 	bl	80005b8 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4620      	mov	r0, r4
 8001fbc:	4629      	mov	r1, r5
 8001fbe:	f7fe f945 	bl	800024c <__adddf3>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	461d      	mov	r5, r3
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	4b2c      	ldr	r3, [pc, #176]	; (8002080 <uVtoDegreeCTypeK+0x640>)
 8001fd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fd4:	f00b f9f2 	bl	800d3bc <pow>
 8001fd8:	a321      	add	r3, pc, #132	; (adr r3, 8002060 <uVtoDegreeCTypeK+0x620>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	f7fe faeb 	bl	80005b8 <__aeabi_dmul>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	4629      	mov	r1, r5
 8001fea:	f7fe f92f 	bl	800024c <__adddf3>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return (float)t90;
 8001ff6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ffa:	f7fe fdb5 	bl	8000b68 <__aeabi_d2f>
 8001ffe:	4603      	mov	r3, r0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3728      	adds	r7, #40	; 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800200a:	bf00      	nop
 800200c:	f3af 8000 	nop.w
 8002010:	598742c5 	.word	0x598742c5
 8002014:	3f50101c 	.word	0x3f50101c
 8002018:	8fe5dfc5 	.word	0x8fe5dfc5
 800201c:	bf072311 	.word	0xbf072311
 8002020:	d5041d19 	.word	0xd5041d19
 8002024:	3eb1beee 	.word	0x3eb1beee
 8002028:	f20e972b 	.word	0xf20e972b
 800202c:	be469b94 	.word	0xbe469b94
 8002030:	251c193b 	.word	0x251c193b
 8002034:	404826af 	.word	0x404826af
 8002038:	1d14e3bd 	.word	0x1d14e3bd
 800203c:	406079c9 	.word	0x406079c9
 8002040:	7dffe020 	.word	0x7dffe020
 8002044:	bffa587c 	.word	0xbffa587c
 8002048:	72875bff 	.word	0x72875bff
 800204c:	3fabfabb 	.word	0x3fabfabb
 8002050:	43f14f16 	.word	0x43f14f16
 8002054:	bf4f9f9b 	.word	0xbf4f9f9b
 8002058:	31b5afb6 	.word	0x31b5afb6
 800205c:	3ee275a4 	.word	0x3ee275a4
 8002060:	f722eba7 	.word	0xf722eba7
 8002064:	be60b376 	.word	0xbe60b376
 8002068:	401c0000 	.word	0x401c0000
 800206c:	40200000 	.word	0x40200000
 8002070:	40220000 	.word	0x40220000
 8002074:	40080000 	.word	0x40080000
 8002078:	40100000 	.word	0x40100000
 800207c:	40140000 	.word	0x40140000
 8002080:	40180000 	.word	0x40180000
 8002084:	00000000 	.word	0x00000000

08002088 <VtoDegreeCRtd>:
float VtoDegreeCRtd(float Vdata)
{
 8002088:	b5b0      	push	{r4, r5, r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	//using a y = 366.02x^2 -942.3x +561.55 where x is the ADC voltage and y is the temperature in C
	return (Vdata*Vdata)*366.02 - 942.3*Vdata + 561.55;
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe fec6 	bl	8000e24 <__aeabi_fmul>
 8002098:	4603      	mov	r3, r0
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa34 	bl	8000508 <__aeabi_f2d>
 80020a0:	a315      	add	r3, pc, #84	; (adr r3, 80020f8 <VtoDegreeCRtd+0x70>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe fa87 	bl	80005b8 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4614      	mov	r4, r2
 80020b0:	461d      	mov	r5, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe fa28 	bl	8000508 <__aeabi_f2d>
 80020b8:	a311      	add	r3, pc, #68	; (adr r3, 8002100 <VtoDegreeCRtd+0x78>)
 80020ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020be:	f7fe fa7b 	bl	80005b8 <__aeabi_dmul>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4620      	mov	r0, r4
 80020c8:	4629      	mov	r1, r5
 80020ca:	f7fe f8bd 	bl	8000248 <__aeabi_dsub>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	a30c      	add	r3, pc, #48	; (adr r3, 8002108 <VtoDegreeCRtd+0x80>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	f7fe f8b6 	bl	800024c <__adddf3>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fd3e 	bl	8000b68 <__aeabi_d2f>
 80020ec:	4603      	mov	r3, r0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bdb0      	pop	{r4, r5, r7, pc}
 80020f6:	bf00      	nop
 80020f8:	eb851eb8 	.word	0xeb851eb8
 80020fc:	4076e051 	.word	0x4076e051
 8002100:	66666666 	.word	0x66666666
 8002104:	408d7266 	.word	0x408d7266
 8002108:	66666666 	.word	0x66666666
 800210c:	40818c66 	.word	0x40818c66

08002110 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a06      	ldr	r2, [pc, #24]	; (8002138 <vApplicationGetIdleTaskMemory+0x28>)
 8002120:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	4a05      	ldr	r2, [pc, #20]	; (800213c <vApplicationGetIdleTaskMemory+0x2c>)
 8002126:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2280      	movs	r2, #128	; 0x80
 800212c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	20000244 	.word	0x20000244
 800213c:	20000298 	.word	0x20000298

08002140 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4a07      	ldr	r2, [pc, #28]	; (800216c <vApplicationGetTimerTaskMemory+0x2c>)
 8002150:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4a06      	ldr	r2, [pc, #24]	; (8002170 <vApplicationGetTimerTaskMemory+0x30>)
 8002156:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800215e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000498 	.word	0x20000498
 8002170:	200004ec 	.word	0x200004ec

08002174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002174:	b5b0      	push	{r4, r5, r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800217a:	f000 fdf1 	bl	8002d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800217e:	f000 f839 	bl	80021f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002182:	f000 f9b1 	bl	80024e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002186:	f000 f991 	bl	80024ac <MX_DMA_Init>
  MX_I2C1_Init();
 800218a:	f000 f899 	bl	80022c0 <MX_I2C1_Init>
  MX_RTC_Init();
 800218e:	f000 f8c5 	bl	800231c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002192:	f000 f90d 	bl	80023b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002196:	f000 f95f 	bl	8002458 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800219a:	f000 f933 	bl	8002404 <MX_USART2_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer */
  osTimerDef(Timer, TimerCallback);
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <main+0x70>)
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  TimerHandle = osTimerCreate(osTimer(Timer), osTimerPeriodic, NULL);
 80021a6:	f107 0320 	add.w	r3, r7, #32
 80021aa:	2200      	movs	r2, #0
 80021ac:	2101      	movs	r1, #1
 80021ae:	4618      	mov	r0, r3
 80021b0:	f005 ffaa 	bl	8008108 <osTimerCreate>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <main+0x74>)
 80021b8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Algo_task */
  osThreadDef(Algo_task, Algo_Init, osPriorityNormal, 0, 128);
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <main+0x78>)
 80021bc:	1d3c      	adds	r4, r7, #4
 80021be:	461d      	mov	r5, r3
 80021c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Algo_taskHandle = osThreadCreate(osThread(Algo_task), NULL);
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f005 ff38 	bl	8008046 <osThreadCreate>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <main+0x7c>)
 80021da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80021dc:	f005 ff1c 	bl	8008018 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <main+0x6c>
 80021e2:	bf00      	nop
 80021e4:	08002689 	.word	0x08002689
 80021e8:	20002cc0 	.word	0x20002cc0
 80021ec:	0800e30c 	.word	0x0800e30c
 80021f0:	20002cc4 	.word	0x20002cc4

080021f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b09c      	sub	sp, #112	; 0x70
 80021f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021fe:	2238      	movs	r2, #56	; 0x38
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f008 fc22 	bl	800aa4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	2220      	movs	r2, #32
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f008 fc14 	bl	800aa4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002224:	2309      	movs	r3, #9
 8002226:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800222c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800222e:	2300      	movs	r3, #0
 8002230:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002232:	2301      	movs	r3, #1
 8002234:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002236:	2301      	movs	r3, #1
 8002238:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800223a:	2300      	movs	r3, #0
 800223c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800223e:	2302      	movs	r3, #2
 8002240:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002246:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002248:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800224c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800224e:	2300      	movs	r3, #0
 8002250:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002252:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002256:	4618      	mov	r0, r3
 8002258:	f003 fb80 	bl	800595c <HAL_RCC_OscConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002262:	f000 fa2d 	bl	80026c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002266:	230f      	movs	r3, #15
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800226a:	2302      	movs	r3, #2
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800226e:	2300      	movs	r3, #0
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002278:	2300      	movs	r3, #0
 800227a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	2101      	movs	r1, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f003 fe80 	bl	8005f88 <HAL_RCC_ClockConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800228e:	f000 fa17 	bl	80026c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002292:	2301      	movs	r3, #1
 8002294:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800229a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 f8c0 	bl	8006424 <HAL_RCCEx_PeriphCLKConfig>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <SystemClock_Config+0xba>
  {
    Error_Handler();
 80022aa:	f000 fa09 	bl	80026c0 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80022ae:	4b03      	ldr	r3, [pc, #12]	; (80022bc <SystemClock_Config+0xc8>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
}
 80022b4:	bf00      	nop
 80022b6:	3770      	adds	r7, #112	; 0x70
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	42420070 	.word	0x42420070

080022c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <MX_I2C1_Init+0x50>)
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <MX_I2C1_Init+0x54>)
 80022c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MX_I2C1_Init+0x50>)
 80022cc:	4a12      	ldr	r2, [pc, #72]	; (8002318 <MX_I2C1_Init+0x58>)
 80022ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <MX_I2C1_Init+0x50>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <MX_I2C1_Init+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <MX_I2C1_Init+0x50>)
 80022de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <MX_I2C1_Init+0x50>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <MX_I2C1_Init+0x50>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <MX_I2C1_Init+0x50>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <MX_I2C1_Init+0x50>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022fc:	4804      	ldr	r0, [pc, #16]	; (8002310 <MX_I2C1_Init+0x50>)
 80022fe:	f001 fbdd 	bl	8003abc <HAL_I2C_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002308:	f000 f9da 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20002bf8 	.word	0x20002bf8
 8002314:	40005400 	.word	0x40005400
 8002318:	000186a0 	.word	0x000186a0

0800231c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	2100      	movs	r1, #0
 8002326:	460a      	mov	r2, r1
 8002328:	801a      	strh	r2, [r3, #0]
 800232a:	460a      	mov	r2, r1
 800232c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800232e:	2300      	movs	r3, #0
 8002330:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <MX_RTC_Init+0x8c>)
 8002334:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <MX_RTC_Init+0x90>)
 8002336:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <MX_RTC_Init+0x8c>)
 800233a:	f04f 32ff 	mov.w	r2, #4294967295
 800233e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <MX_RTC_Init+0x8c>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002346:	4818      	ldr	r0, [pc, #96]	; (80023a8 <MX_RTC_Init+0x8c>)
 8002348:	f004 fb02 	bl	8006950 <HAL_RTC_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8002352:	f000 f9b5 	bl	80026c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002356:	2300      	movs	r3, #0
 8002358:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800235a:	2300      	movs	r3, #0
 800235c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800235e:	2300      	movs	r3, #0
 8002360:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	2201      	movs	r2, #1
 8002366:	4619      	mov	r1, r3
 8002368:	480f      	ldr	r0, [pc, #60]	; (80023a8 <MX_RTC_Init+0x8c>)
 800236a:	f004 fb87 	bl	8006a7c <HAL_RTC_SetTime>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8002374:	f000 f9a4 	bl	80026c0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002378:	2301      	movs	r3, #1
 800237a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800237c:	2301      	movs	r3, #1
 800237e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8002380:	2301      	movs	r3, #1
 8002382:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8002384:	2300      	movs	r3, #0
 8002386:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002388:	463b      	mov	r3, r7
 800238a:	2201      	movs	r2, #1
 800238c:	4619      	mov	r1, r3
 800238e:	4806      	ldr	r0, [pc, #24]	; (80023a8 <MX_RTC_Init+0x8c>)
 8002390:	f004 fc0c 	bl	8006bac <HAL_RTC_SetDate>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800239a:	f000 f991 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20002cc8 	.word	0x20002cc8
 80023ac:	40002800 	.word	0x40002800

080023b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023b6:	4a12      	ldr	r2, [pc, #72]	; (8002400 <MX_USART1_UART_Init+0x50>)
 80023b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023d6:	220c      	movs	r2, #12
 80023d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023e8:	f005 f89c 	bl	8007524 <HAL_UART_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023f2:	f000 f965 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20002c4c 	.word	0x20002c4c
 8002400:	40013800 	.word	0x40013800

08002404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <MX_USART2_UART_Init+0x50>)
 800240c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 800242a:	220c      	movs	r2, #12
 800242c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 800243c:	f005 f872 	bl	8007524 <HAL_UART_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002446:	f000 f93b 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20002cdc 	.word	0x20002cdc
 8002454:	40004400 	.word	0x40004400

08002458 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <MX_USART3_UART_Init+0x50>)
 8002460:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 8002464:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002468:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 800247e:	220c      	movs	r2, #12
 8002480:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 8002490:	f005 f848 	bl	8007524 <HAL_UART_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800249a:	f000 f911 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20002b84 	.word	0x20002b84
 80024a8:	40004800 	.word	0x40004800

080024ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <MX_DMA_Init+0x38>)
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <MX_DMA_Init+0x38>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6153      	str	r3, [r2, #20]
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <MX_DMA_Init+0x38>)
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2105      	movs	r1, #5
 80024ce:	2010      	movs	r0, #16
 80024d0:	f000 fd2d 	bl	8002f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80024d4:	2010      	movs	r0, #16
 80024d6:	f000 fd46 	bl	8002f66 <HAL_NVIC_EnableIRQ>

}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000

080024e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ee:	f107 0310 	add.w	r3, r7, #16
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fc:	4b5d      	ldr	r3, [pc, #372]	; (8002674 <MX_GPIO_Init+0x18c>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a5c      	ldr	r2, [pc, #368]	; (8002674 <MX_GPIO_Init+0x18c>)
 8002502:	f043 0310 	orr.w	r3, r3, #16
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b5a      	ldr	r3, [pc, #360]	; (8002674 <MX_GPIO_Init+0x18c>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002514:	4b57      	ldr	r3, [pc, #348]	; (8002674 <MX_GPIO_Init+0x18c>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a56      	ldr	r2, [pc, #344]	; (8002674 <MX_GPIO_Init+0x18c>)
 800251a:	f043 0320 	orr.w	r3, r3, #32
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b54      	ldr	r3, [pc, #336]	; (8002674 <MX_GPIO_Init+0x18c>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	4b51      	ldr	r3, [pc, #324]	; (8002674 <MX_GPIO_Init+0x18c>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a50      	ldr	r2, [pc, #320]	; (8002674 <MX_GPIO_Init+0x18c>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b4e      	ldr	r3, [pc, #312]	; (8002674 <MX_GPIO_Init+0x18c>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002544:	4b4b      	ldr	r3, [pc, #300]	; (8002674 <MX_GPIO_Init+0x18c>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <MX_GPIO_Init+0x18c>)
 800254a:	f043 0308 	orr.w	r3, r3, #8
 800254e:	6193      	str	r3, [r2, #24]
 8002550:	4b48      	ldr	r3, [pc, #288]	; (8002674 <MX_GPIO_Init+0x18c>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step2_LowCurrent_Pin|uc_Stepper_Sleep_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin
 800255c:	2200      	movs	r2, #0
 800255e:	f242 71d0 	movw	r1, #10192	; 0x27d0
 8002562:	4845      	ldr	r0, [pc, #276]	; (8002678 <MX_GPIO_Init+0x190>)
 8002564:	f001 fa92 	bl	8003a8c <HAL_GPIO_WritePin>
                          |Step2_DIR_Pin|Step1_LowCurrent_Pin|Step2_STEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step3_RESET_Pin|STATUS_LED1_Pin|Step3_ENABLE_Pin|Step2_RESET_Pin
 8002568:	2201      	movs	r2, #1
 800256a:	f641 012c 	movw	r1, #6188	; 0x182c
 800256e:	4842      	ldr	r0, [pc, #264]	; (8002678 <MX_GPIO_Init+0x190>)
 8002570:	f001 fa8c 	bl	8003a8c <HAL_GPIO_WritePin>
                          |Step2_ENABLE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_ON_Pin|AFK_Var_Pin|USB_ENABLE_Pin, GPIO_PIN_RESET);
 8002574:	2200      	movs	r2, #0
 8002576:	f248 0182 	movw	r1, #32898	; 0x8082
 800257a:	4840      	ldr	r0, [pc, #256]	; (800267c <MX_GPIO_Init+0x194>)
 800257c:	f001 fa86 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED2_Pin|Step3_DIR_Pin|Button_LED_Pin, GPIO_PIN_SET);
 8002580:	2201      	movs	r2, #1
 8002582:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002586:	483d      	ldr	r0, [pc, #244]	; (800267c <MX_GPIO_Init+0x194>)
 8002588:	f001 fa80 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin, GPIO_PIN_RESET);
 800258c:	2200      	movs	r2, #0
 800258e:	f248 010e 	movw	r1, #32782	; 0x800e
 8002592:	483b      	ldr	r0, [pc, #236]	; (8002680 <MX_GPIO_Init+0x198>)
 8002594:	f001 fa7a 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Step1_DIR_GPIO_Port, Step1_DIR_Pin, GPIO_PIN_RESET);
 8002598:	2200      	movs	r2, #0
 800259a:	2104      	movs	r1, #4
 800259c:	4839      	ldr	r0, [pc, #228]	; (8002684 <MX_GPIO_Init+0x19c>)
 800259e:	f001 fa75 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step1_RESET_Pin|Step1_ENABLE_Pin, GPIO_PIN_SET);
 80025a2:	2201      	movs	r2, #1
 80025a4:	2130      	movs	r1, #48	; 0x30
 80025a6:	4836      	ldr	r0, [pc, #216]	; (8002680 <MX_GPIO_Init+0x198>)
 80025a8:	f001 fa70 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Step2_LowCurrent_Pin Step3_RESET_Pin STATUS_LED1_Pin uc_Stepper_Sleep_Pin
                           Step3_ENABLE_Pin SPEED2_COIL_Pin SPEED3_COIL_Pin Step2_DIR_Pin
                           Step1_LowCurrent_Pin Step2_STEP_Pin Step2_RESET_Pin Step2_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step2_LowCurrent_Pin|Step3_RESET_Pin|STATUS_LED1_Pin|uc_Stepper_Sleep_Pin
 80025ac:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 80025b0:	613b      	str	r3, [r7, #16]
                          |Step3_ENABLE_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin|Step2_DIR_Pin
                          |Step1_LowCurrent_Pin|Step2_STEP_Pin|Step2_RESET_Pin|Step2_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b2:	2301      	movs	r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025be:	f107 0310 	add.w	r3, r7, #16
 80025c2:	4619      	mov	r1, r3
 80025c4:	482c      	ldr	r0, [pc, #176]	; (8002678 <MX_GPIO_Init+0x190>)
 80025c6:	f001 f8dd 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch1_Pin Limit_switch2_Pin */
  GPIO_InitStruct.Pin = Limit_switch1_Pin|Limit_switch2_Pin;
 80025ca:	2303      	movs	r3, #3
 80025cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d6:	f107 0310 	add.w	r3, r7, #16
 80025da:	4619      	mov	r1, r3
 80025dc:	4826      	ldr	r0, [pc, #152]	; (8002678 <MX_GPIO_Init+0x190>)
 80025de:	f001 f8d1 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_ON_Pin STATUS_LED2_Pin Step3_DIR_Pin AFK_Var_Pin
                           Button_LED_Pin USB_ENABLE_Pin */
  GPIO_InitStruct.Pin = Buzzer_ON_Pin|STATUS_LED2_Pin|Step3_DIR_Pin|AFK_Var_Pin
 80025e2:	f248 13b2 	movw	r3, #33202	; 0x81b2
 80025e6:	613b      	str	r3, [r7, #16]
                          |Button_LED_Pin|USB_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e8:	2301      	movs	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f0:	2302      	movs	r3, #2
 80025f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	f107 0310 	add.w	r3, r7, #16
 80025f8:	4619      	mov	r1, r3
 80025fa:	4820      	ldr	r0, [pc, #128]	; (800267c <MX_GPIO_Init+0x194>)
 80025fc:	f001 f8c2 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_switch3_Pin */
  GPIO_InitStruct.Pin = Limit_switch3_Pin;
 8002600:	2340      	movs	r3, #64	; 0x40
 8002602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Limit_switch3_GPIO_Port, &GPIO_InitStruct);
 800260c:	f107 0310 	add.w	r3, r7, #16
 8002610:	4619      	mov	r1, r3
 8002612:	481a      	ldr	r0, [pc, #104]	; (800267c <MX_GPIO_Init+0x194>)
 8002614:	f001 f8b6 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch_Door_Pin Thermostat_Input_Pin Safety_ON_Pin Interlock_Input_Pin
                           Button_Input_Pin USB_Fault_Pin */
  GPIO_InitStruct.Pin = Limit_switch_Door_Pin|Thermostat_Input_Pin|Safety_ON_Pin|Interlock_Input_Pin
 8002618:	f247 3301 	movw	r3, #29441	; 0x7301
 800261c:	613b      	str	r3, [r7, #16]
                          |Button_Input_Pin|USB_Fault_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002626:	f107 0310 	add.w	r3, r7, #16
 800262a:	4619      	mov	r1, r3
 800262c:	4814      	ldr	r0, [pc, #80]	; (8002680 <MX_GPIO_Init+0x198>)
 800262e:	f001 f8a9 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pins : Step3_STEP_Pin Step3_LowCurrent_Pin Stepper_HalfStep_Pin Step1_STEP_Pin
                           Step1_RESET_Pin Step1_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin
 8002632:	f248 033e 	movw	r3, #32830	; 0x803e
 8002636:	613b      	str	r3, [r7, #16]
                          |Step1_RESET_Pin|Step1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002638:	2301      	movs	r3, #1
 800263a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	2302      	movs	r3, #2
 8002642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002644:	f107 0310 	add.w	r3, r7, #16
 8002648:	4619      	mov	r1, r3
 800264a:	480d      	ldr	r0, [pc, #52]	; (8002680 <MX_GPIO_Init+0x198>)
 800264c:	f001 f89a 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pin : Step1_DIR_Pin */
  GPIO_InitStruct.Pin = Step1_DIR_Pin;
 8002650:	2304      	movs	r3, #4
 8002652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002654:	2301      	movs	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2302      	movs	r3, #2
 800265e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Step1_DIR_GPIO_Port, &GPIO_InitStruct);
 8002660:	f107 0310 	add.w	r3, r7, #16
 8002664:	4619      	mov	r1, r3
 8002666:	4807      	ldr	r0, [pc, #28]	; (8002684 <MX_GPIO_Init+0x19c>)
 8002668:	f001 f88c 	bl	8003784 <HAL_GPIO_Init>

}
 800266c:	bf00      	nop
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	40011000 	.word	0x40011000
 800267c:	40010800 	.word	0x40010800
 8002680:	40010c00 	.word	0x40010c00
 8002684:	40011400 	.word	0x40011400

08002688 <TimerCallback>:
  /* USER CODE END 5 */
}

/* TimerCallback function */
void TimerCallback(void const * argument)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */

  /* USER CODE END TimerCallback */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
	...

0800269c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a04      	ldr	r2, [pc, #16]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026ae:	f000 fb6d 	bl	8002d8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40012c00 	.word	0x40012c00

080026c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c4:	b672      	cpsid	i
}
 80026c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <Error_Handler+0x8>
	...

080026cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_MspInit+0x68>)
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	4a17      	ldr	r2, [pc, #92]	; (8002734 <HAL_MspInit+0x68>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6193      	str	r3, [r2, #24]
 80026de:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_MspInit+0x68>)
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_MspInit+0x68>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	4a11      	ldr	r2, [pc, #68]	; (8002734 <HAL_MspInit+0x68>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	61d3      	str	r3, [r2, #28]
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_MspInit+0x68>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	210f      	movs	r1, #15
 8002706:	f06f 0001 	mvn.w	r0, #1
 800270a:	f000 fc10 	bl	8002f2e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_MspInit+0x6c>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <HAL_MspInit+0x6c>)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	40010000 	.word	0x40010000

0800273c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 0310 	add.w	r3, r7, #16
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <HAL_I2C_MspInit+0x90>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d133      	bne.n	80027c4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <HAL_I2C_MspInit+0x94>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <HAL_I2C_MspInit+0x94>)
 8002762:	f043 0308 	orr.w	r3, r3, #8
 8002766:	6193      	str	r3, [r2, #24]
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_I2C_MspInit+0x94>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8002774:	23c0      	movs	r3, #192	; 0xc0
 8002776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002778:	2312      	movs	r3, #18
 800277a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002780:	f107 0310 	add.w	r3, r7, #16
 8002784:	4619      	mov	r1, r3
 8002786:	4813      	ldr	r0, [pc, #76]	; (80027d4 <HAL_I2C_MspInit+0x98>)
 8002788:	f000 fffc 	bl	8003784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_I2C_MspInit+0x94>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <HAL_I2C_MspInit+0x94>)
 8002792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002796:	61d3      	str	r3, [r2, #28]
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_I2C_MspInit+0x94>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80027a4:	2200      	movs	r2, #0
 80027a6:	2105      	movs	r1, #5
 80027a8:	201f      	movs	r0, #31
 80027aa:	f000 fbc0 	bl	8002f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027ae:	201f      	movs	r0, #31
 80027b0:	f000 fbd9 	bl	8002f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80027b4:	2200      	movs	r2, #0
 80027b6:	2105      	movs	r1, #5
 80027b8:	2020      	movs	r0, #32
 80027ba:	f000 fbb8 	bl	8002f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80027be:	2020      	movs	r0, #32
 80027c0:	f000 fbd1 	bl	8002f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027c4:	bf00      	nop
 80027c6:	3720      	adds	r7, #32
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40005400 	.word	0x40005400
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40010c00 	.word	0x40010c00

080027d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <HAL_RTC_MspInit+0x3c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d110      	bne.n	800280c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80027ea:	f003 f8ab 	bl	8005944 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_RTC_MspInit+0x40>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RTC_MspInit+0x40>)
 80027f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027f8:	61d3      	str	r3, [r2, #28]
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_RTC_MspInit+0x40>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RTC_MspInit+0x44>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40002800 	.word	0x40002800
 8002818:	40021000 	.word	0x40021000
 800281c:	4242043c 	.word	0x4242043c

08002820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08c      	sub	sp, #48	; 0x30
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0320 	add.w	r3, r7, #32
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a72      	ldr	r2, [pc, #456]	; (8002a04 <HAL_UART_MspInit+0x1e4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d13a      	bne.n	80028b6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002840:	4b71      	ldr	r3, [pc, #452]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	4a70      	ldr	r2, [pc, #448]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 8002846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284a:	6193      	str	r3, [r2, #24]
 800284c:	4b6e      	ldr	r3, [pc, #440]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002858:	4b6b      	ldr	r3, [pc, #428]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4a6a      	ldr	r2, [pc, #424]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	6193      	str	r3, [r2, #24]
 8002864:	4b68      	ldr	r3, [pc, #416]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	f107 0320 	add.w	r3, r7, #32
 8002882:	4619      	mov	r1, r3
 8002884:	4861      	ldr	r0, [pc, #388]	; (8002a0c <HAL_UART_MspInit+0x1ec>)
 8002886:	f000 ff7d 	bl	8003784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800288a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800288e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002898:	f107 0320 	add.w	r3, r7, #32
 800289c:	4619      	mov	r1, r3
 800289e:	485b      	ldr	r0, [pc, #364]	; (8002a0c <HAL_UART_MspInit+0x1ec>)
 80028a0:	f000 ff70 	bl	8003784 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	2105      	movs	r1, #5
 80028a8:	2025      	movs	r0, #37	; 0x25
 80028aa:	f000 fb40 	bl	8002f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028ae:	2025      	movs	r0, #37	; 0x25
 80028b0:	f000 fb59 	bl	8002f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028b4:	e0a2      	b.n	80029fc <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a55      	ldr	r2, [pc, #340]	; (8002a10 <HAL_UART_MspInit+0x1f0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d15e      	bne.n	800297e <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028c0:	4b51      	ldr	r3, [pc, #324]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	4a50      	ldr	r2, [pc, #320]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 80028c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ca:	61d3      	str	r3, [r2, #28]
 80028cc:	4b4e      	ldr	r3, [pc, #312]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	4b4b      	ldr	r3, [pc, #300]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	4a4a      	ldr	r2, [pc, #296]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	6193      	str	r3, [r2, #24]
 80028e4:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028f0:	2304      	movs	r3, #4
 80028f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f8:	2303      	movs	r3, #3
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fc:	f107 0320 	add.w	r3, r7, #32
 8002900:	4619      	mov	r1, r3
 8002902:	4842      	ldr	r0, [pc, #264]	; (8002a0c <HAL_UART_MspInit+0x1ec>)
 8002904:	f000 ff3e 	bl	8003784 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002908:	2308      	movs	r3, #8
 800290a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	f107 0320 	add.w	r3, r7, #32
 8002918:	4619      	mov	r1, r3
 800291a:	483c      	ldr	r0, [pc, #240]	; (8002a0c <HAL_UART_MspInit+0x1ec>)
 800291c:	f000 ff32 	bl	8003784 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002920:	4b3c      	ldr	r3, [pc, #240]	; (8002a14 <HAL_UART_MspInit+0x1f4>)
 8002922:	4a3d      	ldr	r2, [pc, #244]	; (8002a18 <HAL_UART_MspInit+0x1f8>)
 8002924:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002926:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <HAL_UART_MspInit+0x1f4>)
 8002928:	2200      	movs	r2, #0
 800292a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800292c:	4b39      	ldr	r3, [pc, #228]	; (8002a14 <HAL_UART_MspInit+0x1f4>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002932:	4b38      	ldr	r3, [pc, #224]	; (8002a14 <HAL_UART_MspInit+0x1f4>)
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002938:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <HAL_UART_MspInit+0x1f4>)
 800293a:	2200      	movs	r2, #0
 800293c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800293e:	4b35      	ldr	r3, [pc, #212]	; (8002a14 <HAL_UART_MspInit+0x1f4>)
 8002940:	2200      	movs	r2, #0
 8002942:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002944:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <HAL_UART_MspInit+0x1f4>)
 8002946:	2220      	movs	r2, #32
 8002948:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800294a:	4b32      	ldr	r3, [pc, #200]	; (8002a14 <HAL_UART_MspInit+0x1f4>)
 800294c:	2200      	movs	r2, #0
 800294e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002950:	4830      	ldr	r0, [pc, #192]	; (8002a14 <HAL_UART_MspInit+0x1f4>)
 8002952:	f000 fb17 	bl	8002f84 <HAL_DMA_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_UART_MspInit+0x140>
      Error_Handler();
 800295c:	f7ff feb0 	bl	80026c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a2c      	ldr	r2, [pc, #176]	; (8002a14 <HAL_UART_MspInit+0x1f4>)
 8002964:	639a      	str	r2, [r3, #56]	; 0x38
 8002966:	4a2b      	ldr	r2, [pc, #172]	; (8002a14 <HAL_UART_MspInit+0x1f4>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800296c:	2200      	movs	r2, #0
 800296e:	2105      	movs	r1, #5
 8002970:	2026      	movs	r0, #38	; 0x26
 8002972:	f000 fadc 	bl	8002f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002976:	2026      	movs	r0, #38	; 0x26
 8002978:	f000 faf5 	bl	8002f66 <HAL_NVIC_EnableIRQ>
}
 800297c:	e03e      	b.n	80029fc <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <HAL_UART_MspInit+0x1fc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d139      	bne.n	80029fc <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002988:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 800298e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002992:	61d3      	str	r3, [r2, #28]
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 80029a6:	f043 0308 	orr.w	r3, r3, #8
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <HAL_UART_MspInit+0x1e8>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c2:	2303      	movs	r3, #3
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c6:	f107 0320 	add.w	r3, r7, #32
 80029ca:	4619      	mov	r1, r3
 80029cc:	4814      	ldr	r0, [pc, #80]	; (8002a20 <HAL_UART_MspInit+0x200>)
 80029ce:	f000 fed9 	bl	8003784 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e0:	f107 0320 	add.w	r3, r7, #32
 80029e4:	4619      	mov	r1, r3
 80029e6:	480e      	ldr	r0, [pc, #56]	; (8002a20 <HAL_UART_MspInit+0x200>)
 80029e8:	f000 fecc 	bl	8003784 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2105      	movs	r1, #5
 80029f0:	2027      	movs	r0, #39	; 0x27
 80029f2:	f000 fa9c 	bl	8002f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029f6:	2027      	movs	r0, #39	; 0x27
 80029f8:	f000 fab5 	bl	8002f66 <HAL_NVIC_EnableIRQ>
}
 80029fc:	bf00      	nop
 80029fe:	3730      	adds	r7, #48	; 0x30
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40010800 	.word	0x40010800
 8002a10:	40004400 	.word	0x40004400
 8002a14:	20002b40 	.word	0x20002b40
 8002a18:	4002006c 	.word	0x4002006c
 8002a1c:	40004800 	.word	0x40004800
 8002a20:	40010c00 	.word	0x40010c00

08002a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08c      	sub	sp, #48	; 0x30
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	2019      	movs	r0, #25
 8002a3a:	f000 fa78 	bl	8002f2e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002a3e:	2019      	movs	r0, #25
 8002a40:	f000 fa91 	bl	8002f66 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a44:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_InitTick+0x9c>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <HAL_InitTick+0x9c>)
 8002a4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a4e:	6193      	str	r3, [r2, #24]
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_InitTick+0x9c>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a5c:	f107 0210 	add.w	r2, r7, #16
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fc8e 	bl	8006388 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002a6c:	f003 fc78 	bl	8006360 <HAL_RCC_GetPCLK2Freq>
 8002a70:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <HAL_InitTick+0xa0>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0c9b      	lsrs	r3, r3, #18
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_InitTick+0xa4>)
 8002a82:	4a12      	ldr	r2, [pc, #72]	; (8002acc <HAL_InitTick+0xa8>)
 8002a84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002a86:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <HAL_InitTick+0xa4>)
 8002a88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a8c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002a8e:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <HAL_InitTick+0xa4>)
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <HAL_InitTick+0xa4>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_InitTick+0xa4>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002aa0:	4809      	ldr	r0, [pc, #36]	; (8002ac8 <HAL_InitTick+0xa4>)
 8002aa2:	f004 fae3 	bl	800706c <HAL_TIM_Base_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002aac:	4806      	ldr	r0, [pc, #24]	; (8002ac8 <HAL_InitTick+0xa4>)
 8002aae:	f004 fb35 	bl	800711c <HAL_TIM_Base_Start_IT>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	e000      	b.n	8002ab8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3730      	adds	r7, #48	; 0x30
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	431bde83 	.word	0x431bde83
 8002ac8:	20002d50 	.word	0x20002d50
 8002acc:	40012c00 	.word	0x40012c00

08002ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ad4:	e7fe      	b.n	8002ad4 <NMI_Handler+0x4>

08002ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ada:	e7fe      	b.n	8002ada <HardFault_Handler+0x4>

08002adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <MemManage_Handler+0x4>

08002ae2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae6:	e7fe      	b.n	8002ae6 <BusFault_Handler+0x4>

08002ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <UsageFault_Handler+0x4>

08002aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
	...

08002afc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <DMA1_Channel6_IRQHandler+0x10>)
 8002b02:	f000 fbf7 	bl	80032f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20002b40 	.word	0x20002b40

08002b10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b14:	4802      	ldr	r0, [pc, #8]	; (8002b20 <TIM1_UP_IRQHandler+0x10>)
 8002b16:	f004 fb5b 	bl	80071d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20002d50 	.word	0x20002d50

08002b24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <I2C1_EV_IRQHandler+0x10>)
 8002b2a:	f001 fa5b 	bl	8003fe4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20002bf8 	.word	0x20002bf8

08002b38 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002b3c:	4802      	ldr	r0, [pc, #8]	; (8002b48 <I2C1_ER_IRQHandler+0x10>)
 8002b3e:	f001 fbc2 	bl	80042c6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20002bf8 	.word	0x20002bf8

08002b4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <USART1_IRQHandler+0x10>)
 8002b52:	f004 fdd3 	bl	80076fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20002c4c 	.word	0x20002c4c

08002b60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <USART2_IRQHandler+0x10>)
 8002b66:	f004 fdc9 	bl	80076fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20002cdc 	.word	0x20002cdc

08002b74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <USART3_IRQHandler+0x10>)
 8002b7a:	f004 fdbf 	bl	80076fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20002b84 	.word	0x20002b84

08002b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
	return 1;
 8002b8c:	2301      	movs	r3, #1
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <_kill>:

int _kill(int pid, int sig)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ba0:	f007 ff0a 	bl	800a9b8 <__errno>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2216      	movs	r2, #22
 8002ba8:	601a      	str	r2, [r3, #0]
	return -1;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <_exit>:

void _exit (int status)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bbe:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff ffe7 	bl	8002b96 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bc8:	e7fe      	b.n	8002bc8 <_exit+0x12>

08002bca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	e00a      	b.n	8002bf2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bdc:	f3af 8000 	nop.w
 8002be0:	4601      	mov	r1, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	60ba      	str	r2, [r7, #8]
 8002be8:	b2ca      	uxtb	r2, r1
 8002bea:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	dbf0      	blt.n	8002bdc <_read+0x12>
	}

return len;
 8002bfa:	687b      	ldr	r3, [r7, #4]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e009      	b.n	8002c2a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	60ba      	str	r2, [r7, #8]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fc12 	bl	8001448 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	3301      	adds	r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	dbf1      	blt.n	8002c16 <_write+0x12>
	}
	return len;
 8002c32:	687b      	ldr	r3, [r7, #4]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_close>:

int _close(int file)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	return -1;
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c62:	605a      	str	r2, [r3, #4]
	return 0;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <_isatty>:

int _isatty(int file)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	return 1;
 8002c78:	2301      	movs	r3, #1
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
	return 0;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ca4:	4a14      	ldr	r2, [pc, #80]	; (8002cf8 <_sbrk+0x5c>)
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <_sbrk+0x60>)
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <_sbrk+0x64>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <_sbrk+0x64>)
 8002cba:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <_sbrk+0x68>)
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <_sbrk+0x64>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d207      	bcs.n	8002cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ccc:	f007 fe74 	bl	800a9b8 <__errno>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cda:	e009      	b.n	8002cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <_sbrk+0x64>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ce2:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <_sbrk+0x64>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <_sbrk+0x64>)
 8002cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cee:	68fb      	ldr	r3, [r7, #12]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20010000 	.word	0x20010000
 8002cfc:	00000400 	.word	0x00000400
 8002d00:	200008ec 	.word	0x200008ec
 8002d04:	20002df0 	.word	0x20002df0

08002d08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d14:	480c      	ldr	r0, [pc, #48]	; (8002d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d16:	490d      	ldr	r1, [pc, #52]	; (8002d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d18:	4a0d      	ldr	r2, [pc, #52]	; (8002d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d1c:	e002      	b.n	8002d24 <LoopCopyDataInit>

08002d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d22:	3304      	adds	r3, #4

08002d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d28:	d3f9      	bcc.n	8002d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d2c:	4c0a      	ldr	r4, [pc, #40]	; (8002d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d30:	e001      	b.n	8002d36 <LoopFillZerobss>

08002d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d34:	3204      	adds	r2, #4

08002d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d38:	d3fb      	bcc.n	8002d32 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d3a:	f7ff ffe5 	bl	8002d08 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d3e:	f007 fe53 	bl	800a9e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d42:	f7ff fa17 	bl	8002174 <main>
  bx lr
 8002d46:	4770      	bx	lr
  ldr r0, =_sdata
 8002d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d4c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002d50:	0800e7d0 	.word	0x0800e7d0
  ldr r2, =_sbss
 8002d54:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002d58:	20002dec 	.word	0x20002dec

08002d5c <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <ADC1_2_IRQHandler>
	...

08002d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <HAL_Init+0x28>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <HAL_Init+0x28>)
 8002d6a:	f043 0310 	orr.w	r3, r3, #16
 8002d6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d70:	2003      	movs	r0, #3
 8002d72:	f000 f8d1 	bl	8002f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7ff fe54 	bl	8002a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d7c:	f7ff fca6 	bl	80026cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40022000 	.word	0x40022000

08002d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_IncTick+0x1c>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_IncTick+0x20>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	4a03      	ldr	r2, [pc, #12]	; (8002dac <HAL_IncTick+0x20>)
 8002d9e:	6013      	str	r3, [r2, #0]
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	20002d98 	.word	0x20002d98

08002db0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return uwTick;
 8002db4:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <HAL_GetTick+0x10>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	20002d98 	.word	0x20002d98

08002dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de0:	4013      	ands	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df6:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <__NVIC_SetPriorityGrouping+0x44>)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	60d3      	str	r3, [r2, #12]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <__NVIC_GetPriorityGrouping+0x18>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	f003 0307 	and.w	r3, r3, #7
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	db0b      	blt.n	8002e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	f003 021f 	and.w	r2, r3, #31
 8002e40:	4906      	ldr	r1, [pc, #24]	; (8002e5c <__NVIC_EnableIRQ+0x34>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2001      	movs	r0, #1
 8002e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	e000e100 	.word	0xe000e100

08002e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db0a      	blt.n	8002e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	490c      	ldr	r1, [pc, #48]	; (8002eac <__NVIC_SetPriority+0x4c>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	440b      	add	r3, r1
 8002e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e88:	e00a      	b.n	8002ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4908      	ldr	r1, [pc, #32]	; (8002eb0 <__NVIC_SetPriority+0x50>)
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	3b04      	subs	r3, #4
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	761a      	strb	r2, [r3, #24]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e100 	.word	0xe000e100
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f1c3 0307 	rsb	r3, r3, #7
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	bf28      	it	cs
 8002ed2:	2304      	movcs	r3, #4
 8002ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d902      	bls.n	8002ee4 <NVIC_EncodePriority+0x30>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3b03      	subs	r3, #3
 8002ee2:	e000      	b.n	8002ee6 <NVIC_EncodePriority+0x32>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002efc:	f04f 31ff 	mov.w	r1, #4294967295
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	43d9      	mvns	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	4313      	orrs	r3, r2
         );
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	; 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ff4f 	bl	8002dc4 <__NVIC_SetPriorityGrouping>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b086      	sub	sp, #24
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f40:	f7ff ff64 	bl	8002e0c <__NVIC_GetPriorityGrouping>
 8002f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	6978      	ldr	r0, [r7, #20]
 8002f4c:	f7ff ffb2 	bl	8002eb4 <NVIC_EncodePriority>
 8002f50:	4602      	mov	r2, r0
 8002f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff81 	bl	8002e60 <__NVIC_SetPriority>
}
 8002f5e:	bf00      	nop
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff57 	bl	8002e28 <__NVIC_EnableIRQ>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e059      	b.n	800304e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_DMA_Init+0xd4>)
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d80f      	bhi.n	8002fc6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b2b      	ldr	r3, [pc, #172]	; (800305c <HAL_DMA_Init+0xd8>)
 8002fae:	4413      	add	r3, r2
 8002fb0:	4a2b      	ldr	r2, [pc, #172]	; (8003060 <HAL_DMA_Init+0xdc>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	009a      	lsls	r2, r3, #2
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a28      	ldr	r2, [pc, #160]	; (8003064 <HAL_DMA_Init+0xe0>)
 8002fc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fc4:	e00e      	b.n	8002fe4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b26      	ldr	r3, [pc, #152]	; (8003068 <HAL_DMA_Init+0xe4>)
 8002fce:	4413      	add	r3, r2
 8002fd0:	4a23      	ldr	r2, [pc, #140]	; (8003060 <HAL_DMA_Init+0xdc>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	009a      	lsls	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a22      	ldr	r2, [pc, #136]	; (800306c <HAL_DMA_Init+0xe8>)
 8002fe2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ffa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ffe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003008:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	40020407 	.word	0x40020407
 800305c:	bffdfff8 	.word	0xbffdfff8
 8003060:	cccccccd 	.word	0xcccccccd
 8003064:	40020000 	.word	0x40020000
 8003068:	bffdfbf8 	.word	0xbffdfbf8
 800306c:	40020400 	.word	0x40020400

08003070 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003082:	2b02      	cmp	r3, #2
 8003084:	d008      	beq.n	8003098 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2204      	movs	r2, #4
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e020      	b.n	80030da <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 020e 	bic.w	r2, r2, #14
 80030a6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f202 	lsl.w	r2, r1, r2
 80030c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d005      	beq.n	8003106 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2204      	movs	r2, #4
 80030fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
 8003104:	e0d6      	b.n	80032b4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 020e 	bic.w	r2, r2, #14
 8003114:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0201 	bic.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	4b64      	ldr	r3, [pc, #400]	; (80032c0 <HAL_DMA_Abort_IT+0x1dc>)
 800312e:	429a      	cmp	r2, r3
 8003130:	d958      	bls.n	80031e4 <HAL_DMA_Abort_IT+0x100>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a63      	ldr	r2, [pc, #396]	; (80032c4 <HAL_DMA_Abort_IT+0x1e0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d04f      	beq.n	80031dc <HAL_DMA_Abort_IT+0xf8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a61      	ldr	r2, [pc, #388]	; (80032c8 <HAL_DMA_Abort_IT+0x1e4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d048      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xf4>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a60      	ldr	r2, [pc, #384]	; (80032cc <HAL_DMA_Abort_IT+0x1e8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d040      	beq.n	80031d2 <HAL_DMA_Abort_IT+0xee>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a5e      	ldr	r2, [pc, #376]	; (80032d0 <HAL_DMA_Abort_IT+0x1ec>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d038      	beq.n	80031cc <HAL_DMA_Abort_IT+0xe8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a5d      	ldr	r2, [pc, #372]	; (80032d4 <HAL_DMA_Abort_IT+0x1f0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d030      	beq.n	80031c6 <HAL_DMA_Abort_IT+0xe2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a5b      	ldr	r2, [pc, #364]	; (80032d8 <HAL_DMA_Abort_IT+0x1f4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d028      	beq.n	80031c0 <HAL_DMA_Abort_IT+0xdc>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a53      	ldr	r2, [pc, #332]	; (80032c0 <HAL_DMA_Abort_IT+0x1dc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d020      	beq.n	80031ba <HAL_DMA_Abort_IT+0xd6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a57      	ldr	r2, [pc, #348]	; (80032dc <HAL_DMA_Abort_IT+0x1f8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d019      	beq.n	80031b6 <HAL_DMA_Abort_IT+0xd2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a56      	ldr	r2, [pc, #344]	; (80032e0 <HAL_DMA_Abort_IT+0x1fc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d012      	beq.n	80031b2 <HAL_DMA_Abort_IT+0xce>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a54      	ldr	r2, [pc, #336]	; (80032e4 <HAL_DMA_Abort_IT+0x200>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00a      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a53      	ldr	r2, [pc, #332]	; (80032e8 <HAL_DMA_Abort_IT+0x204>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d102      	bne.n	80031a6 <HAL_DMA_Abort_IT+0xc2>
 80031a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a4:	e01b      	b.n	80031de <HAL_DMA_Abort_IT+0xfa>
 80031a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031aa:	e018      	b.n	80031de <HAL_DMA_Abort_IT+0xfa>
 80031ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b0:	e015      	b.n	80031de <HAL_DMA_Abort_IT+0xfa>
 80031b2:	2310      	movs	r3, #16
 80031b4:	e013      	b.n	80031de <HAL_DMA_Abort_IT+0xfa>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e011      	b.n	80031de <HAL_DMA_Abort_IT+0xfa>
 80031ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031be:	e00e      	b.n	80031de <HAL_DMA_Abort_IT+0xfa>
 80031c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031c4:	e00b      	b.n	80031de <HAL_DMA_Abort_IT+0xfa>
 80031c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ca:	e008      	b.n	80031de <HAL_DMA_Abort_IT+0xfa>
 80031cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d0:	e005      	b.n	80031de <HAL_DMA_Abort_IT+0xfa>
 80031d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d6:	e002      	b.n	80031de <HAL_DMA_Abort_IT+0xfa>
 80031d8:	2310      	movs	r3, #16
 80031da:	e000      	b.n	80031de <HAL_DMA_Abort_IT+0xfa>
 80031dc:	2301      	movs	r3, #1
 80031de:	4a43      	ldr	r2, [pc, #268]	; (80032ec <HAL_DMA_Abort_IT+0x208>)
 80031e0:	6053      	str	r3, [r2, #4]
 80031e2:	e057      	b.n	8003294 <HAL_DMA_Abort_IT+0x1b0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a36      	ldr	r2, [pc, #216]	; (80032c4 <HAL_DMA_Abort_IT+0x1e0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d04f      	beq.n	800328e <HAL_DMA_Abort_IT+0x1aa>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a35      	ldr	r2, [pc, #212]	; (80032c8 <HAL_DMA_Abort_IT+0x1e4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d048      	beq.n	800328a <HAL_DMA_Abort_IT+0x1a6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a33      	ldr	r2, [pc, #204]	; (80032cc <HAL_DMA_Abort_IT+0x1e8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d040      	beq.n	8003284 <HAL_DMA_Abort_IT+0x1a0>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a32      	ldr	r2, [pc, #200]	; (80032d0 <HAL_DMA_Abort_IT+0x1ec>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d038      	beq.n	800327e <HAL_DMA_Abort_IT+0x19a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a30      	ldr	r2, [pc, #192]	; (80032d4 <HAL_DMA_Abort_IT+0x1f0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d030      	beq.n	8003278 <HAL_DMA_Abort_IT+0x194>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2f      	ldr	r2, [pc, #188]	; (80032d8 <HAL_DMA_Abort_IT+0x1f4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d028      	beq.n	8003272 <HAL_DMA_Abort_IT+0x18e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a26      	ldr	r2, [pc, #152]	; (80032c0 <HAL_DMA_Abort_IT+0x1dc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d020      	beq.n	800326c <HAL_DMA_Abort_IT+0x188>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a2b      	ldr	r2, [pc, #172]	; (80032dc <HAL_DMA_Abort_IT+0x1f8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d019      	beq.n	8003268 <HAL_DMA_Abort_IT+0x184>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a29      	ldr	r2, [pc, #164]	; (80032e0 <HAL_DMA_Abort_IT+0x1fc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d012      	beq.n	8003264 <HAL_DMA_Abort_IT+0x180>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a28      	ldr	r2, [pc, #160]	; (80032e4 <HAL_DMA_Abort_IT+0x200>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00a      	beq.n	800325e <HAL_DMA_Abort_IT+0x17a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a26      	ldr	r2, [pc, #152]	; (80032e8 <HAL_DMA_Abort_IT+0x204>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d102      	bne.n	8003258 <HAL_DMA_Abort_IT+0x174>
 8003252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003256:	e01b      	b.n	8003290 <HAL_DMA_Abort_IT+0x1ac>
 8003258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800325c:	e018      	b.n	8003290 <HAL_DMA_Abort_IT+0x1ac>
 800325e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003262:	e015      	b.n	8003290 <HAL_DMA_Abort_IT+0x1ac>
 8003264:	2310      	movs	r3, #16
 8003266:	e013      	b.n	8003290 <HAL_DMA_Abort_IT+0x1ac>
 8003268:	2301      	movs	r3, #1
 800326a:	e011      	b.n	8003290 <HAL_DMA_Abort_IT+0x1ac>
 800326c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003270:	e00e      	b.n	8003290 <HAL_DMA_Abort_IT+0x1ac>
 8003272:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003276:	e00b      	b.n	8003290 <HAL_DMA_Abort_IT+0x1ac>
 8003278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800327c:	e008      	b.n	8003290 <HAL_DMA_Abort_IT+0x1ac>
 800327e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003282:	e005      	b.n	8003290 <HAL_DMA_Abort_IT+0x1ac>
 8003284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003288:	e002      	b.n	8003290 <HAL_DMA_Abort_IT+0x1ac>
 800328a:	2310      	movs	r3, #16
 800328c:	e000      	b.n	8003290 <HAL_DMA_Abort_IT+0x1ac>
 800328e:	2301      	movs	r3, #1
 8003290:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <HAL_DMA_Abort_IT+0x20c>)
 8003292:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
    } 
  }
  return status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40020080 	.word	0x40020080
 80032c4:	40020008 	.word	0x40020008
 80032c8:	4002001c 	.word	0x4002001c
 80032cc:	40020030 	.word	0x40020030
 80032d0:	40020044 	.word	0x40020044
 80032d4:	40020058 	.word	0x40020058
 80032d8:	4002006c 	.word	0x4002006c
 80032dc:	40020408 	.word	0x40020408
 80032e0:	4002041c 	.word	0x4002041c
 80032e4:	40020430 	.word	0x40020430
 80032e8:	40020444 	.word	0x40020444
 80032ec:	40020400 	.word	0x40020400
 80032f0:	40020000 	.word	0x40020000

080032f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	2204      	movs	r2, #4
 8003312:	409a      	lsls	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80d6 	beq.w	80034ca <HAL_DMA_IRQHandler+0x1d6>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80d0 	beq.w	80034ca <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0204 	bic.w	r2, r2, #4
 8003346:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	4b9b      	ldr	r3, [pc, #620]	; (80035bc <HAL_DMA_IRQHandler+0x2c8>)
 8003350:	429a      	cmp	r2, r3
 8003352:	d958      	bls.n	8003406 <HAL_DMA_IRQHandler+0x112>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a99      	ldr	r2, [pc, #612]	; (80035c0 <HAL_DMA_IRQHandler+0x2cc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d04f      	beq.n	80033fe <HAL_DMA_IRQHandler+0x10a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a98      	ldr	r2, [pc, #608]	; (80035c4 <HAL_DMA_IRQHandler+0x2d0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d048      	beq.n	80033fa <HAL_DMA_IRQHandler+0x106>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a96      	ldr	r2, [pc, #600]	; (80035c8 <HAL_DMA_IRQHandler+0x2d4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d040      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x100>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a95      	ldr	r2, [pc, #596]	; (80035cc <HAL_DMA_IRQHandler+0x2d8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d038      	beq.n	80033ee <HAL_DMA_IRQHandler+0xfa>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a93      	ldr	r2, [pc, #588]	; (80035d0 <HAL_DMA_IRQHandler+0x2dc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d030      	beq.n	80033e8 <HAL_DMA_IRQHandler+0xf4>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a92      	ldr	r2, [pc, #584]	; (80035d4 <HAL_DMA_IRQHandler+0x2e0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d028      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xee>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a89      	ldr	r2, [pc, #548]	; (80035bc <HAL_DMA_IRQHandler+0x2c8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d020      	beq.n	80033dc <HAL_DMA_IRQHandler+0xe8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a8e      	ldr	r2, [pc, #568]	; (80035d8 <HAL_DMA_IRQHandler+0x2e4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d019      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xe4>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a8c      	ldr	r2, [pc, #560]	; (80035dc <HAL_DMA_IRQHandler+0x2e8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d012      	beq.n	80033d4 <HAL_DMA_IRQHandler+0xe0>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a8b      	ldr	r2, [pc, #556]	; (80035e0 <HAL_DMA_IRQHandler+0x2ec>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00a      	beq.n	80033ce <HAL_DMA_IRQHandler+0xda>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a89      	ldr	r2, [pc, #548]	; (80035e4 <HAL_DMA_IRQHandler+0x2f0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d102      	bne.n	80033c8 <HAL_DMA_IRQHandler+0xd4>
 80033c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033c6:	e01b      	b.n	8003400 <HAL_DMA_IRQHandler+0x10c>
 80033c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033cc:	e018      	b.n	8003400 <HAL_DMA_IRQHandler+0x10c>
 80033ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033d2:	e015      	b.n	8003400 <HAL_DMA_IRQHandler+0x10c>
 80033d4:	2340      	movs	r3, #64	; 0x40
 80033d6:	e013      	b.n	8003400 <HAL_DMA_IRQHandler+0x10c>
 80033d8:	2304      	movs	r3, #4
 80033da:	e011      	b.n	8003400 <HAL_DMA_IRQHandler+0x10c>
 80033dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033e0:	e00e      	b.n	8003400 <HAL_DMA_IRQHandler+0x10c>
 80033e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033e6:	e00b      	b.n	8003400 <HAL_DMA_IRQHandler+0x10c>
 80033e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033ec:	e008      	b.n	8003400 <HAL_DMA_IRQHandler+0x10c>
 80033ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033f2:	e005      	b.n	8003400 <HAL_DMA_IRQHandler+0x10c>
 80033f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f8:	e002      	b.n	8003400 <HAL_DMA_IRQHandler+0x10c>
 80033fa:	2340      	movs	r3, #64	; 0x40
 80033fc:	e000      	b.n	8003400 <HAL_DMA_IRQHandler+0x10c>
 80033fe:	2304      	movs	r3, #4
 8003400:	4a79      	ldr	r2, [pc, #484]	; (80035e8 <HAL_DMA_IRQHandler+0x2f4>)
 8003402:	6053      	str	r3, [r2, #4]
 8003404:	e057      	b.n	80034b6 <HAL_DMA_IRQHandler+0x1c2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a6d      	ldr	r2, [pc, #436]	; (80035c0 <HAL_DMA_IRQHandler+0x2cc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d04f      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x1bc>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a6b      	ldr	r2, [pc, #428]	; (80035c4 <HAL_DMA_IRQHandler+0x2d0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d048      	beq.n	80034ac <HAL_DMA_IRQHandler+0x1b8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6a      	ldr	r2, [pc, #424]	; (80035c8 <HAL_DMA_IRQHandler+0x2d4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d040      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x1b2>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a68      	ldr	r2, [pc, #416]	; (80035cc <HAL_DMA_IRQHandler+0x2d8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d038      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x1ac>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a67      	ldr	r2, [pc, #412]	; (80035d0 <HAL_DMA_IRQHandler+0x2dc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d030      	beq.n	800349a <HAL_DMA_IRQHandler+0x1a6>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a65      	ldr	r2, [pc, #404]	; (80035d4 <HAL_DMA_IRQHandler+0x2e0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d028      	beq.n	8003494 <HAL_DMA_IRQHandler+0x1a0>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a5d      	ldr	r2, [pc, #372]	; (80035bc <HAL_DMA_IRQHandler+0x2c8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d020      	beq.n	800348e <HAL_DMA_IRQHandler+0x19a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a61      	ldr	r2, [pc, #388]	; (80035d8 <HAL_DMA_IRQHandler+0x2e4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d019      	beq.n	800348a <HAL_DMA_IRQHandler+0x196>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a60      	ldr	r2, [pc, #384]	; (80035dc <HAL_DMA_IRQHandler+0x2e8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d012      	beq.n	8003486 <HAL_DMA_IRQHandler+0x192>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a5e      	ldr	r2, [pc, #376]	; (80035e0 <HAL_DMA_IRQHandler+0x2ec>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00a      	beq.n	8003480 <HAL_DMA_IRQHandler+0x18c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a5d      	ldr	r2, [pc, #372]	; (80035e4 <HAL_DMA_IRQHandler+0x2f0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d102      	bne.n	800347a <HAL_DMA_IRQHandler+0x186>
 8003474:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003478:	e01b      	b.n	80034b2 <HAL_DMA_IRQHandler+0x1be>
 800347a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800347e:	e018      	b.n	80034b2 <HAL_DMA_IRQHandler+0x1be>
 8003480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003484:	e015      	b.n	80034b2 <HAL_DMA_IRQHandler+0x1be>
 8003486:	2340      	movs	r3, #64	; 0x40
 8003488:	e013      	b.n	80034b2 <HAL_DMA_IRQHandler+0x1be>
 800348a:	2304      	movs	r3, #4
 800348c:	e011      	b.n	80034b2 <HAL_DMA_IRQHandler+0x1be>
 800348e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003492:	e00e      	b.n	80034b2 <HAL_DMA_IRQHandler+0x1be>
 8003494:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003498:	e00b      	b.n	80034b2 <HAL_DMA_IRQHandler+0x1be>
 800349a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800349e:	e008      	b.n	80034b2 <HAL_DMA_IRQHandler+0x1be>
 80034a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034a4:	e005      	b.n	80034b2 <HAL_DMA_IRQHandler+0x1be>
 80034a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034aa:	e002      	b.n	80034b2 <HAL_DMA_IRQHandler+0x1be>
 80034ac:	2340      	movs	r3, #64	; 0x40
 80034ae:	e000      	b.n	80034b2 <HAL_DMA_IRQHandler+0x1be>
 80034b0:	2304      	movs	r3, #4
 80034b2:	4a4e      	ldr	r2, [pc, #312]	; (80035ec <HAL_DMA_IRQHandler+0x2f8>)
 80034b4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8136 	beq.w	800372c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80034c8:	e130      	b.n	800372c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2202      	movs	r2, #2
 80034d0:	409a      	lsls	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80f8 	beq.w	80036cc <HAL_DMA_IRQHandler+0x3d8>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80f2 	beq.w	80036cc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 020a 	bic.w	r2, r2, #10
 8003504:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	4b29      	ldr	r3, [pc, #164]	; (80035bc <HAL_DMA_IRQHandler+0x2c8>)
 8003516:	429a      	cmp	r2, r3
 8003518:	d973      	bls.n	8003602 <HAL_DMA_IRQHandler+0x30e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a28      	ldr	r2, [pc, #160]	; (80035c0 <HAL_DMA_IRQHandler+0x2cc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d06a      	beq.n	80035fa <HAL_DMA_IRQHandler+0x306>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_DMA_IRQHandler+0x2d0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d063      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x302>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <HAL_DMA_IRQHandler+0x2d4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d05b      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x2fc>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a23      	ldr	r2, [pc, #140]	; (80035cc <HAL_DMA_IRQHandler+0x2d8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d038      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x2c0>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a22      	ldr	r2, [pc, #136]	; (80035d0 <HAL_DMA_IRQHandler+0x2dc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d030      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ba>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <HAL_DMA_IRQHandler+0x2e0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d028      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x2b4>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_DMA_IRQHandler+0x2c8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d020      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x2ae>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_DMA_IRQHandler+0x2e4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d019      	beq.n	800359e <HAL_DMA_IRQHandler+0x2aa>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <HAL_DMA_IRQHandler+0x2e8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d012      	beq.n	800359a <HAL_DMA_IRQHandler+0x2a6>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_DMA_IRQHandler+0x2ec>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00a      	beq.n	8003594 <HAL_DMA_IRQHandler+0x2a0>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <HAL_DMA_IRQHandler+0x2f0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d102      	bne.n	800358e <HAL_DMA_IRQHandler+0x29a>
 8003588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800358c:	e036      	b.n	80035fc <HAL_DMA_IRQHandler+0x308>
 800358e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003592:	e033      	b.n	80035fc <HAL_DMA_IRQHandler+0x308>
 8003594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003598:	e030      	b.n	80035fc <HAL_DMA_IRQHandler+0x308>
 800359a:	2320      	movs	r3, #32
 800359c:	e02e      	b.n	80035fc <HAL_DMA_IRQHandler+0x308>
 800359e:	2302      	movs	r3, #2
 80035a0:	e02c      	b.n	80035fc <HAL_DMA_IRQHandler+0x308>
 80035a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035a6:	e029      	b.n	80035fc <HAL_DMA_IRQHandler+0x308>
 80035a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035ac:	e026      	b.n	80035fc <HAL_DMA_IRQHandler+0x308>
 80035ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035b2:	e023      	b.n	80035fc <HAL_DMA_IRQHandler+0x308>
 80035b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035b8:	e020      	b.n	80035fc <HAL_DMA_IRQHandler+0x308>
 80035ba:	bf00      	nop
 80035bc:	40020080 	.word	0x40020080
 80035c0:	40020008 	.word	0x40020008
 80035c4:	4002001c 	.word	0x4002001c
 80035c8:	40020030 	.word	0x40020030
 80035cc:	40020044 	.word	0x40020044
 80035d0:	40020058 	.word	0x40020058
 80035d4:	4002006c 	.word	0x4002006c
 80035d8:	40020408 	.word	0x40020408
 80035dc:	4002041c 	.word	0x4002041c
 80035e0:	40020430 	.word	0x40020430
 80035e4:	40020444 	.word	0x40020444
 80035e8:	40020400 	.word	0x40020400
 80035ec:	40020000 	.word	0x40020000
 80035f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035f4:	e002      	b.n	80035fc <HAL_DMA_IRQHandler+0x308>
 80035f6:	2320      	movs	r3, #32
 80035f8:	e000      	b.n	80035fc <HAL_DMA_IRQHandler+0x308>
 80035fa:	2302      	movs	r3, #2
 80035fc:	4a4e      	ldr	r2, [pc, #312]	; (8003738 <HAL_DMA_IRQHandler+0x444>)
 80035fe:	6053      	str	r3, [r2, #4]
 8003600:	e057      	b.n	80036b2 <HAL_DMA_IRQHandler+0x3be>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a4d      	ldr	r2, [pc, #308]	; (800373c <HAL_DMA_IRQHandler+0x448>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d04f      	beq.n	80036ac <HAL_DMA_IRQHandler+0x3b8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a4b      	ldr	r2, [pc, #300]	; (8003740 <HAL_DMA_IRQHandler+0x44c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d048      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x3b4>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a4a      	ldr	r2, [pc, #296]	; (8003744 <HAL_DMA_IRQHandler+0x450>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d040      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3ae>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a48      	ldr	r2, [pc, #288]	; (8003748 <HAL_DMA_IRQHandler+0x454>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d038      	beq.n	800369c <HAL_DMA_IRQHandler+0x3a8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a47      	ldr	r2, [pc, #284]	; (800374c <HAL_DMA_IRQHandler+0x458>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d030      	beq.n	8003696 <HAL_DMA_IRQHandler+0x3a2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a45      	ldr	r2, [pc, #276]	; (8003750 <HAL_DMA_IRQHandler+0x45c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d028      	beq.n	8003690 <HAL_DMA_IRQHandler+0x39c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a44      	ldr	r2, [pc, #272]	; (8003754 <HAL_DMA_IRQHandler+0x460>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d020      	beq.n	800368a <HAL_DMA_IRQHandler+0x396>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a42      	ldr	r2, [pc, #264]	; (8003758 <HAL_DMA_IRQHandler+0x464>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d019      	beq.n	8003686 <HAL_DMA_IRQHandler+0x392>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a41      	ldr	r2, [pc, #260]	; (800375c <HAL_DMA_IRQHandler+0x468>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d012      	beq.n	8003682 <HAL_DMA_IRQHandler+0x38e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a3f      	ldr	r2, [pc, #252]	; (8003760 <HAL_DMA_IRQHandler+0x46c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00a      	beq.n	800367c <HAL_DMA_IRQHandler+0x388>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a3e      	ldr	r2, [pc, #248]	; (8003764 <HAL_DMA_IRQHandler+0x470>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d102      	bne.n	8003676 <HAL_DMA_IRQHandler+0x382>
 8003670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003674:	e01b      	b.n	80036ae <HAL_DMA_IRQHandler+0x3ba>
 8003676:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800367a:	e018      	b.n	80036ae <HAL_DMA_IRQHandler+0x3ba>
 800367c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003680:	e015      	b.n	80036ae <HAL_DMA_IRQHandler+0x3ba>
 8003682:	2320      	movs	r3, #32
 8003684:	e013      	b.n	80036ae <HAL_DMA_IRQHandler+0x3ba>
 8003686:	2302      	movs	r3, #2
 8003688:	e011      	b.n	80036ae <HAL_DMA_IRQHandler+0x3ba>
 800368a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800368e:	e00e      	b.n	80036ae <HAL_DMA_IRQHandler+0x3ba>
 8003690:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003694:	e00b      	b.n	80036ae <HAL_DMA_IRQHandler+0x3ba>
 8003696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800369a:	e008      	b.n	80036ae <HAL_DMA_IRQHandler+0x3ba>
 800369c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036a0:	e005      	b.n	80036ae <HAL_DMA_IRQHandler+0x3ba>
 80036a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a6:	e002      	b.n	80036ae <HAL_DMA_IRQHandler+0x3ba>
 80036a8:	2320      	movs	r3, #32
 80036aa:	e000      	b.n	80036ae <HAL_DMA_IRQHandler+0x3ba>
 80036ac:	2302      	movs	r3, #2
 80036ae:	4a2e      	ldr	r2, [pc, #184]	; (8003768 <HAL_DMA_IRQHandler+0x474>)
 80036b0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d034      	beq.n	800372c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80036ca:	e02f      	b.n	800372c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	2208      	movs	r2, #8
 80036d2:	409a      	lsls	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d028      	beq.n	800372e <HAL_DMA_IRQHandler+0x43a>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d023      	beq.n	800372e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 020e 	bic.w	r2, r2, #14
 80036f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f202 	lsl.w	r2, r1, r2
 8003704:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	2b00      	cmp	r3, #0
 8003722:	d004      	beq.n	800372e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
    }
  }
  return;
 800372c:	bf00      	nop
 800372e:	bf00      	nop
}
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40020400 	.word	0x40020400
 800373c:	40020008 	.word	0x40020008
 8003740:	4002001c 	.word	0x4002001c
 8003744:	40020030 	.word	0x40020030
 8003748:	40020044 	.word	0x40020044
 800374c:	40020058 	.word	0x40020058
 8003750:	4002006c 	.word	0x4002006c
 8003754:	40020080 	.word	0x40020080
 8003758:	40020408 	.word	0x40020408
 800375c:	4002041c 	.word	0x4002041c
 8003760:	40020430 	.word	0x40020430
 8003764:	40020444 	.word	0x40020444
 8003768:	40020000 	.word	0x40020000

0800376c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003784:	b480      	push	{r7}
 8003786:	b08b      	sub	sp, #44	; 0x2c
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003792:	2300      	movs	r3, #0
 8003794:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003796:	e169      	b.n	8003a6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003798:	2201      	movs	r2, #1
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	f040 8158 	bne.w	8003a66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4a9a      	ldr	r2, [pc, #616]	; (8003a24 <HAL_GPIO_Init+0x2a0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d05e      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037c0:	4a98      	ldr	r2, [pc, #608]	; (8003a24 <HAL_GPIO_Init+0x2a0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d875      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037c6:	4a98      	ldr	r2, [pc, #608]	; (8003a28 <HAL_GPIO_Init+0x2a4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d058      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037cc:	4a96      	ldr	r2, [pc, #600]	; (8003a28 <HAL_GPIO_Init+0x2a4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d86f      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037d2:	4a96      	ldr	r2, [pc, #600]	; (8003a2c <HAL_GPIO_Init+0x2a8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d052      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037d8:	4a94      	ldr	r2, [pc, #592]	; (8003a2c <HAL_GPIO_Init+0x2a8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d869      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037de:	4a94      	ldr	r2, [pc, #592]	; (8003a30 <HAL_GPIO_Init+0x2ac>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d04c      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037e4:	4a92      	ldr	r2, [pc, #584]	; (8003a30 <HAL_GPIO_Init+0x2ac>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d863      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037ea:	4a92      	ldr	r2, [pc, #584]	; (8003a34 <HAL_GPIO_Init+0x2b0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d046      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037f0:	4a90      	ldr	r2, [pc, #576]	; (8003a34 <HAL_GPIO_Init+0x2b0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d85d      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037f6:	2b12      	cmp	r3, #18
 80037f8:	d82a      	bhi.n	8003850 <HAL_GPIO_Init+0xcc>
 80037fa:	2b12      	cmp	r3, #18
 80037fc:	d859      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037fe:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <HAL_GPIO_Init+0x80>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	0800387f 	.word	0x0800387f
 8003808:	08003859 	.word	0x08003859
 800380c:	0800386b 	.word	0x0800386b
 8003810:	080038ad 	.word	0x080038ad
 8003814:	080038b3 	.word	0x080038b3
 8003818:	080038b3 	.word	0x080038b3
 800381c:	080038b3 	.word	0x080038b3
 8003820:	080038b3 	.word	0x080038b3
 8003824:	080038b3 	.word	0x080038b3
 8003828:	080038b3 	.word	0x080038b3
 800382c:	080038b3 	.word	0x080038b3
 8003830:	080038b3 	.word	0x080038b3
 8003834:	080038b3 	.word	0x080038b3
 8003838:	080038b3 	.word	0x080038b3
 800383c:	080038b3 	.word	0x080038b3
 8003840:	080038b3 	.word	0x080038b3
 8003844:	080038b3 	.word	0x080038b3
 8003848:	08003861 	.word	0x08003861
 800384c:	08003875 	.word	0x08003875
 8003850:	4a79      	ldr	r2, [pc, #484]	; (8003a38 <HAL_GPIO_Init+0x2b4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003856:	e02c      	b.n	80038b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	623b      	str	r3, [r7, #32]
          break;
 800385e:	e029      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	3304      	adds	r3, #4
 8003866:	623b      	str	r3, [r7, #32]
          break;
 8003868:	e024      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	3308      	adds	r3, #8
 8003870:	623b      	str	r3, [r7, #32]
          break;
 8003872:	e01f      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	330c      	adds	r3, #12
 800387a:	623b      	str	r3, [r7, #32]
          break;
 800387c:	e01a      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003886:	2304      	movs	r3, #4
 8003888:	623b      	str	r3, [r7, #32]
          break;
 800388a:	e013      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003894:	2308      	movs	r3, #8
 8003896:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	611a      	str	r2, [r3, #16]
          break;
 800389e:	e009      	b.n	80038b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038a0:	2308      	movs	r3, #8
 80038a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	615a      	str	r2, [r3, #20]
          break;
 80038aa:	e003      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038ac:	2300      	movs	r3, #0
 80038ae:	623b      	str	r3, [r7, #32]
          break;
 80038b0:	e000      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          break;
 80038b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2bff      	cmp	r3, #255	; 0xff
 80038b8:	d801      	bhi.n	80038be <HAL_GPIO_Init+0x13a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	e001      	b.n	80038c2 <HAL_GPIO_Init+0x13e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3304      	adds	r3, #4
 80038c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2bff      	cmp	r3, #255	; 0xff
 80038c8:	d802      	bhi.n	80038d0 <HAL_GPIO_Init+0x14c>
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	e002      	b.n	80038d6 <HAL_GPIO_Init+0x152>
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	3b08      	subs	r3, #8
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	210f      	movs	r1, #15
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	401a      	ands	r2, r3
 80038e8:	6a39      	ldr	r1, [r7, #32]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	431a      	orrs	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80b1 	beq.w	8003a66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003904:	4b4d      	ldr	r3, [pc, #308]	; (8003a3c <HAL_GPIO_Init+0x2b8>)
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	4a4c      	ldr	r2, [pc, #304]	; (8003a3c <HAL_GPIO_Init+0x2b8>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6193      	str	r3, [r2, #24]
 8003910:	4b4a      	ldr	r3, [pc, #296]	; (8003a3c <HAL_GPIO_Init+0x2b8>)
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800391c:	4a48      	ldr	r2, [pc, #288]	; (8003a40 <HAL_GPIO_Init+0x2bc>)
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	3302      	adds	r3, #2
 8003924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003928:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	220f      	movs	r2, #15
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4013      	ands	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a40      	ldr	r2, [pc, #256]	; (8003a44 <HAL_GPIO_Init+0x2c0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <HAL_GPIO_Init+0x1ec>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a3f      	ldr	r2, [pc, #252]	; (8003a48 <HAL_GPIO_Init+0x2c4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00d      	beq.n	800396c <HAL_GPIO_Init+0x1e8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a3e      	ldr	r2, [pc, #248]	; (8003a4c <HAL_GPIO_Init+0x2c8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d007      	beq.n	8003968 <HAL_GPIO_Init+0x1e4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a3d      	ldr	r2, [pc, #244]	; (8003a50 <HAL_GPIO_Init+0x2cc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d101      	bne.n	8003964 <HAL_GPIO_Init+0x1e0>
 8003960:	2303      	movs	r3, #3
 8003962:	e006      	b.n	8003972 <HAL_GPIO_Init+0x1ee>
 8003964:	2304      	movs	r3, #4
 8003966:	e004      	b.n	8003972 <HAL_GPIO_Init+0x1ee>
 8003968:	2302      	movs	r3, #2
 800396a:	e002      	b.n	8003972 <HAL_GPIO_Init+0x1ee>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <HAL_GPIO_Init+0x1ee>
 8003970:	2300      	movs	r3, #0
 8003972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003974:	f002 0203 	and.w	r2, r2, #3
 8003978:	0092      	lsls	r2, r2, #2
 800397a:	4093      	lsls	r3, r2
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003982:	492f      	ldr	r1, [pc, #188]	; (8003a40 <HAL_GPIO_Init+0x2bc>)
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3302      	adds	r3, #2
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d006      	beq.n	80039aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800399c:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	492c      	ldr	r1, [pc, #176]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]
 80039a8:	e006      	b.n	80039b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039aa:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	4928      	ldr	r1, [pc, #160]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d006      	beq.n	80039d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039c4:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	4922      	ldr	r1, [pc, #136]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]
 80039d0:	e006      	b.n	80039e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039d2:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	43db      	mvns	r3, r3
 80039da:	491e      	ldr	r1, [pc, #120]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039dc:	4013      	ands	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d006      	beq.n	80039fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	4918      	ldr	r1, [pc, #96]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]
 80039f8:	e006      	b.n	8003a08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039fa:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	4914      	ldr	r1, [pc, #80]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d021      	beq.n	8003a58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	490e      	ldr	r1, [pc, #56]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60cb      	str	r3, [r1, #12]
 8003a20:	e021      	b.n	8003a66 <HAL_GPIO_Init+0x2e2>
 8003a22:	bf00      	nop
 8003a24:	10320000 	.word	0x10320000
 8003a28:	10310000 	.word	0x10310000
 8003a2c:	10220000 	.word	0x10220000
 8003a30:	10210000 	.word	0x10210000
 8003a34:	10120000 	.word	0x10120000
 8003a38:	10110000 	.word	0x10110000
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40010000 	.word	0x40010000
 8003a44:	40010800 	.word	0x40010800
 8003a48:	40010c00 	.word	0x40010c00
 8003a4c:	40011000 	.word	0x40011000
 8003a50:	40011400 	.word	0x40011400
 8003a54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_GPIO_Init+0x304>)
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	4909      	ldr	r1, [pc, #36]	; (8003a88 <HAL_GPIO_Init+0x304>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	3301      	adds	r3, #1
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	fa22 f303 	lsr.w	r3, r2, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f47f ae8e 	bne.w	8003798 <HAL_GPIO_Init+0x14>
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	372c      	adds	r7, #44	; 0x2c
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40010400 	.word	0x40010400

08003a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a9c:	787b      	ldrb	r3, [r7, #1]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003aa8:	e003      	b.n	8003ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	041a      	lsls	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	611a      	str	r2, [r3, #16]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e12b      	b.n	8003d26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fe fe2a 	bl	800273c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2224      	movs	r2, #36	; 0x24
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b20:	f002 fc0a 	bl	8006338 <HAL_RCC_GetPCLK1Freq>
 8003b24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4a81      	ldr	r2, [pc, #516]	; (8003d30 <HAL_I2C_Init+0x274>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d807      	bhi.n	8003b40 <HAL_I2C_Init+0x84>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a80      	ldr	r2, [pc, #512]	; (8003d34 <HAL_I2C_Init+0x278>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	bf94      	ite	ls
 8003b38:	2301      	movls	r3, #1
 8003b3a:	2300      	movhi	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e006      	b.n	8003b4e <HAL_I2C_Init+0x92>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a7d      	ldr	r2, [pc, #500]	; (8003d38 <HAL_I2C_Init+0x27c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	bf94      	ite	ls
 8003b48:	2301      	movls	r3, #1
 8003b4a:	2300      	movhi	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e0e7      	b.n	8003d26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a78      	ldr	r2, [pc, #480]	; (8003d3c <HAL_I2C_Init+0x280>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0c9b      	lsrs	r3, r3, #18
 8003b60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a6a      	ldr	r2, [pc, #424]	; (8003d30 <HAL_I2C_Init+0x274>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d802      	bhi.n	8003b90 <HAL_I2C_Init+0xd4>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	e009      	b.n	8003ba4 <HAL_I2C_Init+0xe8>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	4a69      	ldr	r2, [pc, #420]	; (8003d40 <HAL_I2C_Init+0x284>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	495c      	ldr	r1, [pc, #368]	; (8003d30 <HAL_I2C_Init+0x274>)
 8003bc0:	428b      	cmp	r3, r1
 8003bc2:	d819      	bhi.n	8003bf8 <HAL_I2C_Init+0x13c>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1e59      	subs	r1, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd2:	1c59      	adds	r1, r3, #1
 8003bd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bd8:	400b      	ands	r3, r1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_I2C_Init+0x138>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1e59      	subs	r1, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bec:	3301      	adds	r3, #1
 8003bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf2:	e051      	b.n	8003c98 <HAL_I2C_Init+0x1dc>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	e04f      	b.n	8003c98 <HAL_I2C_Init+0x1dc>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d111      	bne.n	8003c24 <HAL_I2C_Init+0x168>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1e58      	subs	r0, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	440b      	add	r3, r1
 8003c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e012      	b.n	8003c4a <HAL_I2C_Init+0x18e>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1e58      	subs	r0, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	0099      	lsls	r1, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Init+0x196>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e022      	b.n	8003c98 <HAL_I2C_Init+0x1dc>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10e      	bne.n	8003c78 <HAL_I2C_Init+0x1bc>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1e58      	subs	r0, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	440b      	add	r3, r1
 8003c68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c76:	e00f      	b.n	8003c98 <HAL_I2C_Init+0x1dc>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1e58      	subs	r0, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	0099      	lsls	r1, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	6809      	ldr	r1, [r1, #0]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6911      	ldr	r1, [r2, #16]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68d2      	ldr	r2, [r2, #12]
 8003cd2:	4311      	orrs	r1, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	000186a0 	.word	0x000186a0
 8003d34:	001e847f 	.word	0x001e847f
 8003d38:	003d08ff 	.word	0x003d08ff
 8003d3c:	431bde83 	.word	0x431bde83
 8003d40:	10624dd3 	.word	0x10624dd3

08003d44 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	460b      	mov	r3, r1
 8003d52:	817b      	strh	r3, [r7, #10]
 8003d54:	4613      	mov	r3, r2
 8003d56:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	f040 8085 	bne.w	8003e74 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d6a:	4b45      	ldr	r3, [pc, #276]	; (8003e80 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	08db      	lsrs	r3, r3, #3
 8003d70:	4a44      	ldr	r2, [pc, #272]	; (8003e84 <HAL_I2C_Master_Transmit_IT+0x140>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	0a1a      	lsrs	r2, r3, #8
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009a      	lsls	r2, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d116      	bne.n	8003dbe <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f043 0220 	orr.w	r2, r3, #32
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e05b      	b.n	8003e76 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d0db      	beq.n	8003d84 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_I2C_Master_Transmit_IT+0x96>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e04d      	b.n	8003e76 <HAL_I2C_Master_Transmit_IT+0x132>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d007      	beq.n	8003e00 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2221      	movs	r2, #33	; 0x21
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	893a      	ldrh	r2, [r7, #8]
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <HAL_I2C_Master_Transmit_IT+0x144>)
 8003e40:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003e42:	897a      	ldrh	r2, [r7, #10]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003e5e:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e6e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	e000      	b.n	8003e76 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8003e74:	2302      	movs	r3, #2
  }
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr
 8003e80:	20000004 	.word	0x20000004
 8003e84:	14f8b589 	.word	0x14f8b589
 8003e88:	ffff0000 	.word	0xffff0000

08003e8c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	461a      	mov	r2, r3
 8003e98:	460b      	mov	r3, r1
 8003e9a:	817b      	strh	r3, [r7, #10]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	f040 808d 	bne.w	8003fcc <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003eb2:	4b49      	ldr	r3, [pc, #292]	; (8003fd8 <HAL_I2C_Master_Receive_IT+0x14c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	08db      	lsrs	r3, r3, #3
 8003eb8:	4a48      	ldr	r2, [pc, #288]	; (8003fdc <HAL_I2C_Master_Receive_IT+0x150>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	0a1a      	lsrs	r2, r3, #8
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009a      	lsls	r2, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d116      	bne.n	8003f06 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e063      	b.n	8003fce <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d0db      	beq.n	8003ecc <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_I2C_Master_Receive_IT+0x96>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e055      	b.n	8003fce <HAL_I2C_Master_Receive_IT+0x142>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d007      	beq.n	8003f48 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2222      	movs	r2, #34	; 0x22
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2210      	movs	r2, #16
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	893a      	ldrh	r2, [r7, #8]
 8003f78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4a16      	ldr	r2, [pc, #88]	; (8003fe0 <HAL_I2C_Master_Receive_IT+0x154>)
 8003f88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003f8a:	897a      	ldrh	r2, [r7, #10]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003fa6:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	20000004 	.word	0x20000004
 8003fdc:	14f8b589 	.word	0x14f8b589
 8003fe0:	ffff0000 	.word	0xffff0000

08003fe4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004004:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	2b10      	cmp	r3, #16
 8004012:	d003      	beq.n	800401c <HAL_I2C_EV_IRQHandler+0x38>
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b40      	cmp	r3, #64	; 0x40
 8004018:	f040 80c1 	bne.w	800419e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10d      	bne.n	8004052 <HAL_I2C_EV_IRQHandler+0x6e>
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800403c:	d003      	beq.n	8004046 <HAL_I2C_EV_IRQHandler+0x62>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004044:	d101      	bne.n	800404a <HAL_I2C_EV_IRQHandler+0x66>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_I2C_EV_IRQHandler+0x68>
 800404a:	2300      	movs	r3, #0
 800404c:	2b01      	cmp	r3, #1
 800404e:	f000 8132 	beq.w	80042b6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00c      	beq.n	8004076 <HAL_I2C_EV_IRQHandler+0x92>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	0a5b      	lsrs	r3, r3, #9
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d006      	beq.n	8004076 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f001 fc51 	bl	8005910 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fd53 	bl	8004b1a <I2C_Master_SB>
 8004074:	e092      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	08db      	lsrs	r3, r3, #3
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_I2C_EV_IRQHandler+0xb2>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	0a5b      	lsrs	r3, r3, #9
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fdc8 	bl	8004c24 <I2C_Master_ADD10>
 8004094:	e082      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	0a5b      	lsrs	r3, r3, #9
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fde1 	bl	8004c76 <I2C_Master_ADDR>
 80040b4:	e072      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d03b      	beq.n	800413a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d0:	f000 80f3 	beq.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	09db      	lsrs	r3, r3, #7
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00f      	beq.n	8004100 <HAL_I2C_EV_IRQHandler+0x11c>
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	0a9b      	lsrs	r3, r3, #10
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <HAL_I2C_EV_IRQHandler+0x11c>
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f9cd 	bl	8004498 <I2C_MasterTransmit_TXE>
 80040fe:	e04d      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	089b      	lsrs	r3, r3, #2
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80d6 	beq.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	0a5b      	lsrs	r3, r3, #9
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80cf 	beq.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800411c:	7bbb      	ldrb	r3, [r7, #14]
 800411e:	2b21      	cmp	r3, #33	; 0x21
 8004120:	d103      	bne.n	800412a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fa54 	bl	80045d0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004128:	e0c7      	b.n	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	f040 80c4 	bne.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fac2 	bl	80046bc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004138:	e0bf      	b.n	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004148:	f000 80b7 	beq.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	099b      	lsrs	r3, r3, #6
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00f      	beq.n	8004178 <HAL_I2C_EV_IRQHandler+0x194>
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	0a9b      	lsrs	r3, r3, #10
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <HAL_I2C_EV_IRQHandler+0x194>
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	089b      	lsrs	r3, r3, #2
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d103      	bne.n	8004178 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fb37 	bl	80047e4 <I2C_MasterReceive_RXNE>
 8004176:	e011      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	089b      	lsrs	r3, r3, #2
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 809a 	beq.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	0a5b      	lsrs	r3, r3, #9
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8093 	beq.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fbd6 	bl	8004946 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800419a:	e08e      	b.n	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800419c:	e08d      	b.n	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	e007      	b.n	80041c0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d012      	beq.n	80041f2 <HAL_I2C_EV_IRQHandler+0x20e>
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	0a5b      	lsrs	r3, r3, #9
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00c      	beq.n	80041f2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80041e8:	69b9      	ldr	r1, [r7, #24]
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 ff9a 	bl	8005124 <I2C_Slave_ADDR>
 80041f0:	e066      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_I2C_EV_IRQHandler+0x22e>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	0a5b      	lsrs	r3, r3, #9
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 ffd4 	bl	80051b8 <I2C_Slave_STOPF>
 8004210:	e056      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004212:	7bbb      	ldrb	r3, [r7, #14]
 8004214:	2b21      	cmp	r3, #33	; 0x21
 8004216:	d002      	beq.n	800421e <HAL_I2C_EV_IRQHandler+0x23a>
 8004218:	7bbb      	ldrb	r3, [r7, #14]
 800421a:	2b29      	cmp	r3, #41	; 0x29
 800421c:	d125      	bne.n	800426a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	09db      	lsrs	r3, r3, #7
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00f      	beq.n	800424a <HAL_I2C_EV_IRQHandler+0x266>
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	0a9b      	lsrs	r3, r3, #10
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_I2C_EV_IRQHandler+0x266>
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 feb2 	bl	8004fac <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004248:	e039      	b.n	80042be <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d033      	beq.n	80042be <HAL_I2C_EV_IRQHandler+0x2da>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	0a5b      	lsrs	r3, r3, #9
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d02d      	beq.n	80042be <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fedf 	bl	8005026 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004268:	e029      	b.n	80042be <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	099b      	lsrs	r3, r3, #6
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00f      	beq.n	8004296 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	0a9b      	lsrs	r3, r3, #10
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d009      	beq.n	8004296 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fee9 	bl	8005066 <I2C_SlaveReceive_RXNE>
 8004294:	e014      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	089b      	lsrs	r3, r3, #2
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00e      	beq.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	0a5b      	lsrs	r3, r3, #9
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 ff17 	bl	80050e2 <I2C_SlaveReceive_BTF>
 80042b4:	e004      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80042b6:	bf00      	nop
 80042b8:	e002      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ba:	bf00      	nop
 80042bc:	e000      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042be:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b08a      	sub	sp, #40	; 0x28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80042de:	2300      	movs	r3, #0
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042e8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	0a1b      	lsrs	r3, r3, #8
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d016      	beq.n	8004324 <HAL_I2C_ER_IRQHandler+0x5e>
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d010      	beq.n	8004324 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004312:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004322:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	0a5b      	lsrs	r3, r3, #9
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00e      	beq.n	800434e <HAL_I2C_ER_IRQHandler+0x88>
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	f043 0302 	orr.w	r3, r3, #2
 8004342:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800434c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	0a9b      	lsrs	r3, r3, #10
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d03f      	beq.n	80043da <HAL_I2C_ER_IRQHandler+0x114>
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	0a1b      	lsrs	r3, r3, #8
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d039      	beq.n	80043da <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004366:	7efb      	ldrb	r3, [r7, #27]
 8004368:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004378:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004380:	7ebb      	ldrb	r3, [r7, #26]
 8004382:	2b20      	cmp	r3, #32
 8004384:	d112      	bne.n	80043ac <HAL_I2C_ER_IRQHandler+0xe6>
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10f      	bne.n	80043ac <HAL_I2C_ER_IRQHandler+0xe6>
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	2b21      	cmp	r3, #33	; 0x21
 8004390:	d008      	beq.n	80043a4 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	2b29      	cmp	r3, #41	; 0x29
 8004396:	d005      	beq.n	80043a4 <HAL_I2C_ER_IRQHandler+0xde>
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	2b28      	cmp	r3, #40	; 0x28
 800439c:	d106      	bne.n	80043ac <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b21      	cmp	r3, #33	; 0x21
 80043a2:	d103      	bne.n	80043ac <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f001 f837 	bl	8005418 <I2C_Slave_AF>
 80043aa:	e016      	b.n	80043da <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043b4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	f043 0304 	orr.w	r3, r3, #4
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043be:	7efb      	ldrb	r3, [r7, #27]
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	d002      	beq.n	80043ca <HAL_I2C_ER_IRQHandler+0x104>
 80043c4:	7efb      	ldrb	r3, [r7, #27]
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	d107      	bne.n	80043da <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	0adb      	lsrs	r3, r3, #11
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00e      	beq.n	8004404 <HAL_I2C_ER_IRQHandler+0x13e>
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	0a1b      	lsrs	r3, r3, #8
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d008      	beq.n	8004404 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	f043 0308 	orr.w	r3, r3, #8
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004402:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f001 f86e 	bl	80054f8 <I2C_ITError>
  }
}
 800441c:	bf00      	nop
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	70fb      	strb	r3, [r7, #3]
 8004454:	4613      	mov	r3, r2
 8004456:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr

08004462 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d150      	bne.n	8004560 <I2C_MasterTransmit_TXE+0xc8>
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	2b21      	cmp	r3, #33	; 0x21
 80044c2:	d14d      	bne.n	8004560 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d01d      	beq.n	8004506 <I2C_MasterTransmit_TXE+0x6e>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d01a      	beq.n	8004506 <I2C_MasterTransmit_TXE+0x6e>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044d6:	d016      	beq.n	8004506 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044e6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2211      	movs	r2, #17
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fd fa36 	bl	8001970 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004504:	e060      	b.n	80045c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004514:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004524:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d107      	bne.n	8004550 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff ff93 	bl	8004474 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800454e:	e03b      	b.n	80045c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7fd fa09 	bl	8001970 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800455e:	e033      	b.n	80045c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b21      	cmp	r3, #33	; 0x21
 8004564:	d005      	beq.n	8004572 <I2C_MasterTransmit_TXE+0xda>
 8004566:	7bbb      	ldrb	r3, [r7, #14]
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	d12d      	bne.n	80045c8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	2b22      	cmp	r3, #34	; 0x22
 8004570:	d12a      	bne.n	80045c8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d108      	bne.n	800458e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800458c:	e01c      	b.n	80045c8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d103      	bne.n	80045a2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f88e 	bl	80046bc <I2C_MemoryTransmit_TXE_BTF>
}
 80045a0:	e012      	b.n	80045c8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	781a      	ldrb	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045c6:	e7ff      	b.n	80045c8 <I2C_MasterTransmit_TXE+0x130>
 80045c8:	bf00      	nop
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b21      	cmp	r3, #33	; 0x21
 80045e8:	d164      	bne.n	80046b4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d012      	beq.n	800461a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	781a      	ldrb	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004618:	e04c      	b.n	80046b4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d01d      	beq.n	800465c <I2C_MasterTransmit_BTF+0x8c>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b20      	cmp	r3, #32
 8004624:	d01a      	beq.n	800465c <I2C_MasterTransmit_BTF+0x8c>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800462c:	d016      	beq.n	800465c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800463c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2211      	movs	r2, #17
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fd f98b 	bl	8001970 <HAL_I2C_MasterTxCpltCallback>
}
 800465a:	e02b      	b.n	80046b4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800466a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d107      	bne.n	80046a6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff fee8 	bl	8004474 <HAL_I2C_MemTxCpltCallback>
}
 80046a4:	e006      	b.n	80046b4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd f95e 	bl	8001970 <HAL_I2C_MasterTxCpltCallback>
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d11d      	bne.n	8004710 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d10b      	bne.n	80046f4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	1c9a      	adds	r2, r3, #2
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80046f2:	e073      	b.n	80047dc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	121b      	asrs	r3, r3, #8
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800470e:	e065      	b.n	80047dc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004714:	2b01      	cmp	r3, #1
 8004716:	d10b      	bne.n	8004730 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471c:	b2da      	uxtb	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800472e:	e055      	b.n	80047dc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	2b02      	cmp	r3, #2
 8004736:	d151      	bne.n	80047dc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	2b22      	cmp	r3, #34	; 0x22
 800473c:	d10d      	bne.n	800475a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800474c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004758:	e040      	b.n	80047dc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d015      	beq.n	8004790 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b21      	cmp	r3, #33	; 0x21
 8004768:	d112      	bne.n	8004790 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	781a      	ldrb	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800478e:	e025      	b.n	80047dc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d120      	bne.n	80047dc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b21      	cmp	r3, #33	; 0x21
 800479e:	d11d      	bne.n	80047dc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047ae:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff fe4c 	bl	8004474 <HAL_I2C_MemTxCpltCallback>
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b22      	cmp	r3, #34	; 0x22
 80047f6:	f040 80a2 	bne.w	800493e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d921      	bls.n	800484c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b03      	cmp	r3, #3
 8004836:	f040 8082 	bne.w	800493e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004848:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800484a:	e078      	b.n	800493e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	2b02      	cmp	r3, #2
 8004852:	d074      	beq.n	800493e <I2C_MasterReceive_RXNE+0x15a>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d002      	beq.n	8004860 <I2C_MasterReceive_RXNE+0x7c>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d16e      	bne.n	800493e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f001 f823 	bl	80058ac <I2C_WaitOnSTOPRequestThroughIT>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d142      	bne.n	80048f2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800488a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b40      	cmp	r3, #64	; 0x40
 80048c4:	d10a      	bne.n	80048dc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fdd6 	bl	8004486 <HAL_I2C_MemRxCpltCallback>
}
 80048da:	e030      	b.n	800493e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2212      	movs	r2, #18
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fd f854 	bl	8001998 <HAL_I2C_MasterRxCpltCallback>
}
 80048f0:	e025      	b.n	800493e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004900:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7fd f841 	bl	80019c0 <HAL_I2C_ErrorCallback>
}
 800493e:	bf00      	nop
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b04      	cmp	r3, #4
 800495c:	d11b      	bne.n	8004996 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004994:	e0bd      	b.n	8004b12 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b03      	cmp	r3, #3
 800499e:	d129      	bne.n	80049f4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d00a      	beq.n	80049cc <I2C_MasterReceive_BTF+0x86>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d007      	beq.n	80049cc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049f2:	e08e      	b.n	8004b12 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d176      	bne.n	8004aec <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d002      	beq.n	8004a0a <I2C_MasterReceive_BTF+0xc4>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b10      	cmp	r3, #16
 8004a08:	d108      	bne.n	8004a1c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e019      	b.n	8004a50 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d002      	beq.n	8004a28 <I2C_MasterReceive_BTF+0xe2>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d108      	bne.n	8004a3a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e00a      	b.n	8004a50 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d007      	beq.n	8004a50 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004aaa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b40      	cmp	r3, #64	; 0x40
 8004abe:	d10a      	bne.n	8004ad6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff fcd9 	bl	8004486 <HAL_I2C_MemRxCpltCallback>
}
 8004ad4:	e01d      	b.n	8004b12 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2212      	movs	r2, #18
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7fc ff57 	bl	8001998 <HAL_I2C_MasterRxCpltCallback>
}
 8004aea:	e012      	b.n	8004b12 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d117      	bne.n	8004b5e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b46:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b48:	e067      	b.n	8004c1a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	611a      	str	r2, [r3, #16]
}
 8004b5c:	e05d      	b.n	8004c1a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b66:	d133      	bne.n	8004bd0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b21      	cmp	r3, #33	; 0x21
 8004b72:	d109      	bne.n	8004b88 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b84:	611a      	str	r2, [r3, #16]
 8004b86:	e008      	b.n	8004b9a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d004      	beq.n	8004bac <I2C_Master_SB+0x92>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d108      	bne.n	8004bbe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d032      	beq.n	8004c1a <I2C_Master_SB+0x100>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d02d      	beq.n	8004c1a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bcc:	605a      	str	r2, [r3, #4]
}
 8004bce:	e024      	b.n	8004c1a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10e      	bne.n	8004bf6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	11db      	asrs	r3, r3, #7
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f003 0306 	and.w	r3, r3, #6
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f063 030f 	orn	r3, r3, #15
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	611a      	str	r2, [r3, #16]
}
 8004bf4:	e011      	b.n	8004c1a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d10d      	bne.n	8004c1a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	11db      	asrs	r3, r3, #7
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	f003 0306 	and.w	r3, r3, #6
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f063 030e 	orn	r3, r3, #14
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	611a      	str	r2, [r3, #16]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <I2C_Master_ADD10+0x26>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d108      	bne.n	8004c5c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00c      	beq.n	8004c6c <I2C_Master_ADD10+0x48>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c6a:	605a      	str	r2, [r3, #4]
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr

08004c76 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b091      	sub	sp, #68	; 0x44
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b22      	cmp	r3, #34	; 0x22
 8004c9e:	f040 8174 	bne.w	8004f8a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10f      	bne.n	8004cca <I2C_Master_ADDR+0x54>
 8004caa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	d10b      	bne.n	8004cca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	e16b      	b.n	8004fa2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d11d      	bne.n	8004d0e <I2C_Master_ADDR+0x98>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cda:	d118      	bne.n	8004d0e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cdc:	2300      	movs	r3, #0
 8004cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d00:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	651a      	str	r2, [r3, #80]	; 0x50
 8004d0c:	e149      	b.n	8004fa2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d113      	bne.n	8004d40 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	e120      	b.n	8004f82 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	f040 808a 	bne.w	8004e60 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d52:	d137      	bne.n	8004dc4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d62:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d72:	d113      	bne.n	8004d9c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d82:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d84:	2300      	movs	r3, #0
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	e0f2      	b.n	8004f82 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	623b      	str	r3, [r7, #32]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	623b      	str	r3, [r7, #32]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	623b      	str	r3, [r7, #32]
 8004db0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	e0de      	b.n	8004f82 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d02e      	beq.n	8004e28 <I2C_Master_ADDR+0x1b2>
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d02b      	beq.n	8004e28 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd2:	2b12      	cmp	r3, #18
 8004dd4:	d102      	bne.n	8004ddc <I2C_Master_ADDR+0x166>
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d125      	bne.n	8004e28 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d00e      	beq.n	8004e00 <I2C_Master_ADDR+0x18a>
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d00b      	beq.n	8004e00 <I2C_Master_ADDR+0x18a>
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d008      	beq.n	8004e00 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	e007      	b.n	8004e10 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e0e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e10:	2300      	movs	r3, #0
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	61fb      	str	r3, [r7, #28]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	61fb      	str	r3, [r7, #28]
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	e0ac      	b.n	8004f82 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e36:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61bb      	str	r3, [r7, #24]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	61bb      	str	r3, [r7, #24]
 8004e4c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	e090      	b.n	8004f82 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d158      	bne.n	8004f1c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d021      	beq.n	8004eb4 <I2C_Master_ADDR+0x23e>
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d01e      	beq.n	8004eb4 <I2C_Master_ADDR+0x23e>
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d01b      	beq.n	8004eb4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	e012      	b.n	8004eda <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ec2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee8:	d14b      	bne.n	8004f82 <I2C_Master_ADDR+0x30c>
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ef0:	d00b      	beq.n	8004f0a <I2C_Master_ADDR+0x294>
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d008      	beq.n	8004f0a <I2C_Master_ADDR+0x294>
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d005      	beq.n	8004f0a <I2C_Master_ADDR+0x294>
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d002      	beq.n	8004f0a <I2C_Master_ADDR+0x294>
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d13b      	bne.n	8004f82 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	e032      	b.n	8004f82 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f2a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3a:	d117      	bne.n	8004f6c <I2C_Master_ADDR+0x2f6>
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f42:	d00b      	beq.n	8004f5c <I2C_Master_ADDR+0x2e6>
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d008      	beq.n	8004f5c <I2C_Master_ADDR+0x2e6>
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d005      	beq.n	8004f5c <I2C_Master_ADDR+0x2e6>
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d002      	beq.n	8004f5c <I2C_Master_ADDR+0x2e6>
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d107      	bne.n	8004f6c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f6a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004f88:	e00b      	b.n	8004fa2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
}
 8004fa0:	e7ff      	b.n	8004fa2 <I2C_Master_ADDR+0x32c>
 8004fa2:	bf00      	nop
 8004fa4:	3744      	adds	r7, #68	; 0x44
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr

08004fac <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d02b      	beq.n	800501e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	781a      	ldrb	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d114      	bne.n	800501e <I2C_SlaveTransmit_TXE+0x72>
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	2b29      	cmp	r3, #41	; 0x29
 8004ff8:	d111      	bne.n	800501e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005008:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2221      	movs	r2, #33	; 0x21
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2228      	movs	r2, #40	; 0x28
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff fa03 	bl	8004424 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800501e:	bf00      	nop
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d011      	beq.n	800505c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	781a      	ldrb	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	bc80      	pop	{r7}
 8005064:	4770      	bx	lr

08005066 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005074:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02c      	beq.n	80050da <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d114      	bne.n	80050da <I2C_SlaveReceive_RXNE+0x74>
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b2a      	cmp	r3, #42	; 0x2a
 80050b4:	d111      	bne.n	80050da <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2222      	movs	r2, #34	; 0x22
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2228      	movs	r2, #40	; 0x28
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff f9ae 	bl	8004436 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80050da:	bf00      	nop
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d012      	beq.n	800511a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr

08005124 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800512e:	2300      	movs	r3, #0
 8005130:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800513e:	2b28      	cmp	r3, #40	; 0x28
 8005140:	d127      	bne.n	8005192 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005150:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	089b      	lsrs	r3, r3, #2
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800515e:	2301      	movs	r3, #1
 8005160:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	09db      	lsrs	r3, r3, #7
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	81bb      	strh	r3, [r7, #12]
 8005174:	e002      	b.n	800517c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005184:	89ba      	ldrh	r2, [r7, #12]
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff f95c 	bl	8004448 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005190:	e00e      	b.n	80051b0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005192:	2300      	movs	r3, #0
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051d6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80051d8:	2300      	movs	r3, #0
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	60bb      	str	r3, [r7, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005204:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005214:	d172      	bne.n	80052fc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b22      	cmp	r3, #34	; 0x22
 800521a:	d002      	beq.n	8005222 <I2C_Slave_STOPF+0x6a>
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b2a      	cmp	r3, #42	; 0x2a
 8005220:	d135      	bne.n	800528e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	b29a      	uxth	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f043 0204 	orr.w	r2, r3, #4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005254:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	4618      	mov	r0, r3
 800525c:	f7fe fa86 	bl	800376c <HAL_DMA_GetState>
 8005260:	4603      	mov	r3, r0
 8005262:	2b01      	cmp	r3, #1
 8005264:	d049      	beq.n	80052fa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	4a69      	ldr	r2, [pc, #420]	; (8005410 <I2C_Slave_STOPF+0x258>)
 800526c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	4618      	mov	r0, r3
 8005274:	f7fd ff36 	bl	80030e4 <HAL_DMA_Abort_IT>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d03d      	beq.n	80052fa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005288:	4610      	mov	r0, r2
 800528a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800528c:	e035      	b.n	80052fa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b29a      	uxth	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f043 0204 	orr.w	r2, r3, #4
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe fa50 	bl	800376c <HAL_DMA_GetState>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d014      	beq.n	80052fc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d6:	4a4e      	ldr	r2, [pc, #312]	; (8005410 <I2C_Slave_STOPF+0x258>)
 80052d8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fd ff00 	bl	80030e4 <HAL_DMA_Abort_IT>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d008      	beq.n	80052fc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052f4:	4610      	mov	r0, r2
 80052f6:	4798      	blx	r3
 80052f8:	e000      	b.n	80052fc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052fa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d03e      	beq.n	8005384 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b04      	cmp	r3, #4
 8005312:	d112      	bne.n	800533a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691a      	ldr	r2, [r3, #16]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	d112      	bne.n	800536e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691a      	ldr	r2, [r3, #16]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	f043 0204 	orr.w	r2, r3, #4
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f8b3 	bl	80054f8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005392:	e039      	b.n	8005408 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	2b2a      	cmp	r3, #42	; 0x2a
 8005398:	d109      	bne.n	80053ae <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2228      	movs	r2, #40	; 0x28
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff f844 	bl	8004436 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b28      	cmp	r3, #40	; 0x28
 80053b8:	d111      	bne.n	80053de <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a15      	ldr	r2, [pc, #84]	; (8005414 <I2C_Slave_STOPF+0x25c>)
 80053be:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff f843 	bl	8004462 <HAL_I2C_ListenCpltCallback>
}
 80053dc:	e014      	b.n	8005408 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	2b22      	cmp	r3, #34	; 0x22
 80053e4:	d002      	beq.n	80053ec <I2C_Slave_STOPF+0x234>
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b22      	cmp	r3, #34	; 0x22
 80053ea:	d10d      	bne.n	8005408 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7ff f817 	bl	8004436 <HAL_I2C_SlaveRxCpltCallback>
}
 8005408:	bf00      	nop
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	0800575d 	.word	0x0800575d
 8005414:	ffff0000 	.word	0xffff0000

08005418 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005426:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d002      	beq.n	800543a <I2C_Slave_AF+0x22>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b20      	cmp	r3, #32
 8005438:	d129      	bne.n	800548e <I2C_Slave_AF+0x76>
 800543a:	7bfb      	ldrb	r3, [r7, #15]
 800543c:	2b28      	cmp	r3, #40	; 0x28
 800543e:	d126      	bne.n	800548e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a2c      	ldr	r2, [pc, #176]	; (80054f4 <I2C_Slave_AF+0xdc>)
 8005444:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005454:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800545e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fe ffeb 	bl	8004462 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800548c:	e02e      	b.n	80054ec <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800548e:	7bfb      	ldrb	r3, [r7, #15]
 8005490:	2b21      	cmp	r3, #33	; 0x21
 8005492:	d126      	bne.n	80054e2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a17      	ldr	r2, [pc, #92]	; (80054f4 <I2C_Slave_AF+0xdc>)
 8005498:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2221      	movs	r2, #33	; 0x21
 800549e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054be:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054c8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fe ffa2 	bl	8004424 <HAL_I2C_SlaveTxCpltCallback>
}
 80054e0:	e004      	b.n	80054ec <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054ea:	615a      	str	r2, [r3, #20]
}
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	ffff0000 	.word	0xffff0000

080054f8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005506:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800550e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005510:	7bbb      	ldrb	r3, [r7, #14]
 8005512:	2b10      	cmp	r3, #16
 8005514:	d002      	beq.n	800551c <I2C_ITError+0x24>
 8005516:	7bbb      	ldrb	r3, [r7, #14]
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d10a      	bne.n	8005532 <I2C_ITError+0x3a>
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	2b22      	cmp	r3, #34	; 0x22
 8005520:	d107      	bne.n	8005532 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005530:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005538:	2b28      	cmp	r3, #40	; 0x28
 800553a:	d107      	bne.n	800554c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2228      	movs	r2, #40	; 0x28
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800554a:	e015      	b.n	8005578 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555a:	d00a      	beq.n	8005572 <I2C_ITError+0x7a>
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	2b60      	cmp	r3, #96	; 0x60
 8005560:	d007      	beq.n	8005572 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005586:	d161      	bne.n	800564c <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005596:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d020      	beq.n	80055e6 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	4a6a      	ldr	r2, [pc, #424]	; (8005754 <I2C_ITError+0x25c>)
 80055aa:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fd fd97 	bl	80030e4 <HAL_DMA_Abort_IT>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 8089 	beq.w	80056d0 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055e0:	4610      	mov	r0, r2
 80055e2:	4798      	blx	r3
 80055e4:	e074      	b.n	80056d0 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	4a5a      	ldr	r2, [pc, #360]	; (8005754 <I2C_ITError+0x25c>)
 80055ec:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fd fd76 	bl	80030e4 <HAL_DMA_Abort_IT>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d068      	beq.n	80056d0 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d10b      	bne.n	8005624 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0201 	bic.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005646:	4610      	mov	r0, r2
 8005648:	4798      	blx	r3
 800564a:	e041      	b.n	80056d0 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b60      	cmp	r3, #96	; 0x60
 8005656:	d125      	bne.n	80056a4 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b40      	cmp	r3, #64	; 0x40
 8005672:	d10b      	bne.n	800568c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0201 	bic.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7fc f9af 	bl	8001a00 <HAL_I2C_AbortCpltCallback>
 80056a2:	e015      	b.n	80056d0 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d10b      	bne.n	80056ca <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fc f978 	bl	80019c0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10e      	bne.n	80056fe <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d104      	bne.n	80056fe <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800570c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005714:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b04      	cmp	r3, #4
 8005720:	d113      	bne.n	800574a <I2C_ITError+0x252>
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	2b28      	cmp	r3, #40	; 0x28
 8005726:	d110      	bne.n	800574a <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a0b      	ldr	r2, [pc, #44]	; (8005758 <I2C_ITError+0x260>)
 800572c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7fe fe8c 	bl	8004462 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	0800575d 	.word	0x0800575d
 8005758:	ffff0000 	.word	0xffff0000

0800575c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005774:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005776:	4b4b      	ldr	r3, [pc, #300]	; (80058a4 <I2C_DMAAbort+0x148>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	08db      	lsrs	r3, r3, #3
 800577c:	4a4a      	ldr	r2, [pc, #296]	; (80058a8 <I2C_DMAAbort+0x14c>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	0a1a      	lsrs	r2, r3, #8
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	00da      	lsls	r2, r3, #3
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f043 0220 	orr.w	r2, r3, #32
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80057a2:	e00a      	b.n	80057ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b8:	d0ea      	beq.n	8005790 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c6:	2200      	movs	r2, #0
 80057c8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	2200      	movs	r2, #0
 80057d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2200      	movs	r2, #0
 80057ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fc:	2200      	movs	r2, #0
 80057fe:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	2200      	movs	r2, #0
 800580e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b60      	cmp	r3, #96	; 0x60
 800582a:	d10e      	bne.n	800584a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2200      	movs	r2, #0
 8005840:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005842:	6978      	ldr	r0, [r7, #20]
 8005844:	f7fc f8dc 	bl	8001a00 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005848:	e027      	b.n	800589a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800584a:	7cfb      	ldrb	r3, [r7, #19]
 800584c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005850:	2b28      	cmp	r3, #40	; 0x28
 8005852:	d117      	bne.n	8005884 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005872:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2200      	movs	r2, #0
 8005878:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2228      	movs	r2, #40	; 0x28
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005882:	e007      	b.n	8005894 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005894:	6978      	ldr	r0, [r7, #20]
 8005896:	f7fc f893 	bl	80019c0 <HAL_I2C_ErrorCallback>
}
 800589a:	bf00      	nop
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000004 	.word	0x20000004
 80058a8:	14f8b589 	.word	0x14f8b589

080058ac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80058b8:	4b13      	ldr	r3, [pc, #76]	; (8005908 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	08db      	lsrs	r3, r3, #3
 80058be:	4a13      	ldr	r2, [pc, #76]	; (800590c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80058c0:	fba2 2303 	umull	r2, r3, r2, r3
 80058c4:	0a1a      	lsrs	r2, r3, #8
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d107      	bne.n	80058ea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	f043 0220 	orr.w	r2, r3, #32
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e008      	b.n	80058fc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f8:	d0e9      	beq.n	80058ce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	20000004 	.word	0x20000004
 800590c:	14f8b589 	.word	0x14f8b589

08005910 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005920:	d103      	bne.n	800592a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005928:	e007      	b.n	800593a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005932:	d102      	bne.n	800593a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2208      	movs	r2, #8
 8005938:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr

08005944 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005948:	4b03      	ldr	r3, [pc, #12]	; (8005958 <HAL_PWR_EnableBkUpAccess+0x14>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]
}
 800594e:	bf00      	nop
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	420e0020 	.word	0x420e0020

0800595c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e304      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8087 	beq.w	8005a8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800597c:	4b92      	ldr	r3, [pc, #584]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f003 030c 	and.w	r3, r3, #12
 8005984:	2b04      	cmp	r3, #4
 8005986:	d00c      	beq.n	80059a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005988:	4b8f      	ldr	r3, [pc, #572]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f003 030c 	and.w	r3, r3, #12
 8005990:	2b08      	cmp	r3, #8
 8005992:	d112      	bne.n	80059ba <HAL_RCC_OscConfig+0x5e>
 8005994:	4b8c      	ldr	r3, [pc, #560]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800599c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a0:	d10b      	bne.n	80059ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a2:	4b89      	ldr	r3, [pc, #548]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d06c      	beq.n	8005a88 <HAL_RCC_OscConfig+0x12c>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d168      	bne.n	8005a88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e2de      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c2:	d106      	bne.n	80059d2 <HAL_RCC_OscConfig+0x76>
 80059c4:	4b80      	ldr	r3, [pc, #512]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a7f      	ldr	r2, [pc, #508]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 80059ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	e02e      	b.n	8005a30 <HAL_RCC_OscConfig+0xd4>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10c      	bne.n	80059f4 <HAL_RCC_OscConfig+0x98>
 80059da:	4b7b      	ldr	r3, [pc, #492]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a7a      	ldr	r2, [pc, #488]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 80059e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	4b78      	ldr	r3, [pc, #480]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a77      	ldr	r2, [pc, #476]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 80059ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	e01d      	b.n	8005a30 <HAL_RCC_OscConfig+0xd4>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059fc:	d10c      	bne.n	8005a18 <HAL_RCC_OscConfig+0xbc>
 80059fe:	4b72      	ldr	r3, [pc, #456]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a71      	ldr	r2, [pc, #452]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	4b6f      	ldr	r3, [pc, #444]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a6e      	ldr	r2, [pc, #440]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	e00b      	b.n	8005a30 <HAL_RCC_OscConfig+0xd4>
 8005a18:	4b6b      	ldr	r3, [pc, #428]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a6a      	ldr	r2, [pc, #424]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	4b68      	ldr	r3, [pc, #416]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a67      	ldr	r2, [pc, #412]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d013      	beq.n	8005a60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a38:	f7fd f9ba 	bl	8002db0 <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a40:	f7fd f9b6 	bl	8002db0 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b64      	cmp	r3, #100	; 0x64
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e292      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a52:	4b5d      	ldr	r3, [pc, #372]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0f0      	beq.n	8005a40 <HAL_RCC_OscConfig+0xe4>
 8005a5e:	e014      	b.n	8005a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a60:	f7fd f9a6 	bl	8002db0 <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a68:	f7fd f9a2 	bl	8002db0 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b64      	cmp	r3, #100	; 0x64
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e27e      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a7a:	4b53      	ldr	r3, [pc, #332]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f0      	bne.n	8005a68 <HAL_RCC_OscConfig+0x10c>
 8005a86:	e000      	b.n	8005a8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d063      	beq.n	8005b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a96:	4b4c      	ldr	r3, [pc, #304]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f003 030c 	and.w	r3, r3, #12
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005aa2:	4b49      	ldr	r3, [pc, #292]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f003 030c 	and.w	r3, r3, #12
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d11c      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x18c>
 8005aae:	4b46      	ldr	r3, [pc, #280]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d116      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aba:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d005      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x176>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d001      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e252      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad2:	4b3d      	ldr	r3, [pc, #244]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4939      	ldr	r1, [pc, #228]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ae6:	e03a      	b.n	8005b5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d020      	beq.n	8005b32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005af0:	4b36      	ldr	r3, [pc, #216]	; (8005bcc <HAL_RCC_OscConfig+0x270>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af6:	f7fd f95b 	bl	8002db0 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005afe:	f7fd f957 	bl	8002db0 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e233      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b10:	4b2d      	ldr	r3, [pc, #180]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f0      	beq.n	8005afe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1c:	4b2a      	ldr	r3, [pc, #168]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	4927      	ldr	r1, [pc, #156]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	600b      	str	r3, [r1, #0]
 8005b30:	e015      	b.n	8005b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b32:	4b26      	ldr	r3, [pc, #152]	; (8005bcc <HAL_RCC_OscConfig+0x270>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b38:	f7fd f93a 	bl	8002db0 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b40:	f7fd f936 	bl	8002db0 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e212      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b52:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d03a      	beq.n	8005be0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d019      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b72:	4b17      	ldr	r3, [pc, #92]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005b74:	2201      	movs	r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b78:	f7fd f91a 	bl	8002db0 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b80:	f7fd f916 	bl	8002db0 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e1f2      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b92:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <HAL_RCC_OscConfig+0x26c>)
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b9e:	2001      	movs	r0, #1
 8005ba0:	f000 fc22 	bl	80063e8 <RCC_Delay>
 8005ba4:	e01c      	b.n	8005be0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ba6:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bac:	f7fd f900 	bl	8002db0 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bb2:	e00f      	b.n	8005bd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb4:	f7fd f8fc 	bl	8002db0 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d908      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e1d8      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
 8005bc6:	bf00      	nop
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	42420000 	.word	0x42420000
 8005bd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd4:	4b9b      	ldr	r3, [pc, #620]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e9      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80a6 	beq.w	8005d3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bf2:	4b94      	ldr	r3, [pc, #592]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10d      	bne.n	8005c1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bfe:	4b91      	ldr	r3, [pc, #580]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	4a90      	ldr	r2, [pc, #576]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c08:	61d3      	str	r3, [r2, #28]
 8005c0a:	4b8e      	ldr	r3, [pc, #568]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c12:	60bb      	str	r3, [r7, #8]
 8005c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c16:	2301      	movs	r3, #1
 8005c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1a:	4b8b      	ldr	r3, [pc, #556]	; (8005e48 <HAL_RCC_OscConfig+0x4ec>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d118      	bne.n	8005c58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c26:	4b88      	ldr	r3, [pc, #544]	; (8005e48 <HAL_RCC_OscConfig+0x4ec>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a87      	ldr	r2, [pc, #540]	; (8005e48 <HAL_RCC_OscConfig+0x4ec>)
 8005c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c32:	f7fd f8bd 	bl	8002db0 <HAL_GetTick>
 8005c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c3a:	f7fd f8b9 	bl	8002db0 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b64      	cmp	r3, #100	; 0x64
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e195      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c4c:	4b7e      	ldr	r3, [pc, #504]	; (8005e48 <HAL_RCC_OscConfig+0x4ec>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d106      	bne.n	8005c6e <HAL_RCC_OscConfig+0x312>
 8005c60:	4b78      	ldr	r3, [pc, #480]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	4a77      	ldr	r2, [pc, #476]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	6213      	str	r3, [r2, #32]
 8005c6c:	e02d      	b.n	8005cca <HAL_RCC_OscConfig+0x36e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10c      	bne.n	8005c90 <HAL_RCC_OscConfig+0x334>
 8005c76:	4b73      	ldr	r3, [pc, #460]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	4a72      	ldr	r2, [pc, #456]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	6213      	str	r3, [r2, #32]
 8005c82:	4b70      	ldr	r3, [pc, #448]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	4a6f      	ldr	r2, [pc, #444]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005c88:	f023 0304 	bic.w	r3, r3, #4
 8005c8c:	6213      	str	r3, [r2, #32]
 8005c8e:	e01c      	b.n	8005cca <HAL_RCC_OscConfig+0x36e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b05      	cmp	r3, #5
 8005c96:	d10c      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x356>
 8005c98:	4b6a      	ldr	r3, [pc, #424]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	4a69      	ldr	r2, [pc, #420]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005c9e:	f043 0304 	orr.w	r3, r3, #4
 8005ca2:	6213      	str	r3, [r2, #32]
 8005ca4:	4b67      	ldr	r3, [pc, #412]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	4a66      	ldr	r2, [pc, #408]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	6213      	str	r3, [r2, #32]
 8005cb0:	e00b      	b.n	8005cca <HAL_RCC_OscConfig+0x36e>
 8005cb2:	4b64      	ldr	r3, [pc, #400]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	4a63      	ldr	r2, [pc, #396]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	6213      	str	r3, [r2, #32]
 8005cbe:	4b61      	ldr	r3, [pc, #388]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	4a60      	ldr	r2, [pc, #384]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005cc4:	f023 0304 	bic.w	r3, r3, #4
 8005cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d015      	beq.n	8005cfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd2:	f7fd f86d 	bl	8002db0 <HAL_GetTick>
 8005cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd8:	e00a      	b.n	8005cf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cda:	f7fd f869 	bl	8002db0 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e143      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf0:	4b54      	ldr	r3, [pc, #336]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0ee      	beq.n	8005cda <HAL_RCC_OscConfig+0x37e>
 8005cfc:	e014      	b.n	8005d28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfe:	f7fd f857 	bl	8002db0 <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d04:	e00a      	b.n	8005d1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d06:	f7fd f853 	bl	8002db0 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e12d      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d1c:	4b49      	ldr	r3, [pc, #292]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1ee      	bne.n	8005d06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d105      	bne.n	8005d3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d2e:	4b45      	ldr	r3, [pc, #276]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	4a44      	ldr	r2, [pc, #272]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d38:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 808c 	beq.w	8005e5c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005d44:	4b3f      	ldr	r3, [pc, #252]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d50:	d10e      	bne.n	8005d70 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005d52:	4b3c      	ldr	r3, [pc, #240]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d108      	bne.n	8005d70 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8005d5e:	4b39      	ldr	r3, [pc, #228]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6a:	d101      	bne.n	8005d70 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e103      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d14e      	bne.n	8005e16 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005d78:	4b32      	ldr	r3, [pc, #200]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d009      	beq.n	8005d98 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005d84:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d001      	beq.n	8005d98 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0ef      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005d98:	4b2c      	ldr	r3, [pc, #176]	; (8005e4c <HAL_RCC_OscConfig+0x4f0>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9e:	f7fd f807 	bl	8002db0 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005da6:	f7fd f803 	bl	8002db0 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b64      	cmp	r3, #100	; 0x64
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e0df      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005db8:	4b22      	ldr	r3, [pc, #136]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1f0      	bne.n	8005da6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005dc4:	4b1f      	ldr	r3, [pc, #124]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	491c      	ldr	r1, [pc, #112]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8005dd6:	4b1b      	ldr	r3, [pc, #108]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	4918      	ldr	r1, [pc, #96]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005de8:	4b18      	ldr	r3, [pc, #96]	; (8005e4c <HAL_RCC_OscConfig+0x4f0>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dee:	f7fc ffdf 	bl	8002db0 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005df6:	f7fc ffdb 	bl	8002db0 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b64      	cmp	r3, #100	; 0x64
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e0b7      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005e08:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0f0      	beq.n	8005df6 <HAL_RCC_OscConfig+0x49a>
 8005e14:	e022      	b.n	8005e5c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8005e16:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <HAL_RCC_OscConfig+0x4e8>)
 8005e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005e22:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <HAL_RCC_OscConfig+0x4f0>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e28:	f7fc ffc2 	bl	8002db0 <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005e2e:	e00f      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e30:	f7fc ffbe 	bl	8002db0 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b64      	cmp	r3, #100	; 0x64
 8005e3c:	d908      	bls.n	8005e50 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e09a      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
 8005e42:	bf00      	nop
 8005e44:	40021000 	.word	0x40021000
 8005e48:	40007000 	.word	0x40007000
 8005e4c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005e50:	4b4b      	ldr	r3, [pc, #300]	; (8005f80 <HAL_RCC_OscConfig+0x624>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e9      	bne.n	8005e30 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8088 	beq.w	8005f76 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e66:	4b46      	ldr	r3, [pc, #280]	; (8005f80 <HAL_RCC_OscConfig+0x624>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	2b08      	cmp	r3, #8
 8005e70:	d068      	beq.n	8005f44 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d14d      	bne.n	8005f16 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e7a:	4b42      	ldr	r3, [pc, #264]	; (8005f84 <HAL_RCC_OscConfig+0x628>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e80:	f7fc ff96 	bl	8002db0 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e88:	f7fc ff92 	bl	8002db0 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e06e      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e9a:	4b39      	ldr	r3, [pc, #228]	; (8005f80 <HAL_RCC_OscConfig+0x624>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eae:	d10f      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8005eb0:	4b33      	ldr	r3, [pc, #204]	; (8005f80 <HAL_RCC_OscConfig+0x624>)
 8005eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	4931      	ldr	r1, [pc, #196]	; (8005f80 <HAL_RCC_OscConfig+0x624>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ebe:	4b30      	ldr	r3, [pc, #192]	; (8005f80 <HAL_RCC_OscConfig+0x624>)
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	f023 020f 	bic.w	r2, r3, #15
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	492d      	ldr	r1, [pc, #180]	; (8005f80 <HAL_RCC_OscConfig+0x624>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ed0:	4b2b      	ldr	r3, [pc, #172]	; (8005f80 <HAL_RCC_OscConfig+0x624>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	4927      	ldr	r1, [pc, #156]	; (8005f80 <HAL_RCC_OscConfig+0x624>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ee8:	4b26      	ldr	r3, [pc, #152]	; (8005f84 <HAL_RCC_OscConfig+0x628>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eee:	f7fc ff5f 	bl	8002db0 <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef6:	f7fc ff5b 	bl	8002db0 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e037      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f08:	4b1d      	ldr	r3, [pc, #116]	; (8005f80 <HAL_RCC_OscConfig+0x624>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0f0      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x59a>
 8005f14:	e02f      	b.n	8005f76 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f16:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <HAL_RCC_OscConfig+0x628>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1c:	f7fc ff48 	bl	8002db0 <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f24:	f7fc ff44 	bl	8002db0 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e020      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f36:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <HAL_RCC_OscConfig+0x624>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f0      	bne.n	8005f24 <HAL_RCC_OscConfig+0x5c8>
 8005f42:	e018      	b.n	8005f76 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e013      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <HAL_RCC_OscConfig+0x624>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d106      	bne.n	8005f72 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d001      	beq.n	8005f76 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	40021000 	.word	0x40021000
 8005f84:	42420060 	.word	0x42420060

08005f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e0d0      	b.n	800613e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f9c:	4b6a      	ldr	r3, [pc, #424]	; (8006148 <HAL_RCC_ClockConfig+0x1c0>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d910      	bls.n	8005fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005faa:	4b67      	ldr	r3, [pc, #412]	; (8006148 <HAL_RCC_ClockConfig+0x1c0>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 0207 	bic.w	r2, r3, #7
 8005fb2:	4965      	ldr	r1, [pc, #404]	; (8006148 <HAL_RCC_ClockConfig+0x1c0>)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fba:	4b63      	ldr	r3, [pc, #396]	; (8006148 <HAL_RCC_ClockConfig+0x1c0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d001      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0b8      	b.n	800613e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d020      	beq.n	800601a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fe4:	4b59      	ldr	r3, [pc, #356]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	4a58      	ldr	r2, [pc, #352]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8005fea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0308 	and.w	r3, r3, #8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ffc:	4b53      	ldr	r3, [pc, #332]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	4a52      	ldr	r2, [pc, #328]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8006002:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006006:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006008:	4b50      	ldr	r3, [pc, #320]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	494d      	ldr	r1, [pc, #308]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8006016:	4313      	orrs	r3, r2
 8006018:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d040      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d107      	bne.n	800603e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602e:	4b47      	ldr	r3, [pc, #284]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d115      	bne.n	8006066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e07f      	b.n	800613e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d107      	bne.n	8006056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006046:	4b41      	ldr	r3, [pc, #260]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e073      	b.n	800613e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006056:	4b3d      	ldr	r3, [pc, #244]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e06b      	b.n	800613e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006066:	4b39      	ldr	r3, [pc, #228]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f023 0203 	bic.w	r2, r3, #3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	4936      	ldr	r1, [pc, #216]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8006074:	4313      	orrs	r3, r2
 8006076:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006078:	f7fc fe9a 	bl	8002db0 <HAL_GetTick>
 800607c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800607e:	e00a      	b.n	8006096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006080:	f7fc fe96 	bl	8002db0 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	f241 3288 	movw	r2, #5000	; 0x1388
 800608e:	4293      	cmp	r3, r2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e053      	b.n	800613e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006096:	4b2d      	ldr	r3, [pc, #180]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f003 020c 	and.w	r2, r3, #12
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d1eb      	bne.n	8006080 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060a8:	4b27      	ldr	r3, [pc, #156]	; (8006148 <HAL_RCC_ClockConfig+0x1c0>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d210      	bcs.n	80060d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060b6:	4b24      	ldr	r3, [pc, #144]	; (8006148 <HAL_RCC_ClockConfig+0x1c0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f023 0207 	bic.w	r2, r3, #7
 80060be:	4922      	ldr	r1, [pc, #136]	; (8006148 <HAL_RCC_ClockConfig+0x1c0>)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060c6:	4b20      	ldr	r3, [pc, #128]	; (8006148 <HAL_RCC_ClockConfig+0x1c0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d001      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e032      	b.n	800613e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060e4:	4b19      	ldr	r3, [pc, #100]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4916      	ldr	r1, [pc, #88]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006102:	4b12      	ldr	r3, [pc, #72]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	490e      	ldr	r1, [pc, #56]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8006112:	4313      	orrs	r3, r2
 8006114:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006116:	f000 f821 	bl	800615c <HAL_RCC_GetSysClockFreq>
 800611a:	4602      	mov	r2, r0
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	091b      	lsrs	r3, r3, #4
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	490a      	ldr	r1, [pc, #40]	; (8006150 <HAL_RCC_ClockConfig+0x1c8>)
 8006128:	5ccb      	ldrb	r3, [r1, r3]
 800612a:	fa22 f303 	lsr.w	r3, r2, r3
 800612e:	4a09      	ldr	r2, [pc, #36]	; (8006154 <HAL_RCC_ClockConfig+0x1cc>)
 8006130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006132:	4b09      	ldr	r3, [pc, #36]	; (8006158 <HAL_RCC_ClockConfig+0x1d0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f7fc fc74 	bl	8002a24 <HAL_InitTick>

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40022000 	.word	0x40022000
 800614c:	40021000 	.word	0x40021000
 8006150:	0800e384 	.word	0x0800e384
 8006154:	20000004 	.word	0x20000004
 8006158:	20000008 	.word	0x20000008

0800615c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800615c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006160:	b091      	sub	sp, #68	; 0x44
 8006162:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8006164:	4b6a      	ldr	r3, [pc, #424]	; (8006310 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8006166:	f107 0414 	add.w	r4, r7, #20
 800616a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800616c:	c407      	stmia	r4!, {r0, r1, r2}
 800616e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8006170:	4b68      	ldr	r3, [pc, #416]	; (8006314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006172:	1d3c      	adds	r4, r7, #4
 8006174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	637b      	str	r3, [r7, #52]	; 0x34
 800617e:	2300      	movs	r3, #0
 8006180:	633b      	str	r3, [r7, #48]	; 0x30
 8006182:	2300      	movs	r3, #0
 8006184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006186:	2300      	movs	r3, #0
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	62bb      	str	r3, [r7, #40]	; 0x28
 8006192:	2300      	movs	r3, #0
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006196:	4b60      	ldr	r3, [pc, #384]	; (8006318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800619c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619e:	f003 030c 	and.w	r3, r3, #12
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d002      	beq.n	80061ac <HAL_RCC_GetSysClockFreq+0x50>
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d003      	beq.n	80061b2 <HAL_RCC_GetSysClockFreq+0x56>
 80061aa:	e0a8      	b.n	80062fe <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80061ac:	4b5b      	ldr	r3, [pc, #364]	; (800631c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80061ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061b0:	e0a8      	b.n	8006304 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b4:	0c9b      	lsrs	r3, r3, #18
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80061be:	4413      	add	r3, r2
 80061c0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 808e 	beq.w	80062ee <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80061d2:	4b51      	ldr	r3, [pc, #324]	; (8006318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80061de:	4413      	add	r3, r2
 80061e0:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80061e4:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80061e6:	4b4c      	ldr	r3, [pc, #304]	; (8006318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d06b      	beq.n	80062ca <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80061f2:	4b49      	ldr	r3, [pc, #292]	; (8006318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	091b      	lsrs	r3, r3, #4
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	3301      	adds	r3, #1
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8006200:	4b45      	ldr	r3, [pc, #276]	; (8006318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006204:	0a1b      	lsrs	r3, r3, #8
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	3302      	adds	r3, #2
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	4618      	mov	r0, r3
 8006212:	f04f 0100 	mov.w	r1, #0
 8006216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006218:	461a      	mov	r2, r3
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	fb02 f501 	mul.w	r5, r2, r1
 8006222:	fb00 f403 	mul.w	r4, r0, r3
 8006226:	192e      	adds	r6, r5, r4
 8006228:	fba0 4502 	umull	r4, r5, r0, r2
 800622c:	1973      	adds	r3, r6, r5
 800622e:	461d      	mov	r5, r3
 8006230:	4620      	mov	r0, r4
 8006232:	4629      	mov	r1, r5
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	014b      	lsls	r3, r1, #5
 800623e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006242:	0142      	lsls	r2, r0, #5
 8006244:	4610      	mov	r0, r2
 8006246:	4619      	mov	r1, r3
 8006248:	1b00      	subs	r0, r0, r4
 800624a:	eb61 0105 	sbc.w	r1, r1, r5
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	018b      	lsls	r3, r1, #6
 8006258:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800625c:	0182      	lsls	r2, r0, #6
 800625e:	1a12      	subs	r2, r2, r0
 8006260:	eb63 0301 	sbc.w	r3, r3, r1
 8006264:	f04f 0000 	mov.w	r0, #0
 8006268:	f04f 0100 	mov.w	r1, #0
 800626c:	00d9      	lsls	r1, r3, #3
 800626e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006272:	00d0      	lsls	r0, r2, #3
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	1912      	adds	r2, r2, r4
 800627a:	eb45 0303 	adc.w	r3, r5, r3
 800627e:	f04f 0000 	mov.w	r0, #0
 8006282:	f04f 0100 	mov.w	r1, #0
 8006286:	0259      	lsls	r1, r3, #9
 8006288:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800628c:	0250      	lsls	r0, r2, #9
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4690      	mov	r8, r2
 8006294:	4699      	mov	r9, r3
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	4618      	mov	r0, r3
 800629a:	f04f 0100 	mov.w	r1, #0
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	461a      	mov	r2, r3
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	fb02 f501 	mul.w	r5, r2, r1
 80062aa:	fb00 f403 	mul.w	r4, r0, r3
 80062ae:	442c      	add	r4, r5
 80062b0:	fba0 2302 	umull	r2, r3, r0, r2
 80062b4:	18e1      	adds	r1, r4, r3
 80062b6:	460b      	mov	r3, r1
 80062b8:	4640      	mov	r0, r8
 80062ba:	4649      	mov	r1, r9
 80062bc:	f7fa ff02 	bl	80010c4 <__aeabi_uldivmod>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4613      	mov	r3, r2
 80062c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062c8:	e007      	b.n	80062da <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80062ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062cc:	4a13      	ldr	r2, [pc, #76]	; (800631c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80062ce:	fb02 f203 	mul.w	r2, r2, r3
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80062da:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80062de:	461a      	mov	r2, r3
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d108      	bne.n	80062f8 <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 80062e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e8:	085b      	lsrs	r3, r3, #1
 80062ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ec:	e004      	b.n	80062f8 <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	4a0b      	ldr	r2, [pc, #44]	; (8006320 <HAL_RCC_GetSysClockFreq+0x1c4>)
 80062f2:	fb02 f303 	mul.w	r3, r2, r3
 80062f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80062f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062fc:	e002      	b.n	8006304 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80062fe:	4b07      	ldr	r3, [pc, #28]	; (800631c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006300:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006302:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006306:	4618      	mov	r0, r3
 8006308:	3744      	adds	r7, #68	; 0x44
 800630a:	46bd      	mov	sp, r7
 800630c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006310:	0800e328 	.word	0x0800e328
 8006314:	0800e338 	.word	0x0800e338
 8006318:	40021000 	.word	0x40021000
 800631c:	007a1200 	.word	0x007a1200
 8006320:	003d0900 	.word	0x003d0900

08006324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006328:	4b02      	ldr	r3, [pc, #8]	; (8006334 <HAL_RCC_GetHCLKFreq+0x10>)
 800632a:	681b      	ldr	r3, [r3, #0]
}
 800632c:	4618      	mov	r0, r3
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr
 8006334:	20000004 	.word	0x20000004

08006338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800633c:	f7ff fff2 	bl	8006324 <HAL_RCC_GetHCLKFreq>
 8006340:	4602      	mov	r2, r0
 8006342:	4b05      	ldr	r3, [pc, #20]	; (8006358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	0a1b      	lsrs	r3, r3, #8
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	4903      	ldr	r1, [pc, #12]	; (800635c <HAL_RCC_GetPCLK1Freq+0x24>)
 800634e:	5ccb      	ldrb	r3, [r1, r3]
 8006350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006354:	4618      	mov	r0, r3
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40021000 	.word	0x40021000
 800635c:	0800e394 	.word	0x0800e394

08006360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006364:	f7ff ffde 	bl	8006324 <HAL_RCC_GetHCLKFreq>
 8006368:	4602      	mov	r2, r0
 800636a:	4b05      	ldr	r3, [pc, #20]	; (8006380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	0adb      	lsrs	r3, r3, #11
 8006370:	f003 0307 	and.w	r3, r3, #7
 8006374:	4903      	ldr	r1, [pc, #12]	; (8006384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006376:	5ccb      	ldrb	r3, [r1, r3]
 8006378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800637c:	4618      	mov	r0, r3
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40021000 	.word	0x40021000
 8006384:	0800e394 	.word	0x0800e394

08006388 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	220f      	movs	r2, #15
 8006396:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006398:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <HAL_RCC_GetClockConfig+0x58>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f003 0203 	and.w	r2, r3, #3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80063a4:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <HAL_RCC_GetClockConfig+0x58>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <HAL_RCC_GetClockConfig+0x58>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80063bc:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <HAL_RCC_GetClockConfig+0x58>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	08db      	lsrs	r3, r3, #3
 80063c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_RCC_GetClockConfig+0x5c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0207 	and.w	r2, r3, #7
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	bc80      	pop	{r7}
 80063de:	4770      	bx	lr
 80063e0:	40021000 	.word	0x40021000
 80063e4:	40022000 	.word	0x40022000

080063e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80063f0:	4b0a      	ldr	r3, [pc, #40]	; (800641c <RCC_Delay+0x34>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a0a      	ldr	r2, [pc, #40]	; (8006420 <RCC_Delay+0x38>)
 80063f6:	fba2 2303 	umull	r2, r3, r2, r3
 80063fa:	0a5b      	lsrs	r3, r3, #9
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
 8006402:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006404:	bf00      	nop
  }
  while (Delay --);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1e5a      	subs	r2, r3, #1
 800640a:	60fa      	str	r2, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1f9      	bne.n	8006404 <RCC_Delay+0x1c>
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr
 800641c:	20000004 	.word	0x20000004
 8006420:	10624dd3 	.word	0x10624dd3

08006424 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	2300      	movs	r3, #0
 8006432:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d07d      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8006444:	2300      	movs	r3, #0
 8006446:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006448:	4b8b      	ldr	r3, [pc, #556]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10d      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006454:	4b88      	ldr	r3, [pc, #544]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	4a87      	ldr	r2, [pc, #540]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800645a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800645e:	61d3      	str	r3, [r2, #28]
 8006460:	4b85      	ldr	r3, [pc, #532]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800646c:	2301      	movs	r3, #1
 800646e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006470:	4b82      	ldr	r3, [pc, #520]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006478:	2b00      	cmp	r3, #0
 800647a:	d118      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800647c:	4b7f      	ldr	r3, [pc, #508]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a7e      	ldr	r2, [pc, #504]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006486:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006488:	f7fc fc92 	bl	8002db0 <HAL_GetTick>
 800648c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648e:	e008      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006490:	f7fc fc8e 	bl	8002db0 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b64      	cmp	r3, #100	; 0x64
 800649c:	d901      	bls.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e0e5      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a2:	4b76      	ldr	r3, [pc, #472]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0f0      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064ae:	4b72      	ldr	r3, [pc, #456]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b6:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d02e      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d027      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064cc:	4b6a      	ldr	r3, [pc, #424]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064d6:	4b6a      	ldr	r3, [pc, #424]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80064d8:	2201      	movs	r2, #1
 80064da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064dc:	4b68      	ldr	r3, [pc, #416]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80064e2:	4a65      	ldr	r2, [pc, #404]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d014      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f2:	f7fc fc5d 	bl	8002db0 <HAL_GetTick>
 80064f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f8:	e00a      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064fa:	f7fc fc59 	bl	8002db0 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	f241 3288 	movw	r2, #5000	; 0x1388
 8006508:	4293      	cmp	r3, r2
 800650a:	d901      	bls.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e0ae      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006510:	4b59      	ldr	r3, [pc, #356]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0ee      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800651c:	4b56      	ldr	r3, [pc, #344]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	4953      	ldr	r1, [pc, #332]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800652a:	4313      	orrs	r3, r2
 800652c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800652e:	7efb      	ldrb	r3, [r7, #27]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d105      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006534:	4b50      	ldr	r3, [pc, #320]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	4a4f      	ldr	r2, [pc, #316]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800653a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800653e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800654c:	4b4a      	ldr	r3, [pc, #296]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4947      	ldr	r1, [pc, #284]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800655a:	4313      	orrs	r3, r2
 800655c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d008      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800656a:	4b43      	ldr	r3, [pc, #268]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	4940      	ldr	r1, [pc, #256]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006578:	4313      	orrs	r3, r2
 800657a:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8006588:	4b3b      	ldr	r3, [pc, #236]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	4938      	ldr	r1, [pc, #224]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006596:	4313      	orrs	r3, r2
 8006598:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800659a:	4b37      	ldr	r3, [pc, #220]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d105      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80065a6:	4b34      	ldr	r3, [pc, #208]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80065b2:	2301      	movs	r3, #1
 80065b4:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d148      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80065bc:	4b2e      	ldr	r3, [pc, #184]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d138      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80065c8:	4b2b      	ldr	r3, [pc, #172]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d009      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80065d4:	4b28      	ldr	r3, [pc, #160]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d001      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e042      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80065e8:	4b23      	ldr	r3, [pc, #140]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	4920      	ldr	r1, [pc, #128]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80065fa:	4b1f      	ldr	r3, [pc, #124]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	491c      	ldr	r1, [pc, #112]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006608:	4313      	orrs	r3, r2
 800660a:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 800660c:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800660e:	2201      	movs	r2, #1
 8006610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006612:	f7fc fbcd 	bl	8002db0 <HAL_GetTick>
 8006616:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006618:	e008      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800661a:	f7fc fbc9 	bl	8002db0 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b64      	cmp	r3, #100	; 0x64
 8006626:	d901      	bls.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e020      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800662c:	4b12      	ldr	r3, [pc, #72]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0f0      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006638:	e009      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800663a:	4b0f      	ldr	r3, [pc, #60]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	429a      	cmp	r2, r3
 8006648:	d001      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e00f      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b00      	cmp	r3, #0
 8006658:	d008      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800665a:	4b07      	ldr	r3, [pc, #28]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	4904      	ldr	r1, [pc, #16]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006668:	4313      	orrs	r3, r2
 800666a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3720      	adds	r7, #32
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	40021000 	.word	0x40021000
 800667c:	40007000 	.word	0x40007000
 8006680:	42420440 	.word	0x42420440
 8006684:	42420070 	.word	0x42420070

08006688 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b093      	sub	sp, #76	; 0x4c
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8006690:	4ba9      	ldr	r3, [pc, #676]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8006692:	f107 0418 	add.w	r4, r7, #24
 8006696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006698:	c407      	stmia	r4!, {r0, r1, r2}
 800669a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800669c:	4ba7      	ldr	r3, [pc, #668]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800669e:	f107 0408 	add.w	r4, r7, #8
 80066a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ac:	2300      	movs	r3, #0
 80066ae:	647b      	str	r3, [r7, #68]	; 0x44
 80066b0:	2300      	movs	r3, #0
 80066b2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
 80066b8:	2300      	movs	r3, #0
 80066ba:	633b      	str	r3, [r7, #48]	; 0x30
 80066bc:	2300      	movs	r3, #0
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c4:	2300      	movs	r3, #0
 80066c6:	643b      	str	r3, [r7, #64]	; 0x40
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	2b0f      	cmp	r3, #15
 80066ce:	f200 8124 	bhi.w	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	08006899 	.word	0x08006899
 80066dc:	080068ff 	.word	0x080068ff
 80066e0:	0800691b 	.word	0x0800691b
 80066e4:	080067f7 	.word	0x080067f7
 80066e8:	0800691b 	.word	0x0800691b
 80066ec:	0800691b 	.word	0x0800691b
 80066f0:	0800691b 	.word	0x0800691b
 80066f4:	08006849 	.word	0x08006849
 80066f8:	0800691b 	.word	0x0800691b
 80066fc:	0800691b 	.word	0x0800691b
 8006700:	0800691b 	.word	0x0800691b
 8006704:	0800691b 	.word	0x0800691b
 8006708:	0800691b 	.word	0x0800691b
 800670c:	0800691b 	.word	0x0800691b
 8006710:	0800691b 	.word	0x0800691b
 8006714:	08006719 	.word	0x08006719
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006718:	4b89      	ldr	r3, [pc, #548]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800671e:	4b88      	ldr	r3, [pc, #544]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 80f9 	beq.w	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	0c9b      	lsrs	r3, r3, #18
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006738:	4413      	add	r3, r2
 800673a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800673e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d03e      	beq.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800674a:	4b7d      	ldr	r3, [pc, #500]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006756:	4413      	add	r3, r2
 8006758:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800675c:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800675e:	4b78      	ldr	r3, [pc, #480]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d01c      	beq.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800676a:	4b75      	ldr	r3, [pc, #468]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	091b      	lsrs	r3, r3, #4
 8006770:	f003 030f 	and.w	r3, r3, #15
 8006774:	3301      	adds	r3, #1
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8006778:	4b71      	ldr	r3, [pc, #452]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	0a1b      	lsrs	r3, r3, #8
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	3302      	adds	r3, #2
 8006784:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8006786:	4a6f      	ldr	r2, [pc, #444]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	fbb2 f3f3 	udiv	r3, r2, r3
 800678e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006790:	fb02 f203 	mul.w	r2, r2, r3
 8006794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006796:	fbb2 f2f3 	udiv	r2, r2, r3
 800679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679c:	fb02 f303 	mul.w	r3, r2, r3
 80067a0:	647b      	str	r3, [r7, #68]	; 0x44
 80067a2:	e007      	b.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80067a4:	4a67      	ldr	r2, [pc, #412]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80067a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	fb02 f303 	mul.w	r3, r2, r3
 80067b2:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80067b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80067b8:	461a      	mov	r2, r3
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	4293      	cmp	r3, r2
 80067be:	d108      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 80067c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c2:	085b      	lsrs	r3, r3, #1
 80067c4:	647b      	str	r3, [r7, #68]	; 0x44
 80067c6:	e004      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	4a5f      	ldr	r2, [pc, #380]	; (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80067cc:	fb02 f303 	mul.w	r3, r2, r3
 80067d0:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 80067d2:	4b5b      	ldr	r3, [pc, #364]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067de:	d102      	bne.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 80067e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e2:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80067e4:	e09b      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 80067e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	4a58      	ldr	r2, [pc, #352]	; (800694c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80067ec:	fba2 2303 	umull	r2, r3, r2, r3
 80067f0:	085b      	lsrs	r3, r3, #1
 80067f2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80067f4:	e093      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 80067f6:	4b52      	ldr	r3, [pc, #328]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d103      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8006802:	f7ff fcab 	bl	800615c <HAL_RCC_GetSysClockFreq>
 8006806:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006808:	e08b      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 800680a:	4b4d      	ldr	r3, [pc, #308]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 8085 	beq.w	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8006818:	4b49      	ldr	r3, [pc, #292]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	091b      	lsrs	r3, r3, #4
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	3301      	adds	r3, #1
 8006824:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8006826:	4b46      	ldr	r3, [pc, #280]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	0b1b      	lsrs	r3, r3, #12
 800682c:	f003 030f 	and.w	r3, r3, #15
 8006830:	3302      	adds	r3, #2
 8006832:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8006834:	4a43      	ldr	r2, [pc, #268]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	fbb2 f3f3 	udiv	r3, r2, r3
 800683c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800683e:	fb02 f303 	mul.w	r3, r2, r3
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8006846:	e06c      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8006848:	4b3d      	ldr	r3, [pc, #244]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d103      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8006854:	f7ff fc82 	bl	800615c <HAL_RCC_GetSysClockFreq>
 8006858:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800685a:	e064      	b.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 800685c:	4b38      	ldr	r3, [pc, #224]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d05e      	beq.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8006868:	4b35      	ldr	r3, [pc, #212]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	3301      	adds	r3, #1
 8006874:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8006876:	4b32      	ldr	r3, [pc, #200]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	0b1b      	lsrs	r3, r3, #12
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	3302      	adds	r3, #2
 8006882:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8006884:	4a2f      	ldr	r2, [pc, #188]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	fbb2 f3f3 	udiv	r3, r2, r3
 800688c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8006896:	e046      	b.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006898:	4b29      	ldr	r3, [pc, #164]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a8:	d108      	bne.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 80068b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b8:	643b      	str	r3, [r7, #64]	; 0x40
 80068ba:	e01f      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c6:	d109      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80068c8:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 80068d4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80068d8:	643b      	str	r3, [r7, #64]	; 0x40
 80068da:	e00f      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068e6:	d120      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 80068e8:	4b15      	ldr	r3, [pc, #84]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01a      	beq.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 80068f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80068f8:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80068fa:	e016      	b.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 80068fc:	e015      	b.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80068fe:	f7ff fd2f 	bl	8006360 <HAL_RCC_GetPCLK2Freq>
 8006902:	4602      	mov	r2, r0
 8006904:	4b0e      	ldr	r3, [pc, #56]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	0b9b      	lsrs	r3, r3, #14
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	3301      	adds	r3, #1
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	fbb2 f3f3 	udiv	r3, r2, r3
 8006916:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8006918:	e008      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 800691a:	bf00      	nop
 800691c:	e006      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 800691e:	bf00      	nop
 8006920:	e004      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8006922:	bf00      	nop
 8006924:	e002      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8006926:	bf00      	nop
 8006928:	e000      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 800692a:	bf00      	nop
    }
  }
  return (frequency);
 800692c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800692e:	4618      	mov	r0, r3
 8006930:	374c      	adds	r7, #76	; 0x4c
 8006932:	46bd      	mov	sp, r7
 8006934:	bd90      	pop	{r4, r7, pc}
 8006936:	bf00      	nop
 8006938:	0800e348 	.word	0x0800e348
 800693c:	0800e358 	.word	0x0800e358
 8006940:	40021000 	.word	0x40021000
 8006944:	007a1200 	.word	0x007a1200
 8006948:	003d0900 	.word	0x003d0900
 800694c:	aaaaaaab 	.word	0xaaaaaaab

08006950 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e084      	b.n	8006a70 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	7c5b      	ldrb	r3, [r3, #17]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d105      	bne.n	800697c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fb ff2e 	bl	80027d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f9c8 	bl	8006d18 <HAL_RTC_WaitForSynchro>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d004      	beq.n	8006998 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2204      	movs	r2, #4
 8006992:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e06b      	b.n	8006a70 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fa81 	bl	8006ea0 <RTC_EnterInitMode>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2204      	movs	r2, #4
 80069a8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e060      	b.n	8006a70 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0207 	bic.w	r2, r2, #7
 80069bc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80069c6:	4b2c      	ldr	r3, [pc, #176]	; (8006a78 <HAL_RTC_Init+0x128>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	4a2b      	ldr	r2, [pc, #172]	; (8006a78 <HAL_RTC_Init+0x128>)
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80069d2:	4b29      	ldr	r3, [pc, #164]	; (8006a78 <HAL_RTC_Init+0x128>)
 80069d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	4926      	ldr	r1, [pc, #152]	; (8006a78 <HAL_RTC_Init+0x128>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d003      	beq.n	80069f6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	e00e      	b.n	8006a14 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80069f6:	2001      	movs	r0, #1
 80069f8:	f7ff fe46 	bl	8006688 <HAL_RCCEx_GetPeriphCLKFreq>
 80069fc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2204      	movs	r2, #4
 8006a08:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e030      	b.n	8006a70 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f023 010f 	bic.w	r1, r3, #15
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	0c1a      	lsrs	r2, r3, #16
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	0c1b      	lsrs	r3, r3, #16
 8006a32:	041b      	lsls	r3, r3, #16
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	b291      	uxth	r1, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6812      	ldr	r2, [r2, #0]
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fa55 	bl	8006ef0 <RTC_ExitInitMode>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d004      	beq.n	8006a56 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2204      	movs	r2, #4
 8006a50:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e00c      	b.n	8006a70 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
  }
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	40006c00 	.word	0x40006c00

08006a7c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a7c:	b590      	push	{r4, r7, lr}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <HAL_RTC_SetTime+0x20>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e080      	b.n	8006ba2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	7c1b      	ldrb	r3, [r3, #16]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_RTC_SetTime+0x30>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e07a      	b.n	8006ba2 <HAL_RTC_SetTime+0x126>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d113      	bne.n	8006ae6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006ac8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	011b      	lsls	r3, r3, #4
 8006ad6:	1a5b      	subs	r3, r3, r1
 8006ad8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006ada:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006ae0:	4413      	add	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	e01e      	b.n	8006b24 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fa28 	bl	8006f40 <RTC_Bcd2ToByte>
 8006af0:	4603      	mov	r3, r0
 8006af2:	461a      	mov	r2, r3
 8006af4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006af8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fa1d 	bl	8006f40 <RTC_Bcd2ToByte>
 8006b06:	4603      	mov	r3, r0
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006b12:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	789b      	ldrb	r3, [r3, #2]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fa11 	bl	8006f40 <RTC_Bcd2ToByte>
 8006b1e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006b20:	4423      	add	r3, r4
 8006b22:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006b24:	6979      	ldr	r1, [r7, #20]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 f953 	bl	8006dd2 <RTC_WriteTimeCounter>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2204      	movs	r2, #4
 8006b36:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e02f      	b.n	8006ba2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0205 	bic.w	r2, r2, #5
 8006b50:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 f964 	bl	8006e20 <RTC_ReadAlarmCounter>
 8006b58:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b60:	d018      	beq.n	8006b94 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d214      	bcs.n	8006b94 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006b70:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006b74:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006b76:	6939      	ldr	r1, [r7, #16]
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f96a 	bl	8006e52 <RTC_WriteAlarmCounter>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d007      	beq.n	8006b94 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2204      	movs	r2, #4
 8006b88:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e006      	b.n	8006ba2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2201      	movs	r2, #1
 8006b98:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
  }
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd90      	pop	{r4, r7, pc}
	...

08006bac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <HAL_RTC_SetDate+0x24>
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e097      	b.n	8006d04 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	7c1b      	ldrb	r3, [r3, #16]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_RTC_SetDate+0x34>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e091      	b.n	8006d04 <HAL_RTC_SetDate+0x158>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2201      	movs	r2, #1
 8006be4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2202      	movs	r2, #2
 8006bea:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10c      	bne.n	8006c0c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	78da      	ldrb	r2, [r3, #3]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	785a      	ldrb	r2, [r3, #1]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	789a      	ldrb	r2, [r3, #2]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	739a      	strb	r2, [r3, #14]
 8006c0a:	e01a      	b.n	8006c42 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	78db      	ldrb	r3, [r3, #3]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 f995 	bl	8006f40 <RTC_Bcd2ToByte>
 8006c16:	4603      	mov	r3, r0
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	785b      	ldrb	r3, [r3, #1]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 f98c 	bl	8006f40 <RTC_Bcd2ToByte>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	789b      	ldrb	r3, [r3, #2]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 f983 	bl	8006f40 <RTC_Bcd2ToByte>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	7bdb      	ldrb	r3, [r3, #15]
 8006c46:	4618      	mov	r0, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	7b59      	ldrb	r1, [r3, #13]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	7b9b      	ldrb	r3, [r3, #14]
 8006c50:	461a      	mov	r2, r3
 8006c52:	f000 f993 	bl	8006f7c <RTC_WeekDayNum>
 8006c56:	4603      	mov	r3, r0
 8006c58:	461a      	mov	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	7b1a      	ldrb	r2, [r3, #12]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f883 	bl	8006d72 <RTC_ReadTimeCounter>
 8006c6c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4a26      	ldr	r2, [pc, #152]	; (8006d0c <HAL_RTC_SetDate+0x160>)
 8006c72:	fba2 2303 	umull	r2, r3, r2, r3
 8006c76:	0adb      	lsrs	r3, r3, #11
 8006c78:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b18      	cmp	r3, #24
 8006c7e:	d93a      	bls.n	8006cf6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	4a23      	ldr	r2, [pc, #140]	; (8006d10 <HAL_RTC_SetDate+0x164>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	091b      	lsrs	r3, r3, #4
 8006c8a:	4a22      	ldr	r2, [pc, #136]	; (8006d14 <HAL_RTC_SetDate+0x168>)
 8006c8c:	fb02 f303 	mul.w	r3, r2, r3
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006c96:	69f9      	ldr	r1, [r7, #28]
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 f89a 	bl	8006dd2 <RTC_WriteTimeCounter>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d007      	beq.n	8006cb4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2204      	movs	r2, #4
 8006ca8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e027      	b.n	8006d04 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f8b3 	bl	8006e20 <RTC_ReadAlarmCounter>
 8006cba:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc2:	d018      	beq.n	8006cf6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d214      	bcs.n	8006cf6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006cd2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006cd6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006cd8:	69b9      	ldr	r1, [r7, #24]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 f8b9 	bl	8006e52 <RTC_WriteAlarmCounter>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2204      	movs	r2, #4
 8006cea:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e006      	b.n	8006d04 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3720      	adds	r7, #32
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	91a2b3c5 	.word	0x91a2b3c5
 8006d10:	aaaaaaab 	.word	0xaaaaaaab
 8006d14:	00015180 	.word	0x00015180

08006d18 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e01d      	b.n	8006d6a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0208 	bic.w	r2, r2, #8
 8006d3c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006d3e:	f7fc f837 	bl	8002db0 <HAL_GetTick>
 8006d42:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006d44:	e009      	b.n	8006d5a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006d46:	f7fc f833 	bl	8002db0 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d54:	d901      	bls.n	8006d5a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e007      	b.n	8006d6a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0ee      	beq.n	8006d46 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b087      	sub	sp, #28
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	827b      	strh	r3, [r7, #18]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	823b      	strh	r3, [r7, #16]
 8006d82:	2300      	movs	r3, #0
 8006d84:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006da2:	8a7a      	ldrh	r2, [r7, #18]
 8006da4:	8a3b      	ldrh	r3, [r7, #16]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d008      	beq.n	8006dbc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006daa:	8a3b      	ldrh	r3, [r7, #16]
 8006dac:	041a      	lsls	r2, r3, #16
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	e004      	b.n	8006dc6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006dbc:	8a7b      	ldrh	r3, [r7, #18]
 8006dbe:	041a      	lsls	r2, r3, #16
 8006dc0:	89fb      	ldrh	r3, [r7, #14]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8006dc6:	697b      	ldr	r3, [r7, #20]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bc80      	pop	{r7}
 8006dd0:	4770      	bx	lr

08006dd2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f85d 	bl	8006ea0 <RTC_EnterInitMode>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	73fb      	strb	r3, [r7, #15]
 8006df0:	e011      	b.n	8006e16 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	0c12      	lsrs	r2, r2, #16
 8006dfa:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	b292      	uxth	r2, r2
 8006e04:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f872 	bl	8006ef0 <RTC_ExitInitMode>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	81fb      	strh	r3, [r7, #14]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006e40:	89fb      	ldrh	r3, [r7, #14]
 8006e42:	041a      	lsls	r2, r3, #16
 8006e44:	89bb      	ldrh	r3, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr

08006e52 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f81d 	bl	8006ea0 <RTC_EnterInitMode>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
 8006e70:	e011      	b.n	8006e96 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	0c12      	lsrs	r2, r2, #16
 8006e7a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	b292      	uxth	r2, r2
 8006e84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f832 	bl	8006ef0 <RTC_ExitInitMode>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006eac:	f7fb ff80 	bl	8002db0 <HAL_GetTick>
 8006eb0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006eb2:	e009      	b.n	8006ec8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006eb4:	f7fb ff7c 	bl	8002db0 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ec2:	d901      	bls.n	8006ec8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e00f      	b.n	8006ee8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0ee      	beq.n	8006eb4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f042 0210 	orr.w	r2, r2, #16
 8006ee4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0210 	bic.w	r2, r2, #16
 8006f0a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006f0c:	f7fb ff50 	bl	8002db0 <HAL_GetTick>
 8006f10:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006f12:	e009      	b.n	8006f28 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006f14:	f7fb ff4c 	bl	8002db0 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f22:	d901      	bls.n	8006f28 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e007      	b.n	8006f38 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0ee      	beq.n	8006f14 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006f4e:	79fb      	ldrb	r3, [r7, #7]
 8006f50:	091b      	lsrs	r3, r3, #4
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	b2db      	uxtb	r3, r3
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc80      	pop	{r7}
 8006f78:	4770      	bx	lr
	...

08006f7c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	70fb      	strb	r3, [r7, #3]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60bb      	str	r3, [r7, #8]
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006f9a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d82d      	bhi.n	8006ffe <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006fa2:	78fa      	ldrb	r2, [r7, #3]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	4413      	add	r3, r2
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	4a2c      	ldr	r2, [pc, #176]	; (8007060 <RTC_WeekDayNum+0xe4>)
 8006fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb4:	085a      	lsrs	r2, r3, #1
 8006fb6:	78bb      	ldrb	r3, [r7, #2]
 8006fb8:	441a      	add	r2, r3
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	441a      	add	r2, r3
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	089b      	lsrs	r3, r3, #2
 8006fc4:	441a      	add	r2, r3
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	4926      	ldr	r1, [pc, #152]	; (8007064 <RTC_WeekDayNum+0xe8>)
 8006fcc:	fba1 1303 	umull	r1, r3, r1, r3
 8006fd0:	095b      	lsrs	r3, r3, #5
 8006fd2:	1ad2      	subs	r2, r2, r3
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	4922      	ldr	r1, [pc, #136]	; (8007064 <RTC_WeekDayNum+0xe8>)
 8006fda:	fba1 1303 	umull	r1, r3, r1, r3
 8006fde:	09db      	lsrs	r3, r3, #7
 8006fe0:	4413      	add	r3, r2
 8006fe2:	1d1a      	adds	r2, r3, #4
 8006fe4:	4b20      	ldr	r3, [pc, #128]	; (8007068 <RTC_WeekDayNum+0xec>)
 8006fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8006fea:	1ad1      	subs	r1, r2, r3
 8006fec:	0849      	lsrs	r1, r1, #1
 8006fee:	440b      	add	r3, r1
 8006ff0:	0899      	lsrs	r1, r3, #2
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	1a5b      	subs	r3, r3, r1
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	e029      	b.n	8007052 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006ffe:	78fa      	ldrb	r2, [r7, #3]
 8007000:	4613      	mov	r3, r2
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	4413      	add	r3, r2
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	4a15      	ldr	r2, [pc, #84]	; (8007060 <RTC_WeekDayNum+0xe4>)
 800700c:	fba2 2303 	umull	r2, r3, r2, r3
 8007010:	085a      	lsrs	r2, r3, #1
 8007012:	78bb      	ldrb	r3, [r7, #2]
 8007014:	441a      	add	r2, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	441a      	add	r2, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	089b      	lsrs	r3, r3, #2
 800701e:	441a      	add	r2, r3
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4910      	ldr	r1, [pc, #64]	; (8007064 <RTC_WeekDayNum+0xe8>)
 8007024:	fba1 1303 	umull	r1, r3, r1, r3
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	1ad2      	subs	r2, r2, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	490d      	ldr	r1, [pc, #52]	; (8007064 <RTC_WeekDayNum+0xe8>)
 8007030:	fba1 1303 	umull	r1, r3, r1, r3
 8007034:	09db      	lsrs	r3, r3, #7
 8007036:	4413      	add	r3, r2
 8007038:	1c9a      	adds	r2, r3, #2
 800703a:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <RTC_WeekDayNum+0xec>)
 800703c:	fba3 1302 	umull	r1, r3, r3, r2
 8007040:	1ad1      	subs	r1, r2, r3
 8007042:	0849      	lsrs	r1, r1, #1
 8007044:	440b      	add	r3, r1
 8007046:	0899      	lsrs	r1, r3, #2
 8007048:	460b      	mov	r3, r1
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	1a5b      	subs	r3, r3, r1
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	b2db      	uxtb	r3, r3
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr
 8007060:	38e38e39 	.word	0x38e38e39
 8007064:	51eb851f 	.word	0x51eb851f
 8007068:	24924925 	.word	0x24924925

0800706c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e041      	b.n	8007102 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f839 	bl	800710a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3304      	adds	r3, #4
 80070a8:	4619      	mov	r1, r3
 80070aa:	4610      	mov	r0, r2
 80070ac:	f000 f9bc 	bl	8007428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007112:	bf00      	nop
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	bc80      	pop	{r7}
 800711a:	4770      	bx	lr

0800711c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b01      	cmp	r3, #1
 800712e:	d001      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e03f      	b.n	80071b4 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0201 	orr.w	r2, r2, #1
 800714a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1b      	ldr	r2, [pc, #108]	; (80071c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d013      	beq.n	800717e <HAL_TIM_Base_Start_IT+0x62>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715e:	d00e      	beq.n	800717e <HAL_TIM_Base_Start_IT+0x62>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a17      	ldr	r2, [pc, #92]	; (80071c4 <HAL_TIM_Base_Start_IT+0xa8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d009      	beq.n	800717e <HAL_TIM_Base_Start_IT+0x62>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a16      	ldr	r2, [pc, #88]	; (80071c8 <HAL_TIM_Base_Start_IT+0xac>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d004      	beq.n	800717e <HAL_TIM_Base_Start_IT+0x62>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a14      	ldr	r2, [pc, #80]	; (80071cc <HAL_TIM_Base_Start_IT+0xb0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d111      	bne.n	80071a2 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b06      	cmp	r3, #6
 800718e:	d010      	beq.n	80071b2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0201 	orr.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a0:	e007      	b.n	80071b2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f042 0201 	orr.w	r2, r2, #1
 80071b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	40012c00 	.word	0x40012c00
 80071c4:	40000400 	.word	0x40000400
 80071c8:	40000800 	.word	0x40000800
 80071cc:	40000c00 	.word	0x40000c00

080071d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d122      	bne.n	800722c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d11b      	bne.n	800722c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f06f 0202 	mvn.w	r2, #2
 80071fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f8ed 	bl	80073f2 <HAL_TIM_IC_CaptureCallback>
 8007218:	e005      	b.n	8007226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f8e0 	bl	80073e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f8ef 	bl	8007404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f003 0304 	and.w	r3, r3, #4
 8007236:	2b04      	cmp	r3, #4
 8007238:	d122      	bne.n	8007280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b04      	cmp	r3, #4
 8007246:	d11b      	bne.n	8007280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f06f 0204 	mvn.w	r2, #4
 8007250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2202      	movs	r2, #2
 8007256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f8c3 	bl	80073f2 <HAL_TIM_IC_CaptureCallback>
 800726c:	e005      	b.n	800727a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f8b6 	bl	80073e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f8c5 	bl	8007404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b08      	cmp	r3, #8
 800728c:	d122      	bne.n	80072d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b08      	cmp	r3, #8
 800729a:	d11b      	bne.n	80072d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f06f 0208 	mvn.w	r2, #8
 80072a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2204      	movs	r2, #4
 80072aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f899 	bl	80073f2 <HAL_TIM_IC_CaptureCallback>
 80072c0:	e005      	b.n	80072ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f88c 	bl	80073e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f89b 	bl	8007404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f003 0310 	and.w	r3, r3, #16
 80072de:	2b10      	cmp	r3, #16
 80072e0:	d122      	bne.n	8007328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	2b10      	cmp	r3, #16
 80072ee:	d11b      	bne.n	8007328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f06f 0210 	mvn.w	r2, #16
 80072f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2208      	movs	r2, #8
 80072fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f86f 	bl	80073f2 <HAL_TIM_IC_CaptureCallback>
 8007314:	e005      	b.n	8007322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f862 	bl	80073e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f871 	bl	8007404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b01      	cmp	r3, #1
 8007334:	d10e      	bne.n	8007354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b01      	cmp	r3, #1
 8007342:	d107      	bne.n	8007354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0201 	mvn.w	r2, #1
 800734c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fb f9a4 	bl	800269c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d10e      	bne.n	8007380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736c:	2b80      	cmp	r3, #128	; 0x80
 800736e:	d107      	bne.n	8007380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f8c9 	bl	8007512 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738a:	2b40      	cmp	r3, #64	; 0x40
 800738c:	d10e      	bne.n	80073ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007398:	2b40      	cmp	r3, #64	; 0x40
 800739a:	d107      	bne.n	80073ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f835 	bl	8007416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	d10e      	bne.n	80073d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b20      	cmp	r3, #32
 80073c6:	d107      	bne.n	80073d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f06f 0220 	mvn.w	r2, #32
 80073d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f894 	bl	8007500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073d8:	bf00      	nop
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bc80      	pop	{r7}
 80073f0:	4770      	bx	lr

080073f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073fa:	bf00      	nop
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	bc80      	pop	{r7}
 8007402:	4770      	bx	lr

08007404 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	bc80      	pop	{r7}
 8007414:	4770      	bx	lr

08007416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr

08007428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a2d      	ldr	r2, [pc, #180]	; (80074f0 <TIM_Base_SetConfig+0xc8>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00f      	beq.n	8007460 <TIM_Base_SetConfig+0x38>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007446:	d00b      	beq.n	8007460 <TIM_Base_SetConfig+0x38>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a2a      	ldr	r2, [pc, #168]	; (80074f4 <TIM_Base_SetConfig+0xcc>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d007      	beq.n	8007460 <TIM_Base_SetConfig+0x38>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a29      	ldr	r2, [pc, #164]	; (80074f8 <TIM_Base_SetConfig+0xd0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d003      	beq.n	8007460 <TIM_Base_SetConfig+0x38>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a28      	ldr	r2, [pc, #160]	; (80074fc <TIM_Base_SetConfig+0xd4>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d108      	bne.n	8007472 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a1e      	ldr	r2, [pc, #120]	; (80074f0 <TIM_Base_SetConfig+0xc8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d00f      	beq.n	800749a <TIM_Base_SetConfig+0x72>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007480:	d00b      	beq.n	800749a <TIM_Base_SetConfig+0x72>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a1b      	ldr	r2, [pc, #108]	; (80074f4 <TIM_Base_SetConfig+0xcc>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d007      	beq.n	800749a <TIM_Base_SetConfig+0x72>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a1a      	ldr	r2, [pc, #104]	; (80074f8 <TIM_Base_SetConfig+0xd0>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d003      	beq.n	800749a <TIM_Base_SetConfig+0x72>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a19      	ldr	r2, [pc, #100]	; (80074fc <TIM_Base_SetConfig+0xd4>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d108      	bne.n	80074ac <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a07      	ldr	r2, [pc, #28]	; (80074f0 <TIM_Base_SetConfig+0xc8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d103      	bne.n	80074e0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	691a      	ldr	r2, [r3, #16]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	615a      	str	r2, [r3, #20]
}
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bc80      	pop	{r7}
 80074ee:	4770      	bx	lr
 80074f0:	40012c00 	.word	0x40012c00
 80074f4:	40000400 	.word	0x40000400
 80074f8:	40000800 	.word	0x40000800
 80074fc:	40000c00 	.word	0x40000c00

08007500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr

08007512 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	bc80      	pop	{r7}
 8007522:	4770      	bx	lr

08007524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e04a      	b.n	80075cc <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d111      	bne.n	8007566 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fada 	bl	8007b04 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a1e      	ldr	r2, [pc, #120]	; (80075d4 <HAL_UART_Init+0xb0>)
 800755c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2224      	movs	r2, #36	; 0x24
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800757c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fc94 	bl	8007eac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691a      	ldr	r2, [r3, #16]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007592:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	695a      	ldr	r2, [r3, #20]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2220      	movs	r2, #32
 80075be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	08002821 	.word	0x08002821

080075d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08a      	sub	sp, #40	; 0x28
 80075dc:	af02      	add	r7, sp, #8
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	603b      	str	r3, [r7, #0]
 80075e4:	4613      	mov	r3, r2
 80075e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d17c      	bne.n	80076f2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <HAL_UART_Transmit+0x2c>
 80075fe:	88fb      	ldrh	r3, [r7, #6]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e075      	b.n	80076f4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <HAL_UART_Transmit+0x3e>
 8007612:	2302      	movs	r3, #2
 8007614:	e06e      	b.n	80076f4 <HAL_UART_Transmit+0x11c>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2221      	movs	r2, #33	; 0x21
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800762c:	f7fb fbc0 	bl	8002db0 <HAL_GetTick>
 8007630:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	88fa      	ldrh	r2, [r7, #6]
 8007636:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	88fa      	ldrh	r2, [r7, #6]
 800763c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007646:	d108      	bne.n	800765a <HAL_UART_Transmit+0x82>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007650:	2300      	movs	r3, #0
 8007652:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	61bb      	str	r3, [r7, #24]
 8007658:	e003      	b.n	8007662 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800766a:	e02a      	b.n	80076c2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2200      	movs	r2, #0
 8007674:	2180      	movs	r1, #128	; 0x80
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 fa7a 	bl	8007b70 <UART_WaitOnFlagUntilTimeout>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e036      	b.n	80076f4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10b      	bne.n	80076a4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	461a      	mov	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800769a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	3302      	adds	r3, #2
 80076a0:	61bb      	str	r3, [r7, #24]
 80076a2:	e007      	b.n	80076b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	781a      	ldrb	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	3301      	adds	r3, #1
 80076b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1cf      	bne.n	800766c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2200      	movs	r2, #0
 80076d4:	2140      	movs	r1, #64	; 0x40
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fa4a 	bl	8007b70 <UART_WaitOnFlagUntilTimeout>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e006      	b.n	80076f4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	e000      	b.n	80076f4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80076f2:	2302      	movs	r3, #2
  }
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	; 0x28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800771c:	2300      	movs	r3, #0
 800771e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007720:	2300      	movs	r3, #0
 8007722:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10d      	bne.n	800774e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	f003 0320 	and.w	r3, r3, #32
 8007738:	2b00      	cmp	r3, #0
 800773a:	d008      	beq.n	800774e <HAL_UART_IRQHandler+0x52>
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fb05 	bl	8007d56 <UART_Receive_IT>
      return;
 800774c:	e180      	b.n	8007a50 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 80b4 	beq.w	80078be <HAL_UART_IRQHandler+0x1c2>
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b00      	cmp	r3, #0
 800775e:	d105      	bne.n	800776c <HAL_UART_IRQHandler+0x70>
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 80a9 	beq.w	80078be <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00a      	beq.n	800778c <HAL_UART_IRQHandler+0x90>
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	f043 0201 	orr.w	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	f003 0304 	and.w	r3, r3, #4
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00a      	beq.n	80077ac <HAL_UART_IRQHandler+0xb0>
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	d005      	beq.n	80077ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a4:	f043 0202 	orr.w	r2, r3, #2
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <HAL_UART_IRQHandler+0xd0>
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c4:	f043 0204 	orr.w	r2, r3, #4
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	f003 0308 	and.w	r3, r3, #8
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00f      	beq.n	80077f6 <HAL_UART_IRQHandler+0xfa>
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d104      	bne.n	80077ea <HAL_UART_IRQHandler+0xee>
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d005      	beq.n	80077f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	f043 0208 	orr.w	r2, r3, #8
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 8123 	beq.w	8007a46 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <HAL_UART_IRQHandler+0x11e>
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fa9e 	bl	8007d56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	bf14      	ite	ne
 8007828:	2301      	movne	r3, #1
 800782a:	2300      	moveq	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	2b00      	cmp	r3, #0
 800783a:	d102      	bne.n	8007842 <HAL_UART_IRQHandler+0x146>
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d033      	beq.n	80078aa <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f9de 	bl	8007c04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007852:	2b00      	cmp	r3, #0
 8007854:	d024      	beq.n	80078a0 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	695a      	ldr	r2, [r3, #20]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007864:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	2b00      	cmp	r3, #0
 800786c:	d013      	beq.n	8007896 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007872:	4a79      	ldr	r2, [pc, #484]	; (8007a58 <HAL_UART_IRQHandler+0x35c>)
 8007874:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	4618      	mov	r0, r3
 800787c:	f7fb fc32 	bl	80030e4 <HAL_DMA_Abort_IT>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d019      	beq.n	80078ba <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007894:	e011      	b.n	80078ba <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800789e:	e00c      	b.n	80078ba <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a8:	e007      	b.n	80078ba <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80078b8:	e0c5      	b.n	8007a46 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ba:	bf00      	nop
    return;
 80078bc:	e0c3      	b.n	8007a46 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	f040 80a3 	bne.w	8007a0e <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 809d 	beq.w	8007a0e <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	f003 0310 	and.w	r3, r3, #16
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 8097 	beq.w	8007a0e <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007900:	2b00      	cmp	r3, #0
 8007902:	d04f      	beq.n	80079a4 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800790e:	8a3b      	ldrh	r3, [r7, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 809a 	beq.w	8007a4a <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800791a:	8a3a      	ldrh	r2, [r7, #16]
 800791c:	429a      	cmp	r2, r3
 800791e:	f080 8094 	bcs.w	8007a4a <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	8a3a      	ldrh	r2, [r7, #16]
 8007926:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	2b20      	cmp	r3, #32
 8007930:	d02b      	beq.n	800798a <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68da      	ldr	r2, [r3, #12]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007940:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	695a      	ldr	r2, [r3, #20]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0201 	bic.w	r2, r2, #1
 8007950:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	695a      	ldr	r2, [r3, #20]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007960:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2220      	movs	r2, #32
 8007966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0210 	bic.w	r2, r2, #16
 800797e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	4618      	mov	r0, r3
 8007986:	f7fb fb73 	bl	8003070 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007996:	b292      	uxth	r2, r2
 8007998:	1a8a      	subs	r2, r1, r2
 800799a:	b292      	uxth	r2, r2
 800799c:	4611      	mov	r1, r2
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 80079a2:	e052      	b.n	8007a4a <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d048      	beq.n	8007a4e <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 80079bc:	8a7b      	ldrh	r3, [r7, #18]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d045      	beq.n	8007a4e <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80079d0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695a      	ldr	r2, [r3, #20]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0201 	bic.w	r2, r2, #1
 80079e0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0210 	bic.w	r2, r2, #16
 80079fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a04:	8a7a      	ldrh	r2, [r7, #18]
 8007a06:	4611      	mov	r1, r2
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8007a0c:	e01f      	b.n	8007a4e <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d008      	beq.n	8007a2a <HAL_UART_IRQHandler+0x32e>
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f92f 	bl	8007c86 <UART_Transmit_IT>
    return;
 8007a28:	e012      	b.n	8007a50 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00d      	beq.n	8007a50 <HAL_UART_IRQHandler+0x354>
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d008      	beq.n	8007a50 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f970 	bl	8007d24 <UART_EndTransmit_IT>
    return;
 8007a44:	e004      	b.n	8007a50 <HAL_UART_IRQHandler+0x354>
    return;
 8007a46:	bf00      	nop
 8007a48:	e002      	b.n	8007a50 <HAL_UART_IRQHandler+0x354>
      return;
 8007a4a:	bf00      	nop
 8007a4c:	e000      	b.n	8007a50 <HAL_UART_IRQHandler+0x354>
      return;
 8007a4e:	bf00      	nop
  }
}
 8007a50:	3728      	adds	r7, #40	; 0x28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	08007c5d 	.word	0x08007c5d

08007a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bc80      	pop	{r7}
 8007a6c:	4770      	bx	lr

08007a6e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bc80      	pop	{r7}
 8007a7e:	4770      	bx	lr

08007a80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bc80      	pop	{r7}
 8007a90:	4770      	bx	lr

08007a92 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bc80      	pop	{r7}
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bc80      	pop	{r7}
 8007ab4:	4770      	bx	lr

08007ab6 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007abe:	bf00      	nop
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bc80      	pop	{r7}
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr

08007ada <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bc80      	pop	{r7}
 8007aea:	4770      	bx	lr

08007aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr
	...

08007b04 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a0f      	ldr	r2, [pc, #60]	; (8007b4c <UART_InitCallbacksToDefault+0x48>)
 8007b10:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a0e      	ldr	r2, [pc, #56]	; (8007b50 <UART_InitCallbacksToDefault+0x4c>)
 8007b16:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a0e      	ldr	r2, [pc, #56]	; (8007b54 <UART_InitCallbacksToDefault+0x50>)
 8007b1c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a0d      	ldr	r2, [pc, #52]	; (8007b58 <UART_InitCallbacksToDefault+0x54>)
 8007b22:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a0d      	ldr	r2, [pc, #52]	; (8007b5c <UART_InitCallbacksToDefault+0x58>)
 8007b28:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a0c      	ldr	r2, [pc, #48]	; (8007b60 <UART_InitCallbacksToDefault+0x5c>)
 8007b2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a0c      	ldr	r2, [pc, #48]	; (8007b64 <UART_InitCallbacksToDefault+0x60>)
 8007b34:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a0b      	ldr	r2, [pc, #44]	; (8007b68 <UART_InitCallbacksToDefault+0x64>)
 8007b3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a0b      	ldr	r2, [pc, #44]	; (8007b6c <UART_InitCallbacksToDefault+0x68>)
 8007b40:	669a      	str	r2, [r3, #104]	; 0x68

}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr
 8007b4c:	08007a6f 	.word	0x08007a6f
 8007b50:	08007a5d 	.word	0x08007a5d
 8007b54:	08007a93 	.word	0x08007a93
 8007b58:	08007a81 	.word	0x08007a81
 8007b5c:	08007aa5 	.word	0x08007aa5
 8007b60:	08007ab7 	.word	0x08007ab7
 8007b64:	08007ac9 	.word	0x08007ac9
 8007b68:	08007adb 	.word	0x08007adb
 8007b6c:	08007aed 	.word	0x08007aed

08007b70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b80:	e02c      	b.n	8007bdc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d028      	beq.n	8007bdc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d007      	beq.n	8007ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b90:	f7fb f90e 	bl	8002db0 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d21d      	bcs.n	8007bdc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007bae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695a      	ldr	r2, [r3, #20]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0201 	bic.w	r2, r2, #1
 8007bbe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e00f      	b.n	8007bfc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	4013      	ands	r3, r2
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	bf0c      	ite	eq
 8007bec:	2301      	moveq	r3, #1
 8007bee:	2300      	movne	r3, #0
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d0c3      	beq.n	8007b82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	695a      	ldr	r2, [r3, #20]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0201 	bic.w	r2, r2, #1
 8007c2a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d107      	bne.n	8007c44 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0210 	bic.w	r2, r2, #16
 8007c42:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bc80      	pop	{r7}
 8007c5a:	4770      	bx	lr

08007c5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b21      	cmp	r3, #33	; 0x21
 8007c98:	d13e      	bne.n	8007d18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca2:	d114      	bne.n	8007cce <UART_Transmit_IT+0x48>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d110      	bne.n	8007cce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	1c9a      	adds	r2, r3, #2
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	621a      	str	r2, [r3, #32]
 8007ccc:	e008      	b.n	8007ce0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	1c59      	adds	r1, r3, #1
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6211      	str	r1, [r2, #32]
 8007cd8:	781a      	ldrb	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	4619      	mov	r1, r3
 8007cee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10f      	bne.n	8007d14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	e000      	b.n	8007d1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d18:	2302      	movs	r3, #2
  }
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr

08007d24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b086      	sub	sp, #24
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b22      	cmp	r3, #34	; 0x22
 8007d68:	f040 809b 	bne.w	8007ea2 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d74:	d117      	bne.n	8007da6 <UART_Receive_IT+0x50>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d113      	bne.n	8007da6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	1c9a      	adds	r2, r3, #2
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	629a      	str	r2, [r3, #40]	; 0x28
 8007da4:	e026      	b.n	8007df4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007daa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007dac:	2300      	movs	r3, #0
 8007dae:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db8:	d007      	beq.n	8007dca <UART_Receive_IT+0x74>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10a      	bne.n	8007dd8 <UART_Receive_IT+0x82>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	e008      	b.n	8007dea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	4619      	mov	r1, r3
 8007e02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d14a      	bne.n	8007e9e <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0220 	bic.w	r2, r2, #32
 8007e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	695a      	ldr	r2, [r3, #20]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 0201 	bic.w	r2, r2, #1
 8007e36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d124      	bne.n	8007e92 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 0210 	bic.w	r2, r2, #16
 8007e5c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0310 	and.w	r3, r3, #16
 8007e68:	2b10      	cmp	r3, #16
 8007e6a:	d10a      	bne.n	8007e82 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	4798      	blx	r3
 8007e90:	e003      	b.n	8007e9a <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e002      	b.n	8007ea4 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e000      	b.n	8007ea4 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8007ea2:	2302      	movs	r3, #2
  }
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007ee6:	f023 030c 	bic.w	r3, r3, #12
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699a      	ldr	r2, [r3, #24]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a2c      	ldr	r2, [pc, #176]	; (8007fc0 <UART_SetConfig+0x114>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d103      	bne.n	8007f1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007f14:	f7fe fa24 	bl	8006360 <HAL_RCC_GetPCLK2Freq>
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	e002      	b.n	8007f22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007f1c:	f7fe fa0c 	bl	8006338 <HAL_RCC_GetPCLK1Freq>
 8007f20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	4613      	mov	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	009a      	lsls	r2, r3, #2
 8007f2c:	441a      	add	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f38:	4a22      	ldr	r2, [pc, #136]	; (8007fc4 <UART_SetConfig+0x118>)
 8007f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3e:	095b      	lsrs	r3, r3, #5
 8007f40:	0119      	lsls	r1, r3, #4
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	009a      	lsls	r2, r3, #2
 8007f4c:	441a      	add	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f58:	4b1a      	ldr	r3, [pc, #104]	; (8007fc4 <UART_SetConfig+0x118>)
 8007f5a:	fba3 0302 	umull	r0, r3, r3, r2
 8007f5e:	095b      	lsrs	r3, r3, #5
 8007f60:	2064      	movs	r0, #100	; 0x64
 8007f62:	fb00 f303 	mul.w	r3, r0, r3
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	011b      	lsls	r3, r3, #4
 8007f6a:	3332      	adds	r3, #50	; 0x32
 8007f6c:	4a15      	ldr	r2, [pc, #84]	; (8007fc4 <UART_SetConfig+0x118>)
 8007f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f72:	095b      	lsrs	r3, r3, #5
 8007f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f78:	4419      	add	r1, r3
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	009a      	lsls	r2, r3, #2
 8007f84:	441a      	add	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f90:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <UART_SetConfig+0x118>)
 8007f92:	fba3 0302 	umull	r0, r3, r3, r2
 8007f96:	095b      	lsrs	r3, r3, #5
 8007f98:	2064      	movs	r0, #100	; 0x64
 8007f9a:	fb00 f303 	mul.w	r3, r0, r3
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	3332      	adds	r3, #50	; 0x32
 8007fa4:	4a07      	ldr	r2, [pc, #28]	; (8007fc4 <UART_SetConfig+0x118>)
 8007fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007faa:	095b      	lsrs	r3, r3, #5
 8007fac:	f003 020f 	and.w	r2, r3, #15
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	440a      	add	r2, r1
 8007fb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007fb8:	bf00      	nop
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	40013800 	.word	0x40013800
 8007fc4:	51eb851f 	.word	0x51eb851f

08007fc8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fda:	2b84      	cmp	r3, #132	; 0x84
 8007fdc:	d005      	beq.n	8007fea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007fde:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	3303      	adds	r3, #3
 8007fe8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007fea:	68fb      	ldr	r3, [r7, #12]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bc80      	pop	{r7}
 8007ff4:	4770      	bx	lr

08007ff6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ffc:	f3ef 8305 	mrs	r3, IPSR
 8008000:	607b      	str	r3, [r7, #4]
  return(result);
 8008002:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008004:	2b00      	cmp	r3, #0
 8008006:	bf14      	ite	ne
 8008008:	2301      	movne	r3, #1
 800800a:	2300      	moveq	r3, #0
 800800c:	b2db      	uxtb	r3, r3
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	bc80      	pop	{r7}
 8008016:	4770      	bx	lr

08008018 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800801c:	f000 fffe 	bl	800901c <vTaskStartScheduler>
  
  return osOK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	bd80      	pop	{r7, pc}

08008026 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800802a:	f7ff ffe4 	bl	8007ff6 <inHandlerMode>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008034:	f001 f910 	bl	8009258 <xTaskGetTickCountFromISR>
 8008038:	4603      	mov	r3, r0
 800803a:	e002      	b.n	8008042 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800803c:	f001 f8fe 	bl	800923c <xTaskGetTickCount>
 8008040:	4603      	mov	r3, r0
  }
}
 8008042:	4618      	mov	r0, r3
 8008044:	bd80      	pop	{r7, pc}

08008046 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008048:	b089      	sub	sp, #36	; 0x24
 800804a:	af04      	add	r7, sp, #16
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d020      	beq.n	800809a <osThreadCreate+0x54>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d01c      	beq.n	800809a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685c      	ldr	r4, [r3, #4]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681d      	ldr	r5, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691e      	ldr	r6, [r3, #16]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff ffa8 	bl	8007fc8 <makeFreeRtosPriority>
 8008078:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008082:	9202      	str	r2, [sp, #8]
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	9100      	str	r1, [sp, #0]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	4632      	mov	r2, r6
 800808c:	4629      	mov	r1, r5
 800808e:	4620      	mov	r0, r4
 8008090:	f000 fdfe 	bl	8008c90 <xTaskCreateStatic>
 8008094:	4603      	mov	r3, r0
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	e01c      	b.n	80080d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685c      	ldr	r4, [r3, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080a6:	b29e      	uxth	r6, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff ff8a 	bl	8007fc8 <makeFreeRtosPriority>
 80080b4:	4602      	mov	r2, r0
 80080b6:	f107 030c 	add.w	r3, r7, #12
 80080ba:	9301      	str	r3, [sp, #4]
 80080bc:	9200      	str	r2, [sp, #0]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	4632      	mov	r2, r6
 80080c2:	4629      	mov	r1, r5
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fe3f 	bl	8008d48 <xTaskCreate>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d001      	beq.n	80080d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	e000      	b.n	80080d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80080d4:	68fb      	ldr	r3, [r7, #12]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080de <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <osDelay+0x16>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	e000      	b.n	80080f6 <osDelay+0x18>
 80080f4:	2301      	movs	r3, #1
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 ff5c 	bl	8008fb4 <vTaskDelay>
  
  return osOK;
 80080fc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af02      	add	r7, sp, #8
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	460b      	mov	r3, r1
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d013      	beq.n	8008146 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800811e:	7afb      	ldrb	r3, [r7, #11]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <osTimerCreate+0x20>
 8008124:	2101      	movs	r1, #1
 8008126:	e000      	b.n	800812a <osTimerCreate+0x22>
 8008128:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8008132:	9201      	str	r2, [sp, #4]
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	460a      	mov	r2, r1
 800813a:	2101      	movs	r1, #1
 800813c:	480b      	ldr	r0, [pc, #44]	; (800816c <osTimerCreate+0x64>)
 800813e:	f001 fd38 	bl	8009bb2 <xTimerCreateStatic>
 8008142:	4603      	mov	r3, r0
 8008144:	e00e      	b.n	8008164 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d101      	bne.n	8008150 <osTimerCreate+0x48>
 800814c:	2201      	movs	r2, #1
 800814e:	e000      	b.n	8008152 <osTimerCreate+0x4a>
 8008150:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2101      	movs	r1, #1
 800815c:	4803      	ldr	r0, [pc, #12]	; (800816c <osTimerCreate+0x64>)
 800815e:	f001 fd07 	bl	8009b70 <xTimerCreate>
 8008162:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	0800e368 	.word	0x0800e368

08008170 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f103 0208 	add.w	r2, r3, #8
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f04f 32ff 	mov.w	r2, #4294967295
 8008188:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f103 0208 	add.w	r2, r3, #8
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f103 0208 	add.w	r2, r3, #8
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bc80      	pop	{r7}
 80081ac:	4770      	bx	lr

080081ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bc80      	pop	{r7}
 80081c4:	4770      	bx	lr

080081c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081c6:	b480      	push	{r7}
 80081c8:	b085      	sub	sp, #20
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	601a      	str	r2, [r3, #0]
}
 8008202:	bf00      	nop
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	bc80      	pop	{r7}
 800820a:	4770      	bx	lr

0800820c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008222:	d103      	bne.n	800822c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	e00c      	b.n	8008246 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3308      	adds	r3, #8
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	e002      	b.n	800823a <vListInsert+0x2e>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	60fb      	str	r3, [r7, #12]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	429a      	cmp	r2, r3
 8008244:	d2f6      	bcs.n	8008234 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	601a      	str	r2, [r3, #0]
}
 8008272:	bf00      	nop
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr

0800827c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6892      	ldr	r2, [r2, #8]
 8008292:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	6852      	ldr	r2, [r2, #4]
 800829c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d103      	bne.n	80082b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	1e5a      	subs	r2, r3, #1
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr
	...

080082d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082fa:	f002 f867 	bl	800a3cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008306:	68f9      	ldr	r1, [r7, #12]
 8008308:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800830a:	fb01 f303 	mul.w	r3, r1, r3
 800830e:	441a      	add	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832a:	3b01      	subs	r3, #1
 800832c:	68f9      	ldr	r1, [r7, #12]
 800832e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008330:	fb01 f303 	mul.w	r3, r1, r3
 8008334:	441a      	add	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	22ff      	movs	r2, #255	; 0xff
 800833e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	22ff      	movs	r2, #255	; 0xff
 8008346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d114      	bne.n	800837a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d01a      	beq.n	800838e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3310      	adds	r3, #16
 800835c:	4618      	mov	r0, r3
 800835e:	f001 f8f5 	bl	800954c <xTaskRemoveFromEventList>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d012      	beq.n	800838e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008368:	4b0c      	ldr	r3, [pc, #48]	; (800839c <xQueueGenericReset+0xcc>)
 800836a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	e009      	b.n	800838e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3310      	adds	r3, #16
 800837e:	4618      	mov	r0, r3
 8008380:	f7ff fef6 	bl	8008170 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3324      	adds	r3, #36	; 0x24
 8008388:	4618      	mov	r0, r3
 800838a:	f7ff fef1 	bl	8008170 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800838e:	f002 f84d 	bl	800a42c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008392:	2301      	movs	r3, #1
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	e000ed04 	.word	0xe000ed04

080083a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b08e      	sub	sp, #56	; 0x38
 80083a4:	af02      	add	r7, sp, #8
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083c6:	bf00      	nop
 80083c8:	e7fe      	b.n	80083c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <xQueueGenericCreateStatic+0x52>
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <xQueueGenericCreateStatic+0x56>
 80083f2:	2301      	movs	r3, #1
 80083f4:	e000      	b.n	80083f8 <xQueueGenericCreateStatic+0x58>
 80083f6:	2300      	movs	r3, #0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	623b      	str	r3, [r7, #32]
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d102      	bne.n	800841e <xQueueGenericCreateStatic+0x7e>
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <xQueueGenericCreateStatic+0x82>
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <xQueueGenericCreateStatic+0x84>
 8008422:	2300      	movs	r3, #0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10a      	bne.n	800843e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	61fb      	str	r3, [r7, #28]
}
 800843a:	bf00      	nop
 800843c:	e7fe      	b.n	800843c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800843e:	2348      	movs	r3, #72	; 0x48
 8008440:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b48      	cmp	r3, #72	; 0x48
 8008446:	d00a      	beq.n	800845e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	61bb      	str	r3, [r7, #24]
}
 800845a:	bf00      	nop
 800845c:	e7fe      	b.n	800845c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00d      	beq.n	8008484 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008470:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	4613      	mov	r3, r2
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	68b9      	ldr	r1, [r7, #8]
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 f805 	bl	800848e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008486:	4618      	mov	r0, r3
 8008488:	3730      	adds	r7, #48	; 0x30
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	607a      	str	r2, [r7, #4]
 800849a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d103      	bne.n	80084aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	69ba      	ldr	r2, [r7, #24]
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	e002      	b.n	80084b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084bc:	2101      	movs	r1, #1
 80084be:	69b8      	ldr	r0, [r7, #24]
 80084c0:	f7ff ff06 	bl	80082d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084c4:	bf00      	nop
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08e      	sub	sp, #56	; 0x38
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084da:	2300      	movs	r3, #0
 80084dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10a      	bne.n	80084fe <xQueueGenericSend+0x32>
	__asm volatile
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084fa:	bf00      	nop
 80084fc:	e7fe      	b.n	80084fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d103      	bne.n	800850c <xQueueGenericSend+0x40>
 8008504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <xQueueGenericSend+0x44>
 800850c:	2301      	movs	r3, #1
 800850e:	e000      	b.n	8008512 <xQueueGenericSend+0x46>
 8008510:	2300      	movs	r3, #0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <xQueueGenericSend+0x60>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2b02      	cmp	r3, #2
 8008530:	d103      	bne.n	800853a <xQueueGenericSend+0x6e>
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008536:	2b01      	cmp	r3, #1
 8008538:	d101      	bne.n	800853e <xQueueGenericSend+0x72>
 800853a:	2301      	movs	r3, #1
 800853c:	e000      	b.n	8008540 <xQueueGenericSend+0x74>
 800853e:	2300      	movs	r3, #0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10a      	bne.n	800855a <xQueueGenericSend+0x8e>
	__asm volatile
 8008544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	623b      	str	r3, [r7, #32]
}
 8008556:	bf00      	nop
 8008558:	e7fe      	b.n	8008558 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800855a:	f001 f9b7 	bl	80098cc <xTaskGetSchedulerState>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <xQueueGenericSend+0x9e>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <xQueueGenericSend+0xa2>
 800856a:	2301      	movs	r3, #1
 800856c:	e000      	b.n	8008570 <xQueueGenericSend+0xa4>
 800856e:	2300      	movs	r3, #0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10a      	bne.n	800858a <xQueueGenericSend+0xbe>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	61fb      	str	r3, [r7, #28]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800858a:	f001 ff1f 	bl	800a3cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008596:	429a      	cmp	r2, r3
 8008598:	d302      	bcc.n	80085a0 <xQueueGenericSend+0xd4>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b02      	cmp	r3, #2
 800859e:	d129      	bne.n	80085f4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	68b9      	ldr	r1, [r7, #8]
 80085a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085a6:	f000 fa07 	bl	80089b8 <prvCopyDataToQueue>
 80085aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d010      	beq.n	80085d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	3324      	adds	r3, #36	; 0x24
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 ffc7 	bl	800954c <xTaskRemoveFromEventList>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d013      	beq.n	80085ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085c4:	4b3f      	ldr	r3, [pc, #252]	; (80086c4 <xQueueGenericSend+0x1f8>)
 80085c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	e00a      	b.n	80085ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d007      	beq.n	80085ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085dc:	4b39      	ldr	r3, [pc, #228]	; (80086c4 <xQueueGenericSend+0x1f8>)
 80085de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085ec:	f001 ff1e 	bl	800a42c <vPortExitCritical>
				return pdPASS;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e063      	b.n	80086bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d103      	bne.n	8008602 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085fa:	f001 ff17 	bl	800a42c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80085fe:	2300      	movs	r3, #0
 8008600:	e05c      	b.n	80086bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008604:	2b00      	cmp	r3, #0
 8008606:	d106      	bne.n	8008616 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008608:	f107 0314 	add.w	r3, r7, #20
 800860c:	4618      	mov	r0, r3
 800860e:	f000 ffff 	bl	8009610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008612:	2301      	movs	r3, #1
 8008614:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008616:	f001 ff09 	bl	800a42c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800861a:	f000 fd65 	bl	80090e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800861e:	f001 fed5 	bl	800a3cc <vPortEnterCritical>
 8008622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008628:	b25b      	sxtb	r3, r3
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862e:	d103      	bne.n	8008638 <xQueueGenericSend+0x16c>
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800863e:	b25b      	sxtb	r3, r3
 8008640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008644:	d103      	bne.n	800864e <xQueueGenericSend+0x182>
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	2200      	movs	r2, #0
 800864a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800864e:	f001 feed 	bl	800a42c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008652:	1d3a      	adds	r2, r7, #4
 8008654:	f107 0314 	add.w	r3, r7, #20
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f000 ffee 	bl	800963c <xTaskCheckForTimeOut>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d124      	bne.n	80086b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008668:	f000 fa9e 	bl	8008ba8 <prvIsQueueFull>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d018      	beq.n	80086a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	3310      	adds	r3, #16
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	4611      	mov	r1, r2
 800867a:	4618      	mov	r0, r3
 800867c:	f000 ff16 	bl	80094ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008682:	f000 fa29 	bl	8008ad8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008686:	f000 fd3d 	bl	8009104 <xTaskResumeAll>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	f47f af7c 	bne.w	800858a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008692:	4b0c      	ldr	r3, [pc, #48]	; (80086c4 <xQueueGenericSend+0x1f8>)
 8008694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	e772      	b.n	800858a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086a6:	f000 fa17 	bl	8008ad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086aa:	f000 fd2b 	bl	8009104 <xTaskResumeAll>
 80086ae:	e76c      	b.n	800858a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086b2:	f000 fa11 	bl	8008ad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086b6:	f000 fd25 	bl	8009104 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086ba:	2300      	movs	r3, #0
		}
	}
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3738      	adds	r7, #56	; 0x38
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	e000ed04 	.word	0xe000ed04

080086c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08e      	sub	sp, #56	; 0x38
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
 80086d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10a      	bne.n	80086f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086f2:	bf00      	nop
 80086f4:	e7fe      	b.n	80086f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d103      	bne.n	8008704 <xQueueGenericSendFromISR+0x3c>
 80086fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <xQueueGenericSendFromISR+0x40>
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <xQueueGenericSendFromISR+0x42>
 8008708:	2300      	movs	r3, #0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10a      	bne.n	8008724 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	623b      	str	r3, [r7, #32]
}
 8008720:	bf00      	nop
 8008722:	e7fe      	b.n	8008722 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d103      	bne.n	8008732 <xQueueGenericSendFromISR+0x6a>
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872e:	2b01      	cmp	r3, #1
 8008730:	d101      	bne.n	8008736 <xQueueGenericSendFromISR+0x6e>
 8008732:	2301      	movs	r3, #1
 8008734:	e000      	b.n	8008738 <xQueueGenericSendFromISR+0x70>
 8008736:	2300      	movs	r3, #0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800873c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	61fb      	str	r3, [r7, #28]
}
 800874e:	bf00      	nop
 8008750:	e7fe      	b.n	8008750 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008752:	f001 fefd 	bl	800a550 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008756:	f3ef 8211 	mrs	r2, BASEPRI
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	61ba      	str	r2, [r7, #24]
 800876c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800876e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008770:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800877a:	429a      	cmp	r2, r3
 800877c:	d302      	bcc.n	8008784 <xQueueGenericSendFromISR+0xbc>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b02      	cmp	r3, #2
 8008782:	d12c      	bne.n	80087de <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800878a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008794:	f000 f910 	bl	80089b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008798:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800879c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a0:	d112      	bne.n	80087c8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d016      	beq.n	80087d8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	3324      	adds	r3, #36	; 0x24
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 fecc 	bl	800954c <xTaskRemoveFromEventList>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00e      	beq.n	80087d8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00b      	beq.n	80087d8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	e007      	b.n	80087d8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087cc:	3301      	adds	r3, #1
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	b25a      	sxtb	r2, r3
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087d8:	2301      	movs	r3, #1
 80087da:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80087dc:	e001      	b.n	80087e2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	637b      	str	r3, [r7, #52]	; 0x34
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3738      	adds	r7, #56	; 0x38
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08c      	sub	sp, #48	; 0x30
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008804:	2300      	movs	r3, #0
 8008806:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10a      	bne.n	8008828 <xQueueReceive+0x30>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	623b      	str	r3, [r7, #32]
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d103      	bne.n	8008836 <xQueueReceive+0x3e>
 800882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <xQueueReceive+0x42>
 8008836:	2301      	movs	r3, #1
 8008838:	e000      	b.n	800883c <xQueueReceive+0x44>
 800883a:	2300      	movs	r3, #0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10a      	bne.n	8008856 <xQueueReceive+0x5e>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	61fb      	str	r3, [r7, #28]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008856:	f001 f839 	bl	80098cc <xTaskGetSchedulerState>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <xQueueReceive+0x6e>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <xQueueReceive+0x72>
 8008866:	2301      	movs	r3, #1
 8008868:	e000      	b.n	800886c <xQueueReceive+0x74>
 800886a:	2300      	movs	r3, #0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <xQueueReceive+0x8e>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	61bb      	str	r3, [r7, #24]
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008886:	f001 fda1 	bl	800a3cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800888a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	2b00      	cmp	r3, #0
 8008894:	d01f      	beq.n	80088d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008896:	68b9      	ldr	r1, [r7, #8]
 8008898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800889a:	f000 f8f7 	bl	8008a8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	1e5a      	subs	r2, r3, #1
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00f      	beq.n	80088ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b0:	3310      	adds	r3, #16
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fe4a 	bl	800954c <xTaskRemoveFromEventList>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d007      	beq.n	80088ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088be:	4b3d      	ldr	r3, [pc, #244]	; (80089b4 <xQueueReceive+0x1bc>)
 80088c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088ce:	f001 fdad 	bl	800a42c <vPortExitCritical>
				return pdPASS;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e069      	b.n	80089aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d103      	bne.n	80088e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088dc:	f001 fda6 	bl	800a42c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088e0:	2300      	movs	r3, #0
 80088e2:	e062      	b.n	80089aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d106      	bne.n	80088f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088ea:	f107 0310 	add.w	r3, r7, #16
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 fe8e 	bl	8009610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088f4:	2301      	movs	r3, #1
 80088f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088f8:	f001 fd98 	bl	800a42c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088fc:	f000 fbf4 	bl	80090e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008900:	f001 fd64 	bl	800a3cc <vPortEnterCritical>
 8008904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800890a:	b25b      	sxtb	r3, r3
 800890c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008910:	d103      	bne.n	800891a <xQueueReceive+0x122>
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008920:	b25b      	sxtb	r3, r3
 8008922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008926:	d103      	bne.n	8008930 <xQueueReceive+0x138>
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008930:	f001 fd7c 	bl	800a42c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008934:	1d3a      	adds	r2, r7, #4
 8008936:	f107 0310 	add.w	r3, r7, #16
 800893a:	4611      	mov	r1, r2
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fe7d 	bl	800963c <xTaskCheckForTimeOut>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d123      	bne.n	8008990 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800894a:	f000 f917 	bl	8008b7c <prvIsQueueEmpty>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d017      	beq.n	8008984 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008956:	3324      	adds	r3, #36	; 0x24
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	4611      	mov	r1, r2
 800895c:	4618      	mov	r0, r3
 800895e:	f000 fda5 	bl	80094ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008964:	f000 f8b8 	bl	8008ad8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008968:	f000 fbcc 	bl	8009104 <xTaskResumeAll>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d189      	bne.n	8008886 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008972:	4b10      	ldr	r3, [pc, #64]	; (80089b4 <xQueueReceive+0x1bc>)
 8008974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	e780      	b.n	8008886 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008986:	f000 f8a7 	bl	8008ad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800898a:	f000 fbbb 	bl	8009104 <xTaskResumeAll>
 800898e:	e77a      	b.n	8008886 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008992:	f000 f8a1 	bl	8008ad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008996:	f000 fbb5 	bl	8009104 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800899a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800899c:	f000 f8ee 	bl	8008b7c <prvIsQueueEmpty>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f43f af6f 	beq.w	8008886 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3730      	adds	r7, #48	; 0x30
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	e000ed04 	.word	0xe000ed04

080089b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089c4:	2300      	movs	r3, #0
 80089c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10d      	bne.n	80089f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d14d      	bne.n	8008a7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 ff90 	bl	8009908 <xTaskPriorityDisinherit>
 80089e8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	605a      	str	r2, [r3, #4]
 80089f0:	e043      	b.n	8008a7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d119      	bne.n	8008a2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6898      	ldr	r0, [r3, #8]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a00:	461a      	mov	r2, r3
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	f002 f814 	bl	800aa30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a10:	441a      	add	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	689a      	ldr	r2, [r3, #8]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d32b      	bcc.n	8008a7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	609a      	str	r2, [r3, #8]
 8008a2a:	e026      	b.n	8008a7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	68d8      	ldr	r0, [r3, #12]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a34:	461a      	mov	r2, r3
 8008a36:	68b9      	ldr	r1, [r7, #8]
 8008a38:	f001 fffa 	bl	800aa30 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	68da      	ldr	r2, [r3, #12]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	425b      	negs	r3, r3
 8008a46:	441a      	add	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d207      	bcs.n	8008a68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a60:	425b      	negs	r3, r3
 8008a62:	441a      	add	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d105      	bne.n	8008a7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a82:	697b      	ldr	r3, [r7, #20]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d018      	beq.n	8008ad0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68da      	ldr	r2, [r3, #12]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa6:	441a      	add	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d303      	bcc.n	8008ac0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68d9      	ldr	r1, [r3, #12]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6838      	ldr	r0, [r7, #0]
 8008acc:	f001 ffb0 	bl	800aa30 <memcpy>
	}
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ae0:	f001 fc74 	bl	800a3cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008aec:	e011      	b.n	8008b12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d012      	beq.n	8008b1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	3324      	adds	r3, #36	; 0x24
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 fd26 	bl	800954c <xTaskRemoveFromEventList>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b06:	f000 fdfb 	bl	8009700 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	dce9      	bgt.n	8008aee <prvUnlockQueue+0x16>
 8008b1a:	e000      	b.n	8008b1e <prvUnlockQueue+0x46>
					break;
 8008b1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	22ff      	movs	r2, #255	; 0xff
 8008b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b26:	f001 fc81 	bl	800a42c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b2a:	f001 fc4f 	bl	800a3cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b36:	e011      	b.n	8008b5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d012      	beq.n	8008b66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3310      	adds	r3, #16
 8008b44:	4618      	mov	r0, r3
 8008b46:	f000 fd01 	bl	800954c <xTaskRemoveFromEventList>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b50:	f000 fdd6 	bl	8009700 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	dce9      	bgt.n	8008b38 <prvUnlockQueue+0x60>
 8008b64:	e000      	b.n	8008b68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	22ff      	movs	r2, #255	; 0xff
 8008b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b70:	f001 fc5c 	bl	800a42c <vPortExitCritical>
}
 8008b74:	bf00      	nop
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b84:	f001 fc22 	bl	800a3cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d102      	bne.n	8008b96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b90:	2301      	movs	r3, #1
 8008b92:	60fb      	str	r3, [r7, #12]
 8008b94:	e001      	b.n	8008b9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b96:	2300      	movs	r3, #0
 8008b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b9a:	f001 fc47 	bl	800a42c <vPortExitCritical>

	return xReturn;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bb0:	f001 fc0c 	bl	800a3cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d102      	bne.n	8008bc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	60fb      	str	r3, [r7, #12]
 8008bc4:	e001      	b.n	8008bca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bca:	f001 fc2f 	bl	800a42c <vPortExitCritical>

	return xReturn;
 8008bce:	68fb      	ldr	r3, [r7, #12]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	e014      	b.n	8008c12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008be8:	4a0e      	ldr	r2, [pc, #56]	; (8008c24 <vQueueAddToRegistry+0x4c>)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10b      	bne.n	8008c0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008bf4:	490b      	ldr	r1, [pc, #44]	; (8008c24 <vQueueAddToRegistry+0x4c>)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008bfe:	4a09      	ldr	r2, [pc, #36]	; (8008c24 <vQueueAddToRegistry+0x4c>)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	00db      	lsls	r3, r3, #3
 8008c04:	4413      	add	r3, r2
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c0a:	e006      	b.n	8008c1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b07      	cmp	r3, #7
 8008c16:	d9e7      	bls.n	8008be8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c18:	bf00      	nop
 8008c1a:	bf00      	nop
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bc80      	pop	{r7}
 8008c22:	4770      	bx	lr
 8008c24:	20002d9c 	.word	0x20002d9c

08008c28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c38:	f001 fbc8 	bl	800a3cc <vPortEnterCritical>
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c42:	b25b      	sxtb	r3, r3
 8008c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c48:	d103      	bne.n	8008c52 <vQueueWaitForMessageRestricted+0x2a>
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c58:	b25b      	sxtb	r3, r3
 8008c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5e:	d103      	bne.n	8008c68 <vQueueWaitForMessageRestricted+0x40>
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c68:	f001 fbe0 	bl	800a42c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d106      	bne.n	8008c82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	3324      	adds	r3, #36	; 0x24
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	68b9      	ldr	r1, [r7, #8]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 fc39 	bl	80094f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c82:	6978      	ldr	r0, [r7, #20]
 8008c84:	f7ff ff28 	bl	8008ad8 <prvUnlockQueue>
	}
 8008c88:	bf00      	nop
 8008c8a:	3718      	adds	r7, #24
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08e      	sub	sp, #56	; 0x38
 8008c94:	af04      	add	r7, sp, #16
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10a      	bne.n	8008cba <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	623b      	str	r3, [r7, #32]
}
 8008cb6:	bf00      	nop
 8008cb8:	e7fe      	b.n	8008cb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	61fb      	str	r3, [r7, #28]
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008cd6:	2354      	movs	r3, #84	; 0x54
 8008cd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	2b54      	cmp	r3, #84	; 0x54
 8008cde:	d00a      	beq.n	8008cf6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	61bb      	str	r3, [r7, #24]
}
 8008cf2:	bf00      	nop
 8008cf4:	e7fe      	b.n	8008cf4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d01e      	beq.n	8008d3a <xTaskCreateStatic+0xaa>
 8008cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d01b      	beq.n	8008d3a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d0a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d14:	2300      	movs	r3, #0
 8008d16:	9303      	str	r3, [sp, #12]
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	9302      	str	r3, [sp, #8]
 8008d1c:	f107 0314 	add.w	r3, r7, #20
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	68b9      	ldr	r1, [r7, #8]
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 f850 	bl	8008dd2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d34:	f000 f8d4 	bl	8008ee0 <prvAddNewTaskToReadyList>
 8008d38:	e001      	b.n	8008d3e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d3e:	697b      	ldr	r3, [r7, #20]
	}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3728      	adds	r7, #40	; 0x28
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08c      	sub	sp, #48	; 0x30
 8008d4c:	af04      	add	r7, sp, #16
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	603b      	str	r3, [r7, #0]
 8008d54:	4613      	mov	r3, r2
 8008d56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d58:	88fb      	ldrh	r3, [r7, #6]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f001 fc35 	bl	800a5cc <pvPortMalloc>
 8008d62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00e      	beq.n	8008d88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008d6a:	2054      	movs	r0, #84	; 0x54
 8008d6c:	f001 fc2e 	bl	800a5cc <pvPortMalloc>
 8008d70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8008d7e:	e005      	b.n	8008d8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d80:	6978      	ldr	r0, [r7, #20]
 8008d82:	f001 fce7 	bl	800a754 <vPortFree>
 8008d86:	e001      	b.n	8008d8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d017      	beq.n	8008dc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d9a:	88fa      	ldrh	r2, [r7, #6]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	9303      	str	r3, [sp, #12]
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	9302      	str	r3, [sp, #8]
 8008da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	68b9      	ldr	r1, [r7, #8]
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 f80e 	bl	8008dd2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008db6:	69f8      	ldr	r0, [r7, #28]
 8008db8:	f000 f892 	bl	8008ee0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	61bb      	str	r3, [r7, #24]
 8008dc0:	e002      	b.n	8008dc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008dc8:	69bb      	ldr	r3, [r7, #24]
	}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3720      	adds	r7, #32
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b088      	sub	sp, #32
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
 8008dde:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	461a      	mov	r2, r3
 8008dea:	21a5      	movs	r1, #165	; 0xa5
 8008dec:	f001 fe2e 	bl	800aa4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	f023 0307 	bic.w	r3, r3, #7
 8008e08:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	f003 0307 	and.w	r3, r3, #7
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00a      	beq.n	8008e2a <prvInitialiseNewTask+0x58>
	__asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	617b      	str	r3, [r7, #20]
}
 8008e26:	bf00      	nop
 8008e28:	e7fe      	b.n	8008e28 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	61fb      	str	r3, [r7, #28]
 8008e2e:	e012      	b.n	8008e56 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	4413      	add	r3, r2
 8008e36:	7819      	ldrb	r1, [r3, #0]
 8008e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	3334      	adds	r3, #52	; 0x34
 8008e40:	460a      	mov	r2, r1
 8008e42:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	4413      	add	r3, r2
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d006      	beq.n	8008e5e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	3301      	adds	r3, #1
 8008e54:	61fb      	str	r3, [r7, #28]
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	2b0f      	cmp	r3, #15
 8008e5a:	d9e9      	bls.n	8008e30 <prvInitialiseNewTask+0x5e>
 8008e5c:	e000      	b.n	8008e60 <prvInitialiseNewTask+0x8e>
		{
			break;
 8008e5e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6a:	2b06      	cmp	r3, #6
 8008e6c:	d901      	bls.n	8008e72 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e6e:	2306      	movs	r3, #6
 8008e70:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e7c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	2200      	movs	r2, #0
 8008e82:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	3304      	adds	r3, #4
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7ff f990 	bl	80081ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	3318      	adds	r3, #24
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff f98b 	bl	80081ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	f1c3 0207 	rsb	r2, r3, #7
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	68f9      	ldr	r1, [r7, #12]
 8008ec0:	69b8      	ldr	r0, [r7, #24]
 8008ec2:	f001 f995 	bl	800a1f0 <pxPortInitialiseStack>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d002      	beq.n	8008ed8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ed8:	bf00      	nop
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ee8:	f001 fa70 	bl	800a3cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008eec:	4b2a      	ldr	r3, [pc, #168]	; (8008f98 <prvAddNewTaskToReadyList+0xb8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	4a29      	ldr	r2, [pc, #164]	; (8008f98 <prvAddNewTaskToReadyList+0xb8>)
 8008ef4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ef6:	4b29      	ldr	r3, [pc, #164]	; (8008f9c <prvAddNewTaskToReadyList+0xbc>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d109      	bne.n	8008f12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008efe:	4a27      	ldr	r2, [pc, #156]	; (8008f9c <prvAddNewTaskToReadyList+0xbc>)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f04:	4b24      	ldr	r3, [pc, #144]	; (8008f98 <prvAddNewTaskToReadyList+0xb8>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d110      	bne.n	8008f2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f0c:	f000 fc1c 	bl	8009748 <prvInitialiseTaskLists>
 8008f10:	e00d      	b.n	8008f2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f12:	4b23      	ldr	r3, [pc, #140]	; (8008fa0 <prvAddNewTaskToReadyList+0xc0>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d109      	bne.n	8008f2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f1a:	4b20      	ldr	r3, [pc, #128]	; (8008f9c <prvAddNewTaskToReadyList+0xbc>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d802      	bhi.n	8008f2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f28:	4a1c      	ldr	r2, [pc, #112]	; (8008f9c <prvAddNewTaskToReadyList+0xbc>)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f2e:	4b1d      	ldr	r3, [pc, #116]	; (8008fa4 <prvAddNewTaskToReadyList+0xc4>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3301      	adds	r3, #1
 8008f34:	4a1b      	ldr	r2, [pc, #108]	; (8008fa4 <prvAddNewTaskToReadyList+0xc4>)
 8008f36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	409a      	lsls	r2, r3
 8008f40:	4b19      	ldr	r3, [pc, #100]	; (8008fa8 <prvAddNewTaskToReadyList+0xc8>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	4a18      	ldr	r2, [pc, #96]	; (8008fa8 <prvAddNewTaskToReadyList+0xc8>)
 8008f48:	6013      	str	r3, [r2, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4e:	4613      	mov	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4a15      	ldr	r2, [pc, #84]	; (8008fac <prvAddNewTaskToReadyList+0xcc>)
 8008f58:	441a      	add	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4610      	mov	r0, r2
 8008f62:	f7ff f930 	bl	80081c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f66:	f001 fa61 	bl	800a42c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f6a:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <prvAddNewTaskToReadyList+0xc0>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00e      	beq.n	8008f90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f72:	4b0a      	ldr	r3, [pc, #40]	; (8008f9c <prvAddNewTaskToReadyList+0xbc>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d207      	bcs.n	8008f90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f80:	4b0b      	ldr	r3, [pc, #44]	; (8008fb0 <prvAddNewTaskToReadyList+0xd0>)
 8008f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f90:	bf00      	nop
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	200009f0 	.word	0x200009f0
 8008f9c:	200008f0 	.word	0x200008f0
 8008fa0:	200009fc 	.word	0x200009fc
 8008fa4:	20000a0c 	.word	0x20000a0c
 8008fa8:	200009f8 	.word	0x200009f8
 8008fac:	200008f4 	.word	0x200008f4
 8008fb0:	e000ed04 	.word	0xe000ed04

08008fb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d017      	beq.n	8008ff6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008fc6:	4b13      	ldr	r3, [pc, #76]	; (8009014 <vTaskDelay+0x60>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <vTaskDelay+0x30>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	60bb      	str	r3, [r7, #8]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008fe4:	f000 f880 	bl	80090e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fe8:	2100      	movs	r1, #0
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fd12 	bl	8009a14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ff0:	f000 f888 	bl	8009104 <xTaskResumeAll>
 8008ff4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d107      	bne.n	800900c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ffc:	4b06      	ldr	r3, [pc, #24]	; (8009018 <vTaskDelay+0x64>)
 8008ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800900c:	bf00      	nop
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	20000a18 	.word	0x20000a18
 8009018:	e000ed04 	.word	0xe000ed04

0800901c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b08a      	sub	sp, #40	; 0x28
 8009020:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009022:	2300      	movs	r3, #0
 8009024:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009026:	2300      	movs	r3, #0
 8009028:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800902a:	463a      	mov	r2, r7
 800902c:	1d39      	adds	r1, r7, #4
 800902e:	f107 0308 	add.w	r3, r7, #8
 8009032:	4618      	mov	r0, r3
 8009034:	f7f9 f86c 	bl	8002110 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	9202      	str	r2, [sp, #8]
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	2300      	movs	r3, #0
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	2300      	movs	r3, #0
 8009048:	460a      	mov	r2, r1
 800904a:	4921      	ldr	r1, [pc, #132]	; (80090d0 <vTaskStartScheduler+0xb4>)
 800904c:	4821      	ldr	r0, [pc, #132]	; (80090d4 <vTaskStartScheduler+0xb8>)
 800904e:	f7ff fe1f 	bl	8008c90 <xTaskCreateStatic>
 8009052:	4603      	mov	r3, r0
 8009054:	4a20      	ldr	r2, [pc, #128]	; (80090d8 <vTaskStartScheduler+0xbc>)
 8009056:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009058:	4b1f      	ldr	r3, [pc, #124]	; (80090d8 <vTaskStartScheduler+0xbc>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009060:	2301      	movs	r3, #1
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	e001      	b.n	800906a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009066:	2300      	movs	r3, #0
 8009068:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d102      	bne.n	8009076 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009070:	f000 fd36 	bl	8009ae0 <xTimerCreateTimerTask>
 8009074:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d116      	bne.n	80090aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	613b      	str	r3, [r7, #16]
}
 800908e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009090:	4b12      	ldr	r3, [pc, #72]	; (80090dc <vTaskStartScheduler+0xc0>)
 8009092:	f04f 32ff 	mov.w	r2, #4294967295
 8009096:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009098:	4b11      	ldr	r3, [pc, #68]	; (80090e0 <vTaskStartScheduler+0xc4>)
 800909a:	2201      	movs	r2, #1
 800909c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800909e:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <vTaskStartScheduler+0xc8>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090a4:	f001 f920 	bl	800a2e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090a8:	e00e      	b.n	80090c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b0:	d10a      	bne.n	80090c8 <vTaskStartScheduler+0xac>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	60fb      	str	r3, [r7, #12]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <vTaskStartScheduler+0xaa>
}
 80090c8:	bf00      	nop
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	0800e36c 	.word	0x0800e36c
 80090d4:	08009719 	.word	0x08009719
 80090d8:	20000a14 	.word	0x20000a14
 80090dc:	20000a10 	.word	0x20000a10
 80090e0:	200009fc 	.word	0x200009fc
 80090e4:	200009f4 	.word	0x200009f4

080090e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090e8:	b480      	push	{r7}
 80090ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80090ec:	4b04      	ldr	r3, [pc, #16]	; (8009100 <vTaskSuspendAll+0x18>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3301      	adds	r3, #1
 80090f2:	4a03      	ldr	r2, [pc, #12]	; (8009100 <vTaskSuspendAll+0x18>)
 80090f4:	6013      	str	r3, [r2, #0]
}
 80090f6:	bf00      	nop
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bc80      	pop	{r7}
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	20000a18 	.word	0x20000a18

08009104 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800910a:	2300      	movs	r3, #0
 800910c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800910e:	2300      	movs	r3, #0
 8009110:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009112:	4b41      	ldr	r3, [pc, #260]	; (8009218 <xTaskResumeAll+0x114>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10a      	bne.n	8009130 <xTaskResumeAll+0x2c>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	603b      	str	r3, [r7, #0]
}
 800912c:	bf00      	nop
 800912e:	e7fe      	b.n	800912e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009130:	f001 f94c 	bl	800a3cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009134:	4b38      	ldr	r3, [pc, #224]	; (8009218 <xTaskResumeAll+0x114>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3b01      	subs	r3, #1
 800913a:	4a37      	ldr	r2, [pc, #220]	; (8009218 <xTaskResumeAll+0x114>)
 800913c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800913e:	4b36      	ldr	r3, [pc, #216]	; (8009218 <xTaskResumeAll+0x114>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d161      	bne.n	800920a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009146:	4b35      	ldr	r3, [pc, #212]	; (800921c <xTaskResumeAll+0x118>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d05d      	beq.n	800920a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800914e:	e02e      	b.n	80091ae <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009150:	4b33      	ldr	r3, [pc, #204]	; (8009220 <xTaskResumeAll+0x11c>)
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3318      	adds	r3, #24
 800915c:	4618      	mov	r0, r3
 800915e:	f7ff f88d 	bl	800827c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3304      	adds	r3, #4
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff f888 	bl	800827c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009170:	2201      	movs	r2, #1
 8009172:	409a      	lsls	r2, r3
 8009174:	4b2b      	ldr	r3, [pc, #172]	; (8009224 <xTaskResumeAll+0x120>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4313      	orrs	r3, r2
 800917a:	4a2a      	ldr	r2, [pc, #168]	; (8009224 <xTaskResumeAll+0x120>)
 800917c:	6013      	str	r3, [r2, #0]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009182:	4613      	mov	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4a27      	ldr	r2, [pc, #156]	; (8009228 <xTaskResumeAll+0x124>)
 800918c:	441a      	add	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3304      	adds	r3, #4
 8009192:	4619      	mov	r1, r3
 8009194:	4610      	mov	r0, r2
 8009196:	f7ff f816 	bl	80081c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919e:	4b23      	ldr	r3, [pc, #140]	; (800922c <xTaskResumeAll+0x128>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d302      	bcc.n	80091ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80091a8:	4b21      	ldr	r3, [pc, #132]	; (8009230 <xTaskResumeAll+0x12c>)
 80091aa:	2201      	movs	r2, #1
 80091ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091ae:	4b1c      	ldr	r3, [pc, #112]	; (8009220 <xTaskResumeAll+0x11c>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1cc      	bne.n	8009150 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091bc:	f000 fb62 	bl	8009884 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80091c0:	4b1c      	ldr	r3, [pc, #112]	; (8009234 <xTaskResumeAll+0x130>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d010      	beq.n	80091ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091cc:	f000 f856 	bl	800927c <xTaskIncrementTick>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80091d6:	4b16      	ldr	r3, [pc, #88]	; (8009230 <xTaskResumeAll+0x12c>)
 80091d8:	2201      	movs	r2, #1
 80091da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3b01      	subs	r3, #1
 80091e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1f1      	bne.n	80091cc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80091e8:	4b12      	ldr	r3, [pc, #72]	; (8009234 <xTaskResumeAll+0x130>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091ee:	4b10      	ldr	r3, [pc, #64]	; (8009230 <xTaskResumeAll+0x12c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d009      	beq.n	800920a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091f6:	2301      	movs	r3, #1
 80091f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091fa:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <xTaskResumeAll+0x134>)
 80091fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800920a:	f001 f90f 	bl	800a42c <vPortExitCritical>

	return xAlreadyYielded;
 800920e:	68bb      	ldr	r3, [r7, #8]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	20000a18 	.word	0x20000a18
 800921c:	200009f0 	.word	0x200009f0
 8009220:	200009b0 	.word	0x200009b0
 8009224:	200009f8 	.word	0x200009f8
 8009228:	200008f4 	.word	0x200008f4
 800922c:	200008f0 	.word	0x200008f0
 8009230:	20000a04 	.word	0x20000a04
 8009234:	20000a00 	.word	0x20000a00
 8009238:	e000ed04 	.word	0xe000ed04

0800923c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009242:	4b04      	ldr	r3, [pc, #16]	; (8009254 <xTaskGetTickCount+0x18>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009248:	687b      	ldr	r3, [r7, #4]
}
 800924a:	4618      	mov	r0, r3
 800924c:	370c      	adds	r7, #12
 800924e:	46bd      	mov	sp, r7
 8009250:	bc80      	pop	{r7}
 8009252:	4770      	bx	lr
 8009254:	200009f4 	.word	0x200009f4

08009258 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800925e:	f001 f977 	bl	800a550 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009262:	2300      	movs	r3, #0
 8009264:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009266:	4b04      	ldr	r3, [pc, #16]	; (8009278 <xTaskGetTickCountFromISR+0x20>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800926c:	683b      	ldr	r3, [r7, #0]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	200009f4 	.word	0x200009f4

0800927c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009282:	2300      	movs	r3, #0
 8009284:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009286:	4b51      	ldr	r3, [pc, #324]	; (80093cc <xTaskIncrementTick+0x150>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	f040 808d 	bne.w	80093aa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009290:	4b4f      	ldr	r3, [pc, #316]	; (80093d0 <xTaskIncrementTick+0x154>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3301      	adds	r3, #1
 8009296:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009298:	4a4d      	ldr	r2, [pc, #308]	; (80093d0 <xTaskIncrementTick+0x154>)
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d120      	bne.n	80092e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80092a4:	4b4b      	ldr	r3, [pc, #300]	; (80093d4 <xTaskIncrementTick+0x158>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	603b      	str	r3, [r7, #0]
}
 80092c0:	bf00      	nop
 80092c2:	e7fe      	b.n	80092c2 <xTaskIncrementTick+0x46>
 80092c4:	4b43      	ldr	r3, [pc, #268]	; (80093d4 <xTaskIncrementTick+0x158>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60fb      	str	r3, [r7, #12]
 80092ca:	4b43      	ldr	r3, [pc, #268]	; (80093d8 <xTaskIncrementTick+0x15c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a41      	ldr	r2, [pc, #260]	; (80093d4 <xTaskIncrementTick+0x158>)
 80092d0:	6013      	str	r3, [r2, #0]
 80092d2:	4a41      	ldr	r2, [pc, #260]	; (80093d8 <xTaskIncrementTick+0x15c>)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	4b40      	ldr	r3, [pc, #256]	; (80093dc <xTaskIncrementTick+0x160>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3301      	adds	r3, #1
 80092de:	4a3f      	ldr	r2, [pc, #252]	; (80093dc <xTaskIncrementTick+0x160>)
 80092e0:	6013      	str	r3, [r2, #0]
 80092e2:	f000 facf 	bl	8009884 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092e6:	4b3e      	ldr	r3, [pc, #248]	; (80093e0 <xTaskIncrementTick+0x164>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d34d      	bcc.n	800938c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092f0:	4b38      	ldr	r3, [pc, #224]	; (80093d4 <xTaskIncrementTick+0x158>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <xTaskIncrementTick+0x82>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e000      	b.n	8009300 <xTaskIncrementTick+0x84>
 80092fe:	2300      	movs	r3, #0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d004      	beq.n	800930e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009304:	4b36      	ldr	r3, [pc, #216]	; (80093e0 <xTaskIncrementTick+0x164>)
 8009306:	f04f 32ff 	mov.w	r2, #4294967295
 800930a:	601a      	str	r2, [r3, #0]
					break;
 800930c:	e03e      	b.n	800938c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800930e:	4b31      	ldr	r3, [pc, #196]	; (80093d4 <xTaskIncrementTick+0x158>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	429a      	cmp	r2, r3
 8009324:	d203      	bcs.n	800932e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009326:	4a2e      	ldr	r2, [pc, #184]	; (80093e0 <xTaskIncrementTick+0x164>)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6013      	str	r3, [r2, #0]
						break;
 800932c:	e02e      	b.n	800938c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	3304      	adds	r3, #4
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe ffa2 	bl	800827c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933c:	2b00      	cmp	r3, #0
 800933e:	d004      	beq.n	800934a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	3318      	adds	r3, #24
 8009344:	4618      	mov	r0, r3
 8009346:	f7fe ff99 	bl	800827c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	2201      	movs	r2, #1
 8009350:	409a      	lsls	r2, r3
 8009352:	4b24      	ldr	r3, [pc, #144]	; (80093e4 <xTaskIncrementTick+0x168>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4313      	orrs	r3, r2
 8009358:	4a22      	ldr	r2, [pc, #136]	; (80093e4 <xTaskIncrementTick+0x168>)
 800935a:	6013      	str	r3, [r2, #0]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009360:	4613      	mov	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4a1f      	ldr	r2, [pc, #124]	; (80093e8 <xTaskIncrementTick+0x16c>)
 800936a:	441a      	add	r2, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	3304      	adds	r3, #4
 8009370:	4619      	mov	r1, r3
 8009372:	4610      	mov	r0, r2
 8009374:	f7fe ff27 	bl	80081c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937c:	4b1b      	ldr	r3, [pc, #108]	; (80093ec <xTaskIncrementTick+0x170>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009382:	429a      	cmp	r2, r3
 8009384:	d3b4      	bcc.n	80092f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009386:	2301      	movs	r3, #1
 8009388:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800938a:	e7b1      	b.n	80092f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800938c:	4b17      	ldr	r3, [pc, #92]	; (80093ec <xTaskIncrementTick+0x170>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009392:	4915      	ldr	r1, [pc, #84]	; (80093e8 <xTaskIncrementTick+0x16c>)
 8009394:	4613      	mov	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	440b      	add	r3, r1
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d907      	bls.n	80093b4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80093a4:	2301      	movs	r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
 80093a8:	e004      	b.n	80093b4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80093aa:	4b11      	ldr	r3, [pc, #68]	; (80093f0 <xTaskIncrementTick+0x174>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	3301      	adds	r3, #1
 80093b0:	4a0f      	ldr	r2, [pc, #60]	; (80093f0 <xTaskIncrementTick+0x174>)
 80093b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80093b4:	4b0f      	ldr	r3, [pc, #60]	; (80093f4 <xTaskIncrementTick+0x178>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80093bc:	2301      	movs	r3, #1
 80093be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80093c0:	697b      	ldr	r3, [r7, #20]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20000a18 	.word	0x20000a18
 80093d0:	200009f4 	.word	0x200009f4
 80093d4:	200009a8 	.word	0x200009a8
 80093d8:	200009ac 	.word	0x200009ac
 80093dc:	20000a08 	.word	0x20000a08
 80093e0:	20000a10 	.word	0x20000a10
 80093e4:	200009f8 	.word	0x200009f8
 80093e8:	200008f4 	.word	0x200008f4
 80093ec:	200008f0 	.word	0x200008f0
 80093f0:	20000a00 	.word	0x20000a00
 80093f4:	20000a04 	.word	0x20000a04

080093f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093fe:	4b26      	ldr	r3, [pc, #152]	; (8009498 <vTaskSwitchContext+0xa0>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d003      	beq.n	800940e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009406:	4b25      	ldr	r3, [pc, #148]	; (800949c <vTaskSwitchContext+0xa4>)
 8009408:	2201      	movs	r2, #1
 800940a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800940c:	e03f      	b.n	800948e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800940e:	4b23      	ldr	r3, [pc, #140]	; (800949c <vTaskSwitchContext+0xa4>)
 8009410:	2200      	movs	r2, #0
 8009412:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009414:	4b22      	ldr	r3, [pc, #136]	; (80094a0 <vTaskSwitchContext+0xa8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	fab3 f383 	clz	r3, r3
 8009420:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009422:	7afb      	ldrb	r3, [r7, #11]
 8009424:	f1c3 031f 	rsb	r3, r3, #31
 8009428:	617b      	str	r3, [r7, #20]
 800942a:	491e      	ldr	r1, [pc, #120]	; (80094a4 <vTaskSwitchContext+0xac>)
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	4613      	mov	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	440b      	add	r3, r1
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10a      	bne.n	8009454 <vTaskSwitchContext+0x5c>
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	607b      	str	r3, [r7, #4]
}
 8009450:	bf00      	nop
 8009452:	e7fe      	b.n	8009452 <vTaskSwitchContext+0x5a>
 8009454:	697a      	ldr	r2, [r7, #20]
 8009456:	4613      	mov	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4a11      	ldr	r2, [pc, #68]	; (80094a4 <vTaskSwitchContext+0xac>)
 8009460:	4413      	add	r3, r2
 8009462:	613b      	str	r3, [r7, #16]
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	605a      	str	r2, [r3, #4]
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	685a      	ldr	r2, [r3, #4]
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	3308      	adds	r3, #8
 8009476:	429a      	cmp	r2, r3
 8009478:	d104      	bne.n	8009484 <vTaskSwitchContext+0x8c>
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	605a      	str	r2, [r3, #4]
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	4a07      	ldr	r2, [pc, #28]	; (80094a8 <vTaskSwitchContext+0xb0>)
 800948c:	6013      	str	r3, [r2, #0]
}
 800948e:	bf00      	nop
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	bc80      	pop	{r7}
 8009496:	4770      	bx	lr
 8009498:	20000a18 	.word	0x20000a18
 800949c:	20000a04 	.word	0x20000a04
 80094a0:	200009f8 	.word	0x200009f8
 80094a4:	200008f4 	.word	0x200008f4
 80094a8:	200008f0 	.word	0x200008f0

080094ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10a      	bne.n	80094d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	60fb      	str	r3, [r7, #12]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094d2:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <vTaskPlaceOnEventList+0x44>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3318      	adds	r3, #24
 80094d8:	4619      	mov	r1, r3
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7fe fe96 	bl	800820c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094e0:	2101      	movs	r1, #1
 80094e2:	6838      	ldr	r0, [r7, #0]
 80094e4:	f000 fa96 	bl	8009a14 <prvAddCurrentTaskToDelayedList>
}
 80094e8:	bf00      	nop
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	200008f0 	.word	0x200008f0

080094f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10a      	bne.n	800951c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	617b      	str	r3, [r7, #20]
}
 8009518:	bf00      	nop
 800951a:	e7fe      	b.n	800951a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800951c:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <vTaskPlaceOnEventListRestricted+0x54>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3318      	adds	r3, #24
 8009522:	4619      	mov	r1, r3
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f7fe fe4e 	bl	80081c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009530:	f04f 33ff 	mov.w	r3, #4294967295
 8009534:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009536:	6879      	ldr	r1, [r7, #4]
 8009538:	68b8      	ldr	r0, [r7, #8]
 800953a:	f000 fa6b 	bl	8009a14 <prvAddCurrentTaskToDelayedList>
	}
 800953e:	bf00      	nop
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	200008f0 	.word	0x200008f0

0800954c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10a      	bne.n	8009578 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	60fb      	str	r3, [r7, #12]
}
 8009574:	bf00      	nop
 8009576:	e7fe      	b.n	8009576 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	3318      	adds	r3, #24
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe fe7d 	bl	800827c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009582:	4b1d      	ldr	r3, [pc, #116]	; (80095f8 <xTaskRemoveFromEventList+0xac>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d11c      	bne.n	80095c4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	3304      	adds	r3, #4
 800958e:	4618      	mov	r0, r3
 8009590:	f7fe fe74 	bl	800827c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	2201      	movs	r2, #1
 800959a:	409a      	lsls	r2, r3
 800959c:	4b17      	ldr	r3, [pc, #92]	; (80095fc <xTaskRemoveFromEventList+0xb0>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	4a16      	ldr	r2, [pc, #88]	; (80095fc <xTaskRemoveFromEventList+0xb0>)
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4a13      	ldr	r2, [pc, #76]	; (8009600 <xTaskRemoveFromEventList+0xb4>)
 80095b4:	441a      	add	r2, r3
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	3304      	adds	r3, #4
 80095ba:	4619      	mov	r1, r3
 80095bc:	4610      	mov	r0, r2
 80095be:	f7fe fe02 	bl	80081c6 <vListInsertEnd>
 80095c2:	e005      	b.n	80095d0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	3318      	adds	r3, #24
 80095c8:	4619      	mov	r1, r3
 80095ca:	480e      	ldr	r0, [pc, #56]	; (8009604 <xTaskRemoveFromEventList+0xb8>)
 80095cc:	f7fe fdfb 	bl	80081c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d4:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <xTaskRemoveFromEventList+0xbc>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095da:	429a      	cmp	r2, r3
 80095dc:	d905      	bls.n	80095ea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80095de:	2301      	movs	r3, #1
 80095e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80095e2:	4b0a      	ldr	r3, [pc, #40]	; (800960c <xTaskRemoveFromEventList+0xc0>)
 80095e4:	2201      	movs	r2, #1
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	e001      	b.n	80095ee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80095ee:	697b      	ldr	r3, [r7, #20]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3718      	adds	r7, #24
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	20000a18 	.word	0x20000a18
 80095fc:	200009f8 	.word	0x200009f8
 8009600:	200008f4 	.word	0x200008f4
 8009604:	200009b0 	.word	0x200009b0
 8009608:	200008f0 	.word	0x200008f0
 800960c:	20000a04 	.word	0x20000a04

08009610 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009618:	4b06      	ldr	r3, [pc, #24]	; (8009634 <vTaskInternalSetTimeOutState+0x24>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009620:	4b05      	ldr	r3, [pc, #20]	; (8009638 <vTaskInternalSetTimeOutState+0x28>)
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	605a      	str	r2, [r3, #4]
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	bc80      	pop	{r7}
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	20000a08 	.word	0x20000a08
 8009638:	200009f4 	.word	0x200009f4

0800963c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10a      	bne.n	8009662 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	613b      	str	r3, [r7, #16]
}
 800965e:	bf00      	nop
 8009660:	e7fe      	b.n	8009660 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	60fb      	str	r3, [r7, #12]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800967e:	f000 fea5 	bl	800a3cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009682:	4b1d      	ldr	r3, [pc, #116]	; (80096f8 <xTaskCheckForTimeOut+0xbc>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969a:	d102      	bne.n	80096a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800969c:	2300      	movs	r3, #0
 800969e:	61fb      	str	r3, [r7, #28]
 80096a0:	e023      	b.n	80096ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	4b15      	ldr	r3, [pc, #84]	; (80096fc <xTaskCheckForTimeOut+0xc0>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d007      	beq.n	80096be <xTaskCheckForTimeOut+0x82>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d302      	bcc.n	80096be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80096b8:	2301      	movs	r3, #1
 80096ba:	61fb      	str	r3, [r7, #28]
 80096bc:	e015      	b.n	80096ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d20b      	bcs.n	80096e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	1ad2      	subs	r2, r2, r3
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff ff9b 	bl	8009610 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096da:	2300      	movs	r3, #0
 80096dc:	61fb      	str	r3, [r7, #28]
 80096de:	e004      	b.n	80096ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80096e6:	2301      	movs	r3, #1
 80096e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80096ea:	f000 fe9f 	bl	800a42c <vPortExitCritical>

	return xReturn;
 80096ee:	69fb      	ldr	r3, [r7, #28]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3720      	adds	r7, #32
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	200009f4 	.word	0x200009f4
 80096fc:	20000a08 	.word	0x20000a08

08009700 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009700:	b480      	push	{r7}
 8009702:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009704:	4b03      	ldr	r3, [pc, #12]	; (8009714 <vTaskMissedYield+0x14>)
 8009706:	2201      	movs	r2, #1
 8009708:	601a      	str	r2, [r3, #0]
}
 800970a:	bf00      	nop
 800970c:	46bd      	mov	sp, r7
 800970e:	bc80      	pop	{r7}
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	20000a04 	.word	0x20000a04

08009718 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009720:	f000 f852 	bl	80097c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009724:	4b06      	ldr	r3, [pc, #24]	; (8009740 <prvIdleTask+0x28>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d9f9      	bls.n	8009720 <prvIdleTask+0x8>
			{
				taskYIELD();
 800972c:	4b05      	ldr	r3, [pc, #20]	; (8009744 <prvIdleTask+0x2c>)
 800972e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800973c:	e7f0      	b.n	8009720 <prvIdleTask+0x8>
 800973e:	bf00      	nop
 8009740:	200008f4 	.word	0x200008f4
 8009744:	e000ed04 	.word	0xe000ed04

08009748 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800974e:	2300      	movs	r3, #0
 8009750:	607b      	str	r3, [r7, #4]
 8009752:	e00c      	b.n	800976e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	4613      	mov	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4a12      	ldr	r2, [pc, #72]	; (80097a8 <prvInitialiseTaskLists+0x60>)
 8009760:	4413      	add	r3, r2
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe fd04 	bl	8008170 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3301      	adds	r3, #1
 800976c:	607b      	str	r3, [r7, #4]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b06      	cmp	r3, #6
 8009772:	d9ef      	bls.n	8009754 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009774:	480d      	ldr	r0, [pc, #52]	; (80097ac <prvInitialiseTaskLists+0x64>)
 8009776:	f7fe fcfb 	bl	8008170 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800977a:	480d      	ldr	r0, [pc, #52]	; (80097b0 <prvInitialiseTaskLists+0x68>)
 800977c:	f7fe fcf8 	bl	8008170 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009780:	480c      	ldr	r0, [pc, #48]	; (80097b4 <prvInitialiseTaskLists+0x6c>)
 8009782:	f7fe fcf5 	bl	8008170 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009786:	480c      	ldr	r0, [pc, #48]	; (80097b8 <prvInitialiseTaskLists+0x70>)
 8009788:	f7fe fcf2 	bl	8008170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800978c:	480b      	ldr	r0, [pc, #44]	; (80097bc <prvInitialiseTaskLists+0x74>)
 800978e:	f7fe fcef 	bl	8008170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009792:	4b0b      	ldr	r3, [pc, #44]	; (80097c0 <prvInitialiseTaskLists+0x78>)
 8009794:	4a05      	ldr	r2, [pc, #20]	; (80097ac <prvInitialiseTaskLists+0x64>)
 8009796:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009798:	4b0a      	ldr	r3, [pc, #40]	; (80097c4 <prvInitialiseTaskLists+0x7c>)
 800979a:	4a05      	ldr	r2, [pc, #20]	; (80097b0 <prvInitialiseTaskLists+0x68>)
 800979c:	601a      	str	r2, [r3, #0]
}
 800979e:	bf00      	nop
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	200008f4 	.word	0x200008f4
 80097ac:	20000980 	.word	0x20000980
 80097b0:	20000994 	.word	0x20000994
 80097b4:	200009b0 	.word	0x200009b0
 80097b8:	200009c4 	.word	0x200009c4
 80097bc:	200009dc 	.word	0x200009dc
 80097c0:	200009a8 	.word	0x200009a8
 80097c4:	200009ac 	.word	0x200009ac

080097c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097ce:	e019      	b.n	8009804 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80097d0:	f000 fdfc 	bl	800a3cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80097d4:	4b10      	ldr	r3, [pc, #64]	; (8009818 <prvCheckTasksWaitingTermination+0x50>)
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3304      	adds	r3, #4
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fe fd4b 	bl	800827c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097e6:	4b0d      	ldr	r3, [pc, #52]	; (800981c <prvCheckTasksWaitingTermination+0x54>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	4a0b      	ldr	r2, [pc, #44]	; (800981c <prvCheckTasksWaitingTermination+0x54>)
 80097ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097f0:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <prvCheckTasksWaitingTermination+0x58>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	3b01      	subs	r3, #1
 80097f6:	4a0a      	ldr	r2, [pc, #40]	; (8009820 <prvCheckTasksWaitingTermination+0x58>)
 80097f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097fa:	f000 fe17 	bl	800a42c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f810 	bl	8009824 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009804:	4b06      	ldr	r3, [pc, #24]	; (8009820 <prvCheckTasksWaitingTermination+0x58>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e1      	bne.n	80097d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800980c:	bf00      	nop
 800980e:	bf00      	nop
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	200009c4 	.word	0x200009c4
 800981c:	200009f0 	.word	0x200009f0
 8009820:	200009d8 	.word	0x200009d8

08009824 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009832:	2b00      	cmp	r3, #0
 8009834:	d108      	bne.n	8009848 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983a:	4618      	mov	r0, r3
 800983c:	f000 ff8a 	bl	800a754 <vPortFree>
				vPortFree( pxTCB );
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 ff87 	bl	800a754 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009846:	e018      	b.n	800987a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800984e:	2b01      	cmp	r3, #1
 8009850:	d103      	bne.n	800985a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 ff7e 	bl	800a754 <vPortFree>
	}
 8009858:	e00f      	b.n	800987a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009860:	2b02      	cmp	r3, #2
 8009862:	d00a      	beq.n	800987a <prvDeleteTCB+0x56>
	__asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	60fb      	str	r3, [r7, #12]
}
 8009876:	bf00      	nop
 8009878:	e7fe      	b.n	8009878 <prvDeleteTCB+0x54>
	}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800988a:	4b0e      	ldr	r3, [pc, #56]	; (80098c4 <prvResetNextTaskUnblockTime+0x40>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d101      	bne.n	8009898 <prvResetNextTaskUnblockTime+0x14>
 8009894:	2301      	movs	r3, #1
 8009896:	e000      	b.n	800989a <prvResetNextTaskUnblockTime+0x16>
 8009898:	2300      	movs	r3, #0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d004      	beq.n	80098a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800989e:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <prvResetNextTaskUnblockTime+0x44>)
 80098a0:	f04f 32ff 	mov.w	r2, #4294967295
 80098a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80098a6:	e008      	b.n	80098ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80098a8:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <prvResetNextTaskUnblockTime+0x40>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	4a04      	ldr	r2, [pc, #16]	; (80098c8 <prvResetNextTaskUnblockTime+0x44>)
 80098b8:	6013      	str	r3, [r2, #0]
}
 80098ba:	bf00      	nop
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	bc80      	pop	{r7}
 80098c2:	4770      	bx	lr
 80098c4:	200009a8 	.word	0x200009a8
 80098c8:	20000a10 	.word	0x20000a10

080098cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098d2:	4b0b      	ldr	r3, [pc, #44]	; (8009900 <xTaskGetSchedulerState+0x34>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d102      	bne.n	80098e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098da:	2301      	movs	r3, #1
 80098dc:	607b      	str	r3, [r7, #4]
 80098de:	e008      	b.n	80098f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098e0:	4b08      	ldr	r3, [pc, #32]	; (8009904 <xTaskGetSchedulerState+0x38>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d102      	bne.n	80098ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098e8:	2302      	movs	r3, #2
 80098ea:	607b      	str	r3, [r7, #4]
 80098ec:	e001      	b.n	80098f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098ee:	2300      	movs	r3, #0
 80098f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098f2:	687b      	ldr	r3, [r7, #4]
	}
 80098f4:	4618      	mov	r0, r3
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bc80      	pop	{r7}
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	200009fc 	.word	0x200009fc
 8009904:	20000a18 	.word	0x20000a18

08009908 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009914:	2300      	movs	r3, #0
 8009916:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d06e      	beq.n	80099fc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800991e:	4b3a      	ldr	r3, [pc, #232]	; (8009a08 <xTaskPriorityDisinherit+0x100>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	429a      	cmp	r2, r3
 8009926:	d00a      	beq.n	800993e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	60fb      	str	r3, [r7, #12]
}
 800993a:	bf00      	nop
 800993c:	e7fe      	b.n	800993c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10a      	bne.n	800995c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	60bb      	str	r3, [r7, #8]
}
 8009958:	bf00      	nop
 800995a:	e7fe      	b.n	800995a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009960:	1e5a      	subs	r2, r3, #1
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800996e:	429a      	cmp	r2, r3
 8009970:	d044      	beq.n	80099fc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009976:	2b00      	cmp	r3, #0
 8009978:	d140      	bne.n	80099fc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	3304      	adds	r3, #4
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe fc7c 	bl	800827c <uxListRemove>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d115      	bne.n	80099b6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800998e:	491f      	ldr	r1, [pc, #124]	; (8009a0c <xTaskPriorityDisinherit+0x104>)
 8009990:	4613      	mov	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	440b      	add	r3, r1
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10a      	bne.n	80099b6 <xTaskPriorityDisinherit+0xae>
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	2201      	movs	r2, #1
 80099a6:	fa02 f303 	lsl.w	r3, r2, r3
 80099aa:	43da      	mvns	r2, r3
 80099ac:	4b18      	ldr	r3, [pc, #96]	; (8009a10 <xTaskPriorityDisinherit+0x108>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4013      	ands	r3, r2
 80099b2:	4a17      	ldr	r2, [pc, #92]	; (8009a10 <xTaskPriorityDisinherit+0x108>)
 80099b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c2:	f1c3 0207 	rsb	r2, r3, #7
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ce:	2201      	movs	r2, #1
 80099d0:	409a      	lsls	r2, r3
 80099d2:	4b0f      	ldr	r3, [pc, #60]	; (8009a10 <xTaskPriorityDisinherit+0x108>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	4a0d      	ldr	r2, [pc, #52]	; (8009a10 <xTaskPriorityDisinherit+0x108>)
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e0:	4613      	mov	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4a08      	ldr	r2, [pc, #32]	; (8009a0c <xTaskPriorityDisinherit+0x104>)
 80099ea:	441a      	add	r2, r3
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	3304      	adds	r3, #4
 80099f0:	4619      	mov	r1, r3
 80099f2:	4610      	mov	r0, r2
 80099f4:	f7fe fbe7 	bl	80081c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099f8:	2301      	movs	r3, #1
 80099fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099fc:	697b      	ldr	r3, [r7, #20]
	}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	200008f0 	.word	0x200008f0
 8009a0c:	200008f4 	.word	0x200008f4
 8009a10:	200009f8 	.word	0x200009f8

08009a14 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a1e:	4b29      	ldr	r3, [pc, #164]	; (8009ac4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a24:	4b28      	ldr	r3, [pc, #160]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fc26 	bl	800827c <uxListRemove>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10b      	bne.n	8009a4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009a36:	4b24      	ldr	r3, [pc, #144]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a42:	43da      	mvns	r2, r3
 8009a44:	4b21      	ldr	r3, [pc, #132]	; (8009acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4013      	ands	r3, r2
 8009a4a:	4a20      	ldr	r2, [pc, #128]	; (8009acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a54:	d10a      	bne.n	8009a6c <prvAddCurrentTaskToDelayedList+0x58>
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d007      	beq.n	8009a6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a5c:	4b1a      	ldr	r3, [pc, #104]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3304      	adds	r3, #4
 8009a62:	4619      	mov	r1, r3
 8009a64:	481a      	ldr	r0, [pc, #104]	; (8009ad0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009a66:	f7fe fbae 	bl	80081c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a6a:	e026      	b.n	8009aba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4413      	add	r3, r2
 8009a72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a74:	4b14      	ldr	r3, [pc, #80]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d209      	bcs.n	8009a98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a84:	4b13      	ldr	r3, [pc, #76]	; (8009ad4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	4619      	mov	r1, r3
 8009a90:	4610      	mov	r0, r2
 8009a92:	f7fe fbbb 	bl	800820c <vListInsert>
}
 8009a96:	e010      	b.n	8009aba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a98:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7fe fbb1 	bl	800820c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009aaa:	4b0c      	ldr	r3, [pc, #48]	; (8009adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d202      	bcs.n	8009aba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009ab4:	4a09      	ldr	r2, [pc, #36]	; (8009adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	6013      	str	r3, [r2, #0]
}
 8009aba:	bf00      	nop
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	200009f4 	.word	0x200009f4
 8009ac8:	200008f0 	.word	0x200008f0
 8009acc:	200009f8 	.word	0x200009f8
 8009ad0:	200009dc 	.word	0x200009dc
 8009ad4:	200009ac 	.word	0x200009ac
 8009ad8:	200009a8 	.word	0x200009a8
 8009adc:	20000a10 	.word	0x20000a10

08009ae0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b08a      	sub	sp, #40	; 0x28
 8009ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009aea:	f000 fb41 	bl	800a170 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009aee:	4b1c      	ldr	r3, [pc, #112]	; (8009b60 <xTimerCreateTimerTask+0x80>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d021      	beq.n	8009b3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009afa:	2300      	movs	r3, #0
 8009afc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009afe:	1d3a      	adds	r2, r7, #4
 8009b00:	f107 0108 	add.w	r1, r7, #8
 8009b04:	f107 030c 	add.w	r3, r7, #12
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7f8 fb19 	bl	8002140 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	9202      	str	r2, [sp, #8]
 8009b16:	9301      	str	r3, [sp, #4]
 8009b18:	2302      	movs	r3, #2
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	460a      	mov	r2, r1
 8009b20:	4910      	ldr	r1, [pc, #64]	; (8009b64 <xTimerCreateTimerTask+0x84>)
 8009b22:	4811      	ldr	r0, [pc, #68]	; (8009b68 <xTimerCreateTimerTask+0x88>)
 8009b24:	f7ff f8b4 	bl	8008c90 <xTaskCreateStatic>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	4a10      	ldr	r2, [pc, #64]	; (8009b6c <xTimerCreateTimerTask+0x8c>)
 8009b2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b2e:	4b0f      	ldr	r3, [pc, #60]	; (8009b6c <xTimerCreateTimerTask+0x8c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b36:	2301      	movs	r3, #1
 8009b38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10a      	bne.n	8009b56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	613b      	str	r3, [r7, #16]
}
 8009b52:	bf00      	nop
 8009b54:	e7fe      	b.n	8009b54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b56:	697b      	ldr	r3, [r7, #20]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	20000a4c 	.word	0x20000a4c
 8009b64:	0800e374 	.word	0x0800e374
 8009b68:	08009dad 	.word	0x08009dad
 8009b6c:	20000a50 	.word	0x20000a50

08009b70 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b088      	sub	sp, #32
 8009b74:	af02      	add	r7, sp, #8
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009b7e:	202c      	movs	r0, #44	; 0x2c
 8009b80:	f000 fd24 	bl	800a5cc <pvPortMalloc>
 8009b84:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00d      	beq.n	8009ba8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	9301      	str	r3, [sp, #4]
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	68b9      	ldr	r1, [r7, #8]
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 f846 	bl	8009c2c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009ba8:	697b      	ldr	r3, [r7, #20]
	}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3718      	adds	r7, #24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b08a      	sub	sp, #40	; 0x28
 8009bb6:	af02      	add	r7, sp, #8
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	60b9      	str	r1, [r7, #8]
 8009bbc:	607a      	str	r2, [r7, #4]
 8009bbe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009bc0:	232c      	movs	r3, #44	; 0x2c
 8009bc2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	2b2c      	cmp	r3, #44	; 0x2c
 8009bc8:	d00a      	beq.n	8009be0 <xTimerCreateStatic+0x2e>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	61bb      	str	r3, [r7, #24]
}
 8009bdc:	bf00      	nop
 8009bde:	e7fe      	b.n	8009bde <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10a      	bne.n	8009bfc <xTimerCreateStatic+0x4a>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	617b      	str	r3, [r7, #20]
}
 8009bf8:	bf00      	nop
 8009bfa:	e7fe      	b.n	8009bfa <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfe:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00d      	beq.n	8009c22 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	9301      	str	r3, [sp, #4]
 8009c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	68b9      	ldr	r1, [r7, #8]
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f000 f809 	bl	8009c2c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8009c22:	69fb      	ldr	r3, [r7, #28]
	}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3720      	adds	r7, #32
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10a      	bne.n	8009c56 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	617b      	str	r3, [r7, #20]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d015      	beq.n	8009c88 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009c5c:	f000 fa88 	bl	800a170 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7a:	6a3a      	ldr	r2, [r7, #32]
 8009c7c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	3304      	adds	r3, #4
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fe fa93 	bl	80081ae <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009c88:	bf00      	nop
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08a      	sub	sp, #40	; 0x28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10a      	bne.n	8009cbe <xTimerGenericCommand+0x2e>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	623b      	str	r3, [r7, #32]
}
 8009cba:	bf00      	nop
 8009cbc:	e7fe      	b.n	8009cbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009cbe:	4b1a      	ldr	r3, [pc, #104]	; (8009d28 <xTimerGenericCommand+0x98>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d02a      	beq.n	8009d1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2b05      	cmp	r3, #5
 8009cd6:	dc18      	bgt.n	8009d0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009cd8:	f7ff fdf8 	bl	80098cc <xTaskGetSchedulerState>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d109      	bne.n	8009cf6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ce2:	4b11      	ldr	r3, [pc, #68]	; (8009d28 <xTimerGenericCommand+0x98>)
 8009ce4:	6818      	ldr	r0, [r3, #0]
 8009ce6:	f107 0114 	add.w	r1, r7, #20
 8009cea:	2300      	movs	r3, #0
 8009cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cee:	f7fe fbed 	bl	80084cc <xQueueGenericSend>
 8009cf2:	6278      	str	r0, [r7, #36]	; 0x24
 8009cf4:	e012      	b.n	8009d1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009cf6:	4b0c      	ldr	r3, [pc, #48]	; (8009d28 <xTimerGenericCommand+0x98>)
 8009cf8:	6818      	ldr	r0, [r3, #0]
 8009cfa:	f107 0114 	add.w	r1, r7, #20
 8009cfe:	2300      	movs	r3, #0
 8009d00:	2200      	movs	r2, #0
 8009d02:	f7fe fbe3 	bl	80084cc <xQueueGenericSend>
 8009d06:	6278      	str	r0, [r7, #36]	; 0x24
 8009d08:	e008      	b.n	8009d1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d0a:	4b07      	ldr	r3, [pc, #28]	; (8009d28 <xTimerGenericCommand+0x98>)
 8009d0c:	6818      	ldr	r0, [r3, #0]
 8009d0e:	f107 0114 	add.w	r1, r7, #20
 8009d12:	2300      	movs	r3, #0
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	f7fe fcd7 	bl	80086c8 <xQueueGenericSendFromISR>
 8009d1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3728      	adds	r7, #40	; 0x28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20000a4c 	.word	0x20000a4c

08009d2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b088      	sub	sp, #32
 8009d30:	af02      	add	r7, sp, #8
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d36:	4b1c      	ldr	r3, [pc, #112]	; (8009da8 <prvProcessExpiredTimer+0x7c>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	3304      	adds	r3, #4
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fe fa99 	bl	800827c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d122      	bne.n	8009d98 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	699a      	ldr	r2, [r3, #24]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	18d1      	adds	r1, r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	6978      	ldr	r0, [r7, #20]
 8009d60:	f000 f8c8 	bl	8009ef4 <prvInsertTimerInActiveList>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d016      	beq.n	8009d98 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	2100      	movs	r1, #0
 8009d74:	6978      	ldr	r0, [r7, #20]
 8009d76:	f7ff ff8b 	bl	8009c90 <xTimerGenericCommand>
 8009d7a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10a      	bne.n	8009d98 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	60fb      	str	r3, [r7, #12]
}
 8009d94:	bf00      	nop
 8009d96:	e7fe      	b.n	8009d96 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9c:	6978      	ldr	r0, [r7, #20]
 8009d9e:	4798      	blx	r3
}
 8009da0:	bf00      	nop
 8009da2:	3718      	adds	r7, #24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	20000a44 	.word	0x20000a44

08009dac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009db4:	f107 0308 	add.w	r3, r7, #8
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 f857 	bl	8009e6c <prvGetNextExpireTime>
 8009dbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f000 f803 	bl	8009dd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009dca:	f000 f8d5 	bl	8009f78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009dce:	e7f1      	b.n	8009db4 <prvTimerTask+0x8>

08009dd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009dda:	f7ff f985 	bl	80090e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dde:	f107 0308 	add.w	r3, r7, #8
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 f866 	bl	8009eb4 <prvSampleTimeNow>
 8009de8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d130      	bne.n	8009e52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <prvProcessTimerOrBlockTask+0x3c>
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d806      	bhi.n	8009e0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009dfe:	f7ff f981 	bl	8009104 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e02:	68f9      	ldr	r1, [r7, #12]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7ff ff91 	bl	8009d2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e0a:	e024      	b.n	8009e56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d008      	beq.n	8009e24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e12:	4b13      	ldr	r3, [pc, #76]	; (8009e60 <prvProcessTimerOrBlockTask+0x90>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	bf0c      	ite	eq
 8009e1c:	2301      	moveq	r3, #1
 8009e1e:	2300      	movne	r3, #0
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e24:	4b0f      	ldr	r3, [pc, #60]	; (8009e64 <prvProcessTimerOrBlockTask+0x94>)
 8009e26:	6818      	ldr	r0, [r3, #0]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	4619      	mov	r1, r3
 8009e32:	f7fe fef9 	bl	8008c28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e36:	f7ff f965 	bl	8009104 <xTaskResumeAll>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10a      	bne.n	8009e56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e40:	4b09      	ldr	r3, [pc, #36]	; (8009e68 <prvProcessTimerOrBlockTask+0x98>)
 8009e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e46:	601a      	str	r2, [r3, #0]
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	f3bf 8f6f 	isb	sy
}
 8009e50:	e001      	b.n	8009e56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e52:	f7ff f957 	bl	8009104 <xTaskResumeAll>
}
 8009e56:	bf00      	nop
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20000a48 	.word	0x20000a48
 8009e64:	20000a4c 	.word	0x20000a4c
 8009e68:	e000ed04 	.word	0xe000ed04

08009e6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e74:	4b0e      	ldr	r3, [pc, #56]	; (8009eb0 <prvGetNextExpireTime+0x44>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	bf0c      	ite	eq
 8009e7e:	2301      	moveq	r3, #1
 8009e80:	2300      	movne	r3, #0
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	461a      	mov	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d105      	bne.n	8009e9e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e92:	4b07      	ldr	r3, [pc, #28]	; (8009eb0 <prvGetNextExpireTime+0x44>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	e001      	b.n	8009ea2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bc80      	pop	{r7}
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	20000a44 	.word	0x20000a44

08009eb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ebc:	f7ff f9be 	bl	800923c <xTaskGetTickCount>
 8009ec0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ec2:	4b0b      	ldr	r3, [pc, #44]	; (8009ef0 <prvSampleTimeNow+0x3c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d205      	bcs.n	8009ed8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ecc:	f000 f8ee 	bl	800a0ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	e002      	b.n	8009ede <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ede:	4a04      	ldr	r2, [pc, #16]	; (8009ef0 <prvSampleTimeNow+0x3c>)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20000a54 	.word	0x20000a54

08009ef4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f02:	2300      	movs	r3, #0
 8009f04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d812      	bhi.n	8009f40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	1ad2      	subs	r2, r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d302      	bcc.n	8009f2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	617b      	str	r3, [r7, #20]
 8009f2c:	e01b      	b.n	8009f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f2e:	4b10      	ldr	r3, [pc, #64]	; (8009f70 <prvInsertTimerInActiveList+0x7c>)
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	3304      	adds	r3, #4
 8009f36:	4619      	mov	r1, r3
 8009f38:	4610      	mov	r0, r2
 8009f3a:	f7fe f967 	bl	800820c <vListInsert>
 8009f3e:	e012      	b.n	8009f66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d206      	bcs.n	8009f56 <prvInsertTimerInActiveList+0x62>
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d302      	bcc.n	8009f56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f50:	2301      	movs	r3, #1
 8009f52:	617b      	str	r3, [r7, #20]
 8009f54:	e007      	b.n	8009f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f56:	4b07      	ldr	r3, [pc, #28]	; (8009f74 <prvInsertTimerInActiveList+0x80>)
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	4619      	mov	r1, r3
 8009f60:	4610      	mov	r0, r2
 8009f62:	f7fe f953 	bl	800820c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f66:	697b      	ldr	r3, [r7, #20]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20000a48 	.word	0x20000a48
 8009f74:	20000a44 	.word	0x20000a44

08009f78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08c      	sub	sp, #48	; 0x30
 8009f7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f7e:	e081      	b.n	800a084 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	db7d      	blt.n	800a082 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d004      	beq.n	8009f9c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	3304      	adds	r3, #4
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe f970 	bl	800827c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f9c:	1d3b      	adds	r3, r7, #4
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7ff ff88 	bl	8009eb4 <prvSampleTimeNow>
 8009fa4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	2b09      	cmp	r3, #9
 8009faa:	d86b      	bhi.n	800a084 <prvProcessReceivedCommands+0x10c>
 8009fac:	a201      	add	r2, pc, #4	; (adr r2, 8009fb4 <prvProcessReceivedCommands+0x3c>)
 8009fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb2:	bf00      	nop
 8009fb4:	08009fdd 	.word	0x08009fdd
 8009fb8:	08009fdd 	.word	0x08009fdd
 8009fbc:	08009fdd 	.word	0x08009fdd
 8009fc0:	0800a085 	.word	0x0800a085
 8009fc4:	0800a039 	.word	0x0800a039
 8009fc8:	0800a071 	.word	0x0800a071
 8009fcc:	08009fdd 	.word	0x08009fdd
 8009fd0:	08009fdd 	.word	0x08009fdd
 8009fd4:	0800a085 	.word	0x0800a085
 8009fd8:	0800a039 	.word	0x0800a039
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	699b      	ldr	r3, [r3, #24]
 8009fe2:	18d1      	adds	r1, r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6a3a      	ldr	r2, [r7, #32]
 8009fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fea:	f7ff ff83 	bl	8009ef4 <prvInsertTimerInActiveList>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d047      	beq.n	800a084 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ffa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	69db      	ldr	r3, [r3, #28]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d13f      	bne.n	800a084 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	441a      	add	r2, r3
 800a00c:	2300      	movs	r3, #0
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	2300      	movs	r3, #0
 800a012:	2100      	movs	r1, #0
 800a014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a016:	f7ff fe3b 	bl	8009c90 <xTimerGenericCommand>
 800a01a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d130      	bne.n	800a084 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	61bb      	str	r3, [r7, #24]
}
 800a034:	bf00      	nop
 800a036:	e7fe      	b.n	800a036 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10a      	bne.n	800a05c <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	617b      	str	r3, [r7, #20]
}
 800a058:	bf00      	nop
 800a05a:	e7fe      	b.n	800a05a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	699a      	ldr	r2, [r3, #24]
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	18d1      	adds	r1, r2, r3
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	6a3a      	ldr	r2, [r7, #32]
 800a068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a06a:	f7ff ff43 	bl	8009ef4 <prvInsertTimerInActiveList>
					break;
 800a06e:	e009      	b.n	800a084 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a076:	2b00      	cmp	r3, #0
 800a078:	d104      	bne.n	800a084 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800a07a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a07c:	f000 fb6a 	bl	800a754 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a080:	e000      	b.n	800a084 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a082:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a084:	4b08      	ldr	r3, [pc, #32]	; (800a0a8 <prvProcessReceivedCommands+0x130>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f107 0108 	add.w	r1, r7, #8
 800a08c:	2200      	movs	r2, #0
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fe fbb2 	bl	80087f8 <xQueueReceive>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	f47f af72 	bne.w	8009f80 <prvProcessReceivedCommands+0x8>
	}
}
 800a09c:	bf00      	nop
 800a09e:	bf00      	nop
 800a0a0:	3728      	adds	r7, #40	; 0x28
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	20000a4c 	.word	0x20000a4c

0800a0ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b088      	sub	sp, #32
 800a0b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0b2:	e045      	b.n	800a140 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0b4:	4b2c      	ldr	r3, [pc, #176]	; (800a168 <prvSwitchTimerLists+0xbc>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0be:	4b2a      	ldr	r3, [pc, #168]	; (800a168 <prvSwitchTimerLists+0xbc>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fe f8d5 	bl	800827c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d12e      	bne.n	800a140 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d90e      	bls.n	800a112 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a100:	4b19      	ldr	r3, [pc, #100]	; (800a168 <prvSwitchTimerLists+0xbc>)
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3304      	adds	r3, #4
 800a108:	4619      	mov	r1, r3
 800a10a:	4610      	mov	r0, r2
 800a10c:	f7fe f87e 	bl	800820c <vListInsert>
 800a110:	e016      	b.n	800a140 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a112:	2300      	movs	r3, #0
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	2300      	movs	r3, #0
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	2100      	movs	r1, #0
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f7ff fdb7 	bl	8009c90 <xTimerGenericCommand>
 800a122:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10a      	bne.n	800a140 <prvSwitchTimerLists+0x94>
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	603b      	str	r3, [r7, #0]
}
 800a13c:	bf00      	nop
 800a13e:	e7fe      	b.n	800a13e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a140:	4b09      	ldr	r3, [pc, #36]	; (800a168 <prvSwitchTimerLists+0xbc>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1b4      	bne.n	800a0b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a14a:	4b07      	ldr	r3, [pc, #28]	; (800a168 <prvSwitchTimerLists+0xbc>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a150:	4b06      	ldr	r3, [pc, #24]	; (800a16c <prvSwitchTimerLists+0xc0>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a04      	ldr	r2, [pc, #16]	; (800a168 <prvSwitchTimerLists+0xbc>)
 800a156:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a158:	4a04      	ldr	r2, [pc, #16]	; (800a16c <prvSwitchTimerLists+0xc0>)
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	6013      	str	r3, [r2, #0]
}
 800a15e:	bf00      	nop
 800a160:	3718      	adds	r7, #24
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	20000a44 	.word	0x20000a44
 800a16c:	20000a48 	.word	0x20000a48

0800a170 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a176:	f000 f929 	bl	800a3cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a17a:	4b15      	ldr	r3, [pc, #84]	; (800a1d0 <prvCheckForValidListAndQueue+0x60>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d120      	bne.n	800a1c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a182:	4814      	ldr	r0, [pc, #80]	; (800a1d4 <prvCheckForValidListAndQueue+0x64>)
 800a184:	f7fd fff4 	bl	8008170 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a188:	4813      	ldr	r0, [pc, #76]	; (800a1d8 <prvCheckForValidListAndQueue+0x68>)
 800a18a:	f7fd fff1 	bl	8008170 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a18e:	4b13      	ldr	r3, [pc, #76]	; (800a1dc <prvCheckForValidListAndQueue+0x6c>)
 800a190:	4a10      	ldr	r2, [pc, #64]	; (800a1d4 <prvCheckForValidListAndQueue+0x64>)
 800a192:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a194:	4b12      	ldr	r3, [pc, #72]	; (800a1e0 <prvCheckForValidListAndQueue+0x70>)
 800a196:	4a10      	ldr	r2, [pc, #64]	; (800a1d8 <prvCheckForValidListAndQueue+0x68>)
 800a198:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a19a:	2300      	movs	r3, #0
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	4b11      	ldr	r3, [pc, #68]	; (800a1e4 <prvCheckForValidListAndQueue+0x74>)
 800a1a0:	4a11      	ldr	r2, [pc, #68]	; (800a1e8 <prvCheckForValidListAndQueue+0x78>)
 800a1a2:	210c      	movs	r1, #12
 800a1a4:	200a      	movs	r0, #10
 800a1a6:	f7fe f8fb 	bl	80083a0 <xQueueGenericCreateStatic>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	4a08      	ldr	r2, [pc, #32]	; (800a1d0 <prvCheckForValidListAndQueue+0x60>)
 800a1ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a1b0:	4b07      	ldr	r3, [pc, #28]	; (800a1d0 <prvCheckForValidListAndQueue+0x60>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d005      	beq.n	800a1c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a1b8:	4b05      	ldr	r3, [pc, #20]	; (800a1d0 <prvCheckForValidListAndQueue+0x60>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	490b      	ldr	r1, [pc, #44]	; (800a1ec <prvCheckForValidListAndQueue+0x7c>)
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fe fd0a 	bl	8008bd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1c4:	f000 f932 	bl	800a42c <vPortExitCritical>
}
 800a1c8:	bf00      	nop
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20000a4c 	.word	0x20000a4c
 800a1d4:	20000a1c 	.word	0x20000a1c
 800a1d8:	20000a30 	.word	0x20000a30
 800a1dc:	20000a44 	.word	0x20000a44
 800a1e0:	20000a48 	.word	0x20000a48
 800a1e4:	20000ad0 	.word	0x20000ad0
 800a1e8:	20000a58 	.word	0x20000a58
 800a1ec:	0800e37c 	.word	0x0800e37c

0800a1f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	3b04      	subs	r3, #4
 800a200:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3b04      	subs	r3, #4
 800a20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	f023 0201 	bic.w	r2, r3, #1
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	3b04      	subs	r3, #4
 800a21e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a220:	4a08      	ldr	r2, [pc, #32]	; (800a244 <pxPortInitialiseStack+0x54>)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3b14      	subs	r3, #20
 800a22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3b20      	subs	r3, #32
 800a236:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a238:	68fb      	ldr	r3, [r7, #12]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	bc80      	pop	{r7}
 800a242:	4770      	bx	lr
 800a244:	0800a249 	.word	0x0800a249

0800a248 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a24e:	2300      	movs	r3, #0
 800a250:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a252:	4b12      	ldr	r3, [pc, #72]	; (800a29c <prvTaskExitError+0x54>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25a:	d00a      	beq.n	800a272 <prvTaskExitError+0x2a>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	60fb      	str	r3, [r7, #12]
}
 800a26e:	bf00      	nop
 800a270:	e7fe      	b.n	800a270 <prvTaskExitError+0x28>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	60bb      	str	r3, [r7, #8]
}
 800a284:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a286:	bf00      	nop
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0fc      	beq.n	800a288 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a28e:	bf00      	nop
 800a290:	bf00      	nop
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	bc80      	pop	{r7}
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	20000010 	.word	0x20000010

0800a2a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2a0:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <pxCurrentTCBConst2>)
 800a2a2:	6819      	ldr	r1, [r3, #0]
 800a2a4:	6808      	ldr	r0, [r1, #0]
 800a2a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a2aa:	f380 8809 	msr	PSP, r0
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f04f 0000 	mov.w	r0, #0
 800a2b6:	f380 8811 	msr	BASEPRI, r0
 800a2ba:	f04e 0e0d 	orr.w	lr, lr, #13
 800a2be:	4770      	bx	lr

0800a2c0 <pxCurrentTCBConst2>:
 800a2c0:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop

0800a2c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a2c8:	4806      	ldr	r0, [pc, #24]	; (800a2e4 <prvPortStartFirstTask+0x1c>)
 800a2ca:	6800      	ldr	r0, [r0, #0]
 800a2cc:	6800      	ldr	r0, [r0, #0]
 800a2ce:	f380 8808 	msr	MSP, r0
 800a2d2:	b662      	cpsie	i
 800a2d4:	b661      	cpsie	f
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	df00      	svc	0
 800a2e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2e2:	bf00      	nop
 800a2e4:	e000ed08 	.word	0xe000ed08

0800a2e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a2ee:	4b32      	ldr	r3, [pc, #200]	; (800a3b8 <xPortStartScheduler+0xd0>)
 800a2f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	22ff      	movs	r2, #255	; 0xff
 800a2fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	b2db      	uxtb	r3, r3
 800a306:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a308:	78fb      	ldrb	r3, [r7, #3]
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a310:	b2da      	uxtb	r2, r3
 800a312:	4b2a      	ldr	r3, [pc, #168]	; (800a3bc <xPortStartScheduler+0xd4>)
 800a314:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a316:	4b2a      	ldr	r3, [pc, #168]	; (800a3c0 <xPortStartScheduler+0xd8>)
 800a318:	2207      	movs	r2, #7
 800a31a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a31c:	e009      	b.n	800a332 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a31e:	4b28      	ldr	r3, [pc, #160]	; (800a3c0 <xPortStartScheduler+0xd8>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	3b01      	subs	r3, #1
 800a324:	4a26      	ldr	r2, [pc, #152]	; (800a3c0 <xPortStartScheduler+0xd8>)
 800a326:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a328:	78fb      	ldrb	r3, [r7, #3]
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	005b      	lsls	r3, r3, #1
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a332:	78fb      	ldrb	r3, [r7, #3]
 800a334:	b2db      	uxtb	r3, r3
 800a336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a33a:	2b80      	cmp	r3, #128	; 0x80
 800a33c:	d0ef      	beq.n	800a31e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a33e:	4b20      	ldr	r3, [pc, #128]	; (800a3c0 <xPortStartScheduler+0xd8>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f1c3 0307 	rsb	r3, r3, #7
 800a346:	2b04      	cmp	r3, #4
 800a348:	d00a      	beq.n	800a360 <xPortStartScheduler+0x78>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	60bb      	str	r3, [r7, #8]
}
 800a35c:	bf00      	nop
 800a35e:	e7fe      	b.n	800a35e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a360:	4b17      	ldr	r3, [pc, #92]	; (800a3c0 <xPortStartScheduler+0xd8>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	021b      	lsls	r3, r3, #8
 800a366:	4a16      	ldr	r2, [pc, #88]	; (800a3c0 <xPortStartScheduler+0xd8>)
 800a368:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a36a:	4b15      	ldr	r3, [pc, #84]	; (800a3c0 <xPortStartScheduler+0xd8>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a372:	4a13      	ldr	r2, [pc, #76]	; (800a3c0 <xPortStartScheduler+0xd8>)
 800a374:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a37e:	4b11      	ldr	r3, [pc, #68]	; (800a3c4 <xPortStartScheduler+0xdc>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a10      	ldr	r2, [pc, #64]	; (800a3c4 <xPortStartScheduler+0xdc>)
 800a384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a388:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a38a:	4b0e      	ldr	r3, [pc, #56]	; (800a3c4 <xPortStartScheduler+0xdc>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a0d      	ldr	r2, [pc, #52]	; (800a3c4 <xPortStartScheduler+0xdc>)
 800a390:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a394:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a396:	f000 f8b9 	bl	800a50c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a39a:	4b0b      	ldr	r3, [pc, #44]	; (800a3c8 <xPortStartScheduler+0xe0>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3a0:	f7ff ff92 	bl	800a2c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3a4:	f7ff f828 	bl	80093f8 <vTaskSwitchContext>
	prvTaskExitError();
 800a3a8:	f7ff ff4e 	bl	800a248 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	e000e400 	.word	0xe000e400
 800a3bc:	20000b18 	.word	0x20000b18
 800a3c0:	20000b1c 	.word	0x20000b1c
 800a3c4:	e000ed20 	.word	0xe000ed20
 800a3c8:	20000010 	.word	0x20000010

0800a3cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	607b      	str	r3, [r7, #4]
}
 800a3e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a3e6:	4b0f      	ldr	r3, [pc, #60]	; (800a424 <vPortEnterCritical+0x58>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	4a0d      	ldr	r2, [pc, #52]	; (800a424 <vPortEnterCritical+0x58>)
 800a3ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a3f0:	4b0c      	ldr	r3, [pc, #48]	; (800a424 <vPortEnterCritical+0x58>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d10f      	bne.n	800a418 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a3f8:	4b0b      	ldr	r3, [pc, #44]	; (800a428 <vPortEnterCritical+0x5c>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00a      	beq.n	800a418 <vPortEnterCritical+0x4c>
	__asm volatile
 800a402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	603b      	str	r3, [r7, #0]
}
 800a414:	bf00      	nop
 800a416:	e7fe      	b.n	800a416 <vPortEnterCritical+0x4a>
	}
}
 800a418:	bf00      	nop
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bc80      	pop	{r7}
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	20000010 	.word	0x20000010
 800a428:	e000ed04 	.word	0xe000ed04

0800a42c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a432:	4b11      	ldr	r3, [pc, #68]	; (800a478 <vPortExitCritical+0x4c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10a      	bne.n	800a450 <vPortExitCritical+0x24>
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	607b      	str	r3, [r7, #4]
}
 800a44c:	bf00      	nop
 800a44e:	e7fe      	b.n	800a44e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a450:	4b09      	ldr	r3, [pc, #36]	; (800a478 <vPortExitCritical+0x4c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3b01      	subs	r3, #1
 800a456:	4a08      	ldr	r2, [pc, #32]	; (800a478 <vPortExitCritical+0x4c>)
 800a458:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a45a:	4b07      	ldr	r3, [pc, #28]	; (800a478 <vPortExitCritical+0x4c>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d105      	bne.n	800a46e <vPortExitCritical+0x42>
 800a462:	2300      	movs	r3, #0
 800a464:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	f383 8811 	msr	BASEPRI, r3
}
 800a46c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	bc80      	pop	{r7}
 800a476:	4770      	bx	lr
 800a478:	20000010 	.word	0x20000010
 800a47c:	00000000 	.word	0x00000000

0800a480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a480:	f3ef 8009 	mrs	r0, PSP
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	4b0d      	ldr	r3, [pc, #52]	; (800a4c0 <pxCurrentTCBConst>)
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a490:	6010      	str	r0, [r2, #0]
 800a492:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a496:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a49a:	f380 8811 	msr	BASEPRI, r0
 800a49e:	f7fe ffab 	bl	80093f8 <vTaskSwitchContext>
 800a4a2:	f04f 0000 	mov.w	r0, #0
 800a4a6:	f380 8811 	msr	BASEPRI, r0
 800a4aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a4ae:	6819      	ldr	r1, [r3, #0]
 800a4b0:	6808      	ldr	r0, [r1, #0]
 800a4b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a4b6:	f380 8809 	msr	PSP, r0
 800a4ba:	f3bf 8f6f 	isb	sy
 800a4be:	4770      	bx	lr

0800a4c0 <pxCurrentTCBConst>:
 800a4c0:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a4c4:	bf00      	nop
 800a4c6:	bf00      	nop

0800a4c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	607b      	str	r3, [r7, #4]
}
 800a4e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4e2:	f7fe fecb 	bl	800927c <xTaskIncrementTick>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4ec:	4b06      	ldr	r3, [pc, #24]	; (800a508 <SysTick_Handler+0x40>)
 800a4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	f383 8811 	msr	BASEPRI, r3
}
 800a4fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a500:	bf00      	nop
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	e000ed04 	.word	0xe000ed04

0800a50c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a510:	4b0a      	ldr	r3, [pc, #40]	; (800a53c <vPortSetupTimerInterrupt+0x30>)
 800a512:	2200      	movs	r2, #0
 800a514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a516:	4b0a      	ldr	r3, [pc, #40]	; (800a540 <vPortSetupTimerInterrupt+0x34>)
 800a518:	2200      	movs	r2, #0
 800a51a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a51c:	4b09      	ldr	r3, [pc, #36]	; (800a544 <vPortSetupTimerInterrupt+0x38>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a09      	ldr	r2, [pc, #36]	; (800a548 <vPortSetupTimerInterrupt+0x3c>)
 800a522:	fba2 2303 	umull	r2, r3, r2, r3
 800a526:	099b      	lsrs	r3, r3, #6
 800a528:	4a08      	ldr	r2, [pc, #32]	; (800a54c <vPortSetupTimerInterrupt+0x40>)
 800a52a:	3b01      	subs	r3, #1
 800a52c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a52e:	4b03      	ldr	r3, [pc, #12]	; (800a53c <vPortSetupTimerInterrupt+0x30>)
 800a530:	2207      	movs	r2, #7
 800a532:	601a      	str	r2, [r3, #0]
}
 800a534:	bf00      	nop
 800a536:	46bd      	mov	sp, r7
 800a538:	bc80      	pop	{r7}
 800a53a:	4770      	bx	lr
 800a53c:	e000e010 	.word	0xe000e010
 800a540:	e000e018 	.word	0xe000e018
 800a544:	20000004 	.word	0x20000004
 800a548:	10624dd3 	.word	0x10624dd3
 800a54c:	e000e014 	.word	0xe000e014

0800a550 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a556:	f3ef 8305 	mrs	r3, IPSR
 800a55a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2b0f      	cmp	r3, #15
 800a560:	d914      	bls.n	800a58c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a562:	4a16      	ldr	r2, [pc, #88]	; (800a5bc <vPortValidateInterruptPriority+0x6c>)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	4413      	add	r3, r2
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a56c:	4b14      	ldr	r3, [pc, #80]	; (800a5c0 <vPortValidateInterruptPriority+0x70>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	7afa      	ldrb	r2, [r7, #11]
 800a572:	429a      	cmp	r2, r3
 800a574:	d20a      	bcs.n	800a58c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57a:	f383 8811 	msr	BASEPRI, r3
 800a57e:	f3bf 8f6f 	isb	sy
 800a582:	f3bf 8f4f 	dsb	sy
 800a586:	607b      	str	r3, [r7, #4]
}
 800a588:	bf00      	nop
 800a58a:	e7fe      	b.n	800a58a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a58c:	4b0d      	ldr	r3, [pc, #52]	; (800a5c4 <vPortValidateInterruptPriority+0x74>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a594:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <vPortValidateInterruptPriority+0x78>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d90a      	bls.n	800a5b2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	603b      	str	r3, [r7, #0]
}
 800a5ae:	bf00      	nop
 800a5b0:	e7fe      	b.n	800a5b0 <vPortValidateInterruptPriority+0x60>
	}
 800a5b2:	bf00      	nop
 800a5b4:	3714      	adds	r7, #20
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bc80      	pop	{r7}
 800a5ba:	4770      	bx	lr
 800a5bc:	e000e3f0 	.word	0xe000e3f0
 800a5c0:	20000b18 	.word	0x20000b18
 800a5c4:	e000ed0c 	.word	0xe000ed0c
 800a5c8:	20000b1c 	.word	0x20000b1c

0800a5cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08a      	sub	sp, #40	; 0x28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5d8:	f7fe fd86 	bl	80090e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5dc:	4b58      	ldr	r3, [pc, #352]	; (800a740 <pvPortMalloc+0x174>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d101      	bne.n	800a5e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5e4:	f000 f910 	bl	800a808 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5e8:	4b56      	ldr	r3, [pc, #344]	; (800a744 <pvPortMalloc+0x178>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f040 808e 	bne.w	800a712 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d01d      	beq.n	800a638 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a5fc:	2208      	movs	r2, #8
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4413      	add	r3, r2
 800a602:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f003 0307 	and.w	r3, r3, #7
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d014      	beq.n	800a638 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f023 0307 	bic.w	r3, r3, #7
 800a614:	3308      	adds	r3, #8
 800a616:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f003 0307 	and.w	r3, r3, #7
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00a      	beq.n	800a638 <pvPortMalloc+0x6c>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	617b      	str	r3, [r7, #20]
}
 800a634:	bf00      	nop
 800a636:	e7fe      	b.n	800a636 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d069      	beq.n	800a712 <pvPortMalloc+0x146>
 800a63e:	4b42      	ldr	r3, [pc, #264]	; (800a748 <pvPortMalloc+0x17c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	429a      	cmp	r2, r3
 800a646:	d864      	bhi.n	800a712 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a648:	4b40      	ldr	r3, [pc, #256]	; (800a74c <pvPortMalloc+0x180>)
 800a64a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a64c:	4b3f      	ldr	r3, [pc, #252]	; (800a74c <pvPortMalloc+0x180>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a652:	e004      	b.n	800a65e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	429a      	cmp	r2, r3
 800a666:	d903      	bls.n	800a670 <pvPortMalloc+0xa4>
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1f1      	bne.n	800a654 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a670:	4b33      	ldr	r3, [pc, #204]	; (800a740 <pvPortMalloc+0x174>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a676:	429a      	cmp	r2, r3
 800a678:	d04b      	beq.n	800a712 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a67a:	6a3b      	ldr	r3, [r7, #32]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2208      	movs	r2, #8
 800a680:	4413      	add	r3, r2
 800a682:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	1ad2      	subs	r2, r2, r3
 800a694:	2308      	movs	r3, #8
 800a696:	005b      	lsls	r3, r3, #1
 800a698:	429a      	cmp	r2, r3
 800a69a:	d91f      	bls.n	800a6dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a69c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	f003 0307 	and.w	r3, r3, #7
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00a      	beq.n	800a6c4 <pvPortMalloc+0xf8>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	613b      	str	r3, [r7, #16]
}
 800a6c0:	bf00      	nop
 800a6c2:	e7fe      	b.n	800a6c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	685a      	ldr	r2, [r3, #4]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	1ad2      	subs	r2, r2, r3
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6d6:	69b8      	ldr	r0, [r7, #24]
 800a6d8:	f000 f8f8 	bl	800a8cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6dc:	4b1a      	ldr	r3, [pc, #104]	; (800a748 <pvPortMalloc+0x17c>)
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	4a18      	ldr	r2, [pc, #96]	; (800a748 <pvPortMalloc+0x17c>)
 800a6e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6ea:	4b17      	ldr	r3, [pc, #92]	; (800a748 <pvPortMalloc+0x17c>)
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	4b18      	ldr	r3, [pc, #96]	; (800a750 <pvPortMalloc+0x184>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d203      	bcs.n	800a6fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6f6:	4b14      	ldr	r3, [pc, #80]	; (800a748 <pvPortMalloc+0x17c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a15      	ldr	r2, [pc, #84]	; (800a750 <pvPortMalloc+0x184>)
 800a6fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	4b10      	ldr	r3, [pc, #64]	; (800a744 <pvPortMalloc+0x178>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	431a      	orrs	r2, r3
 800a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	2200      	movs	r2, #0
 800a710:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a712:	f7fe fcf7 	bl	8009104 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	f003 0307 	and.w	r3, r3, #7
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00a      	beq.n	800a736 <pvPortMalloc+0x16a>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	60fb      	str	r3, [r7, #12]
}
 800a732:	bf00      	nop
 800a734:	e7fe      	b.n	800a734 <pvPortMalloc+0x168>
	return pvReturn;
 800a736:	69fb      	ldr	r3, [r7, #28]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3728      	adds	r7, #40	; 0x28
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	20002b28 	.word	0x20002b28
 800a744:	20002b34 	.word	0x20002b34
 800a748:	20002b2c 	.word	0x20002b2c
 800a74c:	20002b20 	.word	0x20002b20
 800a750:	20002b30 	.word	0x20002b30

0800a754 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d048      	beq.n	800a7f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a766:	2308      	movs	r3, #8
 800a768:	425b      	negs	r3, r3
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	4413      	add	r3, r2
 800a76e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	685a      	ldr	r2, [r3, #4]
 800a778:	4b21      	ldr	r3, [pc, #132]	; (800a800 <vPortFree+0xac>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4013      	ands	r3, r2
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10a      	bne.n	800a798 <vPortFree+0x44>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	60fb      	str	r3, [r7, #12]
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00a      	beq.n	800a7b6 <vPortFree+0x62>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	60bb      	str	r3, [r7, #8]
}
 800a7b2:	bf00      	nop
 800a7b4:	e7fe      	b.n	800a7b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	685a      	ldr	r2, [r3, #4]
 800a7ba:	4b11      	ldr	r3, [pc, #68]	; (800a800 <vPortFree+0xac>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4013      	ands	r3, r2
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d019      	beq.n	800a7f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d115      	bne.n	800a7f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	4b0b      	ldr	r3, [pc, #44]	; (800a800 <vPortFree+0xac>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	43db      	mvns	r3, r3
 800a7d6:	401a      	ands	r2, r3
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7dc:	f7fe fc84 	bl	80090e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	4b07      	ldr	r3, [pc, #28]	; (800a804 <vPortFree+0xb0>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	4a06      	ldr	r2, [pc, #24]	; (800a804 <vPortFree+0xb0>)
 800a7ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7ee:	6938      	ldr	r0, [r7, #16]
 800a7f0:	f000 f86c 	bl	800a8cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a7f4:	f7fe fc86 	bl	8009104 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7f8:	bf00      	nop
 800a7fa:	3718      	adds	r7, #24
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	20002b34 	.word	0x20002b34
 800a804:	20002b2c 	.word	0x20002b2c

0800a808 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a80e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a812:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a814:	4b27      	ldr	r3, [pc, #156]	; (800a8b4 <prvHeapInit+0xac>)
 800a816:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f003 0307 	and.w	r3, r3, #7
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00c      	beq.n	800a83c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	3307      	adds	r3, #7
 800a826:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f023 0307 	bic.w	r3, r3, #7
 800a82e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	4a1f      	ldr	r2, [pc, #124]	; (800a8b4 <prvHeapInit+0xac>)
 800a838:	4413      	add	r3, r2
 800a83a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a840:	4a1d      	ldr	r2, [pc, #116]	; (800a8b8 <prvHeapInit+0xb0>)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a846:	4b1c      	ldr	r3, [pc, #112]	; (800a8b8 <prvHeapInit+0xb0>)
 800a848:	2200      	movs	r2, #0
 800a84a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	4413      	add	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a854:	2208      	movs	r2, #8
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	1a9b      	subs	r3, r3, r2
 800a85a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f023 0307 	bic.w	r3, r3, #7
 800a862:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	4a15      	ldr	r2, [pc, #84]	; (800a8bc <prvHeapInit+0xb4>)
 800a868:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a86a:	4b14      	ldr	r3, [pc, #80]	; (800a8bc <prvHeapInit+0xb4>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2200      	movs	r2, #0
 800a870:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a872:	4b12      	ldr	r3, [pc, #72]	; (800a8bc <prvHeapInit+0xb4>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2200      	movs	r2, #0
 800a878:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	1ad2      	subs	r2, r2, r3
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a888:	4b0c      	ldr	r3, [pc, #48]	; (800a8bc <prvHeapInit+0xb4>)
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	4a0a      	ldr	r2, [pc, #40]	; (800a8c0 <prvHeapInit+0xb8>)
 800a896:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	4a09      	ldr	r2, [pc, #36]	; (800a8c4 <prvHeapInit+0xbc>)
 800a89e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8a0:	4b09      	ldr	r3, [pc, #36]	; (800a8c8 <prvHeapInit+0xc0>)
 800a8a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8a6:	601a      	str	r2, [r3, #0]
}
 800a8a8:	bf00      	nop
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bc80      	pop	{r7}
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	20000b20 	.word	0x20000b20
 800a8b8:	20002b20 	.word	0x20002b20
 800a8bc:	20002b28 	.word	0x20002b28
 800a8c0:	20002b30 	.word	0x20002b30
 800a8c4:	20002b2c 	.word	0x20002b2c
 800a8c8:	20002b34 	.word	0x20002b34

0800a8cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8d4:	4b27      	ldr	r3, [pc, #156]	; (800a974 <prvInsertBlockIntoFreeList+0xa8>)
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	e002      	b.n	800a8e0 <prvInsertBlockIntoFreeList+0x14>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d8f7      	bhi.n	800a8da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d108      	bne.n	800a90e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	441a      	add	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	441a      	add	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d118      	bne.n	800a954 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	4b14      	ldr	r3, [pc, #80]	; (800a978 <prvInsertBlockIntoFreeList+0xac>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d00d      	beq.n	800a94a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	441a      	add	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	601a      	str	r2, [r3, #0]
 800a948:	e008      	b.n	800a95c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a94a:	4b0b      	ldr	r3, [pc, #44]	; (800a978 <prvInsertBlockIntoFreeList+0xac>)
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	e003      	b.n	800a95c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	429a      	cmp	r2, r3
 800a962:	d002      	beq.n	800a96a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a96a:	bf00      	nop
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	bc80      	pop	{r7}
 800a972:	4770      	bx	lr
 800a974:	20002b20 	.word	0x20002b20
 800a978:	20002b28 	.word	0x20002b28

0800a97c <__assert_func>:
 800a97c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a97e:	4614      	mov	r4, r2
 800a980:	461a      	mov	r2, r3
 800a982:	4b09      	ldr	r3, [pc, #36]	; (800a9a8 <__assert_func+0x2c>)
 800a984:	4605      	mov	r5, r0
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68d8      	ldr	r0, [r3, #12]
 800a98a:	b14c      	cbz	r4, 800a9a0 <__assert_func+0x24>
 800a98c:	4b07      	ldr	r3, [pc, #28]	; (800a9ac <__assert_func+0x30>)
 800a98e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a992:	9100      	str	r1, [sp, #0]
 800a994:	462b      	mov	r3, r5
 800a996:	4906      	ldr	r1, [pc, #24]	; (800a9b0 <__assert_func+0x34>)
 800a998:	f000 f814 	bl	800a9c4 <fiprintf>
 800a99c:	f000 feee 	bl	800b77c <abort>
 800a9a0:	4b04      	ldr	r3, [pc, #16]	; (800a9b4 <__assert_func+0x38>)
 800a9a2:	461c      	mov	r4, r3
 800a9a4:	e7f3      	b.n	800a98e <__assert_func+0x12>
 800a9a6:	bf00      	nop
 800a9a8:	20000014 	.word	0x20000014
 800a9ac:	0800e39c 	.word	0x0800e39c
 800a9b0:	0800e3a9 	.word	0x0800e3a9
 800a9b4:	0800e3d7 	.word	0x0800e3d7

0800a9b8 <__errno>:
 800a9b8:	4b01      	ldr	r3, [pc, #4]	; (800a9c0 <__errno+0x8>)
 800a9ba:	6818      	ldr	r0, [r3, #0]
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	20000014 	.word	0x20000014

0800a9c4 <fiprintf>:
 800a9c4:	b40e      	push	{r1, r2, r3}
 800a9c6:	b503      	push	{r0, r1, lr}
 800a9c8:	4601      	mov	r1, r0
 800a9ca:	ab03      	add	r3, sp, #12
 800a9cc:	4805      	ldr	r0, [pc, #20]	; (800a9e4 <fiprintf+0x20>)
 800a9ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9d2:	6800      	ldr	r0, [r0, #0]
 800a9d4:	9301      	str	r3, [sp, #4]
 800a9d6:	f000 f869 	bl	800aaac <_vfiprintf_r>
 800a9da:	b002      	add	sp, #8
 800a9dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9e0:	b003      	add	sp, #12
 800a9e2:	4770      	bx	lr
 800a9e4:	20000014 	.word	0x20000014

0800a9e8 <__libc_init_array>:
 800a9e8:	b570      	push	{r4, r5, r6, lr}
 800a9ea:	2600      	movs	r6, #0
 800a9ec:	4d0c      	ldr	r5, [pc, #48]	; (800aa20 <__libc_init_array+0x38>)
 800a9ee:	4c0d      	ldr	r4, [pc, #52]	; (800aa24 <__libc_init_array+0x3c>)
 800a9f0:	1b64      	subs	r4, r4, r5
 800a9f2:	10a4      	asrs	r4, r4, #2
 800a9f4:	42a6      	cmp	r6, r4
 800a9f6:	d109      	bne.n	800aa0c <__libc_init_array+0x24>
 800a9f8:	f003 fc70 	bl	800e2dc <_init>
 800a9fc:	2600      	movs	r6, #0
 800a9fe:	4d0a      	ldr	r5, [pc, #40]	; (800aa28 <__libc_init_array+0x40>)
 800aa00:	4c0a      	ldr	r4, [pc, #40]	; (800aa2c <__libc_init_array+0x44>)
 800aa02:	1b64      	subs	r4, r4, r5
 800aa04:	10a4      	asrs	r4, r4, #2
 800aa06:	42a6      	cmp	r6, r4
 800aa08:	d105      	bne.n	800aa16 <__libc_init_array+0x2e>
 800aa0a:	bd70      	pop	{r4, r5, r6, pc}
 800aa0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa10:	4798      	blx	r3
 800aa12:	3601      	adds	r6, #1
 800aa14:	e7ee      	b.n	800a9f4 <__libc_init_array+0xc>
 800aa16:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa1a:	4798      	blx	r3
 800aa1c:	3601      	adds	r6, #1
 800aa1e:	e7f2      	b.n	800aa06 <__libc_init_array+0x1e>
 800aa20:	0800e7c8 	.word	0x0800e7c8
 800aa24:	0800e7c8 	.word	0x0800e7c8
 800aa28:	0800e7c8 	.word	0x0800e7c8
 800aa2c:	0800e7cc 	.word	0x0800e7cc

0800aa30 <memcpy>:
 800aa30:	440a      	add	r2, r1
 800aa32:	4291      	cmp	r1, r2
 800aa34:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa38:	d100      	bne.n	800aa3c <memcpy+0xc>
 800aa3a:	4770      	bx	lr
 800aa3c:	b510      	push	{r4, lr}
 800aa3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa42:	4291      	cmp	r1, r2
 800aa44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa48:	d1f9      	bne.n	800aa3e <memcpy+0xe>
 800aa4a:	bd10      	pop	{r4, pc}

0800aa4c <memset>:
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	4402      	add	r2, r0
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d100      	bne.n	800aa56 <memset+0xa>
 800aa54:	4770      	bx	lr
 800aa56:	f803 1b01 	strb.w	r1, [r3], #1
 800aa5a:	e7f9      	b.n	800aa50 <memset+0x4>

0800aa5c <__sfputc_r>:
 800aa5c:	6893      	ldr	r3, [r2, #8]
 800aa5e:	b410      	push	{r4}
 800aa60:	3b01      	subs	r3, #1
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	6093      	str	r3, [r2, #8]
 800aa66:	da07      	bge.n	800aa78 <__sfputc_r+0x1c>
 800aa68:	6994      	ldr	r4, [r2, #24]
 800aa6a:	42a3      	cmp	r3, r4
 800aa6c:	db01      	blt.n	800aa72 <__sfputc_r+0x16>
 800aa6e:	290a      	cmp	r1, #10
 800aa70:	d102      	bne.n	800aa78 <__sfputc_r+0x1c>
 800aa72:	bc10      	pop	{r4}
 800aa74:	f000 bdc2 	b.w	800b5fc <__swbuf_r>
 800aa78:	6813      	ldr	r3, [r2, #0]
 800aa7a:	1c58      	adds	r0, r3, #1
 800aa7c:	6010      	str	r0, [r2, #0]
 800aa7e:	7019      	strb	r1, [r3, #0]
 800aa80:	4608      	mov	r0, r1
 800aa82:	bc10      	pop	{r4}
 800aa84:	4770      	bx	lr

0800aa86 <__sfputs_r>:
 800aa86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa88:	4606      	mov	r6, r0
 800aa8a:	460f      	mov	r7, r1
 800aa8c:	4614      	mov	r4, r2
 800aa8e:	18d5      	adds	r5, r2, r3
 800aa90:	42ac      	cmp	r4, r5
 800aa92:	d101      	bne.n	800aa98 <__sfputs_r+0x12>
 800aa94:	2000      	movs	r0, #0
 800aa96:	e007      	b.n	800aaa8 <__sfputs_r+0x22>
 800aa98:	463a      	mov	r2, r7
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa0:	f7ff ffdc 	bl	800aa5c <__sfputc_r>
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	d1f3      	bne.n	800aa90 <__sfputs_r+0xa>
 800aaa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aaac <_vfiprintf_r>:
 800aaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab0:	460d      	mov	r5, r1
 800aab2:	4614      	mov	r4, r2
 800aab4:	4698      	mov	r8, r3
 800aab6:	4606      	mov	r6, r0
 800aab8:	b09d      	sub	sp, #116	; 0x74
 800aaba:	b118      	cbz	r0, 800aac4 <_vfiprintf_r+0x18>
 800aabc:	6983      	ldr	r3, [r0, #24]
 800aabe:	b90b      	cbnz	r3, 800aac4 <_vfiprintf_r+0x18>
 800aac0:	f001 fdfa 	bl	800c6b8 <__sinit>
 800aac4:	4b89      	ldr	r3, [pc, #548]	; (800acec <_vfiprintf_r+0x240>)
 800aac6:	429d      	cmp	r5, r3
 800aac8:	d11b      	bne.n	800ab02 <_vfiprintf_r+0x56>
 800aaca:	6875      	ldr	r5, [r6, #4]
 800aacc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aace:	07d9      	lsls	r1, r3, #31
 800aad0:	d405      	bmi.n	800aade <_vfiprintf_r+0x32>
 800aad2:	89ab      	ldrh	r3, [r5, #12]
 800aad4:	059a      	lsls	r2, r3, #22
 800aad6:	d402      	bmi.n	800aade <_vfiprintf_r+0x32>
 800aad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aada:	f001 fe90 	bl	800c7fe <__retarget_lock_acquire_recursive>
 800aade:	89ab      	ldrh	r3, [r5, #12]
 800aae0:	071b      	lsls	r3, r3, #28
 800aae2:	d501      	bpl.n	800aae8 <_vfiprintf_r+0x3c>
 800aae4:	692b      	ldr	r3, [r5, #16]
 800aae6:	b9eb      	cbnz	r3, 800ab24 <_vfiprintf_r+0x78>
 800aae8:	4629      	mov	r1, r5
 800aaea:	4630      	mov	r0, r6
 800aaec:	f000 fdd8 	bl	800b6a0 <__swsetup_r>
 800aaf0:	b1c0      	cbz	r0, 800ab24 <_vfiprintf_r+0x78>
 800aaf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaf4:	07dc      	lsls	r4, r3, #31
 800aaf6:	d50e      	bpl.n	800ab16 <_vfiprintf_r+0x6a>
 800aaf8:	f04f 30ff 	mov.w	r0, #4294967295
 800aafc:	b01d      	add	sp, #116	; 0x74
 800aafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab02:	4b7b      	ldr	r3, [pc, #492]	; (800acf0 <_vfiprintf_r+0x244>)
 800ab04:	429d      	cmp	r5, r3
 800ab06:	d101      	bne.n	800ab0c <_vfiprintf_r+0x60>
 800ab08:	68b5      	ldr	r5, [r6, #8]
 800ab0a:	e7df      	b.n	800aacc <_vfiprintf_r+0x20>
 800ab0c:	4b79      	ldr	r3, [pc, #484]	; (800acf4 <_vfiprintf_r+0x248>)
 800ab0e:	429d      	cmp	r5, r3
 800ab10:	bf08      	it	eq
 800ab12:	68f5      	ldreq	r5, [r6, #12]
 800ab14:	e7da      	b.n	800aacc <_vfiprintf_r+0x20>
 800ab16:	89ab      	ldrh	r3, [r5, #12]
 800ab18:	0598      	lsls	r0, r3, #22
 800ab1a:	d4ed      	bmi.n	800aaf8 <_vfiprintf_r+0x4c>
 800ab1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab1e:	f001 fe6f 	bl	800c800 <__retarget_lock_release_recursive>
 800ab22:	e7e9      	b.n	800aaf8 <_vfiprintf_r+0x4c>
 800ab24:	2300      	movs	r3, #0
 800ab26:	9309      	str	r3, [sp, #36]	; 0x24
 800ab28:	2320      	movs	r3, #32
 800ab2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab2e:	2330      	movs	r3, #48	; 0x30
 800ab30:	f04f 0901 	mov.w	r9, #1
 800ab34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab38:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800acf8 <_vfiprintf_r+0x24c>
 800ab3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab40:	4623      	mov	r3, r4
 800ab42:	469a      	mov	sl, r3
 800ab44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab48:	b10a      	cbz	r2, 800ab4e <_vfiprintf_r+0xa2>
 800ab4a:	2a25      	cmp	r2, #37	; 0x25
 800ab4c:	d1f9      	bne.n	800ab42 <_vfiprintf_r+0x96>
 800ab4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ab52:	d00b      	beq.n	800ab6c <_vfiprintf_r+0xc0>
 800ab54:	465b      	mov	r3, fp
 800ab56:	4622      	mov	r2, r4
 800ab58:	4629      	mov	r1, r5
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f7ff ff93 	bl	800aa86 <__sfputs_r>
 800ab60:	3001      	adds	r0, #1
 800ab62:	f000 80aa 	beq.w	800acba <_vfiprintf_r+0x20e>
 800ab66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab68:	445a      	add	r2, fp
 800ab6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ab6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f000 80a2 	beq.w	800acba <_vfiprintf_r+0x20e>
 800ab76:	2300      	movs	r3, #0
 800ab78:	f04f 32ff 	mov.w	r2, #4294967295
 800ab7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab80:	f10a 0a01 	add.w	sl, sl, #1
 800ab84:	9304      	str	r3, [sp, #16]
 800ab86:	9307      	str	r3, [sp, #28]
 800ab88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab8c:	931a      	str	r3, [sp, #104]	; 0x68
 800ab8e:	4654      	mov	r4, sl
 800ab90:	2205      	movs	r2, #5
 800ab92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab96:	4858      	ldr	r0, [pc, #352]	; (800acf8 <_vfiprintf_r+0x24c>)
 800ab98:	f001 fea0 	bl	800c8dc <memchr>
 800ab9c:	9a04      	ldr	r2, [sp, #16]
 800ab9e:	b9d8      	cbnz	r0, 800abd8 <_vfiprintf_r+0x12c>
 800aba0:	06d1      	lsls	r1, r2, #27
 800aba2:	bf44      	itt	mi
 800aba4:	2320      	movmi	r3, #32
 800aba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abaa:	0713      	lsls	r3, r2, #28
 800abac:	bf44      	itt	mi
 800abae:	232b      	movmi	r3, #43	; 0x2b
 800abb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abb4:	f89a 3000 	ldrb.w	r3, [sl]
 800abb8:	2b2a      	cmp	r3, #42	; 0x2a
 800abba:	d015      	beq.n	800abe8 <_vfiprintf_r+0x13c>
 800abbc:	4654      	mov	r4, sl
 800abbe:	2000      	movs	r0, #0
 800abc0:	f04f 0c0a 	mov.w	ip, #10
 800abc4:	9a07      	ldr	r2, [sp, #28]
 800abc6:	4621      	mov	r1, r4
 800abc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abcc:	3b30      	subs	r3, #48	; 0x30
 800abce:	2b09      	cmp	r3, #9
 800abd0:	d94e      	bls.n	800ac70 <_vfiprintf_r+0x1c4>
 800abd2:	b1b0      	cbz	r0, 800ac02 <_vfiprintf_r+0x156>
 800abd4:	9207      	str	r2, [sp, #28]
 800abd6:	e014      	b.n	800ac02 <_vfiprintf_r+0x156>
 800abd8:	eba0 0308 	sub.w	r3, r0, r8
 800abdc:	fa09 f303 	lsl.w	r3, r9, r3
 800abe0:	4313      	orrs	r3, r2
 800abe2:	46a2      	mov	sl, r4
 800abe4:	9304      	str	r3, [sp, #16]
 800abe6:	e7d2      	b.n	800ab8e <_vfiprintf_r+0xe2>
 800abe8:	9b03      	ldr	r3, [sp, #12]
 800abea:	1d19      	adds	r1, r3, #4
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	9103      	str	r1, [sp, #12]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	bfbb      	ittet	lt
 800abf4:	425b      	neglt	r3, r3
 800abf6:	f042 0202 	orrlt.w	r2, r2, #2
 800abfa:	9307      	strge	r3, [sp, #28]
 800abfc:	9307      	strlt	r3, [sp, #28]
 800abfe:	bfb8      	it	lt
 800ac00:	9204      	strlt	r2, [sp, #16]
 800ac02:	7823      	ldrb	r3, [r4, #0]
 800ac04:	2b2e      	cmp	r3, #46	; 0x2e
 800ac06:	d10c      	bne.n	800ac22 <_vfiprintf_r+0x176>
 800ac08:	7863      	ldrb	r3, [r4, #1]
 800ac0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ac0c:	d135      	bne.n	800ac7a <_vfiprintf_r+0x1ce>
 800ac0e:	9b03      	ldr	r3, [sp, #12]
 800ac10:	3402      	adds	r4, #2
 800ac12:	1d1a      	adds	r2, r3, #4
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	9203      	str	r2, [sp, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	bfb8      	it	lt
 800ac1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac20:	9305      	str	r3, [sp, #20]
 800ac22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad08 <_vfiprintf_r+0x25c>
 800ac26:	2203      	movs	r2, #3
 800ac28:	4650      	mov	r0, sl
 800ac2a:	7821      	ldrb	r1, [r4, #0]
 800ac2c:	f001 fe56 	bl	800c8dc <memchr>
 800ac30:	b140      	cbz	r0, 800ac44 <_vfiprintf_r+0x198>
 800ac32:	2340      	movs	r3, #64	; 0x40
 800ac34:	eba0 000a 	sub.w	r0, r0, sl
 800ac38:	fa03 f000 	lsl.w	r0, r3, r0
 800ac3c:	9b04      	ldr	r3, [sp, #16]
 800ac3e:	3401      	adds	r4, #1
 800ac40:	4303      	orrs	r3, r0
 800ac42:	9304      	str	r3, [sp, #16]
 800ac44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac48:	2206      	movs	r2, #6
 800ac4a:	482c      	ldr	r0, [pc, #176]	; (800acfc <_vfiprintf_r+0x250>)
 800ac4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac50:	f001 fe44 	bl	800c8dc <memchr>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d03f      	beq.n	800acd8 <_vfiprintf_r+0x22c>
 800ac58:	4b29      	ldr	r3, [pc, #164]	; (800ad00 <_vfiprintf_r+0x254>)
 800ac5a:	bb1b      	cbnz	r3, 800aca4 <_vfiprintf_r+0x1f8>
 800ac5c:	9b03      	ldr	r3, [sp, #12]
 800ac5e:	3307      	adds	r3, #7
 800ac60:	f023 0307 	bic.w	r3, r3, #7
 800ac64:	3308      	adds	r3, #8
 800ac66:	9303      	str	r3, [sp, #12]
 800ac68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac6a:	443b      	add	r3, r7
 800ac6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac6e:	e767      	b.n	800ab40 <_vfiprintf_r+0x94>
 800ac70:	460c      	mov	r4, r1
 800ac72:	2001      	movs	r0, #1
 800ac74:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac78:	e7a5      	b.n	800abc6 <_vfiprintf_r+0x11a>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	f04f 0c0a 	mov.w	ip, #10
 800ac80:	4619      	mov	r1, r3
 800ac82:	3401      	adds	r4, #1
 800ac84:	9305      	str	r3, [sp, #20]
 800ac86:	4620      	mov	r0, r4
 800ac88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac8c:	3a30      	subs	r2, #48	; 0x30
 800ac8e:	2a09      	cmp	r2, #9
 800ac90:	d903      	bls.n	800ac9a <_vfiprintf_r+0x1ee>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0c5      	beq.n	800ac22 <_vfiprintf_r+0x176>
 800ac96:	9105      	str	r1, [sp, #20]
 800ac98:	e7c3      	b.n	800ac22 <_vfiprintf_r+0x176>
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800aca2:	e7f0      	b.n	800ac86 <_vfiprintf_r+0x1da>
 800aca4:	ab03      	add	r3, sp, #12
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	462a      	mov	r2, r5
 800acaa:	4630      	mov	r0, r6
 800acac:	4b15      	ldr	r3, [pc, #84]	; (800ad04 <_vfiprintf_r+0x258>)
 800acae:	a904      	add	r1, sp, #16
 800acb0:	f000 f8ca 	bl	800ae48 <_printf_float>
 800acb4:	4607      	mov	r7, r0
 800acb6:	1c78      	adds	r0, r7, #1
 800acb8:	d1d6      	bne.n	800ac68 <_vfiprintf_r+0x1bc>
 800acba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acbc:	07d9      	lsls	r1, r3, #31
 800acbe:	d405      	bmi.n	800accc <_vfiprintf_r+0x220>
 800acc0:	89ab      	ldrh	r3, [r5, #12]
 800acc2:	059a      	lsls	r2, r3, #22
 800acc4:	d402      	bmi.n	800accc <_vfiprintf_r+0x220>
 800acc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acc8:	f001 fd9a 	bl	800c800 <__retarget_lock_release_recursive>
 800accc:	89ab      	ldrh	r3, [r5, #12]
 800acce:	065b      	lsls	r3, r3, #25
 800acd0:	f53f af12 	bmi.w	800aaf8 <_vfiprintf_r+0x4c>
 800acd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acd6:	e711      	b.n	800aafc <_vfiprintf_r+0x50>
 800acd8:	ab03      	add	r3, sp, #12
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	462a      	mov	r2, r5
 800acde:	4630      	mov	r0, r6
 800ace0:	4b08      	ldr	r3, [pc, #32]	; (800ad04 <_vfiprintf_r+0x258>)
 800ace2:	a904      	add	r1, sp, #16
 800ace4:	f000 fb4c 	bl	800b380 <_printf_i>
 800ace8:	e7e4      	b.n	800acb4 <_vfiprintf_r+0x208>
 800acea:	bf00      	nop
 800acec:	0800e4d8 	.word	0x0800e4d8
 800acf0:	0800e4f8 	.word	0x0800e4f8
 800acf4:	0800e4b8 	.word	0x0800e4b8
 800acf8:	0800e3dc 	.word	0x0800e3dc
 800acfc:	0800e3e6 	.word	0x0800e3e6
 800ad00:	0800ae49 	.word	0x0800ae49
 800ad04:	0800aa87 	.word	0x0800aa87
 800ad08:	0800e3e2 	.word	0x0800e3e2

0800ad0c <__cvt>:
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad12:	461f      	mov	r7, r3
 800ad14:	bfbb      	ittet	lt
 800ad16:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ad1a:	461f      	movlt	r7, r3
 800ad1c:	2300      	movge	r3, #0
 800ad1e:	232d      	movlt	r3, #45	; 0x2d
 800ad20:	b088      	sub	sp, #32
 800ad22:	4614      	mov	r4, r2
 800ad24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad26:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ad28:	7013      	strb	r3, [r2, #0]
 800ad2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad2c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ad30:	f023 0820 	bic.w	r8, r3, #32
 800ad34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad38:	d005      	beq.n	800ad46 <__cvt+0x3a>
 800ad3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ad3e:	d100      	bne.n	800ad42 <__cvt+0x36>
 800ad40:	3501      	adds	r5, #1
 800ad42:	2302      	movs	r3, #2
 800ad44:	e000      	b.n	800ad48 <__cvt+0x3c>
 800ad46:	2303      	movs	r3, #3
 800ad48:	aa07      	add	r2, sp, #28
 800ad4a:	9204      	str	r2, [sp, #16]
 800ad4c:	aa06      	add	r2, sp, #24
 800ad4e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ad52:	e9cd 3500 	strd	r3, r5, [sp]
 800ad56:	4622      	mov	r2, r4
 800ad58:	463b      	mov	r3, r7
 800ad5a:	f000 fda5 	bl	800b8a8 <_dtoa_r>
 800ad5e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ad62:	4606      	mov	r6, r0
 800ad64:	d102      	bne.n	800ad6c <__cvt+0x60>
 800ad66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad68:	07db      	lsls	r3, r3, #31
 800ad6a:	d522      	bpl.n	800adb2 <__cvt+0xa6>
 800ad6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad70:	eb06 0905 	add.w	r9, r6, r5
 800ad74:	d110      	bne.n	800ad98 <__cvt+0x8c>
 800ad76:	7833      	ldrb	r3, [r6, #0]
 800ad78:	2b30      	cmp	r3, #48	; 0x30
 800ad7a:	d10a      	bne.n	800ad92 <__cvt+0x86>
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	2300      	movs	r3, #0
 800ad80:	4620      	mov	r0, r4
 800ad82:	4639      	mov	r1, r7
 800ad84:	f7f5 fe80 	bl	8000a88 <__aeabi_dcmpeq>
 800ad88:	b918      	cbnz	r0, 800ad92 <__cvt+0x86>
 800ad8a:	f1c5 0501 	rsb	r5, r5, #1
 800ad8e:	f8ca 5000 	str.w	r5, [sl]
 800ad92:	f8da 3000 	ldr.w	r3, [sl]
 800ad96:	4499      	add	r9, r3
 800ad98:	2200      	movs	r2, #0
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	4639      	mov	r1, r7
 800ada0:	f7f5 fe72 	bl	8000a88 <__aeabi_dcmpeq>
 800ada4:	b108      	cbz	r0, 800adaa <__cvt+0x9e>
 800ada6:	f8cd 901c 	str.w	r9, [sp, #28]
 800adaa:	2230      	movs	r2, #48	; 0x30
 800adac:	9b07      	ldr	r3, [sp, #28]
 800adae:	454b      	cmp	r3, r9
 800adb0:	d307      	bcc.n	800adc2 <__cvt+0xb6>
 800adb2:	4630      	mov	r0, r6
 800adb4:	9b07      	ldr	r3, [sp, #28]
 800adb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800adb8:	1b9b      	subs	r3, r3, r6
 800adba:	6013      	str	r3, [r2, #0]
 800adbc:	b008      	add	sp, #32
 800adbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc2:	1c59      	adds	r1, r3, #1
 800adc4:	9107      	str	r1, [sp, #28]
 800adc6:	701a      	strb	r2, [r3, #0]
 800adc8:	e7f0      	b.n	800adac <__cvt+0xa0>

0800adca <__exponent>:
 800adca:	4603      	mov	r3, r0
 800adcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adce:	2900      	cmp	r1, #0
 800add0:	f803 2b02 	strb.w	r2, [r3], #2
 800add4:	bfb6      	itet	lt
 800add6:	222d      	movlt	r2, #45	; 0x2d
 800add8:	222b      	movge	r2, #43	; 0x2b
 800adda:	4249      	neglt	r1, r1
 800addc:	2909      	cmp	r1, #9
 800adde:	7042      	strb	r2, [r0, #1]
 800ade0:	dd2b      	ble.n	800ae3a <__exponent+0x70>
 800ade2:	f10d 0407 	add.w	r4, sp, #7
 800ade6:	46a4      	mov	ip, r4
 800ade8:	270a      	movs	r7, #10
 800adea:	fb91 f6f7 	sdiv	r6, r1, r7
 800adee:	460a      	mov	r2, r1
 800adf0:	46a6      	mov	lr, r4
 800adf2:	fb07 1516 	mls	r5, r7, r6, r1
 800adf6:	2a63      	cmp	r2, #99	; 0x63
 800adf8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800adfc:	4631      	mov	r1, r6
 800adfe:	f104 34ff 	add.w	r4, r4, #4294967295
 800ae02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ae06:	dcf0      	bgt.n	800adea <__exponent+0x20>
 800ae08:	3130      	adds	r1, #48	; 0x30
 800ae0a:	f1ae 0502 	sub.w	r5, lr, #2
 800ae0e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ae12:	4629      	mov	r1, r5
 800ae14:	1c44      	adds	r4, r0, #1
 800ae16:	4561      	cmp	r1, ip
 800ae18:	d30a      	bcc.n	800ae30 <__exponent+0x66>
 800ae1a:	f10d 0209 	add.w	r2, sp, #9
 800ae1e:	eba2 020e 	sub.w	r2, r2, lr
 800ae22:	4565      	cmp	r5, ip
 800ae24:	bf88      	it	hi
 800ae26:	2200      	movhi	r2, #0
 800ae28:	4413      	add	r3, r2
 800ae2a:	1a18      	subs	r0, r3, r0
 800ae2c:	b003      	add	sp, #12
 800ae2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae30:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae34:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ae38:	e7ed      	b.n	800ae16 <__exponent+0x4c>
 800ae3a:	2330      	movs	r3, #48	; 0x30
 800ae3c:	3130      	adds	r1, #48	; 0x30
 800ae3e:	7083      	strb	r3, [r0, #2]
 800ae40:	70c1      	strb	r1, [r0, #3]
 800ae42:	1d03      	adds	r3, r0, #4
 800ae44:	e7f1      	b.n	800ae2a <__exponent+0x60>
	...

0800ae48 <_printf_float>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	b091      	sub	sp, #68	; 0x44
 800ae4e:	460c      	mov	r4, r1
 800ae50:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800ae54:	4616      	mov	r6, r2
 800ae56:	461f      	mov	r7, r3
 800ae58:	4605      	mov	r5, r0
 800ae5a:	f001 fccb 	bl	800c7f4 <_localeconv_r>
 800ae5e:	6803      	ldr	r3, [r0, #0]
 800ae60:	4618      	mov	r0, r3
 800ae62:	9309      	str	r3, [sp, #36]	; 0x24
 800ae64:	f7f5 f9e4 	bl	8000230 <strlen>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	930e      	str	r3, [sp, #56]	; 0x38
 800ae6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ae70:	900a      	str	r0, [sp, #40]	; 0x28
 800ae72:	3307      	adds	r3, #7
 800ae74:	f023 0307 	bic.w	r3, r3, #7
 800ae78:	f103 0208 	add.w	r2, r3, #8
 800ae7c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ae80:	f8d4 b000 	ldr.w	fp, [r4]
 800ae84:	f8c8 2000 	str.w	r2, [r8]
 800ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae90:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800ae94:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ae98:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae9e:	4640      	mov	r0, r8
 800aea0:	4b9c      	ldr	r3, [pc, #624]	; (800b114 <_printf_float+0x2cc>)
 800aea2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aea4:	f7f5 fe22 	bl	8000aec <__aeabi_dcmpun>
 800aea8:	bb70      	cbnz	r0, 800af08 <_printf_float+0xc0>
 800aeaa:	f04f 32ff 	mov.w	r2, #4294967295
 800aeae:	4640      	mov	r0, r8
 800aeb0:	4b98      	ldr	r3, [pc, #608]	; (800b114 <_printf_float+0x2cc>)
 800aeb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aeb4:	f7f5 fdfc 	bl	8000ab0 <__aeabi_dcmple>
 800aeb8:	bb30      	cbnz	r0, 800af08 <_printf_float+0xc0>
 800aeba:	2200      	movs	r2, #0
 800aebc:	2300      	movs	r3, #0
 800aebe:	4640      	mov	r0, r8
 800aec0:	4651      	mov	r1, sl
 800aec2:	f7f5 fdeb 	bl	8000a9c <__aeabi_dcmplt>
 800aec6:	b110      	cbz	r0, 800aece <_printf_float+0x86>
 800aec8:	232d      	movs	r3, #45	; 0x2d
 800aeca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aece:	4b92      	ldr	r3, [pc, #584]	; (800b118 <_printf_float+0x2d0>)
 800aed0:	4892      	ldr	r0, [pc, #584]	; (800b11c <_printf_float+0x2d4>)
 800aed2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800aed6:	bf94      	ite	ls
 800aed8:	4698      	movls	r8, r3
 800aeda:	4680      	movhi	r8, r0
 800aedc:	2303      	movs	r3, #3
 800aede:	f04f 0a00 	mov.w	sl, #0
 800aee2:	6123      	str	r3, [r4, #16]
 800aee4:	f02b 0304 	bic.w	r3, fp, #4
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	4633      	mov	r3, r6
 800aeec:	4621      	mov	r1, r4
 800aeee:	4628      	mov	r0, r5
 800aef0:	9700      	str	r7, [sp, #0]
 800aef2:	aa0f      	add	r2, sp, #60	; 0x3c
 800aef4:	f000 f9d4 	bl	800b2a0 <_printf_common>
 800aef8:	3001      	adds	r0, #1
 800aefa:	f040 8090 	bne.w	800b01e <_printf_float+0x1d6>
 800aefe:	f04f 30ff 	mov.w	r0, #4294967295
 800af02:	b011      	add	sp, #68	; 0x44
 800af04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af08:	4642      	mov	r2, r8
 800af0a:	4653      	mov	r3, sl
 800af0c:	4640      	mov	r0, r8
 800af0e:	4651      	mov	r1, sl
 800af10:	f7f5 fdec 	bl	8000aec <__aeabi_dcmpun>
 800af14:	b148      	cbz	r0, 800af2a <_printf_float+0xe2>
 800af16:	f1ba 0f00 	cmp.w	sl, #0
 800af1a:	bfb8      	it	lt
 800af1c:	232d      	movlt	r3, #45	; 0x2d
 800af1e:	4880      	ldr	r0, [pc, #512]	; (800b120 <_printf_float+0x2d8>)
 800af20:	bfb8      	it	lt
 800af22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800af26:	4b7f      	ldr	r3, [pc, #508]	; (800b124 <_printf_float+0x2dc>)
 800af28:	e7d3      	b.n	800aed2 <_printf_float+0x8a>
 800af2a:	6863      	ldr	r3, [r4, #4]
 800af2c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800af30:	1c5a      	adds	r2, r3, #1
 800af32:	d142      	bne.n	800afba <_printf_float+0x172>
 800af34:	2306      	movs	r3, #6
 800af36:	6063      	str	r3, [r4, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	9206      	str	r2, [sp, #24]
 800af3c:	aa0e      	add	r2, sp, #56	; 0x38
 800af3e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800af42:	aa0d      	add	r2, sp, #52	; 0x34
 800af44:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800af48:	9203      	str	r2, [sp, #12]
 800af4a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800af4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800af52:	6023      	str	r3, [r4, #0]
 800af54:	6863      	ldr	r3, [r4, #4]
 800af56:	4642      	mov	r2, r8
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	4628      	mov	r0, r5
 800af5c:	4653      	mov	r3, sl
 800af5e:	910b      	str	r1, [sp, #44]	; 0x2c
 800af60:	f7ff fed4 	bl	800ad0c <__cvt>
 800af64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af66:	4680      	mov	r8, r0
 800af68:	2947      	cmp	r1, #71	; 0x47
 800af6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800af6c:	d108      	bne.n	800af80 <_printf_float+0x138>
 800af6e:	1cc8      	adds	r0, r1, #3
 800af70:	db02      	blt.n	800af78 <_printf_float+0x130>
 800af72:	6863      	ldr	r3, [r4, #4]
 800af74:	4299      	cmp	r1, r3
 800af76:	dd40      	ble.n	800affa <_printf_float+0x1b2>
 800af78:	f1a9 0902 	sub.w	r9, r9, #2
 800af7c:	fa5f f989 	uxtb.w	r9, r9
 800af80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800af84:	d81f      	bhi.n	800afc6 <_printf_float+0x17e>
 800af86:	464a      	mov	r2, r9
 800af88:	3901      	subs	r1, #1
 800af8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af8e:	910d      	str	r1, [sp, #52]	; 0x34
 800af90:	f7ff ff1b 	bl	800adca <__exponent>
 800af94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af96:	4682      	mov	sl, r0
 800af98:	1813      	adds	r3, r2, r0
 800af9a:	2a01      	cmp	r2, #1
 800af9c:	6123      	str	r3, [r4, #16]
 800af9e:	dc02      	bgt.n	800afa6 <_printf_float+0x15e>
 800afa0:	6822      	ldr	r2, [r4, #0]
 800afa2:	07d2      	lsls	r2, r2, #31
 800afa4:	d501      	bpl.n	800afaa <_printf_float+0x162>
 800afa6:	3301      	adds	r3, #1
 800afa8:	6123      	str	r3, [r4, #16]
 800afaa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d09b      	beq.n	800aeea <_printf_float+0xa2>
 800afb2:	232d      	movs	r3, #45	; 0x2d
 800afb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afb8:	e797      	b.n	800aeea <_printf_float+0xa2>
 800afba:	2947      	cmp	r1, #71	; 0x47
 800afbc:	d1bc      	bne.n	800af38 <_printf_float+0xf0>
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1ba      	bne.n	800af38 <_printf_float+0xf0>
 800afc2:	2301      	movs	r3, #1
 800afc4:	e7b7      	b.n	800af36 <_printf_float+0xee>
 800afc6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800afca:	d118      	bne.n	800affe <_printf_float+0x1b6>
 800afcc:	2900      	cmp	r1, #0
 800afce:	6863      	ldr	r3, [r4, #4]
 800afd0:	dd0b      	ble.n	800afea <_printf_float+0x1a2>
 800afd2:	6121      	str	r1, [r4, #16]
 800afd4:	b913      	cbnz	r3, 800afdc <_printf_float+0x194>
 800afd6:	6822      	ldr	r2, [r4, #0]
 800afd8:	07d0      	lsls	r0, r2, #31
 800afda:	d502      	bpl.n	800afe2 <_printf_float+0x19a>
 800afdc:	3301      	adds	r3, #1
 800afde:	440b      	add	r3, r1
 800afe0:	6123      	str	r3, [r4, #16]
 800afe2:	f04f 0a00 	mov.w	sl, #0
 800afe6:	65a1      	str	r1, [r4, #88]	; 0x58
 800afe8:	e7df      	b.n	800afaa <_printf_float+0x162>
 800afea:	b913      	cbnz	r3, 800aff2 <_printf_float+0x1aa>
 800afec:	6822      	ldr	r2, [r4, #0]
 800afee:	07d2      	lsls	r2, r2, #31
 800aff0:	d501      	bpl.n	800aff6 <_printf_float+0x1ae>
 800aff2:	3302      	adds	r3, #2
 800aff4:	e7f4      	b.n	800afe0 <_printf_float+0x198>
 800aff6:	2301      	movs	r3, #1
 800aff8:	e7f2      	b.n	800afe0 <_printf_float+0x198>
 800affa:	f04f 0967 	mov.w	r9, #103	; 0x67
 800affe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b000:	4299      	cmp	r1, r3
 800b002:	db05      	blt.n	800b010 <_printf_float+0x1c8>
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	6121      	str	r1, [r4, #16]
 800b008:	07d8      	lsls	r0, r3, #31
 800b00a:	d5ea      	bpl.n	800afe2 <_printf_float+0x19a>
 800b00c:	1c4b      	adds	r3, r1, #1
 800b00e:	e7e7      	b.n	800afe0 <_printf_float+0x198>
 800b010:	2900      	cmp	r1, #0
 800b012:	bfcc      	ite	gt
 800b014:	2201      	movgt	r2, #1
 800b016:	f1c1 0202 	rsble	r2, r1, #2
 800b01a:	4413      	add	r3, r2
 800b01c:	e7e0      	b.n	800afe0 <_printf_float+0x198>
 800b01e:	6823      	ldr	r3, [r4, #0]
 800b020:	055a      	lsls	r2, r3, #21
 800b022:	d407      	bmi.n	800b034 <_printf_float+0x1ec>
 800b024:	6923      	ldr	r3, [r4, #16]
 800b026:	4642      	mov	r2, r8
 800b028:	4631      	mov	r1, r6
 800b02a:	4628      	mov	r0, r5
 800b02c:	47b8      	blx	r7
 800b02e:	3001      	adds	r0, #1
 800b030:	d12b      	bne.n	800b08a <_printf_float+0x242>
 800b032:	e764      	b.n	800aefe <_printf_float+0xb6>
 800b034:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b038:	f240 80dd 	bls.w	800b1f6 <_printf_float+0x3ae>
 800b03c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b040:	2200      	movs	r2, #0
 800b042:	2300      	movs	r3, #0
 800b044:	f7f5 fd20 	bl	8000a88 <__aeabi_dcmpeq>
 800b048:	2800      	cmp	r0, #0
 800b04a:	d033      	beq.n	800b0b4 <_printf_float+0x26c>
 800b04c:	2301      	movs	r3, #1
 800b04e:	4631      	mov	r1, r6
 800b050:	4628      	mov	r0, r5
 800b052:	4a35      	ldr	r2, [pc, #212]	; (800b128 <_printf_float+0x2e0>)
 800b054:	47b8      	blx	r7
 800b056:	3001      	adds	r0, #1
 800b058:	f43f af51 	beq.w	800aefe <_printf_float+0xb6>
 800b05c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b060:	429a      	cmp	r2, r3
 800b062:	db02      	blt.n	800b06a <_printf_float+0x222>
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	07d8      	lsls	r0, r3, #31
 800b068:	d50f      	bpl.n	800b08a <_printf_float+0x242>
 800b06a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b06e:	4631      	mov	r1, r6
 800b070:	4628      	mov	r0, r5
 800b072:	47b8      	blx	r7
 800b074:	3001      	adds	r0, #1
 800b076:	f43f af42 	beq.w	800aefe <_printf_float+0xb6>
 800b07a:	f04f 0800 	mov.w	r8, #0
 800b07e:	f104 091a 	add.w	r9, r4, #26
 800b082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b084:	3b01      	subs	r3, #1
 800b086:	4543      	cmp	r3, r8
 800b088:	dc09      	bgt.n	800b09e <_printf_float+0x256>
 800b08a:	6823      	ldr	r3, [r4, #0]
 800b08c:	079b      	lsls	r3, r3, #30
 800b08e:	f100 8102 	bmi.w	800b296 <_printf_float+0x44e>
 800b092:	68e0      	ldr	r0, [r4, #12]
 800b094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b096:	4298      	cmp	r0, r3
 800b098:	bfb8      	it	lt
 800b09a:	4618      	movlt	r0, r3
 800b09c:	e731      	b.n	800af02 <_printf_float+0xba>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	464a      	mov	r2, r9
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	47b8      	blx	r7
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	f43f af28 	beq.w	800aefe <_printf_float+0xb6>
 800b0ae:	f108 0801 	add.w	r8, r8, #1
 800b0b2:	e7e6      	b.n	800b082 <_printf_float+0x23a>
 800b0b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	dc38      	bgt.n	800b12c <_printf_float+0x2e4>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4628      	mov	r0, r5
 800b0c0:	4a19      	ldr	r2, [pc, #100]	; (800b128 <_printf_float+0x2e0>)
 800b0c2:	47b8      	blx	r7
 800b0c4:	3001      	adds	r0, #1
 800b0c6:	f43f af1a 	beq.w	800aefe <_printf_float+0xb6>
 800b0ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	d102      	bne.n	800b0d8 <_printf_float+0x290>
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	07d9      	lsls	r1, r3, #31
 800b0d6:	d5d8      	bpl.n	800b08a <_printf_float+0x242>
 800b0d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0dc:	4631      	mov	r1, r6
 800b0de:	4628      	mov	r0, r5
 800b0e0:	47b8      	blx	r7
 800b0e2:	3001      	adds	r0, #1
 800b0e4:	f43f af0b 	beq.w	800aefe <_printf_float+0xb6>
 800b0e8:	f04f 0900 	mov.w	r9, #0
 800b0ec:	f104 0a1a 	add.w	sl, r4, #26
 800b0f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0f2:	425b      	negs	r3, r3
 800b0f4:	454b      	cmp	r3, r9
 800b0f6:	dc01      	bgt.n	800b0fc <_printf_float+0x2b4>
 800b0f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0fa:	e794      	b.n	800b026 <_printf_float+0x1de>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	4652      	mov	r2, sl
 800b100:	4631      	mov	r1, r6
 800b102:	4628      	mov	r0, r5
 800b104:	47b8      	blx	r7
 800b106:	3001      	adds	r0, #1
 800b108:	f43f aef9 	beq.w	800aefe <_printf_float+0xb6>
 800b10c:	f109 0901 	add.w	r9, r9, #1
 800b110:	e7ee      	b.n	800b0f0 <_printf_float+0x2a8>
 800b112:	bf00      	nop
 800b114:	7fefffff 	.word	0x7fefffff
 800b118:	0800e3ed 	.word	0x0800e3ed
 800b11c:	0800e3f1 	.word	0x0800e3f1
 800b120:	0800e3f9 	.word	0x0800e3f9
 800b124:	0800e3f5 	.word	0x0800e3f5
 800b128:	0800e3fd 	.word	0x0800e3fd
 800b12c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b12e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b130:	429a      	cmp	r2, r3
 800b132:	bfa8      	it	ge
 800b134:	461a      	movge	r2, r3
 800b136:	2a00      	cmp	r2, #0
 800b138:	4691      	mov	r9, r2
 800b13a:	dc37      	bgt.n	800b1ac <_printf_float+0x364>
 800b13c:	f04f 0b00 	mov.w	fp, #0
 800b140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b144:	f104 021a 	add.w	r2, r4, #26
 800b148:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b14c:	ebaa 0309 	sub.w	r3, sl, r9
 800b150:	455b      	cmp	r3, fp
 800b152:	dc33      	bgt.n	800b1bc <_printf_float+0x374>
 800b154:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b158:	429a      	cmp	r2, r3
 800b15a:	db3b      	blt.n	800b1d4 <_printf_float+0x38c>
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	07da      	lsls	r2, r3, #31
 800b160:	d438      	bmi.n	800b1d4 <_printf_float+0x38c>
 800b162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b164:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b166:	eba2 030a 	sub.w	r3, r2, sl
 800b16a:	eba2 0901 	sub.w	r9, r2, r1
 800b16e:	4599      	cmp	r9, r3
 800b170:	bfa8      	it	ge
 800b172:	4699      	movge	r9, r3
 800b174:	f1b9 0f00 	cmp.w	r9, #0
 800b178:	dc34      	bgt.n	800b1e4 <_printf_float+0x39c>
 800b17a:	f04f 0800 	mov.w	r8, #0
 800b17e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b182:	f104 0a1a 	add.w	sl, r4, #26
 800b186:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b18a:	1a9b      	subs	r3, r3, r2
 800b18c:	eba3 0309 	sub.w	r3, r3, r9
 800b190:	4543      	cmp	r3, r8
 800b192:	f77f af7a 	ble.w	800b08a <_printf_float+0x242>
 800b196:	2301      	movs	r3, #1
 800b198:	4652      	mov	r2, sl
 800b19a:	4631      	mov	r1, r6
 800b19c:	4628      	mov	r0, r5
 800b19e:	47b8      	blx	r7
 800b1a0:	3001      	adds	r0, #1
 800b1a2:	f43f aeac 	beq.w	800aefe <_printf_float+0xb6>
 800b1a6:	f108 0801 	add.w	r8, r8, #1
 800b1aa:	e7ec      	b.n	800b186 <_printf_float+0x33e>
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	4631      	mov	r1, r6
 800b1b0:	4642      	mov	r2, r8
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	47b8      	blx	r7
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	d1c0      	bne.n	800b13c <_printf_float+0x2f4>
 800b1ba:	e6a0      	b.n	800aefe <_printf_float+0xb6>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	4631      	mov	r1, r6
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	920b      	str	r2, [sp, #44]	; 0x2c
 800b1c4:	47b8      	blx	r7
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	f43f ae99 	beq.w	800aefe <_printf_float+0xb6>
 800b1cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1ce:	f10b 0b01 	add.w	fp, fp, #1
 800b1d2:	e7b9      	b.n	800b148 <_printf_float+0x300>
 800b1d4:	4631      	mov	r1, r6
 800b1d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1da:	4628      	mov	r0, r5
 800b1dc:	47b8      	blx	r7
 800b1de:	3001      	adds	r0, #1
 800b1e0:	d1bf      	bne.n	800b162 <_printf_float+0x31a>
 800b1e2:	e68c      	b.n	800aefe <_printf_float+0xb6>
 800b1e4:	464b      	mov	r3, r9
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	eb08 020a 	add.w	r2, r8, sl
 800b1ee:	47b8      	blx	r7
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	d1c2      	bne.n	800b17a <_printf_float+0x332>
 800b1f4:	e683      	b.n	800aefe <_printf_float+0xb6>
 800b1f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1f8:	2a01      	cmp	r2, #1
 800b1fa:	dc01      	bgt.n	800b200 <_printf_float+0x3b8>
 800b1fc:	07db      	lsls	r3, r3, #31
 800b1fe:	d537      	bpl.n	800b270 <_printf_float+0x428>
 800b200:	2301      	movs	r3, #1
 800b202:	4642      	mov	r2, r8
 800b204:	4631      	mov	r1, r6
 800b206:	4628      	mov	r0, r5
 800b208:	47b8      	blx	r7
 800b20a:	3001      	adds	r0, #1
 800b20c:	f43f ae77 	beq.w	800aefe <_printf_float+0xb6>
 800b210:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b214:	4631      	mov	r1, r6
 800b216:	4628      	mov	r0, r5
 800b218:	47b8      	blx	r7
 800b21a:	3001      	adds	r0, #1
 800b21c:	f43f ae6f 	beq.w	800aefe <_printf_float+0xb6>
 800b220:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b224:	2200      	movs	r2, #0
 800b226:	2300      	movs	r3, #0
 800b228:	f7f5 fc2e 	bl	8000a88 <__aeabi_dcmpeq>
 800b22c:	b9d8      	cbnz	r0, 800b266 <_printf_float+0x41e>
 800b22e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b230:	f108 0201 	add.w	r2, r8, #1
 800b234:	3b01      	subs	r3, #1
 800b236:	4631      	mov	r1, r6
 800b238:	4628      	mov	r0, r5
 800b23a:	47b8      	blx	r7
 800b23c:	3001      	adds	r0, #1
 800b23e:	d10e      	bne.n	800b25e <_printf_float+0x416>
 800b240:	e65d      	b.n	800aefe <_printf_float+0xb6>
 800b242:	2301      	movs	r3, #1
 800b244:	464a      	mov	r2, r9
 800b246:	4631      	mov	r1, r6
 800b248:	4628      	mov	r0, r5
 800b24a:	47b8      	blx	r7
 800b24c:	3001      	adds	r0, #1
 800b24e:	f43f ae56 	beq.w	800aefe <_printf_float+0xb6>
 800b252:	f108 0801 	add.w	r8, r8, #1
 800b256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b258:	3b01      	subs	r3, #1
 800b25a:	4543      	cmp	r3, r8
 800b25c:	dcf1      	bgt.n	800b242 <_printf_float+0x3fa>
 800b25e:	4653      	mov	r3, sl
 800b260:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b264:	e6e0      	b.n	800b028 <_printf_float+0x1e0>
 800b266:	f04f 0800 	mov.w	r8, #0
 800b26a:	f104 091a 	add.w	r9, r4, #26
 800b26e:	e7f2      	b.n	800b256 <_printf_float+0x40e>
 800b270:	2301      	movs	r3, #1
 800b272:	4642      	mov	r2, r8
 800b274:	e7df      	b.n	800b236 <_printf_float+0x3ee>
 800b276:	2301      	movs	r3, #1
 800b278:	464a      	mov	r2, r9
 800b27a:	4631      	mov	r1, r6
 800b27c:	4628      	mov	r0, r5
 800b27e:	47b8      	blx	r7
 800b280:	3001      	adds	r0, #1
 800b282:	f43f ae3c 	beq.w	800aefe <_printf_float+0xb6>
 800b286:	f108 0801 	add.w	r8, r8, #1
 800b28a:	68e3      	ldr	r3, [r4, #12]
 800b28c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b28e:	1a5b      	subs	r3, r3, r1
 800b290:	4543      	cmp	r3, r8
 800b292:	dcf0      	bgt.n	800b276 <_printf_float+0x42e>
 800b294:	e6fd      	b.n	800b092 <_printf_float+0x24a>
 800b296:	f04f 0800 	mov.w	r8, #0
 800b29a:	f104 0919 	add.w	r9, r4, #25
 800b29e:	e7f4      	b.n	800b28a <_printf_float+0x442>

0800b2a0 <_printf_common>:
 800b2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a4:	4616      	mov	r6, r2
 800b2a6:	4699      	mov	r9, r3
 800b2a8:	688a      	ldr	r2, [r1, #8]
 800b2aa:	690b      	ldr	r3, [r1, #16]
 800b2ac:	4607      	mov	r7, r0
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	bfb8      	it	lt
 800b2b2:	4613      	movlt	r3, r2
 800b2b4:	6033      	str	r3, [r6, #0]
 800b2b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2c0:	b10a      	cbz	r2, 800b2c6 <_printf_common+0x26>
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	6033      	str	r3, [r6, #0]
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	0699      	lsls	r1, r3, #26
 800b2ca:	bf42      	ittt	mi
 800b2cc:	6833      	ldrmi	r3, [r6, #0]
 800b2ce:	3302      	addmi	r3, #2
 800b2d0:	6033      	strmi	r3, [r6, #0]
 800b2d2:	6825      	ldr	r5, [r4, #0]
 800b2d4:	f015 0506 	ands.w	r5, r5, #6
 800b2d8:	d106      	bne.n	800b2e8 <_printf_common+0x48>
 800b2da:	f104 0a19 	add.w	sl, r4, #25
 800b2de:	68e3      	ldr	r3, [r4, #12]
 800b2e0:	6832      	ldr	r2, [r6, #0]
 800b2e2:	1a9b      	subs	r3, r3, r2
 800b2e4:	42ab      	cmp	r3, r5
 800b2e6:	dc28      	bgt.n	800b33a <_printf_common+0x9a>
 800b2e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2ec:	1e13      	subs	r3, r2, #0
 800b2ee:	6822      	ldr	r2, [r4, #0]
 800b2f0:	bf18      	it	ne
 800b2f2:	2301      	movne	r3, #1
 800b2f4:	0692      	lsls	r2, r2, #26
 800b2f6:	d42d      	bmi.n	800b354 <_printf_common+0xb4>
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b300:	47c0      	blx	r8
 800b302:	3001      	adds	r0, #1
 800b304:	d020      	beq.n	800b348 <_printf_common+0xa8>
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	68e5      	ldr	r5, [r4, #12]
 800b30a:	f003 0306 	and.w	r3, r3, #6
 800b30e:	2b04      	cmp	r3, #4
 800b310:	bf18      	it	ne
 800b312:	2500      	movne	r5, #0
 800b314:	6832      	ldr	r2, [r6, #0]
 800b316:	f04f 0600 	mov.w	r6, #0
 800b31a:	68a3      	ldr	r3, [r4, #8]
 800b31c:	bf08      	it	eq
 800b31e:	1aad      	subeq	r5, r5, r2
 800b320:	6922      	ldr	r2, [r4, #16]
 800b322:	bf08      	it	eq
 800b324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b328:	4293      	cmp	r3, r2
 800b32a:	bfc4      	itt	gt
 800b32c:	1a9b      	subgt	r3, r3, r2
 800b32e:	18ed      	addgt	r5, r5, r3
 800b330:	341a      	adds	r4, #26
 800b332:	42b5      	cmp	r5, r6
 800b334:	d11a      	bne.n	800b36c <_printf_common+0xcc>
 800b336:	2000      	movs	r0, #0
 800b338:	e008      	b.n	800b34c <_printf_common+0xac>
 800b33a:	2301      	movs	r3, #1
 800b33c:	4652      	mov	r2, sl
 800b33e:	4649      	mov	r1, r9
 800b340:	4638      	mov	r0, r7
 800b342:	47c0      	blx	r8
 800b344:	3001      	adds	r0, #1
 800b346:	d103      	bne.n	800b350 <_printf_common+0xb0>
 800b348:	f04f 30ff 	mov.w	r0, #4294967295
 800b34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b350:	3501      	adds	r5, #1
 800b352:	e7c4      	b.n	800b2de <_printf_common+0x3e>
 800b354:	2030      	movs	r0, #48	; 0x30
 800b356:	18e1      	adds	r1, r4, r3
 800b358:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b35c:	1c5a      	adds	r2, r3, #1
 800b35e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b362:	4422      	add	r2, r4
 800b364:	3302      	adds	r3, #2
 800b366:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b36a:	e7c5      	b.n	800b2f8 <_printf_common+0x58>
 800b36c:	2301      	movs	r3, #1
 800b36e:	4622      	mov	r2, r4
 800b370:	4649      	mov	r1, r9
 800b372:	4638      	mov	r0, r7
 800b374:	47c0      	blx	r8
 800b376:	3001      	adds	r0, #1
 800b378:	d0e6      	beq.n	800b348 <_printf_common+0xa8>
 800b37a:	3601      	adds	r6, #1
 800b37c:	e7d9      	b.n	800b332 <_printf_common+0x92>
	...

0800b380 <_printf_i>:
 800b380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b384:	460c      	mov	r4, r1
 800b386:	7e27      	ldrb	r7, [r4, #24]
 800b388:	4691      	mov	r9, r2
 800b38a:	2f78      	cmp	r7, #120	; 0x78
 800b38c:	4680      	mov	r8, r0
 800b38e:	469a      	mov	sl, r3
 800b390:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b396:	d807      	bhi.n	800b3a8 <_printf_i+0x28>
 800b398:	2f62      	cmp	r7, #98	; 0x62
 800b39a:	d80a      	bhi.n	800b3b2 <_printf_i+0x32>
 800b39c:	2f00      	cmp	r7, #0
 800b39e:	f000 80d9 	beq.w	800b554 <_printf_i+0x1d4>
 800b3a2:	2f58      	cmp	r7, #88	; 0x58
 800b3a4:	f000 80a4 	beq.w	800b4f0 <_printf_i+0x170>
 800b3a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b3ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3b0:	e03a      	b.n	800b428 <_printf_i+0xa8>
 800b3b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3b6:	2b15      	cmp	r3, #21
 800b3b8:	d8f6      	bhi.n	800b3a8 <_printf_i+0x28>
 800b3ba:	a001      	add	r0, pc, #4	; (adr r0, 800b3c0 <_printf_i+0x40>)
 800b3bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b3c0:	0800b419 	.word	0x0800b419
 800b3c4:	0800b42d 	.word	0x0800b42d
 800b3c8:	0800b3a9 	.word	0x0800b3a9
 800b3cc:	0800b3a9 	.word	0x0800b3a9
 800b3d0:	0800b3a9 	.word	0x0800b3a9
 800b3d4:	0800b3a9 	.word	0x0800b3a9
 800b3d8:	0800b42d 	.word	0x0800b42d
 800b3dc:	0800b3a9 	.word	0x0800b3a9
 800b3e0:	0800b3a9 	.word	0x0800b3a9
 800b3e4:	0800b3a9 	.word	0x0800b3a9
 800b3e8:	0800b3a9 	.word	0x0800b3a9
 800b3ec:	0800b53b 	.word	0x0800b53b
 800b3f0:	0800b45d 	.word	0x0800b45d
 800b3f4:	0800b51d 	.word	0x0800b51d
 800b3f8:	0800b3a9 	.word	0x0800b3a9
 800b3fc:	0800b3a9 	.word	0x0800b3a9
 800b400:	0800b55d 	.word	0x0800b55d
 800b404:	0800b3a9 	.word	0x0800b3a9
 800b408:	0800b45d 	.word	0x0800b45d
 800b40c:	0800b3a9 	.word	0x0800b3a9
 800b410:	0800b3a9 	.word	0x0800b3a9
 800b414:	0800b525 	.word	0x0800b525
 800b418:	680b      	ldr	r3, [r1, #0]
 800b41a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b41e:	1d1a      	adds	r2, r3, #4
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	600a      	str	r2, [r1, #0]
 800b424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b428:	2301      	movs	r3, #1
 800b42a:	e0a4      	b.n	800b576 <_printf_i+0x1f6>
 800b42c:	6825      	ldr	r5, [r4, #0]
 800b42e:	6808      	ldr	r0, [r1, #0]
 800b430:	062e      	lsls	r6, r5, #24
 800b432:	f100 0304 	add.w	r3, r0, #4
 800b436:	d50a      	bpl.n	800b44e <_printf_i+0xce>
 800b438:	6805      	ldr	r5, [r0, #0]
 800b43a:	600b      	str	r3, [r1, #0]
 800b43c:	2d00      	cmp	r5, #0
 800b43e:	da03      	bge.n	800b448 <_printf_i+0xc8>
 800b440:	232d      	movs	r3, #45	; 0x2d
 800b442:	426d      	negs	r5, r5
 800b444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b448:	230a      	movs	r3, #10
 800b44a:	485e      	ldr	r0, [pc, #376]	; (800b5c4 <_printf_i+0x244>)
 800b44c:	e019      	b.n	800b482 <_printf_i+0x102>
 800b44e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b452:	6805      	ldr	r5, [r0, #0]
 800b454:	600b      	str	r3, [r1, #0]
 800b456:	bf18      	it	ne
 800b458:	b22d      	sxthne	r5, r5
 800b45a:	e7ef      	b.n	800b43c <_printf_i+0xbc>
 800b45c:	680b      	ldr	r3, [r1, #0]
 800b45e:	6825      	ldr	r5, [r4, #0]
 800b460:	1d18      	adds	r0, r3, #4
 800b462:	6008      	str	r0, [r1, #0]
 800b464:	0628      	lsls	r0, r5, #24
 800b466:	d501      	bpl.n	800b46c <_printf_i+0xec>
 800b468:	681d      	ldr	r5, [r3, #0]
 800b46a:	e002      	b.n	800b472 <_printf_i+0xf2>
 800b46c:	0669      	lsls	r1, r5, #25
 800b46e:	d5fb      	bpl.n	800b468 <_printf_i+0xe8>
 800b470:	881d      	ldrh	r5, [r3, #0]
 800b472:	2f6f      	cmp	r7, #111	; 0x6f
 800b474:	bf0c      	ite	eq
 800b476:	2308      	moveq	r3, #8
 800b478:	230a      	movne	r3, #10
 800b47a:	4852      	ldr	r0, [pc, #328]	; (800b5c4 <_printf_i+0x244>)
 800b47c:	2100      	movs	r1, #0
 800b47e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b482:	6866      	ldr	r6, [r4, #4]
 800b484:	2e00      	cmp	r6, #0
 800b486:	bfa8      	it	ge
 800b488:	6821      	ldrge	r1, [r4, #0]
 800b48a:	60a6      	str	r6, [r4, #8]
 800b48c:	bfa4      	itt	ge
 800b48e:	f021 0104 	bicge.w	r1, r1, #4
 800b492:	6021      	strge	r1, [r4, #0]
 800b494:	b90d      	cbnz	r5, 800b49a <_printf_i+0x11a>
 800b496:	2e00      	cmp	r6, #0
 800b498:	d04d      	beq.n	800b536 <_printf_i+0x1b6>
 800b49a:	4616      	mov	r6, r2
 800b49c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4a0:	fb03 5711 	mls	r7, r3, r1, r5
 800b4a4:	5dc7      	ldrb	r7, [r0, r7]
 800b4a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4aa:	462f      	mov	r7, r5
 800b4ac:	42bb      	cmp	r3, r7
 800b4ae:	460d      	mov	r5, r1
 800b4b0:	d9f4      	bls.n	800b49c <_printf_i+0x11c>
 800b4b2:	2b08      	cmp	r3, #8
 800b4b4:	d10b      	bne.n	800b4ce <_printf_i+0x14e>
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	07df      	lsls	r7, r3, #31
 800b4ba:	d508      	bpl.n	800b4ce <_printf_i+0x14e>
 800b4bc:	6923      	ldr	r3, [r4, #16]
 800b4be:	6861      	ldr	r1, [r4, #4]
 800b4c0:	4299      	cmp	r1, r3
 800b4c2:	bfde      	ittt	le
 800b4c4:	2330      	movle	r3, #48	; 0x30
 800b4c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4ce:	1b92      	subs	r2, r2, r6
 800b4d0:	6122      	str	r2, [r4, #16]
 800b4d2:	464b      	mov	r3, r9
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	4640      	mov	r0, r8
 800b4d8:	f8cd a000 	str.w	sl, [sp]
 800b4dc:	aa03      	add	r2, sp, #12
 800b4de:	f7ff fedf 	bl	800b2a0 <_printf_common>
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	d14c      	bne.n	800b580 <_printf_i+0x200>
 800b4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ea:	b004      	add	sp, #16
 800b4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f0:	4834      	ldr	r0, [pc, #208]	; (800b5c4 <_printf_i+0x244>)
 800b4f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b4f6:	680e      	ldr	r6, [r1, #0]
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800b4fe:	061f      	lsls	r7, r3, #24
 800b500:	600e      	str	r6, [r1, #0]
 800b502:	d514      	bpl.n	800b52e <_printf_i+0x1ae>
 800b504:	07d9      	lsls	r1, r3, #31
 800b506:	bf44      	itt	mi
 800b508:	f043 0320 	orrmi.w	r3, r3, #32
 800b50c:	6023      	strmi	r3, [r4, #0]
 800b50e:	b91d      	cbnz	r5, 800b518 <_printf_i+0x198>
 800b510:	6823      	ldr	r3, [r4, #0]
 800b512:	f023 0320 	bic.w	r3, r3, #32
 800b516:	6023      	str	r3, [r4, #0]
 800b518:	2310      	movs	r3, #16
 800b51a:	e7af      	b.n	800b47c <_printf_i+0xfc>
 800b51c:	6823      	ldr	r3, [r4, #0]
 800b51e:	f043 0320 	orr.w	r3, r3, #32
 800b522:	6023      	str	r3, [r4, #0]
 800b524:	2378      	movs	r3, #120	; 0x78
 800b526:	4828      	ldr	r0, [pc, #160]	; (800b5c8 <_printf_i+0x248>)
 800b528:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b52c:	e7e3      	b.n	800b4f6 <_printf_i+0x176>
 800b52e:	065e      	lsls	r6, r3, #25
 800b530:	bf48      	it	mi
 800b532:	b2ad      	uxthmi	r5, r5
 800b534:	e7e6      	b.n	800b504 <_printf_i+0x184>
 800b536:	4616      	mov	r6, r2
 800b538:	e7bb      	b.n	800b4b2 <_printf_i+0x132>
 800b53a:	680b      	ldr	r3, [r1, #0]
 800b53c:	6826      	ldr	r6, [r4, #0]
 800b53e:	1d1d      	adds	r5, r3, #4
 800b540:	6960      	ldr	r0, [r4, #20]
 800b542:	600d      	str	r5, [r1, #0]
 800b544:	0635      	lsls	r5, r6, #24
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	d501      	bpl.n	800b54e <_printf_i+0x1ce>
 800b54a:	6018      	str	r0, [r3, #0]
 800b54c:	e002      	b.n	800b554 <_printf_i+0x1d4>
 800b54e:	0671      	lsls	r1, r6, #25
 800b550:	d5fb      	bpl.n	800b54a <_printf_i+0x1ca>
 800b552:	8018      	strh	r0, [r3, #0]
 800b554:	2300      	movs	r3, #0
 800b556:	4616      	mov	r6, r2
 800b558:	6123      	str	r3, [r4, #16]
 800b55a:	e7ba      	b.n	800b4d2 <_printf_i+0x152>
 800b55c:	680b      	ldr	r3, [r1, #0]
 800b55e:	1d1a      	adds	r2, r3, #4
 800b560:	600a      	str	r2, [r1, #0]
 800b562:	681e      	ldr	r6, [r3, #0]
 800b564:	2100      	movs	r1, #0
 800b566:	4630      	mov	r0, r6
 800b568:	6862      	ldr	r2, [r4, #4]
 800b56a:	f001 f9b7 	bl	800c8dc <memchr>
 800b56e:	b108      	cbz	r0, 800b574 <_printf_i+0x1f4>
 800b570:	1b80      	subs	r0, r0, r6
 800b572:	6060      	str	r0, [r4, #4]
 800b574:	6863      	ldr	r3, [r4, #4]
 800b576:	6123      	str	r3, [r4, #16]
 800b578:	2300      	movs	r3, #0
 800b57a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b57e:	e7a8      	b.n	800b4d2 <_printf_i+0x152>
 800b580:	4632      	mov	r2, r6
 800b582:	4649      	mov	r1, r9
 800b584:	4640      	mov	r0, r8
 800b586:	6923      	ldr	r3, [r4, #16]
 800b588:	47d0      	blx	sl
 800b58a:	3001      	adds	r0, #1
 800b58c:	d0ab      	beq.n	800b4e6 <_printf_i+0x166>
 800b58e:	6823      	ldr	r3, [r4, #0]
 800b590:	079b      	lsls	r3, r3, #30
 800b592:	d413      	bmi.n	800b5bc <_printf_i+0x23c>
 800b594:	68e0      	ldr	r0, [r4, #12]
 800b596:	9b03      	ldr	r3, [sp, #12]
 800b598:	4298      	cmp	r0, r3
 800b59a:	bfb8      	it	lt
 800b59c:	4618      	movlt	r0, r3
 800b59e:	e7a4      	b.n	800b4ea <_printf_i+0x16a>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	4632      	mov	r2, r6
 800b5a4:	4649      	mov	r1, r9
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	47d0      	blx	sl
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	d09b      	beq.n	800b4e6 <_printf_i+0x166>
 800b5ae:	3501      	adds	r5, #1
 800b5b0:	68e3      	ldr	r3, [r4, #12]
 800b5b2:	9903      	ldr	r1, [sp, #12]
 800b5b4:	1a5b      	subs	r3, r3, r1
 800b5b6:	42ab      	cmp	r3, r5
 800b5b8:	dcf2      	bgt.n	800b5a0 <_printf_i+0x220>
 800b5ba:	e7eb      	b.n	800b594 <_printf_i+0x214>
 800b5bc:	2500      	movs	r5, #0
 800b5be:	f104 0619 	add.w	r6, r4, #25
 800b5c2:	e7f5      	b.n	800b5b0 <_printf_i+0x230>
 800b5c4:	0800e3ff 	.word	0x0800e3ff
 800b5c8:	0800e410 	.word	0x0800e410

0800b5cc <iprintf>:
 800b5cc:	b40f      	push	{r0, r1, r2, r3}
 800b5ce:	4b0a      	ldr	r3, [pc, #40]	; (800b5f8 <iprintf+0x2c>)
 800b5d0:	b513      	push	{r0, r1, r4, lr}
 800b5d2:	681c      	ldr	r4, [r3, #0]
 800b5d4:	b124      	cbz	r4, 800b5e0 <iprintf+0x14>
 800b5d6:	69a3      	ldr	r3, [r4, #24]
 800b5d8:	b913      	cbnz	r3, 800b5e0 <iprintf+0x14>
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f001 f86c 	bl	800c6b8 <__sinit>
 800b5e0:	ab05      	add	r3, sp, #20
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	9a04      	ldr	r2, [sp, #16]
 800b5e6:	68a1      	ldr	r1, [r4, #8]
 800b5e8:	9301      	str	r3, [sp, #4]
 800b5ea:	f7ff fa5f 	bl	800aaac <_vfiprintf_r>
 800b5ee:	b002      	add	sp, #8
 800b5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5f4:	b004      	add	sp, #16
 800b5f6:	4770      	bx	lr
 800b5f8:	20000014 	.word	0x20000014

0800b5fc <__swbuf_r>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	460e      	mov	r6, r1
 800b600:	4614      	mov	r4, r2
 800b602:	4605      	mov	r5, r0
 800b604:	b118      	cbz	r0, 800b60e <__swbuf_r+0x12>
 800b606:	6983      	ldr	r3, [r0, #24]
 800b608:	b90b      	cbnz	r3, 800b60e <__swbuf_r+0x12>
 800b60a:	f001 f855 	bl	800c6b8 <__sinit>
 800b60e:	4b21      	ldr	r3, [pc, #132]	; (800b694 <__swbuf_r+0x98>)
 800b610:	429c      	cmp	r4, r3
 800b612:	d12b      	bne.n	800b66c <__swbuf_r+0x70>
 800b614:	686c      	ldr	r4, [r5, #4]
 800b616:	69a3      	ldr	r3, [r4, #24]
 800b618:	60a3      	str	r3, [r4, #8]
 800b61a:	89a3      	ldrh	r3, [r4, #12]
 800b61c:	071a      	lsls	r2, r3, #28
 800b61e:	d52f      	bpl.n	800b680 <__swbuf_r+0x84>
 800b620:	6923      	ldr	r3, [r4, #16]
 800b622:	b36b      	cbz	r3, 800b680 <__swbuf_r+0x84>
 800b624:	6923      	ldr	r3, [r4, #16]
 800b626:	6820      	ldr	r0, [r4, #0]
 800b628:	b2f6      	uxtb	r6, r6
 800b62a:	1ac0      	subs	r0, r0, r3
 800b62c:	6963      	ldr	r3, [r4, #20]
 800b62e:	4637      	mov	r7, r6
 800b630:	4283      	cmp	r3, r0
 800b632:	dc04      	bgt.n	800b63e <__swbuf_r+0x42>
 800b634:	4621      	mov	r1, r4
 800b636:	4628      	mov	r0, r5
 800b638:	f000 ffaa 	bl	800c590 <_fflush_r>
 800b63c:	bb30      	cbnz	r0, 800b68c <__swbuf_r+0x90>
 800b63e:	68a3      	ldr	r3, [r4, #8]
 800b640:	3001      	adds	r0, #1
 800b642:	3b01      	subs	r3, #1
 800b644:	60a3      	str	r3, [r4, #8]
 800b646:	6823      	ldr	r3, [r4, #0]
 800b648:	1c5a      	adds	r2, r3, #1
 800b64a:	6022      	str	r2, [r4, #0]
 800b64c:	701e      	strb	r6, [r3, #0]
 800b64e:	6963      	ldr	r3, [r4, #20]
 800b650:	4283      	cmp	r3, r0
 800b652:	d004      	beq.n	800b65e <__swbuf_r+0x62>
 800b654:	89a3      	ldrh	r3, [r4, #12]
 800b656:	07db      	lsls	r3, r3, #31
 800b658:	d506      	bpl.n	800b668 <__swbuf_r+0x6c>
 800b65a:	2e0a      	cmp	r6, #10
 800b65c:	d104      	bne.n	800b668 <__swbuf_r+0x6c>
 800b65e:	4621      	mov	r1, r4
 800b660:	4628      	mov	r0, r5
 800b662:	f000 ff95 	bl	800c590 <_fflush_r>
 800b666:	b988      	cbnz	r0, 800b68c <__swbuf_r+0x90>
 800b668:	4638      	mov	r0, r7
 800b66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b66c:	4b0a      	ldr	r3, [pc, #40]	; (800b698 <__swbuf_r+0x9c>)
 800b66e:	429c      	cmp	r4, r3
 800b670:	d101      	bne.n	800b676 <__swbuf_r+0x7a>
 800b672:	68ac      	ldr	r4, [r5, #8]
 800b674:	e7cf      	b.n	800b616 <__swbuf_r+0x1a>
 800b676:	4b09      	ldr	r3, [pc, #36]	; (800b69c <__swbuf_r+0xa0>)
 800b678:	429c      	cmp	r4, r3
 800b67a:	bf08      	it	eq
 800b67c:	68ec      	ldreq	r4, [r5, #12]
 800b67e:	e7ca      	b.n	800b616 <__swbuf_r+0x1a>
 800b680:	4621      	mov	r1, r4
 800b682:	4628      	mov	r0, r5
 800b684:	f000 f80c 	bl	800b6a0 <__swsetup_r>
 800b688:	2800      	cmp	r0, #0
 800b68a:	d0cb      	beq.n	800b624 <__swbuf_r+0x28>
 800b68c:	f04f 37ff 	mov.w	r7, #4294967295
 800b690:	e7ea      	b.n	800b668 <__swbuf_r+0x6c>
 800b692:	bf00      	nop
 800b694:	0800e4d8 	.word	0x0800e4d8
 800b698:	0800e4f8 	.word	0x0800e4f8
 800b69c:	0800e4b8 	.word	0x0800e4b8

0800b6a0 <__swsetup_r>:
 800b6a0:	4b32      	ldr	r3, [pc, #200]	; (800b76c <__swsetup_r+0xcc>)
 800b6a2:	b570      	push	{r4, r5, r6, lr}
 800b6a4:	681d      	ldr	r5, [r3, #0]
 800b6a6:	4606      	mov	r6, r0
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	b125      	cbz	r5, 800b6b6 <__swsetup_r+0x16>
 800b6ac:	69ab      	ldr	r3, [r5, #24]
 800b6ae:	b913      	cbnz	r3, 800b6b6 <__swsetup_r+0x16>
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	f001 f801 	bl	800c6b8 <__sinit>
 800b6b6:	4b2e      	ldr	r3, [pc, #184]	; (800b770 <__swsetup_r+0xd0>)
 800b6b8:	429c      	cmp	r4, r3
 800b6ba:	d10f      	bne.n	800b6dc <__swsetup_r+0x3c>
 800b6bc:	686c      	ldr	r4, [r5, #4]
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6c4:	0719      	lsls	r1, r3, #28
 800b6c6:	d42c      	bmi.n	800b722 <__swsetup_r+0x82>
 800b6c8:	06dd      	lsls	r5, r3, #27
 800b6ca:	d411      	bmi.n	800b6f0 <__swsetup_r+0x50>
 800b6cc:	2309      	movs	r3, #9
 800b6ce:	6033      	str	r3, [r6, #0]
 800b6d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d8:	81a3      	strh	r3, [r4, #12]
 800b6da:	e03e      	b.n	800b75a <__swsetup_r+0xba>
 800b6dc:	4b25      	ldr	r3, [pc, #148]	; (800b774 <__swsetup_r+0xd4>)
 800b6de:	429c      	cmp	r4, r3
 800b6e0:	d101      	bne.n	800b6e6 <__swsetup_r+0x46>
 800b6e2:	68ac      	ldr	r4, [r5, #8]
 800b6e4:	e7eb      	b.n	800b6be <__swsetup_r+0x1e>
 800b6e6:	4b24      	ldr	r3, [pc, #144]	; (800b778 <__swsetup_r+0xd8>)
 800b6e8:	429c      	cmp	r4, r3
 800b6ea:	bf08      	it	eq
 800b6ec:	68ec      	ldreq	r4, [r5, #12]
 800b6ee:	e7e6      	b.n	800b6be <__swsetup_r+0x1e>
 800b6f0:	0758      	lsls	r0, r3, #29
 800b6f2:	d512      	bpl.n	800b71a <__swsetup_r+0x7a>
 800b6f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6f6:	b141      	cbz	r1, 800b70a <__swsetup_r+0x6a>
 800b6f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6fc:	4299      	cmp	r1, r3
 800b6fe:	d002      	beq.n	800b706 <__swsetup_r+0x66>
 800b700:	4630      	mov	r0, r6
 800b702:	f001 fc89 	bl	800d018 <_free_r>
 800b706:	2300      	movs	r3, #0
 800b708:	6363      	str	r3, [r4, #52]	; 0x34
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b710:	81a3      	strh	r3, [r4, #12]
 800b712:	2300      	movs	r3, #0
 800b714:	6063      	str	r3, [r4, #4]
 800b716:	6923      	ldr	r3, [r4, #16]
 800b718:	6023      	str	r3, [r4, #0]
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	f043 0308 	orr.w	r3, r3, #8
 800b720:	81a3      	strh	r3, [r4, #12]
 800b722:	6923      	ldr	r3, [r4, #16]
 800b724:	b94b      	cbnz	r3, 800b73a <__swsetup_r+0x9a>
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b72c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b730:	d003      	beq.n	800b73a <__swsetup_r+0x9a>
 800b732:	4621      	mov	r1, r4
 800b734:	4630      	mov	r0, r6
 800b736:	f001 f889 	bl	800c84c <__smakebuf_r>
 800b73a:	89a0      	ldrh	r0, [r4, #12]
 800b73c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b740:	f010 0301 	ands.w	r3, r0, #1
 800b744:	d00a      	beq.n	800b75c <__swsetup_r+0xbc>
 800b746:	2300      	movs	r3, #0
 800b748:	60a3      	str	r3, [r4, #8]
 800b74a:	6963      	ldr	r3, [r4, #20]
 800b74c:	425b      	negs	r3, r3
 800b74e:	61a3      	str	r3, [r4, #24]
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	b943      	cbnz	r3, 800b766 <__swsetup_r+0xc6>
 800b754:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b758:	d1ba      	bne.n	800b6d0 <__swsetup_r+0x30>
 800b75a:	bd70      	pop	{r4, r5, r6, pc}
 800b75c:	0781      	lsls	r1, r0, #30
 800b75e:	bf58      	it	pl
 800b760:	6963      	ldrpl	r3, [r4, #20]
 800b762:	60a3      	str	r3, [r4, #8]
 800b764:	e7f4      	b.n	800b750 <__swsetup_r+0xb0>
 800b766:	2000      	movs	r0, #0
 800b768:	e7f7      	b.n	800b75a <__swsetup_r+0xba>
 800b76a:	bf00      	nop
 800b76c:	20000014 	.word	0x20000014
 800b770:	0800e4d8 	.word	0x0800e4d8
 800b774:	0800e4f8 	.word	0x0800e4f8
 800b778:	0800e4b8 	.word	0x0800e4b8

0800b77c <abort>:
 800b77c:	2006      	movs	r0, #6
 800b77e:	b508      	push	{r3, lr}
 800b780:	f001 fd28 	bl	800d1d4 <raise>
 800b784:	2001      	movs	r0, #1
 800b786:	f7f7 fa16 	bl	8002bb6 <_exit>

0800b78a <quorem>:
 800b78a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78e:	6903      	ldr	r3, [r0, #16]
 800b790:	690c      	ldr	r4, [r1, #16]
 800b792:	4607      	mov	r7, r0
 800b794:	42a3      	cmp	r3, r4
 800b796:	f2c0 8083 	blt.w	800b8a0 <quorem+0x116>
 800b79a:	3c01      	subs	r4, #1
 800b79c:	f100 0514 	add.w	r5, r0, #20
 800b7a0:	f101 0814 	add.w	r8, r1, #20
 800b7a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7a8:	9301      	str	r3, [sp, #4]
 800b7aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b7be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7c2:	d332      	bcc.n	800b82a <quorem+0xa0>
 800b7c4:	f04f 0e00 	mov.w	lr, #0
 800b7c8:	4640      	mov	r0, r8
 800b7ca:	46ac      	mov	ip, r5
 800b7cc:	46f2      	mov	sl, lr
 800b7ce:	f850 2b04 	ldr.w	r2, [r0], #4
 800b7d2:	b293      	uxth	r3, r2
 800b7d4:	fb06 e303 	mla	r3, r6, r3, lr
 800b7d8:	0c12      	lsrs	r2, r2, #16
 800b7da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b7de:	fb06 e202 	mla	r2, r6, r2, lr
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	ebaa 0303 	sub.w	r3, sl, r3
 800b7e8:	f8dc a000 	ldr.w	sl, [ip]
 800b7ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b7f0:	fa1f fa8a 	uxth.w	sl, sl
 800b7f4:	4453      	add	r3, sl
 800b7f6:	fa1f fa82 	uxth.w	sl, r2
 800b7fa:	f8dc 2000 	ldr.w	r2, [ip]
 800b7fe:	4581      	cmp	r9, r0
 800b800:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b804:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b808:	b29b      	uxth	r3, r3
 800b80a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b80e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b812:	f84c 3b04 	str.w	r3, [ip], #4
 800b816:	d2da      	bcs.n	800b7ce <quorem+0x44>
 800b818:	f855 300b 	ldr.w	r3, [r5, fp]
 800b81c:	b92b      	cbnz	r3, 800b82a <quorem+0xa0>
 800b81e:	9b01      	ldr	r3, [sp, #4]
 800b820:	3b04      	subs	r3, #4
 800b822:	429d      	cmp	r5, r3
 800b824:	461a      	mov	r2, r3
 800b826:	d32f      	bcc.n	800b888 <quorem+0xfe>
 800b828:	613c      	str	r4, [r7, #16]
 800b82a:	4638      	mov	r0, r7
 800b82c:	f001 fade 	bl	800cdec <__mcmp>
 800b830:	2800      	cmp	r0, #0
 800b832:	db25      	blt.n	800b880 <quorem+0xf6>
 800b834:	4628      	mov	r0, r5
 800b836:	f04f 0c00 	mov.w	ip, #0
 800b83a:	3601      	adds	r6, #1
 800b83c:	f858 1b04 	ldr.w	r1, [r8], #4
 800b840:	f8d0 e000 	ldr.w	lr, [r0]
 800b844:	b28b      	uxth	r3, r1
 800b846:	ebac 0303 	sub.w	r3, ip, r3
 800b84a:	fa1f f28e 	uxth.w	r2, lr
 800b84e:	4413      	add	r3, r2
 800b850:	0c0a      	lsrs	r2, r1, #16
 800b852:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b856:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b860:	45c1      	cmp	r9, r8
 800b862:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b866:	f840 3b04 	str.w	r3, [r0], #4
 800b86a:	d2e7      	bcs.n	800b83c <quorem+0xb2>
 800b86c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b870:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b874:	b922      	cbnz	r2, 800b880 <quorem+0xf6>
 800b876:	3b04      	subs	r3, #4
 800b878:	429d      	cmp	r5, r3
 800b87a:	461a      	mov	r2, r3
 800b87c:	d30a      	bcc.n	800b894 <quorem+0x10a>
 800b87e:	613c      	str	r4, [r7, #16]
 800b880:	4630      	mov	r0, r6
 800b882:	b003      	add	sp, #12
 800b884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b888:	6812      	ldr	r2, [r2, #0]
 800b88a:	3b04      	subs	r3, #4
 800b88c:	2a00      	cmp	r2, #0
 800b88e:	d1cb      	bne.n	800b828 <quorem+0x9e>
 800b890:	3c01      	subs	r4, #1
 800b892:	e7c6      	b.n	800b822 <quorem+0x98>
 800b894:	6812      	ldr	r2, [r2, #0]
 800b896:	3b04      	subs	r3, #4
 800b898:	2a00      	cmp	r2, #0
 800b89a:	d1f0      	bne.n	800b87e <quorem+0xf4>
 800b89c:	3c01      	subs	r4, #1
 800b89e:	e7eb      	b.n	800b878 <quorem+0xee>
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	e7ee      	b.n	800b882 <quorem+0xf8>
 800b8a4:	0000      	movs	r0, r0
	...

0800b8a8 <_dtoa_r>:
 800b8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ac:	4616      	mov	r6, r2
 800b8ae:	461f      	mov	r7, r3
 800b8b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b8b2:	b099      	sub	sp, #100	; 0x64
 800b8b4:	4605      	mov	r5, r0
 800b8b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b8ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b8be:	b974      	cbnz	r4, 800b8de <_dtoa_r+0x36>
 800b8c0:	2010      	movs	r0, #16
 800b8c2:	f001 f803 	bl	800c8cc <malloc>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	6268      	str	r0, [r5, #36]	; 0x24
 800b8ca:	b920      	cbnz	r0, 800b8d6 <_dtoa_r+0x2e>
 800b8cc:	21ea      	movs	r1, #234	; 0xea
 800b8ce:	4bae      	ldr	r3, [pc, #696]	; (800bb88 <_dtoa_r+0x2e0>)
 800b8d0:	48ae      	ldr	r0, [pc, #696]	; (800bb8c <_dtoa_r+0x2e4>)
 800b8d2:	f7ff f853 	bl	800a97c <__assert_func>
 800b8d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8da:	6004      	str	r4, [r0, #0]
 800b8dc:	60c4      	str	r4, [r0, #12]
 800b8de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8e0:	6819      	ldr	r1, [r3, #0]
 800b8e2:	b151      	cbz	r1, 800b8fa <_dtoa_r+0x52>
 800b8e4:	685a      	ldr	r2, [r3, #4]
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	4093      	lsls	r3, r2
 800b8ea:	604a      	str	r2, [r1, #4]
 800b8ec:	608b      	str	r3, [r1, #8]
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f001 f842 	bl	800c978 <_Bfree>
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8f8:	601a      	str	r2, [r3, #0]
 800b8fa:	1e3b      	subs	r3, r7, #0
 800b8fc:	bfaf      	iteee	ge
 800b8fe:	2300      	movge	r3, #0
 800b900:	2201      	movlt	r2, #1
 800b902:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b906:	9305      	strlt	r3, [sp, #20]
 800b908:	bfa8      	it	ge
 800b90a:	f8c8 3000 	strge.w	r3, [r8]
 800b90e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b912:	4b9f      	ldr	r3, [pc, #636]	; (800bb90 <_dtoa_r+0x2e8>)
 800b914:	bfb8      	it	lt
 800b916:	f8c8 2000 	strlt.w	r2, [r8]
 800b91a:	ea33 0309 	bics.w	r3, r3, r9
 800b91e:	d119      	bne.n	800b954 <_dtoa_r+0xac>
 800b920:	f242 730f 	movw	r3, #9999	; 0x270f
 800b924:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b92c:	4333      	orrs	r3, r6
 800b92e:	f000 8580 	beq.w	800c432 <_dtoa_r+0xb8a>
 800b932:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b934:	b953      	cbnz	r3, 800b94c <_dtoa_r+0xa4>
 800b936:	4b97      	ldr	r3, [pc, #604]	; (800bb94 <_dtoa_r+0x2ec>)
 800b938:	e022      	b.n	800b980 <_dtoa_r+0xd8>
 800b93a:	4b97      	ldr	r3, [pc, #604]	; (800bb98 <_dtoa_r+0x2f0>)
 800b93c:	9308      	str	r3, [sp, #32]
 800b93e:	3308      	adds	r3, #8
 800b940:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	9808      	ldr	r0, [sp, #32]
 800b946:	b019      	add	sp, #100	; 0x64
 800b948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94c:	4b91      	ldr	r3, [pc, #580]	; (800bb94 <_dtoa_r+0x2ec>)
 800b94e:	9308      	str	r3, [sp, #32]
 800b950:	3303      	adds	r3, #3
 800b952:	e7f5      	b.n	800b940 <_dtoa_r+0x98>
 800b954:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b958:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b95c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b960:	2200      	movs	r2, #0
 800b962:	2300      	movs	r3, #0
 800b964:	f7f5 f890 	bl	8000a88 <__aeabi_dcmpeq>
 800b968:	4680      	mov	r8, r0
 800b96a:	b158      	cbz	r0, 800b984 <_dtoa_r+0xdc>
 800b96c:	2301      	movs	r3, #1
 800b96e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b970:	6013      	str	r3, [r2, #0]
 800b972:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 8559 	beq.w	800c42c <_dtoa_r+0xb84>
 800b97a:	4888      	ldr	r0, [pc, #544]	; (800bb9c <_dtoa_r+0x2f4>)
 800b97c:	6018      	str	r0, [r3, #0]
 800b97e:	1e43      	subs	r3, r0, #1
 800b980:	9308      	str	r3, [sp, #32]
 800b982:	e7df      	b.n	800b944 <_dtoa_r+0x9c>
 800b984:	ab16      	add	r3, sp, #88	; 0x58
 800b986:	9301      	str	r3, [sp, #4]
 800b988:	ab17      	add	r3, sp, #92	; 0x5c
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	4628      	mov	r0, r5
 800b98e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b992:	f001 fad7 	bl	800cf44 <__d2b>
 800b996:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b99a:	4682      	mov	sl, r0
 800b99c:	2c00      	cmp	r4, #0
 800b99e:	d07e      	beq.n	800ba9e <_dtoa_r+0x1f6>
 800b9a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b9aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b9b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b9b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	4b78      	ldr	r3, [pc, #480]	; (800bba0 <_dtoa_r+0x2f8>)
 800b9be:	f7f4 fc43 	bl	8000248 <__aeabi_dsub>
 800b9c2:	a36b      	add	r3, pc, #428	; (adr r3, 800bb70 <_dtoa_r+0x2c8>)
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	f7f4 fdf6 	bl	80005b8 <__aeabi_dmul>
 800b9cc:	a36a      	add	r3, pc, #424	; (adr r3, 800bb78 <_dtoa_r+0x2d0>)
 800b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d2:	f7f4 fc3b 	bl	800024c <__adddf3>
 800b9d6:	4606      	mov	r6, r0
 800b9d8:	4620      	mov	r0, r4
 800b9da:	460f      	mov	r7, r1
 800b9dc:	f7f4 fd82 	bl	80004e4 <__aeabi_i2d>
 800b9e0:	a367      	add	r3, pc, #412	; (adr r3, 800bb80 <_dtoa_r+0x2d8>)
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	f7f4 fde7 	bl	80005b8 <__aeabi_dmul>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	4639      	mov	r1, r7
 800b9f2:	f7f4 fc2b 	bl	800024c <__adddf3>
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	460f      	mov	r7, r1
 800b9fa:	f7f5 f88d 	bl	8000b18 <__aeabi_d2iz>
 800b9fe:	2200      	movs	r2, #0
 800ba00:	4681      	mov	r9, r0
 800ba02:	2300      	movs	r3, #0
 800ba04:	4630      	mov	r0, r6
 800ba06:	4639      	mov	r1, r7
 800ba08:	f7f5 f848 	bl	8000a9c <__aeabi_dcmplt>
 800ba0c:	b148      	cbz	r0, 800ba22 <_dtoa_r+0x17a>
 800ba0e:	4648      	mov	r0, r9
 800ba10:	f7f4 fd68 	bl	80004e4 <__aeabi_i2d>
 800ba14:	4632      	mov	r2, r6
 800ba16:	463b      	mov	r3, r7
 800ba18:	f7f5 f836 	bl	8000a88 <__aeabi_dcmpeq>
 800ba1c:	b908      	cbnz	r0, 800ba22 <_dtoa_r+0x17a>
 800ba1e:	f109 39ff 	add.w	r9, r9, #4294967295
 800ba22:	f1b9 0f16 	cmp.w	r9, #22
 800ba26:	d857      	bhi.n	800bad8 <_dtoa_r+0x230>
 800ba28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba2c:	4b5d      	ldr	r3, [pc, #372]	; (800bba4 <_dtoa_r+0x2fc>)
 800ba2e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	f7f5 f831 	bl	8000a9c <__aeabi_dcmplt>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d04e      	beq.n	800badc <_dtoa_r+0x234>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	f109 39ff 	add.w	r9, r9, #4294967295
 800ba44:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ba48:	1b1c      	subs	r4, r3, r4
 800ba4a:	1e63      	subs	r3, r4, #1
 800ba4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba4e:	bf49      	itett	mi
 800ba50:	f1c4 0301 	rsbmi	r3, r4, #1
 800ba54:	2300      	movpl	r3, #0
 800ba56:	9306      	strmi	r3, [sp, #24]
 800ba58:	2300      	movmi	r3, #0
 800ba5a:	bf54      	ite	pl
 800ba5c:	9306      	strpl	r3, [sp, #24]
 800ba5e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ba60:	f1b9 0f00 	cmp.w	r9, #0
 800ba64:	db3c      	blt.n	800bae0 <_dtoa_r+0x238>
 800ba66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba68:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ba6c:	444b      	add	r3, r9
 800ba6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba70:	2300      	movs	r3, #0
 800ba72:	930a      	str	r3, [sp, #40]	; 0x28
 800ba74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba76:	2b09      	cmp	r3, #9
 800ba78:	d86c      	bhi.n	800bb54 <_dtoa_r+0x2ac>
 800ba7a:	2b05      	cmp	r3, #5
 800ba7c:	bfc4      	itt	gt
 800ba7e:	3b04      	subgt	r3, #4
 800ba80:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ba82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba84:	bfc8      	it	gt
 800ba86:	2400      	movgt	r4, #0
 800ba88:	f1a3 0302 	sub.w	r3, r3, #2
 800ba8c:	bfd8      	it	le
 800ba8e:	2401      	movle	r4, #1
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	f200 808b 	bhi.w	800bbac <_dtoa_r+0x304>
 800ba96:	e8df f003 	tbb	[pc, r3]
 800ba9a:	4f2d      	.short	0x4f2d
 800ba9c:	5b4d      	.short	0x5b4d
 800ba9e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800baa2:	441c      	add	r4, r3
 800baa4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800baa8:	2b20      	cmp	r3, #32
 800baaa:	bfc3      	ittte	gt
 800baac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bab0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800bab4:	fa09 f303 	lslgt.w	r3, r9, r3
 800bab8:	f1c3 0320 	rsble	r3, r3, #32
 800babc:	bfc6      	itte	gt
 800babe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bac2:	4318      	orrgt	r0, r3
 800bac4:	fa06 f003 	lslle.w	r0, r6, r3
 800bac8:	f7f4 fcfc 	bl	80004c4 <__aeabi_ui2d>
 800bacc:	2301      	movs	r3, #1
 800bace:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800bad2:	3c01      	subs	r4, #1
 800bad4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bad6:	e770      	b.n	800b9ba <_dtoa_r+0x112>
 800bad8:	2301      	movs	r3, #1
 800bada:	e7b3      	b.n	800ba44 <_dtoa_r+0x19c>
 800badc:	900f      	str	r0, [sp, #60]	; 0x3c
 800bade:	e7b2      	b.n	800ba46 <_dtoa_r+0x19e>
 800bae0:	9b06      	ldr	r3, [sp, #24]
 800bae2:	eba3 0309 	sub.w	r3, r3, r9
 800bae6:	9306      	str	r3, [sp, #24]
 800bae8:	f1c9 0300 	rsb	r3, r9, #0
 800baec:	930a      	str	r3, [sp, #40]	; 0x28
 800baee:	2300      	movs	r3, #0
 800baf0:	930e      	str	r3, [sp, #56]	; 0x38
 800baf2:	e7bf      	b.n	800ba74 <_dtoa_r+0x1cc>
 800baf4:	2300      	movs	r3, #0
 800baf6:	930b      	str	r3, [sp, #44]	; 0x2c
 800baf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	dc59      	bgt.n	800bbb2 <_dtoa_r+0x30a>
 800bafe:	f04f 0b01 	mov.w	fp, #1
 800bb02:	465b      	mov	r3, fp
 800bb04:	f8cd b008 	str.w	fp, [sp, #8]
 800bb08:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bb10:	6042      	str	r2, [r0, #4]
 800bb12:	2204      	movs	r2, #4
 800bb14:	f102 0614 	add.w	r6, r2, #20
 800bb18:	429e      	cmp	r6, r3
 800bb1a:	6841      	ldr	r1, [r0, #4]
 800bb1c:	d94f      	bls.n	800bbbe <_dtoa_r+0x316>
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f000 feea 	bl	800c8f8 <_Balloc>
 800bb24:	9008      	str	r0, [sp, #32]
 800bb26:	2800      	cmp	r0, #0
 800bb28:	d14d      	bne.n	800bbc6 <_dtoa_r+0x31e>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bb30:	4b1d      	ldr	r3, [pc, #116]	; (800bba8 <_dtoa_r+0x300>)
 800bb32:	e6cd      	b.n	800b8d0 <_dtoa_r+0x28>
 800bb34:	2301      	movs	r3, #1
 800bb36:	e7de      	b.n	800baf6 <_dtoa_r+0x24e>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bb3e:	eb09 0b03 	add.w	fp, r9, r3
 800bb42:	f10b 0301 	add.w	r3, fp, #1
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	9302      	str	r3, [sp, #8]
 800bb4a:	bfb8      	it	lt
 800bb4c:	2301      	movlt	r3, #1
 800bb4e:	e7dd      	b.n	800bb0c <_dtoa_r+0x264>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e7f2      	b.n	800bb3a <_dtoa_r+0x292>
 800bb54:	2401      	movs	r4, #1
 800bb56:	2300      	movs	r3, #0
 800bb58:	940b      	str	r4, [sp, #44]	; 0x2c
 800bb5a:	9322      	str	r3, [sp, #136]	; 0x88
 800bb5c:	f04f 3bff 	mov.w	fp, #4294967295
 800bb60:	2200      	movs	r2, #0
 800bb62:	2312      	movs	r3, #18
 800bb64:	f8cd b008 	str.w	fp, [sp, #8]
 800bb68:	9223      	str	r2, [sp, #140]	; 0x8c
 800bb6a:	e7cf      	b.n	800bb0c <_dtoa_r+0x264>
 800bb6c:	f3af 8000 	nop.w
 800bb70:	636f4361 	.word	0x636f4361
 800bb74:	3fd287a7 	.word	0x3fd287a7
 800bb78:	8b60c8b3 	.word	0x8b60c8b3
 800bb7c:	3fc68a28 	.word	0x3fc68a28
 800bb80:	509f79fb 	.word	0x509f79fb
 800bb84:	3fd34413 	.word	0x3fd34413
 800bb88:	0800e42e 	.word	0x0800e42e
 800bb8c:	0800e445 	.word	0x0800e445
 800bb90:	7ff00000 	.word	0x7ff00000
 800bb94:	0800e42a 	.word	0x0800e42a
 800bb98:	0800e421 	.word	0x0800e421
 800bb9c:	0800e3fe 	.word	0x0800e3fe
 800bba0:	3ff80000 	.word	0x3ff80000
 800bba4:	0800e5a0 	.word	0x0800e5a0
 800bba8:	0800e4a4 	.word	0x0800e4a4
 800bbac:	2301      	movs	r3, #1
 800bbae:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbb0:	e7d4      	b.n	800bb5c <_dtoa_r+0x2b4>
 800bbb2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800bbb6:	465b      	mov	r3, fp
 800bbb8:	f8cd b008 	str.w	fp, [sp, #8]
 800bbbc:	e7a6      	b.n	800bb0c <_dtoa_r+0x264>
 800bbbe:	3101      	adds	r1, #1
 800bbc0:	6041      	str	r1, [r0, #4]
 800bbc2:	0052      	lsls	r2, r2, #1
 800bbc4:	e7a6      	b.n	800bb14 <_dtoa_r+0x26c>
 800bbc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbc8:	9a08      	ldr	r2, [sp, #32]
 800bbca:	601a      	str	r2, [r3, #0]
 800bbcc:	9b02      	ldr	r3, [sp, #8]
 800bbce:	2b0e      	cmp	r3, #14
 800bbd0:	f200 80a8 	bhi.w	800bd24 <_dtoa_r+0x47c>
 800bbd4:	2c00      	cmp	r4, #0
 800bbd6:	f000 80a5 	beq.w	800bd24 <_dtoa_r+0x47c>
 800bbda:	f1b9 0f00 	cmp.w	r9, #0
 800bbde:	dd34      	ble.n	800bc4a <_dtoa_r+0x3a2>
 800bbe0:	4a9a      	ldr	r2, [pc, #616]	; (800be4c <_dtoa_r+0x5a4>)
 800bbe2:	f009 030f 	and.w	r3, r9, #15
 800bbe6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bbea:	f419 7f80 	tst.w	r9, #256	; 0x100
 800bbee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bbf2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bbf6:	ea4f 1429 	mov.w	r4, r9, asr #4
 800bbfa:	d016      	beq.n	800bc2a <_dtoa_r+0x382>
 800bbfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc00:	4b93      	ldr	r3, [pc, #588]	; (800be50 <_dtoa_r+0x5a8>)
 800bc02:	2703      	movs	r7, #3
 800bc04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc08:	f7f4 fe00 	bl	800080c <__aeabi_ddiv>
 800bc0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc10:	f004 040f 	and.w	r4, r4, #15
 800bc14:	4e8e      	ldr	r6, [pc, #568]	; (800be50 <_dtoa_r+0x5a8>)
 800bc16:	b954      	cbnz	r4, 800bc2e <_dtoa_r+0x386>
 800bc18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc20:	f7f4 fdf4 	bl	800080c <__aeabi_ddiv>
 800bc24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc28:	e029      	b.n	800bc7e <_dtoa_r+0x3d6>
 800bc2a:	2702      	movs	r7, #2
 800bc2c:	e7f2      	b.n	800bc14 <_dtoa_r+0x36c>
 800bc2e:	07e1      	lsls	r1, r4, #31
 800bc30:	d508      	bpl.n	800bc44 <_dtoa_r+0x39c>
 800bc32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc36:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc3a:	f7f4 fcbd 	bl	80005b8 <__aeabi_dmul>
 800bc3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc42:	3701      	adds	r7, #1
 800bc44:	1064      	asrs	r4, r4, #1
 800bc46:	3608      	adds	r6, #8
 800bc48:	e7e5      	b.n	800bc16 <_dtoa_r+0x36e>
 800bc4a:	f000 80a5 	beq.w	800bd98 <_dtoa_r+0x4f0>
 800bc4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc52:	f1c9 0400 	rsb	r4, r9, #0
 800bc56:	4b7d      	ldr	r3, [pc, #500]	; (800be4c <_dtoa_r+0x5a4>)
 800bc58:	f004 020f 	and.w	r2, r4, #15
 800bc5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc64:	f7f4 fca8 	bl	80005b8 <__aeabi_dmul>
 800bc68:	2702      	movs	r7, #2
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc70:	4e77      	ldr	r6, [pc, #476]	; (800be50 <_dtoa_r+0x5a8>)
 800bc72:	1124      	asrs	r4, r4, #4
 800bc74:	2c00      	cmp	r4, #0
 800bc76:	f040 8084 	bne.w	800bd82 <_dtoa_r+0x4da>
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d1d2      	bne.n	800bc24 <_dtoa_r+0x37c>
 800bc7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f000 808b 	beq.w	800bd9c <_dtoa_r+0x4f4>
 800bc86:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bc8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bc8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc92:	2200      	movs	r2, #0
 800bc94:	4b6f      	ldr	r3, [pc, #444]	; (800be54 <_dtoa_r+0x5ac>)
 800bc96:	f7f4 ff01 	bl	8000a9c <__aeabi_dcmplt>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d07e      	beq.n	800bd9c <_dtoa_r+0x4f4>
 800bc9e:	9b02      	ldr	r3, [sp, #8]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d07b      	beq.n	800bd9c <_dtoa_r+0x4f4>
 800bca4:	f1bb 0f00 	cmp.w	fp, #0
 800bca8:	dd38      	ble.n	800bd1c <_dtoa_r+0x474>
 800bcaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bcae:	2200      	movs	r2, #0
 800bcb0:	4b69      	ldr	r3, [pc, #420]	; (800be58 <_dtoa_r+0x5b0>)
 800bcb2:	f7f4 fc81 	bl	80005b8 <__aeabi_dmul>
 800bcb6:	465c      	mov	r4, fp
 800bcb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcbc:	f109 38ff 	add.w	r8, r9, #4294967295
 800bcc0:	3701      	adds	r7, #1
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	f7f4 fc0e 	bl	80004e4 <__aeabi_i2d>
 800bcc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bccc:	f7f4 fc74 	bl	80005b8 <__aeabi_dmul>
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	4b62      	ldr	r3, [pc, #392]	; (800be5c <_dtoa_r+0x5b4>)
 800bcd4:	f7f4 faba 	bl	800024c <__adddf3>
 800bcd8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bcdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bce0:	9611      	str	r6, [sp, #68]	; 0x44
 800bce2:	2c00      	cmp	r4, #0
 800bce4:	d15d      	bne.n	800bda2 <_dtoa_r+0x4fa>
 800bce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcea:	2200      	movs	r2, #0
 800bcec:	4b5c      	ldr	r3, [pc, #368]	; (800be60 <_dtoa_r+0x5b8>)
 800bcee:	f7f4 faab 	bl	8000248 <__aeabi_dsub>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcfa:	4633      	mov	r3, r6
 800bcfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bcfe:	f7f4 feeb 	bl	8000ad8 <__aeabi_dcmpgt>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	f040 829e 	bne.w	800c244 <_dtoa_r+0x99c>
 800bd08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd0e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bd12:	f7f4 fec3 	bl	8000a9c <__aeabi_dcmplt>
 800bd16:	2800      	cmp	r0, #0
 800bd18:	f040 8292 	bne.w	800c240 <_dtoa_r+0x998>
 800bd1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bd20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bd24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f2c0 8153 	blt.w	800bfd2 <_dtoa_r+0x72a>
 800bd2c:	f1b9 0f0e 	cmp.w	r9, #14
 800bd30:	f300 814f 	bgt.w	800bfd2 <_dtoa_r+0x72a>
 800bd34:	4b45      	ldr	r3, [pc, #276]	; (800be4c <_dtoa_r+0x5a4>)
 800bd36:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800bd3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd3e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bd42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f280 80db 	bge.w	800bf00 <_dtoa_r+0x658>
 800bd4a:	9b02      	ldr	r3, [sp, #8]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f300 80d7 	bgt.w	800bf00 <_dtoa_r+0x658>
 800bd52:	f040 8274 	bne.w	800c23e <_dtoa_r+0x996>
 800bd56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	4b40      	ldr	r3, [pc, #256]	; (800be60 <_dtoa_r+0x5b8>)
 800bd5e:	f7f4 fc2b 	bl	80005b8 <__aeabi_dmul>
 800bd62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd66:	f7f4 fead 	bl	8000ac4 <__aeabi_dcmpge>
 800bd6a:	9c02      	ldr	r4, [sp, #8]
 800bd6c:	4626      	mov	r6, r4
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	f040 824a 	bne.w	800c208 <_dtoa_r+0x960>
 800bd74:	2331      	movs	r3, #49	; 0x31
 800bd76:	9f08      	ldr	r7, [sp, #32]
 800bd78:	f109 0901 	add.w	r9, r9, #1
 800bd7c:	f807 3b01 	strb.w	r3, [r7], #1
 800bd80:	e246      	b.n	800c210 <_dtoa_r+0x968>
 800bd82:	07e2      	lsls	r2, r4, #31
 800bd84:	d505      	bpl.n	800bd92 <_dtoa_r+0x4ea>
 800bd86:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd8a:	f7f4 fc15 	bl	80005b8 <__aeabi_dmul>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	3701      	adds	r7, #1
 800bd92:	1064      	asrs	r4, r4, #1
 800bd94:	3608      	adds	r6, #8
 800bd96:	e76d      	b.n	800bc74 <_dtoa_r+0x3cc>
 800bd98:	2702      	movs	r7, #2
 800bd9a:	e770      	b.n	800bc7e <_dtoa_r+0x3d6>
 800bd9c:	46c8      	mov	r8, r9
 800bd9e:	9c02      	ldr	r4, [sp, #8]
 800bda0:	e78f      	b.n	800bcc2 <_dtoa_r+0x41a>
 800bda2:	9908      	ldr	r1, [sp, #32]
 800bda4:	4b29      	ldr	r3, [pc, #164]	; (800be4c <_dtoa_r+0x5a4>)
 800bda6:	4421      	add	r1, r4
 800bda8:	9112      	str	r1, [sp, #72]	; 0x48
 800bdaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdb0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bdb4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdb8:	2900      	cmp	r1, #0
 800bdba:	d055      	beq.n	800be68 <_dtoa_r+0x5c0>
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	4929      	ldr	r1, [pc, #164]	; (800be64 <_dtoa_r+0x5bc>)
 800bdc0:	f7f4 fd24 	bl	800080c <__aeabi_ddiv>
 800bdc4:	463b      	mov	r3, r7
 800bdc6:	4632      	mov	r2, r6
 800bdc8:	f7f4 fa3e 	bl	8000248 <__aeabi_dsub>
 800bdcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bdd0:	9f08      	ldr	r7, [sp, #32]
 800bdd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdd6:	f7f4 fe9f 	bl	8000b18 <__aeabi_d2iz>
 800bdda:	4604      	mov	r4, r0
 800bddc:	f7f4 fb82 	bl	80004e4 <__aeabi_i2d>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bde8:	f7f4 fa2e 	bl	8000248 <__aeabi_dsub>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	3430      	adds	r4, #48	; 0x30
 800bdf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bdf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bdfa:	f807 4b01 	strb.w	r4, [r7], #1
 800bdfe:	f7f4 fe4d 	bl	8000a9c <__aeabi_dcmplt>
 800be02:	2800      	cmp	r0, #0
 800be04:	d174      	bne.n	800bef0 <_dtoa_r+0x648>
 800be06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be0a:	2000      	movs	r0, #0
 800be0c:	4911      	ldr	r1, [pc, #68]	; (800be54 <_dtoa_r+0x5ac>)
 800be0e:	f7f4 fa1b 	bl	8000248 <__aeabi_dsub>
 800be12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be16:	f7f4 fe41 	bl	8000a9c <__aeabi_dcmplt>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	f040 80b6 	bne.w	800bf8c <_dtoa_r+0x6e4>
 800be20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be22:	429f      	cmp	r7, r3
 800be24:	f43f af7a 	beq.w	800bd1c <_dtoa_r+0x474>
 800be28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be2c:	2200      	movs	r2, #0
 800be2e:	4b0a      	ldr	r3, [pc, #40]	; (800be58 <_dtoa_r+0x5b0>)
 800be30:	f7f4 fbc2 	bl	80005b8 <__aeabi_dmul>
 800be34:	2200      	movs	r2, #0
 800be36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be3e:	4b06      	ldr	r3, [pc, #24]	; (800be58 <_dtoa_r+0x5b0>)
 800be40:	f7f4 fbba 	bl	80005b8 <__aeabi_dmul>
 800be44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be48:	e7c3      	b.n	800bdd2 <_dtoa_r+0x52a>
 800be4a:	bf00      	nop
 800be4c:	0800e5a0 	.word	0x0800e5a0
 800be50:	0800e578 	.word	0x0800e578
 800be54:	3ff00000 	.word	0x3ff00000
 800be58:	40240000 	.word	0x40240000
 800be5c:	401c0000 	.word	0x401c0000
 800be60:	40140000 	.word	0x40140000
 800be64:	3fe00000 	.word	0x3fe00000
 800be68:	4630      	mov	r0, r6
 800be6a:	4639      	mov	r1, r7
 800be6c:	f7f4 fba4 	bl	80005b8 <__aeabi_dmul>
 800be70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be72:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be76:	9c08      	ldr	r4, [sp, #32]
 800be78:	9314      	str	r3, [sp, #80]	; 0x50
 800be7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be7e:	f7f4 fe4b 	bl	8000b18 <__aeabi_d2iz>
 800be82:	9015      	str	r0, [sp, #84]	; 0x54
 800be84:	f7f4 fb2e 	bl	80004e4 <__aeabi_i2d>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be90:	f7f4 f9da 	bl	8000248 <__aeabi_dsub>
 800be94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be96:	4606      	mov	r6, r0
 800be98:	3330      	adds	r3, #48	; 0x30
 800be9a:	f804 3b01 	strb.w	r3, [r4], #1
 800be9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bea0:	460f      	mov	r7, r1
 800bea2:	429c      	cmp	r4, r3
 800bea4:	f04f 0200 	mov.w	r2, #0
 800bea8:	d124      	bne.n	800bef4 <_dtoa_r+0x64c>
 800beaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800beae:	4bb3      	ldr	r3, [pc, #716]	; (800c17c <_dtoa_r+0x8d4>)
 800beb0:	f7f4 f9cc 	bl	800024c <__adddf3>
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	4630      	mov	r0, r6
 800beba:	4639      	mov	r1, r7
 800bebc:	f7f4 fe0c 	bl	8000ad8 <__aeabi_dcmpgt>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d162      	bne.n	800bf8a <_dtoa_r+0x6e2>
 800bec4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bec8:	2000      	movs	r0, #0
 800beca:	49ac      	ldr	r1, [pc, #688]	; (800c17c <_dtoa_r+0x8d4>)
 800becc:	f7f4 f9bc 	bl	8000248 <__aeabi_dsub>
 800bed0:	4602      	mov	r2, r0
 800bed2:	460b      	mov	r3, r1
 800bed4:	4630      	mov	r0, r6
 800bed6:	4639      	mov	r1, r7
 800bed8:	f7f4 fde0 	bl	8000a9c <__aeabi_dcmplt>
 800bedc:	2800      	cmp	r0, #0
 800bede:	f43f af1d 	beq.w	800bd1c <_dtoa_r+0x474>
 800bee2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bee4:	1e7b      	subs	r3, r7, #1
 800bee6:	9314      	str	r3, [sp, #80]	; 0x50
 800bee8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800beec:	2b30      	cmp	r3, #48	; 0x30
 800beee:	d0f8      	beq.n	800bee2 <_dtoa_r+0x63a>
 800bef0:	46c1      	mov	r9, r8
 800bef2:	e03a      	b.n	800bf6a <_dtoa_r+0x6c2>
 800bef4:	4ba2      	ldr	r3, [pc, #648]	; (800c180 <_dtoa_r+0x8d8>)
 800bef6:	f7f4 fb5f 	bl	80005b8 <__aeabi_dmul>
 800befa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800befe:	e7bc      	b.n	800be7a <_dtoa_r+0x5d2>
 800bf00:	9f08      	ldr	r7, [sp, #32]
 800bf02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf0a:	f7f4 fc7f 	bl	800080c <__aeabi_ddiv>
 800bf0e:	f7f4 fe03 	bl	8000b18 <__aeabi_d2iz>
 800bf12:	4604      	mov	r4, r0
 800bf14:	f7f4 fae6 	bl	80004e4 <__aeabi_i2d>
 800bf18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf1c:	f7f4 fb4c 	bl	80005b8 <__aeabi_dmul>
 800bf20:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bf24:	460b      	mov	r3, r1
 800bf26:	4602      	mov	r2, r0
 800bf28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf2c:	f7f4 f98c 	bl	8000248 <__aeabi_dsub>
 800bf30:	f807 6b01 	strb.w	r6, [r7], #1
 800bf34:	9e08      	ldr	r6, [sp, #32]
 800bf36:	9b02      	ldr	r3, [sp, #8]
 800bf38:	1bbe      	subs	r6, r7, r6
 800bf3a:	42b3      	cmp	r3, r6
 800bf3c:	d13a      	bne.n	800bfb4 <_dtoa_r+0x70c>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	460b      	mov	r3, r1
 800bf42:	f7f4 f983 	bl	800024c <__adddf3>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf52:	f7f4 fdc1 	bl	8000ad8 <__aeabi_dcmpgt>
 800bf56:	bb58      	cbnz	r0, 800bfb0 <_dtoa_r+0x708>
 800bf58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf60:	f7f4 fd92 	bl	8000a88 <__aeabi_dcmpeq>
 800bf64:	b108      	cbz	r0, 800bf6a <_dtoa_r+0x6c2>
 800bf66:	07e1      	lsls	r1, r4, #31
 800bf68:	d422      	bmi.n	800bfb0 <_dtoa_r+0x708>
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	4651      	mov	r1, sl
 800bf6e:	f000 fd03 	bl	800c978 <_Bfree>
 800bf72:	2300      	movs	r3, #0
 800bf74:	703b      	strb	r3, [r7, #0]
 800bf76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bf78:	f109 0001 	add.w	r0, r9, #1
 800bf7c:	6018      	str	r0, [r3, #0]
 800bf7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f43f acdf 	beq.w	800b944 <_dtoa_r+0x9c>
 800bf86:	601f      	str	r7, [r3, #0]
 800bf88:	e4dc      	b.n	800b944 <_dtoa_r+0x9c>
 800bf8a:	4627      	mov	r7, r4
 800bf8c:	463b      	mov	r3, r7
 800bf8e:	461f      	mov	r7, r3
 800bf90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf94:	2a39      	cmp	r2, #57	; 0x39
 800bf96:	d107      	bne.n	800bfa8 <_dtoa_r+0x700>
 800bf98:	9a08      	ldr	r2, [sp, #32]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d1f7      	bne.n	800bf8e <_dtoa_r+0x6e6>
 800bf9e:	2230      	movs	r2, #48	; 0x30
 800bfa0:	9908      	ldr	r1, [sp, #32]
 800bfa2:	f108 0801 	add.w	r8, r8, #1
 800bfa6:	700a      	strb	r2, [r1, #0]
 800bfa8:	781a      	ldrb	r2, [r3, #0]
 800bfaa:	3201      	adds	r2, #1
 800bfac:	701a      	strb	r2, [r3, #0]
 800bfae:	e79f      	b.n	800bef0 <_dtoa_r+0x648>
 800bfb0:	46c8      	mov	r8, r9
 800bfb2:	e7eb      	b.n	800bf8c <_dtoa_r+0x6e4>
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	4b72      	ldr	r3, [pc, #456]	; (800c180 <_dtoa_r+0x8d8>)
 800bfb8:	f7f4 fafe 	bl	80005b8 <__aeabi_dmul>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	f7f4 fd5e 	bl	8000a88 <__aeabi_dcmpeq>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d098      	beq.n	800bf02 <_dtoa_r+0x65a>
 800bfd0:	e7cb      	b.n	800bf6a <_dtoa_r+0x6c2>
 800bfd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bfd4:	2a00      	cmp	r2, #0
 800bfd6:	f000 80cd 	beq.w	800c174 <_dtoa_r+0x8cc>
 800bfda:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bfdc:	2a01      	cmp	r2, #1
 800bfde:	f300 80af 	bgt.w	800c140 <_dtoa_r+0x898>
 800bfe2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bfe4:	2a00      	cmp	r2, #0
 800bfe6:	f000 80a7 	beq.w	800c138 <_dtoa_r+0x890>
 800bfea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bfee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bff0:	9f06      	ldr	r7, [sp, #24]
 800bff2:	9a06      	ldr	r2, [sp, #24]
 800bff4:	2101      	movs	r1, #1
 800bff6:	441a      	add	r2, r3
 800bff8:	9206      	str	r2, [sp, #24]
 800bffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bffc:	4628      	mov	r0, r5
 800bffe:	441a      	add	r2, r3
 800c000:	9209      	str	r2, [sp, #36]	; 0x24
 800c002:	f000 fd73 	bl	800caec <__i2b>
 800c006:	4606      	mov	r6, r0
 800c008:	2f00      	cmp	r7, #0
 800c00a:	dd0c      	ble.n	800c026 <_dtoa_r+0x77e>
 800c00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c00e:	2b00      	cmp	r3, #0
 800c010:	dd09      	ble.n	800c026 <_dtoa_r+0x77e>
 800c012:	42bb      	cmp	r3, r7
 800c014:	bfa8      	it	ge
 800c016:	463b      	movge	r3, r7
 800c018:	9a06      	ldr	r2, [sp, #24]
 800c01a:	1aff      	subs	r7, r7, r3
 800c01c:	1ad2      	subs	r2, r2, r3
 800c01e:	9206      	str	r2, [sp, #24]
 800c020:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	9309      	str	r3, [sp, #36]	; 0x24
 800c026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c028:	b1f3      	cbz	r3, 800c068 <_dtoa_r+0x7c0>
 800c02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 80a9 	beq.w	800c184 <_dtoa_r+0x8dc>
 800c032:	2c00      	cmp	r4, #0
 800c034:	dd10      	ble.n	800c058 <_dtoa_r+0x7b0>
 800c036:	4631      	mov	r1, r6
 800c038:	4622      	mov	r2, r4
 800c03a:	4628      	mov	r0, r5
 800c03c:	f000 fe10 	bl	800cc60 <__pow5mult>
 800c040:	4652      	mov	r2, sl
 800c042:	4601      	mov	r1, r0
 800c044:	4606      	mov	r6, r0
 800c046:	4628      	mov	r0, r5
 800c048:	f000 fd66 	bl	800cb18 <__multiply>
 800c04c:	4680      	mov	r8, r0
 800c04e:	4651      	mov	r1, sl
 800c050:	4628      	mov	r0, r5
 800c052:	f000 fc91 	bl	800c978 <_Bfree>
 800c056:	46c2      	mov	sl, r8
 800c058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c05a:	1b1a      	subs	r2, r3, r4
 800c05c:	d004      	beq.n	800c068 <_dtoa_r+0x7c0>
 800c05e:	4651      	mov	r1, sl
 800c060:	4628      	mov	r0, r5
 800c062:	f000 fdfd 	bl	800cc60 <__pow5mult>
 800c066:	4682      	mov	sl, r0
 800c068:	2101      	movs	r1, #1
 800c06a:	4628      	mov	r0, r5
 800c06c:	f000 fd3e 	bl	800caec <__i2b>
 800c070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c072:	4604      	mov	r4, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	f340 8087 	ble.w	800c188 <_dtoa_r+0x8e0>
 800c07a:	461a      	mov	r2, r3
 800c07c:	4601      	mov	r1, r0
 800c07e:	4628      	mov	r0, r5
 800c080:	f000 fdee 	bl	800cc60 <__pow5mult>
 800c084:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c086:	4604      	mov	r4, r0
 800c088:	2b01      	cmp	r3, #1
 800c08a:	f340 8080 	ble.w	800c18e <_dtoa_r+0x8e6>
 800c08e:	f04f 0800 	mov.w	r8, #0
 800c092:	6923      	ldr	r3, [r4, #16]
 800c094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c098:	6918      	ldr	r0, [r3, #16]
 800c09a:	f000 fcd9 	bl	800ca50 <__hi0bits>
 800c09e:	f1c0 0020 	rsb	r0, r0, #32
 800c0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a4:	4418      	add	r0, r3
 800c0a6:	f010 001f 	ands.w	r0, r0, #31
 800c0aa:	f000 8092 	beq.w	800c1d2 <_dtoa_r+0x92a>
 800c0ae:	f1c0 0320 	rsb	r3, r0, #32
 800c0b2:	2b04      	cmp	r3, #4
 800c0b4:	f340 808a 	ble.w	800c1cc <_dtoa_r+0x924>
 800c0b8:	f1c0 001c 	rsb	r0, r0, #28
 800c0bc:	9b06      	ldr	r3, [sp, #24]
 800c0be:	4407      	add	r7, r0
 800c0c0:	4403      	add	r3, r0
 800c0c2:	9306      	str	r3, [sp, #24]
 800c0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c6:	4403      	add	r3, r0
 800c0c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ca:	9b06      	ldr	r3, [sp, #24]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	dd05      	ble.n	800c0dc <_dtoa_r+0x834>
 800c0d0:	4651      	mov	r1, sl
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	f000 fe1d 	bl	800cd14 <__lshift>
 800c0da:	4682      	mov	sl, r0
 800c0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	dd05      	ble.n	800c0ee <_dtoa_r+0x846>
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	f000 fe14 	bl	800cd14 <__lshift>
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d070      	beq.n	800c1d6 <_dtoa_r+0x92e>
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	4650      	mov	r0, sl
 800c0f8:	f000 fe78 	bl	800cdec <__mcmp>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	da6a      	bge.n	800c1d6 <_dtoa_r+0x92e>
 800c100:	2300      	movs	r3, #0
 800c102:	4651      	mov	r1, sl
 800c104:	220a      	movs	r2, #10
 800c106:	4628      	mov	r0, r5
 800c108:	f000 fc58 	bl	800c9bc <__multadd>
 800c10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c10e:	4682      	mov	sl, r0
 800c110:	f109 39ff 	add.w	r9, r9, #4294967295
 800c114:	2b00      	cmp	r3, #0
 800c116:	f000 8193 	beq.w	800c440 <_dtoa_r+0xb98>
 800c11a:	4631      	mov	r1, r6
 800c11c:	2300      	movs	r3, #0
 800c11e:	220a      	movs	r2, #10
 800c120:	4628      	mov	r0, r5
 800c122:	f000 fc4b 	bl	800c9bc <__multadd>
 800c126:	f1bb 0f00 	cmp.w	fp, #0
 800c12a:	4606      	mov	r6, r0
 800c12c:	f300 8093 	bgt.w	800c256 <_dtoa_r+0x9ae>
 800c130:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c132:	2b02      	cmp	r3, #2
 800c134:	dc57      	bgt.n	800c1e6 <_dtoa_r+0x93e>
 800c136:	e08e      	b.n	800c256 <_dtoa_r+0x9ae>
 800c138:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c13a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c13e:	e756      	b.n	800bfee <_dtoa_r+0x746>
 800c140:	9b02      	ldr	r3, [sp, #8]
 800c142:	1e5c      	subs	r4, r3, #1
 800c144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c146:	42a3      	cmp	r3, r4
 800c148:	bfb7      	itett	lt
 800c14a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c14c:	1b1c      	subge	r4, r3, r4
 800c14e:	1ae2      	sublt	r2, r4, r3
 800c150:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c152:	bfbe      	ittt	lt
 800c154:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c156:	189b      	addlt	r3, r3, r2
 800c158:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c15a:	9b02      	ldr	r3, [sp, #8]
 800c15c:	bfb8      	it	lt
 800c15e:	2400      	movlt	r4, #0
 800c160:	2b00      	cmp	r3, #0
 800c162:	bfbb      	ittet	lt
 800c164:	9b06      	ldrlt	r3, [sp, #24]
 800c166:	9a02      	ldrlt	r2, [sp, #8]
 800c168:	9f06      	ldrge	r7, [sp, #24]
 800c16a:	1a9f      	sublt	r7, r3, r2
 800c16c:	bfac      	ite	ge
 800c16e:	9b02      	ldrge	r3, [sp, #8]
 800c170:	2300      	movlt	r3, #0
 800c172:	e73e      	b.n	800bff2 <_dtoa_r+0x74a>
 800c174:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c176:	9f06      	ldr	r7, [sp, #24]
 800c178:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c17a:	e745      	b.n	800c008 <_dtoa_r+0x760>
 800c17c:	3fe00000 	.word	0x3fe00000
 800c180:	40240000 	.word	0x40240000
 800c184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c186:	e76a      	b.n	800c05e <_dtoa_r+0x7b6>
 800c188:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	dc19      	bgt.n	800c1c2 <_dtoa_r+0x91a>
 800c18e:	9b04      	ldr	r3, [sp, #16]
 800c190:	b9bb      	cbnz	r3, 800c1c2 <_dtoa_r+0x91a>
 800c192:	9b05      	ldr	r3, [sp, #20]
 800c194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c198:	b99b      	cbnz	r3, 800c1c2 <_dtoa_r+0x91a>
 800c19a:	9b05      	ldr	r3, [sp, #20]
 800c19c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1a0:	0d1b      	lsrs	r3, r3, #20
 800c1a2:	051b      	lsls	r3, r3, #20
 800c1a4:	b183      	cbz	r3, 800c1c8 <_dtoa_r+0x920>
 800c1a6:	f04f 0801 	mov.w	r8, #1
 800c1aa:	9b06      	ldr	r3, [sp, #24]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	9306      	str	r3, [sp, #24]
 800c1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f47f af6a 	bne.w	800c092 <_dtoa_r+0x7ea>
 800c1be:	2001      	movs	r0, #1
 800c1c0:	e76f      	b.n	800c0a2 <_dtoa_r+0x7fa>
 800c1c2:	f04f 0800 	mov.w	r8, #0
 800c1c6:	e7f6      	b.n	800c1b6 <_dtoa_r+0x90e>
 800c1c8:	4698      	mov	r8, r3
 800c1ca:	e7f4      	b.n	800c1b6 <_dtoa_r+0x90e>
 800c1cc:	f43f af7d 	beq.w	800c0ca <_dtoa_r+0x822>
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	301c      	adds	r0, #28
 800c1d4:	e772      	b.n	800c0bc <_dtoa_r+0x814>
 800c1d6:	9b02      	ldr	r3, [sp, #8]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	dc36      	bgt.n	800c24a <_dtoa_r+0x9a2>
 800c1dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1de:	2b02      	cmp	r3, #2
 800c1e0:	dd33      	ble.n	800c24a <_dtoa_r+0x9a2>
 800c1e2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c1e6:	f1bb 0f00 	cmp.w	fp, #0
 800c1ea:	d10d      	bne.n	800c208 <_dtoa_r+0x960>
 800c1ec:	4621      	mov	r1, r4
 800c1ee:	465b      	mov	r3, fp
 800c1f0:	2205      	movs	r2, #5
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	f000 fbe2 	bl	800c9bc <__multadd>
 800c1f8:	4601      	mov	r1, r0
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	4650      	mov	r0, sl
 800c1fe:	f000 fdf5 	bl	800cdec <__mcmp>
 800c202:	2800      	cmp	r0, #0
 800c204:	f73f adb6 	bgt.w	800bd74 <_dtoa_r+0x4cc>
 800c208:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c20a:	9f08      	ldr	r7, [sp, #32]
 800c20c:	ea6f 0903 	mvn.w	r9, r3
 800c210:	f04f 0800 	mov.w	r8, #0
 800c214:	4621      	mov	r1, r4
 800c216:	4628      	mov	r0, r5
 800c218:	f000 fbae 	bl	800c978 <_Bfree>
 800c21c:	2e00      	cmp	r6, #0
 800c21e:	f43f aea4 	beq.w	800bf6a <_dtoa_r+0x6c2>
 800c222:	f1b8 0f00 	cmp.w	r8, #0
 800c226:	d005      	beq.n	800c234 <_dtoa_r+0x98c>
 800c228:	45b0      	cmp	r8, r6
 800c22a:	d003      	beq.n	800c234 <_dtoa_r+0x98c>
 800c22c:	4641      	mov	r1, r8
 800c22e:	4628      	mov	r0, r5
 800c230:	f000 fba2 	bl	800c978 <_Bfree>
 800c234:	4631      	mov	r1, r6
 800c236:	4628      	mov	r0, r5
 800c238:	f000 fb9e 	bl	800c978 <_Bfree>
 800c23c:	e695      	b.n	800bf6a <_dtoa_r+0x6c2>
 800c23e:	2400      	movs	r4, #0
 800c240:	4626      	mov	r6, r4
 800c242:	e7e1      	b.n	800c208 <_dtoa_r+0x960>
 800c244:	46c1      	mov	r9, r8
 800c246:	4626      	mov	r6, r4
 800c248:	e594      	b.n	800bd74 <_dtoa_r+0x4cc>
 800c24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c24c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c250:	2b00      	cmp	r3, #0
 800c252:	f000 80fc 	beq.w	800c44e <_dtoa_r+0xba6>
 800c256:	2f00      	cmp	r7, #0
 800c258:	dd05      	ble.n	800c266 <_dtoa_r+0x9be>
 800c25a:	4631      	mov	r1, r6
 800c25c:	463a      	mov	r2, r7
 800c25e:	4628      	mov	r0, r5
 800c260:	f000 fd58 	bl	800cd14 <__lshift>
 800c264:	4606      	mov	r6, r0
 800c266:	f1b8 0f00 	cmp.w	r8, #0
 800c26a:	d05c      	beq.n	800c326 <_dtoa_r+0xa7e>
 800c26c:	4628      	mov	r0, r5
 800c26e:	6871      	ldr	r1, [r6, #4]
 800c270:	f000 fb42 	bl	800c8f8 <_Balloc>
 800c274:	4607      	mov	r7, r0
 800c276:	b928      	cbnz	r0, 800c284 <_dtoa_r+0x9dc>
 800c278:	4602      	mov	r2, r0
 800c27a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c27e:	4b7e      	ldr	r3, [pc, #504]	; (800c478 <_dtoa_r+0xbd0>)
 800c280:	f7ff bb26 	b.w	800b8d0 <_dtoa_r+0x28>
 800c284:	6932      	ldr	r2, [r6, #16]
 800c286:	f106 010c 	add.w	r1, r6, #12
 800c28a:	3202      	adds	r2, #2
 800c28c:	0092      	lsls	r2, r2, #2
 800c28e:	300c      	adds	r0, #12
 800c290:	f7fe fbce 	bl	800aa30 <memcpy>
 800c294:	2201      	movs	r2, #1
 800c296:	4639      	mov	r1, r7
 800c298:	4628      	mov	r0, r5
 800c29a:	f000 fd3b 	bl	800cd14 <__lshift>
 800c29e:	46b0      	mov	r8, r6
 800c2a0:	4606      	mov	r6, r0
 800c2a2:	9b08      	ldr	r3, [sp, #32]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	9302      	str	r3, [sp, #8]
 800c2a8:	9b08      	ldr	r3, [sp, #32]
 800c2aa:	445b      	add	r3, fp
 800c2ac:	930a      	str	r3, [sp, #40]	; 0x28
 800c2ae:	9b04      	ldr	r3, [sp, #16]
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c2b6:	9b02      	ldr	r3, [sp, #8]
 800c2b8:	4621      	mov	r1, r4
 800c2ba:	4650      	mov	r0, sl
 800c2bc:	f103 3bff 	add.w	fp, r3, #4294967295
 800c2c0:	f7ff fa63 	bl	800b78a <quorem>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	4641      	mov	r1, r8
 800c2c8:	3330      	adds	r3, #48	; 0x30
 800c2ca:	9004      	str	r0, [sp, #16]
 800c2cc:	4650      	mov	r0, sl
 800c2ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2d0:	f000 fd8c 	bl	800cdec <__mcmp>
 800c2d4:	4632      	mov	r2, r6
 800c2d6:	9006      	str	r0, [sp, #24]
 800c2d8:	4621      	mov	r1, r4
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f000 fda2 	bl	800ce24 <__mdiff>
 800c2e0:	68c2      	ldr	r2, [r0, #12]
 800c2e2:	4607      	mov	r7, r0
 800c2e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2e6:	bb02      	cbnz	r2, 800c32a <_dtoa_r+0xa82>
 800c2e8:	4601      	mov	r1, r0
 800c2ea:	4650      	mov	r0, sl
 800c2ec:	f000 fd7e 	bl	800cdec <__mcmp>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2f4:	4639      	mov	r1, r7
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c2fc:	f000 fb3c 	bl	800c978 <_Bfree>
 800c300:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c304:	9f02      	ldr	r7, [sp, #8]
 800c306:	ea43 0102 	orr.w	r1, r3, r2
 800c30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c30c:	430b      	orrs	r3, r1
 800c30e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c310:	d10d      	bne.n	800c32e <_dtoa_r+0xa86>
 800c312:	2b39      	cmp	r3, #57	; 0x39
 800c314:	d027      	beq.n	800c366 <_dtoa_r+0xabe>
 800c316:	9a06      	ldr	r2, [sp, #24]
 800c318:	2a00      	cmp	r2, #0
 800c31a:	dd01      	ble.n	800c320 <_dtoa_r+0xa78>
 800c31c:	9b04      	ldr	r3, [sp, #16]
 800c31e:	3331      	adds	r3, #49	; 0x31
 800c320:	f88b 3000 	strb.w	r3, [fp]
 800c324:	e776      	b.n	800c214 <_dtoa_r+0x96c>
 800c326:	4630      	mov	r0, r6
 800c328:	e7b9      	b.n	800c29e <_dtoa_r+0x9f6>
 800c32a:	2201      	movs	r2, #1
 800c32c:	e7e2      	b.n	800c2f4 <_dtoa_r+0xa4c>
 800c32e:	9906      	ldr	r1, [sp, #24]
 800c330:	2900      	cmp	r1, #0
 800c332:	db04      	blt.n	800c33e <_dtoa_r+0xa96>
 800c334:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c336:	4301      	orrs	r1, r0
 800c338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c33a:	4301      	orrs	r1, r0
 800c33c:	d120      	bne.n	800c380 <_dtoa_r+0xad8>
 800c33e:	2a00      	cmp	r2, #0
 800c340:	ddee      	ble.n	800c320 <_dtoa_r+0xa78>
 800c342:	4651      	mov	r1, sl
 800c344:	2201      	movs	r2, #1
 800c346:	4628      	mov	r0, r5
 800c348:	9302      	str	r3, [sp, #8]
 800c34a:	f000 fce3 	bl	800cd14 <__lshift>
 800c34e:	4621      	mov	r1, r4
 800c350:	4682      	mov	sl, r0
 800c352:	f000 fd4b 	bl	800cdec <__mcmp>
 800c356:	2800      	cmp	r0, #0
 800c358:	9b02      	ldr	r3, [sp, #8]
 800c35a:	dc02      	bgt.n	800c362 <_dtoa_r+0xaba>
 800c35c:	d1e0      	bne.n	800c320 <_dtoa_r+0xa78>
 800c35e:	07da      	lsls	r2, r3, #31
 800c360:	d5de      	bpl.n	800c320 <_dtoa_r+0xa78>
 800c362:	2b39      	cmp	r3, #57	; 0x39
 800c364:	d1da      	bne.n	800c31c <_dtoa_r+0xa74>
 800c366:	2339      	movs	r3, #57	; 0x39
 800c368:	f88b 3000 	strb.w	r3, [fp]
 800c36c:	463b      	mov	r3, r7
 800c36e:	461f      	mov	r7, r3
 800c370:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c374:	3b01      	subs	r3, #1
 800c376:	2a39      	cmp	r2, #57	; 0x39
 800c378:	d050      	beq.n	800c41c <_dtoa_r+0xb74>
 800c37a:	3201      	adds	r2, #1
 800c37c:	701a      	strb	r2, [r3, #0]
 800c37e:	e749      	b.n	800c214 <_dtoa_r+0x96c>
 800c380:	2a00      	cmp	r2, #0
 800c382:	dd03      	ble.n	800c38c <_dtoa_r+0xae4>
 800c384:	2b39      	cmp	r3, #57	; 0x39
 800c386:	d0ee      	beq.n	800c366 <_dtoa_r+0xabe>
 800c388:	3301      	adds	r3, #1
 800c38a:	e7c9      	b.n	800c320 <_dtoa_r+0xa78>
 800c38c:	9a02      	ldr	r2, [sp, #8]
 800c38e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c390:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c394:	428a      	cmp	r2, r1
 800c396:	d02a      	beq.n	800c3ee <_dtoa_r+0xb46>
 800c398:	4651      	mov	r1, sl
 800c39a:	2300      	movs	r3, #0
 800c39c:	220a      	movs	r2, #10
 800c39e:	4628      	mov	r0, r5
 800c3a0:	f000 fb0c 	bl	800c9bc <__multadd>
 800c3a4:	45b0      	cmp	r8, r6
 800c3a6:	4682      	mov	sl, r0
 800c3a8:	f04f 0300 	mov.w	r3, #0
 800c3ac:	f04f 020a 	mov.w	r2, #10
 800c3b0:	4641      	mov	r1, r8
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	d107      	bne.n	800c3c6 <_dtoa_r+0xb1e>
 800c3b6:	f000 fb01 	bl	800c9bc <__multadd>
 800c3ba:	4680      	mov	r8, r0
 800c3bc:	4606      	mov	r6, r0
 800c3be:	9b02      	ldr	r3, [sp, #8]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	9302      	str	r3, [sp, #8]
 800c3c4:	e777      	b.n	800c2b6 <_dtoa_r+0xa0e>
 800c3c6:	f000 faf9 	bl	800c9bc <__multadd>
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	4680      	mov	r8, r0
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	220a      	movs	r2, #10
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	f000 faf2 	bl	800c9bc <__multadd>
 800c3d8:	4606      	mov	r6, r0
 800c3da:	e7f0      	b.n	800c3be <_dtoa_r+0xb16>
 800c3dc:	f1bb 0f00 	cmp.w	fp, #0
 800c3e0:	bfcc      	ite	gt
 800c3e2:	465f      	movgt	r7, fp
 800c3e4:	2701      	movle	r7, #1
 800c3e6:	f04f 0800 	mov.w	r8, #0
 800c3ea:	9a08      	ldr	r2, [sp, #32]
 800c3ec:	4417      	add	r7, r2
 800c3ee:	4651      	mov	r1, sl
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	9302      	str	r3, [sp, #8]
 800c3f6:	f000 fc8d 	bl	800cd14 <__lshift>
 800c3fa:	4621      	mov	r1, r4
 800c3fc:	4682      	mov	sl, r0
 800c3fe:	f000 fcf5 	bl	800cdec <__mcmp>
 800c402:	2800      	cmp	r0, #0
 800c404:	dcb2      	bgt.n	800c36c <_dtoa_r+0xac4>
 800c406:	d102      	bne.n	800c40e <_dtoa_r+0xb66>
 800c408:	9b02      	ldr	r3, [sp, #8]
 800c40a:	07db      	lsls	r3, r3, #31
 800c40c:	d4ae      	bmi.n	800c36c <_dtoa_r+0xac4>
 800c40e:	463b      	mov	r3, r7
 800c410:	461f      	mov	r7, r3
 800c412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c416:	2a30      	cmp	r2, #48	; 0x30
 800c418:	d0fa      	beq.n	800c410 <_dtoa_r+0xb68>
 800c41a:	e6fb      	b.n	800c214 <_dtoa_r+0x96c>
 800c41c:	9a08      	ldr	r2, [sp, #32]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d1a5      	bne.n	800c36e <_dtoa_r+0xac6>
 800c422:	2331      	movs	r3, #49	; 0x31
 800c424:	f109 0901 	add.w	r9, r9, #1
 800c428:	7013      	strb	r3, [r2, #0]
 800c42a:	e6f3      	b.n	800c214 <_dtoa_r+0x96c>
 800c42c:	4b13      	ldr	r3, [pc, #76]	; (800c47c <_dtoa_r+0xbd4>)
 800c42e:	f7ff baa7 	b.w	800b980 <_dtoa_r+0xd8>
 800c432:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c434:	2b00      	cmp	r3, #0
 800c436:	f47f aa80 	bne.w	800b93a <_dtoa_r+0x92>
 800c43a:	4b11      	ldr	r3, [pc, #68]	; (800c480 <_dtoa_r+0xbd8>)
 800c43c:	f7ff baa0 	b.w	800b980 <_dtoa_r+0xd8>
 800c440:	f1bb 0f00 	cmp.w	fp, #0
 800c444:	dc03      	bgt.n	800c44e <_dtoa_r+0xba6>
 800c446:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c448:	2b02      	cmp	r3, #2
 800c44a:	f73f aecc 	bgt.w	800c1e6 <_dtoa_r+0x93e>
 800c44e:	9f08      	ldr	r7, [sp, #32]
 800c450:	4621      	mov	r1, r4
 800c452:	4650      	mov	r0, sl
 800c454:	f7ff f999 	bl	800b78a <quorem>
 800c458:	9a08      	ldr	r2, [sp, #32]
 800c45a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c45e:	f807 3b01 	strb.w	r3, [r7], #1
 800c462:	1aba      	subs	r2, r7, r2
 800c464:	4593      	cmp	fp, r2
 800c466:	ddb9      	ble.n	800c3dc <_dtoa_r+0xb34>
 800c468:	4651      	mov	r1, sl
 800c46a:	2300      	movs	r3, #0
 800c46c:	220a      	movs	r2, #10
 800c46e:	4628      	mov	r0, r5
 800c470:	f000 faa4 	bl	800c9bc <__multadd>
 800c474:	4682      	mov	sl, r0
 800c476:	e7eb      	b.n	800c450 <_dtoa_r+0xba8>
 800c478:	0800e4a4 	.word	0x0800e4a4
 800c47c:	0800e3fd 	.word	0x0800e3fd
 800c480:	0800e421 	.word	0x0800e421

0800c484 <__sflush_r>:
 800c484:	898a      	ldrh	r2, [r1, #12]
 800c486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c48a:	4605      	mov	r5, r0
 800c48c:	0710      	lsls	r0, r2, #28
 800c48e:	460c      	mov	r4, r1
 800c490:	d458      	bmi.n	800c544 <__sflush_r+0xc0>
 800c492:	684b      	ldr	r3, [r1, #4]
 800c494:	2b00      	cmp	r3, #0
 800c496:	dc05      	bgt.n	800c4a4 <__sflush_r+0x20>
 800c498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	dc02      	bgt.n	800c4a4 <__sflush_r+0x20>
 800c49e:	2000      	movs	r0, #0
 800c4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4a6:	2e00      	cmp	r6, #0
 800c4a8:	d0f9      	beq.n	800c49e <__sflush_r+0x1a>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c4b0:	682f      	ldr	r7, [r5, #0]
 800c4b2:	602b      	str	r3, [r5, #0]
 800c4b4:	d032      	beq.n	800c51c <__sflush_r+0x98>
 800c4b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c4b8:	89a3      	ldrh	r3, [r4, #12]
 800c4ba:	075a      	lsls	r2, r3, #29
 800c4bc:	d505      	bpl.n	800c4ca <__sflush_r+0x46>
 800c4be:	6863      	ldr	r3, [r4, #4]
 800c4c0:	1ac0      	subs	r0, r0, r3
 800c4c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4c4:	b10b      	cbz	r3, 800c4ca <__sflush_r+0x46>
 800c4c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4c8:	1ac0      	subs	r0, r0, r3
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	6a21      	ldr	r1, [r4, #32]
 800c4d4:	47b0      	blx	r6
 800c4d6:	1c43      	adds	r3, r0, #1
 800c4d8:	89a3      	ldrh	r3, [r4, #12]
 800c4da:	d106      	bne.n	800c4ea <__sflush_r+0x66>
 800c4dc:	6829      	ldr	r1, [r5, #0]
 800c4de:	291d      	cmp	r1, #29
 800c4e0:	d82c      	bhi.n	800c53c <__sflush_r+0xb8>
 800c4e2:	4a2a      	ldr	r2, [pc, #168]	; (800c58c <__sflush_r+0x108>)
 800c4e4:	40ca      	lsrs	r2, r1
 800c4e6:	07d6      	lsls	r6, r2, #31
 800c4e8:	d528      	bpl.n	800c53c <__sflush_r+0xb8>
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	6062      	str	r2, [r4, #4]
 800c4ee:	6922      	ldr	r2, [r4, #16]
 800c4f0:	04d9      	lsls	r1, r3, #19
 800c4f2:	6022      	str	r2, [r4, #0]
 800c4f4:	d504      	bpl.n	800c500 <__sflush_r+0x7c>
 800c4f6:	1c42      	adds	r2, r0, #1
 800c4f8:	d101      	bne.n	800c4fe <__sflush_r+0x7a>
 800c4fa:	682b      	ldr	r3, [r5, #0]
 800c4fc:	b903      	cbnz	r3, 800c500 <__sflush_r+0x7c>
 800c4fe:	6560      	str	r0, [r4, #84]	; 0x54
 800c500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c502:	602f      	str	r7, [r5, #0]
 800c504:	2900      	cmp	r1, #0
 800c506:	d0ca      	beq.n	800c49e <__sflush_r+0x1a>
 800c508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c50c:	4299      	cmp	r1, r3
 800c50e:	d002      	beq.n	800c516 <__sflush_r+0x92>
 800c510:	4628      	mov	r0, r5
 800c512:	f000 fd81 	bl	800d018 <_free_r>
 800c516:	2000      	movs	r0, #0
 800c518:	6360      	str	r0, [r4, #52]	; 0x34
 800c51a:	e7c1      	b.n	800c4a0 <__sflush_r+0x1c>
 800c51c:	6a21      	ldr	r1, [r4, #32]
 800c51e:	2301      	movs	r3, #1
 800c520:	4628      	mov	r0, r5
 800c522:	47b0      	blx	r6
 800c524:	1c41      	adds	r1, r0, #1
 800c526:	d1c7      	bne.n	800c4b8 <__sflush_r+0x34>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d0c4      	beq.n	800c4b8 <__sflush_r+0x34>
 800c52e:	2b1d      	cmp	r3, #29
 800c530:	d001      	beq.n	800c536 <__sflush_r+0xb2>
 800c532:	2b16      	cmp	r3, #22
 800c534:	d101      	bne.n	800c53a <__sflush_r+0xb6>
 800c536:	602f      	str	r7, [r5, #0]
 800c538:	e7b1      	b.n	800c49e <__sflush_r+0x1a>
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c540:	81a3      	strh	r3, [r4, #12]
 800c542:	e7ad      	b.n	800c4a0 <__sflush_r+0x1c>
 800c544:	690f      	ldr	r7, [r1, #16]
 800c546:	2f00      	cmp	r7, #0
 800c548:	d0a9      	beq.n	800c49e <__sflush_r+0x1a>
 800c54a:	0793      	lsls	r3, r2, #30
 800c54c:	bf18      	it	ne
 800c54e:	2300      	movne	r3, #0
 800c550:	680e      	ldr	r6, [r1, #0]
 800c552:	bf08      	it	eq
 800c554:	694b      	ldreq	r3, [r1, #20]
 800c556:	eba6 0807 	sub.w	r8, r6, r7
 800c55a:	600f      	str	r7, [r1, #0]
 800c55c:	608b      	str	r3, [r1, #8]
 800c55e:	f1b8 0f00 	cmp.w	r8, #0
 800c562:	dd9c      	ble.n	800c49e <__sflush_r+0x1a>
 800c564:	4643      	mov	r3, r8
 800c566:	463a      	mov	r2, r7
 800c568:	4628      	mov	r0, r5
 800c56a:	6a21      	ldr	r1, [r4, #32]
 800c56c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c56e:	47b0      	blx	r6
 800c570:	2800      	cmp	r0, #0
 800c572:	dc06      	bgt.n	800c582 <__sflush_r+0xfe>
 800c574:	89a3      	ldrh	r3, [r4, #12]
 800c576:	f04f 30ff 	mov.w	r0, #4294967295
 800c57a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c57e:	81a3      	strh	r3, [r4, #12]
 800c580:	e78e      	b.n	800c4a0 <__sflush_r+0x1c>
 800c582:	4407      	add	r7, r0
 800c584:	eba8 0800 	sub.w	r8, r8, r0
 800c588:	e7e9      	b.n	800c55e <__sflush_r+0xda>
 800c58a:	bf00      	nop
 800c58c:	20400001 	.word	0x20400001

0800c590 <_fflush_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	690b      	ldr	r3, [r1, #16]
 800c594:	4605      	mov	r5, r0
 800c596:	460c      	mov	r4, r1
 800c598:	b913      	cbnz	r3, 800c5a0 <_fflush_r+0x10>
 800c59a:	2500      	movs	r5, #0
 800c59c:	4628      	mov	r0, r5
 800c59e:	bd38      	pop	{r3, r4, r5, pc}
 800c5a0:	b118      	cbz	r0, 800c5aa <_fflush_r+0x1a>
 800c5a2:	6983      	ldr	r3, [r0, #24]
 800c5a4:	b90b      	cbnz	r3, 800c5aa <_fflush_r+0x1a>
 800c5a6:	f000 f887 	bl	800c6b8 <__sinit>
 800c5aa:	4b14      	ldr	r3, [pc, #80]	; (800c5fc <_fflush_r+0x6c>)
 800c5ac:	429c      	cmp	r4, r3
 800c5ae:	d11b      	bne.n	800c5e8 <_fflush_r+0x58>
 800c5b0:	686c      	ldr	r4, [r5, #4]
 800c5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d0ef      	beq.n	800c59a <_fflush_r+0xa>
 800c5ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c5bc:	07d0      	lsls	r0, r2, #31
 800c5be:	d404      	bmi.n	800c5ca <_fflush_r+0x3a>
 800c5c0:	0599      	lsls	r1, r3, #22
 800c5c2:	d402      	bmi.n	800c5ca <_fflush_r+0x3a>
 800c5c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5c6:	f000 f91a 	bl	800c7fe <__retarget_lock_acquire_recursive>
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	4621      	mov	r1, r4
 800c5ce:	f7ff ff59 	bl	800c484 <__sflush_r>
 800c5d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5d4:	4605      	mov	r5, r0
 800c5d6:	07da      	lsls	r2, r3, #31
 800c5d8:	d4e0      	bmi.n	800c59c <_fflush_r+0xc>
 800c5da:	89a3      	ldrh	r3, [r4, #12]
 800c5dc:	059b      	lsls	r3, r3, #22
 800c5de:	d4dd      	bmi.n	800c59c <_fflush_r+0xc>
 800c5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5e2:	f000 f90d 	bl	800c800 <__retarget_lock_release_recursive>
 800c5e6:	e7d9      	b.n	800c59c <_fflush_r+0xc>
 800c5e8:	4b05      	ldr	r3, [pc, #20]	; (800c600 <_fflush_r+0x70>)
 800c5ea:	429c      	cmp	r4, r3
 800c5ec:	d101      	bne.n	800c5f2 <_fflush_r+0x62>
 800c5ee:	68ac      	ldr	r4, [r5, #8]
 800c5f0:	e7df      	b.n	800c5b2 <_fflush_r+0x22>
 800c5f2:	4b04      	ldr	r3, [pc, #16]	; (800c604 <_fflush_r+0x74>)
 800c5f4:	429c      	cmp	r4, r3
 800c5f6:	bf08      	it	eq
 800c5f8:	68ec      	ldreq	r4, [r5, #12]
 800c5fa:	e7da      	b.n	800c5b2 <_fflush_r+0x22>
 800c5fc:	0800e4d8 	.word	0x0800e4d8
 800c600:	0800e4f8 	.word	0x0800e4f8
 800c604:	0800e4b8 	.word	0x0800e4b8

0800c608 <std>:
 800c608:	2300      	movs	r3, #0
 800c60a:	b510      	push	{r4, lr}
 800c60c:	4604      	mov	r4, r0
 800c60e:	e9c0 3300 	strd	r3, r3, [r0]
 800c612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c616:	6083      	str	r3, [r0, #8]
 800c618:	8181      	strh	r1, [r0, #12]
 800c61a:	6643      	str	r3, [r0, #100]	; 0x64
 800c61c:	81c2      	strh	r2, [r0, #14]
 800c61e:	6183      	str	r3, [r0, #24]
 800c620:	4619      	mov	r1, r3
 800c622:	2208      	movs	r2, #8
 800c624:	305c      	adds	r0, #92	; 0x5c
 800c626:	f7fe fa11 	bl	800aa4c <memset>
 800c62a:	4b05      	ldr	r3, [pc, #20]	; (800c640 <std+0x38>)
 800c62c:	6224      	str	r4, [r4, #32]
 800c62e:	6263      	str	r3, [r4, #36]	; 0x24
 800c630:	4b04      	ldr	r3, [pc, #16]	; (800c644 <std+0x3c>)
 800c632:	62a3      	str	r3, [r4, #40]	; 0x28
 800c634:	4b04      	ldr	r3, [pc, #16]	; (800c648 <std+0x40>)
 800c636:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c638:	4b04      	ldr	r3, [pc, #16]	; (800c64c <std+0x44>)
 800c63a:	6323      	str	r3, [r4, #48]	; 0x30
 800c63c:	bd10      	pop	{r4, pc}
 800c63e:	bf00      	nop
 800c640:	0800d20d 	.word	0x0800d20d
 800c644:	0800d22f 	.word	0x0800d22f
 800c648:	0800d267 	.word	0x0800d267
 800c64c:	0800d28b 	.word	0x0800d28b

0800c650 <_cleanup_r>:
 800c650:	4901      	ldr	r1, [pc, #4]	; (800c658 <_cleanup_r+0x8>)
 800c652:	f000 b8af 	b.w	800c7b4 <_fwalk_reent>
 800c656:	bf00      	nop
 800c658:	0800c591 	.word	0x0800c591

0800c65c <__sfmoreglue>:
 800c65c:	b570      	push	{r4, r5, r6, lr}
 800c65e:	2568      	movs	r5, #104	; 0x68
 800c660:	1e4a      	subs	r2, r1, #1
 800c662:	4355      	muls	r5, r2
 800c664:	460e      	mov	r6, r1
 800c666:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c66a:	f000 fd21 	bl	800d0b0 <_malloc_r>
 800c66e:	4604      	mov	r4, r0
 800c670:	b140      	cbz	r0, 800c684 <__sfmoreglue+0x28>
 800c672:	2100      	movs	r1, #0
 800c674:	e9c0 1600 	strd	r1, r6, [r0]
 800c678:	300c      	adds	r0, #12
 800c67a:	60a0      	str	r0, [r4, #8]
 800c67c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c680:	f7fe f9e4 	bl	800aa4c <memset>
 800c684:	4620      	mov	r0, r4
 800c686:	bd70      	pop	{r4, r5, r6, pc}

0800c688 <__sfp_lock_acquire>:
 800c688:	4801      	ldr	r0, [pc, #4]	; (800c690 <__sfp_lock_acquire+0x8>)
 800c68a:	f000 b8b8 	b.w	800c7fe <__retarget_lock_acquire_recursive>
 800c68e:	bf00      	nop
 800c690:	20002de4 	.word	0x20002de4

0800c694 <__sfp_lock_release>:
 800c694:	4801      	ldr	r0, [pc, #4]	; (800c69c <__sfp_lock_release+0x8>)
 800c696:	f000 b8b3 	b.w	800c800 <__retarget_lock_release_recursive>
 800c69a:	bf00      	nop
 800c69c:	20002de4 	.word	0x20002de4

0800c6a0 <__sinit_lock_acquire>:
 800c6a0:	4801      	ldr	r0, [pc, #4]	; (800c6a8 <__sinit_lock_acquire+0x8>)
 800c6a2:	f000 b8ac 	b.w	800c7fe <__retarget_lock_acquire_recursive>
 800c6a6:	bf00      	nop
 800c6a8:	20002ddf 	.word	0x20002ddf

0800c6ac <__sinit_lock_release>:
 800c6ac:	4801      	ldr	r0, [pc, #4]	; (800c6b4 <__sinit_lock_release+0x8>)
 800c6ae:	f000 b8a7 	b.w	800c800 <__retarget_lock_release_recursive>
 800c6b2:	bf00      	nop
 800c6b4:	20002ddf 	.word	0x20002ddf

0800c6b8 <__sinit>:
 800c6b8:	b510      	push	{r4, lr}
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	f7ff fff0 	bl	800c6a0 <__sinit_lock_acquire>
 800c6c0:	69a3      	ldr	r3, [r4, #24]
 800c6c2:	b11b      	cbz	r3, 800c6cc <__sinit+0x14>
 800c6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6c8:	f7ff bff0 	b.w	800c6ac <__sinit_lock_release>
 800c6cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c6d0:	6523      	str	r3, [r4, #80]	; 0x50
 800c6d2:	4b13      	ldr	r3, [pc, #76]	; (800c720 <__sinit+0x68>)
 800c6d4:	4a13      	ldr	r2, [pc, #76]	; (800c724 <__sinit+0x6c>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c6da:	42a3      	cmp	r3, r4
 800c6dc:	bf08      	it	eq
 800c6de:	2301      	moveq	r3, #1
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	bf08      	it	eq
 800c6e4:	61a3      	streq	r3, [r4, #24]
 800c6e6:	f000 f81f 	bl	800c728 <__sfp>
 800c6ea:	6060      	str	r0, [r4, #4]
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f000 f81b 	bl	800c728 <__sfp>
 800c6f2:	60a0      	str	r0, [r4, #8]
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f000 f817 	bl	800c728 <__sfp>
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	2104      	movs	r1, #4
 800c6fe:	60e0      	str	r0, [r4, #12]
 800c700:	6860      	ldr	r0, [r4, #4]
 800c702:	f7ff ff81 	bl	800c608 <std>
 800c706:	2201      	movs	r2, #1
 800c708:	2109      	movs	r1, #9
 800c70a:	68a0      	ldr	r0, [r4, #8]
 800c70c:	f7ff ff7c 	bl	800c608 <std>
 800c710:	2202      	movs	r2, #2
 800c712:	2112      	movs	r1, #18
 800c714:	68e0      	ldr	r0, [r4, #12]
 800c716:	f7ff ff77 	bl	800c608 <std>
 800c71a:	2301      	movs	r3, #1
 800c71c:	61a3      	str	r3, [r4, #24]
 800c71e:	e7d1      	b.n	800c6c4 <__sinit+0xc>
 800c720:	0800e3d8 	.word	0x0800e3d8
 800c724:	0800c651 	.word	0x0800c651

0800c728 <__sfp>:
 800c728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72a:	4607      	mov	r7, r0
 800c72c:	f7ff ffac 	bl	800c688 <__sfp_lock_acquire>
 800c730:	4b1e      	ldr	r3, [pc, #120]	; (800c7ac <__sfp+0x84>)
 800c732:	681e      	ldr	r6, [r3, #0]
 800c734:	69b3      	ldr	r3, [r6, #24]
 800c736:	b913      	cbnz	r3, 800c73e <__sfp+0x16>
 800c738:	4630      	mov	r0, r6
 800c73a:	f7ff ffbd 	bl	800c6b8 <__sinit>
 800c73e:	3648      	adds	r6, #72	; 0x48
 800c740:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c744:	3b01      	subs	r3, #1
 800c746:	d503      	bpl.n	800c750 <__sfp+0x28>
 800c748:	6833      	ldr	r3, [r6, #0]
 800c74a:	b30b      	cbz	r3, 800c790 <__sfp+0x68>
 800c74c:	6836      	ldr	r6, [r6, #0]
 800c74e:	e7f7      	b.n	800c740 <__sfp+0x18>
 800c750:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c754:	b9d5      	cbnz	r5, 800c78c <__sfp+0x64>
 800c756:	4b16      	ldr	r3, [pc, #88]	; (800c7b0 <__sfp+0x88>)
 800c758:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c75c:	60e3      	str	r3, [r4, #12]
 800c75e:	6665      	str	r5, [r4, #100]	; 0x64
 800c760:	f000 f84c 	bl	800c7fc <__retarget_lock_init_recursive>
 800c764:	f7ff ff96 	bl	800c694 <__sfp_lock_release>
 800c768:	2208      	movs	r2, #8
 800c76a:	4629      	mov	r1, r5
 800c76c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c770:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c774:	6025      	str	r5, [r4, #0]
 800c776:	61a5      	str	r5, [r4, #24]
 800c778:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c77c:	f7fe f966 	bl	800aa4c <memset>
 800c780:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c784:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c788:	4620      	mov	r0, r4
 800c78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c78c:	3468      	adds	r4, #104	; 0x68
 800c78e:	e7d9      	b.n	800c744 <__sfp+0x1c>
 800c790:	2104      	movs	r1, #4
 800c792:	4638      	mov	r0, r7
 800c794:	f7ff ff62 	bl	800c65c <__sfmoreglue>
 800c798:	4604      	mov	r4, r0
 800c79a:	6030      	str	r0, [r6, #0]
 800c79c:	2800      	cmp	r0, #0
 800c79e:	d1d5      	bne.n	800c74c <__sfp+0x24>
 800c7a0:	f7ff ff78 	bl	800c694 <__sfp_lock_release>
 800c7a4:	230c      	movs	r3, #12
 800c7a6:	603b      	str	r3, [r7, #0]
 800c7a8:	e7ee      	b.n	800c788 <__sfp+0x60>
 800c7aa:	bf00      	nop
 800c7ac:	0800e3d8 	.word	0x0800e3d8
 800c7b0:	ffff0001 	.word	0xffff0001

0800c7b4 <_fwalk_reent>:
 800c7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7b8:	4606      	mov	r6, r0
 800c7ba:	4688      	mov	r8, r1
 800c7bc:	2700      	movs	r7, #0
 800c7be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c7c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7c6:	f1b9 0901 	subs.w	r9, r9, #1
 800c7ca:	d505      	bpl.n	800c7d8 <_fwalk_reent+0x24>
 800c7cc:	6824      	ldr	r4, [r4, #0]
 800c7ce:	2c00      	cmp	r4, #0
 800c7d0:	d1f7      	bne.n	800c7c2 <_fwalk_reent+0xe>
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7d8:	89ab      	ldrh	r3, [r5, #12]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d907      	bls.n	800c7ee <_fwalk_reent+0x3a>
 800c7de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	d003      	beq.n	800c7ee <_fwalk_reent+0x3a>
 800c7e6:	4629      	mov	r1, r5
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	47c0      	blx	r8
 800c7ec:	4307      	orrs	r7, r0
 800c7ee:	3568      	adds	r5, #104	; 0x68
 800c7f0:	e7e9      	b.n	800c7c6 <_fwalk_reent+0x12>
	...

0800c7f4 <_localeconv_r>:
 800c7f4:	4800      	ldr	r0, [pc, #0]	; (800c7f8 <_localeconv_r+0x4>)
 800c7f6:	4770      	bx	lr
 800c7f8:	20000168 	.word	0x20000168

0800c7fc <__retarget_lock_init_recursive>:
 800c7fc:	4770      	bx	lr

0800c7fe <__retarget_lock_acquire_recursive>:
 800c7fe:	4770      	bx	lr

0800c800 <__retarget_lock_release_recursive>:
 800c800:	4770      	bx	lr

0800c802 <__swhatbuf_r>:
 800c802:	b570      	push	{r4, r5, r6, lr}
 800c804:	460e      	mov	r6, r1
 800c806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c80a:	4614      	mov	r4, r2
 800c80c:	2900      	cmp	r1, #0
 800c80e:	461d      	mov	r5, r3
 800c810:	b096      	sub	sp, #88	; 0x58
 800c812:	da07      	bge.n	800c824 <__swhatbuf_r+0x22>
 800c814:	2300      	movs	r3, #0
 800c816:	602b      	str	r3, [r5, #0]
 800c818:	89b3      	ldrh	r3, [r6, #12]
 800c81a:	061a      	lsls	r2, r3, #24
 800c81c:	d410      	bmi.n	800c840 <__swhatbuf_r+0x3e>
 800c81e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c822:	e00e      	b.n	800c842 <__swhatbuf_r+0x40>
 800c824:	466a      	mov	r2, sp
 800c826:	f000 fd57 	bl	800d2d8 <_fstat_r>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	dbf2      	blt.n	800c814 <__swhatbuf_r+0x12>
 800c82e:	9a01      	ldr	r2, [sp, #4]
 800c830:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c834:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c838:	425a      	negs	r2, r3
 800c83a:	415a      	adcs	r2, r3
 800c83c:	602a      	str	r2, [r5, #0]
 800c83e:	e7ee      	b.n	800c81e <__swhatbuf_r+0x1c>
 800c840:	2340      	movs	r3, #64	; 0x40
 800c842:	2000      	movs	r0, #0
 800c844:	6023      	str	r3, [r4, #0]
 800c846:	b016      	add	sp, #88	; 0x58
 800c848:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c84c <__smakebuf_r>:
 800c84c:	898b      	ldrh	r3, [r1, #12]
 800c84e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c850:	079d      	lsls	r5, r3, #30
 800c852:	4606      	mov	r6, r0
 800c854:	460c      	mov	r4, r1
 800c856:	d507      	bpl.n	800c868 <__smakebuf_r+0x1c>
 800c858:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c85c:	6023      	str	r3, [r4, #0]
 800c85e:	6123      	str	r3, [r4, #16]
 800c860:	2301      	movs	r3, #1
 800c862:	6163      	str	r3, [r4, #20]
 800c864:	b002      	add	sp, #8
 800c866:	bd70      	pop	{r4, r5, r6, pc}
 800c868:	466a      	mov	r2, sp
 800c86a:	ab01      	add	r3, sp, #4
 800c86c:	f7ff ffc9 	bl	800c802 <__swhatbuf_r>
 800c870:	9900      	ldr	r1, [sp, #0]
 800c872:	4605      	mov	r5, r0
 800c874:	4630      	mov	r0, r6
 800c876:	f000 fc1b 	bl	800d0b0 <_malloc_r>
 800c87a:	b948      	cbnz	r0, 800c890 <__smakebuf_r+0x44>
 800c87c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c880:	059a      	lsls	r2, r3, #22
 800c882:	d4ef      	bmi.n	800c864 <__smakebuf_r+0x18>
 800c884:	f023 0303 	bic.w	r3, r3, #3
 800c888:	f043 0302 	orr.w	r3, r3, #2
 800c88c:	81a3      	strh	r3, [r4, #12]
 800c88e:	e7e3      	b.n	800c858 <__smakebuf_r+0xc>
 800c890:	4b0d      	ldr	r3, [pc, #52]	; (800c8c8 <__smakebuf_r+0x7c>)
 800c892:	62b3      	str	r3, [r6, #40]	; 0x28
 800c894:	89a3      	ldrh	r3, [r4, #12]
 800c896:	6020      	str	r0, [r4, #0]
 800c898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c89c:	81a3      	strh	r3, [r4, #12]
 800c89e:	9b00      	ldr	r3, [sp, #0]
 800c8a0:	6120      	str	r0, [r4, #16]
 800c8a2:	6163      	str	r3, [r4, #20]
 800c8a4:	9b01      	ldr	r3, [sp, #4]
 800c8a6:	b15b      	cbz	r3, 800c8c0 <__smakebuf_r+0x74>
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8ae:	f000 fd25 	bl	800d2fc <_isatty_r>
 800c8b2:	b128      	cbz	r0, 800c8c0 <__smakebuf_r+0x74>
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	f023 0303 	bic.w	r3, r3, #3
 800c8ba:	f043 0301 	orr.w	r3, r3, #1
 800c8be:	81a3      	strh	r3, [r4, #12]
 800c8c0:	89a0      	ldrh	r0, [r4, #12]
 800c8c2:	4305      	orrs	r5, r0
 800c8c4:	81a5      	strh	r5, [r4, #12]
 800c8c6:	e7cd      	b.n	800c864 <__smakebuf_r+0x18>
 800c8c8:	0800c651 	.word	0x0800c651

0800c8cc <malloc>:
 800c8cc:	4b02      	ldr	r3, [pc, #8]	; (800c8d8 <malloc+0xc>)
 800c8ce:	4601      	mov	r1, r0
 800c8d0:	6818      	ldr	r0, [r3, #0]
 800c8d2:	f000 bbed 	b.w	800d0b0 <_malloc_r>
 800c8d6:	bf00      	nop
 800c8d8:	20000014 	.word	0x20000014

0800c8dc <memchr>:
 800c8dc:	4603      	mov	r3, r0
 800c8de:	b510      	push	{r4, lr}
 800c8e0:	b2c9      	uxtb	r1, r1
 800c8e2:	4402      	add	r2, r0
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	d101      	bne.n	800c8ee <memchr+0x12>
 800c8ea:	2000      	movs	r0, #0
 800c8ec:	e003      	b.n	800c8f6 <memchr+0x1a>
 800c8ee:	7804      	ldrb	r4, [r0, #0]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	428c      	cmp	r4, r1
 800c8f4:	d1f6      	bne.n	800c8e4 <memchr+0x8>
 800c8f6:	bd10      	pop	{r4, pc}

0800c8f8 <_Balloc>:
 800c8f8:	b570      	push	{r4, r5, r6, lr}
 800c8fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	460d      	mov	r5, r1
 800c900:	b976      	cbnz	r6, 800c920 <_Balloc+0x28>
 800c902:	2010      	movs	r0, #16
 800c904:	f7ff ffe2 	bl	800c8cc <malloc>
 800c908:	4602      	mov	r2, r0
 800c90a:	6260      	str	r0, [r4, #36]	; 0x24
 800c90c:	b920      	cbnz	r0, 800c918 <_Balloc+0x20>
 800c90e:	2166      	movs	r1, #102	; 0x66
 800c910:	4b17      	ldr	r3, [pc, #92]	; (800c970 <_Balloc+0x78>)
 800c912:	4818      	ldr	r0, [pc, #96]	; (800c974 <_Balloc+0x7c>)
 800c914:	f7fe f832 	bl	800a97c <__assert_func>
 800c918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c91c:	6006      	str	r6, [r0, #0]
 800c91e:	60c6      	str	r6, [r0, #12]
 800c920:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c922:	68f3      	ldr	r3, [r6, #12]
 800c924:	b183      	cbz	r3, 800c948 <_Balloc+0x50>
 800c926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c92e:	b9b8      	cbnz	r0, 800c960 <_Balloc+0x68>
 800c930:	2101      	movs	r1, #1
 800c932:	fa01 f605 	lsl.w	r6, r1, r5
 800c936:	1d72      	adds	r2, r6, #5
 800c938:	4620      	mov	r0, r4
 800c93a:	0092      	lsls	r2, r2, #2
 800c93c:	f000 fb5e 	bl	800cffc <_calloc_r>
 800c940:	b160      	cbz	r0, 800c95c <_Balloc+0x64>
 800c942:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c946:	e00e      	b.n	800c966 <_Balloc+0x6e>
 800c948:	2221      	movs	r2, #33	; 0x21
 800c94a:	2104      	movs	r1, #4
 800c94c:	4620      	mov	r0, r4
 800c94e:	f000 fb55 	bl	800cffc <_calloc_r>
 800c952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c954:	60f0      	str	r0, [r6, #12]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1e4      	bne.n	800c926 <_Balloc+0x2e>
 800c95c:	2000      	movs	r0, #0
 800c95e:	bd70      	pop	{r4, r5, r6, pc}
 800c960:	6802      	ldr	r2, [r0, #0]
 800c962:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c966:	2300      	movs	r3, #0
 800c968:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c96c:	e7f7      	b.n	800c95e <_Balloc+0x66>
 800c96e:	bf00      	nop
 800c970:	0800e42e 	.word	0x0800e42e
 800c974:	0800e518 	.word	0x0800e518

0800c978 <_Bfree>:
 800c978:	b570      	push	{r4, r5, r6, lr}
 800c97a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c97c:	4605      	mov	r5, r0
 800c97e:	460c      	mov	r4, r1
 800c980:	b976      	cbnz	r6, 800c9a0 <_Bfree+0x28>
 800c982:	2010      	movs	r0, #16
 800c984:	f7ff ffa2 	bl	800c8cc <malloc>
 800c988:	4602      	mov	r2, r0
 800c98a:	6268      	str	r0, [r5, #36]	; 0x24
 800c98c:	b920      	cbnz	r0, 800c998 <_Bfree+0x20>
 800c98e:	218a      	movs	r1, #138	; 0x8a
 800c990:	4b08      	ldr	r3, [pc, #32]	; (800c9b4 <_Bfree+0x3c>)
 800c992:	4809      	ldr	r0, [pc, #36]	; (800c9b8 <_Bfree+0x40>)
 800c994:	f7fd fff2 	bl	800a97c <__assert_func>
 800c998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c99c:	6006      	str	r6, [r0, #0]
 800c99e:	60c6      	str	r6, [r0, #12]
 800c9a0:	b13c      	cbz	r4, 800c9b2 <_Bfree+0x3a>
 800c9a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c9a4:	6862      	ldr	r2, [r4, #4]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9ac:	6021      	str	r1, [r4, #0]
 800c9ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c9b2:	bd70      	pop	{r4, r5, r6, pc}
 800c9b4:	0800e42e 	.word	0x0800e42e
 800c9b8:	0800e518 	.word	0x0800e518

0800c9bc <__multadd>:
 800c9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c0:	4698      	mov	r8, r3
 800c9c2:	460c      	mov	r4, r1
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	690e      	ldr	r6, [r1, #16]
 800c9c8:	4607      	mov	r7, r0
 800c9ca:	f101 0014 	add.w	r0, r1, #20
 800c9ce:	6805      	ldr	r5, [r0, #0]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	b2a9      	uxth	r1, r5
 800c9d4:	fb02 8101 	mla	r1, r2, r1, r8
 800c9d8:	0c2d      	lsrs	r5, r5, #16
 800c9da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c9de:	fb02 c505 	mla	r5, r2, r5, ip
 800c9e2:	b289      	uxth	r1, r1
 800c9e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c9e8:	429e      	cmp	r6, r3
 800c9ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c9ee:	f840 1b04 	str.w	r1, [r0], #4
 800c9f2:	dcec      	bgt.n	800c9ce <__multadd+0x12>
 800c9f4:	f1b8 0f00 	cmp.w	r8, #0
 800c9f8:	d022      	beq.n	800ca40 <__multadd+0x84>
 800c9fa:	68a3      	ldr	r3, [r4, #8]
 800c9fc:	42b3      	cmp	r3, r6
 800c9fe:	dc19      	bgt.n	800ca34 <__multadd+0x78>
 800ca00:	6861      	ldr	r1, [r4, #4]
 800ca02:	4638      	mov	r0, r7
 800ca04:	3101      	adds	r1, #1
 800ca06:	f7ff ff77 	bl	800c8f8 <_Balloc>
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	b928      	cbnz	r0, 800ca1a <__multadd+0x5e>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	21b5      	movs	r1, #181	; 0xb5
 800ca12:	4b0d      	ldr	r3, [pc, #52]	; (800ca48 <__multadd+0x8c>)
 800ca14:	480d      	ldr	r0, [pc, #52]	; (800ca4c <__multadd+0x90>)
 800ca16:	f7fd ffb1 	bl	800a97c <__assert_func>
 800ca1a:	6922      	ldr	r2, [r4, #16]
 800ca1c:	f104 010c 	add.w	r1, r4, #12
 800ca20:	3202      	adds	r2, #2
 800ca22:	0092      	lsls	r2, r2, #2
 800ca24:	300c      	adds	r0, #12
 800ca26:	f7fe f803 	bl	800aa30 <memcpy>
 800ca2a:	4621      	mov	r1, r4
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	f7ff ffa3 	bl	800c978 <_Bfree>
 800ca32:	462c      	mov	r4, r5
 800ca34:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ca38:	3601      	adds	r6, #1
 800ca3a:	f8c3 8014 	str.w	r8, [r3, #20]
 800ca3e:	6126      	str	r6, [r4, #16]
 800ca40:	4620      	mov	r0, r4
 800ca42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca46:	bf00      	nop
 800ca48:	0800e4a4 	.word	0x0800e4a4
 800ca4c:	0800e518 	.word	0x0800e518

0800ca50 <__hi0bits>:
 800ca50:	0c02      	lsrs	r2, r0, #16
 800ca52:	0412      	lsls	r2, r2, #16
 800ca54:	4603      	mov	r3, r0
 800ca56:	b9ca      	cbnz	r2, 800ca8c <__hi0bits+0x3c>
 800ca58:	0403      	lsls	r3, r0, #16
 800ca5a:	2010      	movs	r0, #16
 800ca5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ca60:	bf04      	itt	eq
 800ca62:	021b      	lsleq	r3, r3, #8
 800ca64:	3008      	addeq	r0, #8
 800ca66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ca6a:	bf04      	itt	eq
 800ca6c:	011b      	lsleq	r3, r3, #4
 800ca6e:	3004      	addeq	r0, #4
 800ca70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ca74:	bf04      	itt	eq
 800ca76:	009b      	lsleq	r3, r3, #2
 800ca78:	3002      	addeq	r0, #2
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	db05      	blt.n	800ca8a <__hi0bits+0x3a>
 800ca7e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ca82:	f100 0001 	add.w	r0, r0, #1
 800ca86:	bf08      	it	eq
 800ca88:	2020      	moveq	r0, #32
 800ca8a:	4770      	bx	lr
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	e7e5      	b.n	800ca5c <__hi0bits+0xc>

0800ca90 <__lo0bits>:
 800ca90:	6803      	ldr	r3, [r0, #0]
 800ca92:	4602      	mov	r2, r0
 800ca94:	f013 0007 	ands.w	r0, r3, #7
 800ca98:	d00b      	beq.n	800cab2 <__lo0bits+0x22>
 800ca9a:	07d9      	lsls	r1, r3, #31
 800ca9c:	d422      	bmi.n	800cae4 <__lo0bits+0x54>
 800ca9e:	0798      	lsls	r0, r3, #30
 800caa0:	bf49      	itett	mi
 800caa2:	085b      	lsrmi	r3, r3, #1
 800caa4:	089b      	lsrpl	r3, r3, #2
 800caa6:	2001      	movmi	r0, #1
 800caa8:	6013      	strmi	r3, [r2, #0]
 800caaa:	bf5c      	itt	pl
 800caac:	2002      	movpl	r0, #2
 800caae:	6013      	strpl	r3, [r2, #0]
 800cab0:	4770      	bx	lr
 800cab2:	b299      	uxth	r1, r3
 800cab4:	b909      	cbnz	r1, 800caba <__lo0bits+0x2a>
 800cab6:	2010      	movs	r0, #16
 800cab8:	0c1b      	lsrs	r3, r3, #16
 800caba:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cabe:	bf04      	itt	eq
 800cac0:	0a1b      	lsreq	r3, r3, #8
 800cac2:	3008      	addeq	r0, #8
 800cac4:	0719      	lsls	r1, r3, #28
 800cac6:	bf04      	itt	eq
 800cac8:	091b      	lsreq	r3, r3, #4
 800caca:	3004      	addeq	r0, #4
 800cacc:	0799      	lsls	r1, r3, #30
 800cace:	bf04      	itt	eq
 800cad0:	089b      	lsreq	r3, r3, #2
 800cad2:	3002      	addeq	r0, #2
 800cad4:	07d9      	lsls	r1, r3, #31
 800cad6:	d403      	bmi.n	800cae0 <__lo0bits+0x50>
 800cad8:	085b      	lsrs	r3, r3, #1
 800cada:	f100 0001 	add.w	r0, r0, #1
 800cade:	d003      	beq.n	800cae8 <__lo0bits+0x58>
 800cae0:	6013      	str	r3, [r2, #0]
 800cae2:	4770      	bx	lr
 800cae4:	2000      	movs	r0, #0
 800cae6:	4770      	bx	lr
 800cae8:	2020      	movs	r0, #32
 800caea:	4770      	bx	lr

0800caec <__i2b>:
 800caec:	b510      	push	{r4, lr}
 800caee:	460c      	mov	r4, r1
 800caf0:	2101      	movs	r1, #1
 800caf2:	f7ff ff01 	bl	800c8f8 <_Balloc>
 800caf6:	4602      	mov	r2, r0
 800caf8:	b928      	cbnz	r0, 800cb06 <__i2b+0x1a>
 800cafa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cafe:	4b04      	ldr	r3, [pc, #16]	; (800cb10 <__i2b+0x24>)
 800cb00:	4804      	ldr	r0, [pc, #16]	; (800cb14 <__i2b+0x28>)
 800cb02:	f7fd ff3b 	bl	800a97c <__assert_func>
 800cb06:	2301      	movs	r3, #1
 800cb08:	6144      	str	r4, [r0, #20]
 800cb0a:	6103      	str	r3, [r0, #16]
 800cb0c:	bd10      	pop	{r4, pc}
 800cb0e:	bf00      	nop
 800cb10:	0800e4a4 	.word	0x0800e4a4
 800cb14:	0800e518 	.word	0x0800e518

0800cb18 <__multiply>:
 800cb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb1c:	4614      	mov	r4, r2
 800cb1e:	690a      	ldr	r2, [r1, #16]
 800cb20:	6923      	ldr	r3, [r4, #16]
 800cb22:	460d      	mov	r5, r1
 800cb24:	429a      	cmp	r2, r3
 800cb26:	bfbe      	ittt	lt
 800cb28:	460b      	movlt	r3, r1
 800cb2a:	4625      	movlt	r5, r4
 800cb2c:	461c      	movlt	r4, r3
 800cb2e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cb32:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cb36:	68ab      	ldr	r3, [r5, #8]
 800cb38:	6869      	ldr	r1, [r5, #4]
 800cb3a:	eb0a 0709 	add.w	r7, sl, r9
 800cb3e:	42bb      	cmp	r3, r7
 800cb40:	b085      	sub	sp, #20
 800cb42:	bfb8      	it	lt
 800cb44:	3101      	addlt	r1, #1
 800cb46:	f7ff fed7 	bl	800c8f8 <_Balloc>
 800cb4a:	b930      	cbnz	r0, 800cb5a <__multiply+0x42>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	f240 115d 	movw	r1, #349	; 0x15d
 800cb52:	4b41      	ldr	r3, [pc, #260]	; (800cc58 <__multiply+0x140>)
 800cb54:	4841      	ldr	r0, [pc, #260]	; (800cc5c <__multiply+0x144>)
 800cb56:	f7fd ff11 	bl	800a97c <__assert_func>
 800cb5a:	f100 0614 	add.w	r6, r0, #20
 800cb5e:	4633      	mov	r3, r6
 800cb60:	2200      	movs	r2, #0
 800cb62:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cb66:	4543      	cmp	r3, r8
 800cb68:	d31e      	bcc.n	800cba8 <__multiply+0x90>
 800cb6a:	f105 0c14 	add.w	ip, r5, #20
 800cb6e:	f104 0314 	add.w	r3, r4, #20
 800cb72:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cb76:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cb7a:	9202      	str	r2, [sp, #8]
 800cb7c:	ebac 0205 	sub.w	r2, ip, r5
 800cb80:	3a15      	subs	r2, #21
 800cb82:	f022 0203 	bic.w	r2, r2, #3
 800cb86:	3204      	adds	r2, #4
 800cb88:	f105 0115 	add.w	r1, r5, #21
 800cb8c:	458c      	cmp	ip, r1
 800cb8e:	bf38      	it	cc
 800cb90:	2204      	movcc	r2, #4
 800cb92:	9201      	str	r2, [sp, #4]
 800cb94:	9a02      	ldr	r2, [sp, #8]
 800cb96:	9303      	str	r3, [sp, #12]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d808      	bhi.n	800cbae <__multiply+0x96>
 800cb9c:	2f00      	cmp	r7, #0
 800cb9e:	dc55      	bgt.n	800cc4c <__multiply+0x134>
 800cba0:	6107      	str	r7, [r0, #16]
 800cba2:	b005      	add	sp, #20
 800cba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba8:	f843 2b04 	str.w	r2, [r3], #4
 800cbac:	e7db      	b.n	800cb66 <__multiply+0x4e>
 800cbae:	f8b3 a000 	ldrh.w	sl, [r3]
 800cbb2:	f1ba 0f00 	cmp.w	sl, #0
 800cbb6:	d020      	beq.n	800cbfa <__multiply+0xe2>
 800cbb8:	46b1      	mov	r9, r6
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f105 0e14 	add.w	lr, r5, #20
 800cbc0:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cbc4:	f8d9 b000 	ldr.w	fp, [r9]
 800cbc8:	b2a1      	uxth	r1, r4
 800cbca:	fa1f fb8b 	uxth.w	fp, fp
 800cbce:	fb0a b101 	mla	r1, sl, r1, fp
 800cbd2:	4411      	add	r1, r2
 800cbd4:	f8d9 2000 	ldr.w	r2, [r9]
 800cbd8:	0c24      	lsrs	r4, r4, #16
 800cbda:	0c12      	lsrs	r2, r2, #16
 800cbdc:	fb0a 2404 	mla	r4, sl, r4, r2
 800cbe0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cbe4:	b289      	uxth	r1, r1
 800cbe6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cbea:	45f4      	cmp	ip, lr
 800cbec:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cbf0:	f849 1b04 	str.w	r1, [r9], #4
 800cbf4:	d8e4      	bhi.n	800cbc0 <__multiply+0xa8>
 800cbf6:	9901      	ldr	r1, [sp, #4]
 800cbf8:	5072      	str	r2, [r6, r1]
 800cbfa:	9a03      	ldr	r2, [sp, #12]
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc02:	f1b9 0f00 	cmp.w	r9, #0
 800cc06:	d01f      	beq.n	800cc48 <__multiply+0x130>
 800cc08:	46b6      	mov	lr, r6
 800cc0a:	f04f 0a00 	mov.w	sl, #0
 800cc0e:	6834      	ldr	r4, [r6, #0]
 800cc10:	f105 0114 	add.w	r1, r5, #20
 800cc14:	880a      	ldrh	r2, [r1, #0]
 800cc16:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cc1a:	b2a4      	uxth	r4, r4
 800cc1c:	fb09 b202 	mla	r2, r9, r2, fp
 800cc20:	4492      	add	sl, r2
 800cc22:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cc26:	f84e 4b04 	str.w	r4, [lr], #4
 800cc2a:	f851 4b04 	ldr.w	r4, [r1], #4
 800cc2e:	f8be 2000 	ldrh.w	r2, [lr]
 800cc32:	0c24      	lsrs	r4, r4, #16
 800cc34:	fb09 2404 	mla	r4, r9, r4, r2
 800cc38:	458c      	cmp	ip, r1
 800cc3a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cc3e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cc42:	d8e7      	bhi.n	800cc14 <__multiply+0xfc>
 800cc44:	9a01      	ldr	r2, [sp, #4]
 800cc46:	50b4      	str	r4, [r6, r2]
 800cc48:	3604      	adds	r6, #4
 800cc4a:	e7a3      	b.n	800cb94 <__multiply+0x7c>
 800cc4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d1a5      	bne.n	800cba0 <__multiply+0x88>
 800cc54:	3f01      	subs	r7, #1
 800cc56:	e7a1      	b.n	800cb9c <__multiply+0x84>
 800cc58:	0800e4a4 	.word	0x0800e4a4
 800cc5c:	0800e518 	.word	0x0800e518

0800cc60 <__pow5mult>:
 800cc60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc64:	4615      	mov	r5, r2
 800cc66:	f012 0203 	ands.w	r2, r2, #3
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	460f      	mov	r7, r1
 800cc6e:	d007      	beq.n	800cc80 <__pow5mult+0x20>
 800cc70:	4c25      	ldr	r4, [pc, #148]	; (800cd08 <__pow5mult+0xa8>)
 800cc72:	3a01      	subs	r2, #1
 800cc74:	2300      	movs	r3, #0
 800cc76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc7a:	f7ff fe9f 	bl	800c9bc <__multadd>
 800cc7e:	4607      	mov	r7, r0
 800cc80:	10ad      	asrs	r5, r5, #2
 800cc82:	d03d      	beq.n	800cd00 <__pow5mult+0xa0>
 800cc84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cc86:	b97c      	cbnz	r4, 800cca8 <__pow5mult+0x48>
 800cc88:	2010      	movs	r0, #16
 800cc8a:	f7ff fe1f 	bl	800c8cc <malloc>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	6270      	str	r0, [r6, #36]	; 0x24
 800cc92:	b928      	cbnz	r0, 800cca0 <__pow5mult+0x40>
 800cc94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cc98:	4b1c      	ldr	r3, [pc, #112]	; (800cd0c <__pow5mult+0xac>)
 800cc9a:	481d      	ldr	r0, [pc, #116]	; (800cd10 <__pow5mult+0xb0>)
 800cc9c:	f7fd fe6e 	bl	800a97c <__assert_func>
 800cca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cca4:	6004      	str	r4, [r0, #0]
 800cca6:	60c4      	str	r4, [r0, #12]
 800cca8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ccac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ccb0:	b94c      	cbnz	r4, 800ccc6 <__pow5mult+0x66>
 800ccb2:	f240 2171 	movw	r1, #625	; 0x271
 800ccb6:	4630      	mov	r0, r6
 800ccb8:	f7ff ff18 	bl	800caec <__i2b>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	f8c8 0008 	str.w	r0, [r8, #8]
 800ccc4:	6003      	str	r3, [r0, #0]
 800ccc6:	f04f 0900 	mov.w	r9, #0
 800ccca:	07eb      	lsls	r3, r5, #31
 800cccc:	d50a      	bpl.n	800cce4 <__pow5mult+0x84>
 800ccce:	4639      	mov	r1, r7
 800ccd0:	4622      	mov	r2, r4
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	f7ff ff20 	bl	800cb18 <__multiply>
 800ccd8:	4680      	mov	r8, r0
 800ccda:	4639      	mov	r1, r7
 800ccdc:	4630      	mov	r0, r6
 800ccde:	f7ff fe4b 	bl	800c978 <_Bfree>
 800cce2:	4647      	mov	r7, r8
 800cce4:	106d      	asrs	r5, r5, #1
 800cce6:	d00b      	beq.n	800cd00 <__pow5mult+0xa0>
 800cce8:	6820      	ldr	r0, [r4, #0]
 800ccea:	b938      	cbnz	r0, 800ccfc <__pow5mult+0x9c>
 800ccec:	4622      	mov	r2, r4
 800ccee:	4621      	mov	r1, r4
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	f7ff ff11 	bl	800cb18 <__multiply>
 800ccf6:	6020      	str	r0, [r4, #0]
 800ccf8:	f8c0 9000 	str.w	r9, [r0]
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	e7e4      	b.n	800ccca <__pow5mult+0x6a>
 800cd00:	4638      	mov	r0, r7
 800cd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd06:	bf00      	nop
 800cd08:	0800e668 	.word	0x0800e668
 800cd0c:	0800e42e 	.word	0x0800e42e
 800cd10:	0800e518 	.word	0x0800e518

0800cd14 <__lshift>:
 800cd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd18:	460c      	mov	r4, r1
 800cd1a:	4607      	mov	r7, r0
 800cd1c:	4691      	mov	r9, r2
 800cd1e:	6923      	ldr	r3, [r4, #16]
 800cd20:	6849      	ldr	r1, [r1, #4]
 800cd22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd26:	68a3      	ldr	r3, [r4, #8]
 800cd28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd2c:	f108 0601 	add.w	r6, r8, #1
 800cd30:	42b3      	cmp	r3, r6
 800cd32:	db0b      	blt.n	800cd4c <__lshift+0x38>
 800cd34:	4638      	mov	r0, r7
 800cd36:	f7ff fddf 	bl	800c8f8 <_Balloc>
 800cd3a:	4605      	mov	r5, r0
 800cd3c:	b948      	cbnz	r0, 800cd52 <__lshift+0x3e>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cd44:	4b27      	ldr	r3, [pc, #156]	; (800cde4 <__lshift+0xd0>)
 800cd46:	4828      	ldr	r0, [pc, #160]	; (800cde8 <__lshift+0xd4>)
 800cd48:	f7fd fe18 	bl	800a97c <__assert_func>
 800cd4c:	3101      	adds	r1, #1
 800cd4e:	005b      	lsls	r3, r3, #1
 800cd50:	e7ee      	b.n	800cd30 <__lshift+0x1c>
 800cd52:	2300      	movs	r3, #0
 800cd54:	f100 0114 	add.w	r1, r0, #20
 800cd58:	f100 0210 	add.w	r2, r0, #16
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	4553      	cmp	r3, sl
 800cd60:	db33      	blt.n	800cdca <__lshift+0xb6>
 800cd62:	6920      	ldr	r0, [r4, #16]
 800cd64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd68:	f104 0314 	add.w	r3, r4, #20
 800cd6c:	f019 091f 	ands.w	r9, r9, #31
 800cd70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cd78:	d02b      	beq.n	800cdd2 <__lshift+0xbe>
 800cd7a:	468a      	mov	sl, r1
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f1c9 0e20 	rsb	lr, r9, #32
 800cd82:	6818      	ldr	r0, [r3, #0]
 800cd84:	fa00 f009 	lsl.w	r0, r0, r9
 800cd88:	4302      	orrs	r2, r0
 800cd8a:	f84a 2b04 	str.w	r2, [sl], #4
 800cd8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd92:	459c      	cmp	ip, r3
 800cd94:	fa22 f20e 	lsr.w	r2, r2, lr
 800cd98:	d8f3      	bhi.n	800cd82 <__lshift+0x6e>
 800cd9a:	ebac 0304 	sub.w	r3, ip, r4
 800cd9e:	3b15      	subs	r3, #21
 800cda0:	f023 0303 	bic.w	r3, r3, #3
 800cda4:	3304      	adds	r3, #4
 800cda6:	f104 0015 	add.w	r0, r4, #21
 800cdaa:	4584      	cmp	ip, r0
 800cdac:	bf38      	it	cc
 800cdae:	2304      	movcc	r3, #4
 800cdb0:	50ca      	str	r2, [r1, r3]
 800cdb2:	b10a      	cbz	r2, 800cdb8 <__lshift+0xa4>
 800cdb4:	f108 0602 	add.w	r6, r8, #2
 800cdb8:	3e01      	subs	r6, #1
 800cdba:	4638      	mov	r0, r7
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	612e      	str	r6, [r5, #16]
 800cdc0:	f7ff fdda 	bl	800c978 <_Bfree>
 800cdc4:	4628      	mov	r0, r5
 800cdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdca:	f842 0f04 	str.w	r0, [r2, #4]!
 800cdce:	3301      	adds	r3, #1
 800cdd0:	e7c5      	b.n	800cd5e <__lshift+0x4a>
 800cdd2:	3904      	subs	r1, #4
 800cdd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdd8:	459c      	cmp	ip, r3
 800cdda:	f841 2f04 	str.w	r2, [r1, #4]!
 800cdde:	d8f9      	bhi.n	800cdd4 <__lshift+0xc0>
 800cde0:	e7ea      	b.n	800cdb8 <__lshift+0xa4>
 800cde2:	bf00      	nop
 800cde4:	0800e4a4 	.word	0x0800e4a4
 800cde8:	0800e518 	.word	0x0800e518

0800cdec <__mcmp>:
 800cdec:	4603      	mov	r3, r0
 800cdee:	690a      	ldr	r2, [r1, #16]
 800cdf0:	6900      	ldr	r0, [r0, #16]
 800cdf2:	b530      	push	{r4, r5, lr}
 800cdf4:	1a80      	subs	r0, r0, r2
 800cdf6:	d10d      	bne.n	800ce14 <__mcmp+0x28>
 800cdf8:	3314      	adds	r3, #20
 800cdfa:	3114      	adds	r1, #20
 800cdfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ce00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ce04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce0c:	4295      	cmp	r5, r2
 800ce0e:	d002      	beq.n	800ce16 <__mcmp+0x2a>
 800ce10:	d304      	bcc.n	800ce1c <__mcmp+0x30>
 800ce12:	2001      	movs	r0, #1
 800ce14:	bd30      	pop	{r4, r5, pc}
 800ce16:	42a3      	cmp	r3, r4
 800ce18:	d3f4      	bcc.n	800ce04 <__mcmp+0x18>
 800ce1a:	e7fb      	b.n	800ce14 <__mcmp+0x28>
 800ce1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce20:	e7f8      	b.n	800ce14 <__mcmp+0x28>
	...

0800ce24 <__mdiff>:
 800ce24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce28:	460c      	mov	r4, r1
 800ce2a:	4606      	mov	r6, r0
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	4620      	mov	r0, r4
 800ce30:	4692      	mov	sl, r2
 800ce32:	f7ff ffdb 	bl	800cdec <__mcmp>
 800ce36:	1e05      	subs	r5, r0, #0
 800ce38:	d111      	bne.n	800ce5e <__mdiff+0x3a>
 800ce3a:	4629      	mov	r1, r5
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	f7ff fd5b 	bl	800c8f8 <_Balloc>
 800ce42:	4602      	mov	r2, r0
 800ce44:	b928      	cbnz	r0, 800ce52 <__mdiff+0x2e>
 800ce46:	f240 2132 	movw	r1, #562	; 0x232
 800ce4a:	4b3c      	ldr	r3, [pc, #240]	; (800cf3c <__mdiff+0x118>)
 800ce4c:	483c      	ldr	r0, [pc, #240]	; (800cf40 <__mdiff+0x11c>)
 800ce4e:	f7fd fd95 	bl	800a97c <__assert_func>
 800ce52:	2301      	movs	r3, #1
 800ce54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ce58:	4610      	mov	r0, r2
 800ce5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce5e:	bfa4      	itt	ge
 800ce60:	4653      	movge	r3, sl
 800ce62:	46a2      	movge	sl, r4
 800ce64:	4630      	mov	r0, r6
 800ce66:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ce6a:	bfa6      	itte	ge
 800ce6c:	461c      	movge	r4, r3
 800ce6e:	2500      	movge	r5, #0
 800ce70:	2501      	movlt	r5, #1
 800ce72:	f7ff fd41 	bl	800c8f8 <_Balloc>
 800ce76:	4602      	mov	r2, r0
 800ce78:	b918      	cbnz	r0, 800ce82 <__mdiff+0x5e>
 800ce7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ce7e:	4b2f      	ldr	r3, [pc, #188]	; (800cf3c <__mdiff+0x118>)
 800ce80:	e7e4      	b.n	800ce4c <__mdiff+0x28>
 800ce82:	f100 0814 	add.w	r8, r0, #20
 800ce86:	f8da 7010 	ldr.w	r7, [sl, #16]
 800ce8a:	60c5      	str	r5, [r0, #12]
 800ce8c:	f04f 0c00 	mov.w	ip, #0
 800ce90:	f10a 0514 	add.w	r5, sl, #20
 800ce94:	f10a 0010 	add.w	r0, sl, #16
 800ce98:	46c2      	mov	sl, r8
 800ce9a:	6926      	ldr	r6, [r4, #16]
 800ce9c:	f104 0914 	add.w	r9, r4, #20
 800cea0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800cea4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cea8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800ceac:	f859 3b04 	ldr.w	r3, [r9], #4
 800ceb0:	fa1f f18b 	uxth.w	r1, fp
 800ceb4:	4461      	add	r1, ip
 800ceb6:	fa1f fc83 	uxth.w	ip, r3
 800ceba:	0c1b      	lsrs	r3, r3, #16
 800cebc:	eba1 010c 	sub.w	r1, r1, ip
 800cec0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cec4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cec8:	b289      	uxth	r1, r1
 800ceca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800cece:	454e      	cmp	r6, r9
 800ced0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ced4:	f84a 3b04 	str.w	r3, [sl], #4
 800ced8:	d8e6      	bhi.n	800cea8 <__mdiff+0x84>
 800ceda:	1b33      	subs	r3, r6, r4
 800cedc:	3b15      	subs	r3, #21
 800cede:	f023 0303 	bic.w	r3, r3, #3
 800cee2:	3415      	adds	r4, #21
 800cee4:	3304      	adds	r3, #4
 800cee6:	42a6      	cmp	r6, r4
 800cee8:	bf38      	it	cc
 800ceea:	2304      	movcc	r3, #4
 800ceec:	441d      	add	r5, r3
 800ceee:	4443      	add	r3, r8
 800cef0:	461e      	mov	r6, r3
 800cef2:	462c      	mov	r4, r5
 800cef4:	4574      	cmp	r4, lr
 800cef6:	d30e      	bcc.n	800cf16 <__mdiff+0xf2>
 800cef8:	f10e 0103 	add.w	r1, lr, #3
 800cefc:	1b49      	subs	r1, r1, r5
 800cefe:	f021 0103 	bic.w	r1, r1, #3
 800cf02:	3d03      	subs	r5, #3
 800cf04:	45ae      	cmp	lr, r5
 800cf06:	bf38      	it	cc
 800cf08:	2100      	movcc	r1, #0
 800cf0a:	4419      	add	r1, r3
 800cf0c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800cf10:	b18b      	cbz	r3, 800cf36 <__mdiff+0x112>
 800cf12:	6117      	str	r7, [r2, #16]
 800cf14:	e7a0      	b.n	800ce58 <__mdiff+0x34>
 800cf16:	f854 8b04 	ldr.w	r8, [r4], #4
 800cf1a:	fa1f f188 	uxth.w	r1, r8
 800cf1e:	4461      	add	r1, ip
 800cf20:	1408      	asrs	r0, r1, #16
 800cf22:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800cf26:	b289      	uxth	r1, r1
 800cf28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cf2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf30:	f846 1b04 	str.w	r1, [r6], #4
 800cf34:	e7de      	b.n	800cef4 <__mdiff+0xd0>
 800cf36:	3f01      	subs	r7, #1
 800cf38:	e7e8      	b.n	800cf0c <__mdiff+0xe8>
 800cf3a:	bf00      	nop
 800cf3c:	0800e4a4 	.word	0x0800e4a4
 800cf40:	0800e518 	.word	0x0800e518

0800cf44 <__d2b>:
 800cf44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cf48:	2101      	movs	r1, #1
 800cf4a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800cf4e:	4690      	mov	r8, r2
 800cf50:	461d      	mov	r5, r3
 800cf52:	f7ff fcd1 	bl	800c8f8 <_Balloc>
 800cf56:	4604      	mov	r4, r0
 800cf58:	b930      	cbnz	r0, 800cf68 <__d2b+0x24>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	f240 310a 	movw	r1, #778	; 0x30a
 800cf60:	4b24      	ldr	r3, [pc, #144]	; (800cff4 <__d2b+0xb0>)
 800cf62:	4825      	ldr	r0, [pc, #148]	; (800cff8 <__d2b+0xb4>)
 800cf64:	f7fd fd0a 	bl	800a97c <__assert_func>
 800cf68:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cf6c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800cf70:	bb2d      	cbnz	r5, 800cfbe <__d2b+0x7a>
 800cf72:	9301      	str	r3, [sp, #4]
 800cf74:	f1b8 0300 	subs.w	r3, r8, #0
 800cf78:	d026      	beq.n	800cfc8 <__d2b+0x84>
 800cf7a:	4668      	mov	r0, sp
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	f7ff fd87 	bl	800ca90 <__lo0bits>
 800cf82:	9900      	ldr	r1, [sp, #0]
 800cf84:	b1f0      	cbz	r0, 800cfc4 <__d2b+0x80>
 800cf86:	9a01      	ldr	r2, [sp, #4]
 800cf88:	f1c0 0320 	rsb	r3, r0, #32
 800cf8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cf90:	430b      	orrs	r3, r1
 800cf92:	40c2      	lsrs	r2, r0
 800cf94:	6163      	str	r3, [r4, #20]
 800cf96:	9201      	str	r2, [sp, #4]
 800cf98:	9b01      	ldr	r3, [sp, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	bf14      	ite	ne
 800cf9e:	2102      	movne	r1, #2
 800cfa0:	2101      	moveq	r1, #1
 800cfa2:	61a3      	str	r3, [r4, #24]
 800cfa4:	6121      	str	r1, [r4, #16]
 800cfa6:	b1c5      	cbz	r5, 800cfda <__d2b+0x96>
 800cfa8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cfac:	4405      	add	r5, r0
 800cfae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cfb2:	603d      	str	r5, [r7, #0]
 800cfb4:	6030      	str	r0, [r6, #0]
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	b002      	add	sp, #8
 800cfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfc2:	e7d6      	b.n	800cf72 <__d2b+0x2e>
 800cfc4:	6161      	str	r1, [r4, #20]
 800cfc6:	e7e7      	b.n	800cf98 <__d2b+0x54>
 800cfc8:	a801      	add	r0, sp, #4
 800cfca:	f7ff fd61 	bl	800ca90 <__lo0bits>
 800cfce:	2101      	movs	r1, #1
 800cfd0:	9b01      	ldr	r3, [sp, #4]
 800cfd2:	6121      	str	r1, [r4, #16]
 800cfd4:	6163      	str	r3, [r4, #20]
 800cfd6:	3020      	adds	r0, #32
 800cfd8:	e7e5      	b.n	800cfa6 <__d2b+0x62>
 800cfda:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cfde:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cfe2:	6038      	str	r0, [r7, #0]
 800cfe4:	6918      	ldr	r0, [r3, #16]
 800cfe6:	f7ff fd33 	bl	800ca50 <__hi0bits>
 800cfea:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cfee:	6031      	str	r1, [r6, #0]
 800cff0:	e7e1      	b.n	800cfb6 <__d2b+0x72>
 800cff2:	bf00      	nop
 800cff4:	0800e4a4 	.word	0x0800e4a4
 800cff8:	0800e518 	.word	0x0800e518

0800cffc <_calloc_r>:
 800cffc:	b538      	push	{r3, r4, r5, lr}
 800cffe:	fb02 f501 	mul.w	r5, r2, r1
 800d002:	4629      	mov	r1, r5
 800d004:	f000 f854 	bl	800d0b0 <_malloc_r>
 800d008:	4604      	mov	r4, r0
 800d00a:	b118      	cbz	r0, 800d014 <_calloc_r+0x18>
 800d00c:	462a      	mov	r2, r5
 800d00e:	2100      	movs	r1, #0
 800d010:	f7fd fd1c 	bl	800aa4c <memset>
 800d014:	4620      	mov	r0, r4
 800d016:	bd38      	pop	{r3, r4, r5, pc}

0800d018 <_free_r>:
 800d018:	b538      	push	{r3, r4, r5, lr}
 800d01a:	4605      	mov	r5, r0
 800d01c:	2900      	cmp	r1, #0
 800d01e:	d043      	beq.n	800d0a8 <_free_r+0x90>
 800d020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d024:	1f0c      	subs	r4, r1, #4
 800d026:	2b00      	cmp	r3, #0
 800d028:	bfb8      	it	lt
 800d02a:	18e4      	addlt	r4, r4, r3
 800d02c:	f000 f99a 	bl	800d364 <__malloc_lock>
 800d030:	4a1e      	ldr	r2, [pc, #120]	; (800d0ac <_free_r+0x94>)
 800d032:	6813      	ldr	r3, [r2, #0]
 800d034:	4610      	mov	r0, r2
 800d036:	b933      	cbnz	r3, 800d046 <_free_r+0x2e>
 800d038:	6063      	str	r3, [r4, #4]
 800d03a:	6014      	str	r4, [r2, #0]
 800d03c:	4628      	mov	r0, r5
 800d03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d042:	f000 b995 	b.w	800d370 <__malloc_unlock>
 800d046:	42a3      	cmp	r3, r4
 800d048:	d90a      	bls.n	800d060 <_free_r+0x48>
 800d04a:	6821      	ldr	r1, [r4, #0]
 800d04c:	1862      	adds	r2, r4, r1
 800d04e:	4293      	cmp	r3, r2
 800d050:	bf01      	itttt	eq
 800d052:	681a      	ldreq	r2, [r3, #0]
 800d054:	685b      	ldreq	r3, [r3, #4]
 800d056:	1852      	addeq	r2, r2, r1
 800d058:	6022      	streq	r2, [r4, #0]
 800d05a:	6063      	str	r3, [r4, #4]
 800d05c:	6004      	str	r4, [r0, #0]
 800d05e:	e7ed      	b.n	800d03c <_free_r+0x24>
 800d060:	461a      	mov	r2, r3
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	b10b      	cbz	r3, 800d06a <_free_r+0x52>
 800d066:	42a3      	cmp	r3, r4
 800d068:	d9fa      	bls.n	800d060 <_free_r+0x48>
 800d06a:	6811      	ldr	r1, [r2, #0]
 800d06c:	1850      	adds	r0, r2, r1
 800d06e:	42a0      	cmp	r0, r4
 800d070:	d10b      	bne.n	800d08a <_free_r+0x72>
 800d072:	6820      	ldr	r0, [r4, #0]
 800d074:	4401      	add	r1, r0
 800d076:	1850      	adds	r0, r2, r1
 800d078:	4283      	cmp	r3, r0
 800d07a:	6011      	str	r1, [r2, #0]
 800d07c:	d1de      	bne.n	800d03c <_free_r+0x24>
 800d07e:	6818      	ldr	r0, [r3, #0]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	4401      	add	r1, r0
 800d084:	6011      	str	r1, [r2, #0]
 800d086:	6053      	str	r3, [r2, #4]
 800d088:	e7d8      	b.n	800d03c <_free_r+0x24>
 800d08a:	d902      	bls.n	800d092 <_free_r+0x7a>
 800d08c:	230c      	movs	r3, #12
 800d08e:	602b      	str	r3, [r5, #0]
 800d090:	e7d4      	b.n	800d03c <_free_r+0x24>
 800d092:	6820      	ldr	r0, [r4, #0]
 800d094:	1821      	adds	r1, r4, r0
 800d096:	428b      	cmp	r3, r1
 800d098:	bf01      	itttt	eq
 800d09a:	6819      	ldreq	r1, [r3, #0]
 800d09c:	685b      	ldreq	r3, [r3, #4]
 800d09e:	1809      	addeq	r1, r1, r0
 800d0a0:	6021      	streq	r1, [r4, #0]
 800d0a2:	6063      	str	r3, [r4, #4]
 800d0a4:	6054      	str	r4, [r2, #4]
 800d0a6:	e7c9      	b.n	800d03c <_free_r+0x24>
 800d0a8:	bd38      	pop	{r3, r4, r5, pc}
 800d0aa:	bf00      	nop
 800d0ac:	20002b38 	.word	0x20002b38

0800d0b0 <_malloc_r>:
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b2:	1ccd      	adds	r5, r1, #3
 800d0b4:	f025 0503 	bic.w	r5, r5, #3
 800d0b8:	3508      	adds	r5, #8
 800d0ba:	2d0c      	cmp	r5, #12
 800d0bc:	bf38      	it	cc
 800d0be:	250c      	movcc	r5, #12
 800d0c0:	2d00      	cmp	r5, #0
 800d0c2:	4606      	mov	r6, r0
 800d0c4:	db01      	blt.n	800d0ca <_malloc_r+0x1a>
 800d0c6:	42a9      	cmp	r1, r5
 800d0c8:	d903      	bls.n	800d0d2 <_malloc_r+0x22>
 800d0ca:	230c      	movs	r3, #12
 800d0cc:	6033      	str	r3, [r6, #0]
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0d2:	f000 f947 	bl	800d364 <__malloc_lock>
 800d0d6:	4921      	ldr	r1, [pc, #132]	; (800d15c <_malloc_r+0xac>)
 800d0d8:	680a      	ldr	r2, [r1, #0]
 800d0da:	4614      	mov	r4, r2
 800d0dc:	b99c      	cbnz	r4, 800d106 <_malloc_r+0x56>
 800d0de:	4f20      	ldr	r7, [pc, #128]	; (800d160 <_malloc_r+0xb0>)
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	b923      	cbnz	r3, 800d0ee <_malloc_r+0x3e>
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	f000 f83c 	bl	800d164 <_sbrk_r>
 800d0ec:	6038      	str	r0, [r7, #0]
 800d0ee:	4629      	mov	r1, r5
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	f000 f837 	bl	800d164 <_sbrk_r>
 800d0f6:	1c43      	adds	r3, r0, #1
 800d0f8:	d123      	bne.n	800d142 <_malloc_r+0x92>
 800d0fa:	230c      	movs	r3, #12
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	6033      	str	r3, [r6, #0]
 800d100:	f000 f936 	bl	800d370 <__malloc_unlock>
 800d104:	e7e3      	b.n	800d0ce <_malloc_r+0x1e>
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	1b5b      	subs	r3, r3, r5
 800d10a:	d417      	bmi.n	800d13c <_malloc_r+0x8c>
 800d10c:	2b0b      	cmp	r3, #11
 800d10e:	d903      	bls.n	800d118 <_malloc_r+0x68>
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	441c      	add	r4, r3
 800d114:	6025      	str	r5, [r4, #0]
 800d116:	e004      	b.n	800d122 <_malloc_r+0x72>
 800d118:	6863      	ldr	r3, [r4, #4]
 800d11a:	42a2      	cmp	r2, r4
 800d11c:	bf0c      	ite	eq
 800d11e:	600b      	streq	r3, [r1, #0]
 800d120:	6053      	strne	r3, [r2, #4]
 800d122:	4630      	mov	r0, r6
 800d124:	f000 f924 	bl	800d370 <__malloc_unlock>
 800d128:	f104 000b 	add.w	r0, r4, #11
 800d12c:	1d23      	adds	r3, r4, #4
 800d12e:	f020 0007 	bic.w	r0, r0, #7
 800d132:	1ac2      	subs	r2, r0, r3
 800d134:	d0cc      	beq.n	800d0d0 <_malloc_r+0x20>
 800d136:	1a1b      	subs	r3, r3, r0
 800d138:	50a3      	str	r3, [r4, r2]
 800d13a:	e7c9      	b.n	800d0d0 <_malloc_r+0x20>
 800d13c:	4622      	mov	r2, r4
 800d13e:	6864      	ldr	r4, [r4, #4]
 800d140:	e7cc      	b.n	800d0dc <_malloc_r+0x2c>
 800d142:	1cc4      	adds	r4, r0, #3
 800d144:	f024 0403 	bic.w	r4, r4, #3
 800d148:	42a0      	cmp	r0, r4
 800d14a:	d0e3      	beq.n	800d114 <_malloc_r+0x64>
 800d14c:	1a21      	subs	r1, r4, r0
 800d14e:	4630      	mov	r0, r6
 800d150:	f000 f808 	bl	800d164 <_sbrk_r>
 800d154:	3001      	adds	r0, #1
 800d156:	d1dd      	bne.n	800d114 <_malloc_r+0x64>
 800d158:	e7cf      	b.n	800d0fa <_malloc_r+0x4a>
 800d15a:	bf00      	nop
 800d15c:	20002b38 	.word	0x20002b38
 800d160:	20002b3c 	.word	0x20002b3c

0800d164 <_sbrk_r>:
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	2300      	movs	r3, #0
 800d168:	4d05      	ldr	r5, [pc, #20]	; (800d180 <_sbrk_r+0x1c>)
 800d16a:	4604      	mov	r4, r0
 800d16c:	4608      	mov	r0, r1
 800d16e:	602b      	str	r3, [r5, #0]
 800d170:	f7f5 fd94 	bl	8002c9c <_sbrk>
 800d174:	1c43      	adds	r3, r0, #1
 800d176:	d102      	bne.n	800d17e <_sbrk_r+0x1a>
 800d178:	682b      	ldr	r3, [r5, #0]
 800d17a:	b103      	cbz	r3, 800d17e <_sbrk_r+0x1a>
 800d17c:	6023      	str	r3, [r4, #0]
 800d17e:	bd38      	pop	{r3, r4, r5, pc}
 800d180:	20002de8 	.word	0x20002de8

0800d184 <_raise_r>:
 800d184:	291f      	cmp	r1, #31
 800d186:	b538      	push	{r3, r4, r5, lr}
 800d188:	4604      	mov	r4, r0
 800d18a:	460d      	mov	r5, r1
 800d18c:	d904      	bls.n	800d198 <_raise_r+0x14>
 800d18e:	2316      	movs	r3, #22
 800d190:	6003      	str	r3, [r0, #0]
 800d192:	f04f 30ff 	mov.w	r0, #4294967295
 800d196:	bd38      	pop	{r3, r4, r5, pc}
 800d198:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d19a:	b112      	cbz	r2, 800d1a2 <_raise_r+0x1e>
 800d19c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1a0:	b94b      	cbnz	r3, 800d1b6 <_raise_r+0x32>
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f000 f830 	bl	800d208 <_getpid_r>
 800d1a8:	462a      	mov	r2, r5
 800d1aa:	4601      	mov	r1, r0
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1b2:	f000 b817 	b.w	800d1e4 <_kill_r>
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d00a      	beq.n	800d1d0 <_raise_r+0x4c>
 800d1ba:	1c59      	adds	r1, r3, #1
 800d1bc:	d103      	bne.n	800d1c6 <_raise_r+0x42>
 800d1be:	2316      	movs	r3, #22
 800d1c0:	6003      	str	r3, [r0, #0]
 800d1c2:	2001      	movs	r0, #1
 800d1c4:	e7e7      	b.n	800d196 <_raise_r+0x12>
 800d1c6:	2400      	movs	r4, #0
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1ce:	4798      	blx	r3
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	e7e0      	b.n	800d196 <_raise_r+0x12>

0800d1d4 <raise>:
 800d1d4:	4b02      	ldr	r3, [pc, #8]	; (800d1e0 <raise+0xc>)
 800d1d6:	4601      	mov	r1, r0
 800d1d8:	6818      	ldr	r0, [r3, #0]
 800d1da:	f7ff bfd3 	b.w	800d184 <_raise_r>
 800d1de:	bf00      	nop
 800d1e0:	20000014 	.word	0x20000014

0800d1e4 <_kill_r>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	4d06      	ldr	r5, [pc, #24]	; (800d204 <_kill_r+0x20>)
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	4608      	mov	r0, r1
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	602b      	str	r3, [r5, #0]
 800d1f2:	f7f5 fcd0 	bl	8002b96 <_kill>
 800d1f6:	1c43      	adds	r3, r0, #1
 800d1f8:	d102      	bne.n	800d200 <_kill_r+0x1c>
 800d1fa:	682b      	ldr	r3, [r5, #0]
 800d1fc:	b103      	cbz	r3, 800d200 <_kill_r+0x1c>
 800d1fe:	6023      	str	r3, [r4, #0]
 800d200:	bd38      	pop	{r3, r4, r5, pc}
 800d202:	bf00      	nop
 800d204:	20002de8 	.word	0x20002de8

0800d208 <_getpid_r>:
 800d208:	f7f5 bcbe 	b.w	8002b88 <_getpid>

0800d20c <__sread>:
 800d20c:	b510      	push	{r4, lr}
 800d20e:	460c      	mov	r4, r1
 800d210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d214:	f000 f8b2 	bl	800d37c <_read_r>
 800d218:	2800      	cmp	r0, #0
 800d21a:	bfab      	itete	ge
 800d21c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d21e:	89a3      	ldrhlt	r3, [r4, #12]
 800d220:	181b      	addge	r3, r3, r0
 800d222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d226:	bfac      	ite	ge
 800d228:	6563      	strge	r3, [r4, #84]	; 0x54
 800d22a:	81a3      	strhlt	r3, [r4, #12]
 800d22c:	bd10      	pop	{r4, pc}

0800d22e <__swrite>:
 800d22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d232:	461f      	mov	r7, r3
 800d234:	898b      	ldrh	r3, [r1, #12]
 800d236:	4605      	mov	r5, r0
 800d238:	05db      	lsls	r3, r3, #23
 800d23a:	460c      	mov	r4, r1
 800d23c:	4616      	mov	r6, r2
 800d23e:	d505      	bpl.n	800d24c <__swrite+0x1e>
 800d240:	2302      	movs	r3, #2
 800d242:	2200      	movs	r2, #0
 800d244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d248:	f000 f868 	bl	800d31c <_lseek_r>
 800d24c:	89a3      	ldrh	r3, [r4, #12]
 800d24e:	4632      	mov	r2, r6
 800d250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d254:	81a3      	strh	r3, [r4, #12]
 800d256:	4628      	mov	r0, r5
 800d258:	463b      	mov	r3, r7
 800d25a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d25e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d262:	f000 b817 	b.w	800d294 <_write_r>

0800d266 <__sseek>:
 800d266:	b510      	push	{r4, lr}
 800d268:	460c      	mov	r4, r1
 800d26a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d26e:	f000 f855 	bl	800d31c <_lseek_r>
 800d272:	1c43      	adds	r3, r0, #1
 800d274:	89a3      	ldrh	r3, [r4, #12]
 800d276:	bf15      	itete	ne
 800d278:	6560      	strne	r0, [r4, #84]	; 0x54
 800d27a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d27e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d282:	81a3      	strheq	r3, [r4, #12]
 800d284:	bf18      	it	ne
 800d286:	81a3      	strhne	r3, [r4, #12]
 800d288:	bd10      	pop	{r4, pc}

0800d28a <__sclose>:
 800d28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d28e:	f000 b813 	b.w	800d2b8 <_close_r>
	...

0800d294 <_write_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4604      	mov	r4, r0
 800d298:	4608      	mov	r0, r1
 800d29a:	4611      	mov	r1, r2
 800d29c:	2200      	movs	r2, #0
 800d29e:	4d05      	ldr	r5, [pc, #20]	; (800d2b4 <_write_r+0x20>)
 800d2a0:	602a      	str	r2, [r5, #0]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	f7f5 fcae 	bl	8002c04 <_write>
 800d2a8:	1c43      	adds	r3, r0, #1
 800d2aa:	d102      	bne.n	800d2b2 <_write_r+0x1e>
 800d2ac:	682b      	ldr	r3, [r5, #0]
 800d2ae:	b103      	cbz	r3, 800d2b2 <_write_r+0x1e>
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	bd38      	pop	{r3, r4, r5, pc}
 800d2b4:	20002de8 	.word	0x20002de8

0800d2b8 <_close_r>:
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	4d05      	ldr	r5, [pc, #20]	; (800d2d4 <_close_r+0x1c>)
 800d2be:	4604      	mov	r4, r0
 800d2c0:	4608      	mov	r0, r1
 800d2c2:	602b      	str	r3, [r5, #0]
 800d2c4:	f7f5 fcba 	bl	8002c3c <_close>
 800d2c8:	1c43      	adds	r3, r0, #1
 800d2ca:	d102      	bne.n	800d2d2 <_close_r+0x1a>
 800d2cc:	682b      	ldr	r3, [r5, #0]
 800d2ce:	b103      	cbz	r3, 800d2d2 <_close_r+0x1a>
 800d2d0:	6023      	str	r3, [r4, #0]
 800d2d2:	bd38      	pop	{r3, r4, r5, pc}
 800d2d4:	20002de8 	.word	0x20002de8

0800d2d8 <_fstat_r>:
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	2300      	movs	r3, #0
 800d2dc:	4d06      	ldr	r5, [pc, #24]	; (800d2f8 <_fstat_r+0x20>)
 800d2de:	4604      	mov	r4, r0
 800d2e0:	4608      	mov	r0, r1
 800d2e2:	4611      	mov	r1, r2
 800d2e4:	602b      	str	r3, [r5, #0]
 800d2e6:	f7f5 fcb4 	bl	8002c52 <_fstat>
 800d2ea:	1c43      	adds	r3, r0, #1
 800d2ec:	d102      	bne.n	800d2f4 <_fstat_r+0x1c>
 800d2ee:	682b      	ldr	r3, [r5, #0]
 800d2f0:	b103      	cbz	r3, 800d2f4 <_fstat_r+0x1c>
 800d2f2:	6023      	str	r3, [r4, #0]
 800d2f4:	bd38      	pop	{r3, r4, r5, pc}
 800d2f6:	bf00      	nop
 800d2f8:	20002de8 	.word	0x20002de8

0800d2fc <_isatty_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	2300      	movs	r3, #0
 800d300:	4d05      	ldr	r5, [pc, #20]	; (800d318 <_isatty_r+0x1c>)
 800d302:	4604      	mov	r4, r0
 800d304:	4608      	mov	r0, r1
 800d306:	602b      	str	r3, [r5, #0]
 800d308:	f7f5 fcb2 	bl	8002c70 <_isatty>
 800d30c:	1c43      	adds	r3, r0, #1
 800d30e:	d102      	bne.n	800d316 <_isatty_r+0x1a>
 800d310:	682b      	ldr	r3, [r5, #0]
 800d312:	b103      	cbz	r3, 800d316 <_isatty_r+0x1a>
 800d314:	6023      	str	r3, [r4, #0]
 800d316:	bd38      	pop	{r3, r4, r5, pc}
 800d318:	20002de8 	.word	0x20002de8

0800d31c <_lseek_r>:
 800d31c:	b538      	push	{r3, r4, r5, lr}
 800d31e:	4604      	mov	r4, r0
 800d320:	4608      	mov	r0, r1
 800d322:	4611      	mov	r1, r2
 800d324:	2200      	movs	r2, #0
 800d326:	4d05      	ldr	r5, [pc, #20]	; (800d33c <_lseek_r+0x20>)
 800d328:	602a      	str	r2, [r5, #0]
 800d32a:	461a      	mov	r2, r3
 800d32c:	f7f5 fcaa 	bl	8002c84 <_lseek>
 800d330:	1c43      	adds	r3, r0, #1
 800d332:	d102      	bne.n	800d33a <_lseek_r+0x1e>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	b103      	cbz	r3, 800d33a <_lseek_r+0x1e>
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	bd38      	pop	{r3, r4, r5, pc}
 800d33c:	20002de8 	.word	0x20002de8

0800d340 <__ascii_mbtowc>:
 800d340:	b082      	sub	sp, #8
 800d342:	b901      	cbnz	r1, 800d346 <__ascii_mbtowc+0x6>
 800d344:	a901      	add	r1, sp, #4
 800d346:	b142      	cbz	r2, 800d35a <__ascii_mbtowc+0x1a>
 800d348:	b14b      	cbz	r3, 800d35e <__ascii_mbtowc+0x1e>
 800d34a:	7813      	ldrb	r3, [r2, #0]
 800d34c:	600b      	str	r3, [r1, #0]
 800d34e:	7812      	ldrb	r2, [r2, #0]
 800d350:	1e10      	subs	r0, r2, #0
 800d352:	bf18      	it	ne
 800d354:	2001      	movne	r0, #1
 800d356:	b002      	add	sp, #8
 800d358:	4770      	bx	lr
 800d35a:	4610      	mov	r0, r2
 800d35c:	e7fb      	b.n	800d356 <__ascii_mbtowc+0x16>
 800d35e:	f06f 0001 	mvn.w	r0, #1
 800d362:	e7f8      	b.n	800d356 <__ascii_mbtowc+0x16>

0800d364 <__malloc_lock>:
 800d364:	4801      	ldr	r0, [pc, #4]	; (800d36c <__malloc_lock+0x8>)
 800d366:	f7ff ba4a 	b.w	800c7fe <__retarget_lock_acquire_recursive>
 800d36a:	bf00      	nop
 800d36c:	20002de0 	.word	0x20002de0

0800d370 <__malloc_unlock>:
 800d370:	4801      	ldr	r0, [pc, #4]	; (800d378 <__malloc_unlock+0x8>)
 800d372:	f7ff ba45 	b.w	800c800 <__retarget_lock_release_recursive>
 800d376:	bf00      	nop
 800d378:	20002de0 	.word	0x20002de0

0800d37c <_read_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	4604      	mov	r4, r0
 800d380:	4608      	mov	r0, r1
 800d382:	4611      	mov	r1, r2
 800d384:	2200      	movs	r2, #0
 800d386:	4d05      	ldr	r5, [pc, #20]	; (800d39c <_read_r+0x20>)
 800d388:	602a      	str	r2, [r5, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	f7f5 fc1d 	bl	8002bca <_read>
 800d390:	1c43      	adds	r3, r0, #1
 800d392:	d102      	bne.n	800d39a <_read_r+0x1e>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	b103      	cbz	r3, 800d39a <_read_r+0x1e>
 800d398:	6023      	str	r3, [r4, #0]
 800d39a:	bd38      	pop	{r3, r4, r5, pc}
 800d39c:	20002de8 	.word	0x20002de8

0800d3a0 <__ascii_wctomb>:
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	4608      	mov	r0, r1
 800d3a4:	b141      	cbz	r1, 800d3b8 <__ascii_wctomb+0x18>
 800d3a6:	2aff      	cmp	r2, #255	; 0xff
 800d3a8:	d904      	bls.n	800d3b4 <__ascii_wctomb+0x14>
 800d3aa:	228a      	movs	r2, #138	; 0x8a
 800d3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b0:	601a      	str	r2, [r3, #0]
 800d3b2:	4770      	bx	lr
 800d3b4:	2001      	movs	r0, #1
 800d3b6:	700a      	strb	r2, [r1, #0]
 800d3b8:	4770      	bx	lr
	...

0800d3bc <pow>:
 800d3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3c0:	461f      	mov	r7, r3
 800d3c2:	4680      	mov	r8, r0
 800d3c4:	4689      	mov	r9, r1
 800d3c6:	4616      	mov	r6, r2
 800d3c8:	f000 f8a6 	bl	800d518 <__ieee754_pow>
 800d3cc:	4b4d      	ldr	r3, [pc, #308]	; (800d504 <pow+0x148>)
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	f993 3000 	ldrsb.w	r3, [r3]
 800d3d4:	460d      	mov	r5, r1
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	d015      	beq.n	800d406 <pow+0x4a>
 800d3da:	4632      	mov	r2, r6
 800d3dc:	463b      	mov	r3, r7
 800d3de:	4630      	mov	r0, r6
 800d3e0:	4639      	mov	r1, r7
 800d3e2:	f7f3 fb83 	bl	8000aec <__aeabi_dcmpun>
 800d3e6:	b970      	cbnz	r0, 800d406 <pow+0x4a>
 800d3e8:	4642      	mov	r2, r8
 800d3ea:	464b      	mov	r3, r9
 800d3ec:	4640      	mov	r0, r8
 800d3ee:	4649      	mov	r1, r9
 800d3f0:	f7f3 fb7c 	bl	8000aec <__aeabi_dcmpun>
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	b148      	cbz	r0, 800d40e <pow+0x52>
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	4639      	mov	r1, r7
 800d3fe:	f7f3 fb43 	bl	8000a88 <__aeabi_dcmpeq>
 800d402:	2800      	cmp	r0, #0
 800d404:	d17b      	bne.n	800d4fe <pow+0x142>
 800d406:	4620      	mov	r0, r4
 800d408:	4629      	mov	r1, r5
 800d40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d40e:	4640      	mov	r0, r8
 800d410:	4649      	mov	r1, r9
 800d412:	f7f3 fb39 	bl	8000a88 <__aeabi_dcmpeq>
 800d416:	b1e0      	cbz	r0, 800d452 <pow+0x96>
 800d418:	2200      	movs	r2, #0
 800d41a:	2300      	movs	r3, #0
 800d41c:	4630      	mov	r0, r6
 800d41e:	4639      	mov	r1, r7
 800d420:	f7f3 fb32 	bl	8000a88 <__aeabi_dcmpeq>
 800d424:	2800      	cmp	r0, #0
 800d426:	d16a      	bne.n	800d4fe <pow+0x142>
 800d428:	4630      	mov	r0, r6
 800d42a:	4639      	mov	r1, r7
 800d42c:	f000 fe39 	bl	800e0a2 <finite>
 800d430:	2800      	cmp	r0, #0
 800d432:	d0e8      	beq.n	800d406 <pow+0x4a>
 800d434:	2200      	movs	r2, #0
 800d436:	2300      	movs	r3, #0
 800d438:	4630      	mov	r0, r6
 800d43a:	4639      	mov	r1, r7
 800d43c:	f7f3 fb2e 	bl	8000a9c <__aeabi_dcmplt>
 800d440:	2800      	cmp	r0, #0
 800d442:	d0e0      	beq.n	800d406 <pow+0x4a>
 800d444:	f7fd fab8 	bl	800a9b8 <__errno>
 800d448:	2321      	movs	r3, #33	; 0x21
 800d44a:	2400      	movs	r4, #0
 800d44c:	6003      	str	r3, [r0, #0]
 800d44e:	4d2e      	ldr	r5, [pc, #184]	; (800d508 <pow+0x14c>)
 800d450:	e7d9      	b.n	800d406 <pow+0x4a>
 800d452:	4620      	mov	r0, r4
 800d454:	4629      	mov	r1, r5
 800d456:	f000 fe24 	bl	800e0a2 <finite>
 800d45a:	bba8      	cbnz	r0, 800d4c8 <pow+0x10c>
 800d45c:	4640      	mov	r0, r8
 800d45e:	4649      	mov	r1, r9
 800d460:	f000 fe1f 	bl	800e0a2 <finite>
 800d464:	b380      	cbz	r0, 800d4c8 <pow+0x10c>
 800d466:	4630      	mov	r0, r6
 800d468:	4639      	mov	r1, r7
 800d46a:	f000 fe1a 	bl	800e0a2 <finite>
 800d46e:	b358      	cbz	r0, 800d4c8 <pow+0x10c>
 800d470:	4622      	mov	r2, r4
 800d472:	462b      	mov	r3, r5
 800d474:	4620      	mov	r0, r4
 800d476:	4629      	mov	r1, r5
 800d478:	f7f3 fb38 	bl	8000aec <__aeabi_dcmpun>
 800d47c:	b160      	cbz	r0, 800d498 <pow+0xdc>
 800d47e:	f7fd fa9b 	bl	800a9b8 <__errno>
 800d482:	2321      	movs	r3, #33	; 0x21
 800d484:	2200      	movs	r2, #0
 800d486:	6003      	str	r3, [r0, #0]
 800d488:	2300      	movs	r3, #0
 800d48a:	4610      	mov	r0, r2
 800d48c:	4619      	mov	r1, r3
 800d48e:	f7f3 f9bd 	bl	800080c <__aeabi_ddiv>
 800d492:	4604      	mov	r4, r0
 800d494:	460d      	mov	r5, r1
 800d496:	e7b6      	b.n	800d406 <pow+0x4a>
 800d498:	f7fd fa8e 	bl	800a9b8 <__errno>
 800d49c:	2322      	movs	r3, #34	; 0x22
 800d49e:	2200      	movs	r2, #0
 800d4a0:	6003      	str	r3, [r0, #0]
 800d4a2:	4649      	mov	r1, r9
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	4640      	mov	r0, r8
 800d4a8:	f7f3 faf8 	bl	8000a9c <__aeabi_dcmplt>
 800d4ac:	2400      	movs	r4, #0
 800d4ae:	b148      	cbz	r0, 800d4c4 <pow+0x108>
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	4639      	mov	r1, r7
 800d4b4:	f000 fe02 	bl	800e0bc <rint>
 800d4b8:	4632      	mov	r2, r6
 800d4ba:	463b      	mov	r3, r7
 800d4bc:	f7f3 fae4 	bl	8000a88 <__aeabi_dcmpeq>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d0c4      	beq.n	800d44e <pow+0x92>
 800d4c4:	4d11      	ldr	r5, [pc, #68]	; (800d50c <pow+0x150>)
 800d4c6:	e79e      	b.n	800d406 <pow+0x4a>
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	f7f3 fada 	bl	8000a88 <__aeabi_dcmpeq>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	d096      	beq.n	800d406 <pow+0x4a>
 800d4d8:	4640      	mov	r0, r8
 800d4da:	4649      	mov	r1, r9
 800d4dc:	f000 fde1 	bl	800e0a2 <finite>
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	d090      	beq.n	800d406 <pow+0x4a>
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	4639      	mov	r1, r7
 800d4e8:	f000 fddb 	bl	800e0a2 <finite>
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	d08a      	beq.n	800d406 <pow+0x4a>
 800d4f0:	f7fd fa62 	bl	800a9b8 <__errno>
 800d4f4:	2322      	movs	r3, #34	; 0x22
 800d4f6:	2400      	movs	r4, #0
 800d4f8:	2500      	movs	r5, #0
 800d4fa:	6003      	str	r3, [r0, #0]
 800d4fc:	e783      	b.n	800d406 <pow+0x4a>
 800d4fe:	2400      	movs	r4, #0
 800d500:	4d03      	ldr	r5, [pc, #12]	; (800d510 <pow+0x154>)
 800d502:	e780      	b.n	800d406 <pow+0x4a>
 800d504:	200001e4 	.word	0x200001e4
 800d508:	fff00000 	.word	0xfff00000
 800d50c:	7ff00000 	.word	0x7ff00000
 800d510:	3ff00000 	.word	0x3ff00000
 800d514:	00000000 	.word	0x00000000

0800d518 <__ieee754_pow>:
 800d518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51c:	b093      	sub	sp, #76	; 0x4c
 800d51e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d522:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800d526:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d52a:	ea55 0302 	orrs.w	r3, r5, r2
 800d52e:	4607      	mov	r7, r0
 800d530:	4688      	mov	r8, r1
 800d532:	f000 84bf 	beq.w	800deb4 <__ieee754_pow+0x99c>
 800d536:	4b7e      	ldr	r3, [pc, #504]	; (800d730 <__ieee754_pow+0x218>)
 800d538:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800d53c:	429c      	cmp	r4, r3
 800d53e:	4689      	mov	r9, r1
 800d540:	4682      	mov	sl, r0
 800d542:	dc09      	bgt.n	800d558 <__ieee754_pow+0x40>
 800d544:	d103      	bne.n	800d54e <__ieee754_pow+0x36>
 800d546:	b978      	cbnz	r0, 800d568 <__ieee754_pow+0x50>
 800d548:	42a5      	cmp	r5, r4
 800d54a:	dd02      	ble.n	800d552 <__ieee754_pow+0x3a>
 800d54c:	e00c      	b.n	800d568 <__ieee754_pow+0x50>
 800d54e:	429d      	cmp	r5, r3
 800d550:	dc02      	bgt.n	800d558 <__ieee754_pow+0x40>
 800d552:	429d      	cmp	r5, r3
 800d554:	d10e      	bne.n	800d574 <__ieee754_pow+0x5c>
 800d556:	b16a      	cbz	r2, 800d574 <__ieee754_pow+0x5c>
 800d558:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d55c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d560:	ea54 030a 	orrs.w	r3, r4, sl
 800d564:	f000 84a6 	beq.w	800deb4 <__ieee754_pow+0x99c>
 800d568:	4872      	ldr	r0, [pc, #456]	; (800d734 <__ieee754_pow+0x21c>)
 800d56a:	b013      	add	sp, #76	; 0x4c
 800d56c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d570:	f000 bd9e 	b.w	800e0b0 <nan>
 800d574:	f1b9 0f00 	cmp.w	r9, #0
 800d578:	da39      	bge.n	800d5ee <__ieee754_pow+0xd6>
 800d57a:	4b6f      	ldr	r3, [pc, #444]	; (800d738 <__ieee754_pow+0x220>)
 800d57c:	429d      	cmp	r5, r3
 800d57e:	dc54      	bgt.n	800d62a <__ieee754_pow+0x112>
 800d580:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d584:	429d      	cmp	r5, r3
 800d586:	f340 84a6 	ble.w	800ded6 <__ieee754_pow+0x9be>
 800d58a:	152b      	asrs	r3, r5, #20
 800d58c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d590:	2b14      	cmp	r3, #20
 800d592:	dd0f      	ble.n	800d5b4 <__ieee754_pow+0x9c>
 800d594:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d598:	fa22 f103 	lsr.w	r1, r2, r3
 800d59c:	fa01 f303 	lsl.w	r3, r1, r3
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	f040 8498 	bne.w	800ded6 <__ieee754_pow+0x9be>
 800d5a6:	f001 0101 	and.w	r1, r1, #1
 800d5aa:	f1c1 0302 	rsb	r3, r1, #2
 800d5ae:	9300      	str	r3, [sp, #0]
 800d5b0:	b182      	cbz	r2, 800d5d4 <__ieee754_pow+0xbc>
 800d5b2:	e05e      	b.n	800d672 <__ieee754_pow+0x15a>
 800d5b4:	2a00      	cmp	r2, #0
 800d5b6:	d15a      	bne.n	800d66e <__ieee754_pow+0x156>
 800d5b8:	f1c3 0314 	rsb	r3, r3, #20
 800d5bc:	fa45 f103 	asr.w	r1, r5, r3
 800d5c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d5c4:	42ab      	cmp	r3, r5
 800d5c6:	f040 8483 	bne.w	800ded0 <__ieee754_pow+0x9b8>
 800d5ca:	f001 0101 	and.w	r1, r1, #1
 800d5ce:	f1c1 0302 	rsb	r3, r1, #2
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	4b59      	ldr	r3, [pc, #356]	; (800d73c <__ieee754_pow+0x224>)
 800d5d6:	429d      	cmp	r5, r3
 800d5d8:	d130      	bne.n	800d63c <__ieee754_pow+0x124>
 800d5da:	2e00      	cmp	r6, #0
 800d5dc:	f280 8474 	bge.w	800dec8 <__ieee754_pow+0x9b0>
 800d5e0:	463a      	mov	r2, r7
 800d5e2:	4643      	mov	r3, r8
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	4955      	ldr	r1, [pc, #340]	; (800d73c <__ieee754_pow+0x224>)
 800d5e8:	f7f3 f910 	bl	800080c <__aeabi_ddiv>
 800d5ec:	e02f      	b.n	800d64e <__ieee754_pow+0x136>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	9300      	str	r3, [sp, #0]
 800d5f2:	2a00      	cmp	r2, #0
 800d5f4:	d13d      	bne.n	800d672 <__ieee754_pow+0x15a>
 800d5f6:	4b4e      	ldr	r3, [pc, #312]	; (800d730 <__ieee754_pow+0x218>)
 800d5f8:	429d      	cmp	r5, r3
 800d5fa:	d1eb      	bne.n	800d5d4 <__ieee754_pow+0xbc>
 800d5fc:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d600:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d604:	ea53 030a 	orrs.w	r3, r3, sl
 800d608:	f000 8454 	beq.w	800deb4 <__ieee754_pow+0x99c>
 800d60c:	4b4c      	ldr	r3, [pc, #304]	; (800d740 <__ieee754_pow+0x228>)
 800d60e:	429c      	cmp	r4, r3
 800d610:	dd0d      	ble.n	800d62e <__ieee754_pow+0x116>
 800d612:	2e00      	cmp	r6, #0
 800d614:	f280 8454 	bge.w	800dec0 <__ieee754_pow+0x9a8>
 800d618:	f04f 0b00 	mov.w	fp, #0
 800d61c:	f04f 0c00 	mov.w	ip, #0
 800d620:	4658      	mov	r0, fp
 800d622:	4661      	mov	r1, ip
 800d624:	b013      	add	sp, #76	; 0x4c
 800d626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d62a:	2302      	movs	r3, #2
 800d62c:	e7e0      	b.n	800d5f0 <__ieee754_pow+0xd8>
 800d62e:	2e00      	cmp	r6, #0
 800d630:	daf2      	bge.n	800d618 <__ieee754_pow+0x100>
 800d632:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800d636:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800d63a:	e7f1      	b.n	800d620 <__ieee754_pow+0x108>
 800d63c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800d640:	d108      	bne.n	800d654 <__ieee754_pow+0x13c>
 800d642:	463a      	mov	r2, r7
 800d644:	4643      	mov	r3, r8
 800d646:	4638      	mov	r0, r7
 800d648:	4641      	mov	r1, r8
 800d64a:	f7f2 ffb5 	bl	80005b8 <__aeabi_dmul>
 800d64e:	4683      	mov	fp, r0
 800d650:	468c      	mov	ip, r1
 800d652:	e7e5      	b.n	800d620 <__ieee754_pow+0x108>
 800d654:	4b3b      	ldr	r3, [pc, #236]	; (800d744 <__ieee754_pow+0x22c>)
 800d656:	429e      	cmp	r6, r3
 800d658:	d10b      	bne.n	800d672 <__ieee754_pow+0x15a>
 800d65a:	f1b9 0f00 	cmp.w	r9, #0
 800d65e:	db08      	blt.n	800d672 <__ieee754_pow+0x15a>
 800d660:	4638      	mov	r0, r7
 800d662:	4641      	mov	r1, r8
 800d664:	b013      	add	sp, #76	; 0x4c
 800d666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66a:	f000 bc6b 	b.w	800df44 <__ieee754_sqrt>
 800d66e:	2300      	movs	r3, #0
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	4638      	mov	r0, r7
 800d674:	4641      	mov	r1, r8
 800d676:	f000 fd11 	bl	800e09c <fabs>
 800d67a:	4683      	mov	fp, r0
 800d67c:	468c      	mov	ip, r1
 800d67e:	f1ba 0f00 	cmp.w	sl, #0
 800d682:	d129      	bne.n	800d6d8 <__ieee754_pow+0x1c0>
 800d684:	b124      	cbz	r4, 800d690 <__ieee754_pow+0x178>
 800d686:	4b2d      	ldr	r3, [pc, #180]	; (800d73c <__ieee754_pow+0x224>)
 800d688:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d123      	bne.n	800d6d8 <__ieee754_pow+0x1c0>
 800d690:	2e00      	cmp	r6, #0
 800d692:	da07      	bge.n	800d6a4 <__ieee754_pow+0x18c>
 800d694:	465a      	mov	r2, fp
 800d696:	4663      	mov	r3, ip
 800d698:	2000      	movs	r0, #0
 800d69a:	4928      	ldr	r1, [pc, #160]	; (800d73c <__ieee754_pow+0x224>)
 800d69c:	f7f3 f8b6 	bl	800080c <__aeabi_ddiv>
 800d6a0:	4683      	mov	fp, r0
 800d6a2:	468c      	mov	ip, r1
 800d6a4:	f1b9 0f00 	cmp.w	r9, #0
 800d6a8:	daba      	bge.n	800d620 <__ieee754_pow+0x108>
 800d6aa:	9b00      	ldr	r3, [sp, #0]
 800d6ac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d6b0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d6b4:	4323      	orrs	r3, r4
 800d6b6:	d108      	bne.n	800d6ca <__ieee754_pow+0x1b2>
 800d6b8:	465a      	mov	r2, fp
 800d6ba:	4663      	mov	r3, ip
 800d6bc:	4658      	mov	r0, fp
 800d6be:	4661      	mov	r1, ip
 800d6c0:	f7f2 fdc2 	bl	8000248 <__aeabi_dsub>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	e78e      	b.n	800d5e8 <__ieee754_pow+0xd0>
 800d6ca:	9b00      	ldr	r3, [sp, #0]
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d1a7      	bne.n	800d620 <__ieee754_pow+0x108>
 800d6d0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800d6d4:	469c      	mov	ip, r3
 800d6d6:	e7a3      	b.n	800d620 <__ieee754_pow+0x108>
 800d6d8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	930c      	str	r3, [sp, #48]	; 0x30
 800d6e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6e2:	9b00      	ldr	r3, [sp, #0]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	d104      	bne.n	800d6f2 <__ieee754_pow+0x1da>
 800d6e8:	463a      	mov	r2, r7
 800d6ea:	4643      	mov	r3, r8
 800d6ec:	4638      	mov	r0, r7
 800d6ee:	4641      	mov	r1, r8
 800d6f0:	e7e6      	b.n	800d6c0 <__ieee754_pow+0x1a8>
 800d6f2:	4b15      	ldr	r3, [pc, #84]	; (800d748 <__ieee754_pow+0x230>)
 800d6f4:	429d      	cmp	r5, r3
 800d6f6:	f340 80f9 	ble.w	800d8ec <__ieee754_pow+0x3d4>
 800d6fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d6fe:	429d      	cmp	r5, r3
 800d700:	4b0f      	ldr	r3, [pc, #60]	; (800d740 <__ieee754_pow+0x228>)
 800d702:	dd09      	ble.n	800d718 <__ieee754_pow+0x200>
 800d704:	429c      	cmp	r4, r3
 800d706:	dc0c      	bgt.n	800d722 <__ieee754_pow+0x20a>
 800d708:	2e00      	cmp	r6, #0
 800d70a:	da85      	bge.n	800d618 <__ieee754_pow+0x100>
 800d70c:	a306      	add	r3, pc, #24	; (adr r3, 800d728 <__ieee754_pow+0x210>)
 800d70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d712:	4610      	mov	r0, r2
 800d714:	4619      	mov	r1, r3
 800d716:	e798      	b.n	800d64a <__ieee754_pow+0x132>
 800d718:	429c      	cmp	r4, r3
 800d71a:	dbf5      	blt.n	800d708 <__ieee754_pow+0x1f0>
 800d71c:	4b07      	ldr	r3, [pc, #28]	; (800d73c <__ieee754_pow+0x224>)
 800d71e:	429c      	cmp	r4, r3
 800d720:	dd14      	ble.n	800d74c <__ieee754_pow+0x234>
 800d722:	2e00      	cmp	r6, #0
 800d724:	dcf2      	bgt.n	800d70c <__ieee754_pow+0x1f4>
 800d726:	e777      	b.n	800d618 <__ieee754_pow+0x100>
 800d728:	8800759c 	.word	0x8800759c
 800d72c:	7e37e43c 	.word	0x7e37e43c
 800d730:	7ff00000 	.word	0x7ff00000
 800d734:	0800e3d7 	.word	0x0800e3d7
 800d738:	433fffff 	.word	0x433fffff
 800d73c:	3ff00000 	.word	0x3ff00000
 800d740:	3fefffff 	.word	0x3fefffff
 800d744:	3fe00000 	.word	0x3fe00000
 800d748:	41e00000 	.word	0x41e00000
 800d74c:	4661      	mov	r1, ip
 800d74e:	2200      	movs	r2, #0
 800d750:	4658      	mov	r0, fp
 800d752:	4b61      	ldr	r3, [pc, #388]	; (800d8d8 <__ieee754_pow+0x3c0>)
 800d754:	f7f2 fd78 	bl	8000248 <__aeabi_dsub>
 800d758:	a355      	add	r3, pc, #340	; (adr r3, 800d8b0 <__ieee754_pow+0x398>)
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	4604      	mov	r4, r0
 800d760:	460d      	mov	r5, r1
 800d762:	f7f2 ff29 	bl	80005b8 <__aeabi_dmul>
 800d766:	a354      	add	r3, pc, #336	; (adr r3, 800d8b8 <__ieee754_pow+0x3a0>)
 800d768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76c:	4606      	mov	r6, r0
 800d76e:	460f      	mov	r7, r1
 800d770:	4620      	mov	r0, r4
 800d772:	4629      	mov	r1, r5
 800d774:	f7f2 ff20 	bl	80005b8 <__aeabi_dmul>
 800d778:	2200      	movs	r2, #0
 800d77a:	4682      	mov	sl, r0
 800d77c:	468b      	mov	fp, r1
 800d77e:	4620      	mov	r0, r4
 800d780:	4629      	mov	r1, r5
 800d782:	4b56      	ldr	r3, [pc, #344]	; (800d8dc <__ieee754_pow+0x3c4>)
 800d784:	f7f2 ff18 	bl	80005b8 <__aeabi_dmul>
 800d788:	4602      	mov	r2, r0
 800d78a:	460b      	mov	r3, r1
 800d78c:	a14c      	add	r1, pc, #304	; (adr r1, 800d8c0 <__ieee754_pow+0x3a8>)
 800d78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d792:	f7f2 fd59 	bl	8000248 <__aeabi_dsub>
 800d796:	4622      	mov	r2, r4
 800d798:	462b      	mov	r3, r5
 800d79a:	f7f2 ff0d 	bl	80005b8 <__aeabi_dmul>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	2000      	movs	r0, #0
 800d7a4:	494e      	ldr	r1, [pc, #312]	; (800d8e0 <__ieee754_pow+0x3c8>)
 800d7a6:	f7f2 fd4f 	bl	8000248 <__aeabi_dsub>
 800d7aa:	4622      	mov	r2, r4
 800d7ac:	462b      	mov	r3, r5
 800d7ae:	4680      	mov	r8, r0
 800d7b0:	4689      	mov	r9, r1
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	f7f2 feff 	bl	80005b8 <__aeabi_dmul>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	460b      	mov	r3, r1
 800d7be:	4640      	mov	r0, r8
 800d7c0:	4649      	mov	r1, r9
 800d7c2:	f7f2 fef9 	bl	80005b8 <__aeabi_dmul>
 800d7c6:	a340      	add	r3, pc, #256	; (adr r3, 800d8c8 <__ieee754_pow+0x3b0>)
 800d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7cc:	f7f2 fef4 	bl	80005b8 <__aeabi_dmul>
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	4650      	mov	r0, sl
 800d7d6:	4659      	mov	r1, fp
 800d7d8:	f7f2 fd36 	bl	8000248 <__aeabi_dsub>
 800d7dc:	f04f 0a00 	mov.w	sl, #0
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	460d      	mov	r5, r1
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	4639      	mov	r1, r7
 800d7ec:	f7f2 fd2e 	bl	800024c <__adddf3>
 800d7f0:	4632      	mov	r2, r6
 800d7f2:	463b      	mov	r3, r7
 800d7f4:	4650      	mov	r0, sl
 800d7f6:	468b      	mov	fp, r1
 800d7f8:	f7f2 fd26 	bl	8000248 <__aeabi_dsub>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	460b      	mov	r3, r1
 800d800:	4620      	mov	r0, r4
 800d802:	4629      	mov	r1, r5
 800d804:	f7f2 fd20 	bl	8000248 <__aeabi_dsub>
 800d808:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d80c:	9b00      	ldr	r3, [sp, #0]
 800d80e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d810:	3b01      	subs	r3, #1
 800d812:	4313      	orrs	r3, r2
 800d814:	f04f 0600 	mov.w	r6, #0
 800d818:	f04f 0200 	mov.w	r2, #0
 800d81c:	bf0c      	ite	eq
 800d81e:	4b31      	ldreq	r3, [pc, #196]	; (800d8e4 <__ieee754_pow+0x3cc>)
 800d820:	4b2d      	ldrne	r3, [pc, #180]	; (800d8d8 <__ieee754_pow+0x3c0>)
 800d822:	4604      	mov	r4, r0
 800d824:	460d      	mov	r5, r1
 800d826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d82a:	e9cd 2300 	strd	r2, r3, [sp]
 800d82e:	4632      	mov	r2, r6
 800d830:	463b      	mov	r3, r7
 800d832:	f7f2 fd09 	bl	8000248 <__aeabi_dsub>
 800d836:	4652      	mov	r2, sl
 800d838:	465b      	mov	r3, fp
 800d83a:	f7f2 febd 	bl	80005b8 <__aeabi_dmul>
 800d83e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d842:	4680      	mov	r8, r0
 800d844:	4689      	mov	r9, r1
 800d846:	4620      	mov	r0, r4
 800d848:	4629      	mov	r1, r5
 800d84a:	f7f2 feb5 	bl	80005b8 <__aeabi_dmul>
 800d84e:	4602      	mov	r2, r0
 800d850:	460b      	mov	r3, r1
 800d852:	4640      	mov	r0, r8
 800d854:	4649      	mov	r1, r9
 800d856:	f7f2 fcf9 	bl	800024c <__adddf3>
 800d85a:	4632      	mov	r2, r6
 800d85c:	463b      	mov	r3, r7
 800d85e:	4680      	mov	r8, r0
 800d860:	4689      	mov	r9, r1
 800d862:	4650      	mov	r0, sl
 800d864:	4659      	mov	r1, fp
 800d866:	f7f2 fea7 	bl	80005b8 <__aeabi_dmul>
 800d86a:	4604      	mov	r4, r0
 800d86c:	460d      	mov	r5, r1
 800d86e:	460b      	mov	r3, r1
 800d870:	4602      	mov	r2, r0
 800d872:	4649      	mov	r1, r9
 800d874:	4640      	mov	r0, r8
 800d876:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d87a:	f7f2 fce7 	bl	800024c <__adddf3>
 800d87e:	4b1a      	ldr	r3, [pc, #104]	; (800d8e8 <__ieee754_pow+0x3d0>)
 800d880:	4682      	mov	sl, r0
 800d882:	4299      	cmp	r1, r3
 800d884:	460f      	mov	r7, r1
 800d886:	460e      	mov	r6, r1
 800d888:	f340 82ed 	ble.w	800de66 <__ieee754_pow+0x94e>
 800d88c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d890:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d894:	4303      	orrs	r3, r0
 800d896:	f000 81e7 	beq.w	800dc68 <__ieee754_pow+0x750>
 800d89a:	a30d      	add	r3, pc, #52	; (adr r3, 800d8d0 <__ieee754_pow+0x3b8>)
 800d89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8a4:	f7f2 fe88 	bl	80005b8 <__aeabi_dmul>
 800d8a8:	a309      	add	r3, pc, #36	; (adr r3, 800d8d0 <__ieee754_pow+0x3b8>)
 800d8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ae:	e6cc      	b.n	800d64a <__ieee754_pow+0x132>
 800d8b0:	60000000 	.word	0x60000000
 800d8b4:	3ff71547 	.word	0x3ff71547
 800d8b8:	f85ddf44 	.word	0xf85ddf44
 800d8bc:	3e54ae0b 	.word	0x3e54ae0b
 800d8c0:	55555555 	.word	0x55555555
 800d8c4:	3fd55555 	.word	0x3fd55555
 800d8c8:	652b82fe 	.word	0x652b82fe
 800d8cc:	3ff71547 	.word	0x3ff71547
 800d8d0:	8800759c 	.word	0x8800759c
 800d8d4:	7e37e43c 	.word	0x7e37e43c
 800d8d8:	3ff00000 	.word	0x3ff00000
 800d8dc:	3fd00000 	.word	0x3fd00000
 800d8e0:	3fe00000 	.word	0x3fe00000
 800d8e4:	bff00000 	.word	0xbff00000
 800d8e8:	408fffff 	.word	0x408fffff
 800d8ec:	4bd4      	ldr	r3, [pc, #848]	; (800dc40 <__ieee754_pow+0x728>)
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	ea09 0303 	and.w	r3, r9, r3
 800d8f4:	b943      	cbnz	r3, 800d908 <__ieee754_pow+0x3f0>
 800d8f6:	4658      	mov	r0, fp
 800d8f8:	4661      	mov	r1, ip
 800d8fa:	4bd2      	ldr	r3, [pc, #840]	; (800dc44 <__ieee754_pow+0x72c>)
 800d8fc:	f7f2 fe5c 	bl	80005b8 <__aeabi_dmul>
 800d900:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d904:	4683      	mov	fp, r0
 800d906:	460c      	mov	r4, r1
 800d908:	1523      	asrs	r3, r4, #20
 800d90a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d90e:	4413      	add	r3, r2
 800d910:	930b      	str	r3, [sp, #44]	; 0x2c
 800d912:	4bcd      	ldr	r3, [pc, #820]	; (800dc48 <__ieee754_pow+0x730>)
 800d914:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d918:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d91c:	429c      	cmp	r4, r3
 800d91e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d922:	dd08      	ble.n	800d936 <__ieee754_pow+0x41e>
 800d924:	4bc9      	ldr	r3, [pc, #804]	; (800dc4c <__ieee754_pow+0x734>)
 800d926:	429c      	cmp	r4, r3
 800d928:	f340 819c 	ble.w	800dc64 <__ieee754_pow+0x74c>
 800d92c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d92e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d932:	3301      	adds	r3, #1
 800d934:	930b      	str	r3, [sp, #44]	; 0x2c
 800d936:	2600      	movs	r6, #0
 800d938:	00f3      	lsls	r3, r6, #3
 800d93a:	930d      	str	r3, [sp, #52]	; 0x34
 800d93c:	4bc4      	ldr	r3, [pc, #784]	; (800dc50 <__ieee754_pow+0x738>)
 800d93e:	4658      	mov	r0, fp
 800d940:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d944:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d948:	4629      	mov	r1, r5
 800d94a:	461a      	mov	r2, r3
 800d94c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d950:	4623      	mov	r3, r4
 800d952:	f7f2 fc79 	bl	8000248 <__aeabi_dsub>
 800d956:	46da      	mov	sl, fp
 800d958:	462b      	mov	r3, r5
 800d95a:	4652      	mov	r2, sl
 800d95c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d960:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d964:	f7f2 fc72 	bl	800024c <__adddf3>
 800d968:	4602      	mov	r2, r0
 800d96a:	460b      	mov	r3, r1
 800d96c:	2000      	movs	r0, #0
 800d96e:	49b9      	ldr	r1, [pc, #740]	; (800dc54 <__ieee754_pow+0x73c>)
 800d970:	f7f2 ff4c 	bl	800080c <__aeabi_ddiv>
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d97c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d980:	f7f2 fe1a 	bl	80005b8 <__aeabi_dmul>
 800d984:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d988:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d98c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d990:	2300      	movs	r3, #0
 800d992:	2200      	movs	r2, #0
 800d994:	46ab      	mov	fp, r5
 800d996:	106d      	asrs	r5, r5, #1
 800d998:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d99c:	9304      	str	r3, [sp, #16]
 800d99e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d9a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d9a6:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	4649      	mov	r1, r9
 800d9ae:	4614      	mov	r4, r2
 800d9b0:	461d      	mov	r5, r3
 800d9b2:	f7f2 fe01 	bl	80005b8 <__aeabi_dmul>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d9be:	f7f2 fc43 	bl	8000248 <__aeabi_dsub>
 800d9c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d9c6:	4606      	mov	r6, r0
 800d9c8:	460f      	mov	r7, r1
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	4629      	mov	r1, r5
 800d9ce:	f7f2 fc3b 	bl	8000248 <__aeabi_dsub>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	4650      	mov	r0, sl
 800d9d8:	4659      	mov	r1, fp
 800d9da:	f7f2 fc35 	bl	8000248 <__aeabi_dsub>
 800d9de:	4642      	mov	r2, r8
 800d9e0:	464b      	mov	r3, r9
 800d9e2:	f7f2 fde9 	bl	80005b8 <__aeabi_dmul>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	f7f2 fc2b 	bl	8000248 <__aeabi_dsub>
 800d9f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d9f6:	f7f2 fddf 	bl	80005b8 <__aeabi_dmul>
 800d9fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da02:	4610      	mov	r0, r2
 800da04:	4619      	mov	r1, r3
 800da06:	f7f2 fdd7 	bl	80005b8 <__aeabi_dmul>
 800da0a:	a37b      	add	r3, pc, #492	; (adr r3, 800dbf8 <__ieee754_pow+0x6e0>)
 800da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da10:	4604      	mov	r4, r0
 800da12:	460d      	mov	r5, r1
 800da14:	f7f2 fdd0 	bl	80005b8 <__aeabi_dmul>
 800da18:	a379      	add	r3, pc, #484	; (adr r3, 800dc00 <__ieee754_pow+0x6e8>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	f7f2 fc15 	bl	800024c <__adddf3>
 800da22:	4622      	mov	r2, r4
 800da24:	462b      	mov	r3, r5
 800da26:	f7f2 fdc7 	bl	80005b8 <__aeabi_dmul>
 800da2a:	a377      	add	r3, pc, #476	; (adr r3, 800dc08 <__ieee754_pow+0x6f0>)
 800da2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da30:	f7f2 fc0c 	bl	800024c <__adddf3>
 800da34:	4622      	mov	r2, r4
 800da36:	462b      	mov	r3, r5
 800da38:	f7f2 fdbe 	bl	80005b8 <__aeabi_dmul>
 800da3c:	a374      	add	r3, pc, #464	; (adr r3, 800dc10 <__ieee754_pow+0x6f8>)
 800da3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da42:	f7f2 fc03 	bl	800024c <__adddf3>
 800da46:	4622      	mov	r2, r4
 800da48:	462b      	mov	r3, r5
 800da4a:	f7f2 fdb5 	bl	80005b8 <__aeabi_dmul>
 800da4e:	a372      	add	r3, pc, #456	; (adr r3, 800dc18 <__ieee754_pow+0x700>)
 800da50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da54:	f7f2 fbfa 	bl	800024c <__adddf3>
 800da58:	4622      	mov	r2, r4
 800da5a:	462b      	mov	r3, r5
 800da5c:	f7f2 fdac 	bl	80005b8 <__aeabi_dmul>
 800da60:	a36f      	add	r3, pc, #444	; (adr r3, 800dc20 <__ieee754_pow+0x708>)
 800da62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da66:	f7f2 fbf1 	bl	800024c <__adddf3>
 800da6a:	4622      	mov	r2, r4
 800da6c:	4606      	mov	r6, r0
 800da6e:	460f      	mov	r7, r1
 800da70:	462b      	mov	r3, r5
 800da72:	4620      	mov	r0, r4
 800da74:	4629      	mov	r1, r5
 800da76:	f7f2 fd9f 	bl	80005b8 <__aeabi_dmul>
 800da7a:	4602      	mov	r2, r0
 800da7c:	460b      	mov	r3, r1
 800da7e:	4630      	mov	r0, r6
 800da80:	4639      	mov	r1, r7
 800da82:	f7f2 fd99 	bl	80005b8 <__aeabi_dmul>
 800da86:	4604      	mov	r4, r0
 800da88:	460d      	mov	r5, r1
 800da8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da8e:	4642      	mov	r2, r8
 800da90:	464b      	mov	r3, r9
 800da92:	f7f2 fbdb 	bl	800024c <__adddf3>
 800da96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800da9a:	f7f2 fd8d 	bl	80005b8 <__aeabi_dmul>
 800da9e:	4622      	mov	r2, r4
 800daa0:	462b      	mov	r3, r5
 800daa2:	f7f2 fbd3 	bl	800024c <__adddf3>
 800daa6:	4642      	mov	r2, r8
 800daa8:	4606      	mov	r6, r0
 800daaa:	460f      	mov	r7, r1
 800daac:	464b      	mov	r3, r9
 800daae:	4640      	mov	r0, r8
 800dab0:	4649      	mov	r1, r9
 800dab2:	f7f2 fd81 	bl	80005b8 <__aeabi_dmul>
 800dab6:	2200      	movs	r2, #0
 800dab8:	4b67      	ldr	r3, [pc, #412]	; (800dc58 <__ieee754_pow+0x740>)
 800daba:	4682      	mov	sl, r0
 800dabc:	468b      	mov	fp, r1
 800dabe:	f7f2 fbc5 	bl	800024c <__adddf3>
 800dac2:	4632      	mov	r2, r6
 800dac4:	463b      	mov	r3, r7
 800dac6:	f7f2 fbc1 	bl	800024c <__adddf3>
 800daca:	9c04      	ldr	r4, [sp, #16]
 800dacc:	460d      	mov	r5, r1
 800dace:	4622      	mov	r2, r4
 800dad0:	460b      	mov	r3, r1
 800dad2:	4640      	mov	r0, r8
 800dad4:	4649      	mov	r1, r9
 800dad6:	f7f2 fd6f 	bl	80005b8 <__aeabi_dmul>
 800dada:	2200      	movs	r2, #0
 800dadc:	4680      	mov	r8, r0
 800dade:	4689      	mov	r9, r1
 800dae0:	4620      	mov	r0, r4
 800dae2:	4629      	mov	r1, r5
 800dae4:	4b5c      	ldr	r3, [pc, #368]	; (800dc58 <__ieee754_pow+0x740>)
 800dae6:	f7f2 fbaf 	bl	8000248 <__aeabi_dsub>
 800daea:	4652      	mov	r2, sl
 800daec:	465b      	mov	r3, fp
 800daee:	f7f2 fbab 	bl	8000248 <__aeabi_dsub>
 800daf2:	4602      	mov	r2, r0
 800daf4:	460b      	mov	r3, r1
 800daf6:	4630      	mov	r0, r6
 800daf8:	4639      	mov	r1, r7
 800dafa:	f7f2 fba5 	bl	8000248 <__aeabi_dsub>
 800dafe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800db02:	f7f2 fd59 	bl	80005b8 <__aeabi_dmul>
 800db06:	4622      	mov	r2, r4
 800db08:	4606      	mov	r6, r0
 800db0a:	460f      	mov	r7, r1
 800db0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800db10:	462b      	mov	r3, r5
 800db12:	f7f2 fd51 	bl	80005b8 <__aeabi_dmul>
 800db16:	4602      	mov	r2, r0
 800db18:	460b      	mov	r3, r1
 800db1a:	4630      	mov	r0, r6
 800db1c:	4639      	mov	r1, r7
 800db1e:	f7f2 fb95 	bl	800024c <__adddf3>
 800db22:	4606      	mov	r6, r0
 800db24:	460f      	mov	r7, r1
 800db26:	4602      	mov	r2, r0
 800db28:	460b      	mov	r3, r1
 800db2a:	4640      	mov	r0, r8
 800db2c:	4649      	mov	r1, r9
 800db2e:	f7f2 fb8d 	bl	800024c <__adddf3>
 800db32:	a33d      	add	r3, pc, #244	; (adr r3, 800dc28 <__ieee754_pow+0x710>)
 800db34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db38:	9c04      	ldr	r4, [sp, #16]
 800db3a:	460d      	mov	r5, r1
 800db3c:	4620      	mov	r0, r4
 800db3e:	f7f2 fd3b 	bl	80005b8 <__aeabi_dmul>
 800db42:	4642      	mov	r2, r8
 800db44:	464b      	mov	r3, r9
 800db46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800db4a:	4620      	mov	r0, r4
 800db4c:	4629      	mov	r1, r5
 800db4e:	f7f2 fb7b 	bl	8000248 <__aeabi_dsub>
 800db52:	4602      	mov	r2, r0
 800db54:	460b      	mov	r3, r1
 800db56:	4630      	mov	r0, r6
 800db58:	4639      	mov	r1, r7
 800db5a:	f7f2 fb75 	bl	8000248 <__aeabi_dsub>
 800db5e:	a334      	add	r3, pc, #208	; (adr r3, 800dc30 <__ieee754_pow+0x718>)
 800db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db64:	f7f2 fd28 	bl	80005b8 <__aeabi_dmul>
 800db68:	a333      	add	r3, pc, #204	; (adr r3, 800dc38 <__ieee754_pow+0x720>)
 800db6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6e:	4606      	mov	r6, r0
 800db70:	460f      	mov	r7, r1
 800db72:	4620      	mov	r0, r4
 800db74:	4629      	mov	r1, r5
 800db76:	f7f2 fd1f 	bl	80005b8 <__aeabi_dmul>
 800db7a:	4602      	mov	r2, r0
 800db7c:	460b      	mov	r3, r1
 800db7e:	4630      	mov	r0, r6
 800db80:	4639      	mov	r1, r7
 800db82:	f7f2 fb63 	bl	800024c <__adddf3>
 800db86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db88:	4b34      	ldr	r3, [pc, #208]	; (800dc5c <__ieee754_pow+0x744>)
 800db8a:	4413      	add	r3, r2
 800db8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db90:	f7f2 fb5c 	bl	800024c <__adddf3>
 800db94:	4680      	mov	r8, r0
 800db96:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800db98:	4689      	mov	r9, r1
 800db9a:	f7f2 fca3 	bl	80004e4 <__aeabi_i2d>
 800db9e:	4604      	mov	r4, r0
 800dba0:	460d      	mov	r5, r1
 800dba2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dba4:	4b2e      	ldr	r3, [pc, #184]	; (800dc60 <__ieee754_pow+0x748>)
 800dba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbaa:	4413      	add	r3, r2
 800dbac:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dbb0:	4642      	mov	r2, r8
 800dbb2:	464b      	mov	r3, r9
 800dbb4:	f7f2 fb4a 	bl	800024c <__adddf3>
 800dbb8:	4632      	mov	r2, r6
 800dbba:	463b      	mov	r3, r7
 800dbbc:	f7f2 fb46 	bl	800024c <__adddf3>
 800dbc0:	4622      	mov	r2, r4
 800dbc2:	462b      	mov	r3, r5
 800dbc4:	f7f2 fb42 	bl	800024c <__adddf3>
 800dbc8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800dbcc:	4622      	mov	r2, r4
 800dbce:	462b      	mov	r3, r5
 800dbd0:	4650      	mov	r0, sl
 800dbd2:	468b      	mov	fp, r1
 800dbd4:	f7f2 fb38 	bl	8000248 <__aeabi_dsub>
 800dbd8:	4632      	mov	r2, r6
 800dbda:	463b      	mov	r3, r7
 800dbdc:	f7f2 fb34 	bl	8000248 <__aeabi_dsub>
 800dbe0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dbe4:	f7f2 fb30 	bl	8000248 <__aeabi_dsub>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	460b      	mov	r3, r1
 800dbec:	4640      	mov	r0, r8
 800dbee:	4649      	mov	r1, r9
 800dbf0:	e608      	b.n	800d804 <__ieee754_pow+0x2ec>
 800dbf2:	bf00      	nop
 800dbf4:	f3af 8000 	nop.w
 800dbf8:	4a454eef 	.word	0x4a454eef
 800dbfc:	3fca7e28 	.word	0x3fca7e28
 800dc00:	93c9db65 	.word	0x93c9db65
 800dc04:	3fcd864a 	.word	0x3fcd864a
 800dc08:	a91d4101 	.word	0xa91d4101
 800dc0c:	3fd17460 	.word	0x3fd17460
 800dc10:	518f264d 	.word	0x518f264d
 800dc14:	3fd55555 	.word	0x3fd55555
 800dc18:	db6fabff 	.word	0xdb6fabff
 800dc1c:	3fdb6db6 	.word	0x3fdb6db6
 800dc20:	33333303 	.word	0x33333303
 800dc24:	3fe33333 	.word	0x3fe33333
 800dc28:	e0000000 	.word	0xe0000000
 800dc2c:	3feec709 	.word	0x3feec709
 800dc30:	dc3a03fd 	.word	0xdc3a03fd
 800dc34:	3feec709 	.word	0x3feec709
 800dc38:	145b01f5 	.word	0x145b01f5
 800dc3c:	be3e2fe0 	.word	0xbe3e2fe0
 800dc40:	7ff00000 	.word	0x7ff00000
 800dc44:	43400000 	.word	0x43400000
 800dc48:	0003988e 	.word	0x0003988e
 800dc4c:	000bb679 	.word	0x000bb679
 800dc50:	0800e780 	.word	0x0800e780
 800dc54:	3ff00000 	.word	0x3ff00000
 800dc58:	40080000 	.word	0x40080000
 800dc5c:	0800e7a0 	.word	0x0800e7a0
 800dc60:	0800e790 	.word	0x0800e790
 800dc64:	2601      	movs	r6, #1
 800dc66:	e667      	b.n	800d938 <__ieee754_pow+0x420>
 800dc68:	a39d      	add	r3, pc, #628	; (adr r3, 800dee0 <__ieee754_pow+0x9c8>)
 800dc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6e:	4640      	mov	r0, r8
 800dc70:	4649      	mov	r1, r9
 800dc72:	f7f2 faeb 	bl	800024c <__adddf3>
 800dc76:	4622      	mov	r2, r4
 800dc78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc7c:	462b      	mov	r3, r5
 800dc7e:	4650      	mov	r0, sl
 800dc80:	4639      	mov	r1, r7
 800dc82:	f7f2 fae1 	bl	8000248 <__aeabi_dsub>
 800dc86:	4602      	mov	r2, r0
 800dc88:	460b      	mov	r3, r1
 800dc8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc8e:	f7f2 ff23 	bl	8000ad8 <__aeabi_dcmpgt>
 800dc92:	2800      	cmp	r0, #0
 800dc94:	f47f ae01 	bne.w	800d89a <__ieee754_pow+0x382>
 800dc98:	4aa5      	ldr	r2, [pc, #660]	; (800df30 <__ieee754_pow+0xa18>)
 800dc9a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	f340 8103 	ble.w	800deaa <__ieee754_pow+0x992>
 800dca4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dca8:	2000      	movs	r0, #0
 800dcaa:	151b      	asrs	r3, r3, #20
 800dcac:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dcb0:	fa4a f303 	asr.w	r3, sl, r3
 800dcb4:	4433      	add	r3, r6
 800dcb6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dcba:	4f9e      	ldr	r7, [pc, #632]	; (800df34 <__ieee754_pow+0xa1c>)
 800dcbc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dcc0:	4117      	asrs	r7, r2
 800dcc2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800dcc6:	ea23 0107 	bic.w	r1, r3, r7
 800dcca:	f1c2 0214 	rsb	r2, r2, #20
 800dcce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	fa4a fa02 	asr.w	sl, sl, r2
 800dcd8:	2e00      	cmp	r6, #0
 800dcda:	4602      	mov	r2, r0
 800dcdc:	4629      	mov	r1, r5
 800dcde:	4620      	mov	r0, r4
 800dce0:	bfb8      	it	lt
 800dce2:	f1ca 0a00 	rsblt	sl, sl, #0
 800dce6:	f7f2 faaf 	bl	8000248 <__aeabi_dsub>
 800dcea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcf2:	2400      	movs	r4, #0
 800dcf4:	4642      	mov	r2, r8
 800dcf6:	464b      	mov	r3, r9
 800dcf8:	f7f2 faa8 	bl	800024c <__adddf3>
 800dcfc:	a37a      	add	r3, pc, #488	; (adr r3, 800dee8 <__ieee754_pow+0x9d0>)
 800dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd02:	4620      	mov	r0, r4
 800dd04:	460d      	mov	r5, r1
 800dd06:	f7f2 fc57 	bl	80005b8 <__aeabi_dmul>
 800dd0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd0e:	4606      	mov	r6, r0
 800dd10:	460f      	mov	r7, r1
 800dd12:	4620      	mov	r0, r4
 800dd14:	4629      	mov	r1, r5
 800dd16:	f7f2 fa97 	bl	8000248 <__aeabi_dsub>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	4640      	mov	r0, r8
 800dd20:	4649      	mov	r1, r9
 800dd22:	f7f2 fa91 	bl	8000248 <__aeabi_dsub>
 800dd26:	a372      	add	r3, pc, #456	; (adr r3, 800def0 <__ieee754_pow+0x9d8>)
 800dd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2c:	f7f2 fc44 	bl	80005b8 <__aeabi_dmul>
 800dd30:	a371      	add	r3, pc, #452	; (adr r3, 800def8 <__ieee754_pow+0x9e0>)
 800dd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd36:	4680      	mov	r8, r0
 800dd38:	4689      	mov	r9, r1
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	4629      	mov	r1, r5
 800dd3e:	f7f2 fc3b 	bl	80005b8 <__aeabi_dmul>
 800dd42:	4602      	mov	r2, r0
 800dd44:	460b      	mov	r3, r1
 800dd46:	4640      	mov	r0, r8
 800dd48:	4649      	mov	r1, r9
 800dd4a:	f7f2 fa7f 	bl	800024c <__adddf3>
 800dd4e:	4604      	mov	r4, r0
 800dd50:	460d      	mov	r5, r1
 800dd52:	4602      	mov	r2, r0
 800dd54:	460b      	mov	r3, r1
 800dd56:	4630      	mov	r0, r6
 800dd58:	4639      	mov	r1, r7
 800dd5a:	f7f2 fa77 	bl	800024c <__adddf3>
 800dd5e:	4632      	mov	r2, r6
 800dd60:	463b      	mov	r3, r7
 800dd62:	4680      	mov	r8, r0
 800dd64:	4689      	mov	r9, r1
 800dd66:	f7f2 fa6f 	bl	8000248 <__aeabi_dsub>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	4620      	mov	r0, r4
 800dd70:	4629      	mov	r1, r5
 800dd72:	f7f2 fa69 	bl	8000248 <__aeabi_dsub>
 800dd76:	4642      	mov	r2, r8
 800dd78:	4606      	mov	r6, r0
 800dd7a:	460f      	mov	r7, r1
 800dd7c:	464b      	mov	r3, r9
 800dd7e:	4640      	mov	r0, r8
 800dd80:	4649      	mov	r1, r9
 800dd82:	f7f2 fc19 	bl	80005b8 <__aeabi_dmul>
 800dd86:	a35e      	add	r3, pc, #376	; (adr r3, 800df00 <__ieee754_pow+0x9e8>)
 800dd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	460d      	mov	r5, r1
 800dd90:	f7f2 fc12 	bl	80005b8 <__aeabi_dmul>
 800dd94:	a35c      	add	r3, pc, #368	; (adr r3, 800df08 <__ieee754_pow+0x9f0>)
 800dd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9a:	f7f2 fa55 	bl	8000248 <__aeabi_dsub>
 800dd9e:	4622      	mov	r2, r4
 800dda0:	462b      	mov	r3, r5
 800dda2:	f7f2 fc09 	bl	80005b8 <__aeabi_dmul>
 800dda6:	a35a      	add	r3, pc, #360	; (adr r3, 800df10 <__ieee754_pow+0x9f8>)
 800dda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddac:	f7f2 fa4e 	bl	800024c <__adddf3>
 800ddb0:	4622      	mov	r2, r4
 800ddb2:	462b      	mov	r3, r5
 800ddb4:	f7f2 fc00 	bl	80005b8 <__aeabi_dmul>
 800ddb8:	a357      	add	r3, pc, #348	; (adr r3, 800df18 <__ieee754_pow+0xa00>)
 800ddba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbe:	f7f2 fa43 	bl	8000248 <__aeabi_dsub>
 800ddc2:	4622      	mov	r2, r4
 800ddc4:	462b      	mov	r3, r5
 800ddc6:	f7f2 fbf7 	bl	80005b8 <__aeabi_dmul>
 800ddca:	a355      	add	r3, pc, #340	; (adr r3, 800df20 <__ieee754_pow+0xa08>)
 800ddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd0:	f7f2 fa3c 	bl	800024c <__adddf3>
 800ddd4:	4622      	mov	r2, r4
 800ddd6:	462b      	mov	r3, r5
 800ddd8:	f7f2 fbee 	bl	80005b8 <__aeabi_dmul>
 800dddc:	4602      	mov	r2, r0
 800ddde:	460b      	mov	r3, r1
 800dde0:	4640      	mov	r0, r8
 800dde2:	4649      	mov	r1, r9
 800dde4:	f7f2 fa30 	bl	8000248 <__aeabi_dsub>
 800dde8:	4604      	mov	r4, r0
 800ddea:	460d      	mov	r5, r1
 800ddec:	4602      	mov	r2, r0
 800ddee:	460b      	mov	r3, r1
 800ddf0:	4640      	mov	r0, r8
 800ddf2:	4649      	mov	r1, r9
 800ddf4:	f7f2 fbe0 	bl	80005b8 <__aeabi_dmul>
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de02:	4620      	mov	r0, r4
 800de04:	4629      	mov	r1, r5
 800de06:	f7f2 fa1f 	bl	8000248 <__aeabi_dsub>
 800de0a:	4602      	mov	r2, r0
 800de0c:	460b      	mov	r3, r1
 800de0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de12:	f7f2 fcfb 	bl	800080c <__aeabi_ddiv>
 800de16:	4632      	mov	r2, r6
 800de18:	4604      	mov	r4, r0
 800de1a:	460d      	mov	r5, r1
 800de1c:	463b      	mov	r3, r7
 800de1e:	4640      	mov	r0, r8
 800de20:	4649      	mov	r1, r9
 800de22:	f7f2 fbc9 	bl	80005b8 <__aeabi_dmul>
 800de26:	4632      	mov	r2, r6
 800de28:	463b      	mov	r3, r7
 800de2a:	f7f2 fa0f 	bl	800024c <__adddf3>
 800de2e:	4602      	mov	r2, r0
 800de30:	460b      	mov	r3, r1
 800de32:	4620      	mov	r0, r4
 800de34:	4629      	mov	r1, r5
 800de36:	f7f2 fa07 	bl	8000248 <__aeabi_dsub>
 800de3a:	4642      	mov	r2, r8
 800de3c:	464b      	mov	r3, r9
 800de3e:	f7f2 fa03 	bl	8000248 <__aeabi_dsub>
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
 800de46:	2000      	movs	r0, #0
 800de48:	493b      	ldr	r1, [pc, #236]	; (800df38 <__ieee754_pow+0xa20>)
 800de4a:	f7f2 f9fd 	bl	8000248 <__aeabi_dsub>
 800de4e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800de52:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800de56:	da2b      	bge.n	800deb0 <__ieee754_pow+0x998>
 800de58:	4652      	mov	r2, sl
 800de5a:	f000 f9b9 	bl	800e1d0 <scalbn>
 800de5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de62:	f7ff bbf2 	b.w	800d64a <__ieee754_pow+0x132>
 800de66:	4b35      	ldr	r3, [pc, #212]	; (800df3c <__ieee754_pow+0xa24>)
 800de68:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800de6c:	429f      	cmp	r7, r3
 800de6e:	f77f af13 	ble.w	800dc98 <__ieee754_pow+0x780>
 800de72:	4b33      	ldr	r3, [pc, #204]	; (800df40 <__ieee754_pow+0xa28>)
 800de74:	440b      	add	r3, r1
 800de76:	4303      	orrs	r3, r0
 800de78:	d00b      	beq.n	800de92 <__ieee754_pow+0x97a>
 800de7a:	a32b      	add	r3, pc, #172	; (adr r3, 800df28 <__ieee754_pow+0xa10>)
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de84:	f7f2 fb98 	bl	80005b8 <__aeabi_dmul>
 800de88:	a327      	add	r3, pc, #156	; (adr r3, 800df28 <__ieee754_pow+0xa10>)
 800de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8e:	f7ff bbdc 	b.w	800d64a <__ieee754_pow+0x132>
 800de92:	4622      	mov	r2, r4
 800de94:	462b      	mov	r3, r5
 800de96:	f7f2 f9d7 	bl	8000248 <__aeabi_dsub>
 800de9a:	4642      	mov	r2, r8
 800de9c:	464b      	mov	r3, r9
 800de9e:	f7f2 fe11 	bl	8000ac4 <__aeabi_dcmpge>
 800dea2:	2800      	cmp	r0, #0
 800dea4:	f43f aef8 	beq.w	800dc98 <__ieee754_pow+0x780>
 800dea8:	e7e7      	b.n	800de7a <__ieee754_pow+0x962>
 800deaa:	f04f 0a00 	mov.w	sl, #0
 800deae:	e71e      	b.n	800dcee <__ieee754_pow+0x7d6>
 800deb0:	4621      	mov	r1, r4
 800deb2:	e7d4      	b.n	800de5e <__ieee754_pow+0x946>
 800deb4:	f04f 0b00 	mov.w	fp, #0
 800deb8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800df38 <__ieee754_pow+0xa20>
 800debc:	f7ff bbb0 	b.w	800d620 <__ieee754_pow+0x108>
 800dec0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800dec4:	f7ff bbac 	b.w	800d620 <__ieee754_pow+0x108>
 800dec8:	4638      	mov	r0, r7
 800deca:	4641      	mov	r1, r8
 800decc:	f7ff bbbf 	b.w	800d64e <__ieee754_pow+0x136>
 800ded0:	9200      	str	r2, [sp, #0]
 800ded2:	f7ff bb7f 	b.w	800d5d4 <__ieee754_pow+0xbc>
 800ded6:	2300      	movs	r3, #0
 800ded8:	f7ff bb69 	b.w	800d5ae <__ieee754_pow+0x96>
 800dedc:	f3af 8000 	nop.w
 800dee0:	652b82fe 	.word	0x652b82fe
 800dee4:	3c971547 	.word	0x3c971547
 800dee8:	00000000 	.word	0x00000000
 800deec:	3fe62e43 	.word	0x3fe62e43
 800def0:	fefa39ef 	.word	0xfefa39ef
 800def4:	3fe62e42 	.word	0x3fe62e42
 800def8:	0ca86c39 	.word	0x0ca86c39
 800defc:	be205c61 	.word	0xbe205c61
 800df00:	72bea4d0 	.word	0x72bea4d0
 800df04:	3e663769 	.word	0x3e663769
 800df08:	c5d26bf1 	.word	0xc5d26bf1
 800df0c:	3ebbbd41 	.word	0x3ebbbd41
 800df10:	af25de2c 	.word	0xaf25de2c
 800df14:	3f11566a 	.word	0x3f11566a
 800df18:	16bebd93 	.word	0x16bebd93
 800df1c:	3f66c16c 	.word	0x3f66c16c
 800df20:	5555553e 	.word	0x5555553e
 800df24:	3fc55555 	.word	0x3fc55555
 800df28:	c2f8f359 	.word	0xc2f8f359
 800df2c:	01a56e1f 	.word	0x01a56e1f
 800df30:	3fe00000 	.word	0x3fe00000
 800df34:	000fffff 	.word	0x000fffff
 800df38:	3ff00000 	.word	0x3ff00000
 800df3c:	4090cbff 	.word	0x4090cbff
 800df40:	3f6f3400 	.word	0x3f6f3400

0800df44 <__ieee754_sqrt>:
 800df44:	f8df c150 	ldr.w	ip, [pc, #336]	; 800e098 <__ieee754_sqrt+0x154>
 800df48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df4c:	ea3c 0c01 	bics.w	ip, ip, r1
 800df50:	460b      	mov	r3, r1
 800df52:	4606      	mov	r6, r0
 800df54:	460d      	mov	r5, r1
 800df56:	460a      	mov	r2, r1
 800df58:	4607      	mov	r7, r0
 800df5a:	4604      	mov	r4, r0
 800df5c:	d10e      	bne.n	800df7c <__ieee754_sqrt+0x38>
 800df5e:	4602      	mov	r2, r0
 800df60:	f7f2 fb2a 	bl	80005b8 <__aeabi_dmul>
 800df64:	4602      	mov	r2, r0
 800df66:	460b      	mov	r3, r1
 800df68:	4630      	mov	r0, r6
 800df6a:	4629      	mov	r1, r5
 800df6c:	f7f2 f96e 	bl	800024c <__adddf3>
 800df70:	4606      	mov	r6, r0
 800df72:	460d      	mov	r5, r1
 800df74:	4630      	mov	r0, r6
 800df76:	4629      	mov	r1, r5
 800df78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df7c:	2900      	cmp	r1, #0
 800df7e:	dc0d      	bgt.n	800df9c <__ieee754_sqrt+0x58>
 800df80:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800df84:	ea5c 0707 	orrs.w	r7, ip, r7
 800df88:	d0f4      	beq.n	800df74 <__ieee754_sqrt+0x30>
 800df8a:	b139      	cbz	r1, 800df9c <__ieee754_sqrt+0x58>
 800df8c:	4602      	mov	r2, r0
 800df8e:	f7f2 f95b 	bl	8000248 <__aeabi_dsub>
 800df92:	4602      	mov	r2, r0
 800df94:	460b      	mov	r3, r1
 800df96:	f7f2 fc39 	bl	800080c <__aeabi_ddiv>
 800df9a:	e7e9      	b.n	800df70 <__ieee754_sqrt+0x2c>
 800df9c:	1512      	asrs	r2, r2, #20
 800df9e:	d074      	beq.n	800e08a <__ieee754_sqrt+0x146>
 800dfa0:	2000      	movs	r0, #0
 800dfa2:	07d5      	lsls	r5, r2, #31
 800dfa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfa8:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800dfac:	bf5e      	ittt	pl
 800dfae:	0fe3      	lsrpl	r3, r4, #31
 800dfb0:	0064      	lslpl	r4, r4, #1
 800dfb2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800dfb6:	0fe3      	lsrs	r3, r4, #31
 800dfb8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800dfbc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800dfc0:	2516      	movs	r5, #22
 800dfc2:	4601      	mov	r1, r0
 800dfc4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dfc8:	1076      	asrs	r6, r6, #1
 800dfca:	0064      	lsls	r4, r4, #1
 800dfcc:	188f      	adds	r7, r1, r2
 800dfce:	429f      	cmp	r7, r3
 800dfd0:	bfde      	ittt	le
 800dfd2:	1bdb      	suble	r3, r3, r7
 800dfd4:	18b9      	addle	r1, r7, r2
 800dfd6:	1880      	addle	r0, r0, r2
 800dfd8:	005b      	lsls	r3, r3, #1
 800dfda:	3d01      	subs	r5, #1
 800dfdc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800dfe0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800dfe4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800dfe8:	d1f0      	bne.n	800dfcc <__ieee754_sqrt+0x88>
 800dfea:	462a      	mov	r2, r5
 800dfec:	f04f 0e20 	mov.w	lr, #32
 800dff0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800dff4:	428b      	cmp	r3, r1
 800dff6:	eb07 0c05 	add.w	ip, r7, r5
 800dffa:	dc02      	bgt.n	800e002 <__ieee754_sqrt+0xbe>
 800dffc:	d113      	bne.n	800e026 <__ieee754_sqrt+0xe2>
 800dffe:	45a4      	cmp	ip, r4
 800e000:	d811      	bhi.n	800e026 <__ieee754_sqrt+0xe2>
 800e002:	f1bc 0f00 	cmp.w	ip, #0
 800e006:	eb0c 0507 	add.w	r5, ip, r7
 800e00a:	da43      	bge.n	800e094 <__ieee754_sqrt+0x150>
 800e00c:	2d00      	cmp	r5, #0
 800e00e:	db41      	blt.n	800e094 <__ieee754_sqrt+0x150>
 800e010:	f101 0801 	add.w	r8, r1, #1
 800e014:	1a5b      	subs	r3, r3, r1
 800e016:	4641      	mov	r1, r8
 800e018:	45a4      	cmp	ip, r4
 800e01a:	bf88      	it	hi
 800e01c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e020:	eba4 040c 	sub.w	r4, r4, ip
 800e024:	443a      	add	r2, r7
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	f1be 0e01 	subs.w	lr, lr, #1
 800e02c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800e030:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800e034:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800e038:	d1dc      	bne.n	800dff4 <__ieee754_sqrt+0xb0>
 800e03a:	4323      	orrs	r3, r4
 800e03c:	d006      	beq.n	800e04c <__ieee754_sqrt+0x108>
 800e03e:	1c54      	adds	r4, r2, #1
 800e040:	bf0b      	itete	eq
 800e042:	4672      	moveq	r2, lr
 800e044:	3201      	addne	r2, #1
 800e046:	3001      	addeq	r0, #1
 800e048:	f022 0201 	bicne.w	r2, r2, #1
 800e04c:	1043      	asrs	r3, r0, #1
 800e04e:	07c1      	lsls	r1, r0, #31
 800e050:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e054:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e058:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e05c:	bf48      	it	mi
 800e05e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e062:	4610      	mov	r0, r2
 800e064:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800e068:	e782      	b.n	800df70 <__ieee754_sqrt+0x2c>
 800e06a:	0ae3      	lsrs	r3, r4, #11
 800e06c:	3915      	subs	r1, #21
 800e06e:	0564      	lsls	r4, r4, #21
 800e070:	2b00      	cmp	r3, #0
 800e072:	d0fa      	beq.n	800e06a <__ieee754_sqrt+0x126>
 800e074:	02de      	lsls	r6, r3, #11
 800e076:	d50a      	bpl.n	800e08e <__ieee754_sqrt+0x14a>
 800e078:	f1c2 0020 	rsb	r0, r2, #32
 800e07c:	fa24 f000 	lsr.w	r0, r4, r0
 800e080:	1e55      	subs	r5, r2, #1
 800e082:	4094      	lsls	r4, r2
 800e084:	4303      	orrs	r3, r0
 800e086:	1b4a      	subs	r2, r1, r5
 800e088:	e78a      	b.n	800dfa0 <__ieee754_sqrt+0x5c>
 800e08a:	4611      	mov	r1, r2
 800e08c:	e7f0      	b.n	800e070 <__ieee754_sqrt+0x12c>
 800e08e:	005b      	lsls	r3, r3, #1
 800e090:	3201      	adds	r2, #1
 800e092:	e7ef      	b.n	800e074 <__ieee754_sqrt+0x130>
 800e094:	4688      	mov	r8, r1
 800e096:	e7bd      	b.n	800e014 <__ieee754_sqrt+0xd0>
 800e098:	7ff00000 	.word	0x7ff00000

0800e09c <fabs>:
 800e09c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e0a0:	4770      	bx	lr

0800e0a2 <finite>:
 800e0a2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e0a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e0aa:	0fc0      	lsrs	r0, r0, #31
 800e0ac:	4770      	bx	lr
	...

0800e0b0 <nan>:
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	4901      	ldr	r1, [pc, #4]	; (800e0b8 <nan+0x8>)
 800e0b4:	4770      	bx	lr
 800e0b6:	bf00      	nop
 800e0b8:	7ff80000 	.word	0x7ff80000

0800e0bc <rint>:
 800e0bc:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800e0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0c2:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800e0c6:	2f13      	cmp	r7, #19
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	460c      	mov	r4, r1
 800e0ce:	4605      	mov	r5, r0
 800e0d0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800e0d4:	dc59      	bgt.n	800e18a <rint+0xce>
 800e0d6:	2f00      	cmp	r7, #0
 800e0d8:	da2a      	bge.n	800e130 <rint+0x74>
 800e0da:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e0de:	4301      	orrs	r1, r0
 800e0e0:	d022      	beq.n	800e128 <rint+0x6c>
 800e0e2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800e0e6:	4301      	orrs	r1, r0
 800e0e8:	424d      	negs	r5, r1
 800e0ea:	430d      	orrs	r5, r1
 800e0ec:	4936      	ldr	r1, [pc, #216]	; (800e1c8 <rint+0x10c>)
 800e0ee:	0c5c      	lsrs	r4, r3, #17
 800e0f0:	0b2d      	lsrs	r5, r5, #12
 800e0f2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800e0f6:	0464      	lsls	r4, r4, #17
 800e0f8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e0fc:	ea45 0304 	orr.w	r3, r5, r4
 800e100:	e9d1 4500 	ldrd	r4, r5, [r1]
 800e104:	4620      	mov	r0, r4
 800e106:	4629      	mov	r1, r5
 800e108:	f7f2 f8a0 	bl	800024c <__adddf3>
 800e10c:	e9cd 0100 	strd	r0, r1, [sp]
 800e110:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e114:	462b      	mov	r3, r5
 800e116:	4622      	mov	r2, r4
 800e118:	f7f2 f896 	bl	8000248 <__aeabi_dsub>
 800e11c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e120:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800e124:	4602      	mov	r2, r0
 800e126:	460b      	mov	r3, r1
 800e128:	4610      	mov	r0, r2
 800e12a:	4619      	mov	r1, r3
 800e12c:	b003      	add	sp, #12
 800e12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e130:	4926      	ldr	r1, [pc, #152]	; (800e1cc <rint+0x110>)
 800e132:	4139      	asrs	r1, r7
 800e134:	ea03 0001 	and.w	r0, r3, r1
 800e138:	4310      	orrs	r0, r2
 800e13a:	d0f5      	beq.n	800e128 <rint+0x6c>
 800e13c:	084b      	lsrs	r3, r1, #1
 800e13e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800e142:	ea52 0501 	orrs.w	r5, r2, r1
 800e146:	d00c      	beq.n	800e162 <rint+0xa6>
 800e148:	ea24 0303 	bic.w	r3, r4, r3
 800e14c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800e150:	2f13      	cmp	r7, #19
 800e152:	bf0c      	ite	eq
 800e154:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800e158:	2500      	movne	r5, #0
 800e15a:	fa44 f707 	asr.w	r7, r4, r7
 800e15e:	ea43 0407 	orr.w	r4, r3, r7
 800e162:	4919      	ldr	r1, [pc, #100]	; (800e1c8 <rint+0x10c>)
 800e164:	4623      	mov	r3, r4
 800e166:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800e16a:	462a      	mov	r2, r5
 800e16c:	e9d6 4500 	ldrd	r4, r5, [r6]
 800e170:	4620      	mov	r0, r4
 800e172:	4629      	mov	r1, r5
 800e174:	f7f2 f86a 	bl	800024c <__adddf3>
 800e178:	e9cd 0100 	strd	r0, r1, [sp]
 800e17c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e180:	4622      	mov	r2, r4
 800e182:	462b      	mov	r3, r5
 800e184:	f7f2 f860 	bl	8000248 <__aeabi_dsub>
 800e188:	e7cc      	b.n	800e124 <rint+0x68>
 800e18a:	2f33      	cmp	r7, #51	; 0x33
 800e18c:	dd05      	ble.n	800e19a <rint+0xde>
 800e18e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800e192:	d1c9      	bne.n	800e128 <rint+0x6c>
 800e194:	f7f2 f85a 	bl	800024c <__adddf3>
 800e198:	e7c4      	b.n	800e124 <rint+0x68>
 800e19a:	f04f 31ff 	mov.w	r1, #4294967295
 800e19e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800e1a2:	fa21 f10c 	lsr.w	r1, r1, ip
 800e1a6:	4208      	tst	r0, r1
 800e1a8:	d0be      	beq.n	800e128 <rint+0x6c>
 800e1aa:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800e1ae:	bf18      	it	ne
 800e1b0:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800e1b4:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800e1b8:	bf1e      	ittt	ne
 800e1ba:	ea20 0303 	bicne.w	r3, r0, r3
 800e1be:	fa45 fc0c 	asrne.w	ip, r5, ip
 800e1c2:	ea43 050c 	orrne.w	r5, r3, ip
 800e1c6:	e7cc      	b.n	800e162 <rint+0xa6>
 800e1c8:	0800e7b0 	.word	0x0800e7b0
 800e1cc:	000fffff 	.word	0x000fffff

0800e1d0 <scalbn>:
 800e1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	460d      	mov	r5, r1
 800e1da:	4617      	mov	r7, r2
 800e1dc:	460b      	mov	r3, r1
 800e1de:	b996      	cbnz	r6, 800e206 <scalbn+0x36>
 800e1e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e1e4:	4303      	orrs	r3, r0
 800e1e6:	d039      	beq.n	800e25c <scalbn+0x8c>
 800e1e8:	4b35      	ldr	r3, [pc, #212]	; (800e2c0 <scalbn+0xf0>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f7f2 f9e4 	bl	80005b8 <__aeabi_dmul>
 800e1f0:	4b34      	ldr	r3, [pc, #208]	; (800e2c4 <scalbn+0xf4>)
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	429f      	cmp	r7, r3
 800e1f6:	460d      	mov	r5, r1
 800e1f8:	da0f      	bge.n	800e21a <scalbn+0x4a>
 800e1fa:	a32d      	add	r3, pc, #180	; (adr r3, 800e2b0 <scalbn+0xe0>)
 800e1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e200:	f7f2 f9da 	bl	80005b8 <__aeabi_dmul>
 800e204:	e006      	b.n	800e214 <scalbn+0x44>
 800e206:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e20a:	4296      	cmp	r6, r2
 800e20c:	d10a      	bne.n	800e224 <scalbn+0x54>
 800e20e:	4602      	mov	r2, r0
 800e210:	f7f2 f81c 	bl	800024c <__adddf3>
 800e214:	4604      	mov	r4, r0
 800e216:	460d      	mov	r5, r1
 800e218:	e020      	b.n	800e25c <scalbn+0x8c>
 800e21a:	460b      	mov	r3, r1
 800e21c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e220:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800e224:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800e228:	19b9      	adds	r1, r7, r6
 800e22a:	4291      	cmp	r1, r2
 800e22c:	dd0e      	ble.n	800e24c <scalbn+0x7c>
 800e22e:	a322      	add	r3, pc, #136	; (adr r3, 800e2b8 <scalbn+0xe8>)
 800e230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e234:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800e238:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800e23c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800e240:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800e244:	4820      	ldr	r0, [pc, #128]	; (800e2c8 <scalbn+0xf8>)
 800e246:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800e24a:	e7d9      	b.n	800e200 <scalbn+0x30>
 800e24c:	2900      	cmp	r1, #0
 800e24e:	dd08      	ble.n	800e262 <scalbn+0x92>
 800e250:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e254:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e258:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e25c:	4620      	mov	r0, r4
 800e25e:	4629      	mov	r1, r5
 800e260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e262:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800e266:	da16      	bge.n	800e296 <scalbn+0xc6>
 800e268:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e26c:	429f      	cmp	r7, r3
 800e26e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800e272:	dd08      	ble.n	800e286 <scalbn+0xb6>
 800e274:	4c15      	ldr	r4, [pc, #84]	; (800e2cc <scalbn+0xfc>)
 800e276:	4814      	ldr	r0, [pc, #80]	; (800e2c8 <scalbn+0xf8>)
 800e278:	f363 74df 	bfi	r4, r3, #31, #1
 800e27c:	a30e      	add	r3, pc, #56	; (adr r3, 800e2b8 <scalbn+0xe8>)
 800e27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e282:	4621      	mov	r1, r4
 800e284:	e7bc      	b.n	800e200 <scalbn+0x30>
 800e286:	4c12      	ldr	r4, [pc, #72]	; (800e2d0 <scalbn+0x100>)
 800e288:	4812      	ldr	r0, [pc, #72]	; (800e2d4 <scalbn+0x104>)
 800e28a:	f363 74df 	bfi	r4, r3, #31, #1
 800e28e:	a308      	add	r3, pc, #32	; (adr r3, 800e2b0 <scalbn+0xe0>)
 800e290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e294:	e7f5      	b.n	800e282 <scalbn+0xb2>
 800e296:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e29a:	3136      	adds	r1, #54	; 0x36
 800e29c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e2a0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	4629      	mov	r1, r5
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	4b0b      	ldr	r3, [pc, #44]	; (800e2d8 <scalbn+0x108>)
 800e2ac:	e7a8      	b.n	800e200 <scalbn+0x30>
 800e2ae:	bf00      	nop
 800e2b0:	c2f8f359 	.word	0xc2f8f359
 800e2b4:	01a56e1f 	.word	0x01a56e1f
 800e2b8:	8800759c 	.word	0x8800759c
 800e2bc:	7e37e43c 	.word	0x7e37e43c
 800e2c0:	43500000 	.word	0x43500000
 800e2c4:	ffff3cb0 	.word	0xffff3cb0
 800e2c8:	8800759c 	.word	0x8800759c
 800e2cc:	7e37e43c 	.word	0x7e37e43c
 800e2d0:	01a56e1f 	.word	0x01a56e1f
 800e2d4:	c2f8f359 	.word	0xc2f8f359
 800e2d8:	3c900000 	.word	0x3c900000

0800e2dc <_init>:
 800e2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2de:	bf00      	nop
 800e2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2e2:	bc08      	pop	{r3}
 800e2e4:	469e      	mov	lr, r3
 800e2e6:	4770      	bx	lr

0800e2e8 <_fini>:
 800e2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ea:	bf00      	nop
 800e2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ee:	bc08      	pop	{r3}
 800e2f0:	469e      	mov	lr, r3
 800e2f2:	4770      	bx	lr
