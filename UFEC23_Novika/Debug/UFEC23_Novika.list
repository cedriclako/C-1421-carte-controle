
UFEC23_Novika.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c5c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ee8  08012e50  08012e50  00022e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d38  08014d38  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  08014d38  08014d38  00024d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d40  08014d40  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d40  08014d40  00024d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d44  08014d44  00024d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08014d48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000395c  20000238  08014f7c  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003b94  08014f7c  00033b94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021135  00000000  00000000  0003025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057a7  00000000  00000000  00051392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd0  00000000  00000000  00056b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd8  00000000  00000000  00058910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026191  00000000  00000000  0005a4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024a30  00000000  00000000  00080679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9fc9  00000000  00000000  000a50a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016f072  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091c0  00000000  00000000  0016f0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000238 	.word	0x20000238
 800020c:	00000000 	.word	0x00000000
 8000210:	08012e34 	.word	0x08012e34

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000023c 	.word	0x2000023c
 800022c:	08012e34 	.word	0x08012e34

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	; 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_frsub>:
 8000c1c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c20:	e002      	b.n	8000c28 <__addsf3>
 8000c22:	bf00      	nop

08000c24 <__aeabi_fsub>:
 8000c24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c28 <__addsf3>:
 8000c28:	0042      	lsls	r2, r0, #1
 8000c2a:	bf1f      	itttt	ne
 8000c2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c30:	ea92 0f03 	teqne	r2, r3
 8000c34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3c:	d06a      	beq.n	8000d14 <__addsf3+0xec>
 8000c3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c46:	bfc1      	itttt	gt
 8000c48:	18d2      	addgt	r2, r2, r3
 8000c4a:	4041      	eorgt	r1, r0
 8000c4c:	4048      	eorgt	r0, r1
 8000c4e:	4041      	eorgt	r1, r0
 8000c50:	bfb8      	it	lt
 8000c52:	425b      	neglt	r3, r3
 8000c54:	2b19      	cmp	r3, #25
 8000c56:	bf88      	it	hi
 8000c58:	4770      	bxhi	lr
 8000c5a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c66:	bf18      	it	ne
 8000c68:	4240      	negne	r0, r0
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c76:	bf18      	it	ne
 8000c78:	4249      	negne	r1, r1
 8000c7a:	ea92 0f03 	teq	r2, r3
 8000c7e:	d03f      	beq.n	8000d00 <__addsf3+0xd8>
 8000c80:	f1a2 0201 	sub.w	r2, r2, #1
 8000c84:	fa41 fc03 	asr.w	ip, r1, r3
 8000c88:	eb10 000c 	adds.w	r0, r0, ip
 8000c8c:	f1c3 0320 	rsb	r3, r3, #32
 8000c90:	fa01 f103 	lsl.w	r1, r1, r3
 8000c94:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__addsf3+0x78>
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ca0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ca4:	d313      	bcc.n	8000cce <__addsf3+0xa6>
 8000ca6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000caa:	d306      	bcc.n	8000cba <__addsf3+0x92>
 8000cac:	0840      	lsrs	r0, r0, #1
 8000cae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cb2:	f102 0201 	add.w	r2, r2, #1
 8000cb6:	2afe      	cmp	r2, #254	; 0xfe
 8000cb8:	d251      	bcs.n	8000d5e <__addsf3+0x136>
 8000cba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc2:	bf08      	it	eq
 8000cc4:	f020 0001 	biceq.w	r0, r0, #1
 8000cc8:	ea40 0003 	orr.w	r0, r0, r3
 8000ccc:	4770      	bx	lr
 8000cce:	0049      	lsls	r1, r1, #1
 8000cd0:	eb40 0000 	adc.w	r0, r0, r0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cdc:	d2ed      	bcs.n	8000cba <__addsf3+0x92>
 8000cde:	fab0 fc80 	clz	ip, r0
 8000ce2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ce6:	ebb2 020c 	subs.w	r2, r2, ip
 8000cea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cee:	bfaa      	itet	ge
 8000cf0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cf4:	4252      	neglt	r2, r2
 8000cf6:	4318      	orrge	r0, r3
 8000cf8:	bfbc      	itt	lt
 8000cfa:	40d0      	lsrlt	r0, r2
 8000cfc:	4318      	orrlt	r0, r3
 8000cfe:	4770      	bx	lr
 8000d00:	f092 0f00 	teq	r2, #0
 8000d04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d08:	bf06      	itte	eq
 8000d0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d0e:	3201      	addeq	r2, #1
 8000d10:	3b01      	subne	r3, #1
 8000d12:	e7b5      	b.n	8000c80 <__addsf3+0x58>
 8000d14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d1c:	bf18      	it	ne
 8000d1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d22:	d021      	beq.n	8000d68 <__addsf3+0x140>
 8000d24:	ea92 0f03 	teq	r2, r3
 8000d28:	d004      	beq.n	8000d34 <__addsf3+0x10c>
 8000d2a:	f092 0f00 	teq	r2, #0
 8000d2e:	bf08      	it	eq
 8000d30:	4608      	moveq	r0, r1
 8000d32:	4770      	bx	lr
 8000d34:	ea90 0f01 	teq	r0, r1
 8000d38:	bf1c      	itt	ne
 8000d3a:	2000      	movne	r0, #0
 8000d3c:	4770      	bxne	lr
 8000d3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d42:	d104      	bne.n	8000d4e <__addsf3+0x126>
 8000d44:	0040      	lsls	r0, r0, #1
 8000d46:	bf28      	it	cs
 8000d48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	4770      	bx	lr
 8000d4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d52:	bf3c      	itt	cc
 8000d54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d58:	4770      	bxcc	lr
 8000d5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d66:	4770      	bx	lr
 8000d68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d6c:	bf16      	itet	ne
 8000d6e:	4608      	movne	r0, r1
 8000d70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d74:	4601      	movne	r1, r0
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	bf06      	itte	eq
 8000d7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d7e:	ea90 0f01 	teqeq	r0, r1
 8000d82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_ui2f>:
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e004      	b.n	8000d98 <__aeabi_i2f+0x8>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_i2f>:
 8000d90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d94:	bf48      	it	mi
 8000d96:	4240      	negmi	r0, r0
 8000d98:	ea5f 0c00 	movs.w	ip, r0
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000da4:	4601      	mov	r1, r0
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	e01c      	b.n	8000de6 <__aeabi_l2f+0x2a>

08000dac <__aeabi_ul2f>:
 8000dac:	ea50 0201 	orrs.w	r2, r0, r1
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e00a      	b.n	8000dd0 <__aeabi_l2f+0x14>
 8000dba:	bf00      	nop

08000dbc <__aeabi_l2f>:
 8000dbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dc8:	d502      	bpl.n	8000dd0 <__aeabi_l2f+0x14>
 8000dca:	4240      	negs	r0, r0
 8000dcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd0:	ea5f 0c01 	movs.w	ip, r1
 8000dd4:	bf02      	ittt	eq
 8000dd6:	4684      	moveq	ip, r0
 8000dd8:	4601      	moveq	r1, r0
 8000dda:	2000      	moveq	r0, #0
 8000ddc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000de0:	bf08      	it	eq
 8000de2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000de6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dea:	fabc f28c 	clz	r2, ip
 8000dee:	3a08      	subs	r2, #8
 8000df0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000df4:	db10      	blt.n	8000e18 <__aeabi_l2f+0x5c>
 8000df6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e00:	f1c2 0220 	rsb	r2, r2, #32
 8000e04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e08:	fa20 f202 	lsr.w	r2, r0, r2
 8000e0c:	eb43 0002 	adc.w	r0, r3, r2
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f102 0220 	add.w	r2, r2, #32
 8000e1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e20:	f1c2 0220 	rsb	r2, r2, #32
 8000e24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e28:	fa21 f202 	lsr.w	r2, r1, r2
 8000e2c:	eb43 0002 	adc.w	r0, r3, r2
 8000e30:	bf08      	it	eq
 8000e32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e36:	4770      	bx	lr

08000e38 <__aeabi_fmul>:
 8000e38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e40:	bf1e      	ittt	ne
 8000e42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e46:	ea92 0f0c 	teqne	r2, ip
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d06f      	beq.n	8000f30 <__aeabi_fmul+0xf8>
 8000e50:	441a      	add	r2, r3
 8000e52:	ea80 0c01 	eor.w	ip, r0, r1
 8000e56:	0240      	lsls	r0, r0, #9
 8000e58:	bf18      	it	ne
 8000e5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e5e:	d01e      	beq.n	8000e9e <__aeabi_fmul+0x66>
 8000e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e78:	bf3e      	ittt	cc
 8000e7a:	0049      	lslcc	r1, r1, #1
 8000e7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e80:	005b      	lslcc	r3, r3, #1
 8000e82:	ea40 0001 	orr.w	r0, r0, r1
 8000e86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e8a:	2afd      	cmp	r2, #253	; 0xfd
 8000e8c:	d81d      	bhi.n	8000eca <__aeabi_fmul+0x92>
 8000e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e96:	bf08      	it	eq
 8000e98:	f020 0001 	biceq.w	r0, r0, #1
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea6:	bf08      	it	eq
 8000ea8:	0249      	lsleq	r1, r1, #9
 8000eaa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000eb2:	3a7f      	subs	r2, #127	; 0x7f
 8000eb4:	bfc2      	ittt	gt
 8000eb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ebe:	4770      	bxgt	lr
 8000ec0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	3a01      	subs	r2, #1
 8000eca:	dc5d      	bgt.n	8000f88 <__aeabi_fmul+0x150>
 8000ecc:	f112 0f19 	cmn.w	r2, #25
 8000ed0:	bfdc      	itt	le
 8000ed2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ed6:	4770      	bxle	lr
 8000ed8:	f1c2 0200 	rsb	r2, r2, #0
 8000edc:	0041      	lsls	r1, r0, #1
 8000ede:	fa21 f102 	lsr.w	r1, r1, r2
 8000ee2:	f1c2 0220 	rsb	r2, r2, #32
 8000ee6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eee:	f140 0000 	adc.w	r0, r0, #0
 8000ef2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ef6:	bf08      	it	eq
 8000ef8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000efc:	4770      	bx	lr
 8000efe:	f092 0f00 	teq	r2, #0
 8000f02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0040      	lsleq	r0, r0, #1
 8000f0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0e:	3a01      	subeq	r2, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fmul+0xce>
 8000f12:	ea40 000c 	orr.w	r0, r0, ip
 8000f16:	f093 0f00 	teq	r3, #0
 8000f1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0049      	lsleq	r1, r1, #1
 8000f22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f26:	3b01      	subeq	r3, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fmul+0xe6>
 8000f2a:	ea41 010c 	orr.w	r1, r1, ip
 8000f2e:	e78f      	b.n	8000e50 <__aeabi_fmul+0x18>
 8000f30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f34:	ea92 0f0c 	teq	r2, ip
 8000f38:	bf18      	it	ne
 8000f3a:	ea93 0f0c 	teqne	r3, ip
 8000f3e:	d00a      	beq.n	8000f56 <__aeabi_fmul+0x11e>
 8000f40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f44:	bf18      	it	ne
 8000f46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	d1d8      	bne.n	8000efe <__aeabi_fmul+0xc6>
 8000f4c:	ea80 0001 	eor.w	r0, r0, r1
 8000f50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f54:	4770      	bx	lr
 8000f56:	f090 0f00 	teq	r0, #0
 8000f5a:	bf17      	itett	ne
 8000f5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f60:	4608      	moveq	r0, r1
 8000f62:	f091 0f00 	teqne	r1, #0
 8000f66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f6a:	d014      	beq.n	8000f96 <__aeabi_fmul+0x15e>
 8000f6c:	ea92 0f0c 	teq	r2, ip
 8000f70:	d101      	bne.n	8000f76 <__aeabi_fmul+0x13e>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d10f      	bne.n	8000f96 <__aeabi_fmul+0x15e>
 8000f76:	ea93 0f0c 	teq	r3, ip
 8000f7a:	d103      	bne.n	8000f84 <__aeabi_fmul+0x14c>
 8000f7c:	024b      	lsls	r3, r1, #9
 8000f7e:	bf18      	it	ne
 8000f80:	4608      	movne	r0, r1
 8000f82:	d108      	bne.n	8000f96 <__aeabi_fmul+0x15e>
 8000f84:	ea80 0001 	eor.w	r0, r0, r1
 8000f88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f94:	4770      	bx	lr
 8000f96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f9e:	4770      	bx	lr

08000fa0 <__aeabi_fdiv>:
 8000fa0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fa4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fa8:	bf1e      	ittt	ne
 8000faa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fae:	ea92 0f0c 	teqne	r2, ip
 8000fb2:	ea93 0f0c 	teqne	r3, ip
 8000fb6:	d069      	beq.n	800108c <__aeabi_fdiv+0xec>
 8000fb8:	eba2 0203 	sub.w	r2, r2, r3
 8000fbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000fc0:	0249      	lsls	r1, r1, #9
 8000fc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fc6:	d037      	beq.n	8001038 <__aeabi_fdiv+0x98>
 8000fc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fcc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	bf38      	it	cc
 8000fdc:	005b      	lslcc	r3, r3, #1
 8000fde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fe2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	bf24      	itt	cs
 8000fea:	1a5b      	subcs	r3, r3, r1
 8000fec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ff0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ffa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ffe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001002:	bf24      	itt	cs
 8001004:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001008:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800100c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001010:	bf24      	itt	cs
 8001012:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001016:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	bf18      	it	ne
 800101e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001022:	d1e0      	bne.n	8000fe6 <__aeabi_fdiv+0x46>
 8001024:	2afd      	cmp	r2, #253	; 0xfd
 8001026:	f63f af50 	bhi.w	8000eca <__aeabi_fmul+0x92>
 800102a:	428b      	cmp	r3, r1
 800102c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001030:	bf08      	it	eq
 8001032:	f020 0001 	biceq.w	r0, r0, #1
 8001036:	4770      	bx	lr
 8001038:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800103c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001040:	327f      	adds	r2, #127	; 0x7f
 8001042:	bfc2      	ittt	gt
 8001044:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001048:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800104c:	4770      	bxgt	lr
 800104e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	3a01      	subs	r2, #1
 8001058:	e737      	b.n	8000eca <__aeabi_fmul+0x92>
 800105a:	f092 0f00 	teq	r2, #0
 800105e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001062:	bf02      	ittt	eq
 8001064:	0040      	lsleq	r0, r0, #1
 8001066:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800106a:	3a01      	subeq	r2, #1
 800106c:	d0f9      	beq.n	8001062 <__aeabi_fdiv+0xc2>
 800106e:	ea40 000c 	orr.w	r0, r0, ip
 8001072:	f093 0f00 	teq	r3, #0
 8001076:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800107a:	bf02      	ittt	eq
 800107c:	0049      	lsleq	r1, r1, #1
 800107e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001082:	3b01      	subeq	r3, #1
 8001084:	d0f9      	beq.n	800107a <__aeabi_fdiv+0xda>
 8001086:	ea41 010c 	orr.w	r1, r1, ip
 800108a:	e795      	b.n	8000fb8 <__aeabi_fdiv+0x18>
 800108c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001090:	ea92 0f0c 	teq	r2, ip
 8001094:	d108      	bne.n	80010a8 <__aeabi_fdiv+0x108>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	f47f af7d 	bne.w	8000f96 <__aeabi_fmul+0x15e>
 800109c:	ea93 0f0c 	teq	r3, ip
 80010a0:	f47f af70 	bne.w	8000f84 <__aeabi_fmul+0x14c>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e776      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010a8:	ea93 0f0c 	teq	r3, ip
 80010ac:	d104      	bne.n	80010b8 <__aeabi_fdiv+0x118>
 80010ae:	024b      	lsls	r3, r1, #9
 80010b0:	f43f af4c 	beq.w	8000f4c <__aeabi_fmul+0x114>
 80010b4:	4608      	mov	r0, r1
 80010b6:	e76e      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010bc:	bf18      	it	ne
 80010be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010c2:	d1ca      	bne.n	800105a <__aeabi_fdiv+0xba>
 80010c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010c8:	f47f af5c 	bne.w	8000f84 <__aeabi_fmul+0x14c>
 80010cc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010d0:	f47f af3c 	bne.w	8000f4c <__aeabi_fmul+0x114>
 80010d4:	e75f      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010d6:	bf00      	nop

080010d8 <__gesf2>:
 80010d8:	f04f 3cff 	mov.w	ip, #4294967295
 80010dc:	e006      	b.n	80010ec <__cmpsf2+0x4>
 80010de:	bf00      	nop

080010e0 <__lesf2>:
 80010e0:	f04f 0c01 	mov.w	ip, #1
 80010e4:	e002      	b.n	80010ec <__cmpsf2+0x4>
 80010e6:	bf00      	nop

080010e8 <__cmpsf2>:
 80010e8:	f04f 0c01 	mov.w	ip, #1
 80010ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010fc:	bf18      	it	ne
 80010fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001102:	d011      	beq.n	8001128 <__cmpsf2+0x40>
 8001104:	b001      	add	sp, #4
 8001106:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800110a:	bf18      	it	ne
 800110c:	ea90 0f01 	teqne	r0, r1
 8001110:	bf58      	it	pl
 8001112:	ebb2 0003 	subspl.w	r0, r2, r3
 8001116:	bf88      	it	hi
 8001118:	17c8      	asrhi	r0, r1, #31
 800111a:	bf38      	it	cc
 800111c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001120:	bf18      	it	ne
 8001122:	f040 0001 	orrne.w	r0, r0, #1
 8001126:	4770      	bx	lr
 8001128:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800112c:	d102      	bne.n	8001134 <__cmpsf2+0x4c>
 800112e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001132:	d105      	bne.n	8001140 <__cmpsf2+0x58>
 8001134:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001138:	d1e4      	bne.n	8001104 <__cmpsf2+0x1c>
 800113a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800113e:	d0e1      	beq.n	8001104 <__cmpsf2+0x1c>
 8001140:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <__aeabi_cfrcmple>:
 8001148:	4684      	mov	ip, r0
 800114a:	4608      	mov	r0, r1
 800114c:	4661      	mov	r1, ip
 800114e:	e7ff      	b.n	8001150 <__aeabi_cfcmpeq>

08001150 <__aeabi_cfcmpeq>:
 8001150:	b50f      	push	{r0, r1, r2, r3, lr}
 8001152:	f7ff ffc9 	bl	80010e8 <__cmpsf2>
 8001156:	2800      	cmp	r0, #0
 8001158:	bf48      	it	mi
 800115a:	f110 0f00 	cmnmi.w	r0, #0
 800115e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001160 <__aeabi_fcmpeq>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff fff4 	bl	8001150 <__aeabi_cfcmpeq>
 8001168:	bf0c      	ite	eq
 800116a:	2001      	moveq	r0, #1
 800116c:	2000      	movne	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmplt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffea 	bl	8001150 <__aeabi_cfcmpeq>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmple>:
 8001188:	f84d ed08 	str.w	lr, [sp, #-8]!
 800118c:	f7ff ffe0 	bl	8001150 <__aeabi_cfcmpeq>
 8001190:	bf94      	ite	ls
 8001192:	2001      	movls	r0, #1
 8001194:	2000      	movhi	r0, #0
 8001196:	f85d fb08 	ldr.w	pc, [sp], #8
 800119a:	bf00      	nop

0800119c <__aeabi_fcmpge>:
 800119c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a0:	f7ff ffd2 	bl	8001148 <__aeabi_cfrcmple>
 80011a4:	bf94      	ite	ls
 80011a6:	2001      	movls	r0, #1
 80011a8:	2000      	movhi	r0, #0
 80011aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ae:	bf00      	nop

080011b0 <__aeabi_fcmpgt>:
 80011b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b4:	f7ff ffc8 	bl	8001148 <__aeabi_cfrcmple>
 80011b8:	bf34      	ite	cc
 80011ba:	2001      	movcc	r0, #1
 80011bc:	2000      	movcs	r0, #0
 80011be:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c2:	bf00      	nop

080011c4 <__aeabi_f2iz>:
 80011c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011cc:	d30f      	bcc.n	80011ee <__aeabi_f2iz+0x2a>
 80011ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011d6:	d90d      	bls.n	80011f4 <__aeabi_f2iz+0x30>
 80011d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011e4:	fa23 f002 	lsr.w	r0, r3, r2
 80011e8:	bf18      	it	ne
 80011ea:	4240      	negne	r0, r0
 80011ec:	4770      	bx	lr
 80011ee:	f04f 0000 	mov.w	r0, #0
 80011f2:	4770      	bx	lr
 80011f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011f8:	d101      	bne.n	80011fe <__aeabi_f2iz+0x3a>
 80011fa:	0242      	lsls	r2, r0, #9
 80011fc:	d105      	bne.n	800120a <__aeabi_f2iz+0x46>
 80011fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001202:	bf08      	it	eq
 8001204:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001208:	4770      	bx	lr
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	4770      	bx	lr

08001210 <__aeabi_f2uiz>:
 8001210:	0042      	lsls	r2, r0, #1
 8001212:	d20e      	bcs.n	8001232 <__aeabi_f2uiz+0x22>
 8001214:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001218:	d30b      	bcc.n	8001232 <__aeabi_f2uiz+0x22>
 800121a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800121e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001222:	d409      	bmi.n	8001238 <__aeabi_f2uiz+0x28>
 8001224:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800122c:	fa23 f002 	lsr.w	r0, r3, r2
 8001230:	4770      	bx	lr
 8001232:	f04f 0000 	mov.w	r0, #0
 8001236:	4770      	bx	lr
 8001238:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800123c:	d101      	bne.n	8001242 <__aeabi_f2uiz+0x32>
 800123e:	0242      	lsls	r2, r0, #9
 8001240:	d102      	bne.n	8001248 <__aeabi_f2uiz+0x38>
 8001242:	f04f 30ff 	mov.w	r0, #4294967295
 8001246:	4770      	bx	lr
 8001248:	f04f 0000 	mov.w	r0, #0
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <__aeabi_uldivmod>:
 8001250:	b953      	cbnz	r3, 8001268 <__aeabi_uldivmod+0x18>
 8001252:	b94a      	cbnz	r2, 8001268 <__aeabi_uldivmod+0x18>
 8001254:	2900      	cmp	r1, #0
 8001256:	bf08      	it	eq
 8001258:	2800      	cmpeq	r0, #0
 800125a:	bf1c      	itt	ne
 800125c:	f04f 31ff 	movne.w	r1, #4294967295
 8001260:	f04f 30ff 	movne.w	r0, #4294967295
 8001264:	f000 b976 	b.w	8001554 <__aeabi_idiv0>
 8001268:	f1ad 0c08 	sub.w	ip, sp, #8
 800126c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001270:	f000 f806 	bl	8001280 <__udivmoddi4>
 8001274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800127c:	b004      	add	sp, #16
 800127e:	4770      	bx	lr

08001280 <__udivmoddi4>:
 8001280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001284:	9e08      	ldr	r6, [sp, #32]
 8001286:	460d      	mov	r5, r1
 8001288:	4604      	mov	r4, r0
 800128a:	4688      	mov	r8, r1
 800128c:	2b00      	cmp	r3, #0
 800128e:	d14d      	bne.n	800132c <__udivmoddi4+0xac>
 8001290:	428a      	cmp	r2, r1
 8001292:	4694      	mov	ip, r2
 8001294:	d968      	bls.n	8001368 <__udivmoddi4+0xe8>
 8001296:	fab2 f282 	clz	r2, r2
 800129a:	b152      	cbz	r2, 80012b2 <__udivmoddi4+0x32>
 800129c:	fa01 f302 	lsl.w	r3, r1, r2
 80012a0:	f1c2 0120 	rsb	r1, r2, #32
 80012a4:	fa20 f101 	lsr.w	r1, r0, r1
 80012a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ac:	ea41 0803 	orr.w	r8, r1, r3
 80012b0:	4094      	lsls	r4, r2
 80012b2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80012b6:	fbb8 f7f1 	udiv	r7, r8, r1
 80012ba:	fa1f fe8c 	uxth.w	lr, ip
 80012be:	fb01 8817 	mls	r8, r1, r7, r8
 80012c2:	fb07 f00e 	mul.w	r0, r7, lr
 80012c6:	0c23      	lsrs	r3, r4, #16
 80012c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80012cc:	4298      	cmp	r0, r3
 80012ce:	d90a      	bls.n	80012e6 <__udivmoddi4+0x66>
 80012d0:	eb1c 0303 	adds.w	r3, ip, r3
 80012d4:	f107 35ff 	add.w	r5, r7, #4294967295
 80012d8:	f080 811e 	bcs.w	8001518 <__udivmoddi4+0x298>
 80012dc:	4298      	cmp	r0, r3
 80012de:	f240 811b 	bls.w	8001518 <__udivmoddi4+0x298>
 80012e2:	3f02      	subs	r7, #2
 80012e4:	4463      	add	r3, ip
 80012e6:	1a1b      	subs	r3, r3, r0
 80012e8:	fbb3 f0f1 	udiv	r0, r3, r1
 80012ec:	fb01 3310 	mls	r3, r1, r0, r3
 80012f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80012f4:	b2a4      	uxth	r4, r4
 80012f6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012fa:	45a6      	cmp	lr, r4
 80012fc:	d90a      	bls.n	8001314 <__udivmoddi4+0x94>
 80012fe:	eb1c 0404 	adds.w	r4, ip, r4
 8001302:	f100 33ff 	add.w	r3, r0, #4294967295
 8001306:	f080 8109 	bcs.w	800151c <__udivmoddi4+0x29c>
 800130a:	45a6      	cmp	lr, r4
 800130c:	f240 8106 	bls.w	800151c <__udivmoddi4+0x29c>
 8001310:	4464      	add	r4, ip
 8001312:	3802      	subs	r0, #2
 8001314:	2100      	movs	r1, #0
 8001316:	eba4 040e 	sub.w	r4, r4, lr
 800131a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800131e:	b11e      	cbz	r6, 8001328 <__udivmoddi4+0xa8>
 8001320:	2300      	movs	r3, #0
 8001322:	40d4      	lsrs	r4, r2
 8001324:	e9c6 4300 	strd	r4, r3, [r6]
 8001328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800132c:	428b      	cmp	r3, r1
 800132e:	d908      	bls.n	8001342 <__udivmoddi4+0xc2>
 8001330:	2e00      	cmp	r6, #0
 8001332:	f000 80ee 	beq.w	8001512 <__udivmoddi4+0x292>
 8001336:	2100      	movs	r1, #0
 8001338:	e9c6 0500 	strd	r0, r5, [r6]
 800133c:	4608      	mov	r0, r1
 800133e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001342:	fab3 f183 	clz	r1, r3
 8001346:	2900      	cmp	r1, #0
 8001348:	d14a      	bne.n	80013e0 <__udivmoddi4+0x160>
 800134a:	42ab      	cmp	r3, r5
 800134c:	d302      	bcc.n	8001354 <__udivmoddi4+0xd4>
 800134e:	4282      	cmp	r2, r0
 8001350:	f200 80fc 	bhi.w	800154c <__udivmoddi4+0x2cc>
 8001354:	1a84      	subs	r4, r0, r2
 8001356:	eb65 0303 	sbc.w	r3, r5, r3
 800135a:	2001      	movs	r0, #1
 800135c:	4698      	mov	r8, r3
 800135e:	2e00      	cmp	r6, #0
 8001360:	d0e2      	beq.n	8001328 <__udivmoddi4+0xa8>
 8001362:	e9c6 4800 	strd	r4, r8, [r6]
 8001366:	e7df      	b.n	8001328 <__udivmoddi4+0xa8>
 8001368:	b902      	cbnz	r2, 800136c <__udivmoddi4+0xec>
 800136a:	deff      	udf	#255	; 0xff
 800136c:	fab2 f282 	clz	r2, r2
 8001370:	2a00      	cmp	r2, #0
 8001372:	f040 8091 	bne.w	8001498 <__udivmoddi4+0x218>
 8001376:	eba1 000c 	sub.w	r0, r1, ip
 800137a:	2101      	movs	r1, #1
 800137c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001380:	fa1f fe8c 	uxth.w	lr, ip
 8001384:	fbb0 f3f7 	udiv	r3, r0, r7
 8001388:	fb07 0013 	mls	r0, r7, r3, r0
 800138c:	0c25      	lsrs	r5, r4, #16
 800138e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001392:	fb0e f003 	mul.w	r0, lr, r3
 8001396:	42a8      	cmp	r0, r5
 8001398:	d908      	bls.n	80013ac <__udivmoddi4+0x12c>
 800139a:	eb1c 0505 	adds.w	r5, ip, r5
 800139e:	f103 38ff 	add.w	r8, r3, #4294967295
 80013a2:	d202      	bcs.n	80013aa <__udivmoddi4+0x12a>
 80013a4:	42a8      	cmp	r0, r5
 80013a6:	f200 80ce 	bhi.w	8001546 <__udivmoddi4+0x2c6>
 80013aa:	4643      	mov	r3, r8
 80013ac:	1a2d      	subs	r5, r5, r0
 80013ae:	fbb5 f0f7 	udiv	r0, r5, r7
 80013b2:	fb07 5510 	mls	r5, r7, r0, r5
 80013b6:	fb0e fe00 	mul.w	lr, lr, r0
 80013ba:	b2a4      	uxth	r4, r4
 80013bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80013c0:	45a6      	cmp	lr, r4
 80013c2:	d908      	bls.n	80013d6 <__udivmoddi4+0x156>
 80013c4:	eb1c 0404 	adds.w	r4, ip, r4
 80013c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80013cc:	d202      	bcs.n	80013d4 <__udivmoddi4+0x154>
 80013ce:	45a6      	cmp	lr, r4
 80013d0:	f200 80b6 	bhi.w	8001540 <__udivmoddi4+0x2c0>
 80013d4:	4628      	mov	r0, r5
 80013d6:	eba4 040e 	sub.w	r4, r4, lr
 80013da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013de:	e79e      	b.n	800131e <__udivmoddi4+0x9e>
 80013e0:	f1c1 0720 	rsb	r7, r1, #32
 80013e4:	408b      	lsls	r3, r1
 80013e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80013ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80013ee:	fa25 fa07 	lsr.w	sl, r5, r7
 80013f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013f6:	fbba f8f9 	udiv	r8, sl, r9
 80013fa:	fa20 f307 	lsr.w	r3, r0, r7
 80013fe:	fb09 aa18 	mls	sl, r9, r8, sl
 8001402:	408d      	lsls	r5, r1
 8001404:	fa1f fe8c 	uxth.w	lr, ip
 8001408:	431d      	orrs	r5, r3
 800140a:	fa00 f301 	lsl.w	r3, r0, r1
 800140e:	fb08 f00e 	mul.w	r0, r8, lr
 8001412:	0c2c      	lsrs	r4, r5, #16
 8001414:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001418:	42a0      	cmp	r0, r4
 800141a:	fa02 f201 	lsl.w	r2, r2, r1
 800141e:	d90b      	bls.n	8001438 <__udivmoddi4+0x1b8>
 8001420:	eb1c 0404 	adds.w	r4, ip, r4
 8001424:	f108 3aff 	add.w	sl, r8, #4294967295
 8001428:	f080 8088 	bcs.w	800153c <__udivmoddi4+0x2bc>
 800142c:	42a0      	cmp	r0, r4
 800142e:	f240 8085 	bls.w	800153c <__udivmoddi4+0x2bc>
 8001432:	f1a8 0802 	sub.w	r8, r8, #2
 8001436:	4464      	add	r4, ip
 8001438:	1a24      	subs	r4, r4, r0
 800143a:	fbb4 f0f9 	udiv	r0, r4, r9
 800143e:	fb09 4410 	mls	r4, r9, r0, r4
 8001442:	fb00 fe0e 	mul.w	lr, r0, lr
 8001446:	b2ad      	uxth	r5, r5
 8001448:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800144c:	45a6      	cmp	lr, r4
 800144e:	d908      	bls.n	8001462 <__udivmoddi4+0x1e2>
 8001450:	eb1c 0404 	adds.w	r4, ip, r4
 8001454:	f100 35ff 	add.w	r5, r0, #4294967295
 8001458:	d26c      	bcs.n	8001534 <__udivmoddi4+0x2b4>
 800145a:	45a6      	cmp	lr, r4
 800145c:	d96a      	bls.n	8001534 <__udivmoddi4+0x2b4>
 800145e:	3802      	subs	r0, #2
 8001460:	4464      	add	r4, ip
 8001462:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001466:	fba0 9502 	umull	r9, r5, r0, r2
 800146a:	eba4 040e 	sub.w	r4, r4, lr
 800146e:	42ac      	cmp	r4, r5
 8001470:	46c8      	mov	r8, r9
 8001472:	46ae      	mov	lr, r5
 8001474:	d356      	bcc.n	8001524 <__udivmoddi4+0x2a4>
 8001476:	d053      	beq.n	8001520 <__udivmoddi4+0x2a0>
 8001478:	2e00      	cmp	r6, #0
 800147a:	d069      	beq.n	8001550 <__udivmoddi4+0x2d0>
 800147c:	ebb3 0208 	subs.w	r2, r3, r8
 8001480:	eb64 040e 	sbc.w	r4, r4, lr
 8001484:	fa22 f301 	lsr.w	r3, r2, r1
 8001488:	fa04 f707 	lsl.w	r7, r4, r7
 800148c:	431f      	orrs	r7, r3
 800148e:	40cc      	lsrs	r4, r1
 8001490:	e9c6 7400 	strd	r7, r4, [r6]
 8001494:	2100      	movs	r1, #0
 8001496:	e747      	b.n	8001328 <__udivmoddi4+0xa8>
 8001498:	fa0c fc02 	lsl.w	ip, ip, r2
 800149c:	f1c2 0120 	rsb	r1, r2, #32
 80014a0:	fa25 f301 	lsr.w	r3, r5, r1
 80014a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80014a8:	fa20 f101 	lsr.w	r1, r0, r1
 80014ac:	4095      	lsls	r5, r2
 80014ae:	430d      	orrs	r5, r1
 80014b0:	fbb3 f1f7 	udiv	r1, r3, r7
 80014b4:	fb07 3311 	mls	r3, r7, r1, r3
 80014b8:	fa1f fe8c 	uxth.w	lr, ip
 80014bc:	0c28      	lsrs	r0, r5, #16
 80014be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80014c2:	fb01 f30e 	mul.w	r3, r1, lr
 80014c6:	4283      	cmp	r3, r0
 80014c8:	fa04 f402 	lsl.w	r4, r4, r2
 80014cc:	d908      	bls.n	80014e0 <__udivmoddi4+0x260>
 80014ce:	eb1c 0000 	adds.w	r0, ip, r0
 80014d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80014d6:	d22f      	bcs.n	8001538 <__udivmoddi4+0x2b8>
 80014d8:	4283      	cmp	r3, r0
 80014da:	d92d      	bls.n	8001538 <__udivmoddi4+0x2b8>
 80014dc:	3902      	subs	r1, #2
 80014de:	4460      	add	r0, ip
 80014e0:	1ac0      	subs	r0, r0, r3
 80014e2:	fbb0 f3f7 	udiv	r3, r0, r7
 80014e6:	fb07 0013 	mls	r0, r7, r3, r0
 80014ea:	b2ad      	uxth	r5, r5
 80014ec:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014f0:	fb03 f00e 	mul.w	r0, r3, lr
 80014f4:	42a8      	cmp	r0, r5
 80014f6:	d908      	bls.n	800150a <__udivmoddi4+0x28a>
 80014f8:	eb1c 0505 	adds.w	r5, ip, r5
 80014fc:	f103 38ff 	add.w	r8, r3, #4294967295
 8001500:	d216      	bcs.n	8001530 <__udivmoddi4+0x2b0>
 8001502:	42a8      	cmp	r0, r5
 8001504:	d914      	bls.n	8001530 <__udivmoddi4+0x2b0>
 8001506:	3b02      	subs	r3, #2
 8001508:	4465      	add	r5, ip
 800150a:	1a28      	subs	r0, r5, r0
 800150c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001510:	e738      	b.n	8001384 <__udivmoddi4+0x104>
 8001512:	4631      	mov	r1, r6
 8001514:	4630      	mov	r0, r6
 8001516:	e707      	b.n	8001328 <__udivmoddi4+0xa8>
 8001518:	462f      	mov	r7, r5
 800151a:	e6e4      	b.n	80012e6 <__udivmoddi4+0x66>
 800151c:	4618      	mov	r0, r3
 800151e:	e6f9      	b.n	8001314 <__udivmoddi4+0x94>
 8001520:	454b      	cmp	r3, r9
 8001522:	d2a9      	bcs.n	8001478 <__udivmoddi4+0x1f8>
 8001524:	ebb9 0802 	subs.w	r8, r9, r2
 8001528:	eb65 0e0c 	sbc.w	lr, r5, ip
 800152c:	3801      	subs	r0, #1
 800152e:	e7a3      	b.n	8001478 <__udivmoddi4+0x1f8>
 8001530:	4643      	mov	r3, r8
 8001532:	e7ea      	b.n	800150a <__udivmoddi4+0x28a>
 8001534:	4628      	mov	r0, r5
 8001536:	e794      	b.n	8001462 <__udivmoddi4+0x1e2>
 8001538:	4641      	mov	r1, r8
 800153a:	e7d1      	b.n	80014e0 <__udivmoddi4+0x260>
 800153c:	46d0      	mov	r8, sl
 800153e:	e77b      	b.n	8001438 <__udivmoddi4+0x1b8>
 8001540:	4464      	add	r4, ip
 8001542:	3802      	subs	r0, #2
 8001544:	e747      	b.n	80013d6 <__udivmoddi4+0x156>
 8001546:	3b02      	subs	r3, #2
 8001548:	4465      	add	r5, ip
 800154a:	e72f      	b.n	80013ac <__udivmoddi4+0x12c>
 800154c:	4608      	mov	r0, r1
 800154e:	e706      	b.n	800135e <__udivmoddi4+0xde>
 8001550:	4631      	mov	r1, r6
 8001552:	e6e9      	b.n	8001328 <__udivmoddi4+0xa8>

08001554 <__aeabi_idiv0>:
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop

08001558 <Algo_Init>:
bool Algo_adjust_steppers_position(Mobj *stove);
void Algo_update_steppers_inPlace_flag(void);
void Algo_stoveInit(Mobj *stove);

void Algo_Init(void const * argument)
{
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	b0aa      	sub	sp, #168	; 0xa8
 800155c:	af04      	add	r7, sp, #16
 800155e:	6078      	str	r0, [r7, #4]
	static Mobj UFEC23;
	Algo_fill_state_functions();
 8001560:	f001 f958 	bl	8002814 <Algo_fill_state_functions>

	PARAMFILE_Init();
 8001564:	f002 f918 	bl	8003798 <PARAMFILE_Init>
	Algo_stoveInit(&UFEC23);
 8001568:	4839      	ldr	r0, [pc, #228]	; (8001650 <Algo_Init+0xf8>)
 800156a:	f000 f9d1 	bl	8001910 <Algo_stoveInit>
	Temperature_Init();
 800156e:	f002 fdbd 	bl	80040ec <Temperature_Init>
	ESPMANAGER_Init();
 8001572:	f001 fba7 	bl	8002cc4 <ESPMANAGER_Init>
	Particle_Init();
 8001576:	f002 faa9 	bl	8003acc <Particle_Init>


	// Print all parameters into the debug file
	for(uint32_t ix = 0; ix < PARAMFILE_GetParamEntryCount(); ix++)
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001580:	e038      	b.n	80015f4 <Algo_Init+0x9c>
	{
	  const PFL_SParameterItem* pParamItem = PARAMFILE_GetParamEntryByIndex(ix);
 8001582:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001586:	f002 f925 	bl	80037d4 <PARAMFILE_GetParamEntryByIndex>
 800158a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  if (pParamItem == NULL)
 800158e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001592:	2b00      	cmp	r3, #0
 8001594:	d028      	beq.n	80015e8 <Algo_Init+0x90>
		  continue;

	  char tmp[128+1];
	  int32_t s32Value;
	  PFL_GetValueInt32(&PARAMFILE_g_sHandle, pParamItem->szKey, &s32Value);
 8001596:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80015a0:	4619      	mov	r1, r3
 80015a2:	482c      	ldr	r0, [pc, #176]	; (8001654 <Algo_Init+0xfc>)
 80015a4:	f002 f9eb 	bl	800397e <PFL_GetValueInt32>
	  snprintf(tmp, sizeof(tmp), "%s | %d (default: %d, min: %d, max: %d)", pParamItem->szKey, (int)s32Value, (int)pParamItem->uType.sInt32.s32Default, (int)pParamItem->uType.sInt32.s32Min, (int)pParamItem->uType.sInt32.s32Max);
 80015a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ac:	681d      	ldr	r5, [r3, #0]
 80015ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80015b6:	6912      	ldr	r2, [r2, #16]
 80015b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80015bc:	6949      	ldr	r1, [r1, #20]
 80015be:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80015c2:	6980      	ldr	r0, [r0, #24]
 80015c4:	f107 0408 	add.w	r4, r7, #8
 80015c8:	9003      	str	r0, [sp, #12]
 80015ca:	9102      	str	r1, [sp, #8]
 80015cc:	9201      	str	r2, [sp, #4]
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	462b      	mov	r3, r5
 80015d2:	4a21      	ldr	r2, [pc, #132]	; (8001658 <Algo_Init+0x100>)
 80015d4:	2181      	movs	r1, #129	; 0x81
 80015d6:	4620      	mov	r0, r4
 80015d8:	f00e fbf4 	bl	800fdc4 <sniprintf>
	  printf(tmp);
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	4618      	mov	r0, r3
 80015e2:	f00e fbc3 	bl	800fd6c <iprintf>
 80015e6:	e000      	b.n	80015ea <Algo_Init+0x92>
		  continue;
 80015e8:	bf00      	nop
	for(uint32_t ix = 0; ix < PARAMFILE_GetParamEntryCount(); ix++)
 80015ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015ee:	3301      	adds	r3, #1
 80015f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015f4:	f002 f8e4 	bl	80037c0 <PARAMFILE_GetParamEntryCount>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015fe:	4293      	cmp	r3, r2
 8001600:	d3bf      	bcc.n	8001582 <Algo_Init+0x2a>
	}


    for(;;)
    {
    	GPIOManager(&UFEC23,osKernelSysTick());
 8001602:	f00a fbb4 	bl	800bd6e <osKernelSysTick>
 8001606:	4603      	mov	r3, r0
 8001608:	4619      	mov	r1, r3
 800160a:	4811      	ldr	r0, [pc, #68]	; (8001650 <Algo_Init+0xf8>)
 800160c:	f001 fcb4 	bl	8002f78 <GPIOManager>
    	TemperatureManager(&UFEC23,osKernelSysTick());
 8001610:	f00a fbad 	bl	800bd6e <osKernelSysTick>
 8001614:	4603      	mov	r3, r0
 8001616:	4619      	mov	r1, r3
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <Algo_Init+0xf8>)
 800161a:	f002 fd99 	bl	8004150 <TemperatureManager>
    	DebugManager(&UFEC23,osKernelSysTick());
 800161e:	f00a fba6 	bl	800bd6e <osKernelSysTick>
 8001622:	4603      	mov	r3, r0
 8001624:	4619      	mov	r1, r3
 8001626:	480a      	ldr	r0, [pc, #40]	; (8001650 <Algo_Init+0xf8>)
 8001628:	f001 f9cc 	bl	80029c4 <DebugManager>
    	//ESPMANAGER_Task();
    	ParticlesManager(osKernelSysTick());
 800162c:	f00a fb9f 	bl	800bd6e <osKernelSysTick>
 8001630:	4603      	mov	r3, r0
 8001632:	4618      	mov	r0, r3
 8001634:	f002 fa8c 	bl	8003b50 <ParticlesManager>
    	Algo_task(&UFEC23, osKernelSysTick());
 8001638:	f00a fb99 	bl	800bd6e <osKernelSysTick>
 800163c:	4603      	mov	r3, r0
 800163e:	4619      	mov	r1, r3
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <Algo_Init+0xf8>)
 8001642:	f000 f80b 	bl	800165c <Algo_task>
    	osDelay(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f00a fbed 	bl	800be26 <osDelay>
    	GPIOManager(&UFEC23,osKernelSysTick());
 800164c:	e7d9      	b.n	8001602 <Algo_Init+0xaa>
 800164e:	bf00      	nop
 8001650:	20000340 	.word	0x20000340
 8001654:	20000f24 	.word	0x20000f24
 8001658:	08012e50 	.word	0x08012e50

0800165c <Algo_task>:
    }

}

void Algo_task(Mobj *stove, uint32_t u32CurrentTime_ms)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
	const PF_UsrParam* UsrParam =  PB_GetUserParam();
 8001666:	f002 f8df 	bl	8003828 <PB_GetUserParam>
 800166a:	60f8      	str	r0, [r7, #12]
	const PF_OverHeat_Thresholds_t* OvrhtParams = PB_GetOverheatParams();
 800166c:	f002 f8e6 	bl	800383c <PB_GetOverheatParams>
 8001670:	60b8      	str	r0, [r7, #8]

	Algo_update_steppers_inPlace_flag();
 8001672:	f001 f941 	bl	80028f8 <Algo_update_steppers_inPlace_flag>

	if((currentState != MANUAL_CONTROL) && UsrParam->s32ManualOverride == 1)
 8001676:	4b85      	ldr	r3, [pc, #532]	; (800188c <Algo_task+0x230>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b0a      	cmp	r3, #10
 800167c:	d007      	beq.n	800168e <Algo_task+0x32>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d103      	bne.n	800168e <Algo_task+0x32>
	{
		nextState = MANUAL_CONTROL;
 8001686:	4b82      	ldr	r3, [pc, #520]	; (8001890 <Algo_task+0x234>)
 8001688:	220a      	movs	r2, #10
 800168a:	701a      	strb	r2, [r3, #0]
 800168c:	e0c6      	b.n	800181c <Algo_task+0x1c0>
	}
	else if((currentState != SAFETY) && stove->bSafetyOn)
 800168e:	4b7f      	ldr	r3, [pc, #508]	; (800188c <Algo_task+0x230>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b09      	cmp	r3, #9
 8001694:	d008      	beq.n	80016a8 <Algo_task+0x4c>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <Algo_task+0x4c>
	{
		nextState = SAFETY;
 80016a0:	4b7b      	ldr	r3, [pc, #492]	; (8001890 <Algo_task+0x234>)
 80016a2:	2209      	movs	r2, #9
 80016a4:	701a      	strb	r2, [r3, #0]
 80016a6:	e0b9      	b.n	800181c <Algo_task+0x1c0>
	}
	else if((currentState != OVERTEMP) && (currentState != SAFETY) && (
 80016a8:	4b78      	ldr	r3, [pc, #480]	; (800188c <Algo_task+0x230>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d034      	beq.n	800171a <Algo_task+0xbe>
 80016b0:	4b76      	ldr	r3, [pc, #472]	; (800188c <Algo_task+0x230>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d030      	beq.n	800171a <Algo_task+0xbe>
			(stove->fBaffleTemp > P2F(OvrhtParams->OverheatBaffle))  ||
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69dc      	ldr	r4, [r3, #28]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fb65 	bl	8000d90 <__aeabi_i2f>
 80016c6:	4603      	mov	r3, r0
	else if((currentState != OVERTEMP) && (currentState != SAFETY) && (
 80016c8:	4619      	mov	r1, r3
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff fd70 	bl	80011b0 <__aeabi_fcmpgt>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d11d      	bne.n	8001712 <Algo_task+0xb6>
			(stove->fChamberTemp > P2F(OvrhtParams->OverheatChamber)) ||
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1c      	ldr	r4, [r3, #32]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fb56 	bl	8000d90 <__aeabi_i2f>
 80016e4:	4603      	mov	r3, r0
			(stove->fBaffleTemp > P2F(OvrhtParams->OverheatBaffle))  ||
 80016e6:	4619      	mov	r1, r3
 80016e8:	4620      	mov	r0, r4
 80016ea:	f7ff fd61 	bl	80011b0 <__aeabi_fcmpgt>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10e      	bne.n	8001712 <Algo_task+0xb6>
			(stove->fPlenumTemp > P2F(OvrhtParams->OverheatPlenum))) )
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb47 	bl	8000d90 <__aeabi_i2f>
 8001702:	4603      	mov	r3, r0
			(stove->fChamberTemp > P2F(OvrhtParams->OverheatChamber)) ||
 8001704:	4619      	mov	r1, r3
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff fd52 	bl	80011b0 <__aeabi_fcmpgt>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <Algo_task+0xbe>
	{
		nextState = OVERTEMP;
 8001712:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <Algo_task+0x234>)
 8001714:	2208      	movs	r2, #8
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	e080      	b.n	800181c <Algo_task+0x1c0>
	}
	else if(stove->bstateJustChanged) // If first loop in state, perform entry action
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01e      	beq.n	8001762 <Algo_task+0x106>
	{
		stove->u32TimeOfStateEntry_ms = u32CurrentTime_ms;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	639a      	str	r2, [r3, #56]	; 0x38
		stove->bstateJustChanged = false;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		if(AlgoStateEntryAction[currentState] != NULL)
 8001732:	4b56      	ldr	r3, [pc, #344]	; (800188c <Algo_task+0x230>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b56      	ldr	r3, [pc, #344]	; (8001894 <Algo_task+0x238>)
 800173a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d06c      	beq.n	800181c <Algo_task+0x1c0>
		{
			AlgoStateEntryAction[currentState](stove, sStateParams[currentState]);
 8001742:	4b52      	ldr	r3, [pc, #328]	; (800188c <Algo_task+0x230>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	4b52      	ldr	r3, [pc, #328]	; (8001894 <Algo_task+0x238>)
 800174a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174e:	4a4f      	ldr	r2, [pc, #316]	; (800188c <Algo_task+0x230>)
 8001750:	7812      	ldrb	r2, [r2, #0]
 8001752:	4611      	mov	r1, r2
 8001754:	4a50      	ldr	r2, [pc, #320]	; (8001898 <Algo_task+0x23c>)
 8001756:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800175a:	4611      	mov	r1, r2
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	4798      	blx	r3
 8001760:	e05c      	b.n	800181c <Algo_task+0x1c0>
		}

	}
	else // When we get here, check if it's time to compute an adjustment
	{
		if((u32CurrentTime_ms - stove->u32TimeOfComputation_ms) > UsrParam->s32TimeBetweenComputations_ms)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	6992      	ldr	r2, [r2, #24]
 800176e:	4293      	cmp	r3, r2
 8001770:	d939      	bls.n	80017e6 <Algo_task+0x18a>
		{
			Temperature_update_deltaT(stove,(u32CurrentTime_ms - stove->u32TimeOfComputation_ms));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	4619      	mov	r1, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f002 fe9d 	bl	80044bc <Temperature_update_deltaT>
			if((u32CurrentTime_ms - stove->u32TimeOfStateEntry_ms) > SECONDS(sStateParams[currentState]->i32EntryWaitTimeSeconds))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	4a40      	ldr	r2, [pc, #256]	; (800188c <Algo_task+0x230>)
 800178c:	7812      	ldrb	r2, [r2, #0]
 800178e:	4611      	mov	r1, r2
 8001790:	4a41      	ldr	r2, [pc, #260]	; (8001898 <Algo_task+0x23c>)
 8001792:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001796:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001798:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800179c:	fb01 f202 	mul.w	r2, r1, r2
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d916      	bls.n	80017d2 <Algo_task+0x176>
			{
				if(AlgoComputeAdjustment[currentState] != NULL)
 80017a4:	4b39      	ldr	r3, [pc, #228]	; (800188c <Algo_task+0x230>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b3c      	ldr	r3, [pc, #240]	; (800189c <Algo_task+0x240>)
 80017ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00e      	beq.n	80017d2 <Algo_task+0x176>
				{
					AlgoComputeAdjustment[currentState](stove, sStateParams[currentState], u32CurrentTime_ms);
 80017b4:	4b35      	ldr	r3, [pc, #212]	; (800188c <Algo_task+0x230>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <Algo_task+0x240>)
 80017bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c0:	4a32      	ldr	r2, [pc, #200]	; (800188c <Algo_task+0x230>)
 80017c2:	7812      	ldrb	r2, [r2, #0]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4a34      	ldr	r2, [pc, #208]	; (8001898 <Algo_task+0x23c>)
 80017c8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	4798      	blx	r3
				}
			}
			stove->u32TimeOfComputation_ms = u32CurrentTime_ms;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44
			PrintOutput(stove, nextState);
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <Algo_task+0x234>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f001 f908 	bl	80029f4 <PrintOutput>
 80017e4:	e01a      	b.n	800181c <Algo_task+0x1c0>
		}else if(currentState == MANUAL_CONTROL) // If in manual control, we don't wait the computation time
 80017e6:	4b29      	ldr	r3, [pc, #164]	; (800188c <Algo_task+0x230>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b0a      	cmp	r3, #10
 80017ec:	d116      	bne.n	800181c <Algo_task+0x1c0>
		{										// But we still loop in the first 'if' once per computation period (to print output)
			if(AlgoComputeAdjustment[currentState] != NULL)
 80017ee:	4b27      	ldr	r3, [pc, #156]	; (800188c <Algo_task+0x230>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b29      	ldr	r3, [pc, #164]	; (800189c <Algo_task+0x240>)
 80017f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00e      	beq.n	800181c <Algo_task+0x1c0>
			{
				AlgoComputeAdjustment[currentState](stove, sStateParams[currentState], u32CurrentTime_ms);
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <Algo_task+0x230>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <Algo_task+0x240>)
 8001806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180a:	4a20      	ldr	r2, [pc, #128]	; (800188c <Algo_task+0x230>)
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	4611      	mov	r1, r2
 8001810:	4a21      	ldr	r2, [pc, #132]	; (8001898 <Algo_task+0x23c>)
 8001812:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
			}
		}
	}

	if(bStepperAdjustmentNeeded) // If an adjustment is requested, send configs to motors
 800181c:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <Algo_task+0x244>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d048      	beq.n	80018b6 <Algo_task+0x25a>
	{

		if(Algo_adjust_steppers_position(stove))
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f001 f87d 	bl	8002924 <Algo_adjust_steppers_position>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d042      	beq.n	80018b6 <Algo_task+0x25a>
		{
			stove->sPrimary.i8aperturePosSteps = RANGE(PF_PRIMARY_MINIMUM_OPENING,stove->sPrimary.i8apertureCmdSteps,PF_PRIMARY_FULL_OPEN);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f993 3000 	ldrsb.w	r3, [r3]
 8001836:	2b05      	cmp	r3, #5
 8001838:	dd07      	ble.n	800184a <Algo_task+0x1ee>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f993 3000 	ldrsb.w	r3, [r3]
 8001840:	2b61      	cmp	r3, #97	; 0x61
 8001842:	bfa8      	it	ge
 8001844:	2361      	movge	r3, #97	; 0x61
 8001846:	b25a      	sxtb	r2, r3
 8001848:	e000      	b.n	800184c <Algo_task+0x1f0>
 800184a:	2206      	movs	r2, #6
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	705a      	strb	r2, [r3, #1]
			stove->sGrill.i8aperturePosSteps = RANGE(PF_GRILL_MINIMUM_OPENING,stove->sGrill.i8apertureCmdSteps,PF_GRILL_FULL_OPEN);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	db07      	blt.n	800186a <Algo_task+0x20e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001860:	2b61      	cmp	r3, #97	; 0x61
 8001862:	bfa8      	it	ge
 8001864:	2361      	movge	r3, #97	; 0x61
 8001866:	b25a      	sxtb	r2, r3
 8001868:	e000      	b.n	800186c <Algo_task+0x210>
 800186a:	2200      	movs	r2, #0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	725a      	strb	r2, [r3, #9]
			stove->sSecondary.i8aperturePosSteps = RANGE(PF_SECONDARY_MINIMUM_OPENING,stove->sSecondary.i8apertureCmdSteps,PF_SECONDARY_FULL_OPEN);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001876:	2b05      	cmp	r3, #5
 8001878:	dd14      	ble.n	80018a4 <Algo_task+0x248>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001880:	2b61      	cmp	r3, #97	; 0x61
 8001882:	bfa8      	it	ge
 8001884:	2361      	movge	r3, #97	; 0x61
 8001886:	b25a      	sxtb	r2, r3
 8001888:	e00d      	b.n	80018a6 <Algo_task+0x24a>
 800188a:	bf00      	nop
 800188c:	20000256 	.word	0x20000256
 8001890:	20000258 	.word	0x20000258
 8001894:	20000288 	.word	0x20000288
 8001898:	200002b4 	.word	0x200002b4
 800189c:	2000025c 	.word	0x2000025c
 80018a0:	20000255 	.word	0x20000255
 80018a4:	2206      	movs	r2, #6
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	745a      	strb	r2, [r3, #17]

			bStepperAdjustmentNeeded = false;
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <Algo_task+0x2a4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
			stove->u32TimeOfAdjustment_ms = u32CurrentTime_ms;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}

	if(nextState != currentState) // Perform state change if requested
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <Algo_task+0x2a8>)
 80018b8:	781a      	ldrb	r2, [r3, #0]
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <Algo_task+0x2ac>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d01a      	beq.n	80018f8 <Algo_task+0x29c>
	{
		lastState = currentState;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <Algo_task+0x2ac>)
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <Algo_task+0x2b0>)
 80018c8:	701a      	strb	r2, [r3, #0]
		currentState = nextState;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <Algo_task+0x2a8>)
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <Algo_task+0x2ac>)
 80018d0:	701a      	strb	r2, [r3, #0]
		stove->bstateJustChanged = true;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		if((nextState == COMBUSTION_HIGH || nextState == COMBUSTION_LOW) && stove->u32TimeSinceCombEntry_ms == 0)
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <Algo_task+0x2a8>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d003      	beq.n	80018ea <Algo_task+0x28e>
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <Algo_task+0x2a8>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d106      	bne.n	80018f8 <Algo_task+0x29c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <Algo_task+0x29c>
		{
			stove->u32TimeSinceCombEntry_ms = u32CurrentTime_ms;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}

}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd90      	pop	{r4, r7, pc}
 8001900:	20000255 	.word	0x20000255
 8001904:	20000258 	.word	0x20000258
 8001908:	20000256 	.word	0x20000256
 800190c:	20000257 	.word	0x20000257

08001910 <Algo_stoveInit>:

void Algo_stoveInit(Mobj *stove)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	stove->sParticles = ParticlesGetObject(); // Get pointer to particles Structure
 8001918:	f002 fbde 	bl	80040d8 <ParticlesGetObject>
 800191c:	4602      	mov	r2, r0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	619a      	str	r2, [r3, #24]
	sOverheatParams = PB_GetOverheatParams();
 8001922:	f001 ff8b 	bl	800383c <PB_GetOverheatParams>
 8001926:	4603      	mov	r3, r0
 8001928:	4a29      	ldr	r2, [pc, #164]	; (80019d0 <Algo_stoveInit+0xc0>)
 800192a:	6013      	str	r3, [r2, #0]
	sStateParams[WAITING] = PB_GetWaitingParams();
 800192c:	f001 ff90 	bl	8003850 <PB_GetWaitingParams>
 8001930:	4603      	mov	r3, r0
 8001932:	4a28      	ldr	r2, [pc, #160]	; (80019d4 <Algo_stoveInit+0xc4>)
 8001934:	6053      	str	r3, [r2, #4]
	sStateParams[RELOAD_IGNITION] = PB_GetReloadParams();
 8001936:	f001 ff95 	bl	8003864 <PB_GetReloadParams>
 800193a:	4603      	mov	r3, r0
 800193c:	4a25      	ldr	r2, [pc, #148]	; (80019d4 <Algo_stoveInit+0xc4>)
 800193e:	6093      	str	r3, [r2, #8]
	sStateParams[TEMPERATURE_RISE] = PB_GetTRiseParams();
 8001940:	f001 ff9a 	bl	8003878 <PB_GetTRiseParams>
 8001944:	4603      	mov	r3, r0
 8001946:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <Algo_stoveInit+0xc4>)
 8001948:	60d3      	str	r3, [r2, #12]
	sStateParams[COMBUSTION_LOW] = PB_GetCombLowParams();
 800194a:	f001 ff9f 	bl	800388c <PB_GetCombLowParams>
 800194e:	4603      	mov	r3, r0
 8001950:	4a20      	ldr	r2, [pc, #128]	; (80019d4 <Algo_stoveInit+0xc4>)
 8001952:	6153      	str	r3, [r2, #20]
	sStateParams[COMBUSTION_HIGH] = PB_GetCombHighParams();
 8001954:	f001 ffa4 	bl	80038a0 <PB_GetCombHighParams>
 8001958:	4603      	mov	r3, r0
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <Algo_stoveInit+0xc4>)
 800195c:	6113      	str	r3, [r2, #16]
	sStateParams[COAL_LOW] = PB_GetCoalLowParams();
 800195e:	f001 ffa9 	bl	80038b4 <PB_GetCoalLowParams>
 8001962:	4603      	mov	r3, r0
 8001964:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <Algo_stoveInit+0xc4>)
 8001966:	6193      	str	r3, [r2, #24]
	sStateParams[COAL_HIGH] = PB_GetCoalHighParams();
 8001968:	f001 ffae 	bl	80038c8 <PB_GetCoalHighParams>
 800196c:	4603      	mov	r3, r0
 800196e:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <Algo_stoveInit+0xc4>)
 8001970:	61d3      	str	r3, [r2, #28]

	sStatedummy.i32EntryWaitTimeSeconds = 0;
 8001972:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <Algo_stoveInit+0xc8>)
 8001974:	2200      	movs	r2, #0
 8001976:	649a      	str	r2, [r3, #72]	; 0x48

	sStateParams[ZEROING_STEPPER] = &sStatedummy;
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <Algo_stoveInit+0xc4>)
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <Algo_stoveInit+0xc8>)
 800197c:	601a      	str	r2, [r3, #0]
	sStateParams[OVERTEMP] = &sStatedummy;
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <Algo_stoveInit+0xc4>)
 8001980:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <Algo_stoveInit+0xc8>)
 8001982:	621a      	str	r2, [r3, #32]
	sStateParams[SAFETY] = &sStatedummy;
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <Algo_stoveInit+0xc4>)
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <Algo_stoveInit+0xc8>)
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
	sStateParams[MANUAL_CONTROL] = &sStatedummy;
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <Algo_stoveInit+0xc4>)
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <Algo_stoveInit+0xc8>)
 800198e:	629a      	str	r2, [r3, #40]	; 0x28

	stove->u32TimeOfStateEntry_ms = 0;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
	stove->u32TimeOfAdjustment_ms = 0;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	641a      	str	r2, [r3, #64]	; 0x40
	stove->u32TimeOfComputation_ms = 0;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	645a      	str	r2, [r3, #68]	; 0x44
	stove->u32TimeSinceCombEntry_ms = 0;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	63da      	str	r2, [r3, #60]	; 0x3c
	stove->bReloadRequested = false;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	stove->bstateJustChanged = true;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	stove->bSafetyOn = false;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	stove->TimeOfReloadRequest = 0;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000033c 	.word	0x2000033c
 80019d4:	200002b4 	.word	0x200002b4
 80019d8:	200002e0 	.word	0x200002e0

080019dc <Algo_zeroing_entry>:
///////////////////////// STATE MACHINE  //////////////////////////////////////////////////////////////////////


//** STATE: ZEROING STEPPER **//
static void Algo_zeroing_entry(Mobj *stove,const  PF_StateParam_t* sParams)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	stove->sPrimary.i8apertureCmdSteps = 0;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
	stove->sPrimary.fSecPerStep = 0;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
	stove->sGrill.i8apertureCmdSteps = 0;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	721a      	strb	r2, [r3, #8]
	stove->sGrill.fSecPerStep = 0;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
	stove->sSecondary.i8apertureCmdSteps = 0;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	741a      	strb	r2, [r3, #16]
	stove->sSecondary.fSecPerStep = 0;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
	bStepperAdjustmentNeeded = true;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <Algo_zeroing_entry+0x44>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	20000255 	.word	0x20000255

08001a24 <Algo_zeroing_action>:

static void Algo_zeroing_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]

	if(motors_ready_for_req)
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <Algo_zeroing_action+0x24>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <Algo_zeroing_action+0x1a>
	{
		nextState = WAITING;
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <Algo_zeroing_action+0x28>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
	}
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	20000254 	.word	0x20000254
 8001a4c:	20000258 	.word	0x20000258

08001a50 <Algo_waiting_entry>:
//** END: ZEROING STEPPER **//

//** STATE: WAITING **//
static void Algo_waiting_entry(Mobj *stove,const  PF_StateParam_t* sParams)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	if((stove->fBaffleTemp > P2F(sParams->sTemperature.fAbsMaxDiff)))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69dc      	ldr	r4, [r3, #28]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f994 	bl	8000d90 <__aeabi_i2f>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f7ff fb9f 	bl	80011b0 <__aeabi_fcmpgt>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d100      	bne.n	8001a7a <Algo_waiting_entry+0x2a>
	{
		nextState = TEMPERATURE_RISE;
	}

}
 8001a78:	e002      	b.n	8001a80 <Algo_waiting_entry+0x30>
		nextState = TEMPERATURE_RISE;
 8001a7a:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <Algo_waiting_entry+0x38>)
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	701a      	strb	r2, [r3, #0]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	20000258 	.word	0x20000258

08001a8c <Algo_Waiting_action>:

static void Algo_Waiting_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	if(!stove->bInterlockOn)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a9e:	f083 0301 	eor.w	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d019      	beq.n	8001adc <Algo_Waiting_action+0x50>
	{
		if((stove->fBaffleTemp > P2F(sParams->sTemperature.fTarget)) || stove->bReloadRequested)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	69dc      	ldr	r4, [r3, #28]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f96d 	bl	8000d90 <__aeabi_i2f>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff fb78 	bl	80011b0 <__aeabi_fcmpgt>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d104      	bne.n	8001ad0 <Algo_Waiting_action+0x44>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <Algo_Waiting_action+0x50>
		{
			nextState = RELOAD_IGNITION;
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <Algo_Waiting_action+0x58>)
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	701a      	strb	r2, [r3, #0]
			stove->TimeOfReloadRequest = u32CurrentTime_ms;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	64da      	str	r2, [r3, #76]	; 0x4c
		}
	}

}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd90      	pop	{r4, r7, pc}
 8001ae4:	20000258 	.word	0x20000258

08001ae8 <Algo_reload_entry>:
//** END: ZEROING STEPPER **//

//** STATE: RELOAD / IGNITION **//
static void Algo_reload_entry(Mobj* stove,const  PF_StateParam_t* sParams)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	stove->u32TimeSinceCombEntry_ms = 0;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	63da      	str	r2, [r3, #60]	; 0x3c

	stove->sPrimary.i8apertureCmdSteps = sParams->sPrimary.i32Max;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	b25a      	sxtb	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	701a      	strb	r2, [r3, #0]
	stove->sPrimary.fSecPerStep = 0; // force aperture
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	605a      	str	r2, [r3, #4]
	stove->sGrill.i8apertureCmdSteps = sParams->sGrill.i32Max;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	b25a      	sxtb	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	721a      	strb	r2, [r3, #8]
	stove->sGrill.fSecPerStep = 0; // force aperture
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
	stove->sSecondary.i8apertureCmdSteps = sParams->sSecondary.i32Max;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b20:	b25a      	sxtb	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	741a      	strb	r2, [r3, #16]
	stove->sSecondary.fSecPerStep = 0; // force aperture
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	615a      	str	r2, [r3, #20]
	bStepperAdjustmentNeeded = true;
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <Algo_reload_entry+0x7c>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]

	if((stove->fBaffleTemp > P2F(sParams->sTemperature.fAbsMaxDiff)))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69dc      	ldr	r4, [r3, #28]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff f927 	bl	8000d90 <__aeabi_i2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4619      	mov	r1, r3
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff fb32 	bl	80011b0 <__aeabi_fcmpgt>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d100      	bne.n	8001b54 <Algo_reload_entry+0x6c>
	{
		nextState = TEMPERATURE_RISE;
	}

}
 8001b52:	e002      	b.n	8001b5a <Algo_reload_entry+0x72>
		nextState = TEMPERATURE_RISE;
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <Algo_reload_entry+0x80>)
 8001b56:	2203      	movs	r2, #3
 8001b58:	701a      	strb	r2, [r3, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd90      	pop	{r4, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000255 	.word	0x20000255
 8001b68:	20000258 	.word	0x20000258

08001b6c <Algo_reload_action>:

static void Algo_reload_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]

	if((stove->fBaffleTemp > P2F(sParams->sTemperature.fTarget)))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	69dc      	ldr	r4, [r3, #28]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f905 	bl	8000d90 <__aeabi_i2f>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff fb10 	bl	80011b0 <__aeabi_fcmpgt>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d100      	bne.n	8001b98 <Algo_reload_action+0x2c>
	{
		nextState = TEMPERATURE_RISE;
	}
}
 8001b96:	e002      	b.n	8001b9e <Algo_reload_action+0x32>
		nextState = TEMPERATURE_RISE;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <Algo_reload_action+0x3c>)
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	701a      	strb	r2, [r3, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000258 	.word	0x20000258

08001bac <Algo_tempRise_entry>:
//** END: RELOAD / IGNITION**//


//** STATE: TEMPERATURE RISE **//
static void Algo_tempRise_entry(Mobj* stove,const  PF_StateParam_t* sParams)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	stove->u32TimeSinceCombEntry_ms = 0;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c

	stove->sPrimary.i8apertureCmdSteps = sParams->sPrimary.i32Max;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	b25a      	sxtb	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	701a      	strb	r2, [r3, #0]
	stove->sPrimary.fSecPerStep = 0; // force aperture
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	605a      	str	r2, [r3, #4]
	stove->sGrill.i8apertureCmdSteps = sParams->sGrill.i32Max;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	b25a      	sxtb	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	721a      	strb	r2, [r3, #8]
	stove->sGrill.fSecPerStep = 0; // force aperture
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
	stove->sSecondary.i8apertureCmdSteps = sParams->sSecondary.i32Max;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be4:	b25a      	sxtb	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	741a      	strb	r2, [r3, #16]
	stove->sSecondary.fSecPerStep = 0; // force aperture
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
	bStepperAdjustmentNeeded = true;
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <Algo_tempRise_entry+0x58>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000255 	.word	0x20000255

08001c08 <Algo_tempRise_action>:

static void Algo_tempRise_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8001c08:	b5b0      	push	{r4, r5, r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
	static uint32_t u32TimeOfMajorCorr = 0;
	const PF_StepperStepsPerSec_t *sSpeedParams =  PB_SpeedParams();
 8001c14:	f001 fe62 	bl	80038dc <PB_SpeedParams>
 8001c18:	6178      	str	r0, [r7, #20]

	if((stove->bThermostatOn && stove->fBaffleTemp > sParams->sTemperature.fAbsMaxDiff) ||	//2023-08-11: if hot enough, go to comb states
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00e      	beq.n	8001c42 <Algo_tempRise_action+0x3a>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	69dc      	ldr	r4, [r3, #28]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f8af 	bl	8000d90 <__aeabi_i2f>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4619      	mov	r1, r3
 8001c36:	4620      	mov	r0, r4
 8001c38:	f7ff faba 	bl	80011b0 <__aeabi_fcmpgt>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d116      	bne.n	8001c70 <Algo_tempRise_action+0x68>
			(!stove->bThermostatOn && stove->fBaffleTemp > sParams->sTemperature.fTarget))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c48:	f083 0301 	eor.w	r3, r3, #1
 8001c4c:	b2db      	uxtb	r3, r3
	if((stove->bThermostatOn && stove->fBaffleTemp > sParams->sTemperature.fAbsMaxDiff) ||	//2023-08-11: if hot enough, go to comb states
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d019      	beq.n	8001c86 <Algo_tempRise_action+0x7e>
			(!stove->bThermostatOn && stove->fBaffleTemp > sParams->sTemperature.fTarget))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	69dc      	ldr	r4, [r3, #28]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f898 	bl	8000d90 <__aeabi_i2f>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4619      	mov	r1, r3
 8001c64:	4620      	mov	r0, r4
 8001c66:	f7ff faa3 	bl	80011b0 <__aeabi_fcmpgt>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00a      	beq.n	8001c86 <Algo_tempRise_action+0x7e>
	{
		nextState = stove->bThermostatOn ? COMBUSTION_HIGH : COMBUSTION_LOW;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <Algo_tempRise_action+0x76>
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	e000      	b.n	8001c80 <Algo_tempRise_action+0x78>
 8001c7e:	2205      	movs	r2, #5
 8001c80:	4b83      	ldr	r3, [pc, #524]	; (8001e90 <Algo_tempRise_action+0x288>)
 8001c82:	701a      	strb	r2, [r3, #0]
		return;
 8001c84:	e100      	b.n	8001e88 <Algo_tempRise_action+0x280>
	}

	// Case(s) we want to wait
	if((u32TimeOfMajorCorr != 0 && (u32CurrentTime_ms - u32TimeOfMajorCorr < MINUTES(1))) || 	// We just made a correction
 8001c86:	4b83      	ldr	r3, [pc, #524]	; (8001e94 <Algo_tempRise_action+0x28c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <Algo_tempRise_action+0x98>
 8001c8e:	4b81      	ldr	r3, [pc, #516]	; (8001e94 <Algo_tempRise_action+0x28c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	f240 80f3 	bls.w	8001e86 <Algo_tempRise_action+0x27e>
			(stove->fBaffleDeltaT < (P2F1DEC(sParams->sTempSlope.fTarget - sParams->sTempSlope.fTolerance)))) // Temperature rises abnormally slow
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f871 	bl	8000d90 <__aeabi_i2f>
 8001cae:	4605      	mov	r5, r0
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	4a78      	ldr	r2, [pc, #480]	; (8001e98 <Algo_tempRise_action+0x290>)
 8001cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cba:	1092      	asrs	r2, r2, #2
 8001cbc:	17db      	asrs	r3, r3, #31
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f865 	bl	8000d90 <__aeabi_i2f>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4628      	mov	r0, r5
 8001ccc:	f7fe ffaa 	bl	8000c24 <__aeabi_fsub>
 8001cd0:	4603      	mov	r3, r0
	if((u32TimeOfMajorCorr != 0 && (u32CurrentTime_ms - u32TimeOfMajorCorr < MINUTES(1))) || 	// We just made a correction
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	f7ff fa4d 	bl	8001174 <__aeabi_fcmplt>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 80d2 	bne.w	8001e86 <Algo_tempRise_action+0x27e>
	{
		return;
	}

	if(stove->fBaffleTemp >P2F(sParams->i32FreeParam1)) // Here, i32FreeParam1 -> Temp to start regulating with particles
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	69dc      	ldr	r4, [r3, #28]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f850 	bl	8000d90 <__aeabi_i2f>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f7ff fa5b 	bl	80011b0 <__aeabi_fcmpgt>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d077      	beq.n	8001df0 <Algo_tempRise_action+0x1e8>
	{
		if((stove->sParticles->fparticles) > (P2F(sParams->sParticles.fTarget + sParams->sParticles.fAbsMaxDiff)) &&
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	695c      	ldr	r4, [r3, #20]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f840 	bl	8000d90 <__aeabi_i2f>
 8001d10:	4605      	mov	r5, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f83a 	bl	8000d90 <__aeabi_i2f>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4628      	mov	r0, r5
 8001d22:	f7fe ff81 	bl	8000c28 <__addsf3>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f7ff fa40 	bl	80011b0 <__aeabi_fcmpgt>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d05c      	beq.n	8001df0 <Algo_tempRise_action+0x1e8>
				(stove->fBaffleDeltaT > (P2F1DEC(sParams->sTempSlope.fTarget + sParams->sTempSlope.fTolerance))))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f826 	bl	8000d90 <__aeabi_i2f>
 8001d44:	4605      	mov	r5, r0
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	4a53      	ldr	r2, [pc, #332]	; (8001e98 <Algo_tempRise_action+0x290>)
 8001d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d50:	1092      	asrs	r2, r2, #2
 8001d52:	17db      	asrs	r3, r3, #31
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f81a 	bl	8000d90 <__aeabi_i2f>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4628      	mov	r0, r5
 8001d62:	f7fe ff61 	bl	8000c28 <__addsf3>
 8001d66:	4603      	mov	r3, r0
		if((stove->sParticles->fparticles) > (P2F(sParams->sParticles.fTarget + sParams->sParticles.fAbsMaxDiff)) &&
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7ff fa20 	bl	80011b0 <__aeabi_fcmpgt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d03c      	beq.n	8001df0 <Algo_tempRise_action+0x1e8>
		{
			if(stove->sGrill.i8apertureCmdSteps > 15)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001d7c:	2b0f      	cmp	r3, #15
 8001d7e:	dd0d      	ble.n	8001d9c <Algo_tempRise_action+0x194>
			{
				stove->sGrill.i8apertureCmdSteps /= 2;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001d86:	0fda      	lsrs	r2, r3, #31
 8001d88:	4413      	add	r3, r2
 8001d8a:	105b      	asrs	r3, r3, #1
 8001d8c:	b25a      	sxtb	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	721a      	strb	r2, [r3, #8]
				stove->sGrill.fSecPerStep = 0;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	e022      	b.n	8001de2 <Algo_tempRise_action+0x1da>
			}
			else if(stove->sGrill.i8apertureCmdSteps > sParams->sGrill.i32Min)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	429a      	cmp	r2, r3
 8001daa:	dd09      	ble.n	8001dc0 <Algo_tempRise_action+0x1b8>
			{
				stove->sGrill.i8apertureCmdSteps = sParams->sGrill.i32Min;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db0:	b25a      	sxtb	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	721a      	strb	r2, [r3, #8]
				stove->sGrill.fSecPerStep = 0;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	e010      	b.n	8001de2 <Algo_tempRise_action+0x1da>
			}
			else
			{
				stove->sPrimary.i8apertureCmdSteps = 75;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	224b      	movs	r2, #75	; 0x4b
 8001dc4:	701a      	strb	r2, [r3, #0]
				stove->sPrimary.fSecPerStep = 0;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	605a      	str	r2, [r3, #4]
				nextState = stove->bThermostatOn ? COMBUSTION_HIGH : COMBUSTION_LOW;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <Algo_tempRise_action+0x1d4>
 8001dd8:	2204      	movs	r2, #4
 8001dda:	e000      	b.n	8001dde <Algo_tempRise_action+0x1d6>
 8001ddc:	2205      	movs	r2, #5
 8001dde:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <Algo_tempRise_action+0x288>)
 8001de0:	701a      	strb	r2, [r3, #0]
			}



			bStepperAdjustmentNeeded = true;
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <Algo_tempRise_action+0x294>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
			u32TimeOfMajorCorr = u32CurrentTime_ms;
 8001de8:	4a2a      	ldr	r2, [pc, #168]	; (8001e94 <Algo_tempRise_action+0x28c>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
			return;
 8001dee:	e04b      	b.n	8001e88 <Algo_tempRise_action+0x280>
		}
	}

	if(motors_ready_for_req)
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <Algo_tempRise_action+0x298>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d047      	beq.n	8001e88 <Algo_tempRise_action+0x280>
	{
		if(stove->sGrill.i8apertureCmdSteps > sParams->sGrill.i32Min)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	429a      	cmp	r2, r3
 8001e06:	dd17      	ble.n	8001e38 <Algo_tempRise_action+0x230>
		{
			stove->sGrill.i8apertureCmdSteps--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	b25a      	sxtb	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	721a      	strb	r2, [r3, #8]
			stove->sGrill.fSecPerStep = P2F1DEC(sSpeedParams->fFast);
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe ffb6 	bl	8000d90 <__aeabi_i2f>
 8001e24:	4603      	mov	r3, r0
 8001e26:	491f      	ldr	r1, [pc, #124]	; (8001ea4 <Algo_tempRise_action+0x29c>)
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f8b9 	bl	8000fa0 <__aeabi_fdiv>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	e022      	b.n	8001e7e <Algo_tempRise_action+0x276>
		}else
		{

			if(stove->sPrimary.i8apertureCmdSteps-- <= 75)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	3a01      	subs	r2, #1
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	b251      	sxtb	r1, r2
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	7011      	strb	r1, [r2, #0]
 8001e4a:	2b4b      	cmp	r3, #75	; 0x4b
 8001e4c:	dc09      	bgt.n	8001e62 <Algo_tempRise_action+0x25a>
			{
				nextState = stove->bThermostatOn ? COMBUSTION_HIGH : COMBUSTION_LOW;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <Algo_tempRise_action+0x254>
 8001e58:	2204      	movs	r2, #4
 8001e5a:	e000      	b.n	8001e5e <Algo_tempRise_action+0x256>
 8001e5c:	2205      	movs	r2, #5
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <Algo_tempRise_action+0x288>)
 8001e60:	701a      	strb	r2, [r3, #0]
			}
			stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fFast);
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe ff92 	bl	8000d90 <__aeabi_i2f>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	490d      	ldr	r1, [pc, #52]	; (8001ea4 <Algo_tempRise_action+0x29c>)
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f895 	bl	8000fa0 <__aeabi_fdiv>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	605a      	str	r2, [r3, #4]
		}

		bStepperAdjustmentNeeded = true;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <Algo_tempRise_action+0x294>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e000      	b.n	8001e88 <Algo_tempRise_action+0x280>
		return;
 8001e86:	bf00      	nop
	}


}
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000258 	.word	0x20000258
 8001e94:	20000390 	.word	0x20000390
 8001e98:	66666667 	.word	0x66666667
 8001e9c:	20000255 	.word	0x20000255
 8001ea0:	20000254 	.word	0x20000254
 8001ea4:	41200000 	.word	0x41200000

08001ea8 <Algo_combLow_entry>:
//** END: TEMPERATURE RISE **//


//** STATE: COMBUSTION LOW **//
static void Algo_combLow_entry(Mobj *stove,const  PF_StateParam_t* sParams)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
	stove->sPrimary.i8apertureCmdSteps = sParams->sPrimary.i32Max;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	b25a      	sxtb	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	701a      	strb	r2, [r3, #0]
	stove->sPrimary.fSecPerStep = 0; // force aperture
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	605a      	str	r2, [r3, #4]
	stove->sGrill.i8apertureCmdSteps = sParams->sGrill.i32Min;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	b25a      	sxtb	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	721a      	strb	r2, [r3, #8]
	stove->sGrill.fSecPerStep = 0; // force aperture
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
	stove->sSecondary.i8apertureCmdSteps = sParams->sSecondary.i32Max;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	b25a      	sxtb	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	741a      	strb	r2, [r3, #16]
	stove->sSecondary.fSecPerStep = 0; // force aperture
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
	bStepperAdjustmentNeeded = true;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <Algo_combLow_entry+0x50>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	20000255 	.word	0x20000255

08001efc <Algo_combLow_action>:

static void Algo_combLow_action(Mobj* stove, const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8001efc:	b5b0      	push	{r4, r5, r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
	static uint32_t u32MajorCorrectionTime_ms = 0;
	const PF_StepperStepsPerSec_t *sSpeedParams =  PB_SpeedParams();
 8001f08:	f001 fce8 	bl	80038dc <PB_SpeedParams>
 8001f0c:	6178      	str	r0, [r7, #20]

	if(stove->fBaffleTemp < P2F(sParams->sTemperature.fTarget - sParams->sTemperature.fTolerance))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	69dc      	ldr	r4, [r3, #28]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe ff3a 	bl	8000d90 <__aeabi_i2f>
 8001f1c:	4605      	mov	r5, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe ff34 	bl	8000d90 <__aeabi_i2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4628      	mov	r0, r5
 8001f2e:	f7fe fe79 	bl	8000c24 <__aeabi_fsub>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4619      	mov	r1, r3
 8001f36:	4620      	mov	r0, r4
 8001f38:	f7ff f91c 	bl	8001174 <__aeabi_fcmplt>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80f8 	beq.w	8002134 <Algo_combLow_action+0x238>
	{
		if((stove->fBaffleDeltaT < P2F1DEC(sParams->sTempSlope.fTarget - sParams->sTempSlope.fAbsMaxDiff)) ||
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe ff1f 	bl	8000d90 <__aeabi_i2f>
 8001f52:	4605      	mov	r5, r0
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	4a71      	ldr	r2, [pc, #452]	; (8002120 <Algo_combLow_action+0x224>)
 8001f5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f5e:	1092      	asrs	r2, r2, #2
 8001f60:	17db      	asrs	r3, r3, #31
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe ff13 	bl	8000d90 <__aeabi_i2f>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4628      	mov	r0, r5
 8001f70:	f7fe fe58 	bl	8000c24 <__aeabi_fsub>
 8001f74:	4603      	mov	r3, r0
 8001f76:	4619      	mov	r1, r3
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f7ff f8fb 	bl	8001174 <__aeabi_fcmplt>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d128      	bne.n	8001fd6 <Algo_combLow_action+0xda>
				((stove->sParticles->u16stDev > sParams->sPartStdev.fAbsMaxDiff) && stove->sParticles->fparticles > P2F1DEC(sParams->sParticles.fTarget + sParams->sParticles.fTolerance)))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	891b      	ldrh	r3, [r3, #8]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		if((stove->fBaffleDeltaT < P2F1DEC(sParams->sTempSlope.fTarget - sParams->sTempSlope.fAbsMaxDiff)) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dd4f      	ble.n	8002034 <Algo_combLow_action+0x138>
				((stove->sParticles->u16stDev > sParams->sPartStdev.fAbsMaxDiff) && stove->sParticles->fparticles > P2F1DEC(sParams->sParticles.fTarget + sParams->sParticles.fTolerance)))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	695c      	ldr	r4, [r3, #20]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fef6 	bl	8000d90 <__aeabi_i2f>
 8001fa4:	4605      	mov	r5, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a5d      	ldr	r2, [pc, #372]	; (8002120 <Algo_combLow_action+0x224>)
 8001fac:	fb82 1203 	smull	r1, r2, r2, r3
 8001fb0:	1092      	asrs	r2, r2, #2
 8001fb2:	17db      	asrs	r3, r3, #31
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe feea 	bl	8000d90 <__aeabi_i2f>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	f7fe fe31 	bl	8000c28 <__addsf3>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff f8f0 	bl	80011b0 <__aeabi_fcmpgt>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d02e      	beq.n	8002034 <Algo_combLow_action+0x138>
		{
			if(u32MajorCorrectionTime_ms - u32CurrentTime_ms > SECONDS(30))
 8001fd6:	4b53      	ldr	r3, [pc, #332]	; (8002124 <Algo_combLow_action+0x228>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f247 5230 	movw	r2, #30000	; 0x7530
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d926      	bls.n	8002034 <Algo_combLow_action+0x138>
			{
				if(stove->sPrimary.i8apertureCmdSteps *= 2 > sParams->sPrimary.i32Max)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f993 3000 	ldrsb.w	r3, [r3]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ff2:	2a01      	cmp	r2, #1
 8001ff4:	bfd4      	ite	le
 8001ff6:	2201      	movle	r2, #1
 8001ff8:	2200      	movgt	r2, #0
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	b25a      	sxtb	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f993 3000 	ldrsb.w	r3, [r3]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <Algo_combLow_action+0x122>
				{
					stove->sPrimary.i8apertureCmdSteps = sParams->sPrimary.i32Max;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	b25a      	sxtb	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	701a      	strb	r2, [r3, #0]
				}
				stove->sPrimary.fSecPerStep = 0; // force aperture
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	605a      	str	r2, [r3, #4]
				bStepperAdjustmentNeeded = true;
 8002026:	4b40      	ldr	r3, [pc, #256]	; (8002128 <Algo_combLow_action+0x22c>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]

				u32MajorCorrectionTime_ms = u32CurrentTime_ms;
 800202c:	4a3d      	ldr	r2, [pc, #244]	; (8002124 <Algo_combLow_action+0x228>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
				return;
 8002032:	e27b      	b.n	800252c <Algo_combLow_action+0x630>
			}
		}

		if(stove->fBaffleDeltaT < P2F1DEC(sParams->sTempSlope.fTarget - sParams->sTempSlope.fTolerance))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fea7 	bl	8000d90 <__aeabi_i2f>
 8002042:	4605      	mov	r5, r0
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a35      	ldr	r2, [pc, #212]	; (8002120 <Algo_combLow_action+0x224>)
 800204a:	fb82 1203 	smull	r1, r2, r2, r3
 800204e:	1092      	asrs	r2, r2, #2
 8002050:	17db      	asrs	r3, r3, #31
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fe9b 	bl	8000d90 <__aeabi_i2f>
 800205a:	4603      	mov	r3, r0
 800205c:	4619      	mov	r1, r3
 800205e:	4628      	mov	r0, r5
 8002060:	f7fe fde0 	bl	8000c24 <__aeabi_fsub>
 8002064:	4603      	mov	r3, r0
 8002066:	4619      	mov	r1, r3
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff f883 	bl	8001174 <__aeabi_fcmplt>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8208 	beq.w	8002486 <Algo_combLow_action+0x58a>
		{
			if(motors_ready_for_req || stove->sPrimary.fSecPerStep == P2F1DEC(sSpeedParams->fVerySlow))
 8002076:	4b2d      	ldr	r3, [pc, #180]	; (800212c <Algo_combLow_action+0x230>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d114      	bne.n	80020a8 <Algo_combLow_action+0x1ac>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	685c      	ldr	r4, [r3, #4]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fe82 	bl	8000d90 <__aeabi_i2f>
 800208c:	4603      	mov	r3, r0
 800208e:	4928      	ldr	r1, [pc, #160]	; (8002130 <Algo_combLow_action+0x234>)
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe ff85 	bl	8000fa0 <__aeabi_fdiv>
 8002096:	4603      	mov	r3, r0
 8002098:	4619      	mov	r1, r3
 800209a:	4620      	mov	r0, r4
 800209c:	f7ff f860 	bl	8001160 <__aeabi_fcmpeq>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 81ef 	beq.w	8002486 <Algo_combLow_action+0x58a>
			{
				if(stove->sPrimary.i8apertureCmdSteps++ > sParams->sPrimary.i32Max)//Open by one step
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f993 2000 	ldrsb.w	r2, [r3]
 80020ae:	b2d3      	uxtb	r3, r2
 80020b0:	3301      	adds	r3, #1
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	b259      	sxtb	r1, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	7019      	strb	r1, [r3, #0]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	429a      	cmp	r2, r3
 80020c0:	dd04      	ble.n	80020cc <Algo_combLow_action+0x1d0>
				{
					stove->sPrimary.i8apertureCmdSteps = sParams->sPrimary.i32Max;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	b25a      	sxtb	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	701a      	strb	r2, [r3, #0]
				}

				if(stove->sParticles->u16stDev > sParams->sPartStdev.fTolerance)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	891b      	ldrh	r3, [r3, #8]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	429a      	cmp	r2, r3
 80020da:	dd0e      	ble.n	80020fa <Algo_combLow_action+0x1fe>
				{
					stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fFast);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fe55 	bl	8000d90 <__aeabi_i2f>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4911      	ldr	r1, [pc, #68]	; (8002130 <Algo_combLow_action+0x234>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe ff58 	bl	8000fa0 <__aeabi_fdiv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	e00d      	b.n	8002116 <Algo_combLow_action+0x21a>
				}else
				{
					stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fNormal);
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fe46 	bl	8000d90 <__aeabi_i2f>
 8002104:	4603      	mov	r3, r0
 8002106:	490a      	ldr	r1, [pc, #40]	; (8002130 <Algo_combLow_action+0x234>)
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe ff49 	bl	8000fa0 <__aeabi_fdiv>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	605a      	str	r2, [r3, #4]
				}

				bStepperAdjustmentNeeded = true;
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <Algo_combLow_action+0x22c>)
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e1b3      	b.n	8002486 <Algo_combLow_action+0x58a>
 800211e:	bf00      	nop
 8002120:	66666667 	.word	0x66666667
 8002124:	20000394 	.word	0x20000394
 8002128:	20000255 	.word	0x20000255
 800212c:	20000254 	.word	0x20000254
 8002130:	41200000 	.word	0x41200000
			}

		}
	}else if(stove->fBaffleTemp < P2F(sParams->sTemperature.fTarget + sParams->sTemperature.fAbsMaxDiff))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	69dc      	ldr	r4, [r3, #28]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fe27 	bl	8000d90 <__aeabi_i2f>
 8002142:	4605      	mov	r5, r0
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fe21 	bl	8000d90 <__aeabi_i2f>
 800214e:	4603      	mov	r3, r0
 8002150:	4619      	mov	r1, r3
 8002152:	4628      	mov	r0, r5
 8002154:	f7fe fd68 	bl	8000c28 <__addsf3>
 8002158:	4603      	mov	r3, r0
 800215a:	4619      	mov	r1, r3
 800215c:	4620      	mov	r0, r4
 800215e:	f7ff f809 	bl	8001174 <__aeabi_fcmplt>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 808d 	beq.w	8002284 <Algo_combLow_action+0x388>
	{
		if(fabs(stove->fBaffleDeltaT) < P2F1DEC(sParams->sTempSlope.fTarget + sParams->sTempSlope.fTolerance))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fe0a 	bl	8000d90 <__aeabi_i2f>
 800217c:	4605      	mov	r5, r0
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	4a7b      	ldr	r2, [pc, #492]	; (8002370 <Algo_combLow_action+0x474>)
 8002184:	fb82 1203 	smull	r1, r2, r2, r3
 8002188:	1092      	asrs	r2, r2, #2
 800218a:	17db      	asrs	r3, r3, #31
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fdfe 	bl	8000d90 <__aeabi_i2f>
 8002194:	4603      	mov	r3, r0
 8002196:	4619      	mov	r1, r3
 8002198:	4628      	mov	r0, r5
 800219a:	f7fe fd45 	bl	8000c28 <__addsf3>
 800219e:	4603      	mov	r3, r0
 80021a0:	4619      	mov	r1, r3
 80021a2:	4620      	mov	r0, r4
 80021a4:	f7fe ffe6 	bl	8001174 <__aeabi_fcmplt>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 816b 	beq.w	8002486 <Algo_combLow_action+0x58a>
		{
			if(motors_ready_for_req)
 80021b0:	4b70      	ldr	r3, [pc, #448]	; (8002374 <Algo_combLow_action+0x478>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8166 	beq.w	8002486 <Algo_combLow_action+0x58a>
			{
				if(stove->sPrimary.i8apertureCmdSteps-- < sParams->sPrimary.i32Min)//Close by one step
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f993 2000 	ldrsb.w	r2, [r3]
 80021c0:	b2d3      	uxtb	r3, r2
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	b259      	sxtb	r1, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	7019      	strb	r1, [r3, #0]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	429a      	cmp	r2, r3
 80021d2:	da04      	bge.n	80021de <Algo_combLow_action+0x2e2>
				{
					stove->sPrimary.i8apertureCmdSteps = sParams->sPrimary.i32Min;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d8:	b25a      	sxtb	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	701a      	strb	r2, [r3, #0]
				}

				if(stove->sParticles->u16stDev > sParams->sPartStdev.fTolerance)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	891b      	ldrh	r3, [r3, #8]
 80021e4:	461a      	mov	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dd0e      	ble.n	800220c <Algo_combLow_action+0x310>
				{
					stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fNormal);
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fdcc 	bl	8000d90 <__aeabi_i2f>
 80021f8:	4603      	mov	r3, r0
 80021fa:	495f      	ldr	r1, [pc, #380]	; (8002378 <Algo_combLow_action+0x47c>)
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fecf 	bl	8000fa0 <__aeabi_fdiv>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	e037      	b.n	800227c <Algo_combLow_action+0x380>
				}else if(stove->sParticles->fparticles > P2F(sParams->sParticles.fTarget + sParams->sParticles.fTolerance))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	695c      	ldr	r4, [r3, #20]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe fdba 	bl	8000d90 <__aeabi_i2f>
 800221c:	4605      	mov	r5, r0
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fdb4 	bl	8000d90 <__aeabi_i2f>
 8002228:	4603      	mov	r3, r0
 800222a:	4619      	mov	r1, r3
 800222c:	4628      	mov	r0, r5
 800222e:	f7fe fcfb 	bl	8000c28 <__addsf3>
 8002232:	4603      	mov	r3, r0
 8002234:	4619      	mov	r1, r3
 8002236:	4620      	mov	r0, r4
 8002238:	f7fe ffba 	bl	80011b0 <__aeabi_fcmpgt>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00e      	beq.n	8002260 <Algo_combLow_action+0x364>
				{
					stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fSlow);
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fda2 	bl	8000d90 <__aeabi_i2f>
 800224c:	4603      	mov	r3, r0
 800224e:	494a      	ldr	r1, [pc, #296]	; (8002378 <Algo_combLow_action+0x47c>)
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe fea5 	bl	8000fa0 <__aeabi_fdiv>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	e00d      	b.n	800227c <Algo_combLow_action+0x380>
				}else
				{
					stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fVerySlow);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fd93 	bl	8000d90 <__aeabi_i2f>
 800226a:	4603      	mov	r3, r0
 800226c:	4942      	ldr	r1, [pc, #264]	; (8002378 <Algo_combLow_action+0x47c>)
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fe96 	bl	8000fa0 <__aeabi_fdiv>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	605a      	str	r2, [r3, #4]
				}


				bStepperAdjustmentNeeded = true;
 800227c:	4b3f      	ldr	r3, [pc, #252]	; (800237c <Algo_combLow_action+0x480>)
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	e100      	b.n	8002486 <Algo_combLow_action+0x58a>
			}

		}
	}else
	{
		if(stove->fBaffleDeltaT > P2F1DEC(sParams->sTempSlope.fTarget + sParams->sTempSlope.fAbsMaxDiff))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fd7f 	bl	8000d90 <__aeabi_i2f>
 8002292:	4605      	mov	r5, r0
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	4a35      	ldr	r2, [pc, #212]	; (8002370 <Algo_combLow_action+0x474>)
 800229a:	fb82 1203 	smull	r1, r2, r2, r3
 800229e:	1092      	asrs	r2, r2, #2
 80022a0:	17db      	asrs	r3, r3, #31
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fd73 	bl	8000d90 <__aeabi_i2f>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4619      	mov	r1, r3
 80022ae:	4628      	mov	r0, r5
 80022b0:	f7fe fcba 	bl	8000c28 <__addsf3>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4619      	mov	r1, r3
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7fe ff79 	bl	80011b0 <__aeabi_fcmpgt>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d06e      	beq.n	80023a2 <Algo_combLow_action+0x4a6>
		{
			if(motors_ready_for_req || (stove->sPrimary.fSecPerStep == P2F1DEC(sSpeedParams->fSlow)) || (stove->sPrimary.fSecPerStep == P2F1DEC(sSpeedParams->fVerySlow)))
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <Algo_combLow_action+0x478>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d127      	bne.n	800231c <Algo_combLow_action+0x420>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685c      	ldr	r4, [r3, #4]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe fd5b 	bl	8000d90 <__aeabi_i2f>
 80022da:	4603      	mov	r3, r0
 80022dc:	4926      	ldr	r1, [pc, #152]	; (8002378 <Algo_combLow_action+0x47c>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fe5e 	bl	8000fa0 <__aeabi_fdiv>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4619      	mov	r1, r3
 80022e8:	4620      	mov	r0, r4
 80022ea:	f7fe ff39 	bl	8001160 <__aeabi_fcmpeq>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d113      	bne.n	800231c <Algo_combLow_action+0x420>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685c      	ldr	r4, [r3, #4]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fd47 	bl	8000d90 <__aeabi_i2f>
 8002302:	4603      	mov	r3, r0
 8002304:	491c      	ldr	r1, [pc, #112]	; (8002378 <Algo_combLow_action+0x47c>)
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fe4a 	bl	8000fa0 <__aeabi_fdiv>
 800230c:	4603      	mov	r3, r0
 800230e:	4619      	mov	r1, r3
 8002310:	4620      	mov	r0, r4
 8002312:	f7fe ff25 	bl	8001160 <__aeabi_fcmpeq>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d042      	beq.n	80023a2 <Algo_combLow_action+0x4a6>
			{
				if(stove->sPrimary.i8apertureCmdSteps-- < sParams->sPrimary.i32Min)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f993 2000 	ldrsb.w	r2, [r3]
 8002322:	b2d3      	uxtb	r3, r2
 8002324:	3b01      	subs	r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	b259      	sxtb	r1, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	7019      	strb	r1, [r3, #0]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	429a      	cmp	r2, r3
 8002334:	da04      	bge.n	8002340 <Algo_combLow_action+0x444>
				{
					stove->sPrimary.i8apertureCmdSteps = sParams->sPrimary.i32Min;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	b25a      	sxtb	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	701a      	strb	r2, [r3, #0]
				}

				if(stove->sParticles->u16stDev > sParams->sPartStdev.fTolerance)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	891b      	ldrh	r3, [r3, #8]
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	429a      	cmp	r2, r3
 800234e:	dd17      	ble.n	8002380 <Algo_combLow_action+0x484>
				{
					stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fFast);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fd1b 	bl	8000d90 <__aeabi_i2f>
 800235a:	4603      	mov	r3, r0
 800235c:	4906      	ldr	r1, [pc, #24]	; (8002378 <Algo_combLow_action+0x47c>)
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fe1e 	bl	8000fa0 <__aeabi_fdiv>
 8002364:	4603      	mov	r3, r0
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	e016      	b.n	800239c <Algo_combLow_action+0x4a0>
 800236e:	bf00      	nop
 8002370:	66666667 	.word	0x66666667
 8002374:	20000254 	.word	0x20000254
 8002378:	41200000 	.word	0x41200000
 800237c:	20000255 	.word	0x20000255
				}else
				{
					stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fNormal);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fd03 	bl	8000d90 <__aeabi_i2f>
 800238a:	4603      	mov	r3, r0
 800238c:	4969      	ldr	r1, [pc, #420]	; (8002534 <Algo_combLow_action+0x638>)
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fe06 	bl	8000fa0 <__aeabi_fdiv>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]
				}

				bStepperAdjustmentNeeded = true;
 800239c:	4b66      	ldr	r3, [pc, #408]	; (8002538 <Algo_combLow_action+0x63c>)
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
			}
		}

		if(stove->fBaffleDeltaT > P2F1DEC(sParams->sTempSlope.fTarget - sParams->sTempSlope.fTolerance))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fcf0 	bl	8000d90 <__aeabi_i2f>
 80023b0:	4605      	mov	r5, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	4a61      	ldr	r2, [pc, #388]	; (800253c <Algo_combLow_action+0x640>)
 80023b8:	fb82 1203 	smull	r1, r2, r2, r3
 80023bc:	1092      	asrs	r2, r2, #2
 80023be:	17db      	asrs	r3, r3, #31
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fce4 	bl	8000d90 <__aeabi_i2f>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4619      	mov	r1, r3
 80023cc:	4628      	mov	r0, r5
 80023ce:	f7fe fc29 	bl	8000c24 <__aeabi_fsub>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4619      	mov	r1, r3
 80023d6:	4620      	mov	r0, r4
 80023d8:	f7fe feea 	bl	80011b0 <__aeabi_fcmpgt>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d051      	beq.n	8002486 <Algo_combLow_action+0x58a>
		{
			if(motors_ready_for_req || stove->sPrimary.fSecPerStep == P2F1DEC(sSpeedParams->fVerySlow))
 80023e2:	4b57      	ldr	r3, [pc, #348]	; (8002540 <Algo_combLow_action+0x644>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d113      	bne.n	8002412 <Algo_combLow_action+0x516>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	685c      	ldr	r4, [r3, #4]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fccc 	bl	8000d90 <__aeabi_i2f>
 80023f8:	4603      	mov	r3, r0
 80023fa:	494e      	ldr	r1, [pc, #312]	; (8002534 <Algo_combLow_action+0x638>)
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fdcf 	bl	8000fa0 <__aeabi_fdiv>
 8002402:	4603      	mov	r3, r0
 8002404:	4619      	mov	r1, r3
 8002406:	4620      	mov	r0, r4
 8002408:	f7fe feaa 	bl	8001160 <__aeabi_fcmpeq>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d039      	beq.n	8002486 <Algo_combLow_action+0x58a>
			{
				if(stove->sPrimary.i8apertureCmdSteps-- < sParams->sPrimary.i32Min)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f993 2000 	ldrsb.w	r2, [r3]
 8002418:	b2d3      	uxtb	r3, r2
 800241a:	3b01      	subs	r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	b259      	sxtb	r1, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	7019      	strb	r1, [r3, #0]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002428:	429a      	cmp	r2, r3
 800242a:	da04      	bge.n	8002436 <Algo_combLow_action+0x53a>
				{
					stove->sPrimary.i8apertureCmdSteps = sParams->sPrimary.i32Min;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002430:	b25a      	sxtb	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	701a      	strb	r2, [r3, #0]
				}

				if(stove->sParticles->u16stDev > sParams->sPartStdev.fTolerance)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	891b      	ldrh	r3, [r3, #8]
 800243c:	461a      	mov	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	429a      	cmp	r2, r3
 8002444:	dd0e      	ble.n	8002464 <Algo_combLow_action+0x568>
				{
					stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fFast);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fca0 	bl	8000d90 <__aeabi_i2f>
 8002450:	4603      	mov	r3, r0
 8002452:	4938      	ldr	r1, [pc, #224]	; (8002534 <Algo_combLow_action+0x638>)
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fda3 	bl	8000fa0 <__aeabi_fdiv>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	e00d      	b.n	8002480 <Algo_combLow_action+0x584>
				}else
				{
					stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fNormal);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fc91 	bl	8000d90 <__aeabi_i2f>
 800246e:	4603      	mov	r3, r0
 8002470:	4930      	ldr	r1, [pc, #192]	; (8002534 <Algo_combLow_action+0x638>)
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fd94 	bl	8000fa0 <__aeabi_fdiv>
 8002478:	4603      	mov	r3, r0
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
				}

				bStepperAdjustmentNeeded = true;
 8002480:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <Algo_combLow_action+0x63c>)
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
		}


	}

	if(u32CurrentTime_ms - stove->u32TimeSinceCombEntry_ms > MINUTES(sParams->i32MaximumTimeInStateMinutes) &&
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002492:	f64e 2160 	movw	r1, #60000	; 0xea60
 8002496:	fb01 f202 	mul.w	r2, r1, r2
 800249a:	4293      	cmp	r3, r2
 800249c:	d946      	bls.n	800252c <Algo_combLow_action+0x630>
			stove->fBaffleTemp < P2F(sParams->sTemperature.fTarget - 2*sParams->sTemperature.fAbsMaxDiff) &&
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	69dc      	ldr	r4, [r3, #28]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fc72 	bl	8000d90 <__aeabi_i2f>
 80024ac:	4605      	mov	r5, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fc6b 	bl	8000d90 <__aeabi_i2f>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4619      	mov	r1, r3
 80024be:	4628      	mov	r0, r5
 80024c0:	f7fe fbb0 	bl	8000c24 <__aeabi_fsub>
 80024c4:	4603      	mov	r3, r0
	if(u32CurrentTime_ms - stove->u32TimeSinceCombEntry_ms > MINUTES(sParams->i32MaximumTimeInStateMinutes) &&
 80024c6:	4619      	mov	r1, r3
 80024c8:	4620      	mov	r0, r4
 80024ca:	f7fe fe53 	bl	8001174 <__aeabi_fcmplt>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d02b      	beq.n	800252c <Algo_combLow_action+0x630>
			stove->sParticles->fparticles < P2F1DEC(sParams->sParticles.fTarget + sParams->sParticles.fTolerance) &&
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	695c      	ldr	r4, [r3, #20]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fc56 	bl	8000d90 <__aeabi_i2f>
 80024e4:	4605      	mov	r5, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a14      	ldr	r2, [pc, #80]	; (800253c <Algo_combLow_action+0x640>)
 80024ec:	fb82 1203 	smull	r1, r2, r2, r3
 80024f0:	1092      	asrs	r2, r2, #2
 80024f2:	17db      	asrs	r3, r3, #31
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fc4a 	bl	8000d90 <__aeabi_i2f>
 80024fc:	4603      	mov	r3, r0
 80024fe:	4619      	mov	r1, r3
 8002500:	4628      	mov	r0, r5
 8002502:	f7fe fb91 	bl	8000c28 <__addsf3>
 8002506:	4603      	mov	r3, r0
			stove->fBaffleTemp < P2F(sParams->sTemperature.fTarget - 2*sParams->sTemperature.fAbsMaxDiff) &&
 8002508:	4619      	mov	r1, r3
 800250a:	4620      	mov	r0, r4
 800250c:	f7fe fe32 	bl	8001174 <__aeabi_fcmplt>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <Algo_combLow_action+0x630>
			stove->sParticles->u16stDev < (uint32_t)sParams->sPartStdev.fTolerance)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	891b      	ldrh	r3, [r3, #8]
 800251c:	461a      	mov	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			stove->sParticles->fparticles < P2F1DEC(sParams->sParticles.fTarget + sParams->sParticles.fTolerance) &&
 8002522:	429a      	cmp	r2, r3
 8002524:	d202      	bcs.n	800252c <Algo_combLow_action+0x630>
	{

		nextState = COAL_LOW;
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <Algo_combLow_action+0x648>)
 8002528:	2206      	movs	r2, #6
 800252a:	701a      	strb	r2, [r3, #0]
	}




}
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bdb0      	pop	{r4, r5, r7, pc}
 8002532:	bf00      	nop
 8002534:	41200000 	.word	0x41200000
 8002538:	20000255 	.word	0x20000255
 800253c:	66666667 	.word	0x66666667
 8002540:	20000254 	.word	0x20000254
 8002544:	20000258 	.word	0x20000258

08002548 <Algo_combHigh_entry>:
//** END: COMBUSTION LOW **//

//** STATE: COMBUSTION HIGH **//
static void Algo_combHigh_entry(Mobj *stove,const  PF_StateParam_t* sParams)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]

}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <Algo_combHigh_action>:


static void Algo_combHigh_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]

}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <Algo_coalLow_entry>:
//** END: COMBUSTION HIGH **//

//** STATE: COAL LOW **//
static void Algo_coalLow_entry(Mobj *stove,const  PF_StateParam_t* sParams)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]

}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
	...

08002588 <Algo_coalLow_action>:

static void Algo_coalLow_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
	if(stove->sParticles->u16stDev > sParams->sPartStdev.fTolerance)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	891b      	ldrh	r3, [r3, #8]
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	429a      	cmp	r2, r3
 80025a2:	dd03      	ble.n	80025ac <Algo_coalLow_action+0x24>
	{
		nextState = COMBUSTION_LOW;
 80025a4:	4b34      	ldr	r3, [pc, #208]	; (8002678 <Algo_coalLow_action+0xf0>)
 80025a6:	2205      	movs	r2, #5
 80025a8:	701a      	strb	r2, [r3, #0]
		return;
 80025aa:	e062      	b.n	8002672 <Algo_coalLow_action+0xea>
	}


	if((stove->fBaffleTemp < P2F( sParams->sTemperature.fTarget)) && stove->sGrill.i8apertureCmdSteps != sParams->sGrill.i32Max)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	69dc      	ldr	r4, [r3, #28]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fbeb 	bl	8000d90 <__aeabi_i2f>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4619      	mov	r1, r3
 80025be:	4620      	mov	r0, r4
 80025c0:	f7fe fdd8 	bl	8001174 <__aeabi_fcmplt>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d013      	beq.n	80025f2 <Algo_coalLow_action+0x6a>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80025d0:	461a      	mov	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d00b      	beq.n	80025f2 <Algo_coalLow_action+0x6a>
	{
		stove->sGrill.i8apertureCmdSteps = sParams->sGrill.i32Max;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	b25a      	sxtb	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	721a      	strb	r2, [r3, #8]
		stove->sGrill.fSecPerStep = 0; // force aperture
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	60da      	str	r2, [r3, #12]
		bStepperAdjustmentNeeded = true;
 80025ec:	4b23      	ldr	r3, [pc, #140]	; (800267c <Algo_coalLow_action+0xf4>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
		//Ne pas être en coal s'il y a de la fumée (MUST NOT)
	// Timer de combustion (low et high)
		//TODO: Regarder après avoir ouvert la grille, temp et particules++ --> ****(en tout temps pour fumée)si remontée, on retourne en comb
	//Ça pourrait être le entry action, mettre des thresholds temp, parts
													// FreeParam1 used as container (see ParamFile.c)
	if(u32CurrentTime_ms - stove->u32TimeOfAdjustment_ms > MINUTES(sParams->i32FreeParam1) && (stove->sPrimary.i8apertureCmdSteps != sParams->sPrimary.i32Min))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80025fe:	f64e 2160 	movw	r1, #60000	; 0xea60
 8002602:	fb01 f202 	mul.w	r2, r1, r2
 8002606:	4293      	cmp	r3, r2
 8002608:	d913      	bls.n	8002632 <Algo_coalLow_action+0xaa>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f993 3000 	ldrsb.w	r3, [r3]
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002616:	429a      	cmp	r2, r3
 8002618:	d00b      	beq.n	8002632 <Algo_coalLow_action+0xaa>
	{
		stove->sPrimary.i8apertureCmdSteps = sParams->sPrimary.i32Min;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261e:	b25a      	sxtb	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	701a      	strb	r2, [r3, #0]
		stove->sPrimary.fSecPerStep = 0; // force aperture
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	605a      	str	r2, [r3, #4]
		bStepperAdjustmentNeeded = true;
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <Algo_coalLow_action+0xf4>)
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]

	}
													// FreeParam2 used as container (see ParamFile.c)
	if(u32CurrentTime_ms - stove->u32TimeOfAdjustment_ms > MINUTES(sParams->i32FreeParam2) && (stove->sSecondary.i8apertureCmdSteps != sParams->sSecondary.i32Min))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800263e:	f64e 2160 	movw	r1, #60000	; 0xea60
 8002642:	fb01 f202 	mul.w	r2, r1, r2
 8002646:	4293      	cmp	r3, r2
 8002648:	d913      	bls.n	8002672 <Algo_coalLow_action+0xea>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002650:	461a      	mov	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	429a      	cmp	r2, r3
 8002658:	d00b      	beq.n	8002672 <Algo_coalLow_action+0xea>
	{
		stove->sSecondary.i8apertureCmdSteps = sParams->sSecondary.i32Min;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	b25a      	sxtb	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	741a      	strb	r2, [r3, #16]
		stove->sSecondary.fSecPerStep = 0; // force aperture
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
		bStepperAdjustmentNeeded = true;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <Algo_coalLow_action+0xf4>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]

	}


}
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bd90      	pop	{r4, r7, pc}
 8002678:	20000258 	.word	0x20000258
 800267c:	20000255 	.word	0x20000255

08002680 <Algo_coalHigh_entry>:
//** END: COAL LOW **//

//** STATE: COAL HIGH **//
static void Algo_coalHigh_entry(Mobj *stove,const  PF_StateParam_t* sParams)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]

}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <Algo_coalHigh_action>:

static void Algo_coalHigh_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]

}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
	...

080026ac <Algo_manual_action>:
//** END: COAL HIGH **//

static void Algo_manual_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
	const PF_UsrParam* sManParam = PB_GetUserParam();
 80026b8:	f001 f8b6 	bl	8003828 <PB_GetUserParam>
 80026bc:	6178      	str	r0, [r7, #20]

	if(!sManParam->s32ManualOverride) // TODO: Put this in task function
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d104      	bne.n	80026d0 <Algo_manual_action+0x24>
	{
		nextState = lastState;
 80026c6:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <Algo_manual_action+0x98>)
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <Algo_manual_action+0x9c>)
 80026cc:	701a      	strb	r2, [r3, #0]
		return;
 80026ce:	e035      	b.n	800273c <Algo_manual_action+0x90>
	}

	if(stove->sPrimary.i8apertureCmdSteps != sManParam->s32ManualPrimary ||
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f993 3000 	ldrsb.w	r3, [r3]
 80026d6:	461a      	mov	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d10f      	bne.n	8002700 <Algo_manual_action+0x54>
			stove->sGrill.i8apertureCmdSteps != sManParam->s32ManualGrill ||
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80026e6:	461a      	mov	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	695b      	ldr	r3, [r3, #20]
	if(stove->sPrimary.i8apertureCmdSteps != sManParam->s32ManualPrimary ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d107      	bne.n	8002700 <Algo_manual_action+0x54>
			stove->sSecondary.i8apertureCmdSteps != sManParam->s32ManualSecondary)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80026f6:	461a      	mov	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	691b      	ldr	r3, [r3, #16]
			stove->sGrill.i8apertureCmdSteps != sManParam->s32ManualGrill ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d01d      	beq.n	800273c <Algo_manual_action+0x90>
	{
		stove->sPrimary.i8apertureCmdSteps = sManParam->s32ManualPrimary;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	b25a      	sxtb	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	701a      	strb	r2, [r3, #0]
		stove->sPrimary.fSecPerStep = 0; // force aperture
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	605a      	str	r2, [r3, #4]
		stove->sGrill.i8apertureCmdSteps = sManParam->s32ManualGrill;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	b25a      	sxtb	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	721a      	strb	r2, [r3, #8]
		stove->sGrill.fSecPerStep = 0; // force aperture
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	60da      	str	r2, [r3, #12]
		stove->sSecondary.i8apertureCmdSteps = sManParam->s32ManualSecondary;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	b25a      	sxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	741a      	strb	r2, [r3, #16]
		stove->sSecondary.fSecPerStep = 0; // force aperture
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	615a      	str	r2, [r3, #20]
		bStepperAdjustmentNeeded = true;
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <Algo_manual_action+0xa0>)
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
	}


}
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000257 	.word	0x20000257
 8002748:	20000258 	.word	0x20000258
 800274c:	20000255 	.word	0x20000255

08002750 <Algo_safety_action>:

static void Algo_safety_action(Mobj* stove, const PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
	if(!stove->bSafetyOn)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002762:	f083 0301 	eor.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <Algo_safety_action+0x24>
	{
		nextState = lastState;
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <Algo_safety_action+0x30>)
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <Algo_safety_action+0x34>)
 8002772:	701a      	strb	r2, [r3, #0]
	}
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000257 	.word	0x20000257
 8002784:	20000258 	.word	0x20000258

08002788 <Algo_overtemp_action>:

static void Algo_overtemp_action(Mobj* stove, const PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
	const PF_OverHeat_Thresholds_t* OvrhtParams = PB_GetOverheatParams();
 8002794:	f001 f852 	bl	800383c <PB_GetOverheatParams>
 8002798:	6178      	str	r0, [r7, #20]

	if((stove->fBaffleTemp < P2F(OvrhtParams->OverheatBaffle))  &&
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	69dc      	ldr	r4, [r3, #28]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe faf4 	bl	8000d90 <__aeabi_i2f>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4619      	mov	r1, r3
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7fe fce1 	bl	8001174 <__aeabi_fcmplt>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d100      	bne.n	80027ba <Algo_overtemp_action+0x32>
				(stove->fChamberTemp < P2F(OvrhtParams->OverheatChamber)) &&
				(stove->fPlenumTemp < P2F(OvrhtParams->OverheatPlenumExit)) )
		{
			nextState = lastState;
		}
}
 80027b8:	e023      	b.n	8002802 <Algo_overtemp_action+0x7a>
				(stove->fChamberTemp < P2F(OvrhtParams->OverheatChamber)) &&
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a1c      	ldr	r4, [r3, #32]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fae4 	bl	8000d90 <__aeabi_i2f>
 80027c8:	4603      	mov	r3, r0
	if((stove->fBaffleTemp < P2F(OvrhtParams->OverheatBaffle))  &&
 80027ca:	4619      	mov	r1, r3
 80027cc:	4620      	mov	r0, r4
 80027ce:	f7fe fcd1 	bl	8001174 <__aeabi_fcmplt>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d100      	bne.n	80027da <Algo_overtemp_action+0x52>
}
 80027d8:	e013      	b.n	8002802 <Algo_overtemp_action+0x7a>
				(stove->fPlenumTemp < P2F(OvrhtParams->OverheatPlenumExit)) )
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fad4 	bl	8000d90 <__aeabi_i2f>
 80027e8:	4603      	mov	r3, r0
				(stove->fChamberTemp < P2F(OvrhtParams->OverheatChamber)) &&
 80027ea:	4619      	mov	r1, r3
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7fe fcc1 	bl	8001174 <__aeabi_fcmplt>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d100      	bne.n	80027fa <Algo_overtemp_action+0x72>
}
 80027f8:	e003      	b.n	8002802 <Algo_overtemp_action+0x7a>
			nextState = lastState;
 80027fa:	4b04      	ldr	r3, [pc, #16]	; (800280c <Algo_overtemp_action+0x84>)
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	4b04      	ldr	r3, [pc, #16]	; (8002810 <Algo_overtemp_action+0x88>)
 8002800:	701a      	strb	r2, [r3, #0]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	bf00      	nop
 800280c:	20000257 	.word	0x20000257
 8002810:	20000258 	.word	0x20000258

08002814 <Algo_fill_state_functions>:

///////////////// Handle and low level functions /////////////////////////////////////////

void Algo_fill_state_functions(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
	AlgoComputeAdjustment[ZEROING_STEPPER] = Algo_zeroing_action;
 8002818:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <Algo_fill_state_functions+0x90>)
 800281a:	4a23      	ldr	r2, [pc, #140]	; (80028a8 <Algo_fill_state_functions+0x94>)
 800281c:	601a      	str	r2, [r3, #0]
	AlgoComputeAdjustment[WAITING] = Algo_Waiting_action;
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <Algo_fill_state_functions+0x90>)
 8002820:	4a22      	ldr	r2, [pc, #136]	; (80028ac <Algo_fill_state_functions+0x98>)
 8002822:	605a      	str	r2, [r3, #4]
	AlgoComputeAdjustment[RELOAD_IGNITION] = Algo_reload_action;
 8002824:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <Algo_fill_state_functions+0x90>)
 8002826:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <Algo_fill_state_functions+0x9c>)
 8002828:	609a      	str	r2, [r3, #8]
	AlgoComputeAdjustment[TEMPERATURE_RISE] = Algo_tempRise_action;
 800282a:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <Algo_fill_state_functions+0x90>)
 800282c:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <Algo_fill_state_functions+0xa0>)
 800282e:	60da      	str	r2, [r3, #12]
	AlgoComputeAdjustment[COMBUSTION_HIGH] = Algo_combHigh_action;
 8002830:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <Algo_fill_state_functions+0x90>)
 8002832:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <Algo_fill_state_functions+0xa4>)
 8002834:	611a      	str	r2, [r3, #16]
	AlgoComputeAdjustment[COMBUSTION_LOW] = Algo_combLow_action;
 8002836:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <Algo_fill_state_functions+0x90>)
 8002838:	4a20      	ldr	r2, [pc, #128]	; (80028bc <Algo_fill_state_functions+0xa8>)
 800283a:	615a      	str	r2, [r3, #20]
	AlgoComputeAdjustment[COAL_LOW] = Algo_coalLow_action;
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <Algo_fill_state_functions+0x90>)
 800283e:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <Algo_fill_state_functions+0xac>)
 8002840:	619a      	str	r2, [r3, #24]
	AlgoComputeAdjustment[COAL_HIGH] = Algo_coalHigh_action;
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <Algo_fill_state_functions+0x90>)
 8002844:	4a1f      	ldr	r2, [pc, #124]	; (80028c4 <Algo_fill_state_functions+0xb0>)
 8002846:	61da      	str	r2, [r3, #28]
	AlgoComputeAdjustment[OVERTEMP] = Algo_overtemp_action;
 8002848:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <Algo_fill_state_functions+0x90>)
 800284a:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <Algo_fill_state_functions+0xb4>)
 800284c:	621a      	str	r2, [r3, #32]
	AlgoComputeAdjustment[SAFETY] = Algo_safety_action;
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <Algo_fill_state_functions+0x90>)
 8002850:	4a1e      	ldr	r2, [pc, #120]	; (80028cc <Algo_fill_state_functions+0xb8>)
 8002852:	625a      	str	r2, [r3, #36]	; 0x24
	AlgoComputeAdjustment[MANUAL_CONTROL] = Algo_manual_action;
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <Algo_fill_state_functions+0x90>)
 8002856:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <Algo_fill_state_functions+0xbc>)
 8002858:	629a      	str	r2, [r3, #40]	; 0x28

	AlgoStateEntryAction[ZEROING_STEPPER] = Algo_zeroing_entry;
 800285a:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <Algo_fill_state_functions+0xc0>)
 800285c:	4a1e      	ldr	r2, [pc, #120]	; (80028d8 <Algo_fill_state_functions+0xc4>)
 800285e:	601a      	str	r2, [r3, #0]
	AlgoStateEntryAction[WAITING] = Algo_waiting_entry;
 8002860:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <Algo_fill_state_functions+0xc0>)
 8002862:	4a1e      	ldr	r2, [pc, #120]	; (80028dc <Algo_fill_state_functions+0xc8>)
 8002864:	605a      	str	r2, [r3, #4]
	AlgoStateEntryAction[RELOAD_IGNITION] = Algo_reload_entry;
 8002866:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <Algo_fill_state_functions+0xc0>)
 8002868:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <Algo_fill_state_functions+0xcc>)
 800286a:	609a      	str	r2, [r3, #8]
	AlgoStateEntryAction[TEMPERATURE_RISE] = Algo_tempRise_entry;
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <Algo_fill_state_functions+0xc0>)
 800286e:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <Algo_fill_state_functions+0xd0>)
 8002870:	60da      	str	r2, [r3, #12]
	AlgoStateEntryAction[COMBUSTION_HIGH] = Algo_combHigh_entry;
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <Algo_fill_state_functions+0xc0>)
 8002874:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <Algo_fill_state_functions+0xd4>)
 8002876:	611a      	str	r2, [r3, #16]
	AlgoStateEntryAction[COMBUSTION_LOW] = Algo_combLow_entry;
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <Algo_fill_state_functions+0xc0>)
 800287a:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <Algo_fill_state_functions+0xd8>)
 800287c:	615a      	str	r2, [r3, #20]
	AlgoStateEntryAction[COAL_LOW] = Algo_coalLow_entry;
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <Algo_fill_state_functions+0xc0>)
 8002880:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <Algo_fill_state_functions+0xdc>)
 8002882:	619a      	str	r2, [r3, #24]
	AlgoStateEntryAction[COAL_HIGH] = Algo_coalHigh_entry;
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <Algo_fill_state_functions+0xc0>)
 8002886:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <Algo_fill_state_functions+0xe0>)
 8002888:	61da      	str	r2, [r3, #28]
	AlgoStateEntryAction[OVERTEMP] = Algo_zeroing_entry;
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <Algo_fill_state_functions+0xc0>)
 800288c:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <Algo_fill_state_functions+0xc4>)
 800288e:	621a      	str	r2, [r3, #32]
	AlgoStateEntryAction[SAFETY] = Algo_zeroing_entry;
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <Algo_fill_state_functions+0xc0>)
 8002892:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <Algo_fill_state_functions+0xc4>)
 8002894:	625a      	str	r2, [r3, #36]	; 0x24
	AlgoStateEntryAction[MANUAL_CONTROL] = NULL;
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <Algo_fill_state_functions+0xc0>)
 8002898:	2200      	movs	r2, #0
 800289a:	629a      	str	r2, [r3, #40]	; 0x28

}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	2000025c 	.word	0x2000025c
 80028a8:	08001a25 	.word	0x08001a25
 80028ac:	08001a8d 	.word	0x08001a8d
 80028b0:	08001b6d 	.word	0x08001b6d
 80028b4:	08001c09 	.word	0x08001c09
 80028b8:	0800255d 	.word	0x0800255d
 80028bc:	08001efd 	.word	0x08001efd
 80028c0:	08002589 	.word	0x08002589
 80028c4:	08002695 	.word	0x08002695
 80028c8:	08002789 	.word	0x08002789
 80028cc:	08002751 	.word	0x08002751
 80028d0:	080026ad 	.word	0x080026ad
 80028d4:	20000288 	.word	0x20000288
 80028d8:	080019dd 	.word	0x080019dd
 80028dc:	08001a51 	.word	0x08001a51
 80028e0:	08001ae9 	.word	0x08001ae9
 80028e4:	08001bad 	.word	0x08001bad
 80028e8:	08002549 	.word	0x08002549
 80028ec:	08001ea9 	.word	0x08001ea9
 80028f0:	08002573 	.word	0x08002573
 80028f4:	08002681 	.word	0x08002681

080028f8 <Algo_update_steppers_inPlace_flag>:

void Algo_update_steppers_inPlace_flag(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
	if(!motors_ready_for_req)
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <Algo_update_steppers_inPlace_flag+0x24>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	f083 0301 	eor.w	r3, r3, #1
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <Algo_update_steppers_inPlace_flag+0x20>
	{
		xQueueReceive(MotorInPlaceHandle,&motors_ready_for_req,5);
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <Algo_update_steppers_inPlace_flag+0x28>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2205      	movs	r2, #5
 8002910:	4902      	ldr	r1, [pc, #8]	; (800291c <Algo_update_steppers_inPlace_flag+0x24>)
 8002912:	4618      	mov	r0, r3
 8002914:	f009 fe52 	bl	800c5bc <xQueueReceive>
	}
}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000254 	.word	0x20000254
 8002920:	200018a8 	.word	0x200018a8

08002924 <Algo_adjust_steppers_position>:

bool Algo_adjust_steppers_position(Mobj *stove)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
	{
		stove->sPrimary.i8apertureCmdSteps,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f993 3000 	ldrsb.w	r3, [r3]
 8002932:	b2db      	uxtb	r3, r3
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
 8002934:	723b      	strb	r3, [r7, #8]
		(uint8_t)(stove->sPrimary.fSecPerStep*10),
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4920      	ldr	r1, [pc, #128]	; (80029bc <Algo_adjust_steppers_position+0x98>)
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fa7b 	bl	8000e38 <__aeabi_fmul>
 8002942:	4603      	mov	r3, r0
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fc63 	bl	8001210 <__aeabi_f2uiz>
 800294a:	4603      	mov	r3, r0
 800294c:	b2db      	uxtb	r3, r3
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
 800294e:	727b      	strb	r3, [r7, #9]
		stove->sGrill.i8apertureCmdSteps,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002956:	b2db      	uxtb	r3, r3
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
 8002958:	72bb      	strb	r3, [r7, #10]
		(uint8_t)(stove->sGrill.fSecPerStep*10),
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	4917      	ldr	r1, [pc, #92]	; (80029bc <Algo_adjust_steppers_position+0x98>)
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fa69 	bl	8000e38 <__aeabi_fmul>
 8002966:	4603      	mov	r3, r0
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fc51 	bl	8001210 <__aeabi_f2uiz>
 800296e:	4603      	mov	r3, r0
 8002970:	b2db      	uxtb	r3, r3
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
 8002972:	72fb      	strb	r3, [r7, #11]
		stove->sSecondary.i8apertureCmdSteps,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800297a:	b2db      	uxtb	r3, r3
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
 800297c:	733b      	strb	r3, [r7, #12]
		(uint8_t)(stove->sSecondary.fSecPerStep*10)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	490e      	ldr	r1, [pc, #56]	; (80029bc <Algo_adjust_steppers_position+0x98>)
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe fa57 	bl	8000e38 <__aeabi_fmul>
 800298a:	4603      	mov	r3, r0
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fc3f 	bl	8001210 <__aeabi_f2uiz>
 8002992:	4603      	mov	r3, r0
 8002994:	b2db      	uxtb	r3, r3
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
 8002996:	737b      	strb	r3, [r7, #13]

	};

	if(!xMessageBufferSend(MotorControlsHandle,cmd,NUMBER_OF_STEPPER_CMDS,0))
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <Algo_adjust_steppers_position+0x9c>)
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	f107 0108 	add.w	r1, r7, #8
 80029a0:	2300      	movs	r3, #0
 80029a2:	2206      	movs	r2, #6
 80029a4:	f00a f8cb 	bl	800cb3e <xStreamBufferSend>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <Algo_adjust_steppers_position+0x8e>
	{
		return false;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <Algo_adjust_steppers_position+0x90>
	}
	return true;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	41200000 	.word	0x41200000
 80029c0:	200018a4 	.word	0x200018a4

080029c4 <DebugManager>:

extern RTC_HandleTypeDef hrtc;
RTC_TimeTypeDef sTime;

void DebugManager(Mobj * stove, uint32_t u32time_ms)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
	static uint32_t u32LastTimeInDebug = 0;

	if(u32time_ms - u32LastTimeInDebug > SECONDS(5))
 80029ce:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <DebugManager+0x2c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d902      	bls.n	80029e4 <DebugManager+0x20>
		//printf("%.2f\r\n",stove->fBaffleTemp);
		//printf("%.2f\r\n",stove->fBaffleDeltaT);
		//printf("%.2f\r\n",stove->fChamberTemp);
		//printf("%.2f\r\n",stove->fPlenumTemp);

		u32LastTimeInDebug = u32time_ms;
 80029de:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <DebugManager+0x2c>)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6013      	str	r3, [r2, #0]
	}
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	2000039c 	.word	0x2000039c

080029f4 <PrintOutput>:
		"SAFETY",
		"MANUAL"
};

void PrintOutput(Mobj * stove, State currentState)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]

	HAL_RTC_GetTime(&hrtc,&sTime,0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	4985      	ldr	r1, [pc, #532]	; (8002c18 <PrintOutput+0x224>)
 8002a04:	4885      	ldr	r0, [pc, #532]	; (8002c1c <PrintOutput+0x228>)
 8002a06:	f007 fab5 	bl	8009f74 <HAL_RTC_GetTime>
	printf("#");
 8002a0a:	2023      	movs	r0, #35	; 0x23
 8002a0c:	f00d f9c6 	bl	800fd9c <putchar>
	printf("%02i:%02i:%02i ",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002a10:	4b81      	ldr	r3, [pc, #516]	; (8002c18 <PrintOutput+0x224>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4619      	mov	r1, r3
 8002a16:	4b80      	ldr	r3, [pc, #512]	; (8002c18 <PrintOutput+0x224>)
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b7e      	ldr	r3, [pc, #504]	; (8002c18 <PrintOutput+0x224>)
 8002a1e:	789b      	ldrb	r3, [r3, #2]
 8002a20:	487f      	ldr	r0, [pc, #508]	; (8002c20 <PrintOutput+0x22c>)
 8002a22:	f00d f9a3 	bl	800fd6c <iprintf>
	printf("Tbaffle:%i ", (int) stove->fBaffleTemp);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fbca 	bl	80011c4 <__aeabi_f2iz>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4619      	mov	r1, r3
 8002a34:	487b      	ldr	r0, [pc, #492]	; (8002c24 <PrintOutput+0x230>)
 8002a36:	f00d f999 	bl	800fd6c <iprintf>
	printf("Tavant:%i ", (int) stove->fChamberTemp);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fbc0 	bl	80011c4 <__aeabi_f2iz>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4619      	mov	r1, r3
 8002a48:	4877      	ldr	r0, [pc, #476]	; (8002c28 <PrintOutput+0x234>)
 8002a4a:	f00d f98f 	bl	800fd6c <iprintf>
	printf("Plenum:%i ", (int) stove->fPlenumTemp);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fbb6 	bl	80011c4 <__aeabi_f2iz>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4873      	ldr	r0, [pc, #460]	; (8002c2c <PrintOutput+0x238>)
 8002a5e:	f00d f985 	bl	800fd6c <iprintf>
	printf("State:");
 8002a62:	4873      	ldr	r0, [pc, #460]	; (8002c30 <PrintOutput+0x23c>)
 8002a64:	f00d f982 	bl	800fd6c <iprintf>

	printf(StateStrings[currentState]);
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	4a72      	ldr	r2, [pc, #456]	; (8002c34 <PrintOutput+0x240>)
 8002a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f00d f97b 	bl	800fd6c <iprintf>

	printf(" tStat:");
 8002a76:	4870      	ldr	r0, [pc, #448]	; (8002c38 <PrintOutput+0x244>)
 8002a78:	f00d f978 	bl	800fd6c <iprintf>
	if (stove->bThermostatOn == true)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <PrintOutput+0x9a>
	{
		printf("ON ");
 8002a86:	486d      	ldr	r0, [pc, #436]	; (8002c3c <PrintOutput+0x248>)
 8002a88:	f00d f970 	bl	800fd6c <iprintf>
 8002a8c:	e002      	b.n	8002a94 <PrintOutput+0xa0>
	}
	else
	{
		printf("OFF ");
 8002a8e:	486c      	ldr	r0, [pc, #432]	; (8002c40 <PrintOutput+0x24c>)
 8002a90:	f00d f96c 	bl	800fd6c <iprintf>
	}
	printf("dTbaffle:%.1f ", stove->fBaffleDeltaT);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fd fd3f 	bl	800051c <__aeabi_f2d>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4868      	ldr	r0, [pc, #416]	; (8002c44 <PrintOutput+0x250>)
 8002aa4:	f00d f962 	bl	800fd6c <iprintf>
	printf("FanSpeed:%i ", 0);
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4867      	ldr	r0, [pc, #412]	; (8002c48 <PrintOutput+0x254>)
 8002aac:	f00d f95e 	bl	800fd6c <iprintf>
	printf("Grille:%i ", (int)(stove->sGrill.i8aperturePosSteps*9/10));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	4a63      	ldr	r2, [pc, #396]	; (8002c4c <PrintOutput+0x258>)
 8002ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ac4:	1092      	asrs	r2, r2, #2
 8002ac6:	17db      	asrs	r3, r3, #31
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	4619      	mov	r1, r3
 8002acc:	4860      	ldr	r0, [pc, #384]	; (8002c50 <PrintOutput+0x25c>)
 8002ace:	f00d f94d 	bl	800fd6c <iprintf>
	printf("Prim:%i ", (int)(stove->sPrimary.i8aperturePosSteps*9/10));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4413      	add	r3, r2
 8002ae0:	4a5a      	ldr	r2, [pc, #360]	; (8002c4c <PrintOutput+0x258>)
 8002ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ae6:	1092      	asrs	r2, r2, #2
 8002ae8:	17db      	asrs	r3, r3, #31
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	4619      	mov	r1, r3
 8002aee:	4859      	ldr	r0, [pc, #356]	; (8002c54 <PrintOutput+0x260>)
 8002af0:	f00d f93c 	bl	800fd6c <iprintf>
	printf("Sec:%i ", (int)(stove->sSecondary.i8aperturePosSteps*9/10));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8002afa:	461a      	mov	r2, r3
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	4a52      	ldr	r2, [pc, #328]	; (8002c4c <PrintOutput+0x258>)
 8002b04:	fb82 1203 	smull	r1, r2, r2, r3
 8002b08:	1092      	asrs	r2, r2, #2
 8002b0a:	17db      	asrs	r3, r3, #31
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4851      	ldr	r0, [pc, #324]	; (8002c58 <PrintOutput+0x264>)
 8002b12:	f00d f92b 	bl	800fd6c <iprintf>
	printf("Tboard:%.0f ", get_BoardTemp());
 8002b16:	f001 fd7d 	bl	8004614 <get_BoardTemp>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fcfd 	bl	800051c <__aeabi_f2d>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	484d      	ldr	r0, [pc, #308]	; (8002c5c <PrintOutput+0x268>)
 8002b28:	f00d f920 	bl	800fd6c <iprintf>
	printf("Door:");
 8002b2c:	484c      	ldr	r0, [pc, #304]	; (8002c60 <PrintOutput+0x26c>)
 8002b2e:	f00d f91d 	bl	800fd6c <iprintf>

	if(stove->bDoorOpen == true)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <PrintOutput+0x150>
	{
		printf("OPEN ");
 8002b3c:	4849      	ldr	r0, [pc, #292]	; (8002c64 <PrintOutput+0x270>)
 8002b3e:	f00d f915 	bl	800fd6c <iprintf>
 8002b42:	e002      	b.n	8002b4a <PrintOutput+0x156>

	}
	else
	{
		printf("CLOSED ");
 8002b44:	4848      	ldr	r0, [pc, #288]	; (8002c68 <PrintOutput+0x274>)
 8002b46:	f00d f911 	bl	800fd6c <iprintf>
	}

	printf("PartCH0ON:%u ", stove->sParticles->u16ch0_ON);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	4619      	mov	r1, r3
 8002b52:	4846      	ldr	r0, [pc, #280]	; (8002c6c <PrintOutput+0x278>)
 8002b54:	f00d f90a 	bl	800fd6c <iprintf>
	printf("PartCH1ON:%u ", stove->sParticles->u16ch1_ON);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	889b      	ldrh	r3, [r3, #4]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4843      	ldr	r0, [pc, #268]	; (8002c70 <PrintOutput+0x27c>)
 8002b62:	f00d f903 	bl	800fd6c <iprintf>
	printf("PartCH0OFF:%u ", stove->sParticles->u16ch0_OFF);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	885b      	ldrh	r3, [r3, #2]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4841      	ldr	r0, [pc, #260]	; (8002c74 <PrintOutput+0x280>)
 8002b70:	f00d f8fc 	bl	800fd6c <iprintf>
	printf("PartCH1OFF:%u ", stove->sParticles->u16ch1_OFF);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	88db      	ldrh	r3, [r3, #6]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	483e      	ldr	r0, [pc, #248]	; (8002c78 <PrintOutput+0x284>)
 8002b7e:	f00d f8f5 	bl	800fd6c <iprintf>
	printf("PartVar:%u ", stove->sParticles->u16stDev);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	891b      	ldrh	r3, [r3, #8]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	483c      	ldr	r0, [pc, #240]	; (8002c7c <PrintOutput+0x288>)
 8002b8c:	f00d f8ee 	bl	800fd6c <iprintf>
	printf("PartSlope:%.1f ", stove->sParticles->fslope);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fcc0 	bl	800051c <__aeabi_f2d>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4837      	ldr	r0, [pc, #220]	; (8002c80 <PrintOutput+0x28c>)
 8002ba2:	f00d f8e3 	bl	800fd6c <iprintf>
	printf("TPart:%u " ,stove->sParticles->u16temperature);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	895b      	ldrh	r3, [r3, #10]
 8002bac:	4619      	mov	r1, r3
 8002bae:	4835      	ldr	r0, [pc, #212]	; (8002c84 <PrintOutput+0x290>)
 8002bb0:	f00d f8dc 	bl	800fd6c <iprintf>
	printf("PartCurr:%.1f ", stove->sParticles->fLED_current_meas);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd fcae 	bl	800051c <__aeabi_f2d>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4830      	ldr	r0, [pc, #192]	; (8002c88 <PrintOutput+0x294>)
 8002bc6:	f00d f8d1 	bl	800fd6c <iprintf>
	printf("PartLuxON:%u ", stove->sParticles->u16Lux_ON);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	8c1b      	ldrh	r3, [r3, #32]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	482e      	ldr	r0, [pc, #184]	; (8002c8c <PrintOutput+0x298>)
 8002bd4:	f00d f8ca 	bl	800fd6c <iprintf>
	printf("PartLuxOFF:%u ", stove->sParticles->u16Lux_OFF);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002bde:	4619      	mov	r1, r3
 8002be0:	482b      	ldr	r0, [pc, #172]	; (8002c90 <PrintOutput+0x29c>)
 8002be2:	f00d f8c3 	bl	800fd6c <iprintf>
	printf("PartTime:%lu ", stove->sParticles->u16TimeSinceInit);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	4619      	mov	r1, r3
 8002bee:	4829      	ldr	r0, [pc, #164]	; (8002c94 <PrintOutput+0x2a0>)
 8002bf0:	f00d f8bc 	bl	800fd6c <iprintf>
	printf("dTavant: %.1f", stove->fChamberDeltaT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fc8f 	bl	800051c <__aeabi_f2d>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4825      	ldr	r0, [pc, #148]	; (8002c98 <PrintOutput+0x2a4>)
 8002c04:	f00d f8b2 	bl	800fd6c <iprintf>

	printf("*\n\r");
 8002c08:	4824      	ldr	r0, [pc, #144]	; (8002c9c <PrintOutput+0x2a8>)
 8002c0a:	f00d f8af 	bl	800fd6c <iprintf>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000398 	.word	0x20000398
 8002c1c:	200016e4 	.word	0x200016e4
 8002c20:	08012ef4 	.word	0x08012ef4
 8002c24:	08012f04 	.word	0x08012f04
 8002c28:	08012f10 	.word	0x08012f10
 8002c2c:	08012f1c 	.word	0x08012f1c
 8002c30:	08012f28 	.word	0x08012f28
 8002c34:	20000000 	.word	0x20000000
 8002c38:	08012f30 	.word	0x08012f30
 8002c3c:	08012f38 	.word	0x08012f38
 8002c40:	08012f3c 	.word	0x08012f3c
 8002c44:	08012f44 	.word	0x08012f44
 8002c48:	08012f54 	.word	0x08012f54
 8002c4c:	66666667 	.word	0x66666667
 8002c50:	08012f64 	.word	0x08012f64
 8002c54:	08012f70 	.word	0x08012f70
 8002c58:	08012f7c 	.word	0x08012f7c
 8002c5c:	08012f84 	.word	0x08012f84
 8002c60:	08012f94 	.word	0x08012f94
 8002c64:	08012f9c 	.word	0x08012f9c
 8002c68:	08012fa4 	.word	0x08012fa4
 8002c6c:	08012fac 	.word	0x08012fac
 8002c70:	08012fbc 	.word	0x08012fbc
 8002c74:	08012fcc 	.word	0x08012fcc
 8002c78:	08012fdc 	.word	0x08012fdc
 8002c7c:	08012fec 	.word	0x08012fec
 8002c80:	08012ff8 	.word	0x08012ff8
 8002c84:	08013008 	.word	0x08013008
 8002c88:	08013014 	.word	0x08013014
 8002c8c:	08013024 	.word	0x08013024
 8002c90:	08013034 	.word	0x08013034
 8002c94:	08013044 	.word	0x08013044
 8002c98:	08013054 	.word	0x08013054
 8002c9c:	08013064 	.word	0x08013064

08002ca0 <__io_putchar>:
 extern "C" {
#endif

extern UART_HandleTypeDef huart2;

int __io_putchar(int ch) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002ca8:	1d39      	adds	r1, r7, #4
 8002caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4803      	ldr	r0, [pc, #12]	; (8002cc0 <__io_putchar+0x20>)
 8002cb2:	f008 f8eb 	bl	800ae8c <HAL_UART_Transmit>
  return ch;
 8002cb6:	687b      	ldr	r3, [r7, #4]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	2000176c 	.word	0x2000176c

08002cc4 <ESPMANAGER_Init>:
// --------
// Bridge state
static SBridgeState m_sBridgeState;

void ESPMANAGER_Init()
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
	// Initialize bridge ...
	m_sBridgeState.u32GetParameterCurrentIndex = 0;
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <ESPMANAGER_Init+0x3c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]

	m_last_DMA_count = 0;
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <ESPMANAGER_Init+0x40>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	801a      	strh	r2, [r3, #0]

    // Encoder
    UARTPROTOCOLENC_Init(&m_sHandleEncoder, &m_sConfigEncoder);
 8002cd4:	490c      	ldr	r1, [pc, #48]	; (8002d08 <ESPMANAGER_Init+0x44>)
 8002cd6:	480d      	ldr	r0, [pc, #52]	; (8002d0c <ESPMANAGER_Init+0x48>)
 8002cd8:	f002 ff10 	bl	8005afc <UARTPROTOCOLENC_Init>

    // Decoder
    UARTPROTOCOLDEC_Init(&m_sHandleDecoder, &m_sConfigDecoder);
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <ESPMANAGER_Init+0x4c>)
 8002cde:	480d      	ldr	r0, [pc, #52]	; (8002d14 <ESPMANAGER_Init+0x50>)
 8002ce0:	f002 feea 	bl	8005ab8 <UARTPROTOCOLDEC_Init>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, m_u8UART_RX_DMABuffers, MAX_RX_DMA_SIZE);
 8002ce4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce8:	490b      	ldr	r1, [pc, #44]	; (8002d18 <ESPMANAGER_Init+0x54>)
 8002cea:	480c      	ldr	r0, [pc, #48]	; (8002d1c <ESPMANAGER_Init+0x58>)
 8002cec:	f008 f9f3 	bl	800b0d6 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UART_RegisterCallback(&huart1, HAL_UART_ERROR_CB_ID, UARTErrorCb);
 8002cf0:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <ESPMANAGER_Init+0x5c>)
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	4809      	ldr	r0, [pc, #36]	; (8002d1c <ESPMANAGER_Init+0x58>)
 8002cf6:	f008 f823 	bl	800ad40 <HAL_UART_RegisterCallback>
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000c4c 	.word	0x20000c4c
 8002d04:	200007a0 	.word	0x200007a0
 8002d08:	2000002c 	.word	0x2000002c
 8002d0c:	20000824 	.word	0x20000824
 8002d10:	20000030 	.word	0x20000030
 8002d14:	20000c28 	.word	0x20000c28
 8002d18:	200003a0 	.word	0x200003a0
 8002d1c:	200016f8 	.word	0x200016f8
 8002d20:	08002d25 	.word	0x08002d25

08002d24 <UARTErrorCb>:


}

static void UARTErrorCb(UART_HandleTypeDef *huart)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	// If there is not enough activity it seems to trigger an error
	// in that case we need to restart the DMA
	m_bNeedRestartDMA = true;
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <UARTErrorCb+0x18>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	20000c48 	.word	0x20000c48

08002d40 <EncWriteUART>:

static void EncWriteUART(const UARTPROTOCOLENC_SHandle* psHandle, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
    //uart_write_bytes(HWGPIO_BRIDGEUART_PORT_NUM, u8Datas, u32DataLen);
	// Write byte into UART ...
	HAL_UART_Transmit_IT(&huart1, (uint8_t*)u8Datas, (uint16_t)u32DataLen);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	4803      	ldr	r0, [pc, #12]	; (8002d64 <EncWriteUART+0x24>)
 8002d56:	f008 f92b 	bl	800afb0 <HAL_UART_Transmit_IT>
}
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200016f8 	.word	0x200016f8

08002d68 <DecAcceptFrame>:


static void DecAcceptFrame(const UARTPROTOCOLDEC_SHandle* psHandle, uint8_t u8ID, const uint8_t u8Payloads[], uint16_t u16PayloadLen)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b09a      	sub	sp, #104	; 0x68
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	461a      	mov	r2, r3
 8002d74:	460b      	mov	r3, r1
 8002d76:	72fb      	strb	r3, [r7, #11]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	813b      	strh	r3, [r7, #8]
	switch((UFEC23PROTOCOL_FRAMEID)u8ID)
 8002d7c:	7afb      	ldrb	r3, [r7, #11]
 8002d7e:	2b10      	cmp	r3, #16
 8002d80:	f000 8098 	beq.w	8002eb4 <DecAcceptFrame+0x14c>
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	f300 80c7 	bgt.w	8002f18 <DecAcceptFrame+0x1b0>
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d002      	beq.n	8002d94 <DecAcceptFrame+0x2c>
 8002d8e:	2b0f      	cmp	r3, #15
 8002d90:	d020      	beq.n	8002dd4 <DecAcceptFrame+0x6c>
		}
		//case UFEC23PROTOCOL_FRAMEID_C2SCommitParameter:
		//	break;
		default:
			// TODO: Not a valid protocol ID... Do something? Throw into UART log?
			break;
 8002d92:	e0c1      	b.n	8002f18 <DecAcceptFrame+0x1b0>
			if (!UFEC23ENDEC_A2AReqPingAliveDecode(&reqPing, u8Payloads, u16PayloadLen))
 8002d94:	893a      	ldrh	r2, [r7, #8]
 8002d96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f002 ffd3 	bl	8005d48 <UFEC23ENDEC_A2AReqPingAliveDecode>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f083 0301 	eor.w	r3, r3, #1
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f040 80b6 	bne.w	8002f1c <DecAcceptFrame+0x1b4>
			const uint16_t u16Len = (uint16_t)UFEC23ENDEC_A2AReqPingAliveEncode(m_u8UARTOutputBuffers, UART_OUTBUFFER_LEN, &reqPing);
 8002db0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002db4:	461a      	mov	r2, r3
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	485d      	ldr	r0, [pc, #372]	; (8002f30 <DecAcceptFrame+0x1c8>)
 8002dba:	f002 ffaf 	bl	8005d1c <UFEC23ENDEC_A2AReqPingAliveEncode>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			UARTPROTOCOLENC_Send(&m_sHandleEncoder, UFEC23PROTOCOL_FRAMEID_A2AReqPingAliveResp, m_u8UARTOutputBuffers, u16Len);
 8002dc4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002dc8:	4a59      	ldr	r2, [pc, #356]	; (8002f30 <DecAcceptFrame+0x1c8>)
 8002dca:	2181      	movs	r1, #129	; 0x81
 8002dcc:	4859      	ldr	r0, [pc, #356]	; (8002f34 <DecAcceptFrame+0x1cc>)
 8002dce:	f002 febf 	bl	8005b50 <UARTPROTOCOLENC_Send>
			break;
 8002dd2:	e0a8      	b.n	8002f26 <DecAcceptFrame+0x1be>
			if(!UFEC23ENDEC_C2SGetParameterDecode(&param, u8Payloads,(uint32_t) u16PayloadLen))
 8002dd4:	893a      	ldrh	r2, [r7, #8]
 8002dd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 ffc8 	bl	8005d72 <UFEC23ENDEC_C2SGetParameterDecode>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f083 0301 	eor.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 8098 	bne.w	8002f20 <DecAcceptFrame+0x1b8>
			const uint32_t u32ParamEntryCount = PARAMFILE_GetParamEntryCount();
 8002df0:	f000 fce6 	bl	80037c0 <PARAMFILE_GetParamEntryCount>
 8002df4:	6638      	str	r0, [r7, #96]	; 0x60
			if (param.eIterateOp == UFEC23ENDEC_EITERATEOP_First)
 8002df6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <DecAcceptFrame+0x9e>
				m_sBridgeState.u32GetParameterCurrentIndex = 0;
 8002dfe:	4b4e      	ldr	r3, [pc, #312]	; (8002f38 <DecAcceptFrame+0x1d0>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e008      	b.n	8002e18 <DecAcceptFrame+0xb0>
			else if (param.eIterateOp == UFEC23ENDEC_EITERATEOP_Next)
 8002e06:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d104      	bne.n	8002e18 <DecAcceptFrame+0xb0>
				m_sBridgeState.u32GetParameterCurrentIndex++; // Next record ....
 8002e0e:	4b4a      	ldr	r3, [pc, #296]	; (8002f38 <DecAcceptFrame+0x1d0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3301      	adds	r3, #1
 8002e14:	4a48      	ldr	r2, [pc, #288]	; (8002f38 <DecAcceptFrame+0x1d0>)
 8002e16:	6013      	str	r3, [r2, #0]
			sResp.bHasRecord = false;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			sResp.bIsEOF = true;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			if (m_sBridgeState.u32GetParameterCurrentIndex < u32ParamEntryCount)
 8002e24:	4b44      	ldr	r3, [pc, #272]	; (8002f38 <DecAcceptFrame+0x1d0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d930      	bls.n	8002e90 <DecAcceptFrame+0x128>
				const PFL_SParameterItem* pParamItem = PARAMFILE_GetParamEntryByIndex(m_sBridgeState.u32GetParameterCurrentIndex);
 8002e2e:	4b42      	ldr	r3, [pc, #264]	; (8002f38 <DecAcceptFrame+0x1d0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fcce 	bl	80037d4 <PARAMFILE_GetParamEntryByIndex>
 8002e38:	65f8      	str	r0, [r7, #92]	; 0x5c
				if (pParamItem != NULL && pParamItem->eType == PFL_TYPE_Int32)
 8002e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d027      	beq.n	8002e90 <DecAcceptFrame+0x128>
 8002e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e42:	7a1b      	ldrb	r3, [r3, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d123      	bne.n	8002e90 <DecAcceptFrame+0x128>
					sResp.bHasRecord = true;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					sResp.bIsEOF = false;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					sResp.sEntry.eParamType = UFEC23ENDEC_EPARAMTYPE_Int32;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					sResp.sEntry.uType.sInt32.s32Default = pParamItem->uType.sInt32.s32Default;
 8002e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	637b      	str	r3, [r7, #52]	; 0x34
					sResp.sEntry.uType.sInt32.s32Min = pParamItem->uType.sInt32.s32Min;
 8002e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	63bb      	str	r3, [r7, #56]	; 0x38
					sResp.sEntry.uType.sInt32.s32Max = pParamItem->uType.sInt32.s32Max;
 8002e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
					strcpy(sResp.sEntry.szKey, pParamItem->szKey);
 8002e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f00c ffd8 	bl	800fe2c <strcpy>
					PFL_GetValueInt32(&PARAMFILE_g_sHandle, pParamItem->szKey, &s32Value);
 8002e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002e84:	4619      	mov	r1, r3
 8002e86:	482d      	ldr	r0, [pc, #180]	; (8002f3c <DecAcceptFrame+0x1d4>)
 8002e88:	f000 fd79 	bl	800397e <PFL_GetValueInt32>
					sResp.uValue.s32Value = s32Value;
 8002e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8e:	643b      	str	r3, [r7, #64]	; 0x40
			const uint16_t u16Len = (uint16_t)UFEC23ENDEC_S2CGetParameterRespEncode(m_u8UARTOutputBuffers, UART_OUTBUFFER_LEN, &sResp);
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	461a      	mov	r2, r3
 8002e96:	2180      	movs	r1, #128	; 0x80
 8002e98:	4825      	ldr	r0, [pc, #148]	; (8002f30 <DecAcceptFrame+0x1c8>)
 8002e9a:	f002 ff85 	bl	8005da8 <UFEC23ENDEC_S2CGetParameterRespEncode>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			UARTPROTOCOLENC_Send(&m_sHandleEncoder, UFEC23PROTOCOL_FRAMEID_S2CGetParameterResp, m_u8UARTOutputBuffers, u16Len);
 8002ea4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002ea8:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <DecAcceptFrame+0x1c8>)
 8002eaa:	218f      	movs	r1, #143	; 0x8f
 8002eac:	4821      	ldr	r0, [pc, #132]	; (8002f34 <DecAcceptFrame+0x1cc>)
 8002eae:	f002 fe4f 	bl	8005b50 <UARTPROTOCOLENC_Send>
			break;
 8002eb2:	e038      	b.n	8002f26 <DecAcceptFrame+0x1be>
			if(!UFEC23ENDEC_C2SSetParameterDecode(&param, u8Payloads,(uint32_t) u16PayloadLen))
 8002eb4:	893a      	ldrh	r2, [r7, #8]
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 f802 	bl	8005ec6 <UFEC23ENDEC_C2SSetParameterDecode>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	f083 0301 	eor.w	r3, r3, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d12a      	bne.n	8002f24 <DecAcceptFrame+0x1bc>
			const PFL_ESETRET setRet = PFL_SetValueInt32(&PARAMFILE_g_sHandle, param.szKey, param.uValue.s32Value);
 8002ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4819      	ldr	r0, [pc, #100]	; (8002f3c <DecAcceptFrame+0x1d4>)
 8002ed8:	f000 fd75 	bl	80039c6 <PFL_SetValueInt32>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				.eResult = (setRet == PFL_ESETRET_OK) ? UFEC23PROTOCOL_ERESULT_Ok : UFEC23PROTOCOL_ERESULT_Fail
 8002ee2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	bf14      	ite	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	2300      	moveq	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
			UFEC23PROTOCOL_S2CSetParameterResp s2cSetParameterResp =
 8002ef0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			const uint16_t u16Len = (uint16_t)UFEC23ENDEC_S2CSetParameterRespEncode(m_u8UARTOutputBuffers, UART_OUTBUFFER_LEN, &s2cSetParameterResp);
 8002ef4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	480c      	ldr	r0, [pc, #48]	; (8002f30 <DecAcceptFrame+0x1c8>)
 8002efe:	f003 f825 	bl	8005f4c <UFEC23ENDEC_S2CSetParameterRespEncode>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			UARTPROTOCOLENC_Send(&m_sHandleEncoder, UFEC23PROTOCOL_FRAMEID_S2CSetParameterResp, m_u8UARTOutputBuffers, u16Len);
 8002f08:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f0c:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <DecAcceptFrame+0x1c8>)
 8002f0e:	2190      	movs	r1, #144	; 0x90
 8002f10:	4808      	ldr	r0, [pc, #32]	; (8002f34 <DecAcceptFrame+0x1cc>)
 8002f12:	f002 fe1d 	bl	8005b50 <UARTPROTOCOLENC_Send>
			break;
 8002f16:	e006      	b.n	8002f26 <DecAcceptFrame+0x1be>
			break;
 8002f18:	bf00      	nop
 8002f1a:	e004      	b.n	8002f26 <DecAcceptFrame+0x1be>
				break;
 8002f1c:	bf00      	nop
 8002f1e:	e002      	b.n	8002f26 <DecAcceptFrame+0x1be>
				break;
 8002f20:	bf00      	nop
 8002f22:	e000      	b.n	8002f26 <DecAcceptFrame+0x1be>
				break;
 8002f24:	bf00      	nop
	}

}
 8002f26:	bf00      	nop
 8002f28:	3768      	adds	r7, #104	; 0x68
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200007a4 	.word	0x200007a4
 8002f34:	20000824 	.word	0x20000824
 8002f38:	20000c4c 	.word	0x20000c4c
 8002f3c:	20000f24 	.word	0x20000f24

08002f40 <DecDropFrame>:

static void DecDropFrame(const UARTPROTOCOLDEC_SHandle* psHandle, const char* szReason)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
    // Exists mostly for debug purpose
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <GetTimerCountMS>:

static int64_t GetTimerCountMS(const UARTPROTOCOLDEC_SHandle* psHandle)
{
 8002f54:	b5b0      	push	{r4, r5, r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	return xTaskGetTickCount() * portTICK_PERIOD_MS;
 8002f5c:	f00a fbe4 	bl	800d728 <xTaskGetTickCount>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2200      	movs	r2, #0
 8002f64:	461c      	mov	r4, r3
 8002f66:	4615      	mov	r5, r2
 8002f68:	4622      	mov	r2, r4
 8002f6a:	462b      	mov	r3, r5
}
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002f78 <GPIOManager>:
static uint32_t u32PressStartTime_ms = 0;
static bool bSafetyActive = false;
static uint32_t u32SafetyStartTime_ms = 0;

void GPIOManager(Mobj *stove, uint32_t u32CurrentTime_ms)
{
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]

	const PF_UsrParam* uParam = PB_GetUserParam();
 8002f82:	f000 fc51 	bl	8003828 <PB_GetUserParam>
 8002f86:	60f8      	str	r0, [r7, #12]


	// Update Thermostat boolean based on GPIO state
	stove->bThermostatOn = (HAL_GPIO_ReadPin(Thermostat_Input_GPIO_Port,Thermostat_Input_Pin) == GPIO_PIN_RESET);
 8002f88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f8c:	4872      	ldr	r0, [pc, #456]	; (8003158 <GPIOManager+0x1e0>)
 8002f8e:	f003 ff1d 	bl	8006dcc <HAL_GPIO_ReadPin>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	// Update Interlock boolean based on GPIO state
	stove->bInterlockOn = (HAL_GPIO_ReadPin(Interlock_Input_GPIO_Port,Interlock_Input_Pin) == GPIO_PIN_RESET);
 8002fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fa8:	486b      	ldr	r0, [pc, #428]	; (8003158 <GPIOManager+0x1e0>)
 8002faa:	f003 ff0f 	bl	8006dcc <HAL_GPIO_ReadPin>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	// Update Door state boolean based on GPIO state
	stove->bDoorOpen = (HAL_GPIO_ReadPin(Limit_switch_Door_GPIO_Port,Limit_switch_Door_Pin) == GPIO_PIN_SET);
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4865      	ldr	r0, [pc, #404]	; (8003158 <GPIOManager+0x1e0>)
 8002fc4:	f003 ff02 	bl	8006dcc <HAL_GPIO_ReadPin>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	// Store button GPIO state for debounce
	bButtonPressed = (HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin) == GPIO_PIN_SET);
 8002fda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fde:	485e      	ldr	r0, [pc, #376]	; (8003158 <GPIOManager+0x1e0>)
 8002fe0:	f003 fef4 	bl	8006dcc <HAL_GPIO_ReadPin>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	4b5a      	ldr	r3, [pc, #360]	; (800315c <GPIOManager+0x1e4>)
 8002ff2:	701a      	strb	r2, [r3, #0]

	if(bButtonPressed && (u32PressStartTime_ms == 0))
 8002ff4:	4b59      	ldr	r3, [pc, #356]	; (800315c <GPIOManager+0x1e4>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <GPIOManager+0x94>
 8002ffc:	4b58      	ldr	r3, [pc, #352]	; (8003160 <GPIOManager+0x1e8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <GPIOManager+0x94>
	{
		u32PressStartTime_ms = u32CurrentTime_ms;//Initialize timer
 8003004:	4a56      	ldr	r2, [pc, #344]	; (8003160 <GPIOManager+0x1e8>)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e018      	b.n	800303e <GPIOManager+0xc6>
	}
	else if(bButtonPressed && (u32CurrentTime_ms - u32PressStartTime_ms < 100)) // Software debounce
 800300c:	4b53      	ldr	r3, [pc, #332]	; (800315c <GPIOManager+0x1e4>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <GPIOManager+0xb2>
 8003014:	4b52      	ldr	r3, [pc, #328]	; (8003160 <GPIOManager+0x1e8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b63      	cmp	r3, #99	; 0x63
 800301e:	d804      	bhi.n	800302a <GPIOManager+0xb2>
	{
		stove->bReloadRequested = true; // Button is pressed, Update Reload Requested boolean
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003028:	e009      	b.n	800303e <GPIOManager+0xc6>
	}
	else if(!bButtonPressed) // Not pressed? Reset timer
 800302a:	4b4c      	ldr	r3, [pc, #304]	; (800315c <GPIOManager+0x1e4>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	f083 0301 	eor.w	r3, r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <GPIOManager+0xc6>
	{
		u32PressStartTime_ms = 0;
 8003038:	4b49      	ldr	r3, [pc, #292]	; (8003160 <GPIOManager+0x1e8>)
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
	}

	bSafetyActive = (HAL_GPIO_ReadPin(Safety_ON_GPIO_Port,Safety_ON_Pin) == GPIO_PIN_SET);
 800303e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003042:	4845      	ldr	r0, [pc, #276]	; (8003158 <GPIOManager+0x1e0>)
 8003044:	f003 fec2 	bl	8006dcc <HAL_GPIO_ReadPin>
 8003048:	4603      	mov	r3, r0
 800304a:	2b01      	cmp	r3, #1
 800304c:	bf0c      	ite	eq
 800304e:	2301      	moveq	r3, #1
 8003050:	2300      	movne	r3, #0
 8003052:	b2da      	uxtb	r2, r3
 8003054:	4b43      	ldr	r3, [pc, #268]	; (8003164 <GPIOManager+0x1ec>)
 8003056:	701a      	strb	r2, [r3, #0]

	if(bSafetyActive && (u32SafetyStartTime_ms == 0))
 8003058:	4b42      	ldr	r3, [pc, #264]	; (8003164 <GPIOManager+0x1ec>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <GPIOManager+0xf8>
 8003060:	4b41      	ldr	r3, [pc, #260]	; (8003168 <GPIOManager+0x1f0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <GPIOManager+0xf8>
	{
		u32SafetyStartTime_ms = u32CurrentTime_ms;//Initialize timer
 8003068:	4a3f      	ldr	r2, [pc, #252]	; (8003168 <GPIOManager+0x1f0>)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e01c      	b.n	80030aa <GPIOManager+0x132>
	}
	else if(bSafetyActive && (u32CurrentTime_ms - u32SafetyStartTime_ms > 100)) // Software debounce
 8003070:	4b3c      	ldr	r3, [pc, #240]	; (8003164 <GPIOManager+0x1ec>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <GPIOManager+0x116>
 8003078:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <GPIOManager+0x1f0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b64      	cmp	r3, #100	; 0x64
 8003082:	d904      	bls.n	800308e <GPIOManager+0x116>
	{
		stove->bSafetyOn = true;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 800308c:	e00d      	b.n	80030aa <GPIOManager+0x132>
	}
	else if(!bSafetyActive) // Not active? Reset timer
 800308e:	4b35      	ldr	r3, [pc, #212]	; (8003164 <GPIOManager+0x1ec>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	f083 0301 	eor.w	r3, r3, #1
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <GPIOManager+0x132>
	{
		u32SafetyStartTime_ms = 0;
 800309c:	4b32      	ldr	r3, [pc, #200]	; (8003168 <GPIOManager+0x1f0>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
		stove->bSafetyOn = false;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	}


	// Fans management
	if(stove->bDoorOpen)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01a      	beq.n	80030ea <GPIOManager+0x172>
	{
		HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 80030b4:	2200      	movs	r2, #0
 80030b6:	2140      	movs	r1, #64	; 0x40
 80030b8:	482c      	ldr	r0, [pc, #176]	; (800316c <GPIOManager+0x1f4>)
 80030ba:	f003 fe9e 	bl	8006dfa <HAL_GPIO_WritePin>
		if(stove->fBaffleTemp < P2F(uParam->s32FAN_KOP))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69dc      	ldr	r4, [r3, #28]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fe62 	bl	8000d90 <__aeabi_i2f>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4619      	mov	r1, r3
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7fe f84f 	bl	8001174 <__aeabi_fcmplt>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d100      	bne.n	80030de <GPIOManager+0x166>
		{
			HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
		}
		return;
 80030dc:	e038      	b.n	8003150 <GPIOManager+0x1d8>
			HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 80030de:	2200      	movs	r2, #0
 80030e0:	2180      	movs	r1, #128	; 0x80
 80030e2:	4822      	ldr	r0, [pc, #136]	; (800316c <GPIOManager+0x1f4>)
 80030e4:	f003 fe89 	bl	8006dfa <HAL_GPIO_WritePin>
		return;
 80030e8:	e032      	b.n	8003150 <GPIOManager+0x1d8>
	}

	if(stove->fBaffleTemp > P2F(uParam->s32FAN_KIP))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69dc      	ldr	r4, [r3, #28]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fe4c 	bl	8000d90 <__aeabi_i2f>
 80030f8:	4603      	mov	r3, r0
 80030fa:	4619      	mov	r1, r3
 80030fc:	4620      	mov	r0, r4
 80030fe:	f7fe f857 	bl	80011b0 <__aeabi_fcmpgt>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <GPIOManager+0x1a6>
	{
		  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,SET);
 8003108:	2201      	movs	r2, #1
 800310a:	2140      	movs	r1, #64	; 0x40
 800310c:	4817      	ldr	r0, [pc, #92]	; (800316c <GPIOManager+0x1f4>)
 800310e:	f003 fe74 	bl	8006dfa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,SET);
 8003112:	2201      	movs	r2, #1
 8003114:	2180      	movs	r1, #128	; 0x80
 8003116:	4815      	ldr	r0, [pc, #84]	; (800316c <GPIOManager+0x1f4>)
 8003118:	f003 fe6f 	bl	8006dfa <HAL_GPIO_WritePin>
 800311c:	e018      	b.n	8003150 <GPIOManager+0x1d8>
	}else if(stove->fBaffleTemp < P2F(uParam->s32FAN_KOP))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69dc      	ldr	r4, [r3, #28]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fe32 	bl	8000d90 <__aeabi_i2f>
 800312c:	4603      	mov	r3, r0
 800312e:	4619      	mov	r1, r3
 8003130:	4620      	mov	r0, r4
 8003132:	f7fe f81f 	bl	8001174 <__aeabi_fcmplt>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d009      	beq.n	8003150 <GPIOManager+0x1d8>
	{
		  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 800313c:	2200      	movs	r2, #0
 800313e:	2140      	movs	r1, #64	; 0x40
 8003140:	480a      	ldr	r0, [pc, #40]	; (800316c <GPIOManager+0x1f4>)
 8003142:	f003 fe5a 	bl	8006dfa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 8003146:	2200      	movs	r2, #0
 8003148:	2180      	movs	r1, #128	; 0x80
 800314a:	4808      	ldr	r0, [pc, #32]	; (800316c <GPIOManager+0x1f4>)
 800314c:	f003 fe55 	bl	8006dfa <HAL_GPIO_WritePin>
	}


}
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}
 8003156:	bf00      	nop
 8003158:	40010c00 	.word	0x40010c00
 800315c:	20000c50 	.word	0x20000c50
 8003160:	20000c54 	.word	0x20000c54
 8003164:	20000c58 	.word	0x20000c58
 8003168:	20000c5c 	.word	0x20000c5c
 800316c:	40011000 	.word	0x40011000

08003170 <Motor_task>:

bool StepperAtSetpoint(StepObj *motor);
bool StepperLimitSwitchActive(StepObj *motor);

void Motor_task(void const * argument)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b0af      	sub	sp, #188	; 0xbc
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

	Step1_2_3_WAKE();
 8003178:	2200      	movs	r2, #0
 800317a:	2110      	movs	r1, #16
 800317c:	48c2      	ldr	r0, [pc, #776]	; (8003488 <Motor_task+0x318>)
 800317e:	f003 fe3c 	bl	8006dfa <HAL_GPIO_WritePin>

	StepObj motor[NumberOfMotors] = {
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	229c      	movs	r2, #156	; 0x9c
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f00c f82e 	bl	800f1ec <memset>
 8003190:	2308      	movs	r3, #8
 8003192:	833b      	strh	r3, [r7, #24]
 8003194:	2320      	movs	r3, #32
 8003196:	837b      	strh	r3, [r7, #26]
 8003198:	2310      	movs	r3, #16
 800319a:	83bb      	strh	r3, [r7, #28]
 800319c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031a0:	83fb      	strh	r3, [r7, #30]
 80031a2:	2304      	movs	r3, #4
 80031a4:	843b      	strh	r3, [r7, #32]
 80031a6:	2301      	movs	r3, #1
 80031a8:	847b      	strh	r3, [r7, #34]	; 0x22
 80031aa:	4bb8      	ldr	r3, [pc, #736]	; (800348c <Motor_task+0x31c>)
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
 80031ae:	4bb7      	ldr	r3, [pc, #732]	; (800348c <Motor_task+0x31c>)
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b2:	4bb6      	ldr	r3, [pc, #728]	; (800348c <Motor_task+0x31c>)
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b6:	4bb4      	ldr	r3, [pc, #720]	; (8003488 <Motor_task+0x318>)
 80031b8:	633b      	str	r3, [r7, #48]	; 0x30
 80031ba:	4bb5      	ldr	r3, [pc, #724]	; (8003490 <Motor_task+0x320>)
 80031bc:	637b      	str	r3, [r7, #52]	; 0x34
 80031be:	4bb2      	ldr	r3, [pc, #712]	; (8003488 <Motor_task+0x318>)
 80031c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80031c2:	2364      	movs	r3, #100	; 0x64
 80031c4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80031c8:	2364      	movs	r3, #100	; 0x64
 80031ca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80031ce:	2361      	movs	r3, #97	; 0x61
 80031d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80031d4:	2306      	movs	r3, #6
 80031d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80031da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80031e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031ee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80031f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031f6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80031fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8003202:	2302      	movs	r3, #2
 8003204:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003208:	4b9f      	ldr	r3, [pc, #636]	; (8003488 <Motor_task+0x318>)
 800320a:	65bb      	str	r3, [r7, #88]	; 0x58
 800320c:	4b9e      	ldr	r3, [pc, #632]	; (8003488 <Motor_task+0x318>)
 800320e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003210:	4b9d      	ldr	r3, [pc, #628]	; (8003488 <Motor_task+0x318>)
 8003212:	663b      	str	r3, [r7, #96]	; 0x60
 8003214:	4b9c      	ldr	r3, [pc, #624]	; (8003488 <Motor_task+0x318>)
 8003216:	667b      	str	r3, [r7, #100]	; 0x64
 8003218:	4b9b      	ldr	r3, [pc, #620]	; (8003488 <Motor_task+0x318>)
 800321a:	66bb      	str	r3, [r7, #104]	; 0x68
 800321c:	4b9a      	ldr	r3, [pc, #616]	; (8003488 <Motor_task+0x318>)
 800321e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003220:	2364      	movs	r3, #100	; 0x64
 8003222:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8003226:	2364      	movs	r3, #100	; 0x64
 8003228:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 800322c:	2361      	movs	r3, #97	; 0x61
 800322e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8003232:	2302      	movs	r3, #2
 8003234:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8003238:	2320      	movs	r3, #32
 800323a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800323e:	2304      	movs	r3, #4
 8003240:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800324a:	2320      	movs	r3, #32
 800324c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003250:	2310      	movs	r3, #16
 8003252:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003256:	4b8d      	ldr	r3, [pc, #564]	; (800348c <Motor_task+0x31c>)
 8003258:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800325c:	4b8a      	ldr	r3, [pc, #552]	; (8003488 <Motor_task+0x318>)
 800325e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003262:	4b89      	ldr	r3, [pc, #548]	; (8003488 <Motor_task+0x318>)
 8003264:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003268:	4b8a      	ldr	r3, [pc, #552]	; (8003494 <Motor_task+0x324>)
 800326a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800326e:	4b89      	ldr	r3, [pc, #548]	; (8003494 <Motor_task+0x324>)
 8003270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003274:	4b87      	ldr	r3, [pc, #540]	; (8003494 <Motor_task+0x324>)
 8003276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800327a:	2364      	movs	r3, #100	; 0x64
 800327c:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8003280:	2364      	movs	r3, #100	; 0x64
 8003282:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8003286:	2361      	movs	r3, #97	; 0x61
 8003288:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 800328c:	2306      	movs	r3, #6
 800328e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
								Step2_STEP_GPIO_Port, Step2_ENABLE_GPIO_Port, Step2_RESET_GPIO_Port,Step2_LowCurrent_GPIO_Port,Step2_DIR_GPIO_Port, Limit_switch2_GPIO_Port),
			STEPPER_INIT(PF_SECONDARY_MINIMUM_OPENING,PF_SECONDARY_FULL_OPEN, Step3_STEP_Pin,Step3_ENABLE_Pin,Step3_RESET_Pin,Step3_LowCurrent_Pin,Step3_DIR_Pin, Limit_switch3_Pin,
										Step3_STEP_GPIO_Port,Step3_ENABLE_GPIO_Port,Step3_RESET_GPIO_Port,Step3_LowCurrent_GPIO_Port,Step3_DIR_GPIO_Port, Limit_switch3_GPIO_Port),
			};

	bool AllInPlace = true;
 8003292:	2301      	movs	r3, #1
 8003294:	74fb      	strb	r3, [r7, #19]
	uint8_t u8cmd_buf[6] = {0x00};
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	2300      	movs	r3, #0
 800329c:	823b      	strh	r3, [r7, #16]
	uint32_t u32CurrentTime_ms = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  for(;;)
  {
	  u32CurrentTime_ms = osKernelSysTick();
 80032a4:	f008 fd63 	bl	800bd6e <osKernelSysTick>
 80032a8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

	  if(xMessageBufferIsFull(MotorControlsHandle) == pdTRUE)
 80032ac:	4b7a      	ldr	r3, [pc, #488]	; (8003498 <Motor_task+0x328>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f009 fdee 	bl	800ce92 <xStreamBufferIsFull>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d148      	bne.n	800334e <Motor_task+0x1de>
	  {
		  xMessageBufferReceive(MotorControlsHandle, u8cmd_buf, 6, 5);
 80032bc:	4b76      	ldr	r3, [pc, #472]	; (8003498 <Motor_task+0x328>)
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	f107 010c 	add.w	r1, r7, #12
 80032c4:	2305      	movs	r3, #5
 80032c6:	2206      	movs	r2, #6
 80032c8:	f009 fd1d 	bl	800cd06 <xStreamBufferReceive>

		  for(uint8_t i = 0;i < NumberOfMotors;i++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80032d2:	e038      	b.n	8003346 <Motor_task+0x1d6>
		  {
#if NOVIKA_SETUP
			  motor[i].u8SetPoint = 2*MIN(u8cmd_buf[2*i], motor->u8MaxValue);
 80032d4:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80032d8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	33b8      	adds	r3, #184	; 0xb8
 80032e0:	443b      	add	r3, r7
 80032e2:	f813 3cac 	ldrb.w	r3, [r3, #-172]
 80032e6:	4293      	cmp	r3, r2
 80032e8:	bf28      	it	cs
 80032ea:	4613      	movcs	r3, r2
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80032f2:	0052      	lsls	r2, r2, #1
 80032f4:	b2d1      	uxtb	r1, r2
 80032f6:	2234      	movs	r2, #52	; 0x34
 80032f8:	fb02 f303 	mul.w	r3, r2, r3
 80032fc:	33b8      	adds	r3, #184	; 0xb8
 80032fe:	443b      	add	r3, r7
 8003300:	3b7b      	subs	r3, #123	; 0x7b
 8003302:	460a      	mov	r2, r1
 8003304:	701a      	strb	r2, [r3, #0]
#else
			  motor[i].u8SetPoint = MIN(u8cmd_buf[2*i], motor->u8MaxValue);
#endif

			  motor[i].fSecPerStep = (float) (u8cmd_buf[2*i + 1])/10;
 8003306:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	3301      	adds	r3, #1
 800330e:	33b8      	adds	r3, #184	; 0xb8
 8003310:	443b      	add	r3, r7
 8003312:	f813 3cac 	ldrb.w	r3, [r3, #-172]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd fd36 	bl	8000d88 <__aeabi_ui2f>
 800331c:	4603      	mov	r3, r0
 800331e:	f897 40b7 	ldrb.w	r4, [r7, #183]	; 0xb7
 8003322:	495e      	ldr	r1, [pc, #376]	; (800349c <Motor_task+0x32c>)
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd fe3b 	bl	8000fa0 <__aeabi_fdiv>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	2334      	movs	r3, #52	; 0x34
 8003330:	fb04 f303 	mul.w	r3, r4, r3
 8003334:	33b8      	adds	r3, #184	; 0xb8
 8003336:	443b      	add	r3, r7
 8003338:	3b74      	subs	r3, #116	; 0x74
 800333a:	601a      	str	r2, [r3, #0]
		  for(uint8_t i = 0;i < NumberOfMotors;i++)
 800333c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8003340:	3301      	adds	r3, #1
 8003342:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8003346:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800334a:	2b02      	cmp	r3, #2
 800334c:	d9c2      	bls.n	80032d4 <Motor_task+0x164>
		  }
	  }


	  if(StepperAtSetpoint(&motor[PrimaryStepper]) && StepperAtSetpoint(&motor[GrillStepper]) //TODO: receive commands at every passage
 800334e:	f107 0314 	add.w	r3, r7, #20
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f8e6 	bl	8003524 <StepperAtSetpoint>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d023      	beq.n	80033a6 <Motor_task+0x236>
 800335e:	f107 0314 	add.w	r3, r7, #20
 8003362:	3334      	adds	r3, #52	; 0x34
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f8dd 	bl	8003524 <StepperAtSetpoint>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01a      	beq.n	80033a6 <Motor_task+0x236>
			  && StepperAtSetpoint(&motor[SecondaryStepper]))
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	3368      	adds	r3, #104	; 0x68
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f8d4 	bl	8003524 <StepperAtSetpoint>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d011      	beq.n	80033a6 <Motor_task+0x236>
	  {
		  if(!AllInPlace)
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	f083 0301 	eor.w	r3, r3, #1
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80c4 	beq.w	8003518 <Motor_task+0x3a8>
		  {
			  AllInPlace = true;
 8003390:	2301      	movs	r3, #1
 8003392:	74fb      	strb	r3, [r7, #19]
			  xQueueSend(MotorInPlaceHandle,&AllInPlace,0);
 8003394:	4b42      	ldr	r3, [pc, #264]	; (80034a0 <Motor_task+0x330>)
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	f107 0113 	add.w	r1, r7, #19
 800339c:	2300      	movs	r3, #0
 800339e:	2200      	movs	r2, #0
 80033a0:	f008 ff76 	bl	800c290 <xQueueGenericSend>
		  if(!AllInPlace)
 80033a4:	e0b8      	b.n	8003518 <Motor_task+0x3a8>
		  }

	  }else
	  {
		  AllInPlace = false;
 80033a6:	2300      	movs	r3, #0
 80033a8:	74fb      	strb	r3, [r7, #19]
		  for(uint8_t i = 0;i < NumberOfMotors;i++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 80033b0:	e0ad      	b.n	800350e <Motor_task+0x39e>
		  {

			  if(!StepperAtSetpoint(&motor[i]) && (u32CurrentTime_ms - motor[i].u32LastMove_ms > STEP_PERIOD))
 80033b2:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80033b6:	f107 0214 	add.w	r2, r7, #20
 80033ba:	2134      	movs	r1, #52	; 0x34
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f8ae 	bl	8003524 <StepperAtSetpoint>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f083 0301 	eor.w	r3, r3, #1
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8097 	beq.w	8003504 <Motor_task+0x394>
 80033d6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80033da:	2234      	movs	r2, #52	; 0x34
 80033dc:	fb02 f303 	mul.w	r3, r2, r3
 80033e0:	33b8      	adds	r3, #184	; 0xb8
 80033e2:	443b      	add	r3, r7
 80033e4:	3b78      	subs	r3, #120	; 0x78
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	f240 8088 	bls.w	8003504 <Motor_task+0x394>
			  {
				  if((motor[i].u8SetPoint == 0) && (motor[i].fSecPerStep == 0.0))
 80033f4:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80033f8:	2234      	movs	r2, #52	; 0x34
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	33b8      	adds	r3, #184	; 0xb8
 8003400:	443b      	add	r3, r7
 8003402:	3b7b      	subs	r3, #123	; 0x7b
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d14c      	bne.n	80034a4 <Motor_task+0x334>
 800340a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800340e:	2234      	movs	r2, #52	; 0x34
 8003410:	fb02 f303 	mul.w	r3, r2, r3
 8003414:	33b8      	adds	r3, #184	; 0xb8
 8003416:	443b      	add	r3, r7
 8003418:	3b74      	subs	r3, #116	; 0x74
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f04f 0100 	mov.w	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd fe9d 	bl	8001160 <__aeabi_fcmpeq>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d03b      	beq.n	80034a4 <Motor_task+0x334>
				  {
					  if(StepperSetToZero(&motor[i]))
 800342c:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003430:	f107 0214 	add.w	r2, r7, #20
 8003434:	2134      	movs	r1, #52	; 0x34
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f885 	bl	800354c <StepperSetToZero>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d05d      	beq.n	8003504 <Motor_task+0x394>
					  {
						  motor[i].u8SetPoint = motor[i].u8MinValue;
 8003448:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 800344c:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003450:	2134      	movs	r1, #52	; 0x34
 8003452:	fb01 f202 	mul.w	r2, r1, r2
 8003456:	32b8      	adds	r2, #184	; 0xb8
 8003458:	443a      	add	r2, r7
 800345a:	3a79      	subs	r2, #121	; 0x79
 800345c:	7811      	ldrb	r1, [r2, #0]
 800345e:	2234      	movs	r2, #52	; 0x34
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	33b8      	adds	r3, #184	; 0xb8
 8003466:	443b      	add	r3, r7
 8003468:	3b7b      	subs	r3, #123	; 0x7b
 800346a:	460a      	mov	r2, r1
 800346c:	701a      	strb	r2, [r3, #0]
						  StepperDisable(&motor[i]);
 800346e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003472:	f107 0214 	add.w	r2, r7, #20
 8003476:	2134      	movs	r1, #52	; 0x34
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	4413      	add	r3, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f969 	bl	8003756 <StepperDisable>
					  if(StepperSetToZero(&motor[i]))
 8003484:	e03e      	b.n	8003504 <Motor_task+0x394>
 8003486:	bf00      	nop
 8003488:	40011000 	.word	0x40011000
 800348c:	40010c00 	.word	0x40010c00
 8003490:	40011400 	.word	0x40011400
 8003494:	40010800 	.word	0x40010800
 8003498:	200018a4 	.word	0x200018a4
 800349c:	41200000 	.word	0x41200000
 80034a0:	200018a8 	.word	0x200018a8
					  }

				  }else if(u32CurrentTime_ms - motor[i].u32LastMove_ms > motor[i].fSecPerStep*1000)
 80034a4:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80034a8:	2234      	movs	r2, #52	; 0x34
 80034aa:	fb02 f303 	mul.w	r3, r2, r3
 80034ae:	33b8      	adds	r3, #184	; 0xb8
 80034b0:	443b      	add	r3, r7
 80034b2:	3b78      	subs	r3, #120	; 0x78
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fd fc63 	bl	8000d88 <__aeabi_ui2f>
 80034c2:	4604      	mov	r4, r0
 80034c4:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80034c8:	2234      	movs	r2, #52	; 0x34
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	33b8      	adds	r3, #184	; 0xb8
 80034d0:	443b      	add	r3, r7
 80034d2:	3b74      	subs	r3, #116	; 0x74
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4912      	ldr	r1, [pc, #72]	; (8003520 <Motor_task+0x3b0>)
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fd fcad 	bl	8000e38 <__aeabi_fmul>
 80034de:	4603      	mov	r3, r0
 80034e0:	4619      	mov	r1, r3
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7fd fe64 	bl	80011b0 <__aeabi_fcmpgt>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <Motor_task+0x394>
				  {
					  StepperAdjustPosition(&motor[i]);
 80034ee:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80034f2:	f107 0214 	add.w	r2, r7, #20
 80034f6:	2134      	movs	r1, #52	; 0x34
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f84d 	bl	800359e <StepperAdjustPosition>
		  for(uint8_t i = 0;i < NumberOfMotors;i++)
 8003504:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003508:	3301      	adds	r3, #1
 800350a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 800350e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003512:	2b02      	cmp	r3, #2
 8003514:	f67f af4d 	bls.w	80033b2 <Motor_task+0x242>

		  }

	  }

	  osDelay(1);
 8003518:	2001      	movs	r0, #1
 800351a:	f008 fc84 	bl	800be26 <osDelay>
	  u32CurrentTime_ms = osKernelSysTick();
 800351e:	e6c1      	b.n	80032a4 <Motor_task+0x134>
 8003520:	447a0000 	.word	0x447a0000

08003524 <StepperAtSetpoint>:


}

bool StepperAtSetpoint(StepObj *motor)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
	return motor->u8Position == motor->u8SetPoint;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003538:	429a      	cmp	r2, r3
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <StepperSetToZero>:

bool StepperSetToZero(StepObj *motor)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	if(!StepperLimitSwitchActive(motor))
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f8b0 	bl	80036ba <StepperLimitSwitchActive>
 800355a:	4603      	mov	r3, r0
 800355c:	f083 0301 	eor.w	r3, r3, #1
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d010      	beq.n	8003588 <StepperSetToZero+0x3c>
	{
		StepperEnable(motor);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f8bd 	bl	80036e6 <StepperEnable>
		StepperLowCurrentON(motor);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f8e2 	bl	8003736 <StepperLowCurrentON>
	    motor->sDirection = Closing;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]
	    StepperSetDirection(motor);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f8fc 	bl	8003776 <StepperSetDirection>

	    StepperToggleOneStep(motor);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f87b 	bl	800367a <StepperToggleOneStep>
	    return false;
 8003584:	2300      	movs	r3, #0
 8003586:	e006      	b.n	8003596 <StepperSetToZero+0x4a>

	}
	motor->u8Position = motor->u8MinValue;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	return true;
 8003594:	2301      	movs	r3, #1
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <StepperAdjustPosition>:
    	osDelay(50);
	}
}
*/
void StepperAdjustPosition(StepObj *motor)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]

	int8_t delta_pos;

    if(StepperLimitSwitchActive(motor))
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f887 	bl	80036ba <StepperLimitSwitchActive>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <StepperAdjustPosition+0x20>
    {
    	motor->u8Position = motor->u8MinValue;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

	StepperEnable(motor);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f891 	bl	80036e6 <StepperEnable>
	StepperLowCurrentOFF(motor);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f8a6 	bl	8003716 <StepperLowCurrentOFF>

	if(motor->u8Position > motor->u8SetPoint)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d908      	bls.n	80035ec <StepperAdjustPosition+0x4e>
	{
		motor->sDirection = Closing;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
		StepperSetDirection(motor);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f8c8 	bl	8003776 <StepperSetDirection>
		delta_pos = -1;
 80035e6:	23ff      	movs	r3, #255	; 0xff
 80035e8:	73fb      	strb	r3, [r7, #15]
 80035ea:	e007      	b.n	80035fc <StepperAdjustPosition+0x5e>
	}
	else
	{
		motor->sDirection = Opening;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
		StepperSetDirection(motor);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8bf 	bl	8003776 <StepperSetDirection>
		delta_pos = 1;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
	}


    motor->u8Position += delta_pos;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	4413      	add	r3, r2
 8003606:	b2da      	uxtb	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	StepperToggleOneStep(motor);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f833 	bl	800367a <StepperToggleOneStep>

    if(StepperLimitSwitchActive(motor) && motor->sDirection == Closing)
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f850 	bl	80036ba <StepperLimitSwitchActive>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00d      	beq.n	800363c <StepperAdjustPosition+0x9e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d109      	bne.n	800363c <StepperAdjustPosition+0x9e>
	{
		motor->u8Position = motor->u8MinValue; // On a atteint le minimum, on peut désactiver le moteur
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		StepperDisable(motor);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f88e 	bl	8003756 <StepperDisable>
 800363a:	e00f      	b.n	800365c <StepperAdjustPosition+0xbe>
	}
    else if(motor->u8Position == motor->u8MinValue) // On pense qu'on est au minimum, mais on est perdu
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003648:	429a      	cmp	r2, r3
 800364a:	d107      	bne.n	800365c <StepperAdjustPosition+0xbe>
    {
    	motor->u8SetPoint = 0; 		// On demande une remise à zéro
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    	motor->fSecPerStep = 0.0;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if(motor->u8Position == motor->u8SetPoint)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003668:	429a      	cmp	r2, r3
 800366a:	d102      	bne.n	8003672 <StepperAdjustPosition+0xd4>
    {
    	StepperLowCurrentON(motor); // To remove if spring load is too strong (reduces torque)
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f862 	bl	8003736 <StepperLowCurrentON>
    }

}
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <StepperToggleOneStep>:

void StepperToggleOneStep(StepObj * motor)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(motor->sPins.PWM_PORT,motor->sPins.PWM_PIN,GPIO_PIN_RESET);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6918      	ldr	r0, [r3, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	889b      	ldrh	r3, [r3, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	4619      	mov	r1, r3
 800368e:	f003 fbb4 	bl	8006dfa <HAL_GPIO_WritePin>
	osDelay(STEP_PERIOD);
 8003692:	2001      	movs	r0, #1
 8003694:	f008 fbc7 	bl	800be26 <osDelay>
	HAL_GPIO_WritePin(motor->sPins.PWM_PORT,motor->sPins.PWM_PIN,GPIO_PIN_SET);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6918      	ldr	r0, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	889b      	ldrh	r3, [r3, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	4619      	mov	r1, r3
 80036a4:	f003 fba9 	bl	8006dfa <HAL_GPIO_WritePin>
	motor->u32LastMove_ms = osKernelSysTick();
 80036a8:	f008 fb61 	bl	800bd6e <osKernelSysTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <StepperLimitSwitchActive>:
bool StepperLimitSwitchActive(StepObj * motor)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]

	return HAL_GPIO_ReadPin(motor->sPins.SWITCH_PORT,motor->sPins.SWITCH_PIN) == GPIO_PIN_RESET;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	89db      	ldrh	r3, [r3, #14]
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f003 fb7d 	bl	8006dcc <HAL_GPIO_ReadPin>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <StepperEnable>:

void StepperEnable(StepObj * motor)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->sPins.ENABLE_PORT,motor->sPins.ENABLE_PIN,GPIO_PIN_RESET);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6958      	ldr	r0, [r3, #20]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	88db      	ldrh	r3, [r3, #6]
 80036f6:	2200      	movs	r2, #0
 80036f8:	4619      	mov	r1, r3
 80036fa:	f003 fb7e 	bl	8006dfa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->sPins.RESET_PORT,motor->sPins.RESET_PIN,GPIO_PIN_SET);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6998      	ldr	r0, [r3, #24]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	891b      	ldrh	r3, [r3, #8]
 8003706:	2201      	movs	r2, #1
 8003708:	4619      	mov	r1, r3
 800370a:	f003 fb76 	bl	8006dfa <HAL_GPIO_WritePin>
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <StepperLowCurrentOFF>:

void StepperLowCurrentOFF(StepObj *motor)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->sPins.LOW_CURRENT_PORT,motor->sPins.LOW_CURRENT_PIN,GPIO_PIN_RESET);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69d8      	ldr	r0, [r3, #28]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	895b      	ldrh	r3, [r3, #10]
 8003726:	2200      	movs	r2, #0
 8003728:	4619      	mov	r1, r3
 800372a:	f003 fb66 	bl	8006dfa <HAL_GPIO_WritePin>
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <StepperLowCurrentON>:

void StepperLowCurrentON(StepObj *motor)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->sPins.LOW_CURRENT_PORT,motor->sPins.LOW_CURRENT_PIN,GPIO_PIN_SET);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69d8      	ldr	r0, [r3, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	895b      	ldrh	r3, [r3, #10]
 8003746:	2201      	movs	r2, #1
 8003748:	4619      	mov	r1, r3
 800374a:	f003 fb56 	bl	8006dfa <HAL_GPIO_WritePin>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <StepperDisable>:

void StepperDisable(StepObj *motor)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->sPins.ENABLE_PORT,motor->sPins.ENABLE_PIN,GPIO_PIN_SET);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6958      	ldr	r0, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	88db      	ldrh	r3, [r3, #6]
 8003766:	2201      	movs	r2, #1
 8003768:	4619      	mov	r1, r3
 800376a:	f003 fb46 	bl	8006dfa <HAL_GPIO_WritePin>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <StepperSetDirection>:

void StepperSetDirection(StepObj *motor)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->sPins.DIRECTION_PORT,motor->sPins.DIRECTION_PIN,motor->sDirection);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a18      	ldr	r0, [r3, #32]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8999      	ldrh	r1, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	f003 fb35 	bl	8006dfa <HAL_GPIO_WritePin>
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <PARAMFILE_Init>:

PFL_SHandle PARAMFILE_g_sHandle;
const PFL_SConfig m_sConfig = { .ptrLoadAll = LoadAllCallback, .ptrCommitAll = CommitAllCallback };

void PARAMFILE_Init()
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
	PFL_Init(&PARAMFILE_g_sHandle,  m_sParameterItems, PARAMETERITEM_COUNT, &m_sConfig);
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <PARAMFILE_Init+0x1c>)
 800379e:	2271      	movs	r2, #113	; 0x71
 80037a0:	4905      	ldr	r1, [pc, #20]	; (80037b8 <PARAMFILE_Init+0x20>)
 80037a2:	4806      	ldr	r0, [pc, #24]	; (80037bc <PARAMFILE_Init+0x24>)
 80037a4:	f000 f8a4 	bl	80038f0 <PFL_Init>
	//PFL_LoadAll(&PARAMFILE_g_sHandle);
	PFL_LoadAllDefault(&PARAMFILE_g_sHandle);
 80037a8:	4804      	ldr	r0, [pc, #16]	; (80037bc <PARAMFILE_Init+0x24>)
 80037aa:	f000 f8b6 	bl	800391a <PFL_LoadAllDefault>
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	080148c4 	.word	0x080148c4
 80037b8:	08013c68 	.word	0x08013c68
 80037bc:	20000f24 	.word	0x20000f24

080037c0 <PARAMFILE_GetParamEntryCount>:

uint32_t PARAMFILE_GetParamEntryCount()
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
	return PARAMFILE_g_sHandle.u32ParameterEntryCount;
 80037c4:	4b02      	ldr	r3, [pc, #8]	; (80037d0 <PARAMFILE_GetParamEntryCount+0x10>)
 80037c6:	685b      	ldr	r3, [r3, #4]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	20000f24 	.word	0x20000f24

080037d4 <PARAMFILE_GetParamEntryByIndex>:

const PFL_SParameterItem* PARAMFILE_GetParamEntryByIndex(uint32_t u32Index)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	if (u32Index >= PARAMETERITEM_COUNT)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b70      	cmp	r3, #112	; 0x70
 80037e0:	d901      	bls.n	80037e6 <PARAMFILE_GetParamEntryByIndex+0x12>
		return NULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e007      	b.n	80037f6 <PARAMFILE_GetParamEntryByIndex+0x22>
	return &PARAMFILE_g_sHandle.pParameterEntries[u32Index];
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <PARAMFILE_GetParamEntryByIndex+0x2c>)
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	20000f24 	.word	0x20000f24

08003804 <LoadAllCallback>:

static void LoadAllCallback(const PFL_SHandle* psHandle)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	// TODO: Flash reading is not yet implemented
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <CommitAllCallback>:

static void CommitAllCallback(const PFL_SHandle* psHandle)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
	// TODO: Flash writing is not yet implemented
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <PB_GetUserParam>:


const PF_UsrParam* PB_GetUserParam()
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
	return &m_sMemBlock;
 800382c:	4b02      	ldr	r3, [pc, #8]	; (8003838 <PB_GetUserParam+0x10>)
}
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000ef4 	.word	0x20000ef4

0800383c <PB_GetOverheatParams>:

const PF_OverHeat_Thresholds_t* PB_GetOverheatParams(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
	return &m_sOverheatParams;
 8003840:	4b02      	ldr	r3, [pc, #8]	; (800384c <PB_GetOverheatParams+0x10>)
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000ee4 	.word	0x20000ee4

08003850 <PB_GetWaitingParams>:


const PF_StateParam_t *PB_GetWaitingParams(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
	return &m_sWaitingParams;
 8003854:	4b02      	ldr	r3, [pc, #8]	; (8003860 <PB_GetWaitingParams+0x10>)
}
 8003856:	4618      	mov	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000c60 	.word	0x20000c60

08003864 <PB_GetReloadParams>:
const PF_StateParam_t *PB_GetReloadParams(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
	return &m_sReloadParams;
 8003868:	4b02      	ldr	r3, [pc, #8]	; (8003874 <PB_GetReloadParams+0x10>)
}
 800386a:	4618      	mov	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000cbc 	.word	0x20000cbc

08003878 <PB_GetTRiseParams>:
const PF_StateParam_t *PB_GetTRiseParams(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
	return &m_sTRiseParams;
 800387c:	4b02      	ldr	r3, [pc, #8]	; (8003888 <PB_GetTRiseParams+0x10>)
}
 800387e:	4618      	mov	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000d18 	.word	0x20000d18

0800388c <PB_GetCombLowParams>:
const PF_StateParam_t *PB_GetCombLowParams(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
	return &m_sCombLowParams;
 8003890:	4b02      	ldr	r3, [pc, #8]	; (800389c <PB_GetCombLowParams+0x10>)
}
 8003892:	4618      	mov	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000d74 	.word	0x20000d74

080038a0 <PB_GetCombHighParams>:
const PF_StateParam_t *PB_GetCombHighParams(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
	return &m_sCombHighParams;
 80038a4:	4b02      	ldr	r3, [pc, #8]	; (80038b0 <PB_GetCombHighParams+0x10>)
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000dd0 	.word	0x20000dd0

080038b4 <PB_GetCoalLowParams>:
const PF_StateParam_t *PB_GetCoalLowParams(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
	return &m_sCoalLowParams;
 80038b8:	4b02      	ldr	r3, [pc, #8]	; (80038c4 <PB_GetCoalLowParams+0x10>)
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000e2c 	.word	0x20000e2c

080038c8 <PB_GetCoalHighParams>:
const PF_StateParam_t *PB_GetCoalHighParams(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
	return &m_sCoalHighParams;
 80038cc:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <PB_GetCoalHighParams+0x10>)
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000e88 	.word	0x20000e88

080038dc <PB_SpeedParams>:

const PF_StepperStepsPerSec_t *PB_SpeedParams(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
	return &m_sSpeedParams;
 80038e0:	4b02      	ldr	r3, [pc, #8]	; (80038ec <PB_SpeedParams+0x10>)
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000f10 	.word	0x20000f10

080038f0 <PFL_Init>:

static const PFL_SParameterItem* GetParameterEntryByKey(const PFL_SHandle* pHandle, const char* szKey);
static PFL_ESETRET ValidateValueInt32(const PFL_SHandle* pHandle, const PFL_SParameterItem* pParameterFile, int32_t s32Value);

void PFL_Init(PFL_SHandle* pHandle, const PFL_SParameterItem* pParameterEntries, uint32_t u32ParameterEntryCount, const PFL_SConfig* psConfig)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
	pHandle->pParameterEntries = pParameterEntries;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	601a      	str	r2, [r3, #0]
	pHandle->u32ParameterEntryCount = u32ParameterEntryCount;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	605a      	str	r2, [r3, #4]

	pHandle->psConfig = psConfig;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	609a      	str	r2, [r3, #8]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <PFL_LoadAllDefault>:
		}
	}
}

void PFL_LoadAllDefault(PFL_SHandle* pHandle)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
	if (pHandle->psConfig->ptrLoadAll != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d004      	beq.n	8003936 <PFL_LoadAllDefault+0x1c>
		pHandle->psConfig->ptrLoadAll(pHandle);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3

	// Verify variables and load default value if necessary
	for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	e016      	b.n	800396a <PFL_LoadAllDefault+0x50>
	{
		const PFL_SParameterItem* pEnt = &pHandle->pParameterEntries[i];
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6819      	ldr	r1, [r3, #0]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4613      	mov	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	613b      	str	r3, [r7, #16]

		if (pEnt->eType == PFL_TYPE_Int32)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	7a1b      	ldrb	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <PFL_LoadAllDefault+0x4a>
		{
			int32_t* ps32Value = ((int32_t*)pEnt->vdVar);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	60fb      	str	r3, [r7, #12]
			*ps32Value = pEnt->uType.sInt32.s32Default;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	3301      	adds	r3, #1
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	429a      	cmp	r2, r3
 8003972:	d8e3      	bhi.n	800393c <PFL_LoadAllDefault+0x22>
		}
	}
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <PFL_GetValueInt32>:
	if (pHandle->psConfig->ptrCommitAll != NULL)
		pHandle->psConfig->ptrCommitAll(pHandle);
}

PFL_ESETRET PFL_GetValueInt32(const PFL_SHandle* pHandle, const char* szName, int32_t* psOut32Value)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b086      	sub	sp, #24
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
	const PFL_SParameterItem* pEnt = GetParameterEntryByKey(pHandle, szName);
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f873 	bl	8003a78 <GetParameterEntryByKey>
 8003992:	6178      	str	r0, [r7, #20]
	if (pEnt == NULL || pEnt->eType != PFL_TYPE_Int32 || pEnt->vdVar == NULL)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <PFL_GetValueInt32+0x2c>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	7a1b      	ldrb	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <PFL_GetValueInt32+0x2c>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <PFL_GetValueInt32+0x30>
		return PFL_ESETRET_EntryNoFound;
 80039aa:	2304      	movs	r3, #4
 80039ac:	e007      	b.n	80039be <PFL_GetValueInt32+0x40>

	const int32_t* ps32Value = ((int32_t*)pEnt->vdVar);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	613b      	str	r3, [r7, #16]
	if (eValidateRet != PFL_ESETRET_OK)
	{
		*psOut32Value = pEnt->uType.sInt32.s32Default;
		return eValidateRet;
	}*/
	*psOut32Value = *ps32Value;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	601a      	str	r2, [r3, #0]
	return PFL_ESETRET_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <PFL_SetValueInt32>:

PFL_ESETRET PFL_SetValueInt32(const PFL_SHandle* pHandle, const char* szName, int32_t s32NewValue)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b088      	sub	sp, #32
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
	const PFL_SParameterItem* pEnt = GetParameterEntryByKey(pHandle, szName);
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f84f 	bl	8003a78 <GetParameterEntryByKey>
 80039da:	61f8      	str	r0, [r7, #28]
	if (pEnt == NULL || pEnt->eType != PFL_TYPE_Int32 || pEnt->vdVar == NULL)
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <PFL_SetValueInt32+0x2c>
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	7a1b      	ldrb	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <PFL_SetValueInt32+0x2c>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <PFL_SetValueInt32+0x30>
		return PFL_ESETRET_EntryNoFound;
 80039f2:	2304      	movs	r3, #4
 80039f4:	e012      	b.n	8003a1c <PFL_SetValueInt32+0x56>
	int32_t* ps32Value = ((int32_t*)pEnt->vdVar);
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	61bb      	str	r3, [r7, #24]
	const PFL_ESETRET eValidateRet = ValidateValueInt32(pHandle, pEnt, s32NewValue);
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	69f9      	ldr	r1, [r7, #28]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f80f 	bl	8003a24 <ValidateValueInt32>
 8003a06:	4603      	mov	r3, r0
 8003a08:	75fb      	strb	r3, [r7, #23]
	if (eValidateRet != PFL_ESETRET_OK)
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <PFL_SetValueInt32+0x4e>
		return eValidateRet;
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
 8003a12:	e003      	b.n	8003a1c <PFL_SetValueInt32+0x56>
	// We can record if it pass validation step
	*ps32Value = s32NewValue;
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]
	return PFL_ESETRET_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3720      	adds	r7, #32
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <ValidateValueInt32>:

static PFL_ESETRET ValidateValueInt32(const PFL_SHandle* pHandle, const PFL_SParameterItem* pParameterFile, int32_t s32Value)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
    assert(pParameterFile != NULL && pParameterFile->eType == PFL_TYPE_Int32);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <ValidateValueInt32+0x1a>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	7a1b      	ldrb	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <ValidateValueInt32+0x26>
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <ValidateValueInt32+0x48>)
 8003a40:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <ValidateValueInt32+0x4c>)
 8003a42:	2169      	movs	r1, #105	; 0x69
 8003a44:	480b      	ldr	r0, [pc, #44]	; (8003a74 <ValidateValueInt32+0x50>)
 8003a46:	f00b fb69 	bl	800f11c <__assert_func>
	if (s32Value < pParameterFile->uType.sInt32.s32Min || s32Value > pParameterFile->uType.sInt32.s32Max)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	db04      	blt.n	8003a5e <ValidateValueInt32+0x3a>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	dd01      	ble.n	8003a62 <ValidateValueInt32+0x3e>
		return PFL_ESETRET_InvalidRange;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e000      	b.n	8003a64 <ValidateValueInt32+0x40>
	return PFL_ESETRET_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	080139d8 	.word	0x080139d8
 8003a70:	080148cc 	.word	0x080148cc
 8003a74:	08013a1c 	.word	0x08013a1c

08003a78 <GetParameterEntryByKey>:

static const PFL_SParameterItem* GetParameterEntryByKey(const PFL_SHandle* pHandle, const char* szKey)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	e016      	b.n	8003ab6 <GetParameterEntryByKey+0x3e>
    {
    	const PFL_SParameterItem* pParamItem = &pHandle->pParameterEntries[i];
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	60bb      	str	r3, [r7, #8]
        if (strcmp(pParamItem->szKey, szKey) == 0)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6839      	ldr	r1, [r7, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fc fbc5 	bl	8000230 <strcmp>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <GetParameterEntryByKey+0x38>
            return pParamItem;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	e008      	b.n	8003ac2 <GetParameterEntryByKey+0x4a>
    for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d8e3      	bhi.n	8003a88 <GetParameterEntryByKey+0x10>
    }
    return NULL;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <Particle_Init>:

uint16_t Particle_Send_CMD(uint8_t cmd);


void Particle_Init(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
	ParticleDevice.fLED_current_meas = 0;
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <Particle_Init+0x74>)
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	61da      	str	r2, [r3, #28]
	ParticleDevice.u16ch0_ON = 0;
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <Particle_Init+0x74>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	801a      	strh	r2, [r3, #0]
	ParticleDevice.u16ch0_OFF = 0;
 8003ade:	4b18      	ldr	r3, [pc, #96]	; (8003b40 <Particle_Init+0x74>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	805a      	strh	r2, [r3, #2]
	ParticleDevice.u16ch1_ON = 0;
 8003ae4:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <Particle_Init+0x74>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	809a      	strh	r2, [r3, #4]
	ParticleDevice.u16ch1_OFF = 0;
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <Particle_Init+0x74>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	80da      	strh	r2, [r3, #6]
	ParticleDevice.u16stDev = 0;
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <Particle_Init+0x74>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	811a      	strh	r2, [r3, #8]
	ParticleDevice.u16temperature = 0;
 8003af6:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <Particle_Init+0x74>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	815a      	strh	r2, [r3, #10]
	ParticleDevice.fLED_current_meas = 0;
 8003afc:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <Particle_Init+0x74>)
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	61da      	str	r2, [r3, #28]
	ParticleDevice.fslope = 0;
 8003b04:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <Particle_Init+0x74>)
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	619a      	str	r2, [r3, #24]
	ParticleDevice.u16Lux_ON = 0;
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <Particle_Init+0x74>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	841a      	strh	r2, [r3, #32]
	ParticleDevice.u16Lux_OFF = 0;
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <Particle_Init+0x74>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	845a      	strh	r2, [r3, #34]	; 0x22
	ParticleDevice.u16TimeSinceInit = 0;
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <Particle_Init+0x74>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24
	ParticleDevice.u16Last_particle_time = 0;
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <Particle_Init+0x74>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
	ParticleDevice.fnormalized_zero = 80.0;
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <Particle_Init+0x74>)
 8003b26:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <Particle_Init+0x78>)
 8003b28:	611a      	str	r2, [r3, #16]

	currentState = Idle;
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <Particle_Init+0x7c>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
	nextState = Idle;
 8003b30:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <Particle_Init+0x80>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
}
 8003b36:	bf00      	nop
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000f88 	.word	0x20000f88
 8003b44:	42a00000 	.word	0x42a00000
 8003b48:	20000f30 	.word	0x20000f30
 8003b4c:	20000f31 	.word	0x20000f31

08003b50 <ParticlesManager>:

void ParticlesManager(uint32_t u32Time_ms)
{
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	static uint16_t tx_checksum, rx_checksum;
	static uint8_t rx_payload_size, tx_size;
	static uint32_t response_delay = 800;
	static uint8_t request_interval = TIME_TO_WAIT_IF_OK;
	static uint32_t u32LastReqTime = 0;
	int slp_sign = 1;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]


	switch(currentState)
 8003b5c:	4b9e      	ldr	r3, [pc, #632]	; (8003dd8 <ParticlesManager+0x288>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	f200 8271 	bhi.w	8004048 <ParticlesManager+0x4f8>
 8003b66:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <ParticlesManager+0x1c>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08003b81 	.word	0x08003b81
 8003b70:	08003c97 	.word	0x08003c97
 8003b74:	08003cdb 	.word	0x08003cdb
 8003b78:	08003d4f 	.word	0x08003d4f
 8003b7c:	08003e31 	.word	0x08003e31
	{
	case Idle:
		if(u32Time_ms - u32LastReqTime > SECONDS(request_interval))
 8003b80:	4b96      	ldr	r3, [pc, #600]	; (8003ddc <ParticlesManager+0x28c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	4a95      	ldr	r2, [pc, #596]	; (8003de0 <ParticlesManager+0x290>)
 8003b8a:	7812      	ldrb	r2, [r2, #0]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b92:	fb01 f202 	mul.w	r2, r1, r2
 8003b96:	4293      	cmp	r3, r2
 8003b98:	f240 8253 	bls.w	8004042 <ParticlesManager+0x4f2>
		{
			//GC 2023-07-19 debug
			if(config_mode)
 8003b9c:	4b91      	ldr	r3, [pc, #580]	; (8003de4 <ParticlesManager+0x294>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d040      	beq.n	8003c26 <ParticlesManager+0xd6>
			{
				//Test unitaire - WRITE CMD
				TX_BUFFER[0] = START_BYTE;
 8003ba4:	4b90      	ldr	r3, [pc, #576]	; (8003de8 <ParticlesManager+0x298>)
 8003ba6:	22cc      	movs	r2, #204	; 0xcc
 8003ba8:	701a      	strb	r2, [r3, #0]
				TX_BUFFER[1] = WRITE_CMD | 0x04; //Attention, devrait etre 0x05, updater aussi PF_VvalidatateConfig
 8003baa:	4b8f      	ldr	r3, [pc, #572]	; (8003de8 <ParticlesManager+0x298>)
 8003bac:	22c4      	movs	r2, #196	; 0xc4
 8003bae:	705a      	strb	r2, [r3, #1]
				tx_checksum = TX_BUFFER[1];
 8003bb0:	4b8d      	ldr	r3, [pc, #564]	; (8003de8 <ParticlesManager+0x298>)
 8003bb2:	785b      	ldrb	r3, [r3, #1]
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	4b8d      	ldr	r3, [pc, #564]	; (8003dec <ParticlesManager+0x29c>)
 8003bb8:	801a      	strh	r2, [r3, #0]
				TX_BUFFER[2] = 3;//(uint8_t)pParam->s32TLSGAIN;
 8003bba:	4b8b      	ldr	r3, [pc, #556]	; (8003de8 <ParticlesManager+0x298>)
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	709a      	strb	r2, [r3, #2]
				TX_BUFFER[3] = 5;//(uint8_t)pParam->s32TSLINT;
 8003bc0:	4b89      	ldr	r3, [pc, #548]	; (8003de8 <ParticlesManager+0x298>)
 8003bc2:	2205      	movs	r2, #5
 8003bc4:	70da      	strb	r2, [r3, #3]
				TX_BUFFER[4] = 7;//(uint8_t)pParam->s32DACCMD;
 8003bc6:	4b88      	ldr	r3, [pc, #544]	; (8003de8 <ParticlesManager+0x298>)
 8003bc8:	2207      	movs	r2, #7
 8003bca:	711a      	strb	r2, [r3, #4]
				TX_BUFFER[5] = 10;//(uint8_t)pParam->s32TIMEINTERVAL;  //GC Attention, devrait être un WORD (2 byte)
 8003bcc:	4b86      	ldr	r3, [pc, #536]	; (8003de8 <ParticlesManager+0x298>)
 8003bce:	220a      	movs	r2, #10
 8003bd0:	715a      	strb	r2, [r3, #5]
				//TX_BUFFER[6] = 0;//(uint8_t)pParam->s32TIMEINTERVAL;  //GC Attention, devrait être un WORD (2 byte)
				for(uint8_t j = 2;j < 6;j++)
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	72fb      	strb	r3, [r7, #11]
 8003bd6:	e00c      	b.n	8003bf2 <ParticlesManager+0xa2>
				{
					tx_checksum += TX_BUFFER[j];
 8003bd8:	7afb      	ldrb	r3, [r7, #11]
 8003bda:	4a83      	ldr	r2, [pc, #524]	; (8003de8 <ParticlesManager+0x298>)
 8003bdc:	5cd3      	ldrb	r3, [r2, r3]
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	4b82      	ldr	r3, [pc, #520]	; (8003dec <ParticlesManager+0x29c>)
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	4413      	add	r3, r2
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	4b80      	ldr	r3, [pc, #512]	; (8003dec <ParticlesManager+0x29c>)
 8003bea:	801a      	strh	r2, [r3, #0]
				for(uint8_t j = 2;j < 6;j++)
 8003bec:	7afb      	ldrb	r3, [r7, #11]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	72fb      	strb	r3, [r7, #11]
 8003bf2:	7afb      	ldrb	r3, [r7, #11]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d9ef      	bls.n	8003bd8 <ParticlesManager+0x88>
				}
				TX_BUFFER[6] = (uint8_t)(tx_checksum >> 8);
 8003bf8:	4b7c      	ldr	r3, [pc, #496]	; (8003dec <ParticlesManager+0x29c>)
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	0a1b      	lsrs	r3, r3, #8
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	4b79      	ldr	r3, [pc, #484]	; (8003de8 <ParticlesManager+0x298>)
 8003c04:	719a      	strb	r2, [r3, #6]
				TX_BUFFER[7] = (uint8_t)(tx_checksum & 0x00FF);
 8003c06:	4b79      	ldr	r3, [pc, #484]	; (8003dec <ParticlesManager+0x29c>)
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	4b76      	ldr	r3, [pc, #472]	; (8003de8 <ParticlesManager+0x298>)
 8003c0e:	71da      	strb	r2, [r3, #7]
				TX_BUFFER[8] = STOP_BYTE;
 8003c10:	4b75      	ldr	r3, [pc, #468]	; (8003de8 <ParticlesManager+0x298>)
 8003c12:	2299      	movs	r2, #153	; 0x99
 8003c14:	721a      	strb	r2, [r3, #8]
				tx_size = 9;
 8003c16:	4b76      	ldr	r3, [pc, #472]	; (8003df0 <ParticlesManager+0x2a0>)
 8003c18:	2209      	movs	r2, #9
 8003c1a:	701a      	strb	r2, [r3, #0]
				response_delay = 600;
 8003c1c:	4b75      	ldr	r3, [pc, #468]	; (8003df4 <ParticlesManager+0x2a4>)
 8003c1e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e033      	b.n	8003c8e <ParticlesManager+0x13e>
			}else if(IncFireCount)
 8003c26:	4b74      	ldr	r3, [pc, #464]	; (8003df8 <ParticlesManager+0x2a8>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00e      	beq.n	8003c4c <ParticlesManager+0xfc>
			{
				//Test unitaire - FIRECNT_CMD
				tx_checksum = Particle_Send_CMD(FIRECNT_CMD);
 8003c2e:	2080      	movs	r0, #128	; 0x80
 8003c30:	f000 fa28 	bl	8004084 <Particle_Send_CMD>
 8003c34:	4603      	mov	r3, r0
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b6c      	ldr	r3, [pc, #432]	; (8003dec <ParticlesManager+0x29c>)
 8003c3a:	801a      	strh	r2, [r3, #0]
				tx_size = 5;
 8003c3c:	4b6c      	ldr	r3, [pc, #432]	; (8003df0 <ParticlesManager+0x2a0>)
 8003c3e:	2205      	movs	r2, #5
 8003c40:	701a      	strb	r2, [r3, #0]
				response_delay = 600;
 8003c42:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <ParticlesManager+0x2a4>)
 8003c44:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e020      	b.n	8003c8e <ParticlesManager+0x13e>
			}else if(setZero)
 8003c4c:	4b6b      	ldr	r3, [pc, #428]	; (8003dfc <ParticlesManager+0x2ac>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00e      	beq.n	8003c72 <ParticlesManager+0x122>
			{
				//Test unitaire - SETZERO CMD
				tx_checksum = Particle_Send_CMD(SETZERO_CMD);
 8003c54:	2040      	movs	r0, #64	; 0x40
 8003c56:	f000 fa15 	bl	8004084 <Particle_Send_CMD>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4b63      	ldr	r3, [pc, #396]	; (8003dec <ParticlesManager+0x29c>)
 8003c60:	801a      	strh	r2, [r3, #0]
				tx_size = 5;
 8003c62:	4b63      	ldr	r3, [pc, #396]	; (8003df0 <ParticlesManager+0x2a0>)
 8003c64:	2205      	movs	r2, #5
 8003c66:	701a      	strb	r2, [r3, #0]
				response_delay = 600;
 8003c68:	4b62      	ldr	r3, [pc, #392]	; (8003df4 <ParticlesManager+0x2a4>)
 8003c6a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e00d      	b.n	8003c8e <ParticlesManager+0x13e>

			}else{

				//Test unitaire - READ_CMD
				tx_checksum = Particle_Send_CMD(READ_CMD);
 8003c72:	2000      	movs	r0, #0
 8003c74:	f000 fa06 	bl	8004084 <Particle_Send_CMD>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4b5b      	ldr	r3, [pc, #364]	; (8003dec <ParticlesManager+0x29c>)
 8003c7e:	801a      	strh	r2, [r3, #0]
				tx_size = 5;
 8003c80:	4b5b      	ldr	r3, [pc, #364]	; (8003df0 <ParticlesManager+0x2a0>)
 8003c82:	2205      	movs	r2, #5
 8003c84:	701a      	strb	r2, [r3, #0]
				response_delay = 800;
 8003c86:	4b5b      	ldr	r3, [pc, #364]	; (8003df4 <ParticlesManager+0x2a4>)
 8003c88:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003c8c:	601a      	str	r2, [r3, #0]
				//TX_BUFFER[3] = (uint8_t)(tx_checksum & 0x00FF);
				//TX_BUFFER[4] = STOP_BYTE;
				//tx_size = 5;
				//response_delay = 800;
			}
			nextState = Send_request;
 8003c8e:	4b5c      	ldr	r3, [pc, #368]	; (8003e00 <ParticlesManager+0x2b0>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003c94:	e1d5      	b.n	8004042 <ParticlesManager+0x4f2>
	case Send_request:
		if(uartErrorCount > COMM_ERR_LIMIT && request_interval !=TIME_TO_WAIT_IF_ERR)
 8003c96:	4b5b      	ldr	r3, [pc, #364]	; (8003e04 <ParticlesManager+0x2b4>)
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c9e:	d90a      	bls.n	8003cb6 <ParticlesManager+0x166>
 8003ca0:	4b4f      	ldr	r3, [pc, #316]	; (8003de0 <ParticlesManager+0x290>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b1e      	cmp	r3, #30
 8003ca6:	d006      	beq.n	8003cb6 <ParticlesManager+0x166>
		{
			request_interval = TIME_TO_WAIT_IF_ERR;
 8003ca8:	4b4d      	ldr	r3, [pc, #308]	; (8003de0 <ParticlesManager+0x290>)
 8003caa:	221e      	movs	r2, #30
 8003cac:	701a      	strb	r2, [r3, #0]
			nextState = Idle;
 8003cae:	4b54      	ldr	r3, [pc, #336]	; (8003e00 <ParticlesManager+0x2b0>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
			break;
 8003cb4:	e1c8      	b.n	8004048 <ParticlesManager+0x4f8>
		}


		HAL_UART_Transmit_IT(&huart3, TX_BUFFER, tx_size);
 8003cb6:	4b4e      	ldr	r3, [pc, #312]	; (8003df0 <ParticlesManager+0x2a0>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	494a      	ldr	r1, [pc, #296]	; (8003de8 <ParticlesManager+0x298>)
 8003cc0:	4851      	ldr	r0, [pc, #324]	; (8003e08 <ParticlesManager+0x2b8>)
 8003cc2:	f007 f975 	bl	800afb0 <HAL_UART_Transmit_IT>
		RX_BUFFER[0] = 0;
 8003cc6:	4b51      	ldr	r3, [pc, #324]	; (8003e0c <ParticlesManager+0x2bc>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
		u32LastReqTime = u32Time_ms;
 8003ccc:	4a43      	ldr	r2, [pc, #268]	; (8003ddc <ParticlesManager+0x28c>)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6013      	str	r3, [r2, #0]
		nextState = Request_sent;
 8003cd2:	4b4b      	ldr	r3, [pc, #300]	; (8003e00 <ParticlesManager+0x2b0>)
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	701a      	strb	r2, [r3, #0]
		break;
 8003cd8:	e1b6      	b.n	8004048 <ParticlesManager+0x4f8>
	case Request_sent:
		HAL_UARTEx_ReceiveToIdle_IT(&huart3, RX_BUFFER,RX_BUFFER_LENGTH);
 8003cda:	2240      	movs	r2, #64	; 0x40
 8003cdc:	494b      	ldr	r1, [pc, #300]	; (8003e0c <ParticlesManager+0x2bc>)
 8003cde:	484a      	ldr	r0, [pc, #296]	; (8003e08 <ParticlesManager+0x2b8>)
 8003ce0:	f007 f9aa 	bl	800b038 <HAL_UARTEx_ReceiveToIdle_IT>
		if(RX_BUFFER[0] == START_BYTE)
 8003ce4:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <ParticlesManager+0x2bc>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2bcc      	cmp	r3, #204	; 0xcc
 8003cea:	d114      	bne.n	8003d16 <ParticlesManager+0x1c6>
		{
			rx_payload_size = RX_BUFFER[1] & 0x3F;
 8003cec:	4b47      	ldr	r3, [pc, #284]	; (8003e0c <ParticlesManager+0x2bc>)
 8003cee:	785b      	ldrb	r3, [r3, #1]
 8003cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4b46      	ldr	r3, [pc, #280]	; (8003e10 <ParticlesManager+0x2c0>)
 8003cf8:	701a      	strb	r2, [r3, #0]

			if(rx_payload_size != 0 && RX_BUFFER[rx_payload_size + 4] == STOP_BYTE)
 8003cfa:	4b45      	ldr	r3, [pc, #276]	; (8003e10 <ParticlesManager+0x2c0>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <ParticlesManager+0x1c6>
 8003d02:	4b43      	ldr	r3, [pc, #268]	; (8003e10 <ParticlesManager+0x2c0>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	3304      	adds	r3, #4
 8003d08:	4a40      	ldr	r2, [pc, #256]	; (8003e0c <ParticlesManager+0x2bc>)
 8003d0a:	5cd3      	ldrb	r3, [r2, r3]
 8003d0c:	2b99      	cmp	r3, #153	; 0x99
 8003d0e:	d102      	bne.n	8003d16 <ParticlesManager+0x1c6>
			{
				nextState = Validate_data;
 8003d10:	4b3b      	ldr	r3, [pc, #236]	; (8003e00 <ParticlesManager+0x2b0>)
 8003d12:	2203      	movs	r2, #3
 8003d14:	701a      	strb	r2, [r3, #0]
			}

		}

		if(u32Time_ms - u32LastReqTime > response_delay)
 8003d16:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <ParticlesManager+0x28c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	1ad2      	subs	r2, r2, r3
 8003d1e:	4b35      	ldr	r3, [pc, #212]	; (8003df4 <ParticlesManager+0x2a4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	f240 818f 	bls.w	8004046 <ParticlesManager+0x4f6>
		{
			if(uartErrorCount <= COMM_ERR_LIMIT)
 8003d28:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <ParticlesManager+0x2b4>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d30:	d803      	bhi.n	8003d3a <ParticlesManager+0x1ea>
			{
				nextState = Send_request;
 8003d32:	4b33      	ldr	r3, [pc, #204]	; (8003e00 <ParticlesManager+0x2b0>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	e002      	b.n	8003d40 <ParticlesManager+0x1f0>
			}else
			{
				nextState = Idle;
 8003d3a:	4b31      	ldr	r3, [pc, #196]	; (8003e00 <ParticlesManager+0x2b0>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	701a      	strb	r2, [r3, #0]
			}
			uartErrorCount++;
 8003d40:	4b30      	ldr	r3, [pc, #192]	; (8003e04 <ParticlesManager+0x2b4>)
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	4b2e      	ldr	r3, [pc, #184]	; (8003e04 <ParticlesManager+0x2b4>)
 8003d4a:	801a      	strh	r2, [r3, #0]

		}

		break;
 8003d4c:	e17b      	b.n	8004046 <ParticlesManager+0x4f6>
	case Validate_data:
		rx_checksum = RX_BUFFER[1];
 8003d4e:	4b2f      	ldr	r3, [pc, #188]	; (8003e0c <ParticlesManager+0x2bc>)
 8003d50:	785b      	ldrb	r3, [r3, #1]
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	4b2f      	ldr	r3, [pc, #188]	; (8003e14 <ParticlesManager+0x2c4>)
 8003d56:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 2;i <= rx_payload_size+1;i++)
 8003d58:	2302      	movs	r3, #2
 8003d5a:	72bb      	strb	r3, [r7, #10]
 8003d5c:	e00c      	b.n	8003d78 <ParticlesManager+0x228>
		{
			rx_checksum += RX_BUFFER[i];
 8003d5e:	7abb      	ldrb	r3, [r7, #10]
 8003d60:	4a2a      	ldr	r2, [pc, #168]	; (8003e0c <ParticlesManager+0x2bc>)
 8003d62:	5cd3      	ldrb	r3, [r2, r3]
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <ParticlesManager+0x2c4>)
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <ParticlesManager+0x2c4>)
 8003d70:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 2;i <= rx_payload_size+1;i++)
 8003d72:	7abb      	ldrb	r3, [r7, #10]
 8003d74:	3301      	adds	r3, #1
 8003d76:	72bb      	strb	r3, [r7, #10]
 8003d78:	7aba      	ldrb	r2, [r7, #10]
 8003d7a:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <ParticlesManager+0x2c0>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	429a      	cmp	r2, r3
 8003d82:	ddec      	ble.n	8003d5e <ParticlesManager+0x20e>
		}

		if(rx_checksum == ((uint16_t)(RX_BUFFER[rx_payload_size+2] << 8) + (uint16_t)RX_BUFFER[rx_payload_size+3]))
 8003d84:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <ParticlesManager+0x2c4>)
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <ParticlesManager+0x2c0>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	3302      	adds	r3, #2
 8003d90:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <ParticlesManager+0x2bc>)
 8003d92:	5cd3      	ldrb	r3, [r2, r3]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <ParticlesManager+0x2c0>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	3303      	adds	r3, #3
 8003da2:	4a1a      	ldr	r2, [pc, #104]	; (8003e0c <ParticlesManager+0x2bc>)
 8003da4:	5cd3      	ldrb	r3, [r2, r3]
 8003da6:	4403      	add	r3, r0
 8003da8:	4299      	cmp	r1, r3
 8003daa:	d10c      	bne.n	8003dc6 <ParticlesManager+0x276>
		{
			particleBoardAbsent = false;
 8003dac:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <ParticlesManager+0x2c8>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
			request_interval = TIME_TO_WAIT_IF_OK;
 8003db2:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <ParticlesManager+0x290>)
 8003db4:	2202      	movs	r2, #2
 8003db6:	701a      	strb	r2, [r3, #0]
			uartErrorCount = 0;
 8003db8:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <ParticlesManager+0x2b4>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	801a      	strh	r2, [r3, #0]
			nextState = Data_ready;
 8003dbe:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <ParticlesManager+0x2b0>)
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	701a      	strb	r2, [r3, #0]
			{
				nextState = Idle;
			}
			uartErrorCount++;
		}
		break;
 8003dc4:	e140      	b.n	8004048 <ParticlesManager+0x4f8>
			if(uartErrorCount <= COMM_ERR_LIMIT)
 8003dc6:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <ParticlesManager+0x2b4>)
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dce:	d825      	bhi.n	8003e1c <ParticlesManager+0x2cc>
				nextState = Send_request;
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <ParticlesManager+0x2b0>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	e024      	b.n	8003e22 <ParticlesManager+0x2d2>
 8003dd8:	20000f30 	.word	0x20000f30
 8003ddc:	20000fb8 	.word	0x20000fb8
 8003de0:	20000048 	.word	0x20000048
 8003de4:	20000fb5 	.word	0x20000fb5
 8003de8:	20000f74 	.word	0x20000f74
 8003dec:	20000fbc 	.word	0x20000fbc
 8003df0:	20000fbe 	.word	0x20000fbe
 8003df4:	2000004c 	.word	0x2000004c
 8003df8:	20000fb7 	.word	0x20000fb7
 8003dfc:	20000fb6 	.word	0x20000fb6
 8003e00:	20000f31 	.word	0x20000f31
 8003e04:	20000fc0 	.word	0x20000fc0
 8003e08:	200017e0 	.word	0x200017e0
 8003e0c:	20000f34 	.word	0x20000f34
 8003e10:	20000fc2 	.word	0x20000fc2
 8003e14:	20000fc4 	.word	0x20000fc4
 8003e18:	20000fb4 	.word	0x20000fb4
				nextState = Idle;
 8003e1c:	4b91      	ldr	r3, [pc, #580]	; (8004064 <ParticlesManager+0x514>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]
			uartErrorCount++;
 8003e22:	4b91      	ldr	r3, [pc, #580]	; (8004068 <ParticlesManager+0x518>)
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	3301      	adds	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	4b8f      	ldr	r3, [pc, #572]	; (8004068 <ParticlesManager+0x518>)
 8003e2c:	801a      	strh	r2, [r3, #0]
		break;
 8003e2e:	e10b      	b.n	8004048 <ParticlesManager+0x4f8>
	case Data_ready:
		nextState = Idle;
 8003e30:	4b8c      	ldr	r3, [pc, #560]	; (8004064 <ParticlesManager+0x514>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
		if((RX_BUFFER[1] & 0xC0) == READ_CMD)
 8003e36:	4b8d      	ldr	r3, [pc, #564]	; (800406c <ParticlesManager+0x51c>)
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f040 80cc 	bne.w	8003fdc <ParticlesManager+0x48c>
		{
			ParticleDevice.u16ch0_ON = (uint16_t)(RX_BUFFER[2] << 8) + (uint16_t)RX_BUFFER[3];
 8003e44:	4b89      	ldr	r3, [pc, #548]	; (800406c <ParticlesManager+0x51c>)
 8003e46:	789b      	ldrb	r3, [r3, #2]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	4b87      	ldr	r3, [pc, #540]	; (800406c <ParticlesManager+0x51c>)
 8003e50:	78db      	ldrb	r3, [r3, #3]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	4b85      	ldr	r3, [pc, #532]	; (8004070 <ParticlesManager+0x520>)
 8003e5a:	801a      	strh	r2, [r3, #0]
			ParticleDevice.u16ch0_OFF = (uint16_t)(RX_BUFFER[4] << 8) + (uint16_t)RX_BUFFER[5];
 8003e5c:	4b83      	ldr	r3, [pc, #524]	; (800406c <ParticlesManager+0x51c>)
 8003e5e:	791b      	ldrb	r3, [r3, #4]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	4b81      	ldr	r3, [pc, #516]	; (800406c <ParticlesManager+0x51c>)
 8003e68:	795b      	ldrb	r3, [r3, #5]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	4b7f      	ldr	r3, [pc, #508]	; (8004070 <ParticlesManager+0x520>)
 8003e72:	805a      	strh	r2, [r3, #2]
			ParticleDevice.u16ch1_ON = (uint16_t)(RX_BUFFER[6] << 8) + (uint16_t)RX_BUFFER[7];
 8003e74:	4b7d      	ldr	r3, [pc, #500]	; (800406c <ParticlesManager+0x51c>)
 8003e76:	799b      	ldrb	r3, [r3, #6]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	4b7b      	ldr	r3, [pc, #492]	; (800406c <ParticlesManager+0x51c>)
 8003e80:	79db      	ldrb	r3, [r3, #7]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	4b79      	ldr	r3, [pc, #484]	; (8004070 <ParticlesManager+0x520>)
 8003e8a:	809a      	strh	r2, [r3, #4]
			ParticleDevice.u16ch1_OFF = (uint16_t)(RX_BUFFER[8] << 8) + (uint16_t)RX_BUFFER[9];
 8003e8c:	4b77      	ldr	r3, [pc, #476]	; (800406c <ParticlesManager+0x51c>)
 8003e8e:	7a1b      	ldrb	r3, [r3, #8]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	4b75      	ldr	r3, [pc, #468]	; (800406c <ParticlesManager+0x51c>)
 8003e98:	7a5b      	ldrb	r3, [r3, #9]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	4b73      	ldr	r3, [pc, #460]	; (8004070 <ParticlesManager+0x520>)
 8003ea2:	80da      	strh	r2, [r3, #6]
			ParticleDevice.u16stDev = (uint16_t)(RX_BUFFER[10] << 8) + (uint16_t)RX_BUFFER[11];
 8003ea4:	4b71      	ldr	r3, [pc, #452]	; (800406c <ParticlesManager+0x51c>)
 8003ea6:	7a9b      	ldrb	r3, [r3, #10]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	4b6f      	ldr	r3, [pc, #444]	; (800406c <ParticlesManager+0x51c>)
 8003eb0:	7adb      	ldrb	r3, [r3, #11]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	4b6d      	ldr	r3, [pc, #436]	; (8004070 <ParticlesManager+0x520>)
 8003eba:	811a      	strh	r2, [r3, #8]
			ParticleDevice.u16temperature = (uint16_t)(RX_BUFFER[12] << 8) + (uint16_t)RX_BUFFER[13];
 8003ebc:	4b6b      	ldr	r3, [pc, #428]	; (800406c <ParticlesManager+0x51c>)
 8003ebe:	7b1b      	ldrb	r3, [r3, #12]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	4b69      	ldr	r3, [pc, #420]	; (800406c <ParticlesManager+0x51c>)
 8003ec8:	7b5b      	ldrb	r3, [r3, #13]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	4b67      	ldr	r3, [pc, #412]	; (8004070 <ParticlesManager+0x520>)
 8003ed2:	815a      	strh	r2, [r3, #10]
			ParticleDevice.fLED_current_meas = P2F1DEC(((uint16_t)(RX_BUFFER[14] << 8) + (uint16_t)RX_BUFFER[15]));
 8003ed4:	4b65      	ldr	r3, [pc, #404]	; (800406c <ParticlesManager+0x51c>)
 8003ed6:	7b9b      	ldrb	r3, [r3, #14]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b62      	ldr	r3, [pc, #392]	; (800406c <ParticlesManager+0x51c>)
 8003ee2:	7bdb      	ldrb	r3, [r3, #15]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fc ff52 	bl	8000d90 <__aeabi_i2f>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4961      	ldr	r1, [pc, #388]	; (8004074 <ParticlesManager+0x524>)
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fd f855 	bl	8000fa0 <__aeabi_fdiv>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b5d      	ldr	r3, [pc, #372]	; (8004070 <ParticlesManager+0x520>)
 8003efc:	61da      	str	r2, [r3, #28]

			if(RX_BUFFER[16] & 0x80)
 8003efe:	4b5b      	ldr	r3, [pc, #364]	; (800406c <ParticlesManager+0x51c>)
 8003f00:	7c1b      	ldrb	r3, [r3, #16]
 8003f02:	b25b      	sxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	da09      	bge.n	8003f1c <ParticlesManager+0x3cc>
			{
				RX_BUFFER[16] &= 0x7F;
 8003f08:	4b58      	ldr	r3, [pc, #352]	; (800406c <ParticlesManager+0x51c>)
 8003f0a:	7c1b      	ldrb	r3, [r3, #16]
 8003f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4b56      	ldr	r3, [pc, #344]	; (800406c <ParticlesManager+0x51c>)
 8003f14:	741a      	strb	r2, [r3, #16]
				slp_sign = -1;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1a:	60fb      	str	r3, [r7, #12]
			}
			ParticleDevice.fslope = P2F1DEC(slp_sign*((int)(RX_BUFFER[16] << 8) + (int)(uint8_t)RX_BUFFER[17]));
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7fc ff37 	bl	8000d90 <__aeabi_i2f>
 8003f22:	4604      	mov	r4, r0
 8003f24:	4b51      	ldr	r3, [pc, #324]	; (800406c <ParticlesManager+0x51c>)
 8003f26:	7c1b      	ldrb	r3, [r3, #16]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	4a50      	ldr	r2, [pc, #320]	; (800406c <ParticlesManager+0x51c>)
 8003f2c:	7c52      	ldrb	r2, [r2, #17]
 8003f2e:	4413      	add	r3, r2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fc ff2d 	bl	8000d90 <__aeabi_i2f>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f7fc ff7c 	bl	8000e38 <__aeabi_fmul>
 8003f40:	4603      	mov	r3, r0
 8003f42:	494c      	ldr	r1, [pc, #304]	; (8004074 <ParticlesManager+0x524>)
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fd f82b 	bl	8000fa0 <__aeabi_fdiv>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b48      	ldr	r3, [pc, #288]	; (8004070 <ParticlesManager+0x520>)
 8003f50:	619a      	str	r2, [r3, #24]
			ParticleDevice.u16Lux_ON = (uint16_t)(RX_BUFFER[18] << 8) + (uint16_t)RX_BUFFER[19];
 8003f52:	4b46      	ldr	r3, [pc, #280]	; (800406c <ParticlesManager+0x51c>)
 8003f54:	7c9b      	ldrb	r3, [r3, #18]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	4b43      	ldr	r3, [pc, #268]	; (800406c <ParticlesManager+0x51c>)
 8003f5e:	7cdb      	ldrb	r3, [r3, #19]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	4b42      	ldr	r3, [pc, #264]	; (8004070 <ParticlesManager+0x520>)
 8003f68:	841a      	strh	r2, [r3, #32]
			ParticleDevice.u16Lux_OFF = (uint16_t)(RX_BUFFER[20] << 8) + (uint16_t)RX_BUFFER[21];
 8003f6a:	4b40      	ldr	r3, [pc, #256]	; (800406c <ParticlesManager+0x51c>)
 8003f6c:	7d1b      	ldrb	r3, [r3, #20]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	4b3d      	ldr	r3, [pc, #244]	; (800406c <ParticlesManager+0x51c>)
 8003f76:	7d5b      	ldrb	r3, [r3, #21]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	4b3c      	ldr	r3, [pc, #240]	; (8004070 <ParticlesManager+0x520>)
 8003f80:	845a      	strh	r2, [r3, #34]	; 0x22
			ParticleDevice.u16TimeSinceInit = (uint32_t)(RX_BUFFER[22] << 24) + (uint32_t)(RX_BUFFER[23] << 16) + (uint32_t)(RX_BUFFER[24] << 8) + (uint32_t)(RX_BUFFER[25]);
 8003f82:	4b3a      	ldr	r3, [pc, #232]	; (800406c <ParticlesManager+0x51c>)
 8003f84:	7d9b      	ldrb	r3, [r3, #22]
 8003f86:	061b      	lsls	r3, r3, #24
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b38      	ldr	r3, [pc, #224]	; (800406c <ParticlesManager+0x51c>)
 8003f8c:	7ddb      	ldrb	r3, [r3, #23]
 8003f8e:	041b      	lsls	r3, r3, #16
 8003f90:	4413      	add	r3, r2
 8003f92:	4a36      	ldr	r2, [pc, #216]	; (800406c <ParticlesManager+0x51c>)
 8003f94:	7e12      	ldrb	r2, [r2, #24]
 8003f96:	0212      	lsls	r2, r2, #8
 8003f98:	4413      	add	r3, r2
 8003f9a:	4a34      	ldr	r2, [pc, #208]	; (800406c <ParticlesManager+0x51c>)
 8003f9c:	7e52      	ldrb	r2, [r2, #25]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	4a33      	ldr	r2, [pc, #204]	; (8004070 <ParticlesManager+0x520>)
 8003fa2:	6253      	str	r3, [r2, #36]	; 0x24

			ParticleDevice.fparticles = (float)ParticleDevice.u16ch0_ON/ParticleDevice.fLED_current_meas - ParticleDevice.fnormalized_zero;//TODO:comment
 8003fa4:	4b32      	ldr	r3, [pc, #200]	; (8004070 <ParticlesManager+0x520>)
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fc feed 	bl	8000d88 <__aeabi_ui2f>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	4b2f      	ldr	r3, [pc, #188]	; (8004070 <ParticlesManager+0x520>)
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f7fc fff2 	bl	8000fa0 <__aeabi_fdiv>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <ParticlesManager+0x520>)
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f7fc fe2c 	bl	8000c24 <__aeabi_fsub>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b27      	ldr	r3, [pc, #156]	; (8004070 <ParticlesManager+0x520>)
 8003fd2:	615a      	str	r2, [r3, #20]

			config_mode = false; //GC 2023-07-19 Debug comm
 8003fd4:	4b28      	ldr	r3, [pc, #160]	; (8004078 <ParticlesManager+0x528>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
			{
				nextState = Idle;
			}
			uartErrorCount++;
		}
		break;
 8003fda:	e035      	b.n	8004048 <ParticlesManager+0x4f8>
		}else if((RX_BUFFER[1] & 0xC0) == WRITE_CMD)
 8003fdc:	4b23      	ldr	r3, [pc, #140]	; (800406c <ParticlesManager+0x51c>)
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fe4:	2bc0      	cmp	r3, #192	; 0xc0
 8003fe6:	d103      	bne.n	8003ff0 <ParticlesManager+0x4a0>
			config_mode = false; //GC 2023-07-19 debug
 8003fe8:	4b23      	ldr	r3, [pc, #140]	; (8004078 <ParticlesManager+0x528>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
		break;
 8003fee:	e02b      	b.n	8004048 <ParticlesManager+0x4f8>
		}else if((RX_BUFFER[1] & 0xC0) == SETZERO_CMD)
 8003ff0:	4b1e      	ldr	r3, [pc, #120]	; (800406c <ParticlesManager+0x51c>)
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d10f      	bne.n	800401c <ParticlesManager+0x4cc>
			setZero = false;
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	; (800407c <ParticlesManager+0x52c>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
			ParticleDevice.u16zero = (uint16_t)(RX_BUFFER[4] << 8) + (uint16_t)RX_BUFFER[5];
 8004002:	4b1a      	ldr	r3, [pc, #104]	; (800406c <ParticlesManager+0x51c>)
 8004004:	791b      	ldrb	r3, [r3, #4]
 8004006:	b29b      	uxth	r3, r3
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	b29a      	uxth	r2, r3
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <ParticlesManager+0x51c>)
 800400e:	795b      	ldrb	r3, [r3, #5]
 8004010:	b29b      	uxth	r3, r3
 8004012:	4413      	add	r3, r2
 8004014:	b29a      	uxth	r2, r3
 8004016:	4b16      	ldr	r3, [pc, #88]	; (8004070 <ParticlesManager+0x520>)
 8004018:	819a      	strh	r2, [r3, #12]
		break;
 800401a:	e015      	b.n	8004048 <ParticlesManager+0x4f8>
			if(uartErrorCount <= COMM_ERR_LIMIT)
 800401c:	4b12      	ldr	r3, [pc, #72]	; (8004068 <ParticlesManager+0x518>)
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004024:	d803      	bhi.n	800402e <ParticlesManager+0x4de>
				nextState = Send_request;
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <ParticlesManager+0x514>)
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e002      	b.n	8004034 <ParticlesManager+0x4e4>
				nextState = Idle;
 800402e:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <ParticlesManager+0x514>)
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]
			uartErrorCount++;
 8004034:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <ParticlesManager+0x518>)
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	3301      	adds	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <ParticlesManager+0x518>)
 800403e:	801a      	strh	r2, [r3, #0]
		break;
 8004040:	e002      	b.n	8004048 <ParticlesManager+0x4f8>
		break;
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <ParticlesManager+0x4f8>
		break;
 8004046:	bf00      	nop
	}
	if(nextState != currentState)
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <ParticlesManager+0x514>)
 800404a:	781a      	ldrb	r2, [r3, #0]
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <ParticlesManager+0x530>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d003      	beq.n	800405c <ParticlesManager+0x50c>
	{
		currentState = nextState;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <ParticlesManager+0x514>)
 8004056:	781a      	ldrb	r2, [r3, #0]
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <ParticlesManager+0x530>)
 800405a:	701a      	strb	r2, [r3, #0]
	}

}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	bd90      	pop	{r4, r7, pc}
 8004064:	20000f31 	.word	0x20000f31
 8004068:	20000fc0 	.word	0x20000fc0
 800406c:	20000f34 	.word	0x20000f34
 8004070:	20000f88 	.word	0x20000f88
 8004074:	41200000 	.word	0x41200000
 8004078:	20000fb5 	.word	0x20000fb5
 800407c:	20000fb6 	.word	0x20000fb6
 8004080:	20000f30 	.word	0x20000f30

08004084 <Particle_Send_CMD>:
{
	IncFireCount = true;
}

uint16_t Particle_Send_CMD(uint8_t cmd)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
	static uint16_t tx_checksum;

	TX_BUFFER[0] = START_BYTE;
 800408e:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <Particle_Send_CMD+0x4c>)
 8004090:	22cc      	movs	r2, #204	; 0xcc
 8004092:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = cmd;
 8004094:	4a0e      	ldr	r2, [pc, #56]	; (80040d0 <Particle_Send_CMD+0x4c>)
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	7053      	strb	r3, [r2, #1]
	tx_checksum = cmd;
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	b29a      	uxth	r2, r3
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <Particle_Send_CMD+0x50>)
 80040a0:	801a      	strh	r2, [r3, #0]
	TX_BUFFER[2] = (uint8_t)(tx_checksum >> 8);
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <Particle_Send_CMD+0x50>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <Particle_Send_CMD+0x4c>)
 80040ae:	709a      	strb	r2, [r3, #2]
	TX_BUFFER[3] = (uint8_t)(tx_checksum & 0x00FF);
 80040b0:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <Particle_Send_CMD+0x50>)
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <Particle_Send_CMD+0x4c>)
 80040b8:	70da      	strb	r2, [r3, #3]
	TX_BUFFER[4] = STOP_BYTE;
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <Particle_Send_CMD+0x4c>)
 80040bc:	2299      	movs	r2, #153	; 0x99
 80040be:	711a      	strb	r2, [r3, #4]

	return tx_checksum;
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <Particle_Send_CMD+0x50>)
 80040c2:	881b      	ldrh	r3, [r3, #0]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000f74 	.word	0x20000f74
 80040d4:	20000fc6 	.word	0x20000fc6

080040d8 <ParticlesGetObject>:

const MeasureParticles_t* ParticlesGetObject(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
	return &ParticleDevice;
 80040dc:	4b02      	ldr	r3, [pc, #8]	; (80040e8 <ParticlesGetObject+0x10>)
}
 80040de:	4618      	mov	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000f88 	.word	0x20000f88

080040ec <Temperature_Init>:
float uVtoDegreeCTypeK(float uVdata,float Tref);
float VtoDegreeCRtd(float Vdata);


void Temperature_Init(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
	currentState = Sending_config;
 80040f0:	4b10      	ldr	r3, [pc, #64]	; (8004134 <Temperature_Init+0x48>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
	nextState = Sending_config;
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <Temperature_Init+0x4c>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	701a      	strb	r2, [r3, #0]
	b_tx_pending = false;
 80040fc:	4b0f      	ldr	r3, [pc, #60]	; (800413c <Temperature_Init+0x50>)
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 8004102:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <Temperature_Init+0x54>)
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 8004108:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <Temperature_Init+0x58>)
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <Temperature_Init+0x5c>)
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
	Tobj.ADCConfigByte[0] = 0x9F;
 8004114:	4b0d      	ldr	r3, [pc, #52]	; (800414c <Temperature_Init+0x60>)
 8004116:	229f      	movs	r2, #159	; 0x9f
 8004118:	711a      	strb	r2, [r3, #4]
	Tobj.ADCConfigByte[1] = 0xBF;
 800411a:	4b0c      	ldr	r3, [pc, #48]	; (800414c <Temperature_Init+0x60>)
 800411c:	22bf      	movs	r2, #191	; 0xbf
 800411e:	715a      	strb	r2, [r3, #5]
	Tobj.ADCConfigByte[2] = 0xDC;
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <Temperature_Init+0x60>)
 8004122:	22dc      	movs	r2, #220	; 0xdc
 8004124:	719a      	strb	r2, [r3, #6]
	Tobj.ADCConfigByte[3] = 0xFC;
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <Temperature_Init+0x60>)
 8004128:	22fc      	movs	r2, #252	; 0xfc
 800412a:	71da      	strb	r2, [r3, #7]
}
 800412c:	bf00      	nop
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr
 8004134:	20000fcc 	.word	0x20000fcc
 8004138:	20000fcd 	.word	0x20000fcd
 800413c:	20000fc8 	.word	0x20000fc8
 8004140:	20000fc9 	.word	0x20000fc9
 8004144:	20000fca 	.word	0x20000fca
 8004148:	20000fcb 	.word	0x20000fcb
 800414c:	20000fd0 	.word	0x20000fd0

08004150 <TemperatureManager>:



void TemperatureManager(Mobj* stove, uint32_t u32time_ms)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
	static int8_t ch_idx = NUMBER_OF_ADC_CH - 1;
	static uint8_t adcData[4];
	static uint32_t u32conf_time;
	int32_t i32tempReading=0;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
	float ftempReading = 0.0;
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	60bb      	str	r3, [r7, #8]

	switch(currentState)
 8004164:	4bae      	ldr	r3, [pc, #696]	; (8004420 <TemperatureManager+0x2d0>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b03      	cmp	r3, #3
 800416a:	f200 8193 	bhi.w	8004494 <TemperatureManager+0x344>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <TemperatureManager+0x24>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	08004185 	.word	0x08004185
 8004178:	080041d1 	.word	0x080041d1
 800417c:	080041e9 	.word	0x080041e9
 8004180:	08004235 	.word	0x08004235
	{
	case Sending_config:
		if(b_tx_success)
 8004184:	4ba7      	ldr	r3, [pc, #668]	; (8004424 <TemperatureManager+0x2d4>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <TemperatureManager+0x50>
		{
			b_tx_success = false;
 800418c:	4ba5      	ldr	r3, [pc, #660]	; (8004424 <TemperatureManager+0x2d4>)
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
			nextState = Wait_for_data_rdy;
 8004192:	4ba5      	ldr	r3, [pc, #660]	; (8004428 <TemperatureManager+0x2d8>)
 8004194:	2201      	movs	r2, #1
 8004196:	701a      	strb	r2, [r3, #0]
			u32conf_time = u32time_ms;
 8004198:	4aa4      	ldr	r2, [pc, #656]	; (800442c <TemperatureManager+0x2dc>)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6013      	str	r3, [r2, #0]
		else if(!b_tx_pending)
		{
			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&Tobj.ADCConfigByte[ch_idx],1);
			b_tx_pending = true;
		}
		break;
 800419e:	e172      	b.n	8004486 <TemperatureManager+0x336>
		else if(!b_tx_pending)
 80041a0:	4ba3      	ldr	r3, [pc, #652]	; (8004430 <TemperatureManager+0x2e0>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	f083 0301 	eor.w	r3, r3, #1
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 816b 	beq.w	8004486 <TemperatureManager+0x336>
			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&Tobj.ADCConfigByte[ch_idx],1);
 80041b0:	4ba0      	ldr	r3, [pc, #640]	; (8004434 <TemperatureManager+0x2e4>)
 80041b2:	f993 3000 	ldrsb.w	r3, [r3]
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b9f      	ldr	r3, [pc, #636]	; (8004438 <TemperatureManager+0x2e8>)
 80041ba:	4413      	add	r3, r2
 80041bc:	1d1a      	adds	r2, r3, #4
 80041be:	2301      	movs	r3, #1
 80041c0:	21d0      	movs	r1, #208	; 0xd0
 80041c2:	489e      	ldr	r0, [pc, #632]	; (800443c <TemperatureManager+0x2ec>)
 80041c4:	f002 ff76 	bl	80070b4 <HAL_I2C_Master_Transmit_IT>
			b_tx_pending = true;
 80041c8:	4b99      	ldr	r3, [pc, #612]	; (8004430 <TemperatureManager+0x2e0>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
		break;
 80041ce:	e15a      	b.n	8004486 <TemperatureManager+0x336>
	case Wait_for_data_rdy:
		if(u32time_ms - u32conf_time > 300) //Conversion time around 266 ms
 80041d0:	4b96      	ldr	r3, [pc, #600]	; (800442c <TemperatureManager+0x2dc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80041dc:	f240 8155 	bls.w	800448a <TemperatureManager+0x33a>
		{
			nextState = Send_read_req;
 80041e0:	4b91      	ldr	r3, [pc, #580]	; (8004428 <TemperatureManager+0x2d8>)
 80041e2:	2202      	movs	r2, #2
 80041e4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80041e6:	e150      	b.n	800448a <TemperatureManager+0x33a>
	case Send_read_req:

		if(b_rx_success)
 80041e8:	4b95      	ldr	r3, [pc, #596]	; (8004440 <TemperatureManager+0x2f0>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00f      	beq.n	8004210 <TemperatureManager+0xc0>
		{
			b_rx_success = false;
 80041f0:	4b93      	ldr	r3, [pc, #588]	; (8004440 <TemperatureManager+0x2f0>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
			if(IsDataNew(adcData[3]))
 80041f6:	4b93      	ldr	r3, [pc, #588]	; (8004444 <TemperatureManager+0x2f4>)
 80041f8:	78db      	ldrb	r3, [r3, #3]
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f2c0 8146 	blt.w	800448e <TemperatureManager+0x33e>
			{
				adcData[3] = 0;
 8004202:	4b90      	ldr	r3, [pc, #576]	; (8004444 <TemperatureManager+0x2f4>)
 8004204:	2200      	movs	r2, #0
 8004206:	70da      	strb	r2, [r3, #3]
				nextState = Response_received;
 8004208:	4b87      	ldr	r3, [pc, #540]	; (8004428 <TemperatureManager+0x2d8>)
 800420a:	2203      	movs	r2, #3
 800420c:	701a      	strb	r2, [r3, #0]
		{
			HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
			b_rx_pending = true;
		}

		break;
 800420e:	e13e      	b.n	800448e <TemperatureManager+0x33e>
		else if(!b_rx_pending)
 8004210:	4b8d      	ldr	r3, [pc, #564]	; (8004448 <TemperatureManager+0x2f8>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	f083 0301 	eor.w	r3, r3, #1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8137 	beq.w	800448e <TemperatureManager+0x33e>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
 8004220:	2304      	movs	r3, #4
 8004222:	4a88      	ldr	r2, [pc, #544]	; (8004444 <TemperatureManager+0x2f4>)
 8004224:	21d0      	movs	r1, #208	; 0xd0
 8004226:	4885      	ldr	r0, [pc, #532]	; (800443c <TemperatureManager+0x2ec>)
 8004228:	f002 ffe8 	bl	80071fc <HAL_I2C_Master_Receive_IT>
			b_rx_pending = true;
 800422c:	4b86      	ldr	r3, [pc, #536]	; (8004448 <TemperatureManager+0x2f8>)
 800422e:	2201      	movs	r2, #1
 8004230:	701a      	strb	r2, [r3, #0]
		break;
 8004232:	e12c      	b.n	800448e <TemperatureManager+0x33e>
	case Response_received:
		i32tempReading = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
		i32tempReading = (adcData[0] << 30) + (adcData[1] << 22)  + (adcData[2] << 14); // justify the result for 32bit storage
 8004238:	4b82      	ldr	r3, [pc, #520]	; (8004444 <TemperatureManager+0x2f4>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	079a      	lsls	r2, r3, #30
 800423e:	4b81      	ldr	r3, [pc, #516]	; (8004444 <TemperatureManager+0x2f4>)
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	059b      	lsls	r3, r3, #22
 8004244:	441a      	add	r2, r3
 8004246:	4b7f      	ldr	r3, [pc, #508]	; (8004444 <TemperatureManager+0x2f4>)
 8004248:	789b      	ldrb	r3, [r3, #2]
 800424a:	039b      	lsls	r3, r3, #14
 800424c:	4413      	add	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
		if (i32tempReading < 0)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	da02      	bge.n	800425c <TemperatureManager+0x10c>
		{
			i32tempReading = -i32tempReading;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	425b      	negs	r3, r3
 800425a:	60fb      	str	r3, [r7, #12]
		}
		i32tempReading = (i32tempReading) >> 14;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	139b      	asrs	r3, r3, #14
 8004260:	60fb      	str	r3, [r7, #12]

		switch(ch_idx)
 8004262:	4b74      	ldr	r3, [pc, #464]	; (8004434 <TemperatureManager+0x2e4>)
 8004264:	f993 3000 	ldrsb.w	r3, [r3]
 8004268:	2b03      	cmp	r3, #3
 800426a:	f200 80f9 	bhi.w	8004460 <TemperatureManager+0x310>
 800426e:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <TemperatureManager+0x124>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	08004285 	.word	0x08004285
 8004278:	080042f5 	.word	0x080042f5
 800427c:	08004365 	.word	0x08004365
 8004280:	080043b5 	.word	0x080043b5
		{
			case BaffleThermocouple:
				ftempReading = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7fc fd83 	bl	8000d90 <__aeabi_i2f>
 800428a:	4603      	mov	r3, r0
 800428c:	4618      	mov	r0, r3
 800428e:	f7fc f945 	bl	800051c <__aeabi_f2d>
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	4b6d      	ldr	r3, [pc, #436]	; (800444c <TemperatureManager+0x2fc>)
 8004298:	f7fc f998 	bl	80005cc <__aeabi_dmul>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	4b69      	ldr	r3, [pc, #420]	; (8004450 <TemperatureManager+0x300>)
 80042aa:	f7fc fab9 	bl	8000820 <__aeabi_ddiv>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4610      	mov	r0, r2
 80042b4:	4619      	mov	r1, r3
 80042b6:	f7fc fc61 	bl	8000b7c <__aeabi_d2f>
 80042ba:	4603      	mov	r3, r0
 80042bc:	60bb      	str	r3, [r7, #8]
				stove->fBaffleTemp = CELSIUS_TO_FAHRENHEIT(uVtoDegreeCTypeK(ftempReading, Tobj.fTcoldJunct)); //6.7//26.1 //board is self heating to 7.3 above ambient
 80042be:	4b5e      	ldr	r3, [pc, #376]	; (8004438 <TemperatureManager+0x2e8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4619      	mov	r1, r3
 80042c4:	68b8      	ldr	r0, [r7, #8]
 80042c6:	f000 fa17 	bl	80046f8 <uVtoDegreeCTypeK>
 80042ca:	4603      	mov	r3, r0
 80042cc:	4961      	ldr	r1, [pc, #388]	; (8004454 <TemperatureManager+0x304>)
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fc fdb2 	bl	8000e38 <__aeabi_fmul>
 80042d4:	4603      	mov	r3, r0
 80042d6:	4960      	ldr	r1, [pc, #384]	; (8004458 <TemperatureManager+0x308>)
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc fe61 	bl	8000fa0 <__aeabi_fdiv>
 80042de:	4603      	mov	r3, r0
 80042e0:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fc fc9f 	bl	8000c28 <__addsf3>
 80042ea:	4603      	mov	r3, r0
 80042ec:	461a      	mov	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	61da      	str	r2, [r3, #28]

				break;
 80042f2:	e0b6      	b.n	8004462 <TemperatureManager+0x312>
			case ChamberThermocouple:
				ftempReading = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f7fc fd4b 	bl	8000d90 <__aeabi_i2f>
 80042fa:	4603      	mov	r3, r0
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fc f90d 	bl	800051c <__aeabi_f2d>
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	4b51      	ldr	r3, [pc, #324]	; (800444c <TemperatureManager+0x2fc>)
 8004308:	f7fc f960 	bl	80005cc <__aeabi_dmul>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	4b4d      	ldr	r3, [pc, #308]	; (8004450 <TemperatureManager+0x300>)
 800431a:	f7fc fa81 	bl	8000820 <__aeabi_ddiv>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	f7fc fc29 	bl	8000b7c <__aeabi_d2f>
 800432a:	4603      	mov	r3, r0
 800432c:	60bb      	str	r3, [r7, #8]
				stove->fChamberTemp = CELSIUS_TO_FAHRENHEIT(uVtoDegreeCTypeK(ftempReading, Tobj.fTcoldJunct)); //6.7//26.1 //board is self heating to 7.3 above ambient
 800432e:	4b42      	ldr	r3, [pc, #264]	; (8004438 <TemperatureManager+0x2e8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4619      	mov	r1, r3
 8004334:	68b8      	ldr	r0, [r7, #8]
 8004336:	f000 f9df 	bl	80046f8 <uVtoDegreeCTypeK>
 800433a:	4603      	mov	r3, r0
 800433c:	4945      	ldr	r1, [pc, #276]	; (8004454 <TemperatureManager+0x304>)
 800433e:	4618      	mov	r0, r3
 8004340:	f7fc fd7a 	bl	8000e38 <__aeabi_fmul>
 8004344:	4603      	mov	r3, r0
 8004346:	4944      	ldr	r1, [pc, #272]	; (8004458 <TemperatureManager+0x308>)
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc fe29 	bl	8000fa0 <__aeabi_fdiv>
 800434e:	4603      	mov	r3, r0
 8004350:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8004354:	4618      	mov	r0, r3
 8004356:	f7fc fc67 	bl	8000c28 <__addsf3>
 800435a:	4603      	mov	r3, r0
 800435c:	461a      	mov	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	621a      	str	r2, [r3, #32]

				break;
 8004362:	e07e      	b.n	8004462 <TemperatureManager+0x312>
			case PlenumRtd:
				ftempReading = (float)(i32tempReading*15.625e-6);
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7fc f8c7 	bl	80004f8 <__aeabi_i2d>
 800436a:	a329      	add	r3, pc, #164	; (adr r3, 8004410 <TemperatureManager+0x2c0>)
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	f7fc f92c 	bl	80005cc <__aeabi_dmul>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	f7fc fbfe 	bl	8000b7c <__aeabi_d2f>
 8004380:	4603      	mov	r3, r0
 8004382:	60bb      	str	r3, [r7, #8]
				stove->fPlenumTemp = CELSIUS_TO_FAHRENHEIT(VtoDegreeCRtd(ftempReading));
 8004384:	68b8      	ldr	r0, [r7, #8]
 8004386:	f000 fcd7 	bl	8004d38 <VtoDegreeCRtd>
 800438a:	4603      	mov	r3, r0
 800438c:	4931      	ldr	r1, [pc, #196]	; (8004454 <TemperatureManager+0x304>)
 800438e:	4618      	mov	r0, r3
 8004390:	f7fc fd52 	bl	8000e38 <__aeabi_fmul>
 8004394:	4603      	mov	r3, r0
 8004396:	4930      	ldr	r1, [pc, #192]	; (8004458 <TemperatureManager+0x308>)
 8004398:	4618      	mov	r0, r3
 800439a:	f7fc fe01 	bl	8000fa0 <__aeabi_fdiv>
 800439e:	4603      	mov	r3, r0
 80043a0:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fc fc3f 	bl	8000c28 <__addsf3>
 80043aa:	4603      	mov	r3, r0
 80043ac:	461a      	mov	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24

				break;
 80043b2:	e056      	b.n	8004462 <TemperatureManager+0x312>
			case TempSense_board:
				ftempReading = (float)(i32tempReading*15.625e-6);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7fc f89f 	bl	80004f8 <__aeabi_i2d>
 80043ba:	a315      	add	r3, pc, #84	; (adr r3, 8004410 <TemperatureManager+0x2c0>)
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f7fc f904 	bl	80005cc <__aeabi_dmul>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4610      	mov	r0, r2
 80043ca:	4619      	mov	r1, r3
 80043cc:	f7fc fbd6 	bl	8000b7c <__aeabi_d2f>
 80043d0:	4603      	mov	r3, r0
 80043d2:	60bb      	str	r3, [r7, #8]
				Tobj.fTcoldJunct = (ftempReading-0.500)/.010;
 80043d4:	68b8      	ldr	r0, [r7, #8]
 80043d6:	f7fc f8a1 	bl	800051c <__aeabi_f2d>
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	4b1f      	ldr	r3, [pc, #124]	; (800445c <TemperatureManager+0x30c>)
 80043e0:	f7fb ff3c 	bl	800025c <__aeabi_dsub>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	a30a      	add	r3, pc, #40	; (adr r3, 8004418 <TemperatureManager+0x2c8>)
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f7fc fa15 	bl	8000820 <__aeabi_ddiv>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	f7fc fbbd 	bl	8000b7c <__aeabi_d2f>
 8004402:	4603      	mov	r3, r0
 8004404:	4a0c      	ldr	r2, [pc, #48]	; (8004438 <TemperatureManager+0x2e8>)
 8004406:	6013      	str	r3, [r2, #0]
				break;
 8004408:	e02b      	b.n	8004462 <TemperatureManager+0x312>
 800440a:	bf00      	nop
 800440c:	f3af 8000 	nop.w
 8004410:	d2f1a9fc 	.word	0xd2f1a9fc
 8004414:	3ef0624d 	.word	0x3ef0624d
 8004418:	47ae147b 	.word	0x47ae147b
 800441c:	3f847ae1 	.word	0x3f847ae1
 8004420:	20000fcc 	.word	0x20000fcc
 8004424:	20000fc9 	.word	0x20000fc9
 8004428:	20000fcd 	.word	0x20000fcd
 800442c:	20000fd8 	.word	0x20000fd8
 8004430:	20000fc8 	.word	0x20000fc8
 8004434:	20000050 	.word	0x20000050
 8004438:	20000fd0 	.word	0x20000fd0
 800443c:	20001690 	.word	0x20001690
 8004440:	20000fcb 	.word	0x20000fcb
 8004444:	20000fdc 	.word	0x20000fdc
 8004448:	20000fca 	.word	0x20000fca
 800444c:	402f4000 	.word	0x402f4000
 8004450:	40200000 	.word	0x40200000
 8004454:	41100000 	.word	0x41100000
 8004458:	40a00000 	.word	0x40a00000
 800445c:	3fe00000 	.word	0x3fe00000
			default:
				break;
 8004460:	bf00      	nop
		}

		nextState = Sending_config;
 8004462:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <TemperatureManager+0x360>)
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]
		if(ch_idx-- < 0)
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <TemperatureManager+0x364>)
 800446a:	f993 3000 	ldrsb.w	r3, [r3]
 800446e:	b2da      	uxtb	r2, r3
 8004470:	3a01      	subs	r2, #1
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	b251      	sxtb	r1, r2
 8004476:	4a0f      	ldr	r2, [pc, #60]	; (80044b4 <TemperatureManager+0x364>)
 8004478:	7011      	strb	r1, [r2, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	da09      	bge.n	8004492 <TemperatureManager+0x342>
		{
			ch_idx = NUMBER_OF_ADC_CH - 1;
 800447e:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <TemperatureManager+0x364>)
 8004480:	2203      	movs	r2, #3
 8004482:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004484:	e005      	b.n	8004492 <TemperatureManager+0x342>
		break;
 8004486:	bf00      	nop
 8004488:	e004      	b.n	8004494 <TemperatureManager+0x344>
		break;
 800448a:	bf00      	nop
 800448c:	e002      	b.n	8004494 <TemperatureManager+0x344>
		break;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <TemperatureManager+0x344>
		break;
 8004492:	bf00      	nop
	}

	if(nextState != currentState)
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <TemperatureManager+0x360>)
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <TemperatureManager+0x368>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d003      	beq.n	80044a8 <TemperatureManager+0x358>
	{
		currentState = nextState;
 80044a0:	4b03      	ldr	r3, [pc, #12]	; (80044b0 <TemperatureManager+0x360>)
 80044a2:	781a      	ldrb	r2, [r3, #0]
 80044a4:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <TemperatureManager+0x368>)
 80044a6:	701a      	strb	r2, [r3, #0]
	}

}
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000fcd 	.word	0x20000fcd
 80044b4:	20000050 	.word	0x20000050
 80044b8:	20000fcc 	.word	0x20000fcc

080044bc <Temperature_update_deltaT>:

void Temperature_update_deltaT(Mobj *stove, uint32_t u32DeltaT_ms)
{
 80044bc:	b5b0      	push	{r4, r5, r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
	static float baffle = 0;
	static float chamber = 0;
	const float alpha = 0.88;
 80044c6:	4b4e      	ldr	r3, [pc, #312]	; (8004600 <Temperature_update_deltaT+0x144>)
 80044c8:	60fb      	str	r3, [r7, #12]

	if(baffle == 0 && chamber == 0)
 80044ca:	4b4e      	ldr	r3, [pc, #312]	; (8004604 <Temperature_update_deltaT+0x148>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f04f 0100 	mov.w	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fc fe44 	bl	8001160 <__aeabi_fcmpeq>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d012      	beq.n	8004504 <Temperature_update_deltaT+0x48>
 80044de:	4b4a      	ldr	r3, [pc, #296]	; (8004608 <Temperature_update_deltaT+0x14c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fc fe3a 	bl	8001160 <__aeabi_fcmpeq>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <Temperature_update_deltaT+0x48>
	{
		baffle = stove->fBaffleTemp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	4a43      	ldr	r2, [pc, #268]	; (8004604 <Temperature_update_deltaT+0x148>)
 80044f8:	6013      	str	r3, [r2, #0]
		chamber = stove->fChamberTemp;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	4a42      	ldr	r2, [pc, #264]	; (8004608 <Temperature_update_deltaT+0x14c>)
 8004500:	6013      	str	r3, [r2, #0]
		return;
 8004502:	e079      	b.n	80045f8 <Temperature_update_deltaT+0x13c>
	}

	// To avoid confusion, parameters calculated per 30 seconds => (deg F / 30 sec)
	stove->fBaffleDeltaT = alpha*stove->fBaffleDeltaT + (1-alpha)*30*(stove->fBaffleTemp-baffle)/((u32DeltaT_ms)/1000);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	68f9      	ldr	r1, [r7, #12]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fc fc94 	bl	8000e38 <__aeabi_fmul>
 8004510:	4603      	mov	r3, r0
 8004512:	461c      	mov	r4, r3
 8004514:	68f9      	ldr	r1, [r7, #12]
 8004516:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800451a:	f7fc fb83 	bl	8000c24 <__aeabi_fsub>
 800451e:	4603      	mov	r3, r0
 8004520:	493a      	ldr	r1, [pc, #232]	; (800460c <Temperature_update_deltaT+0x150>)
 8004522:	4618      	mov	r0, r3
 8004524:	f7fc fc88 	bl	8000e38 <__aeabi_fmul>
 8004528:	4603      	mov	r3, r0
 800452a:	461d      	mov	r5, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	4a34      	ldr	r2, [pc, #208]	; (8004604 <Temperature_update_deltaT+0x148>)
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	4611      	mov	r1, r2
 8004536:	4618      	mov	r0, r3
 8004538:	f7fc fb74 	bl	8000c24 <__aeabi_fsub>
 800453c:	4603      	mov	r3, r0
 800453e:	4619      	mov	r1, r3
 8004540:	4628      	mov	r0, r5
 8004542:	f7fc fc79 	bl	8000e38 <__aeabi_fmul>
 8004546:	4603      	mov	r3, r0
 8004548:	461d      	mov	r5, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	4a30      	ldr	r2, [pc, #192]	; (8004610 <Temperature_update_deltaT+0x154>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	099b      	lsrs	r3, r3, #6
 8004554:	4618      	mov	r0, r3
 8004556:	f7fc fc17 	bl	8000d88 <__aeabi_ui2f>
 800455a:	4603      	mov	r3, r0
 800455c:	4619      	mov	r1, r3
 800455e:	4628      	mov	r0, r5
 8004560:	f7fc fd1e 	bl	8000fa0 <__aeabi_fdiv>
 8004564:	4603      	mov	r3, r0
 8004566:	4619      	mov	r1, r3
 8004568:	4620      	mov	r0, r4
 800456a:	f7fc fb5d 	bl	8000c28 <__addsf3>
 800456e:	4603      	mov	r3, r0
 8004570:	461a      	mov	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	629a      	str	r2, [r3, #40]	; 0x28
	stove->fChamberDeltaT = alpha*stove->fChamberDeltaT + (1-alpha)*30*(stove->fChamberTemp-chamber)/((u32DeltaT_ms)/1000);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	68f9      	ldr	r1, [r7, #12]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fc fc5b 	bl	8000e38 <__aeabi_fmul>
 8004582:	4603      	mov	r3, r0
 8004584:	461c      	mov	r4, r3
 8004586:	68f9      	ldr	r1, [r7, #12]
 8004588:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800458c:	f7fc fb4a 	bl	8000c24 <__aeabi_fsub>
 8004590:	4603      	mov	r3, r0
 8004592:	491e      	ldr	r1, [pc, #120]	; (800460c <Temperature_update_deltaT+0x150>)
 8004594:	4618      	mov	r0, r3
 8004596:	f7fc fc4f 	bl	8000e38 <__aeabi_fmul>
 800459a:	4603      	mov	r3, r0
 800459c:	461d      	mov	r5, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4a19      	ldr	r2, [pc, #100]	; (8004608 <Temperature_update_deltaT+0x14c>)
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	4611      	mov	r1, r2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fc fb3b 	bl	8000c24 <__aeabi_fsub>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4619      	mov	r1, r3
 80045b2:	4628      	mov	r0, r5
 80045b4:	f7fc fc40 	bl	8000e38 <__aeabi_fmul>
 80045b8:	4603      	mov	r3, r0
 80045ba:	461d      	mov	r5, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	4a14      	ldr	r2, [pc, #80]	; (8004610 <Temperature_update_deltaT+0x154>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	099b      	lsrs	r3, r3, #6
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fc fbde 	bl	8000d88 <__aeabi_ui2f>
 80045cc:	4603      	mov	r3, r0
 80045ce:	4619      	mov	r1, r3
 80045d0:	4628      	mov	r0, r5
 80045d2:	f7fc fce5 	bl	8000fa0 <__aeabi_fdiv>
 80045d6:	4603      	mov	r3, r0
 80045d8:	4619      	mov	r1, r3
 80045da:	4620      	mov	r0, r4
 80045dc:	f7fc fb24 	bl	8000c28 <__addsf3>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c

	baffle = stove->fBaffleTemp;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	4a05      	ldr	r2, [pc, #20]	; (8004604 <Temperature_update_deltaT+0x148>)
 80045ee:	6013      	str	r3, [r2, #0]
	chamber = stove->fChamberTemp;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	4a04      	ldr	r2, [pc, #16]	; (8004608 <Temperature_update_deltaT+0x14c>)
 80045f6:	6013      	str	r3, [r2, #0]

}
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bdb0      	pop	{r4, r5, r7, pc}
 80045fe:	bf00      	nop
 8004600:	3f6147ae 	.word	0x3f6147ae
 8004604:	20000fe0 	.word	0x20000fe0
 8004608:	20000fe4 	.word	0x20000fe4
 800460c:	41f00000 	.word	0x41f00000
 8004610:	10624dd3 	.word	0x10624dd3

08004614 <get_BoardTemp>:



float get_BoardTemp(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
	return Tobj.fTcoldJunct ;
 8004618:	4b02      	ldr	r3, [pc, #8]	; (8004624 <get_BoardTemp+0x10>)
 800461a:	681b      	ldr	r3, [r3, #0]
}
 800461c:	4618      	mov	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	20000fd0 	.word	0x20000fd0

08004628 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	b_tx_success = true;
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_I2C_MasterTxCpltCallback+0x20>)
 8004632:	2201      	movs	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
	b_tx_pending = false;
 8004636:	4b05      	ldr	r3, [pc, #20]	; (800464c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000fc9 	.word	0x20000fc9
 800464c:	20000fc8 	.word	0x20000fc8

08004650 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
	b_rx_success = true;
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800465a:	2201      	movs	r2, #1
 800465c:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000fcb 	.word	0x20000fcb
 8004674:	20000fca 	.word	0x20000fca

08004678 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	b_tx_pending = false;
 8004680:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <HAL_I2C_ErrorCallback+0x30>)
 8004682:	2200      	movs	r2, #0
 8004684:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 8004686:	4b09      	ldr	r3, [pc, #36]	; (80046ac <HAL_I2C_ErrorCallback+0x34>)
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 800468c:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <HAL_I2C_ErrorCallback+0x38>)
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <HAL_I2C_ErrorCallback+0x3c>)
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]
	uint32_t errorcode = hi2c->ErrorCode;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	60fb      	str	r3, [r7, #12]
	UNUSED(errorcode);
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr
 80046a8:	20000fc8 	.word	0x20000fc8
 80046ac:	20000fc9 	.word	0x20000fc9
 80046b0:	20000fca 	.word	0x20000fca
 80046b4:	20000fcb 	.word	0x20000fcb

080046b8 <HAL_I2C_AbortCpltCallback>:
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	b_tx_pending = false;
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_I2C_AbortCpltCallback+0x30>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_I2C_AbortCpltCallback+0x34>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 80046cc:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <HAL_I2C_AbortCpltCallback+0x38>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 80046d2:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <HAL_I2C_AbortCpltCallback+0x3c>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
	uint32_t errorcode = hi2c->ErrorCode;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	60fb      	str	r3, [r7, #12]
	UNUSED(errorcode);
}
 80046de:	bf00      	nop
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr
 80046e8:	20000fc8 	.word	0x20000fc8
 80046ec:	20000fc9 	.word	0x20000fc9
 80046f0:	20000fca 	.word	0x20000fca
 80046f4:	20000fcb 	.word	0x20000fcb

080046f8 <uVtoDegreeCTypeK>:
#define T_COEF_A0 1.185976E-1
#define T_COEF_A1 -1.183432E-4
#define T_COEF_A2 1.269686E2

float uVtoDegreeCTypeK(float uVdata,float Tref)
{
 80046f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046fc:	b08a      	sub	sp, #40	; 0x28
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
    double Vref = T_COEF_C0 + T_COEF_C1*Tref + T_COEF_C2*pow(Tref,2) + T_COEF_C3*pow(Tref,3) + T_COEF_C4*pow(Tref,4) + T_COEF_C5*pow(Tref,5) + T_COEF_C6*pow(Tref,6) + T_COEF_C7*pow(Tref,7) + T_COEF_C8*pow(Tref,8) + T_COEF_C9*pow(Tref,9)+T_COEF_A0*pow(2.718281828,T_COEF_A1*(Tref-T_COEF_A2)*(Tref-T_COEF_A2));
 8004704:	6838      	ldr	r0, [r7, #0]
 8004706:	f7fb ff09 	bl	800051c <__aeabi_f2d>
 800470a:	a3cb      	add	r3, pc, #812	; (adr r3, 8004a38 <uVtoDegreeCTypeK+0x340>)
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f7fb ff5c 	bl	80005cc <__aeabi_dmul>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4610      	mov	r0, r2
 800471a:	4619      	mov	r1, r3
 800471c:	a3c8      	add	r3, pc, #800	; (adr r3, 8004a40 <uVtoDegreeCTypeK+0x348>)
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f7fb fd9b 	bl	800025c <__aeabi_dsub>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4614      	mov	r4, r2
 800472c:	461d      	mov	r5, r3
 800472e:	6838      	ldr	r0, [r7, #0]
 8004730:	f7fb fef4 	bl	800051c <__aeabi_f2d>
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800473c:	f00d fc96 	bl	801206c <pow>
 8004740:	a3c1      	add	r3, pc, #772	; (adr r3, 8004a48 <uVtoDegreeCTypeK+0x350>)
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	f7fb ff41 	bl	80005cc <__aeabi_dmul>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4620      	mov	r0, r4
 8004750:	4629      	mov	r1, r5
 8004752:	f7fb fd85 	bl	8000260 <__adddf3>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4614      	mov	r4, r2
 800475c:	461d      	mov	r5, r3
 800475e:	6838      	ldr	r0, [r7, #0]
 8004760:	f7fb fedc 	bl	800051c <__aeabi_f2d>
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	4bdb      	ldr	r3, [pc, #876]	; (8004ad8 <uVtoDegreeCTypeK+0x3e0>)
 800476a:	f00d fc7f 	bl	801206c <pow>
 800476e:	a3b8      	add	r3, pc, #736	; (adr r3, 8004a50 <uVtoDegreeCTypeK+0x358>)
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f7fb ff2a 	bl	80005cc <__aeabi_dmul>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4620      	mov	r0, r4
 800477e:	4629      	mov	r1, r5
 8004780:	f7fb fd6e 	bl	8000260 <__adddf3>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4614      	mov	r4, r2
 800478a:	461d      	mov	r5, r3
 800478c:	6838      	ldr	r0, [r7, #0]
 800478e:	f7fb fec5 	bl	800051c <__aeabi_f2d>
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	4bd1      	ldr	r3, [pc, #836]	; (8004adc <uVtoDegreeCTypeK+0x3e4>)
 8004798:	f00d fc68 	bl	801206c <pow>
 800479c:	a3ae      	add	r3, pc, #696	; (adr r3, 8004a58 <uVtoDegreeCTypeK+0x360>)
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f7fb ff13 	bl	80005cc <__aeabi_dmul>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4620      	mov	r0, r4
 80047ac:	4629      	mov	r1, r5
 80047ae:	f7fb fd57 	bl	8000260 <__adddf3>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4614      	mov	r4, r2
 80047b8:	461d      	mov	r5, r3
 80047ba:	6838      	ldr	r0, [r7, #0]
 80047bc:	f7fb feae 	bl	800051c <__aeabi_f2d>
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	4bc6      	ldr	r3, [pc, #792]	; (8004ae0 <uVtoDegreeCTypeK+0x3e8>)
 80047c6:	f00d fc51 	bl	801206c <pow>
 80047ca:	a3a5      	add	r3, pc, #660	; (adr r3, 8004a60 <uVtoDegreeCTypeK+0x368>)
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	f7fb fefc 	bl	80005cc <__aeabi_dmul>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4620      	mov	r0, r4
 80047da:	4629      	mov	r1, r5
 80047dc:	f7fb fd40 	bl	8000260 <__adddf3>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4614      	mov	r4, r2
 80047e6:	461d      	mov	r5, r3
 80047e8:	6838      	ldr	r0, [r7, #0]
 80047ea:	f7fb fe97 	bl	800051c <__aeabi_f2d>
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	4bbc      	ldr	r3, [pc, #752]	; (8004ae4 <uVtoDegreeCTypeK+0x3ec>)
 80047f4:	f00d fc3a 	bl	801206c <pow>
 80047f8:	a39b      	add	r3, pc, #620	; (adr r3, 8004a68 <uVtoDegreeCTypeK+0x370>)
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	f7fb fee5 	bl	80005cc <__aeabi_dmul>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4620      	mov	r0, r4
 8004808:	4629      	mov	r1, r5
 800480a:	f7fb fd29 	bl	8000260 <__adddf3>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4614      	mov	r4, r2
 8004814:	461d      	mov	r5, r3
 8004816:	6838      	ldr	r0, [r7, #0]
 8004818:	f7fb fe80 	bl	800051c <__aeabi_f2d>
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	4bb1      	ldr	r3, [pc, #708]	; (8004ae8 <uVtoDegreeCTypeK+0x3f0>)
 8004822:	f00d fc23 	bl	801206c <pow>
 8004826:	a392      	add	r3, pc, #584	; (adr r3, 8004a70 <uVtoDegreeCTypeK+0x378>)
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f7fb fece 	bl	80005cc <__aeabi_dmul>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4620      	mov	r0, r4
 8004836:	4629      	mov	r1, r5
 8004838:	f7fb fd12 	bl	8000260 <__adddf3>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4614      	mov	r4, r2
 8004842:	461d      	mov	r5, r3
 8004844:	6838      	ldr	r0, [r7, #0]
 8004846:	f7fb fe69 	bl	800051c <__aeabi_f2d>
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	4ba7      	ldr	r3, [pc, #668]	; (8004aec <uVtoDegreeCTypeK+0x3f4>)
 8004850:	f00d fc0c 	bl	801206c <pow>
 8004854:	a388      	add	r3, pc, #544	; (adr r3, 8004a78 <uVtoDegreeCTypeK+0x380>)
 8004856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485a:	f7fb feb7 	bl	80005cc <__aeabi_dmul>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4620      	mov	r0, r4
 8004864:	4629      	mov	r1, r5
 8004866:	f7fb fcfb 	bl	8000260 <__adddf3>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4614      	mov	r4, r2
 8004870:	461d      	mov	r5, r3
 8004872:	6838      	ldr	r0, [r7, #0]
 8004874:	f7fb fe52 	bl	800051c <__aeabi_f2d>
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	4b9c      	ldr	r3, [pc, #624]	; (8004af0 <uVtoDegreeCTypeK+0x3f8>)
 800487e:	f00d fbf5 	bl	801206c <pow>
 8004882:	a37f      	add	r3, pc, #508	; (adr r3, 8004a80 <uVtoDegreeCTypeK+0x388>)
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f7fb fea0 	bl	80005cc <__aeabi_dmul>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4620      	mov	r0, r4
 8004892:	4629      	mov	r1, r5
 8004894:	f7fb fce4 	bl	8000260 <__adddf3>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4614      	mov	r4, r2
 800489e:	461d      	mov	r5, r3
 80048a0:	6838      	ldr	r0, [r7, #0]
 80048a2:	f7fb fe3b 	bl	800051c <__aeabi_f2d>
 80048a6:	a378      	add	r3, pc, #480	; (adr r3, 8004a88 <uVtoDegreeCTypeK+0x390>)
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f7fb fcd6 	bl	800025c <__aeabi_dsub>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	a375      	add	r3, pc, #468	; (adr r3, 8004a90 <uVtoDegreeCTypeK+0x398>)
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	f7fb fe85 	bl	80005cc <__aeabi_dmul>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4690      	mov	r8, r2
 80048c8:	4699      	mov	r9, r3
 80048ca:	6838      	ldr	r0, [r7, #0]
 80048cc:	f7fb fe26 	bl	800051c <__aeabi_f2d>
 80048d0:	a36d      	add	r3, pc, #436	; (adr r3, 8004a88 <uVtoDegreeCTypeK+0x390>)
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	f7fb fcc1 	bl	800025c <__aeabi_dsub>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4640      	mov	r0, r8
 80048e0:	4649      	mov	r1, r9
 80048e2:	f7fb fe73 	bl	80005cc <__aeabi_dmul>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	a16b      	add	r1, pc, #428	; (adr r1, 8004a98 <uVtoDegreeCTypeK+0x3a0>)
 80048ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048f0:	f00d fbbc 	bl	801206c <pow>
 80048f4:	a36a      	add	r3, pc, #424	; (adr r3, 8004aa0 <uVtoDegreeCTypeK+0x3a8>)
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f7fb fe67 	bl	80005cc <__aeabi_dmul>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4620      	mov	r0, r4
 8004904:	4629      	mov	r1, r5
 8004906:	f7fb fcab 	bl	8000260 <__adddf3>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double Vmeas = uVdata/1000; //value need to be in mV
 8004912:	4978      	ldr	r1, [pc, #480]	; (8004af4 <uVtoDegreeCTypeK+0x3fc>)
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7fc fb43 	bl	8000fa0 <__aeabi_fdiv>
 800491a:	4603      	mov	r3, r0
 800491c:	4618      	mov	r0, r3
 800491e:	f7fb fdfd 	bl	800051c <__aeabi_f2d>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double totalV = Vmeas + Vref;
 800492a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800492e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004932:	f7fb fc95 	bl	8000260 <__adddf3>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    double t90;
    if(totalV < 20.644)
 800493e:	a35a      	add	r3, pc, #360	; (adr r3, 8004aa8 <uVtoDegreeCTypeK+0x3b0>)
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004948:	f7fc f8b2 	bl	8000ab0 <__aeabi_dcmplt>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 8128 	beq.w	8004ba4 <uVtoDegreeCTypeK+0x4ac>
    {
     t90 = T_COEF_D0_0_500 + T_COEF_D1_0_500 *totalV + T_COEF_D2_0_500 *pow(totalV,2) + T_COEF_D3_0_500 *pow(totalV,3) + T_COEF_D4_0_500 *pow(totalV,4) + T_COEF_D5_0_500 *pow(totalV,5) + T_COEF_D6_0_500 *pow(totalV,6) + T_COEF_D7_0_500 *pow(totalV,7) + T_COEF_D8_0_500 *pow(totalV,8) + T_COEF_D9_0_500 *pow(totalV,9);
 8004954:	a356      	add	r3, pc, #344	; (adr r3, 8004ab0 <uVtoDegreeCTypeK+0x3b8>)
 8004956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800495e:	f7fb fe35 	bl	80005cc <__aeabi_dmul>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4610      	mov	r0, r2
 8004968:	4619      	mov	r1, r3
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	f7fb fc75 	bl	8000260 <__adddf3>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4614      	mov	r4, r2
 800497c:	461d      	mov	r5, r3
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004986:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800498a:	f00d fb6f 	bl	801206c <pow>
 800498e:	a34a      	add	r3, pc, #296	; (adr r3, 8004ab8 <uVtoDegreeCTypeK+0x3c0>)
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f7fb fe1a 	bl	80005cc <__aeabi_dmul>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4620      	mov	r0, r4
 800499e:	4629      	mov	r1, r5
 80049a0:	f7fb fc5e 	bl	8000260 <__adddf3>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4614      	mov	r4, r2
 80049aa:	461d      	mov	r5, r3
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	4b49      	ldr	r3, [pc, #292]	; (8004ad8 <uVtoDegreeCTypeK+0x3e0>)
 80049b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049b6:	f00d fb59 	bl	801206c <pow>
 80049ba:	a341      	add	r3, pc, #260	; (adr r3, 8004ac0 <uVtoDegreeCTypeK+0x3c8>)
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	f7fb fe04 	bl	80005cc <__aeabi_dmul>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4620      	mov	r0, r4
 80049ca:	4629      	mov	r1, r5
 80049cc:	f7fb fc48 	bl	8000260 <__adddf3>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4614      	mov	r4, r2
 80049d6:	461d      	mov	r5, r3
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	4b3f      	ldr	r3, [pc, #252]	; (8004adc <uVtoDegreeCTypeK+0x3e4>)
 80049de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049e2:	f00d fb43 	bl	801206c <pow>
 80049e6:	a338      	add	r3, pc, #224	; (adr r3, 8004ac8 <uVtoDegreeCTypeK+0x3d0>)
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f7fb fdee 	bl	80005cc <__aeabi_dmul>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4620      	mov	r0, r4
 80049f6:	4629      	mov	r1, r5
 80049f8:	f7fb fc32 	bl	8000260 <__adddf3>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4614      	mov	r4, r2
 8004a02:	461d      	mov	r5, r3
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	4b35      	ldr	r3, [pc, #212]	; (8004ae0 <uVtoDegreeCTypeK+0x3e8>)
 8004a0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a0e:	f00d fb2d 	bl	801206c <pow>
 8004a12:	a32f      	add	r3, pc, #188	; (adr r3, 8004ad0 <uVtoDegreeCTypeK+0x3d8>)
 8004a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a18:	f7fb fdd8 	bl	80005cc <__aeabi_dmul>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4620      	mov	r0, r4
 8004a22:	4629      	mov	r1, r5
 8004a24:	f7fb fc1c 	bl	8000260 <__adddf3>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	461d      	mov	r5, r3
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	4b2b      	ldr	r3, [pc, #172]	; (8004ae4 <uVtoDegreeCTypeK+0x3ec>)
 8004a36:	e05f      	b.n	8004af8 <uVtoDegreeCTypeK+0x400>
 8004a38:	ecfa2196 	.word	0xecfa2196
 8004a3c:	3fa3ed7a 	.word	0x3fa3ed7a
 8004a40:	c4b5b30b 	.word	0xc4b5b30b
 8004a44:	3f9205d7 	.word	0x3f9205d7
 8004a48:	f72891e7 	.word	0xf72891e7
 8004a4c:	3ef375d4 	.word	0x3ef375d4
 8004a50:	7a34de08 	.word	0x7a34de08
 8004a54:	be7ab2ac 	.word	0xbe7ab2ac
 8004a58:	b676ec5f 	.word	0xb676ec5f
 8004a5c:	3df5e184 	.word	0x3df5e184
 8004a60:	c620f2a8 	.word	0xc620f2a8
 8004a64:	bd63ba97 	.word	0xbd63ba97
 8004a68:	e5aa091d 	.word	0xe5aa091d
 8004a6c:	3cc43402 	.word	0x3cc43402
 8004a70:	01c8db89 	.word	0x01c8db89
 8004a74:	bc17a08b 	.word	0xbc17a08b
 8004a78:	b8001899 	.word	0xb8001899
 8004a7c:	3b5d5cb4 	.word	0x3b5d5cb4
 8004a80:	51ff39ec 	.word	0x51ff39ec
 8004a84:	ba8df847 	.word	0xba8df847
 8004a88:	8adab9f5 	.word	0x8adab9f5
 8004a8c:	405fbdfd 	.word	0x405fbdfd
 8004a90:	b1df7541 	.word	0xb1df7541
 8004a94:	bf1f05e0 	.word	0xbf1f05e0
 8004a98:	8b04919b 	.word	0x8b04919b
 8004a9c:	4005bf0a 	.word	0x4005bf0a
 8004aa0:	8d6253b2 	.word	0x8d6253b2
 8004aa4:	3fbe5c69 	.word	0x3fbe5c69
 8004aa8:	2f1a9fbe 	.word	0x2f1a9fbe
 8004aac:	4034a4dd 	.word	0x4034a4dd
 8004ab0:	886594af 	.word	0x886594af
 8004ab4:	40391563 	.word	0x40391563
 8004ab8:	f62184e0 	.word	0xf62184e0
 8004abc:	3fb41f32 	.word	0x3fb41f32
 8004ac0:	3c90aa07 	.word	0x3c90aa07
 8004ac4:	bfd00521 	.word	0xbfd00521
 8004ac8:	cf12f82a 	.word	0xcf12f82a
 8004acc:	3fb5497e 	.word	0x3fb5497e
 8004ad0:	55785780 	.word	0x55785780
 8004ad4:	bf89266f 	.word	0xbf89266f
 8004ad8:	40080000 	.word	0x40080000
 8004adc:	40100000 	.word	0x40100000
 8004ae0:	40140000 	.word	0x40140000
 8004ae4:	40180000 	.word	0x40180000
 8004ae8:	401c0000 	.word	0x401c0000
 8004aec:	40200000 	.word	0x40200000
 8004af0:	40220000 	.word	0x40220000
 8004af4:	447a0000 	.word	0x447a0000
 8004af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004afc:	f00d fab6 	bl	801206c <pow>
 8004b00:	a36f      	add	r3, pc, #444	; (adr r3, 8004cc0 <uVtoDegreeCTypeK+0x5c8>)
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f7fb fd61 	bl	80005cc <__aeabi_dmul>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4620      	mov	r0, r4
 8004b10:	4629      	mov	r1, r5
 8004b12:	f7fb fba5 	bl	8000260 <__adddf3>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4614      	mov	r4, r2
 8004b1c:	461d      	mov	r5, r3
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	4b7d      	ldr	r3, [pc, #500]	; (8004d18 <uVtoDegreeCTypeK+0x620>)
 8004b24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b28:	f00d faa0 	bl	801206c <pow>
 8004b2c:	a366      	add	r3, pc, #408	; (adr r3, 8004cc8 <uVtoDegreeCTypeK+0x5d0>)
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	f7fb fd4b 	bl	80005cc <__aeabi_dmul>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	f7fb fb8f 	bl	8000260 <__adddf3>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4614      	mov	r4, r2
 8004b48:	461d      	mov	r5, r3
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	4b73      	ldr	r3, [pc, #460]	; (8004d1c <uVtoDegreeCTypeK+0x624>)
 8004b50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b54:	f00d fa8a 	bl	801206c <pow>
 8004b58:	a35d      	add	r3, pc, #372	; (adr r3, 8004cd0 <uVtoDegreeCTypeK+0x5d8>)
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	f7fb fd35 	bl	80005cc <__aeabi_dmul>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4620      	mov	r0, r4
 8004b68:	4629      	mov	r1, r5
 8004b6a:	f7fb fb79 	bl	8000260 <__adddf3>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4614      	mov	r4, r2
 8004b74:	461d      	mov	r5, r3
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	4b69      	ldr	r3, [pc, #420]	; (8004d20 <uVtoDegreeCTypeK+0x628>)
 8004b7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b80:	f00d fa74 	bl	801206c <pow>
 8004b84:	a354      	add	r3, pc, #336	; (adr r3, 8004cd8 <uVtoDegreeCTypeK+0x5e0>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb fd1f 	bl	80005cc <__aeabi_dmul>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4620      	mov	r0, r4
 8004b94:	4629      	mov	r1, r5
 8004b96:	f7fb fb63 	bl	8000260 <__adddf3>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004ba2:	e082      	b.n	8004caa <uVtoDegreeCTypeK+0x5b2>
    }
    else
    {
	    t90 = T_COEF_D0_500_1372 + T_COEF_D1_500_1372 *totalV + T_COEF_D2_500_1372 *pow(totalV,2) + T_COEF_D3_500_1372 *pow(totalV,3) + T_COEF_D4_500_1372 *pow(totalV,4) + T_COEF_D5_500_1372 *pow(totalV,5) + T_COEF_D6_500_1372 *pow(totalV,6);
 8004ba4:	a34e      	add	r3, pc, #312	; (adr r3, 8004ce0 <uVtoDegreeCTypeK+0x5e8>)
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bae:	f7fb fd0d 	bl	80005cc <__aeabi_dmul>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	a34b      	add	r3, pc, #300	; (adr r3, 8004ce8 <uVtoDegreeCTypeK+0x5f0>)
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f7fb fb4c 	bl	800025c <__aeabi_dsub>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4614      	mov	r4, r2
 8004bca:	461d      	mov	r5, r3
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bd8:	f00d fa48 	bl	801206c <pow>
 8004bdc:	a344      	add	r3, pc, #272	; (adr r3, 8004cf0 <uVtoDegreeCTypeK+0x5f8>)
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	f7fb fcf3 	bl	80005cc <__aeabi_dmul>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4620      	mov	r0, r4
 8004bec:	4629      	mov	r1, r5
 8004bee:	f7fb fb37 	bl	8000260 <__adddf3>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4614      	mov	r4, r2
 8004bf8:	461d      	mov	r5, r3
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	4b49      	ldr	r3, [pc, #292]	; (8004d24 <uVtoDegreeCTypeK+0x62c>)
 8004c00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c04:	f00d fa32 	bl	801206c <pow>
 8004c08:	a33b      	add	r3, pc, #236	; (adr r3, 8004cf8 <uVtoDegreeCTypeK+0x600>)
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f7fb fcdd 	bl	80005cc <__aeabi_dmul>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	4620      	mov	r0, r4
 8004c18:	4629      	mov	r1, r5
 8004c1a:	f7fb fb21 	bl	8000260 <__adddf3>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4614      	mov	r4, r2
 8004c24:	461d      	mov	r5, r3
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	4b3f      	ldr	r3, [pc, #252]	; (8004d28 <uVtoDegreeCTypeK+0x630>)
 8004c2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c30:	f00d fa1c 	bl	801206c <pow>
 8004c34:	a332      	add	r3, pc, #200	; (adr r3, 8004d00 <uVtoDegreeCTypeK+0x608>)
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f7fb fcc7 	bl	80005cc <__aeabi_dmul>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4620      	mov	r0, r4
 8004c44:	4629      	mov	r1, r5
 8004c46:	f7fb fb0b 	bl	8000260 <__adddf3>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4614      	mov	r4, r2
 8004c50:	461d      	mov	r5, r3
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	4b35      	ldr	r3, [pc, #212]	; (8004d2c <uVtoDegreeCTypeK+0x634>)
 8004c58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c5c:	f00d fa06 	bl	801206c <pow>
 8004c60:	a329      	add	r3, pc, #164	; (adr r3, 8004d08 <uVtoDegreeCTypeK+0x610>)
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	f7fb fcb1 	bl	80005cc <__aeabi_dmul>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4620      	mov	r0, r4
 8004c70:	4629      	mov	r1, r5
 8004c72:	f7fb faf5 	bl	8000260 <__adddf3>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4614      	mov	r4, r2
 8004c7c:	461d      	mov	r5, r3
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	4b2b      	ldr	r3, [pc, #172]	; (8004d30 <uVtoDegreeCTypeK+0x638>)
 8004c84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c88:	f00d f9f0 	bl	801206c <pow>
 8004c8c:	a320      	add	r3, pc, #128	; (adr r3, 8004d10 <uVtoDegreeCTypeK+0x618>)
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f7fb fc9b 	bl	80005cc <__aeabi_dmul>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	f7fb fadf 	bl	8000260 <__adddf3>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return (float)t90;
 8004caa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004cae:	f7fb ff65 	bl	8000b7c <__aeabi_d2f>
 8004cb2:	4603      	mov	r3, r0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3728      	adds	r7, #40	; 0x28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004cbe:	bf00      	nop
 8004cc0:	598742c5 	.word	0x598742c5
 8004cc4:	3f50101c 	.word	0x3f50101c
 8004cc8:	8fe5dfc5 	.word	0x8fe5dfc5
 8004ccc:	bf072311 	.word	0xbf072311
 8004cd0:	d5041d19 	.word	0xd5041d19
 8004cd4:	3eb1beee 	.word	0x3eb1beee
 8004cd8:	f20e972b 	.word	0xf20e972b
 8004cdc:	be469b94 	.word	0xbe469b94
 8004ce0:	251c193b 	.word	0x251c193b
 8004ce4:	404826af 	.word	0x404826af
 8004ce8:	1d14e3bd 	.word	0x1d14e3bd
 8004cec:	406079c9 	.word	0x406079c9
 8004cf0:	7dffe020 	.word	0x7dffe020
 8004cf4:	bffa587c 	.word	0xbffa587c
 8004cf8:	72875bff 	.word	0x72875bff
 8004cfc:	3fabfabb 	.word	0x3fabfabb
 8004d00:	43f14f16 	.word	0x43f14f16
 8004d04:	bf4f9f9b 	.word	0xbf4f9f9b
 8004d08:	31b5afb6 	.word	0x31b5afb6
 8004d0c:	3ee275a4 	.word	0x3ee275a4
 8004d10:	f722eba7 	.word	0xf722eba7
 8004d14:	be60b376 	.word	0xbe60b376
 8004d18:	401c0000 	.word	0x401c0000
 8004d1c:	40200000 	.word	0x40200000
 8004d20:	40220000 	.word	0x40220000
 8004d24:	40080000 	.word	0x40080000
 8004d28:	40100000 	.word	0x40100000
 8004d2c:	40140000 	.word	0x40140000
 8004d30:	40180000 	.word	0x40180000
 8004d34:	00000000 	.word	0x00000000

08004d38 <VtoDegreeCRtd>:
float VtoDegreeCRtd(float Vdata)
{
 8004d38:	b5b0      	push	{r4, r5, r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	//using a y = 366.02x^2 -942.3x +561.55 where x is the ADC voltage and y is the temperature in C
	return (Vdata*Vdata)*366.02 - 942.3*Vdata + 561.55;
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fc f878 	bl	8000e38 <__aeabi_fmul>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fb fbe6 	bl	800051c <__aeabi_f2d>
 8004d50:	a315      	add	r3, pc, #84	; (adr r3, 8004da8 <VtoDegreeCRtd+0x70>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f7fb fc39 	bl	80005cc <__aeabi_dmul>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4614      	mov	r4, r2
 8004d60:	461d      	mov	r5, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fb fbda 	bl	800051c <__aeabi_f2d>
 8004d68:	a311      	add	r3, pc, #68	; (adr r3, 8004db0 <VtoDegreeCRtd+0x78>)
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f7fb fc2d 	bl	80005cc <__aeabi_dmul>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4620      	mov	r0, r4
 8004d78:	4629      	mov	r1, r5
 8004d7a:	f7fb fa6f 	bl	800025c <__aeabi_dsub>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4610      	mov	r0, r2
 8004d84:	4619      	mov	r1, r3
 8004d86:	a30c      	add	r3, pc, #48	; (adr r3, 8004db8 <VtoDegreeCRtd+0x80>)
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f7fb fa68 	bl	8000260 <__adddf3>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4610      	mov	r0, r2
 8004d96:	4619      	mov	r1, r3
 8004d98:	f7fb fef0 	bl	8000b7c <__aeabi_d2f>
 8004d9c:	4603      	mov	r3, r0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bdb0      	pop	{r4, r5, r7, pc}
 8004da6:	bf00      	nop
 8004da8:	eb851eb8 	.word	0xeb851eb8
 8004dac:	4076e051 	.word	0x4076e051
 8004db0:	66666666 	.word	0x66666666
 8004db4:	408d7266 	.word	0x408d7266
 8004db8:	66666666 	.word	0x66666666
 8004dbc:	40818c66 	.word	0x40818c66

08004dc0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4a06      	ldr	r2, [pc, #24]	; (8004de8 <vApplicationGetIdleTaskMemory+0x28>)
 8004dd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4a05      	ldr	r2, [pc, #20]	; (8004dec <vApplicationGetIdleTaskMemory+0x2c>)
 8004dd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2280      	movs	r2, #128	; 0x80
 8004ddc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr
 8004de8:	20000fe8 	.word	0x20000fe8
 8004dec:	2000103c 	.word	0x2000103c

08004df0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4a07      	ldr	r2, [pc, #28]	; (8004e1c <vApplicationGetTimerTaskMemory+0x2c>)
 8004e00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4a06      	ldr	r2, [pc, #24]	; (8004e20 <vApplicationGetTimerTaskMemory+0x30>)
 8004e06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e0e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004e10:	bf00      	nop
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	2000123c 	.word	0x2000123c
 8004e20:	20001290 	.word	0x20001290

08004e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e24:	b5b0      	push	{r4, r5, r7, lr}
 8004e26:	b090      	sub	sp, #64	; 0x40
 8004e28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e2a:	f001 f8ab 	bl	8005f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e2e:	f000 f863 	bl	8004ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e32:	f000 f9db 	bl	80051ec <MX_GPIO_Init>
  MX_DMA_Init();
 8004e36:	f000 f9bb 	bl	80051b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8004e3a:	f000 f8c3 	bl	8004fc4 <MX_I2C1_Init>
  MX_RTC_Init();
 8004e3e:	f000 f8ef 	bl	8005020 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8004e42:	f000 f937 	bl	80050b4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8004e46:	f000 f989 	bl	800515c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8004e4a:	f000 f95d 	bl	8005108 <MX_USART2_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer */
  osTimerDef(Timer, TimerCallback);
 8004e4e:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <main+0xb4>)
 8004e50:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e52:	2300      	movs	r3, #0
 8004e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  TimerHandle = osTimerCreate(osTimer(Timer), osTimerPeriodic, NULL);
 8004e56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f006 fff6 	bl	800be50 <osTimerCreate>
 8004e64:	4603      	mov	r3, r0
 8004e66:	4a1d      	ldr	r2, [pc, #116]	; (8004edc <main+0xb8>)
 8004e68:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	MotorControlsHandle = xMessageBufferCreate(10);
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	200a      	movs	r0, #10
 8004e70:	f007 fdf0 	bl	800ca54 <xStreamBufferGenericCreate>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4a1a      	ldr	r2, [pc, #104]	; (8004ee0 <main+0xbc>)
 8004e78:	6013      	str	r3, [r2, #0]
	MotorInPlaceHandle = xQueueCreate(1, sizeof(bool));
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	2001      	movs	r0, #1
 8004e80:	f007 f9a9 	bl	800c1d6 <xQueueGenericCreate>
 8004e84:	4603      	mov	r3, r0
 8004e86:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <main+0xc0>)
 8004e88:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Algo_task */
  osThreadDef(Algo_task, Algo_Init, osPriorityNormal, 0, 512);
 8004e8a:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <main+0xc4>)
 8004e8c:	f107 041c 	add.w	r4, r7, #28
 8004e90:	461d      	mov	r5, r3
 8004e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Algo_taskHandle = osThreadCreate(osThread(Algo_task), NULL);
 8004e9e:	f107 031c 	add.w	r3, r7, #28
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f006 ff72 	bl	800bd8e <osThreadCreate>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4a0f      	ldr	r2, [pc, #60]	; (8004eec <main+0xc8>)
 8004eae:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorManager */
  osThreadDef(MotorManager, Motor_task, osPriorityAboveNormal, 0, 128);
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <main+0xcc>)
 8004eb2:	463c      	mov	r4, r7
 8004eb4:	461d      	mov	r5, r3
 8004eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorManagerHandle = osThreadCreate(osThread(MotorManager), NULL);
 8004ec2:	463b      	mov	r3, r7
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f006 ff61 	bl	800bd8e <osThreadCreate>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4a09      	ldr	r2, [pc, #36]	; (8004ef4 <main+0xd0>)
 8004ed0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004ed2:	f006 ff45 	bl	800bd60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004ed6:	e7fe      	b.n	8004ed6 <main+0xb2>
 8004ed8:	080053e1 	.word	0x080053e1
 8004edc:	200018a0 	.word	0x200018a0
 8004ee0:	200018a4 	.word	0x200018a4
 8004ee4:	200018a8 	.word	0x200018a8
 8004ee8:	08013a58 	.word	0x08013a58
 8004eec:	20001898 	.word	0x20001898
 8004ef0:	08013a74 	.word	0x08013a74
 8004ef4:	2000189c 	.word	0x2000189c

08004ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b09c      	sub	sp, #112	; 0x70
 8004efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004efe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f02:	2238      	movs	r2, #56	; 0x38
 8004f04:	2100      	movs	r1, #0
 8004f06:	4618      	mov	r0, r3
 8004f08:	f00a f970 	bl	800f1ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	605a      	str	r2, [r3, #4]
 8004f16:	609a      	str	r2, [r3, #8]
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f1c:	1d3b      	adds	r3, r7, #4
 8004f1e:	2220      	movs	r2, #32
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f00a f962 	bl	800f1ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004f28:	2309      	movs	r3, #9
 8004f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004f32:	2300      	movs	r3, #0
 8004f34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f36:	2301      	movs	r3, #1
 8004f38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f42:	2302      	movs	r3, #2
 8004f44:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8004f4c:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8004f50:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8004f52:	2300      	movs	r3, #0
 8004f54:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f003 feb6 	bl	8008ccc <HAL_RCC_OscConfig>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004f66:	f000 fa57 	bl	8005418 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f6a:	230f      	movs	r3, #15
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f72:	2300      	movs	r3, #0
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f84:	2102      	movs	r1, #2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f004 f9b6 	bl	80092f8 <HAL_RCC_ClockConfig>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8004f92:	f000 fa41 	bl	8005418 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004f96:	2301      	movs	r3, #1
 8004f98:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f004 fc24 	bl	80097f0 <HAL_RCCEx_PeriphCLKConfig>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8004fae:	f000 fa33 	bl	8005418 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8004fb2:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <SystemClock_Config+0xc8>)
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	3770      	adds	r7, #112	; 0x70
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	42420070 	.word	0x42420070

08004fc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004fc8:	4b12      	ldr	r3, [pc, #72]	; (8005014 <MX_I2C1_Init+0x50>)
 8004fca:	4a13      	ldr	r2, [pc, #76]	; (8005018 <MX_I2C1_Init+0x54>)
 8004fcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <MX_I2C1_Init+0x50>)
 8004fd0:	4a12      	ldr	r2, [pc, #72]	; (800501c <MX_I2C1_Init+0x58>)
 8004fd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <MX_I2C1_Init+0x50>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004fda:	4b0e      	ldr	r3, [pc, #56]	; (8005014 <MX_I2C1_Init+0x50>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004fe0:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <MX_I2C1_Init+0x50>)
 8004fe2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fe6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004fe8:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <MX_I2C1_Init+0x50>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004fee:	4b09      	ldr	r3, [pc, #36]	; (8005014 <MX_I2C1_Init+0x50>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ff4:	4b07      	ldr	r3, [pc, #28]	; (8005014 <MX_I2C1_Init+0x50>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ffa:	4b06      	ldr	r3, [pc, #24]	; (8005014 <MX_I2C1_Init+0x50>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005000:	4804      	ldr	r0, [pc, #16]	; (8005014 <MX_I2C1_Init+0x50>)
 8005002:	f001 ff13 	bl	8006e2c <HAL_I2C_Init>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800500c:	f000 fa04 	bl	8005418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005010:	bf00      	nop
 8005012:	bd80      	pop	{r7, pc}
 8005014:	20001690 	.word	0x20001690
 8005018:	40005400 	.word	0x40005400
 800501c:	000186a0 	.word	0x000186a0

08005020 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8005026:	1d3b      	adds	r3, r7, #4
 8005028:	2100      	movs	r1, #0
 800502a:	460a      	mov	r2, r1
 800502c:	801a      	strh	r2, [r3, #0]
 800502e:	460a      	mov	r2, r1
 8005030:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8005032:	2300      	movs	r3, #0
 8005034:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005036:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <MX_RTC_Init+0x8c>)
 8005038:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <MX_RTC_Init+0x90>)
 800503a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800503c:	4b1b      	ldr	r3, [pc, #108]	; (80050ac <MX_RTC_Init+0x8c>)
 800503e:	f04f 32ff 	mov.w	r2, #4294967295
 8005042:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8005044:	4b19      	ldr	r3, [pc, #100]	; (80050ac <MX_RTC_Init+0x8c>)
 8005046:	2200      	movs	r2, #0
 8005048:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800504a:	4818      	ldr	r0, [pc, #96]	; (80050ac <MX_RTC_Init+0x8c>)
 800504c:	f004 fe64 	bl	8009d18 <HAL_RTC_Init>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8005056:	f000 f9df 	bl	8005418 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800505a:	2300      	movs	r3, #0
 800505c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800505e:	2300      	movs	r3, #0
 8005060:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8005062:	2300      	movs	r3, #0
 8005064:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005066:	1d3b      	adds	r3, r7, #4
 8005068:	2201      	movs	r2, #1
 800506a:	4619      	mov	r1, r3
 800506c:	480f      	ldr	r0, [pc, #60]	; (80050ac <MX_RTC_Init+0x8c>)
 800506e:	f004 fee9 	bl	8009e44 <HAL_RTC_SetTime>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8005078:	f000 f9ce 	bl	8005418 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800507c:	2301      	movs	r3, #1
 800507e:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005080:	2301      	movs	r3, #1
 8005082:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8005084:	2301      	movs	r3, #1
 8005086:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8005088:	2300      	movs	r3, #0
 800508a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800508c:	463b      	mov	r3, r7
 800508e:	2201      	movs	r2, #1
 8005090:	4619      	mov	r1, r3
 8005092:	4806      	ldr	r0, [pc, #24]	; (80050ac <MX_RTC_Init+0x8c>)
 8005094:	f005 f846 	bl	800a124 <HAL_RTC_SetDate>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800509e:	f000 f9bb 	bl	8005418 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	200016e4 	.word	0x200016e4
 80050b0:	40002800 	.word	0x40002800

080050b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80050b8:	4b11      	ldr	r3, [pc, #68]	; (8005100 <MX_USART1_UART_Init+0x4c>)
 80050ba:	4a12      	ldr	r2, [pc, #72]	; (8005104 <MX_USART1_UART_Init+0x50>)
 80050bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80050be:	4b10      	ldr	r3, [pc, #64]	; (8005100 <MX_USART1_UART_Init+0x4c>)
 80050c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80050c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050c6:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <MX_USART1_UART_Init+0x4c>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <MX_USART1_UART_Init+0x4c>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80050d2:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <MX_USART1_UART_Init+0x4c>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <MX_USART1_UART_Init+0x4c>)
 80050da:	220c      	movs	r2, #12
 80050dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050de:	4b08      	ldr	r3, [pc, #32]	; (8005100 <MX_USART1_UART_Init+0x4c>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <MX_USART1_UART_Init+0x4c>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80050ea:	4805      	ldr	r0, [pc, #20]	; (8005100 <MX_USART1_UART_Init+0x4c>)
 80050ec:	f005 fdce 	bl	800ac8c <HAL_UART_Init>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80050f6:	f000 f98f 	bl	8005418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80050fa:	bf00      	nop
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	200016f8 	.word	0x200016f8
 8005104:	40013800 	.word	0x40013800

08005108 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800510c:	4b11      	ldr	r3, [pc, #68]	; (8005154 <MX_USART2_UART_Init+0x4c>)
 800510e:	4a12      	ldr	r2, [pc, #72]	; (8005158 <MX_USART2_UART_Init+0x50>)
 8005110:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005112:	4b10      	ldr	r3, [pc, #64]	; (8005154 <MX_USART2_UART_Init+0x4c>)
 8005114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005118:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800511a:	4b0e      	ldr	r3, [pc, #56]	; (8005154 <MX_USART2_UART_Init+0x4c>)
 800511c:	2200      	movs	r2, #0
 800511e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005120:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <MX_USART2_UART_Init+0x4c>)
 8005122:	2200      	movs	r2, #0
 8005124:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005126:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <MX_USART2_UART_Init+0x4c>)
 8005128:	2200      	movs	r2, #0
 800512a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800512c:	4b09      	ldr	r3, [pc, #36]	; (8005154 <MX_USART2_UART_Init+0x4c>)
 800512e:	220c      	movs	r2, #12
 8005130:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005132:	4b08      	ldr	r3, [pc, #32]	; (8005154 <MX_USART2_UART_Init+0x4c>)
 8005134:	2200      	movs	r2, #0
 8005136:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005138:	4b06      	ldr	r3, [pc, #24]	; (8005154 <MX_USART2_UART_Init+0x4c>)
 800513a:	2200      	movs	r2, #0
 800513c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800513e:	4805      	ldr	r0, [pc, #20]	; (8005154 <MX_USART2_UART_Init+0x4c>)
 8005140:	f005 fda4 	bl	800ac8c <HAL_UART_Init>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800514a:	f000 f965 	bl	8005418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800514e:	bf00      	nop
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	2000176c 	.word	0x2000176c
 8005158:	40004400 	.word	0x40004400

0800515c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005160:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <MX_USART3_UART_Init+0x4c>)
 8005162:	4a12      	ldr	r2, [pc, #72]	; (80051ac <MX_USART3_UART_Init+0x50>)
 8005164:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8005166:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <MX_USART3_UART_Init+0x4c>)
 8005168:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800516c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <MX_USART3_UART_Init+0x4c>)
 8005170:	2200      	movs	r2, #0
 8005172:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <MX_USART3_UART_Init+0x4c>)
 8005176:	2200      	movs	r2, #0
 8005178:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <MX_USART3_UART_Init+0x4c>)
 800517c:	2200      	movs	r2, #0
 800517e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <MX_USART3_UART_Init+0x4c>)
 8005182:	220c      	movs	r2, #12
 8005184:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005186:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <MX_USART3_UART_Init+0x4c>)
 8005188:	2200      	movs	r2, #0
 800518a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <MX_USART3_UART_Init+0x4c>)
 800518e:	2200      	movs	r2, #0
 8005190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005192:	4805      	ldr	r0, [pc, #20]	; (80051a8 <MX_USART3_UART_Init+0x4c>)
 8005194:	f005 fd7a 	bl	800ac8c <HAL_UART_Init>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800519e:	f000 f93b 	bl	8005418 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80051a2:	bf00      	nop
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	200017e0 	.word	0x200017e0
 80051ac:	40004800 	.word	0x40004800

080051b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80051b6:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <MX_DMA_Init+0x38>)
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	4a0b      	ldr	r2, [pc, #44]	; (80051e8 <MX_DMA_Init+0x38>)
 80051bc:	f043 0301 	orr.w	r3, r3, #1
 80051c0:	6153      	str	r3, [r2, #20]
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <MX_DMA_Init+0x38>)
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80051ce:	2200      	movs	r2, #0
 80051d0:	2105      	movs	r1, #5
 80051d2:	200f      	movs	r0, #15
 80051d4:	f000 ffbd 	bl	8006152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80051d8:	200f      	movs	r0, #15
 80051da:	f000 ffd6 	bl	800618a <HAL_NVIC_EnableIRQ>

}
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40021000 	.word	0x40021000

080051ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f2:	f107 0310 	add.w	r3, r7, #16
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	605a      	str	r2, [r3, #4]
 80051fc:	609a      	str	r2, [r3, #8]
 80051fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005200:	4b72      	ldr	r3, [pc, #456]	; (80053cc <MX_GPIO_Init+0x1e0>)
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	4a71      	ldr	r2, [pc, #452]	; (80053cc <MX_GPIO_Init+0x1e0>)
 8005206:	f043 0310 	orr.w	r3, r3, #16
 800520a:	6193      	str	r3, [r2, #24]
 800520c:	4b6f      	ldr	r3, [pc, #444]	; (80053cc <MX_GPIO_Init+0x1e0>)
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005218:	4b6c      	ldr	r3, [pc, #432]	; (80053cc <MX_GPIO_Init+0x1e0>)
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	4a6b      	ldr	r2, [pc, #428]	; (80053cc <MX_GPIO_Init+0x1e0>)
 800521e:	f043 0320 	orr.w	r3, r3, #32
 8005222:	6193      	str	r3, [r2, #24]
 8005224:	4b69      	ldr	r3, [pc, #420]	; (80053cc <MX_GPIO_Init+0x1e0>)
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005230:	4b66      	ldr	r3, [pc, #408]	; (80053cc <MX_GPIO_Init+0x1e0>)
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	4a65      	ldr	r2, [pc, #404]	; (80053cc <MX_GPIO_Init+0x1e0>)
 8005236:	f043 0304 	orr.w	r3, r3, #4
 800523a:	6193      	str	r3, [r2, #24]
 800523c:	4b63      	ldr	r3, [pc, #396]	; (80053cc <MX_GPIO_Init+0x1e0>)
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	607b      	str	r3, [r7, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005248:	4b60      	ldr	r3, [pc, #384]	; (80053cc <MX_GPIO_Init+0x1e0>)
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	4a5f      	ldr	r2, [pc, #380]	; (80053cc <MX_GPIO_Init+0x1e0>)
 800524e:	f043 0308 	orr.w	r3, r3, #8
 8005252:	6193      	str	r3, [r2, #24]
 8005254:	4b5d      	ldr	r3, [pc, #372]	; (80053cc <MX_GPIO_Init+0x1e0>)
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step2_LowCurrent_Pin|uc_Stepper_Sleep_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin
 8005260:	2200      	movs	r2, #0
 8005262:	f242 71d0 	movw	r1, #10192	; 0x27d0
 8005266:	485a      	ldr	r0, [pc, #360]	; (80053d0 <MX_GPIO_Init+0x1e4>)
 8005268:	f001 fdc7 	bl	8006dfa <HAL_GPIO_WritePin>
                          |Step2_DIR_Pin|Step1_LowCurrent_Pin|Step2_STEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step3_RESET_Pin|AFK_Speed1_Pin|Step3_ENABLE_Pin|Step2_RESET_Pin
 800526c:	2201      	movs	r2, #1
 800526e:	f641 012c 	movw	r1, #6188	; 0x182c
 8005272:	4857      	ldr	r0, [pc, #348]	; (80053d0 <MX_GPIO_Init+0x1e4>)
 8005274:	f001 fdc1 	bl	8006dfa <HAL_GPIO_WritePin>
                          |Step2_ENABLE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Step3_DIR_Pin|Button_LED_Pin, GPIO_PIN_SET);
 8005278:	2201      	movs	r2, #1
 800527a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800527e:	4855      	ldr	r0, [pc, #340]	; (80053d4 <MX_GPIO_Init+0x1e8>)
 8005280:	f001 fdbb 	bl	8006dfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Step3_LowCurrent_Pin|USB_ENABLE_Pin, GPIO_PIN_RESET);
 8005284:	2200      	movs	r2, #0
 8005286:	f248 0180 	movw	r1, #32896	; 0x8080
 800528a:	4852      	ldr	r0, [pc, #328]	; (80053d4 <MX_GPIO_Init+0x1e8>)
 800528c:	f001 fdb5 	bl	8006dfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step3_STEP_Pin|Safety_Out_Pin|Step1_STEP_Pin, GPIO_PIN_RESET);
 8005290:	2200      	movs	r2, #0
 8005292:	210e      	movs	r1, #14
 8005294:	4850      	ldr	r0, [pc, #320]	; (80053d8 <MX_GPIO_Init+0x1ec>)
 8005296:	f001 fdb0 	bl	8006dfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Reset_Particles_Sensor_Pin|Step1_RESET_Pin|Step1_ENABLE_Pin, GPIO_PIN_SET);
 800529a:	2201      	movs	r2, #1
 800529c:	f248 0130 	movw	r1, #32816	; 0x8030
 80052a0:	484d      	ldr	r0, [pc, #308]	; (80053d8 <MX_GPIO_Init+0x1ec>)
 80052a2:	f001 fdaa 	bl	8006dfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Step1_DIR_GPIO_Port, Step1_DIR_Pin, GPIO_PIN_RESET);
 80052a6:	2200      	movs	r2, #0
 80052a8:	2104      	movs	r1, #4
 80052aa:	484c      	ldr	r0, [pc, #304]	; (80053dc <MX_GPIO_Init+0x1f0>)
 80052ac:	f001 fda5 	bl	8006dfa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Step2_LowCurrent_Pin Step3_RESET_Pin AFK_Speed1_Pin uc_Stepper_Sleep_Pin
                           Step3_ENABLE_Pin SPEED2_COIL_Pin SPEED3_COIL_Pin Step2_DIR_Pin
                           Step1_LowCurrent_Pin Step2_RESET_Pin Step2_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step2_LowCurrent_Pin|Step3_RESET_Pin|AFK_Speed1_Pin|uc_Stepper_Sleep_Pin
 80052b0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80052b4:	613b      	str	r3, [r7, #16]
                          |Step3_ENABLE_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin|Step2_DIR_Pin
                          |Step1_LowCurrent_Pin|Step2_RESET_Pin|Step2_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052b6:	2301      	movs	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052be:	2302      	movs	r3, #2
 80052c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052c2:	f107 0310 	add.w	r3, r7, #16
 80052c6:	4619      	mov	r1, r3
 80052c8:	4841      	ldr	r0, [pc, #260]	; (80053d0 <MX_GPIO_Init+0x1e4>)
 80052ca:	f001 fbfb 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch1_Pin Limit_switch2_Pin */
  GPIO_InitStruct.Pin = Limit_switch1_Pin|Limit_switch2_Pin;
 80052ce:	2303      	movs	r3, #3
 80052d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052da:	f107 0310 	add.w	r3, r7, #16
 80052de:	4619      	mov	r1, r3
 80052e0:	483b      	ldr	r0, [pc, #236]	; (80053d0 <MX_GPIO_Init+0x1e4>)
 80052e2:	f001 fbef 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_Zero_crossing_Pin Limit_switch3_Pin */
  GPIO_InitStruct.Pin = FAN_Zero_crossing_Pin|Limit_switch3_Pin;
 80052e6:	2312      	movs	r3, #18
 80052e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f2:	f107 0310 	add.w	r3, r7, #16
 80052f6:	4619      	mov	r1, r3
 80052f8:	4836      	ldr	r0, [pc, #216]	; (80053d4 <MX_GPIO_Init+0x1e8>)
 80052fa:	f001 fbe3 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Step3_DIR_Pin Step3_LowCurrent_Pin Button_LED_Pin USB_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step3_DIR_Pin|Step3_LowCurrent_Pin|Button_LED_Pin|USB_ENABLE_Pin;
 80052fe:	f248 13a0 	movw	r3, #33184	; 0x81a0
 8005302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005304:	2301      	movs	r3, #1
 8005306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005308:	2300      	movs	r3, #0
 800530a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800530c:	2302      	movs	r3, #2
 800530e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005310:	f107 0310 	add.w	r3, r7, #16
 8005314:	4619      	mov	r1, r3
 8005316:	482f      	ldr	r0, [pc, #188]	; (80053d4 <MX_GPIO_Init+0x1e8>)
 8005318:	f001 fbd4 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800531c:	2340      	movs	r3, #64	; 0x40
 800531e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005320:	2302      	movs	r3, #2
 8005322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005324:	2302      	movs	r3, #2
 8005326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005328:	f107 0310 	add.w	r3, r7, #16
 800532c:	4619      	mov	r1, r3
 800532e:	4829      	ldr	r0, [pc, #164]	; (80053d4 <MX_GPIO_Init+0x1e8>)
 8005330:	f001 fbc8 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch_Door_Pin Thermostat_Input_Pin Safety_ON_Pin Interlock_Input_Pin
                           Button_Input_Pin USB_Fault_Pin */
  GPIO_InitStruct.Pin = Limit_switch_Door_Pin|Thermostat_Input_Pin|Safety_ON_Pin|Interlock_Input_Pin
 8005334:	f247 3301 	movw	r3, #29441	; 0x7301
 8005338:	613b      	str	r3, [r7, #16]
                          |Button_Input_Pin|USB_Fault_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533e:	2300      	movs	r3, #0
 8005340:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005342:	f107 0310 	add.w	r3, r7, #16
 8005346:	4619      	mov	r1, r3
 8005348:	4823      	ldr	r0, [pc, #140]	; (80053d8 <MX_GPIO_Init+0x1ec>)
 800534a:	f001 fbbb 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Step3_STEP_Pin Step1_STEP_Pin */
  GPIO_InitStruct.Pin = Step3_STEP_Pin|Step1_STEP_Pin;
 800534e:	230a      	movs	r3, #10
 8005350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005352:	2301      	movs	r3, #1
 8005354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005356:	2300      	movs	r3, #0
 8005358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800535a:	2303      	movs	r3, #3
 800535c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800535e:	f107 0310 	add.w	r3, r7, #16
 8005362:	4619      	mov	r1, r3
 8005364:	481c      	ldr	r0, [pc, #112]	; (80053d8 <MX_GPIO_Init+0x1ec>)
 8005366:	f001 fbad 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Safety_Out_Pin Reset_Particles_Sensor_Pin Step1_RESET_Pin Step1_ENABLE_Pin */
  GPIO_InitStruct.Pin = Safety_Out_Pin|Reset_Particles_Sensor_Pin|Step1_RESET_Pin|Step1_ENABLE_Pin;
 800536a:	f248 0334 	movw	r3, #32820	; 0x8034
 800536e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005370:	2301      	movs	r3, #1
 8005372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005374:	2300      	movs	r3, #0
 8005376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005378:	2302      	movs	r3, #2
 800537a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800537c:	f107 0310 	add.w	r3, r7, #16
 8005380:	4619      	mov	r1, r3
 8005382:	4815      	ldr	r0, [pc, #84]	; (80053d8 <MX_GPIO_Init+0x1ec>)
 8005384:	f001 fb9e 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Step2_STEP_Pin */
  GPIO_InitStruct.Pin = Step2_STEP_Pin;
 8005388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800538c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800538e:	2301      	movs	r3, #1
 8005390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005392:	2300      	movs	r3, #0
 8005394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005396:	2303      	movs	r3, #3
 8005398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Step2_STEP_GPIO_Port, &GPIO_InitStruct);
 800539a:	f107 0310 	add.w	r3, r7, #16
 800539e:	4619      	mov	r1, r3
 80053a0:	480b      	ldr	r0, [pc, #44]	; (80053d0 <MX_GPIO_Init+0x1e4>)
 80053a2:	f001 fb8f 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Step1_DIR_Pin */
  GPIO_InitStruct.Pin = Step1_DIR_Pin;
 80053a6:	2304      	movs	r3, #4
 80053a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053aa:	2301      	movs	r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b2:	2302      	movs	r3, #2
 80053b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Step1_DIR_GPIO_Port, &GPIO_InitStruct);
 80053b6:	f107 0310 	add.w	r3, r7, #16
 80053ba:	4619      	mov	r1, r3
 80053bc:	4807      	ldr	r0, [pc, #28]	; (80053dc <MX_GPIO_Init+0x1f0>)
 80053be:	f001 fb81 	bl	8006ac4 <HAL_GPIO_Init>

}
 80053c2:	bf00      	nop
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40011000 	.word	0x40011000
 80053d4:	40010800 	.word	0x40010800
 80053d8:	40010c00 	.word	0x40010c00
 80053dc:	40011400 	.word	0x40011400

080053e0 <TimerCallback>:
  /* USER CODE END 5 */
}

/* TimerCallback function */
void TimerCallback(void const * argument)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */

  /* USER CODE END TimerCallback */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bc80      	pop	{r7}
 80053f0:	4770      	bx	lr
	...

080053f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a04      	ldr	r2, [pc, #16]	; (8005414 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d101      	bne.n	800540a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005406:	f000 fdd3 	bl	8005fb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40012c00 	.word	0x40012c00

08005418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800541c:	b672      	cpsid	i
}
 800541e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005420:	e7fe      	b.n	8005420 <Error_Handler+0x8>
	...

08005424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800542a:	4b18      	ldr	r3, [pc, #96]	; (800548c <HAL_MspInit+0x68>)
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	4a17      	ldr	r2, [pc, #92]	; (800548c <HAL_MspInit+0x68>)
 8005430:	f043 0301 	orr.w	r3, r3, #1
 8005434:	6193      	str	r3, [r2, #24]
 8005436:	4b15      	ldr	r3, [pc, #84]	; (800548c <HAL_MspInit+0x68>)
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005442:	4b12      	ldr	r3, [pc, #72]	; (800548c <HAL_MspInit+0x68>)
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	4a11      	ldr	r2, [pc, #68]	; (800548c <HAL_MspInit+0x68>)
 8005448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544c:	61d3      	str	r3, [r2, #28]
 800544e:	4b0f      	ldr	r3, [pc, #60]	; (800548c <HAL_MspInit+0x68>)
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005456:	607b      	str	r3, [r7, #4]
 8005458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800545a:	2200      	movs	r2, #0
 800545c:	210f      	movs	r1, #15
 800545e:	f06f 0001 	mvn.w	r0, #1
 8005462:	f000 fe76 	bl	8006152 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005466:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <HAL_MspInit+0x6c>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	4a04      	ldr	r2, [pc, #16]	; (8005490 <HAL_MspInit+0x6c>)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40021000 	.word	0x40021000
 8005490:	40010000 	.word	0x40010000

08005494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549c:	f107 0310 	add.w	r3, r7, #16
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <HAL_I2C_MspInit+0x90>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d133      	bne.n	800551c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054b4:	4b1c      	ldr	r3, [pc, #112]	; (8005528 <HAL_I2C_MspInit+0x94>)
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	4a1b      	ldr	r2, [pc, #108]	; (8005528 <HAL_I2C_MspInit+0x94>)
 80054ba:	f043 0308 	orr.w	r3, r3, #8
 80054be:	6193      	str	r3, [r2, #24]
 80054c0:	4b19      	ldr	r3, [pc, #100]	; (8005528 <HAL_I2C_MspInit+0x94>)
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 80054cc:	23c0      	movs	r3, #192	; 0xc0
 80054ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054d0:	2312      	movs	r3, #18
 80054d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054d4:	2303      	movs	r3, #3
 80054d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054d8:	f107 0310 	add.w	r3, r7, #16
 80054dc:	4619      	mov	r1, r3
 80054de:	4813      	ldr	r0, [pc, #76]	; (800552c <HAL_I2C_MspInit+0x98>)
 80054e0:	f001 faf0 	bl	8006ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80054e4:	4b10      	ldr	r3, [pc, #64]	; (8005528 <HAL_I2C_MspInit+0x94>)
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	4a0f      	ldr	r2, [pc, #60]	; (8005528 <HAL_I2C_MspInit+0x94>)
 80054ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054ee:	61d3      	str	r3, [r2, #28]
 80054f0:	4b0d      	ldr	r3, [pc, #52]	; (8005528 <HAL_I2C_MspInit+0x94>)
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80054fc:	2200      	movs	r2, #0
 80054fe:	2105      	movs	r1, #5
 8005500:	201f      	movs	r0, #31
 8005502:	f000 fe26 	bl	8006152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005506:	201f      	movs	r0, #31
 8005508:	f000 fe3f 	bl	800618a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800550c:	2200      	movs	r2, #0
 800550e:	2105      	movs	r1, #5
 8005510:	2020      	movs	r0, #32
 8005512:	f000 fe1e 	bl	8006152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005516:	2020      	movs	r0, #32
 8005518:	f000 fe37 	bl	800618a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800551c:	bf00      	nop
 800551e:	3720      	adds	r7, #32
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40005400 	.word	0x40005400
 8005528:	40021000 	.word	0x40021000
 800552c:	40010c00 	.word	0x40010c00

08005530 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a0b      	ldr	r2, [pc, #44]	; (800556c <HAL_RTC_MspInit+0x3c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d110      	bne.n	8005564 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8005542:	f003 fbb7 	bl	8008cb4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8005546:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <HAL_RTC_MspInit+0x40>)
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	4a09      	ldr	r2, [pc, #36]	; (8005570 <HAL_RTC_MspInit+0x40>)
 800554c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005550:	61d3      	str	r3, [r2, #28]
 8005552:	4b07      	ldr	r3, [pc, #28]	; (8005570 <HAL_RTC_MspInit+0x40>)
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800555e:	4b05      	ldr	r3, [pc, #20]	; (8005574 <HAL_RTC_MspInit+0x44>)
 8005560:	2201      	movs	r2, #1
 8005562:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40002800 	.word	0x40002800
 8005570:	40021000 	.word	0x40021000
 8005574:	4242043c 	.word	0x4242043c

08005578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08c      	sub	sp, #48	; 0x30
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005580:	f107 0320 	add.w	r3, r7, #32
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	605a      	str	r2, [r3, #4]
 800558a:	609a      	str	r2, [r3, #8]
 800558c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a72      	ldr	r2, [pc, #456]	; (800575c <HAL_UART_MspInit+0x1e4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d160      	bne.n	800565a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005598:	4b71      	ldr	r3, [pc, #452]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	4a70      	ldr	r2, [pc, #448]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 800559e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055a2:	6193      	str	r3, [r2, #24]
 80055a4:	4b6e      	ldr	r3, [pc, #440]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ac:	61fb      	str	r3, [r7, #28]
 80055ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055b0:	4b6b      	ldr	r3, [pc, #428]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	4a6a      	ldr	r2, [pc, #424]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 80055b6:	f043 0304 	orr.w	r3, r3, #4
 80055ba:	6193      	str	r3, [r2, #24]
 80055bc:	4b68      	ldr	r3, [pc, #416]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ce:	2302      	movs	r3, #2
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055d2:	2303      	movs	r3, #3
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055d6:	f107 0320 	add.w	r3, r7, #32
 80055da:	4619      	mov	r1, r3
 80055dc:	4861      	ldr	r0, [pc, #388]	; (8005764 <HAL_UART_MspInit+0x1ec>)
 80055de:	f001 fa71 	bl	8006ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80055e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055e8:	2300      	movs	r3, #0
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ec:	2300      	movs	r3, #0
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f0:	f107 0320 	add.w	r3, r7, #32
 80055f4:	4619      	mov	r1, r3
 80055f6:	485b      	ldr	r0, [pc, #364]	; (8005764 <HAL_UART_MspInit+0x1ec>)
 80055f8:	f001 fa64 	bl	8006ac4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80055fc:	4b5a      	ldr	r3, [pc, #360]	; (8005768 <HAL_UART_MspInit+0x1f0>)
 80055fe:	4a5b      	ldr	r2, [pc, #364]	; (800576c <HAL_UART_MspInit+0x1f4>)
 8005600:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005602:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_UART_MspInit+0x1f0>)
 8005604:	2200      	movs	r2, #0
 8005606:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005608:	4b57      	ldr	r3, [pc, #348]	; (8005768 <HAL_UART_MspInit+0x1f0>)
 800560a:	2200      	movs	r2, #0
 800560c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800560e:	4b56      	ldr	r3, [pc, #344]	; (8005768 <HAL_UART_MspInit+0x1f0>)
 8005610:	2280      	movs	r2, #128	; 0x80
 8005612:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005614:	4b54      	ldr	r3, [pc, #336]	; (8005768 <HAL_UART_MspInit+0x1f0>)
 8005616:	2200      	movs	r2, #0
 8005618:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800561a:	4b53      	ldr	r3, [pc, #332]	; (8005768 <HAL_UART_MspInit+0x1f0>)
 800561c:	2200      	movs	r2, #0
 800561e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005620:	4b51      	ldr	r3, [pc, #324]	; (8005768 <HAL_UART_MspInit+0x1f0>)
 8005622:	2220      	movs	r2, #32
 8005624:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005626:	4b50      	ldr	r3, [pc, #320]	; (8005768 <HAL_UART_MspInit+0x1f0>)
 8005628:	2200      	movs	r2, #0
 800562a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800562c:	484e      	ldr	r0, [pc, #312]	; (8005768 <HAL_UART_MspInit+0x1f0>)
 800562e:	f000 fdbb 	bl	80061a8 <HAL_DMA_Init>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8005638:	f7ff feee 	bl	8005418 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a4a      	ldr	r2, [pc, #296]	; (8005768 <HAL_UART_MspInit+0x1f0>)
 8005640:	639a      	str	r2, [r3, #56]	; 0x38
 8005642:	4a49      	ldr	r2, [pc, #292]	; (8005768 <HAL_UART_MspInit+0x1f0>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005648:	2200      	movs	r2, #0
 800564a:	2105      	movs	r1, #5
 800564c:	2025      	movs	r0, #37	; 0x25
 800564e:	f000 fd80 	bl	8006152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005652:	2025      	movs	r0, #37	; 0x25
 8005654:	f000 fd99 	bl	800618a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005658:	e07c      	b.n	8005754 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a44      	ldr	r2, [pc, #272]	; (8005770 <HAL_UART_MspInit+0x1f8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d138      	bne.n	80056d6 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005664:	4b3e      	ldr	r3, [pc, #248]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	4a3d      	ldr	r2, [pc, #244]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 800566a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800566e:	61d3      	str	r3, [r2, #28]
 8005670:	4b3b      	ldr	r3, [pc, #236]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800567c:	4b38      	ldr	r3, [pc, #224]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	4a37      	ldr	r2, [pc, #220]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 8005682:	f043 0304 	orr.w	r3, r3, #4
 8005686:	6193      	str	r3, [r2, #24]
 8005688:	4b35      	ldr	r3, [pc, #212]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005694:	2304      	movs	r3, #4
 8005696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005698:	2302      	movs	r3, #2
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800569c:	2303      	movs	r3, #3
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056a0:	f107 0320 	add.w	r3, r7, #32
 80056a4:	4619      	mov	r1, r3
 80056a6:	482f      	ldr	r0, [pc, #188]	; (8005764 <HAL_UART_MspInit+0x1ec>)
 80056a8:	f001 fa0c 	bl	8006ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80056ac:	2308      	movs	r3, #8
 80056ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056b0:	2300      	movs	r3, #0
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b4:	2300      	movs	r3, #0
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056b8:	f107 0320 	add.w	r3, r7, #32
 80056bc:	4619      	mov	r1, r3
 80056be:	4829      	ldr	r0, [pc, #164]	; (8005764 <HAL_UART_MspInit+0x1ec>)
 80056c0:	f001 fa00 	bl	8006ac4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80056c4:	2200      	movs	r2, #0
 80056c6:	2105      	movs	r1, #5
 80056c8:	2026      	movs	r0, #38	; 0x26
 80056ca:	f000 fd42 	bl	8006152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80056ce:	2026      	movs	r0, #38	; 0x26
 80056d0:	f000 fd5b 	bl	800618a <HAL_NVIC_EnableIRQ>
}
 80056d4:	e03e      	b.n	8005754 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a26      	ldr	r2, [pc, #152]	; (8005774 <HAL_UART_MspInit+0x1fc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d139      	bne.n	8005754 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80056e0:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 80056e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056ea:	61d3      	str	r3, [r2, #28]
 80056ec:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056f8:	4b19      	ldr	r3, [pc, #100]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	4a18      	ldr	r2, [pc, #96]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 80056fe:	f043 0308 	orr.w	r3, r3, #8
 8005702:	6193      	str	r3, [r2, #24]
 8005704:	4b16      	ldr	r3, [pc, #88]	; (8005760 <HAL_UART_MspInit+0x1e8>)
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	60bb      	str	r3, [r7, #8]
 800570e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005716:	2302      	movs	r3, #2
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800571a:	2303      	movs	r3, #3
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571e:	f107 0320 	add.w	r3, r7, #32
 8005722:	4619      	mov	r1, r3
 8005724:	4814      	ldr	r0, [pc, #80]	; (8005778 <HAL_UART_MspInit+0x200>)
 8005726:	f001 f9cd 	bl	8006ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800572a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800572e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005730:	2300      	movs	r3, #0
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005734:	2300      	movs	r3, #0
 8005736:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005738:	f107 0320 	add.w	r3, r7, #32
 800573c:	4619      	mov	r1, r3
 800573e:	480e      	ldr	r0, [pc, #56]	; (8005778 <HAL_UART_MspInit+0x200>)
 8005740:	f001 f9c0 	bl	8006ac4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005744:	2200      	movs	r2, #0
 8005746:	2105      	movs	r1, #5
 8005748:	2027      	movs	r0, #39	; 0x27
 800574a:	f000 fd02 	bl	8006152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800574e:	2027      	movs	r0, #39	; 0x27
 8005750:	f000 fd1b 	bl	800618a <HAL_NVIC_EnableIRQ>
}
 8005754:	bf00      	nop
 8005756:	3730      	adds	r7, #48	; 0x30
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40013800 	.word	0x40013800
 8005760:	40021000 	.word	0x40021000
 8005764:	40010800 	.word	0x40010800
 8005768:	20001854 	.word	0x20001854
 800576c:	40020058 	.word	0x40020058
 8005770:	40004400 	.word	0x40004400
 8005774:	40004800 	.word	0x40004800
 8005778:	40010c00 	.word	0x40010c00

0800577c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08c      	sub	sp, #48	; 0x30
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800578c:	2200      	movs	r2, #0
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	2019      	movs	r0, #25
 8005792:	f000 fcde 	bl	8006152 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005796:	2019      	movs	r0, #25
 8005798:	f000 fcf7 	bl	800618a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800579c:	4b1e      	ldr	r3, [pc, #120]	; (8005818 <HAL_InitTick+0x9c>)
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	4a1d      	ldr	r2, [pc, #116]	; (8005818 <HAL_InitTick+0x9c>)
 80057a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057a6:	6193      	str	r3, [r2, #24]
 80057a8:	4b1b      	ldr	r3, [pc, #108]	; (8005818 <HAL_InitTick+0x9c>)
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80057b4:	f107 0210 	add.w	r2, r7, #16
 80057b8:	f107 0314 	add.w	r3, r7, #20
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f003 ffc8 	bl	8009754 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80057c4:	f003 ffb2 	bl	800972c <HAL_RCC_GetPCLK2Freq>
 80057c8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	4a13      	ldr	r2, [pc, #76]	; (800581c <HAL_InitTick+0xa0>)
 80057ce:	fba2 2303 	umull	r2, r3, r2, r3
 80057d2:	0c9b      	lsrs	r3, r3, #18
 80057d4:	3b01      	subs	r3, #1
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80057d8:	4b11      	ldr	r3, [pc, #68]	; (8005820 <HAL_InitTick+0xa4>)
 80057da:	4a12      	ldr	r2, [pc, #72]	; (8005824 <HAL_InitTick+0xa8>)
 80057dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80057de:	4b10      	ldr	r3, [pc, #64]	; (8005820 <HAL_InitTick+0xa4>)
 80057e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80057e4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80057e6:	4a0e      	ldr	r2, [pc, #56]	; (8005820 <HAL_InitTick+0xa4>)
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80057ec:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <HAL_InitTick+0xa4>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057f2:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <HAL_InitTick+0xa4>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80057f8:	4809      	ldr	r0, [pc, #36]	; (8005820 <HAL_InitTick+0xa4>)
 80057fa:	f004 ffeb 	bl	800a7d4 <HAL_TIM_Base_Init>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005804:	4806      	ldr	r0, [pc, #24]	; (8005820 <HAL_InitTick+0xa4>)
 8005806:	f005 f83d 	bl	800a884 <HAL_TIM_Base_Start_IT>
 800580a:	4603      	mov	r3, r0
 800580c:	e000      	b.n	8005810 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
}
 8005810:	4618      	mov	r0, r3
 8005812:	3730      	adds	r7, #48	; 0x30
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40021000 	.word	0x40021000
 800581c:	431bde83 	.word	0x431bde83
 8005820:	200018ac 	.word	0x200018ac
 8005824:	40012c00 	.word	0x40012c00

08005828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800582c:	e7fe      	b.n	800582c <NMI_Handler+0x4>

0800582e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800582e:	b480      	push	{r7}
 8005830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005832:	e7fe      	b.n	8005832 <HardFault_Handler+0x4>

08005834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005838:	e7fe      	b.n	8005838 <MemManage_Handler+0x4>

0800583a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800583a:	b480      	push	{r7}
 800583c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800583e:	e7fe      	b.n	800583e <BusFault_Handler+0x4>

08005840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005844:	e7fe      	b.n	8005844 <UsageFault_Handler+0x4>

08005846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005846:	b480      	push	{r7}
 8005848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800584a:	bf00      	nop
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr
	...

08005854 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005858:	4802      	ldr	r0, [pc, #8]	; (8005864 <DMA1_Channel5_IRQHandler+0x10>)
 800585a:	f000 febd 	bl	80065d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800585e:	bf00      	nop
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20001854 	.word	0x20001854

08005868 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800586c:	4802      	ldr	r0, [pc, #8]	; (8005878 <TIM1_UP_IRQHandler+0x10>)
 800586e:	f005 f863 	bl	800a938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005872:	bf00      	nop
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	200018ac 	.word	0x200018ac

0800587c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005880:	4802      	ldr	r0, [pc, #8]	; (800588c <I2C1_EV_IRQHandler+0x10>)
 8005882:	f001 fd67 	bl	8007354 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20001690 	.word	0x20001690

08005890 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005894:	4802      	ldr	r0, [pc, #8]	; (80058a0 <I2C1_ER_IRQHandler+0x10>)
 8005896:	f001 fece 	bl	8007636 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800589a:	bf00      	nop
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20001690 	.word	0x20001690

080058a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80058a8:	4802      	ldr	r0, [pc, #8]	; (80058b4 <USART1_IRQHandler+0x10>)
 80058aa:	f005 fc63 	bl	800b174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80058ae:	bf00      	nop
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	200016f8 	.word	0x200016f8

080058b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80058bc:	4802      	ldr	r0, [pc, #8]	; (80058c8 <USART2_IRQHandler+0x10>)
 80058be:	f005 fc59 	bl	800b174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80058c2:	bf00      	nop
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	2000176c 	.word	0x2000176c

080058cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80058d0:	4802      	ldr	r0, [pc, #8]	; (80058dc <USART3_IRQHandler+0x10>)
 80058d2:	f005 fc4f 	bl	800b174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80058d6:	bf00      	nop
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	200017e0 	.word	0x200017e0

080058e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
	return 1;
 80058e4:	2301      	movs	r3, #1
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <_kill>:

int _kill(int pid, int sig)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b082      	sub	sp, #8
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80058f8:	f009 fc2e 	bl	800f158 <__errno>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2216      	movs	r2, #22
 8005900:	601a      	str	r2, [r3, #0]
	return -1;
 8005902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <_exit>:

void _exit (int status)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005916:	f04f 31ff 	mov.w	r1, #4294967295
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff ffe7 	bl	80058ee <_kill>
	while (1) {}		/* Make sure we hang here */
 8005920:	e7fe      	b.n	8005920 <_exit+0x12>

08005922 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b086      	sub	sp, #24
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800592e:	2300      	movs	r3, #0
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e00a      	b.n	800594a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005934:	f3af 8000 	nop.w
 8005938:	4601      	mov	r1, r0
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	60ba      	str	r2, [r7, #8]
 8005940:	b2ca      	uxtb	r2, r1
 8005942:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	3301      	adds	r3, #1
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	429a      	cmp	r2, r3
 8005950:	dbf0      	blt.n	8005934 <_read+0x12>
	}

return len;
 8005952:	687b      	ldr	r3, [r7, #4]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	e009      	b.n	8005982 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	60ba      	str	r2, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7fd f992 	bl	8002ca0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	3301      	adds	r3, #1
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	429a      	cmp	r2, r3
 8005988:	dbf1      	blt.n	800596e <_write+0x12>
	}
	return len;
 800598a:	687b      	ldr	r3, [r7, #4]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <_close>:

int _close(int file)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
	return -1;
 800599c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059ba:	605a      	str	r2, [r3, #4]
	return 0;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr

080059c8 <_isatty>:

int _isatty(int file)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
	return 1;
 80059d0:	2301      	movs	r3, #1
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr

080059dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
	return 0;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr

080059f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059fc:	4a14      	ldr	r2, [pc, #80]	; (8005a50 <_sbrk+0x5c>)
 80059fe:	4b15      	ldr	r3, [pc, #84]	; (8005a54 <_sbrk+0x60>)
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a08:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <_sbrk+0x64>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a10:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <_sbrk+0x64>)
 8005a12:	4a12      	ldr	r2, [pc, #72]	; (8005a5c <_sbrk+0x68>)
 8005a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a16:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <_sbrk+0x64>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d207      	bcs.n	8005a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a24:	f009 fb98 	bl	800f158 <__errno>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	220c      	movs	r2, #12
 8005a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a32:	e009      	b.n	8005a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a34:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <_sbrk+0x64>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a3a:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <_sbrk+0x64>)
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4413      	add	r3, r2
 8005a42:	4a05      	ldr	r2, [pc, #20]	; (8005a58 <_sbrk+0x64>)
 8005a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a46:	68fb      	ldr	r3, [r7, #12]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20010000 	.word	0x20010000
 8005a54:	00000400 	.word	0x00000400
 8005a58:	200018f4 	.word	0x200018f4
 8005a5c:	20003b98 	.word	0x20003b98

08005a60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a64:	bf00      	nop
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr

08005a6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a6c:	480c      	ldr	r0, [pc, #48]	; (8005aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005a6e:	490d      	ldr	r1, [pc, #52]	; (8005aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005a70:	4a0d      	ldr	r2, [pc, #52]	; (8005aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a74:	e002      	b.n	8005a7c <LoopCopyDataInit>

08005a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a7a:	3304      	adds	r3, #4

08005a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a80:	d3f9      	bcc.n	8005a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a82:	4a0a      	ldr	r2, [pc, #40]	; (8005aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005a84:	4c0a      	ldr	r4, [pc, #40]	; (8005ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a88:	e001      	b.n	8005a8e <LoopFillZerobss>

08005a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a8c:	3204      	adds	r2, #4

08005a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a90:	d3fb      	bcc.n	8005a8a <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005a92:	f7ff ffe5 	bl	8005a60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005a96:	f009 fb77 	bl	800f188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005a9a:	f7ff f9c3 	bl	8004e24 <main>
  bx lr
 8005a9e:	4770      	bx	lr
  ldr r0, =_sdata
 8005aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005aa4:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8005aa8:	08014d48 	.word	0x08014d48
  ldr r2, =_sbss
 8005aac:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8005ab0:	20003b94 	.word	0x20003b94

08005ab4 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005ab4:	e7fe      	b.n	8005ab4 <ADC1_2_IRQHandler>
	...

08005ab8 <UARTPROTOCOLDEC_Init>:

static void DropFrame(UARTPROTOCOLDEC_SHandle* psHandle, const char* szReason);
static void AcceptFrame(UARTPROTOCOLDEC_SHandle* psHandle);

void UARTPROTOCOLDEC_Init(UARTPROTOCOLDEC_SHandle* psHandle, const UARTPROTOCOLDEC_SConfig* psConfig)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
    assert(psHandle != NULL && psConfig != NULL && psConfig->u8PayloadBuffers != NULL);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d006      	beq.n	8005ad6 <UARTPROTOCOLDEC_Init+0x1e>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <UARTPROTOCOLDEC_Init+0x1e>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d105      	bne.n	8005ae2 <UARTPROTOCOLDEC_Init+0x2a>
 8005ad6:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <UARTPROTOCOLDEC_Init+0x38>)
 8005ad8:	4a06      	ldr	r2, [pc, #24]	; (8005af4 <UARTPROTOCOLDEC_Init+0x3c>)
 8005ada:	210c      	movs	r1, #12
 8005adc:	4806      	ldr	r0, [pc, #24]	; (8005af8 <UARTPROTOCOLDEC_Init+0x40>)
 8005ade:	f009 fb1d 	bl	800f11c <__assert_func>
    psHandle->psConfig = psConfig;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	619a      	str	r2, [r3, #24]
}
 8005ae8:	bf00      	nop
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	08013a90 	.word	0x08013a90
 8005af4:	080148f8 	.word	0x080148f8
 8005af8:	08013adc 	.word	0x08013adc

08005afc <UARTPROTOCOLENC_Init>:
#include <assert.h>
#include "uart_protocol_enc.h"

void UARTPROTOCOLENC_Init(UARTPROTOCOLENC_SHandle* psHandle, const UARTPROTOCOLENC_SConfig* psConfig)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
    assert(psHandle != NULL && psConfig != NULL);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <UARTPROTOCOLENC_Init+0x16>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d105      	bne.n	8005b1e <UARTPROTOCOLENC_Init+0x22>
 8005b12:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <UARTPROTOCOLENC_Init+0x44>)
 8005b14:	4a0b      	ldr	r2, [pc, #44]	; (8005b44 <UARTPROTOCOLENC_Init+0x48>)
 8005b16:	2106      	movs	r1, #6
 8005b18:	480b      	ldr	r0, [pc, #44]	; (8005b48 <UARTPROTOCOLENC_Init+0x4c>)
 8005b1a:	f009 faff 	bl	800f11c <__assert_func>
    assert(psConfig->fnWriteCb != NULL);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d105      	bne.n	8005b32 <UARTPROTOCOLENC_Init+0x36>
 8005b26:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <UARTPROTOCOLENC_Init+0x50>)
 8005b28:	4a06      	ldr	r2, [pc, #24]	; (8005b44 <UARTPROTOCOLENC_Init+0x48>)
 8005b2a:	2107      	movs	r1, #7
 8005b2c:	4806      	ldr	r0, [pc, #24]	; (8005b48 <UARTPROTOCOLENC_Init+0x4c>)
 8005b2e:	f009 faf5 	bl	800f11c <__assert_func>

    psHandle->psConfig = psConfig;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	601a      	str	r2, [r3, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	08013b98 	.word	0x08013b98
 8005b44:	08014910 	.word	0x08014910
 8005b48:	08013bc0 	.word	0x08013bc0
 8005b4c:	08013bf0 	.word	0x08013bf0

08005b50 <UARTPROTOCOLENC_Send>:

bool UARTPROTOCOLENC_Send(UARTPROTOCOLENC_SHandle* psHandle, uint8_t u8ID, const uint8_t u8Payloads[], uint16_t u16PayloadLen)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	f507 6484 	add.w	r4, r7, #1056	; 0x420
 8005b5c:	f2a4 4414 	subw	r4, r4, #1044	; 0x414
 8005b60:	6020      	str	r0, [r4, #0]
 8005b62:	4608      	mov	r0, r1
 8005b64:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8005b68:	f2a1 411c 	subw	r1, r1, #1052	; 0x41c
 8005b6c:	600a      	str	r2, [r1, #0]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005b74:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8005b78:	4602      	mov	r2, r0
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005b80:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8005b84:	460a      	mov	r2, r1
 8005b86:	801a      	strh	r2, [r3, #0]
    if (u16PayloadLen > UARTPROTOCOLCOMMON_MAXPAYLOAD)
 8005b88:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005b8c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b96:	d901      	bls.n	8005b9c <UARTPROTOCOLENC_Send+0x4c>
        return false;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e0ba      	b.n	8005d12 <UARTPROTOCOLENC_Send+0x1c2>


    uint8_t u8Checksum = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
    uint8_t u8TxBuffer[UARTPROTOCOLCOMMON_MAXPAYLOAD+6] = {0x00};
 8005ba2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005ba6:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	f240 4202 	movw	r2, #1026	; 0x402
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f009 fb18 	bl	800f1ec <memset>

    u8TxBuffer[0] = (uint8_t)UARTPROTOCOLCOMMON_START_BYTE;
 8005bbc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005bc0:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8005bc4:	22cc      	movs	r2, #204	; 0xcc
 8005bc6:	701a      	strb	r2, [r3, #0]
    u8TxBuffer[1] = u8ID;
 8005bc8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005bcc:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8005bd0:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8005bd4:	f2a2 4215 	subw	r2, r2, #1045	; 0x415
 8005bd8:	7812      	ldrb	r2, [r2, #0]
 8005bda:	705a      	strb	r2, [r3, #1]
    // Payload in LITTLE ENDIAN format
    u8TxBuffer[2] = (uint8_t)(u16PayloadLen & 0xFF);
 8005bdc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005be0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005bec:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8005bf0:	709a      	strb	r2, [r3, #2]
    u8TxBuffer[3] = (uint8_t)((u16PayloadLen >> 8) & 0xFF);
 8005bf2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005bf6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	0a1b      	lsrs	r3, r3, #8
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005c06:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8005c0a:	70da      	strb	r2, [r3, #3]

    if (u8Payloads != NULL && u16PayloadLen > 0)
 8005c0c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005c10:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d029      	beq.n	8005c6e <UARTPROTOCOLENC_Send+0x11e>
 8005c1a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005c1e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d022      	beq.n	8005c6e <UARTPROTOCOLENC_Send+0x11e>
    {
    	for(uint16_t i = 0; i < u16PayloadLen; i++)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
 8005c2e:	e015      	b.n	8005c5c <UARTPROTOCOLENC_Send+0x10c>
    	{
    		u8TxBuffer[i+4] = u8Payloads[i];
 8005c30:	f8b7 341c 	ldrh.w	r3, [r7, #1052]	; 0x41c
 8005c34:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8005c38:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	441a      	add	r2, r3
 8005c40:	f8b7 341c 	ldrh.w	r3, [r7, #1052]	; 0x41c
 8005c44:	3304      	adds	r3, #4
 8005c46:	7811      	ldrb	r1, [r2, #0]
 8005c48:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8005c4c:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8005c50:	54d1      	strb	r1, [r2, r3]
    	for(uint16_t i = 0; i < u16PayloadLen; i++)
 8005c52:	f8b7 341c 	ldrh.w	r3, [r7, #1052]	; 0x41c
 8005c56:	3301      	adds	r3, #1
 8005c58:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
 8005c5c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005c60:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8005c64:	f8b7 241c 	ldrh.w	r2, [r7, #1052]	; 0x41c
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d3e0      	bcc.n	8005c30 <UARTPROTOCOLENC_Send+0xe0>
    	}

    }

    for(uint16_t i = 1; i < u16PayloadLen + 4; i++)
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a
 8005c74:	e010      	b.n	8005c98 <UARTPROTOCOLENC_Send+0x148>
    {
    	u8Checksum += (uint8_t)u8TxBuffer[i];
 8005c76:	f8b7 341a 	ldrh.w	r3, [r7, #1050]	; 0x41a
 8005c7a:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8005c7e:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8005c82:	5cd2      	ldrb	r2, [r2, r3]
 8005c84:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8005c88:	4413      	add	r3, r2
 8005c8a:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
    for(uint16_t i = 1; i < u16PayloadLen + 4; i++)
 8005c8e:	f8b7 341a 	ldrh.w	r3, [r7, #1050]	; 0x41a
 8005c92:	3301      	adds	r3, #1
 8005c94:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a
 8005c98:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005c9c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	1cda      	adds	r2, r3, #3
 8005ca4:	f8b7 341a 	ldrh.w	r3, [r7, #1050]	; 0x41a
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	dae4      	bge.n	8005c76 <UARTPROTOCOLENC_Send+0x126>
    }

    u8TxBuffer[u16PayloadLen + 4] = (uint8_t)(~u8Checksum);
 8005cac:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005cb0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 8005cbc:	43d2      	mvns	r2, r2
 8005cbe:	b2d1      	uxtb	r1, r2
 8005cc0:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8005cc4:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8005cc8:	54d1      	strb	r1, [r2, r3]
    u8TxBuffer[u16PayloadLen + 5] = (uint8_t) UARTPROTOCOLCOMMON_STOP_BYTE;
 8005cca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005cce:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	3305      	adds	r3, #5
 8005cd6:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8005cda:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8005cde:	2199      	movs	r1, #153	; 0x99
 8005ce0:	54d1      	strb	r1, [r2, r3]

    psHandle->psConfig->fnWriteCb(psHandle, u8TxBuffer, (uint32_t)(u16PayloadLen + 6));
 8005ce2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005ce6:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8005cf4:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8005cf8:	8812      	ldrh	r2, [r2, #0]
 8005cfa:	3206      	adds	r2, #6
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	f107 0114 	add.w	r1, r7, #20
 8005d02:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8005d06:	f2a2 4014 	subw	r0, r2, #1044	; 0x414
 8005d0a:	4622      	mov	r2, r4
 8005d0c:	6800      	ldr	r0, [r0, #0]
 8005d0e:	4798      	blx	r3
    return true;
 8005d10:	2301      	movs	r3, #1
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	f207 4724 	addw	r7, r7, #1060	; 0x424
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd90      	pop	{r4, r7, pc}

08005d1c <UFEC23ENDEC_A2AReqPingAliveEncode>:
{
    
}

int32_t UFEC23ENDEC_A2AReqPingAliveEncode(uint8_t u8Dst[], uint32_t u32DstLen, const UFEC23ENDEC_A2AReqPingAlive* pSrc)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
    if (u32DstLen < UFEC23ENDEC_A2AREQPINGALIVE_COUNT)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d801      	bhi.n	8005d32 <UFEC23ENDEC_A2AReqPingAliveEncode+0x16>
        return 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	e005      	b.n	8005d3e <UFEC23ENDEC_A2AReqPingAliveEncode+0x22>
    memcpy(u8Dst, &pSrc->u32Ping, sizeof(uint32_t));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	601a      	str	r2, [r3, #0]
    return sizeof(uint32_t);
 8005d3c:	2304      	movs	r3, #4
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bc80      	pop	{r7}
 8005d46:	4770      	bx	lr

08005d48 <UFEC23ENDEC_A2AReqPingAliveDecode>:

bool UFEC23ENDEC_A2AReqPingAliveDecode(UFEC23ENDEC_A2AReqPingAlive* pDst, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
    if (u32DataLen < UFEC23ENDEC_A2AREQPINGALIVE_COUNT)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d801      	bhi.n	8005d5e <UFEC23ENDEC_A2AReqPingAliveDecode+0x16>
        return false;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e004      	b.n	8005d68 <UFEC23ENDEC_A2AReqPingAliveDecode+0x20>
    memcpy(&pDst->u32Ping, u8Datas, sizeof(uint32_t));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	6812      	ldr	r2, [r2, #0]
 8005d64:	601a      	str	r2, [r3, #0]
    return true;
 8005d66:	2301      	movs	r3, #1
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr

08005d72 <UFEC23ENDEC_C2SGetParameterDecode>:
    u8Dst[n++] = (uint8_t)pSrc->eIterateOp;
    return n;
}

bool UFEC23ENDEC_C2SGetParameterDecode(UFEC23ENDEC_C2SGetParameter* pDst, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	607a      	str	r2, [r7, #4]
    if (u32DataLen < UFEC23ENDEC_C2SGETPARAMETER_COUNT)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <UFEC23ENDEC_C2SGetParameterDecode+0x16>
        return false;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e00a      	b.n	8005d9e <UFEC23ENDEC_C2SGetParameterDecode+0x2c>
    pDst->eIterateOp = (UFEC23ENDEC_EITERATEOP)u8Datas[0];
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	781a      	ldrb	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	701a      	strb	r2, [r3, #0]
    if (pDst->eIterateOp >= UFEC23ENDEC_EITERATEOP_Count)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d901      	bls.n	8005d9c <UFEC23ENDEC_C2SGetParameterDecode+0x2a>
        return false;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e000      	b.n	8005d9e <UFEC23ENDEC_C2SGetParameterDecode+0x2c>
    return true;
 8005d9c:	2301      	movs	r3, #1
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bc80      	pop	{r7}
 8005da6:	4770      	bx	lr

08005da8 <UFEC23ENDEC_S2CGetParameterRespEncode>:
    pDst->bIsFanModeAuto = (u8Datas[3] & 0x02) ? 0x01 : 0x00;
    return true;
}

int32_t UFEC23ENDEC_S2CGetParameterRespEncode(uint8_t u8Dst[], uint32_t u32DstLen, const UFEC23ENDEC_S2CReqParameterGetResp* pSrc)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
    if (u32DstLen < UFEC23ENDEC_S2CREQPARAMETERGETRESP_MAX_COUNT)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b4a      	cmp	r3, #74	; 0x4a
 8005db8:	d801      	bhi.n	8005dbe <UFEC23ENDEC_S2CGetParameterRespEncode+0x16>
        return 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e07f      	b.n	8005ebe <UFEC23ENDEC_S2CGetParameterRespEncode+0x116>
 
    const UFEC23ENDEC_SEntry* psEntry = &pSrc->sEntry;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	61fb      	str	r3, [r7, #28]
	int32_t n = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61bb      	str	r3, [r7, #24]
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <UFEC23ENDEC_S2CGetParameterRespEncode+0x2c>
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	e000      	b.n	8005dd6 <UFEC23ENDEC_S2CGetParameterRespEncode+0x2e>
 8005dd4:	2200      	movs	r2, #0
                           (pSrc->bIsEOF ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_EOF : 0x00)) |
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <UFEC23ENDEC_S2CGetParameterRespEncode+0x3c>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e000      	b.n	8005de6 <UFEC23ENDEC_S2CGetParameterRespEncode+0x3e>
 8005de4:	2300      	movs	r3, #0
 8005de6:	4313      	orrs	r3, r2
 8005de8:	b25b      	sxtb	r3, r3
                           (pSrc->bIsFirstRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_ISFIRSTRECORD : 0x00);
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
                           (pSrc->bIsEOF ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_EOF : 0x00)) |
 8005df0:	2a00      	cmp	r2, #0
 8005df2:	d001      	beq.n	8005df8 <UFEC23ENDEC_S2CGetParameterRespEncode+0x50>
 8005df4:	2204      	movs	r2, #4
 8005df6:	e000      	b.n	8005dfa <UFEC23ENDEC_S2CGetParameterRespEncode+0x52>
 8005df8:	2200      	movs	r2, #0
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	b259      	sxtb	r1, r3
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	61ba      	str	r2, [r7, #24]
 8005e04:	461a      	mov	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
                           (pSrc->bIsEOF ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_EOF : 0x00)) |
 8005e0a:	b2ca      	uxtb	r2, r1
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 8005e0c:	701a      	strb	r2, [r3, #0]
	u8Dst[n++] = (uint8_t)psEntry->eParamType;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	61ba      	str	r2, [r7, #24]
 8005e14:	461a      	mov	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	7fd2      	ldrb	r2, [r2, #31]
 8005e1e:	701a      	strb	r2, [r3, #0]
	const uint8_t u8KeyLen = (uint8_t)strnlen(psEntry->szKey, UFEC23ENDEC_PARAMETERITEM_KEY_LEN+1);
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	211f      	movs	r1, #31
 8005e24:	4618      	mov	r0, r3
 8005e26:	f00a f809 	bl	800fe3c <strnlen>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	75fb      	strb	r3, [r7, #23]
	if (u8KeyLen > UFEC23ENDEC_PARAMETERITEM_KEY_LEN)
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
 8005e30:	2b1e      	cmp	r3, #30
 8005e32:	d901      	bls.n	8005e38 <UFEC23ENDEC_S2CGetParameterRespEncode+0x90>
		return 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e042      	b.n	8005ebe <UFEC23ENDEC_S2CGetParameterRespEncode+0x116>
	u8Dst[n++] = (uint8_t)u8KeyLen;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	61ba      	str	r2, [r7, #24]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	7dfa      	ldrb	r2, [r7, #23]
 8005e46:	701a      	strb	r2, [r3, #0]
    memcpy(u8Dst + n, psEntry->szKey, (size_t)u8KeyLen);
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	69f9      	ldr	r1, [r7, #28]
 8005e50:	7dfa      	ldrb	r2, [r7, #23]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f009 f9bc 	bl	800f1d0 <memcpy>
    n += u8KeyLen;
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	61bb      	str	r3, [r7, #24]
    if (psEntry->eParamType == UFEC23ENDEC_EPARAMTYPE_Int32)
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	7fdb      	ldrb	r3, [r3, #31]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d129      	bne.n	8005ebc <UFEC23ENDEC_S2CGetParameterRespEncode+0x114>
    {
        memcpy(&u8Dst[n], &psEntry->uType.sInt32.s32Default, sizeof(int32_t));
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	3220      	adds	r2, #32
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	61bb      	str	r3, [r7, #24]
        memcpy(&u8Dst[n], &psEntry->uType.sInt32.s32Min, sizeof(int32_t));
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	3224      	adds	r2, #36	; 0x24
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	61bb      	str	r3, [r7, #24]
        memcpy(&u8Dst[n], &psEntry->uType.sInt32.s32Max, sizeof(int32_t));
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4413      	add	r3, r2
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	3228      	adds	r2, #40	; 0x28
 8005e9a:	6812      	ldr	r2, [r2, #0]
 8005e9c:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	61bb      	str	r3, [r7, #24]
        memcpy(&u8Dst[n], &pSrc->uValue.s32Value, sizeof(int32_t));
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	322c      	adds	r2, #44	; 0x2c
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	61bb      	str	r3, [r7, #24]
    else
    {
        // Not supported
        return 0;
    }
	return n;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	e000      	b.n	8005ebe <UFEC23ENDEC_S2CGetParameterRespEncode+0x116>
        return 0;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3720      	adds	r7, #32
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UFEC23ENDEC_C2SSetParameterDecode>:
    n += sizeof(UFEC23ENDEC_uValue);
    return n;
}

bool UFEC23ENDEC_C2SSetParameterDecode(UFEC23PROTOCOL_C2SSetParameter* pDst, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b086      	sub	sp, #24
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
    if (u32DataLen < 1)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <UFEC23ENDEC_C2SSetParameterDecode+0x16>
        return false;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e033      	b.n	8005f44 <UFEC23ENDEC_C2SSetParameterDecode+0x7e>
    int n = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
    const uint8_t u8KeyLen = u8Datas[n++];
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	617a      	str	r2, [r7, #20]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4413      	add	r3, r2
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	74fb      	strb	r3, [r7, #19]
    if (u32DataLen < 1 + u8KeyLen)
 8005ef0:	7cfb      	ldrb	r3, [r7, #19]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d201      	bcs.n	8005f00 <UFEC23ENDEC_C2SSetParameterDecode+0x3a>
        return false;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e021      	b.n	8005f44 <UFEC23ENDEC_C2SSetParameterDecode+0x7e>
    memcpy(pDst->szKey, &u8Datas[n], u8KeyLen);
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	4413      	add	r3, r2
 8005f08:	7cfa      	ldrb	r2, [r7, #19]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	f009 f960 	bl	800f1d0 <memcpy>
    pDst->szKey[u8KeyLen] = 0;
 8005f10:	7cfb      	ldrb	r3, [r7, #19]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	2100      	movs	r1, #0
 8005f16:	54d1      	strb	r1, [r2, r3]
    n += u8KeyLen;
 8005f18:	7cfb      	ldrb	r3, [r7, #19]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
    if (u32DataLen < 1 + u8KeyLen + sizeof(UFEC23ENDEC_uValue))
 8005f20:	7cfb      	ldrb	r3, [r7, #19]
 8005f22:	3305      	adds	r3, #5
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d201      	bcs.n	8005f2e <UFEC23ENDEC_C2SSetParameterDecode+0x68>
        return false;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e00a      	b.n	8005f44 <UFEC23ENDEC_C2SSetParameterDecode+0x7e>
    memcpy(&pDst->uValue, &u8Datas[n], sizeof(UFEC23ENDEC_uValue));
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3320      	adds	r3, #32
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	440a      	add	r2, r1
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	601a      	str	r2, [r3, #0]
    n += sizeof(UFEC23ENDEC_uValue);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	617b      	str	r3, [r7, #20]
    return true;
 8005f42:	2301      	movs	r3, #1
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <UFEC23ENDEC_S2CSetParameterRespEncode>:

int32_t UFEC23ENDEC_S2CSetParameterRespEncode(uint8_t u8Dst[], uint32_t u32DstLen, const UFEC23PROTOCOL_S2CSetParameterResp* pSrc)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
    if (u32DstLen < UFEC23ENDEC_S2CSETPARAMETERRESP_COUNT)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <UFEC23ENDEC_S2CSetParameterRespEncode+0x16>
        return 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e00b      	b.n	8005f7a <UFEC23ENDEC_S2CSetParameterRespEncode+0x2e>
    int n = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
    u8Dst[n++] = (uint8_t)pSrc->eResult;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	617a      	str	r2, [r7, #20]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4413      	add	r3, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	7812      	ldrb	r2, [r2, #0]
 8005f76:	701a      	strb	r2, [r3, #0]
    return n;
 8005f78:	697b      	ldr	r3, [r7, #20]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr

08005f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f88:	4b08      	ldr	r3, [pc, #32]	; (8005fac <HAL_Init+0x28>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a07      	ldr	r2, [pc, #28]	; (8005fac <HAL_Init+0x28>)
 8005f8e:	f043 0310 	orr.w	r3, r3, #16
 8005f92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f94:	2003      	movs	r0, #3
 8005f96:	f000 f8d1 	bl	800613c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	f7ff fbee 	bl	800577c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fa0:	f7ff fa40 	bl	8005424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40022000 	.word	0x40022000

08005fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <HAL_IncTick+0x1c>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <HAL_IncTick+0x20>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	4a03      	ldr	r2, [pc, #12]	; (8005fd0 <HAL_IncTick+0x20>)
 8005fc2:	6013      	str	r3, [r2, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr
 8005fcc:	2000005c 	.word	0x2000005c
 8005fd0:	200018f8 	.word	0x200018f8

08005fd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8005fd8:	4b02      	ldr	r3, [pc, #8]	; (8005fe4 <HAL_GetTick+0x10>)
 8005fda:	681b      	ldr	r3, [r3, #0]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr
 8005fe4:	200018f8 	.word	0x200018f8

08005fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ff8:	4b0c      	ldr	r3, [pc, #48]	; (800602c <__NVIC_SetPriorityGrouping+0x44>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006004:	4013      	ands	r3, r2
 8006006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800601a:	4a04      	ldr	r2, [pc, #16]	; (800602c <__NVIC_SetPriorityGrouping+0x44>)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	60d3      	str	r3, [r2, #12]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	e000ed00 	.word	0xe000ed00

08006030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006034:	4b04      	ldr	r3, [pc, #16]	; (8006048 <__NVIC_GetPriorityGrouping+0x18>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	0a1b      	lsrs	r3, r3, #8
 800603a:	f003 0307 	and.w	r3, r3, #7
}
 800603e:	4618      	mov	r0, r3
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	e000ed00 	.word	0xe000ed00

0800604c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605a:	2b00      	cmp	r3, #0
 800605c:	db0b      	blt.n	8006076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	f003 021f 	and.w	r2, r3, #31
 8006064:	4906      	ldr	r1, [pc, #24]	; (8006080 <__NVIC_EnableIRQ+0x34>)
 8006066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	2001      	movs	r0, #1
 800606e:	fa00 f202 	lsl.w	r2, r0, r2
 8006072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	bc80      	pop	{r7}
 800607e:	4770      	bx	lr
 8006080:	e000e100 	.word	0xe000e100

08006084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	6039      	str	r1, [r7, #0]
 800608e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006094:	2b00      	cmp	r3, #0
 8006096:	db0a      	blt.n	80060ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	b2da      	uxtb	r2, r3
 800609c:	490c      	ldr	r1, [pc, #48]	; (80060d0 <__NVIC_SetPriority+0x4c>)
 800609e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a2:	0112      	lsls	r2, r2, #4
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	440b      	add	r3, r1
 80060a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060ac:	e00a      	b.n	80060c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	4908      	ldr	r1, [pc, #32]	; (80060d4 <__NVIC_SetPriority+0x50>)
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	3b04      	subs	r3, #4
 80060bc:	0112      	lsls	r2, r2, #4
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	440b      	add	r3, r1
 80060c2:	761a      	strb	r2, [r3, #24]
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	e000e100 	.word	0xe000e100
 80060d4:	e000ed00 	.word	0xe000ed00

080060d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060d8:	b480      	push	{r7}
 80060da:	b089      	sub	sp, #36	; 0x24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f1c3 0307 	rsb	r3, r3, #7
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	bf28      	it	cs
 80060f6:	2304      	movcs	r3, #4
 80060f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	3304      	adds	r3, #4
 80060fe:	2b06      	cmp	r3, #6
 8006100:	d902      	bls.n	8006108 <NVIC_EncodePriority+0x30>
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	3b03      	subs	r3, #3
 8006106:	e000      	b.n	800610a <NVIC_EncodePriority+0x32>
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800610c:	f04f 32ff 	mov.w	r2, #4294967295
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	fa02 f303 	lsl.w	r3, r2, r3
 8006116:	43da      	mvns	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	401a      	ands	r2, r3
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006120:	f04f 31ff 	mov.w	r1, #4294967295
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	fa01 f303 	lsl.w	r3, r1, r3
 800612a:	43d9      	mvns	r1, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006130:	4313      	orrs	r3, r2
         );
}
 8006132:	4618      	mov	r0, r3
 8006134:	3724      	adds	r7, #36	; 0x24
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr

0800613c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff ff4f 	bl	8005fe8 <__NVIC_SetPriorityGrouping>
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006152:	b580      	push	{r7, lr}
 8006154:	b086      	sub	sp, #24
 8006156:	af00      	add	r7, sp, #0
 8006158:	4603      	mov	r3, r0
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006164:	f7ff ff64 	bl	8006030 <__NVIC_GetPriorityGrouping>
 8006168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	6978      	ldr	r0, [r7, #20]
 8006170:	f7ff ffb2 	bl	80060d8 <NVIC_EncodePriority>
 8006174:	4602      	mov	r2, r0
 8006176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800617a:	4611      	mov	r1, r2
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff ff81 	bl	8006084 <__NVIC_SetPriority>
}
 8006182:	bf00      	nop
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	4603      	mov	r3, r0
 8006192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff ff57 	bl	800604c <__NVIC_EnableIRQ>
}
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e059      	b.n	8006272 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	4b2d      	ldr	r3, [pc, #180]	; (800627c <HAL_DMA_Init+0xd4>)
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d80f      	bhi.n	80061ea <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	4b2b      	ldr	r3, [pc, #172]	; (8006280 <HAL_DMA_Init+0xd8>)
 80061d2:	4413      	add	r3, r2
 80061d4:	4a2b      	ldr	r2, [pc, #172]	; (8006284 <HAL_DMA_Init+0xdc>)
 80061d6:	fba2 2303 	umull	r2, r3, r2, r3
 80061da:	091b      	lsrs	r3, r3, #4
 80061dc:	009a      	lsls	r2, r3, #2
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a28      	ldr	r2, [pc, #160]	; (8006288 <HAL_DMA_Init+0xe0>)
 80061e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80061e8:	e00e      	b.n	8006208 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	4b26      	ldr	r3, [pc, #152]	; (800628c <HAL_DMA_Init+0xe4>)
 80061f2:	4413      	add	r3, r2
 80061f4:	4a23      	ldr	r2, [pc, #140]	; (8006284 <HAL_DMA_Init+0xdc>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	091b      	lsrs	r3, r3, #4
 80061fc:	009a      	lsls	r2, r3, #2
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a22      	ldr	r2, [pc, #136]	; (8006290 <HAL_DMA_Init+0xe8>)
 8006206:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800621e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006222:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800622c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006238:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006244:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr
 800627c:	40020407 	.word	0x40020407
 8006280:	bffdfff8 	.word	0xbffdfff8
 8006284:	cccccccd 	.word	0xcccccccd
 8006288:	40020000 	.word	0x40020000
 800628c:	bffdfbf8 	.word	0xbffdfbf8
 8006290:	40020400 	.word	0x40020400

08006294 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_DMA_Start_IT+0x20>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e04a      	b.n	800634a <HAL_DMA_Start_IT+0xb6>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d13a      	bne.n	800633c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2202      	movs	r2, #2
 80062ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0201 	bic.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 fbbc 	bl	8006a68 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d008      	beq.n	800630a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 020e 	orr.w	r2, r2, #14
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e00f      	b.n	800632a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0204 	bic.w	r2, r2, #4
 8006318:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f042 020a 	orr.w	r2, r2, #10
 8006328:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0201 	orr.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e005      	b.n	8006348 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006344:	2302      	movs	r3, #2
 8006346:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006348:	7dfb      	ldrb	r3, [r7, #23]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006352:	b480      	push	{r7}
 8006354:	b085      	sub	sp, #20
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006364:	2b02      	cmp	r3, #2
 8006366:	d008      	beq.n	800637a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2204      	movs	r2, #4
 800636c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e020      	b.n	80063bc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 020e 	bic.w	r2, r2, #14
 8006388:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	2101      	movs	r1, #1
 80063a4:	fa01 f202 	lsl.w	r2, r1, r2
 80063a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr
	...

080063c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d005      	beq.n	80063ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2204      	movs	r2, #4
 80063e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
 80063e8:	e0d6      	b.n	8006598 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 020e 	bic.w	r2, r2, #14
 80063f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0201 	bic.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	4b64      	ldr	r3, [pc, #400]	; (80065a4 <HAL_DMA_Abort_IT+0x1dc>)
 8006412:	429a      	cmp	r2, r3
 8006414:	d958      	bls.n	80064c8 <HAL_DMA_Abort_IT+0x100>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a63      	ldr	r2, [pc, #396]	; (80065a8 <HAL_DMA_Abort_IT+0x1e0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d04f      	beq.n	80064c0 <HAL_DMA_Abort_IT+0xf8>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a61      	ldr	r2, [pc, #388]	; (80065ac <HAL_DMA_Abort_IT+0x1e4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d048      	beq.n	80064bc <HAL_DMA_Abort_IT+0xf4>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a60      	ldr	r2, [pc, #384]	; (80065b0 <HAL_DMA_Abort_IT+0x1e8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d040      	beq.n	80064b6 <HAL_DMA_Abort_IT+0xee>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a5e      	ldr	r2, [pc, #376]	; (80065b4 <HAL_DMA_Abort_IT+0x1ec>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d038      	beq.n	80064b0 <HAL_DMA_Abort_IT+0xe8>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a5d      	ldr	r2, [pc, #372]	; (80065b8 <HAL_DMA_Abort_IT+0x1f0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d030      	beq.n	80064aa <HAL_DMA_Abort_IT+0xe2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a5b      	ldr	r2, [pc, #364]	; (80065bc <HAL_DMA_Abort_IT+0x1f4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d028      	beq.n	80064a4 <HAL_DMA_Abort_IT+0xdc>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a53      	ldr	r2, [pc, #332]	; (80065a4 <HAL_DMA_Abort_IT+0x1dc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d020      	beq.n	800649e <HAL_DMA_Abort_IT+0xd6>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a57      	ldr	r2, [pc, #348]	; (80065c0 <HAL_DMA_Abort_IT+0x1f8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d019      	beq.n	800649a <HAL_DMA_Abort_IT+0xd2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a56      	ldr	r2, [pc, #344]	; (80065c4 <HAL_DMA_Abort_IT+0x1fc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d012      	beq.n	8006496 <HAL_DMA_Abort_IT+0xce>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a54      	ldr	r2, [pc, #336]	; (80065c8 <HAL_DMA_Abort_IT+0x200>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00a      	beq.n	8006490 <HAL_DMA_Abort_IT+0xc8>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a53      	ldr	r2, [pc, #332]	; (80065cc <HAL_DMA_Abort_IT+0x204>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d102      	bne.n	800648a <HAL_DMA_Abort_IT+0xc2>
 8006484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006488:	e01b      	b.n	80064c2 <HAL_DMA_Abort_IT+0xfa>
 800648a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800648e:	e018      	b.n	80064c2 <HAL_DMA_Abort_IT+0xfa>
 8006490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006494:	e015      	b.n	80064c2 <HAL_DMA_Abort_IT+0xfa>
 8006496:	2310      	movs	r3, #16
 8006498:	e013      	b.n	80064c2 <HAL_DMA_Abort_IT+0xfa>
 800649a:	2301      	movs	r3, #1
 800649c:	e011      	b.n	80064c2 <HAL_DMA_Abort_IT+0xfa>
 800649e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064a2:	e00e      	b.n	80064c2 <HAL_DMA_Abort_IT+0xfa>
 80064a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80064a8:	e00b      	b.n	80064c2 <HAL_DMA_Abort_IT+0xfa>
 80064aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80064ae:	e008      	b.n	80064c2 <HAL_DMA_Abort_IT+0xfa>
 80064b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064b4:	e005      	b.n	80064c2 <HAL_DMA_Abort_IT+0xfa>
 80064b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064ba:	e002      	b.n	80064c2 <HAL_DMA_Abort_IT+0xfa>
 80064bc:	2310      	movs	r3, #16
 80064be:	e000      	b.n	80064c2 <HAL_DMA_Abort_IT+0xfa>
 80064c0:	2301      	movs	r3, #1
 80064c2:	4a43      	ldr	r2, [pc, #268]	; (80065d0 <HAL_DMA_Abort_IT+0x208>)
 80064c4:	6053      	str	r3, [r2, #4]
 80064c6:	e057      	b.n	8006578 <HAL_DMA_Abort_IT+0x1b0>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a36      	ldr	r2, [pc, #216]	; (80065a8 <HAL_DMA_Abort_IT+0x1e0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d04f      	beq.n	8006572 <HAL_DMA_Abort_IT+0x1aa>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a35      	ldr	r2, [pc, #212]	; (80065ac <HAL_DMA_Abort_IT+0x1e4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d048      	beq.n	800656e <HAL_DMA_Abort_IT+0x1a6>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a33      	ldr	r2, [pc, #204]	; (80065b0 <HAL_DMA_Abort_IT+0x1e8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d040      	beq.n	8006568 <HAL_DMA_Abort_IT+0x1a0>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a32      	ldr	r2, [pc, #200]	; (80065b4 <HAL_DMA_Abort_IT+0x1ec>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d038      	beq.n	8006562 <HAL_DMA_Abort_IT+0x19a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a30      	ldr	r2, [pc, #192]	; (80065b8 <HAL_DMA_Abort_IT+0x1f0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d030      	beq.n	800655c <HAL_DMA_Abort_IT+0x194>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a2f      	ldr	r2, [pc, #188]	; (80065bc <HAL_DMA_Abort_IT+0x1f4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d028      	beq.n	8006556 <HAL_DMA_Abort_IT+0x18e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a26      	ldr	r2, [pc, #152]	; (80065a4 <HAL_DMA_Abort_IT+0x1dc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d020      	beq.n	8006550 <HAL_DMA_Abort_IT+0x188>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a2b      	ldr	r2, [pc, #172]	; (80065c0 <HAL_DMA_Abort_IT+0x1f8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d019      	beq.n	800654c <HAL_DMA_Abort_IT+0x184>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a29      	ldr	r2, [pc, #164]	; (80065c4 <HAL_DMA_Abort_IT+0x1fc>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d012      	beq.n	8006548 <HAL_DMA_Abort_IT+0x180>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a28      	ldr	r2, [pc, #160]	; (80065c8 <HAL_DMA_Abort_IT+0x200>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00a      	beq.n	8006542 <HAL_DMA_Abort_IT+0x17a>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a26      	ldr	r2, [pc, #152]	; (80065cc <HAL_DMA_Abort_IT+0x204>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d102      	bne.n	800653c <HAL_DMA_Abort_IT+0x174>
 8006536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800653a:	e01b      	b.n	8006574 <HAL_DMA_Abort_IT+0x1ac>
 800653c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006540:	e018      	b.n	8006574 <HAL_DMA_Abort_IT+0x1ac>
 8006542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006546:	e015      	b.n	8006574 <HAL_DMA_Abort_IT+0x1ac>
 8006548:	2310      	movs	r3, #16
 800654a:	e013      	b.n	8006574 <HAL_DMA_Abort_IT+0x1ac>
 800654c:	2301      	movs	r3, #1
 800654e:	e011      	b.n	8006574 <HAL_DMA_Abort_IT+0x1ac>
 8006550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006554:	e00e      	b.n	8006574 <HAL_DMA_Abort_IT+0x1ac>
 8006556:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800655a:	e00b      	b.n	8006574 <HAL_DMA_Abort_IT+0x1ac>
 800655c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006560:	e008      	b.n	8006574 <HAL_DMA_Abort_IT+0x1ac>
 8006562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006566:	e005      	b.n	8006574 <HAL_DMA_Abort_IT+0x1ac>
 8006568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800656c:	e002      	b.n	8006574 <HAL_DMA_Abort_IT+0x1ac>
 800656e:	2310      	movs	r3, #16
 8006570:	e000      	b.n	8006574 <HAL_DMA_Abort_IT+0x1ac>
 8006572:	2301      	movs	r3, #1
 8006574:	4a17      	ldr	r2, [pc, #92]	; (80065d4 <HAL_DMA_Abort_IT+0x20c>)
 8006576:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	4798      	blx	r3
    } 
  }
  return status;
 8006598:	7bfb      	ldrb	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40020080 	.word	0x40020080
 80065a8:	40020008 	.word	0x40020008
 80065ac:	4002001c 	.word	0x4002001c
 80065b0:	40020030 	.word	0x40020030
 80065b4:	40020044 	.word	0x40020044
 80065b8:	40020058 	.word	0x40020058
 80065bc:	4002006c 	.word	0x4002006c
 80065c0:	40020408 	.word	0x40020408
 80065c4:	4002041c 	.word	0x4002041c
 80065c8:	40020430 	.word	0x40020430
 80065cc:	40020444 	.word	0x40020444
 80065d0:	40020400 	.word	0x40020400
 80065d4:	40020000 	.word	0x40020000

080065d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f4:	2204      	movs	r2, #4
 80065f6:	409a      	lsls	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 80f1 	beq.w	80067e4 <HAL_DMA_IRQHandler+0x20c>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 80eb 	beq.w	80067e4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b00      	cmp	r3, #0
 800661a:	d107      	bne.n	800662c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 0204 	bic.w	r2, r2, #4
 800662a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	4b5f      	ldr	r3, [pc, #380]	; (80067b0 <HAL_DMA_IRQHandler+0x1d8>)
 8006634:	429a      	cmp	r2, r3
 8006636:	d958      	bls.n	80066ea <HAL_DMA_IRQHandler+0x112>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a5d      	ldr	r2, [pc, #372]	; (80067b4 <HAL_DMA_IRQHandler+0x1dc>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d04f      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x10a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a5c      	ldr	r2, [pc, #368]	; (80067b8 <HAL_DMA_IRQHandler+0x1e0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d048      	beq.n	80066de <HAL_DMA_IRQHandler+0x106>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a5a      	ldr	r2, [pc, #360]	; (80067bc <HAL_DMA_IRQHandler+0x1e4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d040      	beq.n	80066d8 <HAL_DMA_IRQHandler+0x100>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a59      	ldr	r2, [pc, #356]	; (80067c0 <HAL_DMA_IRQHandler+0x1e8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d038      	beq.n	80066d2 <HAL_DMA_IRQHandler+0xfa>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a57      	ldr	r2, [pc, #348]	; (80067c4 <HAL_DMA_IRQHandler+0x1ec>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d030      	beq.n	80066cc <HAL_DMA_IRQHandler+0xf4>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a56      	ldr	r2, [pc, #344]	; (80067c8 <HAL_DMA_IRQHandler+0x1f0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d028      	beq.n	80066c6 <HAL_DMA_IRQHandler+0xee>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a4d      	ldr	r2, [pc, #308]	; (80067b0 <HAL_DMA_IRQHandler+0x1d8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d020      	beq.n	80066c0 <HAL_DMA_IRQHandler+0xe8>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a52      	ldr	r2, [pc, #328]	; (80067cc <HAL_DMA_IRQHandler+0x1f4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d019      	beq.n	80066bc <HAL_DMA_IRQHandler+0xe4>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a50      	ldr	r2, [pc, #320]	; (80067d0 <HAL_DMA_IRQHandler+0x1f8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d012      	beq.n	80066b8 <HAL_DMA_IRQHandler+0xe0>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a4f      	ldr	r2, [pc, #316]	; (80067d4 <HAL_DMA_IRQHandler+0x1fc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00a      	beq.n	80066b2 <HAL_DMA_IRQHandler+0xda>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a4d      	ldr	r2, [pc, #308]	; (80067d8 <HAL_DMA_IRQHandler+0x200>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d102      	bne.n	80066ac <HAL_DMA_IRQHandler+0xd4>
 80066a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066aa:	e01b      	b.n	80066e4 <HAL_DMA_IRQHandler+0x10c>
 80066ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066b0:	e018      	b.n	80066e4 <HAL_DMA_IRQHandler+0x10c>
 80066b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066b6:	e015      	b.n	80066e4 <HAL_DMA_IRQHandler+0x10c>
 80066b8:	2340      	movs	r3, #64	; 0x40
 80066ba:	e013      	b.n	80066e4 <HAL_DMA_IRQHandler+0x10c>
 80066bc:	2304      	movs	r3, #4
 80066be:	e011      	b.n	80066e4 <HAL_DMA_IRQHandler+0x10c>
 80066c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80066c4:	e00e      	b.n	80066e4 <HAL_DMA_IRQHandler+0x10c>
 80066c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80066ca:	e00b      	b.n	80066e4 <HAL_DMA_IRQHandler+0x10c>
 80066cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066d0:	e008      	b.n	80066e4 <HAL_DMA_IRQHandler+0x10c>
 80066d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066d6:	e005      	b.n	80066e4 <HAL_DMA_IRQHandler+0x10c>
 80066d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066dc:	e002      	b.n	80066e4 <HAL_DMA_IRQHandler+0x10c>
 80066de:	2340      	movs	r3, #64	; 0x40
 80066e0:	e000      	b.n	80066e4 <HAL_DMA_IRQHandler+0x10c>
 80066e2:	2304      	movs	r3, #4
 80066e4:	4a3d      	ldr	r2, [pc, #244]	; (80067dc <HAL_DMA_IRQHandler+0x204>)
 80066e6:	6053      	str	r3, [r2, #4]
 80066e8:	e057      	b.n	800679a <HAL_DMA_IRQHandler+0x1c2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a31      	ldr	r2, [pc, #196]	; (80067b4 <HAL_DMA_IRQHandler+0x1dc>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d04f      	beq.n	8006794 <HAL_DMA_IRQHandler+0x1bc>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a2f      	ldr	r2, [pc, #188]	; (80067b8 <HAL_DMA_IRQHandler+0x1e0>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d048      	beq.n	8006790 <HAL_DMA_IRQHandler+0x1b8>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a2e      	ldr	r2, [pc, #184]	; (80067bc <HAL_DMA_IRQHandler+0x1e4>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d040      	beq.n	800678a <HAL_DMA_IRQHandler+0x1b2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a2c      	ldr	r2, [pc, #176]	; (80067c0 <HAL_DMA_IRQHandler+0x1e8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d038      	beq.n	8006784 <HAL_DMA_IRQHandler+0x1ac>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a2b      	ldr	r2, [pc, #172]	; (80067c4 <HAL_DMA_IRQHandler+0x1ec>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d030      	beq.n	800677e <HAL_DMA_IRQHandler+0x1a6>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <HAL_DMA_IRQHandler+0x1f0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d028      	beq.n	8006778 <HAL_DMA_IRQHandler+0x1a0>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a21      	ldr	r2, [pc, #132]	; (80067b0 <HAL_DMA_IRQHandler+0x1d8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d020      	beq.n	8006772 <HAL_DMA_IRQHandler+0x19a>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a25      	ldr	r2, [pc, #148]	; (80067cc <HAL_DMA_IRQHandler+0x1f4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d019      	beq.n	800676e <HAL_DMA_IRQHandler+0x196>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a24      	ldr	r2, [pc, #144]	; (80067d0 <HAL_DMA_IRQHandler+0x1f8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d012      	beq.n	800676a <HAL_DMA_IRQHandler+0x192>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a22      	ldr	r2, [pc, #136]	; (80067d4 <HAL_DMA_IRQHandler+0x1fc>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d00a      	beq.n	8006764 <HAL_DMA_IRQHandler+0x18c>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a21      	ldr	r2, [pc, #132]	; (80067d8 <HAL_DMA_IRQHandler+0x200>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d102      	bne.n	800675e <HAL_DMA_IRQHandler+0x186>
 8006758:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800675c:	e01b      	b.n	8006796 <HAL_DMA_IRQHandler+0x1be>
 800675e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006762:	e018      	b.n	8006796 <HAL_DMA_IRQHandler+0x1be>
 8006764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006768:	e015      	b.n	8006796 <HAL_DMA_IRQHandler+0x1be>
 800676a:	2340      	movs	r3, #64	; 0x40
 800676c:	e013      	b.n	8006796 <HAL_DMA_IRQHandler+0x1be>
 800676e:	2304      	movs	r3, #4
 8006770:	e011      	b.n	8006796 <HAL_DMA_IRQHandler+0x1be>
 8006772:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006776:	e00e      	b.n	8006796 <HAL_DMA_IRQHandler+0x1be>
 8006778:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800677c:	e00b      	b.n	8006796 <HAL_DMA_IRQHandler+0x1be>
 800677e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006782:	e008      	b.n	8006796 <HAL_DMA_IRQHandler+0x1be>
 8006784:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006788:	e005      	b.n	8006796 <HAL_DMA_IRQHandler+0x1be>
 800678a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800678e:	e002      	b.n	8006796 <HAL_DMA_IRQHandler+0x1be>
 8006790:	2340      	movs	r3, #64	; 0x40
 8006792:	e000      	b.n	8006796 <HAL_DMA_IRQHandler+0x1be>
 8006794:	2304      	movs	r3, #4
 8006796:	4a12      	ldr	r2, [pc, #72]	; (80067e0 <HAL_DMA_IRQHandler+0x208>)
 8006798:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 8136 	beq.w	8006a10 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80067ac:	e130      	b.n	8006a10 <HAL_DMA_IRQHandler+0x438>
 80067ae:	bf00      	nop
 80067b0:	40020080 	.word	0x40020080
 80067b4:	40020008 	.word	0x40020008
 80067b8:	4002001c 	.word	0x4002001c
 80067bc:	40020030 	.word	0x40020030
 80067c0:	40020044 	.word	0x40020044
 80067c4:	40020058 	.word	0x40020058
 80067c8:	4002006c 	.word	0x4002006c
 80067cc:	40020408 	.word	0x40020408
 80067d0:	4002041c 	.word	0x4002041c
 80067d4:	40020430 	.word	0x40020430
 80067d8:	40020444 	.word	0x40020444
 80067dc:	40020400 	.word	0x40020400
 80067e0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	2202      	movs	r2, #2
 80067ea:	409a      	lsls	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 80dd 	beq.w	80069b0 <HAL_DMA_IRQHandler+0x3d8>
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 80d7 	beq.w	80069b0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10b      	bne.n	8006828 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 020a 	bic.w	r2, r2, #10
 800681e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	4b7b      	ldr	r3, [pc, #492]	; (8006a1c <HAL_DMA_IRQHandler+0x444>)
 8006830:	429a      	cmp	r2, r3
 8006832:	d958      	bls.n	80068e6 <HAL_DMA_IRQHandler+0x30e>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a79      	ldr	r2, [pc, #484]	; (8006a20 <HAL_DMA_IRQHandler+0x448>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d04f      	beq.n	80068de <HAL_DMA_IRQHandler+0x306>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a78      	ldr	r2, [pc, #480]	; (8006a24 <HAL_DMA_IRQHandler+0x44c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d048      	beq.n	80068da <HAL_DMA_IRQHandler+0x302>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a76      	ldr	r2, [pc, #472]	; (8006a28 <HAL_DMA_IRQHandler+0x450>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d040      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x2fc>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a75      	ldr	r2, [pc, #468]	; (8006a2c <HAL_DMA_IRQHandler+0x454>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d038      	beq.n	80068ce <HAL_DMA_IRQHandler+0x2f6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a73      	ldr	r2, [pc, #460]	; (8006a30 <HAL_DMA_IRQHandler+0x458>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d030      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x2f0>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a72      	ldr	r2, [pc, #456]	; (8006a34 <HAL_DMA_IRQHandler+0x45c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d028      	beq.n	80068c2 <HAL_DMA_IRQHandler+0x2ea>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a69      	ldr	r2, [pc, #420]	; (8006a1c <HAL_DMA_IRQHandler+0x444>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d020      	beq.n	80068bc <HAL_DMA_IRQHandler+0x2e4>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a6e      	ldr	r2, [pc, #440]	; (8006a38 <HAL_DMA_IRQHandler+0x460>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d019      	beq.n	80068b8 <HAL_DMA_IRQHandler+0x2e0>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a6c      	ldr	r2, [pc, #432]	; (8006a3c <HAL_DMA_IRQHandler+0x464>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d012      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x2dc>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a6b      	ldr	r2, [pc, #428]	; (8006a40 <HAL_DMA_IRQHandler+0x468>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00a      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2d6>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a69      	ldr	r2, [pc, #420]	; (8006a44 <HAL_DMA_IRQHandler+0x46c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d102      	bne.n	80068a8 <HAL_DMA_IRQHandler+0x2d0>
 80068a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068a6:	e01b      	b.n	80068e0 <HAL_DMA_IRQHandler+0x308>
 80068a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068ac:	e018      	b.n	80068e0 <HAL_DMA_IRQHandler+0x308>
 80068ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068b2:	e015      	b.n	80068e0 <HAL_DMA_IRQHandler+0x308>
 80068b4:	2320      	movs	r3, #32
 80068b6:	e013      	b.n	80068e0 <HAL_DMA_IRQHandler+0x308>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e011      	b.n	80068e0 <HAL_DMA_IRQHandler+0x308>
 80068bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068c0:	e00e      	b.n	80068e0 <HAL_DMA_IRQHandler+0x308>
 80068c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80068c6:	e00b      	b.n	80068e0 <HAL_DMA_IRQHandler+0x308>
 80068c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068cc:	e008      	b.n	80068e0 <HAL_DMA_IRQHandler+0x308>
 80068ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068d2:	e005      	b.n	80068e0 <HAL_DMA_IRQHandler+0x308>
 80068d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068d8:	e002      	b.n	80068e0 <HAL_DMA_IRQHandler+0x308>
 80068da:	2320      	movs	r3, #32
 80068dc:	e000      	b.n	80068e0 <HAL_DMA_IRQHandler+0x308>
 80068de:	2302      	movs	r3, #2
 80068e0:	4a59      	ldr	r2, [pc, #356]	; (8006a48 <HAL_DMA_IRQHandler+0x470>)
 80068e2:	6053      	str	r3, [r2, #4]
 80068e4:	e057      	b.n	8006996 <HAL_DMA_IRQHandler+0x3be>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a4d      	ldr	r2, [pc, #308]	; (8006a20 <HAL_DMA_IRQHandler+0x448>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d04f      	beq.n	8006990 <HAL_DMA_IRQHandler+0x3b8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a4b      	ldr	r2, [pc, #300]	; (8006a24 <HAL_DMA_IRQHandler+0x44c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d048      	beq.n	800698c <HAL_DMA_IRQHandler+0x3b4>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a4a      	ldr	r2, [pc, #296]	; (8006a28 <HAL_DMA_IRQHandler+0x450>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d040      	beq.n	8006986 <HAL_DMA_IRQHandler+0x3ae>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a48      	ldr	r2, [pc, #288]	; (8006a2c <HAL_DMA_IRQHandler+0x454>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d038      	beq.n	8006980 <HAL_DMA_IRQHandler+0x3a8>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a47      	ldr	r2, [pc, #284]	; (8006a30 <HAL_DMA_IRQHandler+0x458>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d030      	beq.n	800697a <HAL_DMA_IRQHandler+0x3a2>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a45      	ldr	r2, [pc, #276]	; (8006a34 <HAL_DMA_IRQHandler+0x45c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d028      	beq.n	8006974 <HAL_DMA_IRQHandler+0x39c>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a3d      	ldr	r2, [pc, #244]	; (8006a1c <HAL_DMA_IRQHandler+0x444>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d020      	beq.n	800696e <HAL_DMA_IRQHandler+0x396>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a41      	ldr	r2, [pc, #260]	; (8006a38 <HAL_DMA_IRQHandler+0x460>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d019      	beq.n	800696a <HAL_DMA_IRQHandler+0x392>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a40      	ldr	r2, [pc, #256]	; (8006a3c <HAL_DMA_IRQHandler+0x464>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d012      	beq.n	8006966 <HAL_DMA_IRQHandler+0x38e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a3e      	ldr	r2, [pc, #248]	; (8006a40 <HAL_DMA_IRQHandler+0x468>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00a      	beq.n	8006960 <HAL_DMA_IRQHandler+0x388>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a3d      	ldr	r2, [pc, #244]	; (8006a44 <HAL_DMA_IRQHandler+0x46c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d102      	bne.n	800695a <HAL_DMA_IRQHandler+0x382>
 8006954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006958:	e01b      	b.n	8006992 <HAL_DMA_IRQHandler+0x3ba>
 800695a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800695e:	e018      	b.n	8006992 <HAL_DMA_IRQHandler+0x3ba>
 8006960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006964:	e015      	b.n	8006992 <HAL_DMA_IRQHandler+0x3ba>
 8006966:	2320      	movs	r3, #32
 8006968:	e013      	b.n	8006992 <HAL_DMA_IRQHandler+0x3ba>
 800696a:	2302      	movs	r3, #2
 800696c:	e011      	b.n	8006992 <HAL_DMA_IRQHandler+0x3ba>
 800696e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006972:	e00e      	b.n	8006992 <HAL_DMA_IRQHandler+0x3ba>
 8006974:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006978:	e00b      	b.n	8006992 <HAL_DMA_IRQHandler+0x3ba>
 800697a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800697e:	e008      	b.n	8006992 <HAL_DMA_IRQHandler+0x3ba>
 8006980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006984:	e005      	b.n	8006992 <HAL_DMA_IRQHandler+0x3ba>
 8006986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800698a:	e002      	b.n	8006992 <HAL_DMA_IRQHandler+0x3ba>
 800698c:	2320      	movs	r3, #32
 800698e:	e000      	b.n	8006992 <HAL_DMA_IRQHandler+0x3ba>
 8006990:	2302      	movs	r3, #2
 8006992:	4a2e      	ldr	r2, [pc, #184]	; (8006a4c <HAL_DMA_IRQHandler+0x474>)
 8006994:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d034      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80069ae:	e02f      	b.n	8006a10 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b4:	2208      	movs	r2, #8
 80069b6:	409a      	lsls	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d028      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x43a>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d023      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 020e 	bic.w	r2, r2, #14
 80069d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e2:	2101      	movs	r1, #1
 80069e4:	fa01 f202 	lsl.w	r2, r1, r2
 80069e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	4798      	blx	r3
    }
  }
  return;
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop
}
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40020080 	.word	0x40020080
 8006a20:	40020008 	.word	0x40020008
 8006a24:	4002001c 	.word	0x4002001c
 8006a28:	40020030 	.word	0x40020030
 8006a2c:	40020044 	.word	0x40020044
 8006a30:	40020058 	.word	0x40020058
 8006a34:	4002006c 	.word	0x4002006c
 8006a38:	40020408 	.word	0x40020408
 8006a3c:	4002041c 	.word	0x4002041c
 8006a40:	40020430 	.word	0x40020430
 8006a44:	40020444 	.word	0x40020444
 8006a48:	40020400 	.word	0x40020400
 8006a4c:	40020000 	.word	0x40020000

08006a50 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7e:	2101      	movs	r1, #1
 8006a80:	fa01 f202 	lsl.w	r2, r1, r2
 8006a84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b10      	cmp	r3, #16
 8006a94:	d108      	bne.n	8006aa8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006aa6:	e007      	b.n	8006ab8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	60da      	str	r2, [r3, #12]
}
 8006ab8:	bf00      	nop
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bc80      	pop	{r7}
 8006ac0:	4770      	bx	lr
	...

08006ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b08b      	sub	sp, #44	; 0x2c
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ad6:	e169      	b.n	8006dac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006ad8:	2201      	movs	r2, #1
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	f040 8158 	bne.w	8006da6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	4a9a      	ldr	r2, [pc, #616]	; (8006d64 <HAL_GPIO_Init+0x2a0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d05e      	beq.n	8006bbe <HAL_GPIO_Init+0xfa>
 8006b00:	4a98      	ldr	r2, [pc, #608]	; (8006d64 <HAL_GPIO_Init+0x2a0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d875      	bhi.n	8006bf2 <HAL_GPIO_Init+0x12e>
 8006b06:	4a98      	ldr	r2, [pc, #608]	; (8006d68 <HAL_GPIO_Init+0x2a4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d058      	beq.n	8006bbe <HAL_GPIO_Init+0xfa>
 8006b0c:	4a96      	ldr	r2, [pc, #600]	; (8006d68 <HAL_GPIO_Init+0x2a4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d86f      	bhi.n	8006bf2 <HAL_GPIO_Init+0x12e>
 8006b12:	4a96      	ldr	r2, [pc, #600]	; (8006d6c <HAL_GPIO_Init+0x2a8>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d052      	beq.n	8006bbe <HAL_GPIO_Init+0xfa>
 8006b18:	4a94      	ldr	r2, [pc, #592]	; (8006d6c <HAL_GPIO_Init+0x2a8>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d869      	bhi.n	8006bf2 <HAL_GPIO_Init+0x12e>
 8006b1e:	4a94      	ldr	r2, [pc, #592]	; (8006d70 <HAL_GPIO_Init+0x2ac>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d04c      	beq.n	8006bbe <HAL_GPIO_Init+0xfa>
 8006b24:	4a92      	ldr	r2, [pc, #584]	; (8006d70 <HAL_GPIO_Init+0x2ac>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d863      	bhi.n	8006bf2 <HAL_GPIO_Init+0x12e>
 8006b2a:	4a92      	ldr	r2, [pc, #584]	; (8006d74 <HAL_GPIO_Init+0x2b0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d046      	beq.n	8006bbe <HAL_GPIO_Init+0xfa>
 8006b30:	4a90      	ldr	r2, [pc, #576]	; (8006d74 <HAL_GPIO_Init+0x2b0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d85d      	bhi.n	8006bf2 <HAL_GPIO_Init+0x12e>
 8006b36:	2b12      	cmp	r3, #18
 8006b38:	d82a      	bhi.n	8006b90 <HAL_GPIO_Init+0xcc>
 8006b3a:	2b12      	cmp	r3, #18
 8006b3c:	d859      	bhi.n	8006bf2 <HAL_GPIO_Init+0x12e>
 8006b3e:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <HAL_GPIO_Init+0x80>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006bbf 	.word	0x08006bbf
 8006b48:	08006b99 	.word	0x08006b99
 8006b4c:	08006bab 	.word	0x08006bab
 8006b50:	08006bed 	.word	0x08006bed
 8006b54:	08006bf3 	.word	0x08006bf3
 8006b58:	08006bf3 	.word	0x08006bf3
 8006b5c:	08006bf3 	.word	0x08006bf3
 8006b60:	08006bf3 	.word	0x08006bf3
 8006b64:	08006bf3 	.word	0x08006bf3
 8006b68:	08006bf3 	.word	0x08006bf3
 8006b6c:	08006bf3 	.word	0x08006bf3
 8006b70:	08006bf3 	.word	0x08006bf3
 8006b74:	08006bf3 	.word	0x08006bf3
 8006b78:	08006bf3 	.word	0x08006bf3
 8006b7c:	08006bf3 	.word	0x08006bf3
 8006b80:	08006bf3 	.word	0x08006bf3
 8006b84:	08006bf3 	.word	0x08006bf3
 8006b88:	08006ba1 	.word	0x08006ba1
 8006b8c:	08006bb5 	.word	0x08006bb5
 8006b90:	4a79      	ldr	r2, [pc, #484]	; (8006d78 <HAL_GPIO_Init+0x2b4>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006b96:	e02c      	b.n	8006bf2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	623b      	str	r3, [r7, #32]
          break;
 8006b9e:	e029      	b.n	8006bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	623b      	str	r3, [r7, #32]
          break;
 8006ba8:	e024      	b.n	8006bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	623b      	str	r3, [r7, #32]
          break;
 8006bb2:	e01f      	b.n	8006bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	330c      	adds	r3, #12
 8006bba:	623b      	str	r3, [r7, #32]
          break;
 8006bbc:	e01a      	b.n	8006bf4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006bc6:	2304      	movs	r3, #4
 8006bc8:	623b      	str	r3, [r7, #32]
          break;
 8006bca:	e013      	b.n	8006bf4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d105      	bne.n	8006be0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006bd4:	2308      	movs	r3, #8
 8006bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	69fa      	ldr	r2, [r7, #28]
 8006bdc:	611a      	str	r2, [r3, #16]
          break;
 8006bde:	e009      	b.n	8006bf4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006be0:	2308      	movs	r3, #8
 8006be2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	615a      	str	r2, [r3, #20]
          break;
 8006bea:	e003      	b.n	8006bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006bec:	2300      	movs	r3, #0
 8006bee:	623b      	str	r3, [r7, #32]
          break;
 8006bf0:	e000      	b.n	8006bf4 <HAL_GPIO_Init+0x130>
          break;
 8006bf2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2bff      	cmp	r3, #255	; 0xff
 8006bf8:	d801      	bhi.n	8006bfe <HAL_GPIO_Init+0x13a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	e001      	b.n	8006c02 <HAL_GPIO_Init+0x13e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	3304      	adds	r3, #4
 8006c02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2bff      	cmp	r3, #255	; 0xff
 8006c08:	d802      	bhi.n	8006c10 <HAL_GPIO_Init+0x14c>
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	e002      	b.n	8006c16 <HAL_GPIO_Init+0x152>
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	3b08      	subs	r3, #8
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	210f      	movs	r1, #15
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	fa01 f303 	lsl.w	r3, r1, r3
 8006c24:	43db      	mvns	r3, r3
 8006c26:	401a      	ands	r2, r3
 8006c28:	6a39      	ldr	r1, [r7, #32]
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c30:	431a      	orrs	r2, r3
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80b1 	beq.w	8006da6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006c44:	4b4d      	ldr	r3, [pc, #308]	; (8006d7c <HAL_GPIO_Init+0x2b8>)
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	4a4c      	ldr	r2, [pc, #304]	; (8006d7c <HAL_GPIO_Init+0x2b8>)
 8006c4a:	f043 0301 	orr.w	r3, r3, #1
 8006c4e:	6193      	str	r3, [r2, #24]
 8006c50:	4b4a      	ldr	r3, [pc, #296]	; (8006d7c <HAL_GPIO_Init+0x2b8>)
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006c5c:	4a48      	ldr	r2, [pc, #288]	; (8006d80 <HAL_GPIO_Init+0x2bc>)
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	089b      	lsrs	r3, r3, #2
 8006c62:	3302      	adds	r3, #2
 8006c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	220f      	movs	r2, #15
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a40      	ldr	r2, [pc, #256]	; (8006d84 <HAL_GPIO_Init+0x2c0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d013      	beq.n	8006cb0 <HAL_GPIO_Init+0x1ec>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a3f      	ldr	r2, [pc, #252]	; (8006d88 <HAL_GPIO_Init+0x2c4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00d      	beq.n	8006cac <HAL_GPIO_Init+0x1e8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a3e      	ldr	r2, [pc, #248]	; (8006d8c <HAL_GPIO_Init+0x2c8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d007      	beq.n	8006ca8 <HAL_GPIO_Init+0x1e4>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a3d      	ldr	r2, [pc, #244]	; (8006d90 <HAL_GPIO_Init+0x2cc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d101      	bne.n	8006ca4 <HAL_GPIO_Init+0x1e0>
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e006      	b.n	8006cb2 <HAL_GPIO_Init+0x1ee>
 8006ca4:	2304      	movs	r3, #4
 8006ca6:	e004      	b.n	8006cb2 <HAL_GPIO_Init+0x1ee>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e002      	b.n	8006cb2 <HAL_GPIO_Init+0x1ee>
 8006cac:	2301      	movs	r3, #1
 8006cae:	e000      	b.n	8006cb2 <HAL_GPIO_Init+0x1ee>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb4:	f002 0203 	and.w	r2, r2, #3
 8006cb8:	0092      	lsls	r2, r2, #2
 8006cba:	4093      	lsls	r3, r2
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006cc2:	492f      	ldr	r1, [pc, #188]	; (8006d80 <HAL_GPIO_Init+0x2bc>)
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	3302      	adds	r3, #2
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d006      	beq.n	8006cea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006cdc:	4b2d      	ldr	r3, [pc, #180]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	492c      	ldr	r1, [pc, #176]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	600b      	str	r3, [r1, #0]
 8006ce8:	e006      	b.n	8006cf8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006cea:	4b2a      	ldr	r3, [pc, #168]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	4928      	ldr	r1, [pc, #160]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d006      	beq.n	8006d12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006d04:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	4922      	ldr	r1, [pc, #136]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	604b      	str	r3, [r1, #4]
 8006d10:	e006      	b.n	8006d20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006d12:	4b20      	ldr	r3, [pc, #128]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	491e      	ldr	r1, [pc, #120]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d006      	beq.n	8006d3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006d2c:	4b19      	ldr	r3, [pc, #100]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	4918      	ldr	r1, [pc, #96]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	608b      	str	r3, [r1, #8]
 8006d38:	e006      	b.n	8006d48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006d3a:	4b16      	ldr	r3, [pc, #88]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	43db      	mvns	r3, r3
 8006d42:	4914      	ldr	r1, [pc, #80]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d021      	beq.n	8006d98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006d54:	4b0f      	ldr	r3, [pc, #60]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	490e      	ldr	r1, [pc, #56]	; (8006d94 <HAL_GPIO_Init+0x2d0>)
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60cb      	str	r3, [r1, #12]
 8006d60:	e021      	b.n	8006da6 <HAL_GPIO_Init+0x2e2>
 8006d62:	bf00      	nop
 8006d64:	10320000 	.word	0x10320000
 8006d68:	10310000 	.word	0x10310000
 8006d6c:	10220000 	.word	0x10220000
 8006d70:	10210000 	.word	0x10210000
 8006d74:	10120000 	.word	0x10120000
 8006d78:	10110000 	.word	0x10110000
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40010800 	.word	0x40010800
 8006d88:	40010c00 	.word	0x40010c00
 8006d8c:	40011000 	.word	0x40011000
 8006d90:	40011400 	.word	0x40011400
 8006d94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <HAL_GPIO_Init+0x304>)
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	43db      	mvns	r3, r3
 8006da0:	4909      	ldr	r1, [pc, #36]	; (8006dc8 <HAL_GPIO_Init+0x304>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	3301      	adds	r3, #1
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	fa22 f303 	lsr.w	r3, r2, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f47f ae8e 	bne.w	8006ad8 <HAL_GPIO_Init+0x14>
  }
}
 8006dbc:	bf00      	nop
 8006dbe:	bf00      	nop
 8006dc0:	372c      	adds	r7, #44	; 0x2c
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr
 8006dc8:	40010400 	.word	0x40010400

08006dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	887b      	ldrh	r3, [r7, #2]
 8006dde:	4013      	ands	r3, r2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
 8006de8:	e001      	b.n	8006dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bc80      	pop	{r7}
 8006df8:	4770      	bx	lr

08006dfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	460b      	mov	r3, r1
 8006e04:	807b      	strh	r3, [r7, #2]
 8006e06:	4613      	mov	r3, r2
 8006e08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e0a:	787b      	ldrb	r3, [r7, #1]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d003      	beq.n	8006e18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e10:	887a      	ldrh	r2, [r7, #2]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006e16:	e003      	b.n	8006e20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006e18:	887b      	ldrh	r3, [r7, #2]
 8006e1a:	041a      	lsls	r2, r3, #16
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	611a      	str	r2, [r3, #16]
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr
	...

08006e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e12b      	b.n	8007096 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fe fb1e 	bl	8005494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2224      	movs	r2, #36	; 0x24
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0201 	bic.w	r2, r2, #1
 8006e6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e90:	f002 fc38 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 8006e94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	4a81      	ldr	r2, [pc, #516]	; (80070a0 <HAL_I2C_Init+0x274>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d807      	bhi.n	8006eb0 <HAL_I2C_Init+0x84>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4a80      	ldr	r2, [pc, #512]	; (80070a4 <HAL_I2C_Init+0x278>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	bf94      	ite	ls
 8006ea8:	2301      	movls	r3, #1
 8006eaa:	2300      	movhi	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	e006      	b.n	8006ebe <HAL_I2C_Init+0x92>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4a7d      	ldr	r2, [pc, #500]	; (80070a8 <HAL_I2C_Init+0x27c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	bf94      	ite	ls
 8006eb8:	2301      	movls	r3, #1
 8006eba:	2300      	movhi	r3, #0
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e0e7      	b.n	8007096 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4a78      	ldr	r2, [pc, #480]	; (80070ac <HAL_I2C_Init+0x280>)
 8006eca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ece:	0c9b      	lsrs	r3, r3, #18
 8006ed0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	4a6a      	ldr	r2, [pc, #424]	; (80070a0 <HAL_I2C_Init+0x274>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d802      	bhi.n	8006f00 <HAL_I2C_Init+0xd4>
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	3301      	adds	r3, #1
 8006efe:	e009      	b.n	8006f14 <HAL_I2C_Init+0xe8>
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006f06:	fb02 f303 	mul.w	r3, r2, r3
 8006f0a:	4a69      	ldr	r2, [pc, #420]	; (80070b0 <HAL_I2C_Init+0x284>)
 8006f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f10:	099b      	lsrs	r3, r3, #6
 8006f12:	3301      	adds	r3, #1
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6812      	ldr	r2, [r2, #0]
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006f26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	495c      	ldr	r1, [pc, #368]	; (80070a0 <HAL_I2C_Init+0x274>)
 8006f30:	428b      	cmp	r3, r1
 8006f32:	d819      	bhi.n	8006f68 <HAL_I2C_Init+0x13c>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	1e59      	subs	r1, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f42:	1c59      	adds	r1, r3, #1
 8006f44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006f48:	400b      	ands	r3, r1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <HAL_I2C_Init+0x138>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	1e59      	subs	r1, r3, #1
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f62:	e051      	b.n	8007008 <HAL_I2C_Init+0x1dc>
 8006f64:	2304      	movs	r3, #4
 8006f66:	e04f      	b.n	8007008 <HAL_I2C_Init+0x1dc>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d111      	bne.n	8006f94 <HAL_I2C_Init+0x168>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	1e58      	subs	r0, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6859      	ldr	r1, [r3, #4]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	440b      	add	r3, r1
 8006f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f82:	3301      	adds	r3, #1
 8006f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	bf0c      	ite	eq
 8006f8c:	2301      	moveq	r3, #1
 8006f8e:	2300      	movne	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	e012      	b.n	8006fba <HAL_I2C_Init+0x18e>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	1e58      	subs	r0, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6859      	ldr	r1, [r3, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	0099      	lsls	r1, r3, #2
 8006fa4:	440b      	add	r3, r1
 8006fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006faa:	3301      	adds	r3, #1
 8006fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bf0c      	ite	eq
 8006fb4:	2301      	moveq	r3, #1
 8006fb6:	2300      	movne	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_I2C_Init+0x196>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e022      	b.n	8007008 <HAL_I2C_Init+0x1dc>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10e      	bne.n	8006fe8 <HAL_I2C_Init+0x1bc>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	1e58      	subs	r0, r3, #1
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6859      	ldr	r1, [r3, #4]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	440b      	add	r3, r1
 8006fd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fdc:	3301      	adds	r3, #1
 8006fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe6:	e00f      	b.n	8007008 <HAL_I2C_Init+0x1dc>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	1e58      	subs	r0, r3, #1
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6859      	ldr	r1, [r3, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	0099      	lsls	r1, r3, #2
 8006ff8:	440b      	add	r3, r1
 8006ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ffe:	3301      	adds	r3, #1
 8007000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	6809      	ldr	r1, [r1, #0]
 800700c:	4313      	orrs	r3, r2
 800700e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69da      	ldr	r2, [r3, #28]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007036:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6911      	ldr	r1, [r2, #16]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	68d2      	ldr	r2, [r2, #12]
 8007042:	4311      	orrs	r1, r2
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	6812      	ldr	r2, [r2, #0]
 8007048:	430b      	orrs	r3, r1
 800704a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	695a      	ldr	r2, [r3, #20]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0201 	orr.w	r2, r2, #1
 8007076:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2220      	movs	r2, #32
 8007082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	000186a0 	.word	0x000186a0
 80070a4:	001e847f 	.word	0x001e847f
 80070a8:	003d08ff 	.word	0x003d08ff
 80070ac:	431bde83 	.word	0x431bde83
 80070b0:	10624dd3 	.word	0x10624dd3

080070b4 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	607a      	str	r2, [r7, #4]
 80070be:	461a      	mov	r2, r3
 80070c0:	460b      	mov	r3, r1
 80070c2:	817b      	strh	r3, [r7, #10]
 80070c4:	4613      	mov	r3, r2
 80070c6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b20      	cmp	r3, #32
 80070d6:	f040 8085 	bne.w	80071e4 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80070da:	4b45      	ldr	r3, [pc, #276]	; (80071f0 <HAL_I2C_Master_Transmit_IT+0x13c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	08db      	lsrs	r3, r3, #3
 80070e0:	4a44      	ldr	r2, [pc, #272]	; (80071f4 <HAL_I2C_Master_Transmit_IT+0x140>)
 80070e2:	fba2 2303 	umull	r2, r3, r2, r3
 80070e6:	0a1a      	lsrs	r2, r3, #8
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	009a      	lsls	r2, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d116      	bne.n	800712e <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	f043 0220 	orr.w	r2, r3, #32
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e05b      	b.n	80071e6 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b02      	cmp	r3, #2
 800713a:	d0db      	beq.n	80070f4 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007142:	2b01      	cmp	r3, #1
 8007144:	d101      	bne.n	800714a <HAL_I2C_Master_Transmit_IT+0x96>
 8007146:	2302      	movs	r3, #2
 8007148:	e04d      	b.n	80071e6 <HAL_I2C_Master_Transmit_IT+0x132>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b01      	cmp	r3, #1
 800715e:	d007      	beq.n	8007170 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800717e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2221      	movs	r2, #33	; 0x21
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2210      	movs	r2, #16
 800718c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	893a      	ldrh	r2, [r7, #8]
 80071a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4a12      	ldr	r2, [pc, #72]	; (80071f8 <HAL_I2C_Master_Transmit_IT+0x144>)
 80071b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80071b2:	897a      	ldrh	r2, [r7, #10]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80071ce:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071de:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	e000      	b.n	80071e6 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80071e4:	2302      	movs	r3, #2
  }
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr
 80071f0:	20000054 	.word	0x20000054
 80071f4:	14f8b589 	.word	0x14f8b589
 80071f8:	ffff0000 	.word	0xffff0000

080071fc <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	607a      	str	r2, [r7, #4]
 8007206:	461a      	mov	r2, r3
 8007208:	460b      	mov	r3, r1
 800720a:	817b      	strh	r3, [r7, #10]
 800720c:	4613      	mov	r3, r2
 800720e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b20      	cmp	r3, #32
 800721e:	f040 808d 	bne.w	800733c <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007222:	4b49      	ldr	r3, [pc, #292]	; (8007348 <HAL_I2C_Master_Receive_IT+0x14c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	08db      	lsrs	r3, r3, #3
 8007228:	4a48      	ldr	r2, [pc, #288]	; (800734c <HAL_I2C_Master_Receive_IT+0x150>)
 800722a:	fba2 2303 	umull	r2, r3, r2, r3
 800722e:	0a1a      	lsrs	r2, r3, #8
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	009a      	lsls	r2, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	3b01      	subs	r3, #1
 8007240:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d116      	bne.n	8007276 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2220      	movs	r2, #32
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f043 0220 	orr.w	r2, r3, #32
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e063      	b.n	800733e <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b02      	cmp	r3, #2
 8007282:	d0db      	beq.n	800723c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <HAL_I2C_Master_Receive_IT+0x96>
 800728e:	2302      	movs	r3, #2
 8007290:	e055      	b.n	800733e <HAL_I2C_Master_Receive_IT+0x142>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d007      	beq.n	80072b8 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f042 0201 	orr.w	r2, r2, #1
 80072b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2222      	movs	r2, #34	; 0x22
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2210      	movs	r2, #16
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	893a      	ldrh	r2, [r7, #8]
 80072e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4a16      	ldr	r2, [pc, #88]	; (8007350 <HAL_I2C_Master_Receive_IT+0x154>)
 80072f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80072fa:	897a      	ldrh	r2, [r7, #10]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007316:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007326:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007336:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	e000      	b.n	800733e <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800733c:	2302      	movs	r3, #2
  }
}
 800733e:	4618      	mov	r0, r3
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr
 8007348:	20000054 	.word	0x20000054
 800734c:	14f8b589 	.word	0x14f8b589
 8007350:	ffff0000 	.word	0xffff0000

08007354 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007374:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800737c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	2b10      	cmp	r3, #16
 8007382:	d003      	beq.n	800738c <HAL_I2C_EV_IRQHandler+0x38>
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	2b40      	cmp	r3, #64	; 0x40
 8007388:	f040 80c1 	bne.w	800750e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10d      	bne.n	80073c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80073ac:	d003      	beq.n	80073b6 <HAL_I2C_EV_IRQHandler+0x62>
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80073b4:	d101      	bne.n	80073ba <HAL_I2C_EV_IRQHandler+0x66>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e000      	b.n	80073bc <HAL_I2C_EV_IRQHandler+0x68>
 80073ba:	2300      	movs	r3, #0
 80073bc:	2b01      	cmp	r3, #1
 80073be:	f000 8132 	beq.w	8007626 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00c      	beq.n	80073e6 <HAL_I2C_EV_IRQHandler+0x92>
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	0a5b      	lsrs	r3, r3, #9
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d006      	beq.n	80073e6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 fc51 	bl	8008c80 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fd53 	bl	8007e8a <I2C_Master_SB>
 80073e4:	e092      	b.n	800750c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	08db      	lsrs	r3, r3, #3
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d009      	beq.n	8007406 <HAL_I2C_EV_IRQHandler+0xb2>
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	0a5b      	lsrs	r3, r3, #9
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fdc8 	bl	8007f94 <I2C_Master_ADD10>
 8007404:	e082      	b.n	800750c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	085b      	lsrs	r3, r3, #1
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d009      	beq.n	8007426 <HAL_I2C_EV_IRQHandler+0xd2>
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	0a5b      	lsrs	r3, r3, #9
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fde1 	bl	8007fe6 <I2C_Master_ADDR>
 8007424:	e072      	b.n	800750c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	089b      	lsrs	r3, r3, #2
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d03b      	beq.n	80074aa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800743c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007440:	f000 80f3 	beq.w	800762a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	09db      	lsrs	r3, r3, #7
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00f      	beq.n	8007470 <HAL_I2C_EV_IRQHandler+0x11c>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	0a9b      	lsrs	r3, r3, #10
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d009      	beq.n	8007470 <HAL_I2C_EV_IRQHandler+0x11c>
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	089b      	lsrs	r3, r3, #2
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	d103      	bne.n	8007470 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f9cd 	bl	8007808 <I2C_MasterTransmit_TXE>
 800746e:	e04d      	b.n	800750c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	089b      	lsrs	r3, r3, #2
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80d6 	beq.w	800762a <HAL_I2C_EV_IRQHandler+0x2d6>
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	0a5b      	lsrs	r3, r3, #9
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 80cf 	beq.w	800762a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	2b21      	cmp	r3, #33	; 0x21
 8007490:	d103      	bne.n	800749a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fa54 	bl	8007940 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007498:	e0c7      	b.n	800762a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	2b40      	cmp	r3, #64	; 0x40
 800749e:	f040 80c4 	bne.w	800762a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fac2 	bl	8007a2c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074a8:	e0bf      	b.n	800762a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b8:	f000 80b7 	beq.w	800762a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	099b      	lsrs	r3, r3, #6
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00f      	beq.n	80074e8 <HAL_I2C_EV_IRQHandler+0x194>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	0a9b      	lsrs	r3, r3, #10
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d009      	beq.n	80074e8 <HAL_I2C_EV_IRQHandler+0x194>
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	089b      	lsrs	r3, r3, #2
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d103      	bne.n	80074e8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fb37 	bl	8007b54 <I2C_MasterReceive_RXNE>
 80074e6:	e011      	b.n	800750c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	089b      	lsrs	r3, r3, #2
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 809a 	beq.w	800762a <HAL_I2C_EV_IRQHandler+0x2d6>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	0a5b      	lsrs	r3, r3, #9
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 8093 	beq.w	800762a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fbd6 	bl	8007cb6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800750a:	e08e      	b.n	800762a <HAL_I2C_EV_IRQHandler+0x2d6>
 800750c:	e08d      	b.n	800762a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	2b00      	cmp	r3, #0
 8007514:	d004      	beq.n	8007520 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	61fb      	str	r3, [r7, #28]
 800751e:	e007      	b.n	8007530 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	085b      	lsrs	r3, r3, #1
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d012      	beq.n	8007562 <HAL_I2C_EV_IRQHandler+0x20e>
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	0a5b      	lsrs	r3, r3, #9
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00c      	beq.n	8007562 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007558:	69b9      	ldr	r1, [r7, #24]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 ff9a 	bl	8008494 <I2C_Slave_ADDR>
 8007560:	e066      	b.n	8007630 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	091b      	lsrs	r3, r3, #4
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d009      	beq.n	8007582 <HAL_I2C_EV_IRQHandler+0x22e>
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	0a5b      	lsrs	r3, r3, #9
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 ffd4 	bl	8008528 <I2C_Slave_STOPF>
 8007580:	e056      	b.n	8007630 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b21      	cmp	r3, #33	; 0x21
 8007586:	d002      	beq.n	800758e <HAL_I2C_EV_IRQHandler+0x23a>
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	2b29      	cmp	r3, #41	; 0x29
 800758c:	d125      	bne.n	80075da <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	09db      	lsrs	r3, r3, #7
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00f      	beq.n	80075ba <HAL_I2C_EV_IRQHandler+0x266>
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	0a9b      	lsrs	r3, r3, #10
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <HAL_I2C_EV_IRQHandler+0x266>
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	089b      	lsrs	r3, r3, #2
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d103      	bne.n	80075ba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 feb2 	bl	800831c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80075b8:	e039      	b.n	800762e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	089b      	lsrs	r3, r3, #2
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d033      	beq.n	800762e <HAL_I2C_EV_IRQHandler+0x2da>
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	0a5b      	lsrs	r3, r3, #9
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d02d      	beq.n	800762e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fedf 	bl	8008396 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80075d8:	e029      	b.n	800762e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	099b      	lsrs	r3, r3, #6
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00f      	beq.n	8007606 <HAL_I2C_EV_IRQHandler+0x2b2>
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	0a9b      	lsrs	r3, r3, #10
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d009      	beq.n	8007606 <HAL_I2C_EV_IRQHandler+0x2b2>
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	089b      	lsrs	r3, r3, #2
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d103      	bne.n	8007606 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fee9 	bl	80083d6 <I2C_SlaveReceive_RXNE>
 8007604:	e014      	b.n	8007630 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	089b      	lsrs	r3, r3, #2
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00e      	beq.n	8007630 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	0a5b      	lsrs	r3, r3, #9
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d008      	beq.n	8007630 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 ff17 	bl	8008452 <I2C_SlaveReceive_BTF>
 8007624:	e004      	b.n	8007630 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007626:	bf00      	nop
 8007628:	e002      	b.n	8007630 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800762a:	bf00      	nop
 800762c:	e000      	b.n	8007630 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800762e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007630:	3720      	adds	r7, #32
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b08a      	sub	sp, #40	; 0x28
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800764e:	2300      	movs	r3, #0
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007658:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	0a1b      	lsrs	r3, r3, #8
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d016      	beq.n	8007694 <HAL_I2C_ER_IRQHandler+0x5e>
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	0a1b      	lsrs	r3, r3, #8
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d010      	beq.n	8007694 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	f043 0301 	orr.w	r3, r3, #1
 8007678:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007682:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007692:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	0a5b      	lsrs	r3, r3, #9
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00e      	beq.n	80076be <HAL_I2C_ER_IRQHandler+0x88>
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	0a1b      	lsrs	r3, r3, #8
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d008      	beq.n	80076be <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	f043 0302 	orr.w	r3, r3, #2
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80076bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	0a9b      	lsrs	r3, r3, #10
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d03f      	beq.n	800774a <HAL_I2C_ER_IRQHandler+0x114>
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	0a1b      	lsrs	r3, r3, #8
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d039      	beq.n	800774a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80076d6:	7efb      	ldrb	r3, [r7, #27]
 80076d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076de:	b29b      	uxth	r3, r3
 80076e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80076f0:	7ebb      	ldrb	r3, [r7, #26]
 80076f2:	2b20      	cmp	r3, #32
 80076f4:	d112      	bne.n	800771c <HAL_I2C_ER_IRQHandler+0xe6>
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10f      	bne.n	800771c <HAL_I2C_ER_IRQHandler+0xe6>
 80076fc:	7cfb      	ldrb	r3, [r7, #19]
 80076fe:	2b21      	cmp	r3, #33	; 0x21
 8007700:	d008      	beq.n	8007714 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007702:	7cfb      	ldrb	r3, [r7, #19]
 8007704:	2b29      	cmp	r3, #41	; 0x29
 8007706:	d005      	beq.n	8007714 <HAL_I2C_ER_IRQHandler+0xde>
 8007708:	7cfb      	ldrb	r3, [r7, #19]
 800770a:	2b28      	cmp	r3, #40	; 0x28
 800770c:	d106      	bne.n	800771c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b21      	cmp	r3, #33	; 0x21
 8007712:	d103      	bne.n	800771c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 f837 	bl	8008788 <I2C_Slave_AF>
 800771a:	e016      	b.n	800774a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007724:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	f043 0304 	orr.w	r3, r3, #4
 800772c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800772e:	7efb      	ldrb	r3, [r7, #27]
 8007730:	2b10      	cmp	r3, #16
 8007732:	d002      	beq.n	800773a <HAL_I2C_ER_IRQHandler+0x104>
 8007734:	7efb      	ldrb	r3, [r7, #27]
 8007736:	2b40      	cmp	r3, #64	; 0x40
 8007738:	d107      	bne.n	800774a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007748:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	0adb      	lsrs	r3, r3, #11
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00e      	beq.n	8007774 <HAL_I2C_ER_IRQHandler+0x13e>
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	0a1b      	lsrs	r3, r3, #8
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d008      	beq.n	8007774 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	f043 0308 	orr.w	r3, r3, #8
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007772:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	2b00      	cmp	r3, #0
 8007778:	d008      	beq.n	800778c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	431a      	orrs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 f86e 	bl	8008868 <I2C_ITError>
  }
}
 800778c:	bf00      	nop
 800778e:	3728      	adds	r7, #40	; 0x28
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr

080077a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr

080077b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	70fb      	strb	r3, [r7, #3]
 80077c4:	4613      	mov	r3, r2
 80077c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bc80      	pop	{r7}
 80077d0:	4770      	bx	lr

080077d2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	bc80      	pop	{r7}
 80077e2:	4770      	bx	lr

080077e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr

080077f6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	bc80      	pop	{r7}
 8007806:	4770      	bx	lr

08007808 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007816:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800781e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800782a:	2b00      	cmp	r3, #0
 800782c:	d150      	bne.n	80078d0 <I2C_MasterTransmit_TXE+0xc8>
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	2b21      	cmp	r3, #33	; 0x21
 8007832:	d14d      	bne.n	80078d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b08      	cmp	r3, #8
 8007838:	d01d      	beq.n	8007876 <I2C_MasterTransmit_TXE+0x6e>
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2b20      	cmp	r3, #32
 800783e:	d01a      	beq.n	8007876 <I2C_MasterTransmit_TXE+0x6e>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007846:	d016      	beq.n	8007876 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007856:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2211      	movs	r2, #17
 800785c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2220      	movs	r2, #32
 800786a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7fc feda 	bl	8004628 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007874:	e060      	b.n	8007938 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007884:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007894:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b40      	cmp	r3, #64	; 0x40
 80078ae:	d107      	bne.n	80078c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff ff93 	bl	80077e4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80078be:	e03b      	b.n	8007938 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7fc fead 	bl	8004628 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80078ce:	e033      	b.n	8007938 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	2b21      	cmp	r3, #33	; 0x21
 80078d4:	d005      	beq.n	80078e2 <I2C_MasterTransmit_TXE+0xda>
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b40      	cmp	r3, #64	; 0x40
 80078da:	d12d      	bne.n	8007938 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	2b22      	cmp	r3, #34	; 0x22
 80078e0:	d12a      	bne.n	8007938 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d108      	bne.n	80078fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80078fc:	e01c      	b.n	8007938 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b40      	cmp	r3, #64	; 0x40
 8007908:	d103      	bne.n	8007912 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f88e 	bl	8007a2c <I2C_MemoryTransmit_TXE_BTF>
}
 8007910:	e012      	b.n	8007938 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	781a      	ldrb	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792c:	b29b      	uxth	r3, r3
 800792e:	3b01      	subs	r3, #1
 8007930:	b29a      	uxth	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007936:	e7ff      	b.n	8007938 <I2C_MasterTransmit_TXE+0x130>
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b21      	cmp	r3, #33	; 0x21
 8007958:	d164      	bne.n	8007a24 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d012      	beq.n	800798a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	781a      	ldrb	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797e:	b29b      	uxth	r3, r3
 8007980:	3b01      	subs	r3, #1
 8007982:	b29a      	uxth	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007988:	e04c      	b.n	8007a24 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b08      	cmp	r3, #8
 800798e:	d01d      	beq.n	80079cc <I2C_MasterTransmit_BTF+0x8c>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b20      	cmp	r3, #32
 8007994:	d01a      	beq.n	80079cc <I2C_MasterTransmit_BTF+0x8c>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800799c:	d016      	beq.n	80079cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2211      	movs	r2, #17
 80079b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2220      	movs	r2, #32
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7fc fe2f 	bl	8004628 <HAL_I2C_MasterTxCpltCallback>
}
 80079ca:	e02b      	b.n	8007a24 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2220      	movs	r2, #32
 80079f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b40      	cmp	r3, #64	; 0x40
 8007a04:	d107      	bne.n	8007a16 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7ff fee8 	bl	80077e4 <HAL_I2C_MemTxCpltCallback>
}
 8007a14:	e006      	b.n	8007a24 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fc fe02 	bl	8004628 <HAL_I2C_MasterTxCpltCallback>
}
 8007a24:	bf00      	nop
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11d      	bne.n	8007a80 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d10b      	bne.n	8007a64 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a5c:	1c9a      	adds	r2, r3, #2
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007a62:	e073      	b.n	8007b4c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	121b      	asrs	r3, r3, #8
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007a7e:	e065      	b.n	8007b4c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d10b      	bne.n	8007aa0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007a9e:	e055      	b.n	8007b4c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d151      	bne.n	8007b4c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	2b22      	cmp	r3, #34	; 0x22
 8007aac:	d10d      	bne.n	8007aca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007abc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007ac8:	e040      	b.n	8007b4c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d015      	beq.n	8007b00 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	2b21      	cmp	r3, #33	; 0x21
 8007ad8:	d112      	bne.n	8007b00 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	781a      	ldrb	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007afe:	e025      	b.n	8007b4c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d120      	bne.n	8007b4c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	2b21      	cmp	r3, #33	; 0x21
 8007b0e:	d11d      	bne.n	8007b4c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b1e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b2e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff fe4c 	bl	80077e4 <HAL_I2C_MemTxCpltCallback>
}
 8007b4c:	bf00      	nop
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b22      	cmp	r3, #34	; 0x22
 8007b66:	f040 80a2 	bne.w	8007cae <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d921      	bls.n	8007bbc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	b2d2      	uxtb	r2, r2
 8007b84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	f040 8082 	bne.w	8007cae <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bb8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007bba:	e078      	b.n	8007cae <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d074      	beq.n	8007cae <I2C_MasterReceive_RXNE+0x15a>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d002      	beq.n	8007bd0 <I2C_MasterReceive_RXNE+0x7c>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d16e      	bne.n	8007cae <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f001 f823 	bl	8008c1c <I2C_WaitOnSTOPRequestThroughIT>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d142      	bne.n	8007c62 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bea:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bfa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691a      	ldr	r2, [r3, #16]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b40      	cmp	r3, #64	; 0x40
 8007c34:	d10a      	bne.n	8007c4c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff fdd6 	bl	80077f6 <HAL_I2C_MemRxCpltCallback>
}
 8007c4a:	e030      	b.n	8007cae <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2212      	movs	r2, #18
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7fc fcf8 	bl	8004650 <HAL_I2C_MasterRxCpltCallback>
}
 8007c60:	e025      	b.n	8007cae <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c70:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	b2d2      	uxtb	r2, r2
 8007c7e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	3b01      	subs	r3, #1
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7fc fce5 	bl	8004678 <HAL_I2C_ErrorCallback>
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	d11b      	bne.n	8007d06 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cdc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	b2d2      	uxtb	r2, r2
 8007cea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007d04:	e0bd      	b.n	8007e82 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d129      	bne.n	8007d64 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d1e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d00a      	beq.n	8007d3c <I2C_MasterReceive_BTF+0x86>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d007      	beq.n	8007d3c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691a      	ldr	r2, [r3, #16]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007d62:	e08e      	b.n	8007e82 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d176      	bne.n	8007e5c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d002      	beq.n	8007d7a <I2C_MasterReceive_BTF+0xc4>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b10      	cmp	r3, #16
 8007d78:	d108      	bne.n	8007d8c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	e019      	b.n	8007dc0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d002      	beq.n	8007d98 <I2C_MasterReceive_BTF+0xe2>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d108      	bne.n	8007daa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	e00a      	b.n	8007dc0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b10      	cmp	r3, #16
 8007dae:	d007      	beq.n	8007dc0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dbe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	691a      	ldr	r2, [r3, #16]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007e1a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b40      	cmp	r3, #64	; 0x40
 8007e2e:	d10a      	bne.n	8007e46 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff fcd9 	bl	80077f6 <HAL_I2C_MemRxCpltCallback>
}
 8007e44:	e01d      	b.n	8007e82 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2212      	movs	r2, #18
 8007e52:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7fc fbfb 	bl	8004650 <HAL_I2C_MasterRxCpltCallback>
}
 8007e5a:	e012      	b.n	8007e82 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	b2d2      	uxtb	r2, r2
 8007e68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007e82:	bf00      	nop
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b40      	cmp	r3, #64	; 0x40
 8007e9c:	d117      	bne.n	8007ece <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d109      	bne.n	8007eba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	461a      	mov	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007eb6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007eb8:	e067      	b.n	8007f8a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f043 0301 	orr.w	r3, r3, #1
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	611a      	str	r2, [r3, #16]
}
 8007ecc:	e05d      	b.n	8007f8a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ed6:	d133      	bne.n	8007f40 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b21      	cmp	r3, #33	; 0x21
 8007ee2:	d109      	bne.n	8007ef8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	461a      	mov	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ef4:	611a      	str	r2, [r3, #16]
 8007ef6:	e008      	b.n	8007f0a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	f043 0301 	orr.w	r3, r3, #1
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d004      	beq.n	8007f1c <I2C_Master_SB+0x92>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d108      	bne.n	8007f2e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d032      	beq.n	8007f8a <I2C_Master_SB+0x100>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d02d      	beq.n	8007f8a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f3c:	605a      	str	r2, [r3, #4]
}
 8007f3e:	e024      	b.n	8007f8a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10e      	bne.n	8007f66 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	11db      	asrs	r3, r3, #7
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	f003 0306 	and.w	r3, r3, #6
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	f063 030f 	orn	r3, r3, #15
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	611a      	str	r2, [r3, #16]
}
 8007f64:	e011      	b.n	8007f8a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d10d      	bne.n	8007f8a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	11db      	asrs	r3, r3, #7
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f003 0306 	and.w	r3, r3, #6
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	f063 030e 	orn	r3, r3, #14
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	611a      	str	r2, [r3, #16]
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bc80      	pop	{r7}
 8007f92:	4770      	bx	lr

08007f94 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d004      	beq.n	8007fba <I2C_Master_ADD10+0x26>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d108      	bne.n	8007fcc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00c      	beq.n	8007fdc <I2C_Master_ADD10+0x48>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fda:	605a      	str	r2, [r3, #4]
  }
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bc80      	pop	{r7}
 8007fe4:	4770      	bx	lr

08007fe6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b091      	sub	sp, #68	; 0x44
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ff4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b22      	cmp	r3, #34	; 0x22
 800800e:	f040 8174 	bne.w	80082fa <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10f      	bne.n	800803a <I2C_Master_ADDR+0x54>
 800801a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800801e:	2b40      	cmp	r3, #64	; 0x40
 8008020:	d10b      	bne.n	800803a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008022:	2300      	movs	r3, #0
 8008024:	633b      	str	r3, [r7, #48]	; 0x30
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	633b      	str	r3, [r7, #48]	; 0x30
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	633b      	str	r3, [r7, #48]	; 0x30
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	e16b      	b.n	8008312 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803e:	2b00      	cmp	r3, #0
 8008040:	d11d      	bne.n	800807e <I2C_Master_ADDR+0x98>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800804a:	d118      	bne.n	800807e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800804c:	2300      	movs	r3, #0
 800804e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008060:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008070:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	651a      	str	r2, [r3, #80]	; 0x50
 800807c:	e149      	b.n	8008312 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008082:	b29b      	uxth	r3, r3
 8008084:	2b00      	cmp	r3, #0
 8008086:	d113      	bne.n	80080b0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008088:	2300      	movs	r3, #0
 800808a:	62bb      	str	r3, [r7, #40]	; 0x28
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	62bb      	str	r3, [r7, #40]	; 0x28
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	62bb      	str	r3, [r7, #40]	; 0x28
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e120      	b.n	80082f2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	f040 808a 	bne.w	80081d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080c2:	d137      	bne.n	8008134 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080d2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080e2:	d113      	bne.n	800810c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080f2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080f4:	2300      	movs	r3, #0
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	627b      	str	r3, [r7, #36]	; 0x24
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	e0f2      	b.n	80082f2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800810c:	2300      	movs	r3, #0
 800810e:	623b      	str	r3, [r7, #32]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	623b      	str	r3, [r7, #32]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	623b      	str	r3, [r7, #32]
 8008120:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	e0de      	b.n	80082f2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	2b08      	cmp	r3, #8
 8008138:	d02e      	beq.n	8008198 <I2C_Master_ADDR+0x1b2>
 800813a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813c:	2b20      	cmp	r3, #32
 800813e:	d02b      	beq.n	8008198 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008142:	2b12      	cmp	r3, #18
 8008144:	d102      	bne.n	800814c <I2C_Master_ADDR+0x166>
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	2b01      	cmp	r3, #1
 800814a:	d125      	bne.n	8008198 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	2b04      	cmp	r3, #4
 8008150:	d00e      	beq.n	8008170 <I2C_Master_ADDR+0x18a>
 8008152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008154:	2b02      	cmp	r3, #2
 8008156:	d00b      	beq.n	8008170 <I2C_Master_ADDR+0x18a>
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	2b10      	cmp	r3, #16
 800815c:	d008      	beq.n	8008170 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	e007      	b.n	8008180 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800817e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008180:	2300      	movs	r3, #0
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	61fb      	str	r3, [r7, #28]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	61fb      	str	r3, [r7, #28]
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	e0ac      	b.n	80082f2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081a8:	2300      	movs	r3, #0
 80081aa:	61bb      	str	r3, [r7, #24]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	61bb      	str	r3, [r7, #24]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	61bb      	str	r3, [r7, #24]
 80081bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	e090      	b.n	80082f2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d158      	bne.n	800828c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	2b04      	cmp	r3, #4
 80081de:	d021      	beq.n	8008224 <I2C_Master_ADDR+0x23e>
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d01e      	beq.n	8008224 <I2C_Master_ADDR+0x23e>
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	2b10      	cmp	r3, #16
 80081ea:	d01b      	beq.n	8008224 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081fa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081fc:	2300      	movs	r3, #0
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	e012      	b.n	800824a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008232:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008234:	2300      	movs	r3, #0
 8008236:	613b      	str	r3, [r7, #16]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	613b      	str	r3, [r7, #16]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	613b      	str	r3, [r7, #16]
 8008248:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008258:	d14b      	bne.n	80082f2 <I2C_Master_ADDR+0x30c>
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008260:	d00b      	beq.n	800827a <I2C_Master_ADDR+0x294>
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	2b01      	cmp	r3, #1
 8008266:	d008      	beq.n	800827a <I2C_Master_ADDR+0x294>
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	2b08      	cmp	r3, #8
 800826c:	d005      	beq.n	800827a <I2C_Master_ADDR+0x294>
 800826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008270:	2b10      	cmp	r3, #16
 8008272:	d002      	beq.n	800827a <I2C_Master_ADDR+0x294>
 8008274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008276:	2b20      	cmp	r3, #32
 8008278:	d13b      	bne.n	80082f2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	685a      	ldr	r2, [r3, #4]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008288:	605a      	str	r2, [r3, #4]
 800828a:	e032      	b.n	80082f2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800829a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082aa:	d117      	bne.n	80082dc <I2C_Master_ADDR+0x2f6>
 80082ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082b2:	d00b      	beq.n	80082cc <I2C_Master_ADDR+0x2e6>
 80082b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d008      	beq.n	80082cc <I2C_Master_ADDR+0x2e6>
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	2b08      	cmp	r3, #8
 80082be:	d005      	beq.n	80082cc <I2C_Master_ADDR+0x2e6>
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	2b10      	cmp	r3, #16
 80082c4:	d002      	beq.n	80082cc <I2C_Master_ADDR+0x2e6>
 80082c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c8:	2b20      	cmp	r3, #32
 80082ca:	d107      	bne.n	80082dc <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80082f8:	e00b      	b.n	8008312 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082fa:	2300      	movs	r3, #0
 80082fc:	60bb      	str	r3, [r7, #8]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	60bb      	str	r3, [r7, #8]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	60bb      	str	r3, [r7, #8]
 800830e:	68bb      	ldr	r3, [r7, #8]
}
 8008310:	e7ff      	b.n	8008312 <I2C_Master_ADDR+0x32c>
 8008312:	bf00      	nop
 8008314:	3744      	adds	r7, #68	; 0x44
 8008316:	46bd      	mov	sp, r7
 8008318:	bc80      	pop	{r7}
 800831a:	4770      	bx	lr

0800831c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800832a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008330:	b29b      	uxth	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d02b      	beq.n	800838e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008350:	b29b      	uxth	r3, r3
 8008352:	3b01      	subs	r3, #1
 8008354:	b29a      	uxth	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800835e:	b29b      	uxth	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	d114      	bne.n	800838e <I2C_SlaveTransmit_TXE+0x72>
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	2b29      	cmp	r3, #41	; 0x29
 8008368:	d111      	bne.n	800838e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008378:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2221      	movs	r2, #33	; 0x21
 800837e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2228      	movs	r2, #40	; 0x28
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff fa03 	bl	8007794 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800838e:	bf00      	nop
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d011      	beq.n	80083cc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	781a      	ldrb	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	3b01      	subs	r3, #1
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bc80      	pop	{r7}
 80083d4:	4770      	bx	lr

080083d6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d02c      	beq.n	800844a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691a      	ldr	r2, [r3, #16]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800840c:	b29b      	uxth	r3, r3
 800840e:	3b01      	subs	r3, #1
 8008410:	b29a      	uxth	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800841a:	b29b      	uxth	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d114      	bne.n	800844a <I2C_SlaveReceive_RXNE+0x74>
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	2b2a      	cmp	r3, #42	; 0x2a
 8008424:	d111      	bne.n	800844a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008434:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2222      	movs	r2, #34	; 0x22
 800843a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2228      	movs	r2, #40	; 0x28
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff f9ae 	bl	80077a6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800844a:	bf00      	nop
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845e:	b29b      	uxth	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d012      	beq.n	800848a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691a      	ldr	r2, [r3, #16]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008480:	b29b      	uxth	r3, r3
 8008482:	3b01      	subs	r3, #1
 8008484:	b29a      	uxth	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800848a:	bf00      	nop
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	bc80      	pop	{r7}
 8008492:	4770      	bx	lr

08008494 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80084ae:	2b28      	cmp	r3, #40	; 0x28
 80084b0:	d127      	bne.n	8008502 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084c0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	089b      	lsrs	r3, r3, #2
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80084ce:	2301      	movs	r3, #1
 80084d0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	09db      	lsrs	r3, r3, #7
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d103      	bne.n	80084e6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	81bb      	strh	r3, [r7, #12]
 80084e4:	e002      	b.n	80084ec <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80084f4:	89ba      	ldrh	r2, [r7, #12]
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7ff f95c 	bl	80077b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008500:	e00e      	b.n	8008520 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008502:	2300      	movs	r3, #0
 8008504:	60bb      	str	r3, [r7, #8]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	60bb      	str	r3, [r7, #8]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	60bb      	str	r3, [r7, #8]
 8008516:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008520:	bf00      	nop
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008536:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008546:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008548:	2300      	movs	r3, #0
 800854a:	60bb      	str	r3, [r7, #8]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	60bb      	str	r3, [r7, #8]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008574:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008584:	d172      	bne.n	800866c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	2b22      	cmp	r3, #34	; 0x22
 800858a:	d002      	beq.n	8008592 <I2C_Slave_STOPF+0x6a>
 800858c:	7bfb      	ldrb	r3, [r7, #15]
 800858e:	2b2a      	cmp	r3, #42	; 0x2a
 8008590:	d135      	bne.n	80085fe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	b29a      	uxth	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d005      	beq.n	80085b6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ae:	f043 0204 	orr.w	r2, r3, #4
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fa40 	bl	8006a50 <HAL_DMA_GetState>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d049      	beq.n	800866a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	4a69      	ldr	r2, [pc, #420]	; (8008780 <I2C_Slave_STOPF+0x258>)
 80085dc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fd fef0 	bl	80063c8 <HAL_DMA_Abort_IT>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d03d      	beq.n	800866a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80085f8:	4610      	mov	r0, r2
 80085fa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80085fc:	e035      	b.n	800866a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	b29a      	uxth	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008610:	b29b      	uxth	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d005      	beq.n	8008622 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	f043 0204 	orr.w	r2, r3, #4
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008630:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008636:	4618      	mov	r0, r3
 8008638:	f7fe fa0a 	bl	8006a50 <HAL_DMA_GetState>
 800863c:	4603      	mov	r3, r0
 800863e:	2b01      	cmp	r3, #1
 8008640:	d014      	beq.n	800866c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008646:	4a4e      	ldr	r2, [pc, #312]	; (8008780 <I2C_Slave_STOPF+0x258>)
 8008648:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864e:	4618      	mov	r0, r3
 8008650:	f7fd feba 	bl	80063c8 <HAL_DMA_Abort_IT>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d008      	beq.n	800866c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008664:	4610      	mov	r0, r2
 8008666:	4798      	blx	r3
 8008668:	e000      	b.n	800866c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800866a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008670:	b29b      	uxth	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d03e      	beq.n	80086f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b04      	cmp	r3, #4
 8008682:	d112      	bne.n	80086aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	691a      	ldr	r2, [r3, #16]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	b2d2      	uxtb	r2, r2
 8008690:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b4:	2b40      	cmp	r3, #64	; 0x40
 80086b6:	d112      	bne.n	80086de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691a      	ldr	r2, [r3, #16]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c2:	b2d2      	uxtb	r2, r2
 80086c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ca:	1c5a      	adds	r2, r3, #1
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	3b01      	subs	r3, #1
 80086d8:	b29a      	uxth	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ec:	f043 0204 	orr.w	r2, r3, #4
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f8b3 	bl	8008868 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008702:	e039      	b.n	8008778 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	2b2a      	cmp	r3, #42	; 0x2a
 8008708:	d109      	bne.n	800871e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2228      	movs	r2, #40	; 0x28
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff f844 	bl	80077a6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b28      	cmp	r3, #40	; 0x28
 8008728:	d111      	bne.n	800874e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a15      	ldr	r2, [pc, #84]	; (8008784 <I2C_Slave_STOPF+0x25c>)
 800872e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2220      	movs	r2, #32
 800873a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7ff f843 	bl	80077d2 <HAL_I2C_ListenCpltCallback>
}
 800874c:	e014      	b.n	8008778 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008752:	2b22      	cmp	r3, #34	; 0x22
 8008754:	d002      	beq.n	800875c <I2C_Slave_STOPF+0x234>
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	2b22      	cmp	r3, #34	; 0x22
 800875a:	d10d      	bne.n	8008778 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2220      	movs	r2, #32
 8008766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff f817 	bl	80077a6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008778:	bf00      	nop
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	08008acd 	.word	0x08008acd
 8008784:	ffff0000 	.word	0xffff0000

08008788 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008796:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d002      	beq.n	80087aa <I2C_Slave_AF+0x22>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b20      	cmp	r3, #32
 80087a8:	d129      	bne.n	80087fe <I2C_Slave_AF+0x76>
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	2b28      	cmp	r3, #40	; 0x28
 80087ae:	d126      	bne.n	80087fe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a2c      	ldr	r2, [pc, #176]	; (8008864 <I2C_Slave_AF+0xdc>)
 80087b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087c4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087ce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087de:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2220      	movs	r2, #32
 80087ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7fe ffeb 	bl	80077d2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80087fc:	e02e      	b.n	800885c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
 8008800:	2b21      	cmp	r3, #33	; 0x21
 8008802:	d126      	bne.n	8008852 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a17      	ldr	r2, [pc, #92]	; (8008864 <I2C_Slave_AF+0xdc>)
 8008808:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2221      	movs	r2, #33	; 0x21
 800880e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2220      	movs	r2, #32
 8008814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800882e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008838:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008848:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7fe ffa2 	bl	8007794 <HAL_I2C_SlaveTxCpltCallback>
}
 8008850:	e004      	b.n	800885c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800885a:	615a      	str	r2, [r3, #20]
}
 800885c:	bf00      	nop
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	ffff0000 	.word	0xffff0000

08008868 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008876:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800887e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008880:	7bbb      	ldrb	r3, [r7, #14]
 8008882:	2b10      	cmp	r3, #16
 8008884:	d002      	beq.n	800888c <I2C_ITError+0x24>
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	2b40      	cmp	r3, #64	; 0x40
 800888a:	d10a      	bne.n	80088a2 <I2C_ITError+0x3a>
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	2b22      	cmp	r3, #34	; 0x22
 8008890:	d107      	bne.n	80088a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80088a8:	2b28      	cmp	r3, #40	; 0x28
 80088aa:	d107      	bne.n	80088bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2228      	movs	r2, #40	; 0x28
 80088b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80088ba:	e015      	b.n	80088e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ca:	d00a      	beq.n	80088e2 <I2C_ITError+0x7a>
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	2b60      	cmp	r3, #96	; 0x60
 80088d0:	d007      	beq.n	80088e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088f6:	d161      	bne.n	80089bc <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008906:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008910:	2b01      	cmp	r3, #1
 8008912:	d020      	beq.n	8008956 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008918:	4a6a      	ldr	r2, [pc, #424]	; (8008ac4 <I2C_ITError+0x25c>)
 800891a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008920:	4618      	mov	r0, r3
 8008922:	f7fd fd51 	bl	80063c8 <HAL_DMA_Abort_IT>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 8089 	beq.w	8008a40 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0201 	bic.w	r2, r2, #1
 800893c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2220      	movs	r2, #32
 8008942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
 8008954:	e074      	b.n	8008a40 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895a:	4a5a      	ldr	r2, [pc, #360]	; (8008ac4 <I2C_ITError+0x25c>)
 800895c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008962:	4618      	mov	r0, r3
 8008964:	f7fd fd30 	bl	80063c8 <HAL_DMA_Abort_IT>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d068      	beq.n	8008a40 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008978:	2b40      	cmp	r3, #64	; 0x40
 800897a:	d10b      	bne.n	8008994 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	691a      	ldr	r2, [r3, #16]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	b2d2      	uxtb	r2, r2
 8008988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898e:	1c5a      	adds	r2, r3, #1
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 0201 	bic.w	r2, r2, #1
 80089a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089b6:	4610      	mov	r0, r2
 80089b8:	4798      	blx	r3
 80089ba:	e041      	b.n	8008a40 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b60      	cmp	r3, #96	; 0x60
 80089c6:	d125      	bne.n	8008a14 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2220      	movs	r2, #32
 80089cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e0:	2b40      	cmp	r3, #64	; 0x40
 80089e2:	d10b      	bne.n	80089fc <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	691a      	ldr	r2, [r3, #16]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	b2d2      	uxtb	r2, r2
 80089f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	1c5a      	adds	r2, r3, #1
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 0201 	bic.w	r2, r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7fb fe53 	bl	80046b8 <HAL_I2C_AbortCpltCallback>
 8008a12:	e015      	b.n	8008a40 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1e:	2b40      	cmp	r3, #64	; 0x40
 8008a20:	d10b      	bne.n	8008a3a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	691a      	ldr	r2, [r3, #16]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2c:	b2d2      	uxtb	r2, r2
 8008a2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	1c5a      	adds	r2, r3, #1
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7fb fe1c 	bl	8004678 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10e      	bne.n	8008a6e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d109      	bne.n	8008a6e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d104      	bne.n	8008a6e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d007      	beq.n	8008a7e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a7c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a84:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	f003 0304 	and.w	r3, r3, #4
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d113      	bne.n	8008aba <I2C_ITError+0x252>
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	2b28      	cmp	r3, #40	; 0x28
 8008a96:	d110      	bne.n	8008aba <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a0b      	ldr	r2, [pc, #44]	; (8008ac8 <I2C_ITError+0x260>)
 8008a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7fe fe8c 	bl	80077d2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008aba:	bf00      	nop
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	08008acd 	.word	0x08008acd
 8008ac8:	ffff0000 	.word	0xffff0000

08008acc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008ae6:	4b4b      	ldr	r3, [pc, #300]	; (8008c14 <I2C_DMAAbort+0x148>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	08db      	lsrs	r3, r3, #3
 8008aec:	4a4a      	ldr	r2, [pc, #296]	; (8008c18 <I2C_DMAAbort+0x14c>)
 8008aee:	fba2 2303 	umull	r2, r3, r2, r3
 8008af2:	0a1a      	lsrs	r2, r3, #8
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	00da      	lsls	r2, r3, #3
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0a:	f043 0220 	orr.w	r2, r3, #32
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008b12:	e00a      	b.n	8008b2a <I2C_DMAAbort+0x5e>
    }
    count--;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3b01      	subs	r3, #1
 8008b18:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b28:	d0ea      	beq.n	8008b00 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b36:	2200      	movs	r2, #0
 8008b38:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	2200      	movs	r2, #0
 8008b48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b58:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d003      	beq.n	8008b80 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f022 0201 	bic.w	r2, r2, #1
 8008b8e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b60      	cmp	r3, #96	; 0x60
 8008b9a:	d10e      	bne.n	8008bba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008bb2:	6978      	ldr	r0, [r7, #20]
 8008bb4:	f7fb fd80 	bl	80046b8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008bb8:	e027      	b.n	8008c0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008bba:	7cfb      	ldrb	r3, [r7, #19]
 8008bbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008bc0:	2b28      	cmp	r3, #40	; 0x28
 8008bc2:	d117      	bne.n	8008bf4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f042 0201 	orr.w	r2, r2, #1
 8008bd2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008be2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2200      	movs	r2, #0
 8008be8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2228      	movs	r2, #40	; 0x28
 8008bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008bf2:	e007      	b.n	8008c04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008c04:	6978      	ldr	r0, [r7, #20]
 8008c06:	f7fb fd37 	bl	8004678 <HAL_I2C_ErrorCallback>
}
 8008c0a:	bf00      	nop
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20000054 	.word	0x20000054
 8008c18:	14f8b589 	.word	0x14f8b589

08008c1c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008c28:	4b13      	ldr	r3, [pc, #76]	; (8008c78 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	08db      	lsrs	r3, r3, #3
 8008c2e:	4a13      	ldr	r2, [pc, #76]	; (8008c7c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008c30:	fba2 2303 	umull	r2, r3, r2, r3
 8008c34:	0a1a      	lsrs	r2, r3, #8
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d107      	bne.n	8008c5a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4e:	f043 0220 	orr.w	r2, r3, #32
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e008      	b.n	8008c6c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c68:	d0e9      	beq.n	8008c3e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3714      	adds	r7, #20
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bc80      	pop	{r7}
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	20000054 	.word	0x20000054
 8008c7c:	14f8b589 	.word	0x14f8b589

08008c80 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008c90:	d103      	bne.n	8008c9a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c98:	e007      	b.n	8008caa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008ca2:	d102      	bne.n	8008caa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2208      	movs	r2, #8
 8008ca8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008caa:	bf00      	nop
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bc80      	pop	{r7}
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008cb8:	4b03      	ldr	r3, [pc, #12]	; (8008cc8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8008cba:	2201      	movs	r2, #1
 8008cbc:	601a      	str	r2, [r3, #0]
}
 8008cbe:	bf00      	nop
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bc80      	pop	{r7}
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	420e0020 	.word	0x420e0020

08008ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e304      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0301 	and.w	r3, r3, #1
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 8087 	beq.w	8008dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008cec:	4b92      	ldr	r3, [pc, #584]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f003 030c 	and.w	r3, r3, #12
 8008cf4:	2b04      	cmp	r3, #4
 8008cf6:	d00c      	beq.n	8008d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008cf8:	4b8f      	ldr	r3, [pc, #572]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f003 030c 	and.w	r3, r3, #12
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d112      	bne.n	8008d2a <HAL_RCC_OscConfig+0x5e>
 8008d04:	4b8c      	ldr	r3, [pc, #560]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d10:	d10b      	bne.n	8008d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d12:	4b89      	ldr	r3, [pc, #548]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d06c      	beq.n	8008df8 <HAL_RCC_OscConfig+0x12c>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d168      	bne.n	8008df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e2de      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d32:	d106      	bne.n	8008d42 <HAL_RCC_OscConfig+0x76>
 8008d34:	4b80      	ldr	r3, [pc, #512]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a7f      	ldr	r2, [pc, #508]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d3e:	6013      	str	r3, [r2, #0]
 8008d40:	e02e      	b.n	8008da0 <HAL_RCC_OscConfig+0xd4>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10c      	bne.n	8008d64 <HAL_RCC_OscConfig+0x98>
 8008d4a:	4b7b      	ldr	r3, [pc, #492]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a7a      	ldr	r2, [pc, #488]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d54:	6013      	str	r3, [r2, #0]
 8008d56:	4b78      	ldr	r3, [pc, #480]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a77      	ldr	r2, [pc, #476]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	e01d      	b.n	8008da0 <HAL_RCC_OscConfig+0xd4>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d6c:	d10c      	bne.n	8008d88 <HAL_RCC_OscConfig+0xbc>
 8008d6e:	4b72      	ldr	r3, [pc, #456]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a71      	ldr	r2, [pc, #452]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	4b6f      	ldr	r3, [pc, #444]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a6e      	ldr	r2, [pc, #440]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	e00b      	b.n	8008da0 <HAL_RCC_OscConfig+0xd4>
 8008d88:	4b6b      	ldr	r3, [pc, #428]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a6a      	ldr	r2, [pc, #424]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d92:	6013      	str	r3, [r2, #0]
 8008d94:	4b68      	ldr	r3, [pc, #416]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a67      	ldr	r2, [pc, #412]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d013      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008da8:	f7fd f914 	bl	8005fd4 <HAL_GetTick>
 8008dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dae:	e008      	b.n	8008dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008db0:	f7fd f910 	bl	8005fd4 <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	2b64      	cmp	r3, #100	; 0x64
 8008dbc:	d901      	bls.n	8008dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e292      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dc2:	4b5d      	ldr	r3, [pc, #372]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d0f0      	beq.n	8008db0 <HAL_RCC_OscConfig+0xe4>
 8008dce:	e014      	b.n	8008dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dd0:	f7fd f900 	bl	8005fd4 <HAL_GetTick>
 8008dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dd6:	e008      	b.n	8008dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dd8:	f7fd f8fc 	bl	8005fd4 <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	2b64      	cmp	r3, #100	; 0x64
 8008de4:	d901      	bls.n	8008dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e27e      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dea:	4b53      	ldr	r3, [pc, #332]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1f0      	bne.n	8008dd8 <HAL_RCC_OscConfig+0x10c>
 8008df6:	e000      	b.n	8008dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d063      	beq.n	8008ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e06:	4b4c      	ldr	r3, [pc, #304]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f003 030c 	and.w	r3, r3, #12
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008e12:	4b49      	ldr	r3, [pc, #292]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f003 030c 	and.w	r3, r3, #12
 8008e1a:	2b08      	cmp	r3, #8
 8008e1c:	d11c      	bne.n	8008e58 <HAL_RCC_OscConfig+0x18c>
 8008e1e:	4b46      	ldr	r3, [pc, #280]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d116      	bne.n	8008e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e2a:	4b43      	ldr	r3, [pc, #268]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0302 	and.w	r3, r3, #2
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d005      	beq.n	8008e42 <HAL_RCC_OscConfig+0x176>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d001      	beq.n	8008e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e252      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e42:	4b3d      	ldr	r3, [pc, #244]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	4939      	ldr	r1, [pc, #228]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e56:	e03a      	b.n	8008ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d020      	beq.n	8008ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e60:	4b36      	ldr	r3, [pc, #216]	; (8008f3c <HAL_RCC_OscConfig+0x270>)
 8008e62:	2201      	movs	r2, #1
 8008e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e66:	f7fd f8b5 	bl	8005fd4 <HAL_GetTick>
 8008e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e6c:	e008      	b.n	8008e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e6e:	f7fd f8b1 	bl	8005fd4 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d901      	bls.n	8008e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e233      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e80:	4b2d      	ldr	r3, [pc, #180]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d0f0      	beq.n	8008e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e8c:	4b2a      	ldr	r3, [pc, #168]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	00db      	lsls	r3, r3, #3
 8008e9a:	4927      	ldr	r1, [pc, #156]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	600b      	str	r3, [r1, #0]
 8008ea0:	e015      	b.n	8008ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ea2:	4b26      	ldr	r3, [pc, #152]	; (8008f3c <HAL_RCC_OscConfig+0x270>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ea8:	f7fd f894 	bl	8005fd4 <HAL_GetTick>
 8008eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008eae:	e008      	b.n	8008ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008eb0:	f7fd f890 	bl	8005fd4 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d901      	bls.n	8008ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e212      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ec2:	4b1d      	ldr	r3, [pc, #116]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1f0      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0308 	and.w	r3, r3, #8
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d03a      	beq.n	8008f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d019      	beq.n	8008f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ee2:	4b17      	ldr	r3, [pc, #92]	; (8008f40 <HAL_RCC_OscConfig+0x274>)
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ee8:	f7fd f874 	bl	8005fd4 <HAL_GetTick>
 8008eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008eee:	e008      	b.n	8008f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ef0:	f7fd f870 	bl	8005fd4 <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d901      	bls.n	8008f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e1f2      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f02:	4b0d      	ldr	r3, [pc, #52]	; (8008f38 <HAL_RCC_OscConfig+0x26c>)
 8008f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0f0      	beq.n	8008ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008f0e:	2001      	movs	r0, #1
 8008f10:	f000 fc50 	bl	80097b4 <RCC_Delay>
 8008f14:	e01c      	b.n	8008f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f16:	4b0a      	ldr	r3, [pc, #40]	; (8008f40 <HAL_RCC_OscConfig+0x274>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f1c:	f7fd f85a 	bl	8005fd4 <HAL_GetTick>
 8008f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f22:	e00f      	b.n	8008f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f24:	f7fd f856 	bl	8005fd4 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d908      	bls.n	8008f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e1d8      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
 8008f36:	bf00      	nop
 8008f38:	40021000 	.word	0x40021000
 8008f3c:	42420000 	.word	0x42420000
 8008f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f44:	4b9b      	ldr	r3, [pc, #620]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8008f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e9      	bne.n	8008f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 80a6 	beq.w	80090aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f62:	4b94      	ldr	r3, [pc, #592]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10d      	bne.n	8008f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f6e:	4b91      	ldr	r3, [pc, #580]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	4a90      	ldr	r2, [pc, #576]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8008f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f78:	61d3      	str	r3, [r2, #28]
 8008f7a:	4b8e      	ldr	r3, [pc, #568]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f82:	60bb      	str	r3, [r7, #8]
 8008f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f86:	2301      	movs	r3, #1
 8008f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f8a:	4b8b      	ldr	r3, [pc, #556]	; (80091b8 <HAL_RCC_OscConfig+0x4ec>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d118      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f96:	4b88      	ldr	r3, [pc, #544]	; (80091b8 <HAL_RCC_OscConfig+0x4ec>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a87      	ldr	r2, [pc, #540]	; (80091b8 <HAL_RCC_OscConfig+0x4ec>)
 8008f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fa2:	f7fd f817 	bl	8005fd4 <HAL_GetTick>
 8008fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fa8:	e008      	b.n	8008fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008faa:	f7fd f813 	bl	8005fd4 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	2b64      	cmp	r3, #100	; 0x64
 8008fb6:	d901      	bls.n	8008fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e195      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fbc:	4b7e      	ldr	r3, [pc, #504]	; (80091b8 <HAL_RCC_OscConfig+0x4ec>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0f0      	beq.n	8008faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d106      	bne.n	8008fde <HAL_RCC_OscConfig+0x312>
 8008fd0:	4b78      	ldr	r3, [pc, #480]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	4a77      	ldr	r2, [pc, #476]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8008fd6:	f043 0301 	orr.w	r3, r3, #1
 8008fda:	6213      	str	r3, [r2, #32]
 8008fdc:	e02d      	b.n	800903a <HAL_RCC_OscConfig+0x36e>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10c      	bne.n	8009000 <HAL_RCC_OscConfig+0x334>
 8008fe6:	4b73      	ldr	r3, [pc, #460]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	4a72      	ldr	r2, [pc, #456]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8008fec:	f023 0301 	bic.w	r3, r3, #1
 8008ff0:	6213      	str	r3, [r2, #32]
 8008ff2:	4b70      	ldr	r3, [pc, #448]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	4a6f      	ldr	r2, [pc, #444]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8008ff8:	f023 0304 	bic.w	r3, r3, #4
 8008ffc:	6213      	str	r3, [r2, #32]
 8008ffe:	e01c      	b.n	800903a <HAL_RCC_OscConfig+0x36e>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	2b05      	cmp	r3, #5
 8009006:	d10c      	bne.n	8009022 <HAL_RCC_OscConfig+0x356>
 8009008:	4b6a      	ldr	r3, [pc, #424]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	4a69      	ldr	r2, [pc, #420]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 800900e:	f043 0304 	orr.w	r3, r3, #4
 8009012:	6213      	str	r3, [r2, #32]
 8009014:	4b67      	ldr	r3, [pc, #412]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	4a66      	ldr	r2, [pc, #408]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 800901a:	f043 0301 	orr.w	r3, r3, #1
 800901e:	6213      	str	r3, [r2, #32]
 8009020:	e00b      	b.n	800903a <HAL_RCC_OscConfig+0x36e>
 8009022:	4b64      	ldr	r3, [pc, #400]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	4a63      	ldr	r2, [pc, #396]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8009028:	f023 0301 	bic.w	r3, r3, #1
 800902c:	6213      	str	r3, [r2, #32]
 800902e:	4b61      	ldr	r3, [pc, #388]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	4a60      	ldr	r2, [pc, #384]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8009034:	f023 0304 	bic.w	r3, r3, #4
 8009038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d015      	beq.n	800906e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009042:	f7fc ffc7 	bl	8005fd4 <HAL_GetTick>
 8009046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009048:	e00a      	b.n	8009060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800904a:	f7fc ffc3 	bl	8005fd4 <HAL_GetTick>
 800904e:	4602      	mov	r2, r0
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	f241 3288 	movw	r2, #5000	; 0x1388
 8009058:	4293      	cmp	r3, r2
 800905a:	d901      	bls.n	8009060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e143      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009060:	4b54      	ldr	r3, [pc, #336]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	f003 0302 	and.w	r3, r3, #2
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0ee      	beq.n	800904a <HAL_RCC_OscConfig+0x37e>
 800906c:	e014      	b.n	8009098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800906e:	f7fc ffb1 	bl	8005fd4 <HAL_GetTick>
 8009072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009074:	e00a      	b.n	800908c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009076:	f7fc ffad 	bl	8005fd4 <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	f241 3288 	movw	r2, #5000	; 0x1388
 8009084:	4293      	cmp	r3, r2
 8009086:	d901      	bls.n	800908c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e12d      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800908c:	4b49      	ldr	r3, [pc, #292]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	f003 0302 	and.w	r3, r3, #2
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1ee      	bne.n	8009076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009098:	7dfb      	ldrb	r3, [r7, #23]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d105      	bne.n	80090aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800909e:	4b45      	ldr	r3, [pc, #276]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	4a44      	ldr	r2, [pc, #272]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 80090a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090a8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 808c 	beq.w	80091cc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80090b4:	4b3f      	ldr	r3, [pc, #252]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090c0:	d10e      	bne.n	80090e0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80090c2:	4b3c      	ldr	r3, [pc, #240]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80090ca:	2b08      	cmp	r3, #8
 80090cc:	d108      	bne.n	80090e0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80090ce:	4b39      	ldr	r3, [pc, #228]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 80090d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80090d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090da:	d101      	bne.n	80090e0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e103      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d14e      	bne.n	8009186 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80090e8:	4b32      	ldr	r3, [pc, #200]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d009      	beq.n	8009108 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80090f4:	4b2f      	ldr	r3, [pc, #188]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8009100:	429a      	cmp	r2, r3
 8009102:	d001      	beq.n	8009108 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e0ef      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8009108:	4b2c      	ldr	r3, [pc, #176]	; (80091bc <HAL_RCC_OscConfig+0x4f0>)
 800910a:	2200      	movs	r2, #0
 800910c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800910e:	f7fc ff61 	bl	8005fd4 <HAL_GetTick>
 8009112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8009114:	e008      	b.n	8009128 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009116:	f7fc ff5d 	bl	8005fd4 <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	2b64      	cmp	r3, #100	; 0x64
 8009122:	d901      	bls.n	8009128 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e0df      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8009128:	4b22      	ldr	r3, [pc, #136]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1f0      	bne.n	8009116 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8009134:	4b1f      	ldr	r3, [pc, #124]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8009136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009140:	491c      	ldr	r1, [pc, #112]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8009142:	4313      	orrs	r3, r2
 8009144:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8009146:	4b1b      	ldr	r3, [pc, #108]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8009148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009152:	4918      	ldr	r1, [pc, #96]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8009154:	4313      	orrs	r3, r2
 8009156:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8009158:	4b18      	ldr	r3, [pc, #96]	; (80091bc <HAL_RCC_OscConfig+0x4f0>)
 800915a:	2201      	movs	r2, #1
 800915c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800915e:	f7fc ff39 	bl	8005fd4 <HAL_GetTick>
 8009162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8009164:	e008      	b.n	8009178 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009166:	f7fc ff35 	bl	8005fd4 <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	2b64      	cmp	r3, #100	; 0x64
 8009172:	d901      	bls.n	8009178 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e0b7      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8009178:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0f0      	beq.n	8009166 <HAL_RCC_OscConfig+0x49a>
 8009184:	e022      	b.n	80091cc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8009186:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 8009188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918a:	4a0a      	ldr	r2, [pc, #40]	; (80091b4 <HAL_RCC_OscConfig+0x4e8>)
 800918c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009190:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8009192:	4b0a      	ldr	r3, [pc, #40]	; (80091bc <HAL_RCC_OscConfig+0x4f0>)
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009198:	f7fc ff1c 	bl	8005fd4 <HAL_GetTick>
 800919c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800919e:	e00f      	b.n	80091c0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091a0:	f7fc ff18 	bl	8005fd4 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b64      	cmp	r3, #100	; 0x64
 80091ac:	d908      	bls.n	80091c0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e09a      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
 80091b2:	bf00      	nop
 80091b4:	40021000 	.word	0x40021000
 80091b8:	40007000 	.word	0x40007000
 80091bc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80091c0:	4b4b      	ldr	r3, [pc, #300]	; (80092f0 <HAL_RCC_OscConfig+0x624>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1e9      	bne.n	80091a0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a1b      	ldr	r3, [r3, #32]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 8088 	beq.w	80092e6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091d6:	4b46      	ldr	r3, [pc, #280]	; (80092f0 <HAL_RCC_OscConfig+0x624>)
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f003 030c 	and.w	r3, r3, #12
 80091de:	2b08      	cmp	r3, #8
 80091e0:	d068      	beq.n	80092b4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d14d      	bne.n	8009286 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091ea:	4b42      	ldr	r3, [pc, #264]	; (80092f4 <HAL_RCC_OscConfig+0x628>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091f0:	f7fc fef0 	bl	8005fd4 <HAL_GetTick>
 80091f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80091f6:	e008      	b.n	800920a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091f8:	f7fc feec 	bl	8005fd4 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	2b02      	cmp	r3, #2
 8009204:	d901      	bls.n	800920a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	e06e      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800920a:	4b39      	ldr	r3, [pc, #228]	; (80092f0 <HAL_RCC_OscConfig+0x624>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1f0      	bne.n	80091f8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800921e:	d10f      	bne.n	8009240 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8009220:	4b33      	ldr	r3, [pc, #204]	; (80092f0 <HAL_RCC_OscConfig+0x624>)
 8009222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	4931      	ldr	r1, [pc, #196]	; (80092f0 <HAL_RCC_OscConfig+0x624>)
 800922a:	4313      	orrs	r3, r2
 800922c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800922e:	4b30      	ldr	r3, [pc, #192]	; (80092f0 <HAL_RCC_OscConfig+0x624>)
 8009230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009232:	f023 020f 	bic.w	r2, r3, #15
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	492d      	ldr	r1, [pc, #180]	; (80092f0 <HAL_RCC_OscConfig+0x624>)
 800923c:	4313      	orrs	r3, r2
 800923e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009240:	4b2b      	ldr	r3, [pc, #172]	; (80092f0 <HAL_RCC_OscConfig+0x624>)
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009250:	430b      	orrs	r3, r1
 8009252:	4927      	ldr	r1, [pc, #156]	; (80092f0 <HAL_RCC_OscConfig+0x624>)
 8009254:	4313      	orrs	r3, r2
 8009256:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009258:	4b26      	ldr	r3, [pc, #152]	; (80092f4 <HAL_RCC_OscConfig+0x628>)
 800925a:	2201      	movs	r2, #1
 800925c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800925e:	f7fc feb9 	bl	8005fd4 <HAL_GetTick>
 8009262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009264:	e008      	b.n	8009278 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009266:	f7fc feb5 	bl	8005fd4 <HAL_GetTick>
 800926a:	4602      	mov	r2, r0
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	2b02      	cmp	r3, #2
 8009272:	d901      	bls.n	8009278 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e037      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009278:	4b1d      	ldr	r3, [pc, #116]	; (80092f0 <HAL_RCC_OscConfig+0x624>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d0f0      	beq.n	8009266 <HAL_RCC_OscConfig+0x59a>
 8009284:	e02f      	b.n	80092e6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009286:	4b1b      	ldr	r3, [pc, #108]	; (80092f4 <HAL_RCC_OscConfig+0x628>)
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800928c:	f7fc fea2 	bl	8005fd4 <HAL_GetTick>
 8009290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009292:	e008      	b.n	80092a6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009294:	f7fc fe9e 	bl	8005fd4 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d901      	bls.n	80092a6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	e020      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80092a6:	4b12      	ldr	r3, [pc, #72]	; (80092f0 <HAL_RCC_OscConfig+0x624>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1f0      	bne.n	8009294 <HAL_RCC_OscConfig+0x5c8>
 80092b2:	e018      	b.n	80092e6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a1b      	ldr	r3, [r3, #32]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d101      	bne.n	80092c0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e013      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80092c0:	4b0b      	ldr	r3, [pc, #44]	; (80092f0 <HAL_RCC_OscConfig+0x624>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d106      	bne.n	80092e2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092de:	429a      	cmp	r2, r3
 80092e0:	d001      	beq.n	80092e6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e000      	b.n	80092e8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3718      	adds	r7, #24
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	40021000 	.word	0x40021000
 80092f4:	42420060 	.word	0x42420060

080092f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e0d0      	b.n	80094ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800930c:	4b6a      	ldr	r3, [pc, #424]	; (80094b8 <HAL_RCC_ClockConfig+0x1c0>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0307 	and.w	r3, r3, #7
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	429a      	cmp	r2, r3
 8009318:	d910      	bls.n	800933c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800931a:	4b67      	ldr	r3, [pc, #412]	; (80094b8 <HAL_RCC_ClockConfig+0x1c0>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f023 0207 	bic.w	r2, r3, #7
 8009322:	4965      	ldr	r1, [pc, #404]	; (80094b8 <HAL_RCC_ClockConfig+0x1c0>)
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	4313      	orrs	r3, r2
 8009328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800932a:	4b63      	ldr	r3, [pc, #396]	; (80094b8 <HAL_RCC_ClockConfig+0x1c0>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0307 	and.w	r3, r3, #7
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	429a      	cmp	r2, r3
 8009336:	d001      	beq.n	800933c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	e0b8      	b.n	80094ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d020      	beq.n	800938a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d005      	beq.n	8009360 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009354:	4b59      	ldr	r3, [pc, #356]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	4a58      	ldr	r2, [pc, #352]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 800935a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800935e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0308 	and.w	r3, r3, #8
 8009368:	2b00      	cmp	r3, #0
 800936a:	d005      	beq.n	8009378 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800936c:	4b53      	ldr	r3, [pc, #332]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	4a52      	ldr	r2, [pc, #328]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 8009372:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009376:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009378:	4b50      	ldr	r3, [pc, #320]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	494d      	ldr	r1, [pc, #308]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 8009386:	4313      	orrs	r3, r2
 8009388:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	d040      	beq.n	8009418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d107      	bne.n	80093ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800939e:	4b47      	ldr	r3, [pc, #284]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d115      	bne.n	80093d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e07f      	b.n	80094ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d107      	bne.n	80093c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093b6:	4b41      	ldr	r3, [pc, #260]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d109      	bne.n	80093d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e073      	b.n	80094ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093c6:	4b3d      	ldr	r3, [pc, #244]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e06b      	b.n	80094ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80093d6:	4b39      	ldr	r3, [pc, #228]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f023 0203 	bic.w	r2, r3, #3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	4936      	ldr	r1, [pc, #216]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80093e8:	f7fc fdf4 	bl	8005fd4 <HAL_GetTick>
 80093ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ee:	e00a      	b.n	8009406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093f0:	f7fc fdf0 	bl	8005fd4 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80093fe:	4293      	cmp	r3, r2
 8009400:	d901      	bls.n	8009406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e053      	b.n	80094ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009406:	4b2d      	ldr	r3, [pc, #180]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	f003 020c 	and.w	r2, r3, #12
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	429a      	cmp	r2, r3
 8009416:	d1eb      	bne.n	80093f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009418:	4b27      	ldr	r3, [pc, #156]	; (80094b8 <HAL_RCC_ClockConfig+0x1c0>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	429a      	cmp	r2, r3
 8009424:	d210      	bcs.n	8009448 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009426:	4b24      	ldr	r3, [pc, #144]	; (80094b8 <HAL_RCC_ClockConfig+0x1c0>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f023 0207 	bic.w	r2, r3, #7
 800942e:	4922      	ldr	r1, [pc, #136]	; (80094b8 <HAL_RCC_ClockConfig+0x1c0>)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	4313      	orrs	r3, r2
 8009434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009436:	4b20      	ldr	r3, [pc, #128]	; (80094b8 <HAL_RCC_ClockConfig+0x1c0>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 0307 	and.w	r3, r3, #7
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	429a      	cmp	r2, r3
 8009442:	d001      	beq.n	8009448 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e032      	b.n	80094ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	2b00      	cmp	r3, #0
 8009452:	d008      	beq.n	8009466 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009454:	4b19      	ldr	r3, [pc, #100]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	4916      	ldr	r1, [pc, #88]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 8009462:	4313      	orrs	r3, r2
 8009464:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0308 	and.w	r3, r3, #8
 800946e:	2b00      	cmp	r3, #0
 8009470:	d009      	beq.n	8009486 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009472:	4b12      	ldr	r3, [pc, #72]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	00db      	lsls	r3, r3, #3
 8009480:	490e      	ldr	r1, [pc, #56]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 8009482:	4313      	orrs	r3, r2
 8009484:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009486:	f000 f821 	bl	80094cc <HAL_RCC_GetSysClockFreq>
 800948a:	4602      	mov	r2, r0
 800948c:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	091b      	lsrs	r3, r3, #4
 8009492:	f003 030f 	and.w	r3, r3, #15
 8009496:	490a      	ldr	r1, [pc, #40]	; (80094c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009498:	5ccb      	ldrb	r3, [r1, r3]
 800949a:	fa22 f303 	lsr.w	r3, r2, r3
 800949e:	4a09      	ldr	r2, [pc, #36]	; (80094c4 <HAL_RCC_ClockConfig+0x1cc>)
 80094a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80094a2:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <HAL_RCC_ClockConfig+0x1d0>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fc f968 	bl	800577c <HAL_InitTick>

  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	40022000 	.word	0x40022000
 80094bc:	40021000 	.word	0x40021000
 80094c0:	080148e0 	.word	0x080148e0
 80094c4:	20000054 	.word	0x20000054
 80094c8:	20000058 	.word	0x20000058

080094cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d0:	b09d      	sub	sp, #116	; 0x74
 80094d2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80094d4:	4b81      	ldr	r3, [pc, #516]	; (80096dc <HAL_RCC_GetSysClockFreq+0x210>)
 80094d6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80094da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094dc:	c407      	stmia	r4!, {r0, r1, r2}
 80094de:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80094e0:	4b7f      	ldr	r3, [pc, #508]	; (80096e0 <HAL_RCC_GetSysClockFreq+0x214>)
 80094e2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80094e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	667b      	str	r3, [r7, #100]	; 0x64
 80094f0:	2300      	movs	r3, #0
 80094f2:	663b      	str	r3, [r7, #96]	; 0x60
 80094f4:	2300      	movs	r3, #0
 80094f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094f8:	2300      	movs	r3, #0
 80094fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 80094fc:	2300      	movs	r3, #0
 80094fe:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8009500:	2300      	movs	r3, #0
 8009502:	65bb      	str	r3, [r7, #88]	; 0x58
 8009504:	2300      	movs	r3, #0
 8009506:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009508:	4b76      	ldr	r3, [pc, #472]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x218>)
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800950e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009510:	f003 030c 	and.w	r3, r3, #12
 8009514:	2b04      	cmp	r3, #4
 8009516:	d002      	beq.n	800951e <HAL_RCC_GetSysClockFreq+0x52>
 8009518:	2b08      	cmp	r3, #8
 800951a:	d003      	beq.n	8009524 <HAL_RCC_GetSysClockFreq+0x58>
 800951c:	e0d4      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800951e:	4b72      	ldr	r3, [pc, #456]	; (80096e8 <HAL_RCC_GetSysClockFreq+0x21c>)
 8009520:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8009522:	e0d4      	b.n	80096ce <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009526:	0c9b      	lsrs	r3, r3, #18
 8009528:	f003 030f 	and.w	r3, r3, #15
 800952c:	3340      	adds	r3, #64	; 0x40
 800952e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009532:	4413      	add	r3, r2
 8009534:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009538:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800953a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800953c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 80b9 	beq.w	80096b8 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8009546:	4b67      	ldr	r3, [pc, #412]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x218>)
 8009548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954a:	f003 030f 	and.w	r3, r3, #15
 800954e:	3340      	adds	r3, #64	; 0x40
 8009550:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009554:	4413      	add	r3, r2
 8009556:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800955a:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800955c:	4b61      	ldr	r3, [pc, #388]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x218>)
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009564:	2b00      	cmp	r3, #0
 8009566:	f000 8095 	beq.w	8009694 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800956a:	4b5e      	ldr	r3, [pc, #376]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x218>)
 800956c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956e:	091b      	lsrs	r3, r3, #4
 8009570:	f003 030f 	and.w	r3, r3, #15
 8009574:	3301      	adds	r3, #1
 8009576:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8009578:	4b5a      	ldr	r3, [pc, #360]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x218>)
 800957a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957c:	0a1b      	lsrs	r3, r3, #8
 800957e:	f003 030f 	and.w	r3, r3, #15
 8009582:	3302      	adds	r3, #2
 8009584:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8009586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009588:	2200      	movs	r2, #0
 800958a:	61bb      	str	r3, [r7, #24]
 800958c:	61fa      	str	r2, [r7, #28]
 800958e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009590:	2200      	movs	r2, #0
 8009592:	62bb      	str	r3, [r7, #40]	; 0x28
 8009594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009596:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800959a:	4622      	mov	r2, r4
 800959c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80095a0:	4684      	mov	ip, r0
 80095a2:	fb0c f202 	mul.w	r2, ip, r2
 80095a6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80095aa:	468c      	mov	ip, r1
 80095ac:	4618      	mov	r0, r3
 80095ae:	4621      	mov	r1, r4
 80095b0:	4603      	mov	r3, r0
 80095b2:	fb03 f30c 	mul.w	r3, r3, ip
 80095b6:	4413      	add	r3, r2
 80095b8:	4602      	mov	r2, r0
 80095ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095bc:	fba2 8901 	umull	r8, r9, r2, r1
 80095c0:	444b      	add	r3, r9
 80095c2:	4699      	mov	r9, r3
 80095c4:	4642      	mov	r2, r8
 80095c6:	464b      	mov	r3, r9
 80095c8:	f04f 0000 	mov.w	r0, #0
 80095cc:	f04f 0100 	mov.w	r1, #0
 80095d0:	0159      	lsls	r1, r3, #5
 80095d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80095d6:	0150      	lsls	r0, r2, #5
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	ebb2 0508 	subs.w	r5, r2, r8
 80095e0:	eb63 0609 	sbc.w	r6, r3, r9
 80095e4:	f04f 0200 	mov.w	r2, #0
 80095e8:	f04f 0300 	mov.w	r3, #0
 80095ec:	01b3      	lsls	r3, r6, #6
 80095ee:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 80095f2:	01aa      	lsls	r2, r5, #6
 80095f4:	ebb2 0a05 	subs.w	sl, r2, r5
 80095f8:	eb63 0b06 	sbc.w	fp, r3, r6
 80095fc:	f04f 0200 	mov.w	r2, #0
 8009600:	f04f 0300 	mov.w	r3, #0
 8009604:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009608:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800960c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009610:	4692      	mov	sl, r2
 8009612:	469b      	mov	fp, r3
 8009614:	eb1a 0308 	adds.w	r3, sl, r8
 8009618:	603b      	str	r3, [r7, #0]
 800961a:	eb4b 0309 	adc.w	r3, fp, r9
 800961e:	607b      	str	r3, [r7, #4]
 8009620:	f04f 0200 	mov.w	r2, #0
 8009624:	f04f 0300 	mov.w	r3, #0
 8009628:	e9d7 4500 	ldrd	r4, r5, [r7]
 800962c:	4629      	mov	r1, r5
 800962e:	024b      	lsls	r3, r1, #9
 8009630:	4620      	mov	r0, r4
 8009632:	4629      	mov	r1, r5
 8009634:	4604      	mov	r4, r0
 8009636:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800963a:	4601      	mov	r1, r0
 800963c:	024a      	lsls	r2, r1, #9
 800963e:	4610      	mov	r0, r2
 8009640:	4619      	mov	r1, r3
 8009642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009644:	2200      	movs	r2, #0
 8009646:	613b      	str	r3, [r7, #16]
 8009648:	617a      	str	r2, [r7, #20]
 800964a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800964c:	2200      	movs	r2, #0
 800964e:	60bb      	str	r3, [r7, #8]
 8009650:	60fa      	str	r2, [r7, #12]
 8009652:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009656:	4622      	mov	r2, r4
 8009658:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800965c:	4645      	mov	r5, r8
 800965e:	fb05 f202 	mul.w	r2, r5, r2
 8009662:	464e      	mov	r6, r9
 8009664:	4625      	mov	r5, r4
 8009666:	461c      	mov	r4, r3
 8009668:	4623      	mov	r3, r4
 800966a:	fb03 f306 	mul.w	r3, r3, r6
 800966e:	4413      	add	r3, r2
 8009670:	4622      	mov	r2, r4
 8009672:	4644      	mov	r4, r8
 8009674:	fba2 2404 	umull	r2, r4, r2, r4
 8009678:	627c      	str	r4, [r7, #36]	; 0x24
 800967a:	623a      	str	r2, [r7, #32]
 800967c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800967e:	4413      	add	r3, r2
 8009680:	627b      	str	r3, [r7, #36]	; 0x24
 8009682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009686:	f7f7 fde3 	bl	8001250 <__aeabi_uldivmod>
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	4613      	mov	r3, r2
 8009690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009692:	e007      	b.n	80096a4 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8009694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009696:	4a14      	ldr	r2, [pc, #80]	; (80096e8 <HAL_RCC_GetSysClockFreq+0x21c>)
 8009698:	fb03 f202 	mul.w	r2, r3, r2
 800969c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800969e:	fbb2 f3f3 	udiv	r3, r2, r3
 80096a2:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80096a4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80096a8:	461a      	mov	r2, r3
 80096aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d108      	bne.n	80096c2 <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 80096b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b2:	085b      	lsrs	r3, r3, #1
 80096b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096b6:	e004      	b.n	80096c2 <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80096b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096ba:	4a0c      	ldr	r2, [pc, #48]	; (80096ec <HAL_RCC_GetSysClockFreq+0x220>)
 80096bc:	fb02 f303 	mul.w	r3, r2, r3
 80096c0:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 80096c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096c4:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80096c6:	e002      	b.n	80096ce <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80096c8:	4b07      	ldr	r3, [pc, #28]	; (80096e8 <HAL_RCC_GetSysClockFreq+0x21c>)
 80096ca:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80096cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80096ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3774      	adds	r7, #116	; 0x74
 80096d4:	46bd      	mov	sp, r7
 80096d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096da:	bf00      	nop
 80096dc:	08013c0c 	.word	0x08013c0c
 80096e0:	08013c1c 	.word	0x08013c1c
 80096e4:	40021000 	.word	0x40021000
 80096e8:	007a1200 	.word	0x007a1200
 80096ec:	003d0900 	.word	0x003d0900

080096f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096f4:	4b02      	ldr	r3, [pc, #8]	; (8009700 <HAL_RCC_GetHCLKFreq+0x10>)
 80096f6:	681b      	ldr	r3, [r3, #0]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr
 8009700:	20000054 	.word	0x20000054

08009704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009708:	f7ff fff2 	bl	80096f0 <HAL_RCC_GetHCLKFreq>
 800970c:	4602      	mov	r2, r0
 800970e:	4b05      	ldr	r3, [pc, #20]	; (8009724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	0a1b      	lsrs	r3, r3, #8
 8009714:	f003 0307 	and.w	r3, r3, #7
 8009718:	4903      	ldr	r1, [pc, #12]	; (8009728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800971a:	5ccb      	ldrb	r3, [r1, r3]
 800971c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009720:	4618      	mov	r0, r3
 8009722:	bd80      	pop	{r7, pc}
 8009724:	40021000 	.word	0x40021000
 8009728:	080148f0 	.word	0x080148f0

0800972c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009730:	f7ff ffde 	bl	80096f0 <HAL_RCC_GetHCLKFreq>
 8009734:	4602      	mov	r2, r0
 8009736:	4b05      	ldr	r3, [pc, #20]	; (800974c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	0adb      	lsrs	r3, r3, #11
 800973c:	f003 0307 	and.w	r3, r3, #7
 8009740:	4903      	ldr	r1, [pc, #12]	; (8009750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009742:	5ccb      	ldrb	r3, [r1, r3]
 8009744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009748:	4618      	mov	r0, r3
 800974a:	bd80      	pop	{r7, pc}
 800974c:	40021000 	.word	0x40021000
 8009750:	080148f0 	.word	0x080148f0

08009754 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	220f      	movs	r2, #15
 8009762:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009764:	4b11      	ldr	r3, [pc, #68]	; (80097ac <HAL_RCC_GetClockConfig+0x58>)
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	f003 0203 	and.w	r2, r3, #3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009770:	4b0e      	ldr	r3, [pc, #56]	; (80097ac <HAL_RCC_GetClockConfig+0x58>)
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800977c:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <HAL_RCC_GetClockConfig+0x58>)
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009788:	4b08      	ldr	r3, [pc, #32]	; (80097ac <HAL_RCC_GetClockConfig+0x58>)
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	08db      	lsrs	r3, r3, #3
 800978e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009796:	4b06      	ldr	r3, [pc, #24]	; (80097b0 <HAL_RCC_GetClockConfig+0x5c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0207 	and.w	r2, r3, #7
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80097a2:	bf00      	nop
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bc80      	pop	{r7}
 80097aa:	4770      	bx	lr
 80097ac:	40021000 	.word	0x40021000
 80097b0:	40022000 	.word	0x40022000

080097b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80097bc:	4b0a      	ldr	r3, [pc, #40]	; (80097e8 <RCC_Delay+0x34>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a0a      	ldr	r2, [pc, #40]	; (80097ec <RCC_Delay+0x38>)
 80097c2:	fba2 2303 	umull	r2, r3, r2, r3
 80097c6:	0a5b      	lsrs	r3, r3, #9
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	fb02 f303 	mul.w	r3, r2, r3
 80097ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80097d0:	bf00      	nop
  }
  while (Delay --);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	1e5a      	subs	r2, r3, #1
 80097d6:	60fa      	str	r2, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1f9      	bne.n	80097d0 <RCC_Delay+0x1c>
}
 80097dc:	bf00      	nop
 80097de:	bf00      	nop
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bc80      	pop	{r7}
 80097e6:	4770      	bx	lr
 80097e8:	20000054 	.word	0x20000054
 80097ec:	10624dd3 	.word	0x10624dd3

080097f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b088      	sub	sp, #32
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	617b      	str	r3, [r7, #20]
 80097fc:	2300      	movs	r3, #0
 80097fe:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	2b00      	cmp	r3, #0
 800980e:	d07d      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8009810:	2300      	movs	r3, #0
 8009812:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009814:	4b8b      	ldr	r3, [pc, #556]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10d      	bne.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009820:	4b88      	ldr	r3, [pc, #544]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009822:	69db      	ldr	r3, [r3, #28]
 8009824:	4a87      	ldr	r2, [pc, #540]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800982a:	61d3      	str	r3, [r2, #28]
 800982c:	4b85      	ldr	r3, [pc, #532]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800982e:	69db      	ldr	r3, [r3, #28]
 8009830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009834:	60fb      	str	r3, [r7, #12]
 8009836:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009838:	2301      	movs	r3, #1
 800983a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800983c:	4b82      	ldr	r3, [pc, #520]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009844:	2b00      	cmp	r3, #0
 8009846:	d118      	bne.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009848:	4b7f      	ldr	r3, [pc, #508]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a7e      	ldr	r2, [pc, #504]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800984e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009852:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009854:	f7fc fbbe 	bl	8005fd4 <HAL_GetTick>
 8009858:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800985a:	e008      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800985c:	f7fc fbba 	bl	8005fd4 <HAL_GetTick>
 8009860:	4602      	mov	r2, r0
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	2b64      	cmp	r3, #100	; 0x64
 8009868:	d901      	bls.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800986a:	2303      	movs	r3, #3
 800986c:	e0e5      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800986e:	4b76      	ldr	r3, [pc, #472]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0f0      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800987a:	4b72      	ldr	r3, [pc, #456]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009882:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d02e      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	429a      	cmp	r2, r3
 8009896:	d027      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009898:	4b6a      	ldr	r3, [pc, #424]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098a0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80098a2:	4b6a      	ldr	r3, [pc, #424]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80098a4:	2201      	movs	r2, #1
 80098a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80098a8:	4b68      	ldr	r3, [pc, #416]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80098ae:	4a65      	ldr	r2, [pc, #404]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d014      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098be:	f7fc fb89 	bl	8005fd4 <HAL_GetTick>
 80098c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098c4:	e00a      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098c6:	f7fc fb85 	bl	8005fd4 <HAL_GetTick>
 80098ca:	4602      	mov	r2, r0
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d901      	bls.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e0ae      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098dc:	4b59      	ldr	r3, [pc, #356]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d0ee      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098e8:	4b56      	ldr	r3, [pc, #344]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80098ea:	6a1b      	ldr	r3, [r3, #32]
 80098ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	4953      	ldr	r1, [pc, #332]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80098fa:	7efb      	ldrb	r3, [r7, #27]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d105      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009900:	4b50      	ldr	r3, [pc, #320]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	4a4f      	ldr	r2, [pc, #316]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800990a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 0302 	and.w	r3, r3, #2
 8009914:	2b00      	cmp	r3, #0
 8009916:	d008      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009918:	4b4a      	ldr	r3, [pc, #296]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	4947      	ldr	r1, [pc, #284]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009926:	4313      	orrs	r3, r2
 8009928:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0304 	and.w	r3, r3, #4
 8009932:	2b00      	cmp	r3, #0
 8009934:	d008      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8009936:	4b43      	ldr	r3, [pc, #268]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	4940      	ldr	r1, [pc, #256]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009944:	4313      	orrs	r3, r2
 8009946:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0308 	and.w	r3, r3, #8
 8009950:	2b00      	cmp	r3, #0
 8009952:	d008      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8009954:	4b3b      	ldr	r3, [pc, #236]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009958:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	4938      	ldr	r1, [pc, #224]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009962:	4313      	orrs	r3, r2
 8009964:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8009966:	4b37      	ldr	r3, [pc, #220]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d105      	bne.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8009972:	4b34      	ldr	r3, [pc, #208]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800997e:	2301      	movs	r3, #1
 8009980:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d148      	bne.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8009988:	4b2e      	ldr	r3, [pc, #184]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d138      	bne.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8009994:	4b2b      	ldr	r3, [pc, #172]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d009      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80099a0:	4b28      	ldr	r3, [pc, #160]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d001      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e042      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80099b4:	4b23      	ldr	r3, [pc, #140]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80099b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	4920      	ldr	r1, [pc, #128]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80099c6:	4b1f      	ldr	r3, [pc, #124]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80099c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ca:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	491c      	ldr	r1, [pc, #112]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80099d4:	4313      	orrs	r3, r2
 80099d6:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80099d8:	4b1d      	ldr	r3, [pc, #116]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80099da:	2201      	movs	r2, #1
 80099dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099de:	f7fc faf9 	bl	8005fd4 <HAL_GetTick>
 80099e2:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80099e4:	e008      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80099e6:	f7fc faf5 	bl	8005fd4 <HAL_GetTick>
 80099ea:	4602      	mov	r2, r0
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	2b64      	cmp	r3, #100	; 0x64
 80099f2:	d901      	bls.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e020      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80099f8:	4b12      	ldr	r3, [pc, #72]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d0f0      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009a04:	e009      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8009a06:	4b0f      	ldr	r3, [pc, #60]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d001      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e00f      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0310 	and.w	r3, r3, #16
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d008      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a26:	4b07      	ldr	r3, [pc, #28]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	69db      	ldr	r3, [r3, #28]
 8009a32:	4904      	ldr	r1, [pc, #16]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009a34:	4313      	orrs	r3, r2
 8009a36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3720      	adds	r7, #32
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	40021000 	.word	0x40021000
 8009a48:	40007000 	.word	0x40007000
 8009a4c:	42420440 	.word	0x42420440
 8009a50:	42420070 	.word	0x42420070

08009a54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009a54:	b590      	push	{r4, r7, lr}
 8009a56:	b093      	sub	sp, #76	; 0x4c
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8009a5c:	4ba8      	ldr	r3, [pc, #672]	; (8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8009a5e:	f107 0418 	add.w	r4, r7, #24
 8009a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009a64:	c407      	stmia	r4!, {r0, r1, r2}
 8009a66:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8009a68:	4ba6      	ldr	r3, [pc, #664]	; (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8009a6a:	f107 0408 	add.w	r4, r7, #8
 8009a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009a70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8009a74:	2300      	movs	r3, #0
 8009a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a78:	2300      	movs	r3, #0
 8009a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8009a80:	2300      	movs	r3, #0
 8009a82:	637b      	str	r3, [r7, #52]	; 0x34
 8009a84:	2300      	movs	r3, #0
 8009a86:	633b      	str	r3, [r7, #48]	; 0x30
 8009a88:	2300      	movs	r3, #0
 8009a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a90:	2300      	movs	r3, #0
 8009a92:	643b      	str	r3, [r7, #64]	; 0x40

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3b01      	subs	r3, #1
 8009a98:	2b0f      	cmp	r3, #15
 8009a9a:	f200 8122 	bhi.w	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8009a9e:	a201      	add	r2, pc, #4	; (adr r2, 8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8009aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa4:	08009c61 	.word	0x08009c61
 8009aa8:	08009cc7 	.word	0x08009cc7
 8009aac:	08009ce3 	.word	0x08009ce3
 8009ab0:	08009bbf 	.word	0x08009bbf
 8009ab4:	08009ce3 	.word	0x08009ce3
 8009ab8:	08009ce3 	.word	0x08009ce3
 8009abc:	08009ce3 	.word	0x08009ce3
 8009ac0:	08009c11 	.word	0x08009c11
 8009ac4:	08009ce3 	.word	0x08009ce3
 8009ac8:	08009ce3 	.word	0x08009ce3
 8009acc:	08009ce3 	.word	0x08009ce3
 8009ad0:	08009ce3 	.word	0x08009ce3
 8009ad4:	08009ce3 	.word	0x08009ce3
 8009ad8:	08009ce3 	.word	0x08009ce3
 8009adc:	08009ce3 	.word	0x08009ce3
 8009ae0:	08009ae5 	.word	0x08009ae5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8009ae4:	4b88      	ldr	r3, [pc, #544]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8009aea:	4b87      	ldr	r3, [pc, #540]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 80f7 	beq.w	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	0c9b      	lsrs	r3, r3, #18
 8009afc:	f003 030f 	and.w	r3, r3, #15
 8009b00:	3348      	adds	r3, #72	; 0x48
 8009b02:	443b      	add	r3, r7
 8009b04:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8009b08:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d03d      	beq.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8009b14:	4b7c      	ldr	r3, [pc, #496]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b18:	f003 030f 	and.w	r3, r3, #15
 8009b1c:	3348      	adds	r3, #72	; 0x48
 8009b1e:	443b      	add	r3, r7
 8009b20:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8009b24:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8009b26:	4b78      	ldr	r3, [pc, #480]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d01c      	beq.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x118>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8009b32:	4b75      	ldr	r3, [pc, #468]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b36:	091b      	lsrs	r3, r3, #4
 8009b38:	f003 030f 	and.w	r3, r3, #15
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8009b40:	4b71      	ldr	r3, [pc, #452]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b44:	0a1b      	lsrs	r3, r3, #8
 8009b46:	f003 030f 	and.w	r3, r3, #15
 8009b4a:	3302      	adds	r3, #2
 8009b4c:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8009b4e:	4a6f      	ldr	r2, [pc, #444]	; (8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b58:	fb03 f202 	mul.w	r2, r3, r2
 8009b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	fb02 f303 	mul.w	r3, r2, r3
 8009b68:	647b      	str	r3, [r7, #68]	; 0x44
 8009b6a:	e007      	b.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009b6c:	4a67      	ldr	r2, [pc, #412]	; (8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b76:	fb02 f303 	mul.w	r3, r2, r3
 8009b7a:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8009b7c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009b80:	461a      	mov	r2, r3
 8009b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d108      	bne.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            pllclk = pllclk / 2;
 8009b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b8a:	085b      	lsrs	r3, r3, #1
 8009b8c:	647b      	str	r3, [r7, #68]	; 0x44
 8009b8e:	e004      	b.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b92:	4a5f      	ldr	r2, [pc, #380]	; (8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009b94:	fb02 f303 	mul.w	r3, r2, r3
 8009b98:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8009b9a:	4b5b      	ldr	r3, [pc, #364]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ba6:	d102      	bne.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8009ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009baa:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8009bac:	e09b      	b.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
          frequency = (2 * pllclk) / 3;
 8009bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb0:	005b      	lsls	r3, r3, #1
 8009bb2:	4a58      	ldr	r2, [pc, #352]	; (8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb8:	085b      	lsrs	r3, r3, #1
 8009bba:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8009bbc:	e093      	b.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8009bbe:	4b52      	ldr	r3, [pc, #328]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d103      	bne.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8009bca:	f7ff fc7f 	bl	80094cc <HAL_RCC_GetSysClockFreq>
 8009bce:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8009bd0:	e08b      	b.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x296>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8009bd2:	4b4d      	ldr	r3, [pc, #308]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f000 8085 	beq.w	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8009be0:	4b49      	ldr	r3, [pc, #292]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be4:	091b      	lsrs	r3, r3, #4
 8009be6:	f003 030f 	and.w	r3, r3, #15
 8009bea:	3301      	adds	r3, #1
 8009bec:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8009bee:	4b46      	ldr	r3, [pc, #280]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf2:	0b1b      	lsrs	r3, r3, #12
 8009bf4:	f003 030f 	and.w	r3, r3, #15
 8009bf8:	3302      	adds	r3, #2
 8009bfa:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8009bfc:	4a43      	ldr	r2, [pc, #268]	; (8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c06:	fb02 f303 	mul.w	r3, r2, r3
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8009c0e:	e06c      	b.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8009c10:	4b3d      	ldr	r3, [pc, #244]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d103      	bne.n	8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8009c1c:	f7ff fc56 	bl	80094cc <HAL_RCC_GetSysClockFreq>
 8009c20:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8009c22:	e064      	b.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8009c24:	4b38      	ldr	r3, [pc, #224]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d05e      	beq.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8009c30:	4b35      	ldr	r3, [pc, #212]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c34:	091b      	lsrs	r3, r3, #4
 8009c36:	f003 030f 	and.w	r3, r3, #15
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8009c3e:	4b32      	ldr	r3, [pc, #200]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c42:	0b1b      	lsrs	r3, r3, #12
 8009c44:	f003 030f 	and.w	r3, r3, #15
 8009c48:	3302      	adds	r3, #2
 8009c4a:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8009c4c:	4a2f      	ldr	r2, [pc, #188]	; (8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c56:	fb02 f303 	mul.w	r3, r2, r3
 8009c5a:	005b      	lsls	r3, r3, #1
 8009c5c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8009c5e:	e046      	b.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8009c60:	4b29      	ldr	r3, [pc, #164]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009c62:	6a1b      	ldr	r3, [r3, #32]
 8009c64:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c70:	d108      	bne.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8009c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d003      	beq.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSE_VALUE;
 8009c7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c80:	643b      	str	r3, [r7, #64]	; 0x40
 8009c82:	e01f      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8009c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c8e:	d109      	bne.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 8009c90:	4b1d      	ldr	r3, [pc, #116]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	f003 0302 	and.w	r3, r3, #2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d003      	beq.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      {
        frequency = LSI_VALUE;
 8009c9c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8009ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8009ca2:	e00f      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8009ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cae:	d120      	bne.n	8009cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 8009cb0:	4b15      	ldr	r3, [pc, #84]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d01a      	beq.n	8009cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
      {
        frequency = HSE_VALUE / 128U;
 8009cbc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009cc0:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8009cc2:	e016      	b.n	8009cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 8009cc4:	e015      	b.n	8009cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8009cc6:	f7ff fd31 	bl	800972c <HAL_RCC_GetPCLK2Freq>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	4b0e      	ldr	r3, [pc, #56]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	0b9b      	lsrs	r3, r3, #14
 8009cd2:	f003 0303 	and.w	r3, r3, #3
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	005b      	lsls	r3, r3, #1
 8009cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cde:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8009ce0:	e008      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
    }
    default:
    {
      break;
 8009ce2:	bf00      	nop
 8009ce4:	e006      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8009ce6:	bf00      	nop
 8009ce8:	e004      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8009cea:	bf00      	nop
 8009cec:	e002      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8009cee:	bf00      	nop
 8009cf0:	e000      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8009cf2:	bf00      	nop
    }
  }
  return (frequency);
 8009cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	374c      	adds	r7, #76	; 0x4c
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd90      	pop	{r4, r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	08013c2c 	.word	0x08013c2c
 8009d04:	08013c3c 	.word	0x08013c3c
 8009d08:	40021000 	.word	0x40021000
 8009d0c:	007a1200 	.word	0x007a1200
 8009d10:	003d0900 	.word	0x003d0900
 8009d14:	aaaaaaab 	.word	0xaaaaaaab

08009d18 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e084      	b.n	8009e38 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	7c5b      	ldrb	r3, [r3, #17]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d105      	bne.n	8009d44 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7fb fbf6 	bl	8005530 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2202      	movs	r2, #2
 8009d48:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 faa0 	bl	800a290 <HAL_RTC_WaitForSynchro>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d004      	beq.n	8009d60 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2204      	movs	r2, #4
 8009d5a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e06b      	b.n	8009e38 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fb59 	bl	800a418 <RTC_EnterInitMode>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d004      	beq.n	8009d76 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2204      	movs	r2, #4
 8009d70:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e060      	b.n	8009e38 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f022 0207 	bic.w	r2, r2, #7
 8009d84:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d005      	beq.n	8009d9a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8009d8e:	4b2c      	ldr	r3, [pc, #176]	; (8009e40 <HAL_RTC_Init+0x128>)
 8009d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d92:	4a2b      	ldr	r2, [pc, #172]	; (8009e40 <HAL_RTC_Init+0x128>)
 8009d94:	f023 0301 	bic.w	r3, r3, #1
 8009d98:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8009d9a:	4b29      	ldr	r3, [pc, #164]	; (8009e40 <HAL_RTC_Init+0x128>)
 8009d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	4926      	ldr	r1, [pc, #152]	; (8009e40 <HAL_RTC_Init+0x128>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db4:	d003      	beq.n	8009dbe <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	e00e      	b.n	8009ddc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	f7ff fe48 	bl	8009a54 <HAL_RCCEx_GetPeriphCLKFreq>
 8009dc4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d104      	bne.n	8009dd6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2204      	movs	r2, #4
 8009dd0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e030      	b.n	8009e38 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	f023 010f 	bic.w	r1, r3, #15
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	0c1a      	lsrs	r2, r3, #16
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	430a      	orrs	r2, r1
 8009df0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	0c1b      	lsrs	r3, r3, #16
 8009dfa:	041b      	lsls	r3, r3, #16
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	b291      	uxth	r1, r2
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	6812      	ldr	r2, [r2, #0]
 8009e04:	430b      	orrs	r3, r1
 8009e06:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fb2d 	bl	800a468 <RTC_ExitInitMode>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d004      	beq.n	8009e1e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2204      	movs	r2, #4
 8009e18:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e00c      	b.n	8009e38 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8009e36:	2300      	movs	r3, #0
  }
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	40006c00 	.word	0x40006c00

08009e44 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009e44:	b590      	push	{r4, r7, lr}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8009e50:	2300      	movs	r3, #0
 8009e52:	617b      	str	r3, [r7, #20]
 8009e54:	2300      	movs	r3, #0
 8009e56:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <HAL_RTC_SetTime+0x20>
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e080      	b.n	8009f6a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	7c1b      	ldrb	r3, [r3, #16]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d101      	bne.n	8009e74 <HAL_RTC_SetTime+0x30>
 8009e70:	2302      	movs	r3, #2
 8009e72:	e07a      	b.n	8009f6a <HAL_RTC_SetTime+0x126>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2201      	movs	r2, #1
 8009e78:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2202      	movs	r2, #2
 8009e7e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d113      	bne.n	8009eae <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009e90:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	785b      	ldrb	r3, [r3, #1]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	011b      	lsls	r3, r3, #4
 8009e9e:	1a5b      	subs	r3, r3, r1
 8009ea0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009ea2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009ea8:	4413      	add	r3, r2
 8009eaa:	617b      	str	r3, [r7, #20]
 8009eac:	e01e      	b.n	8009eec <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 fb1d 	bl	800a4f2 <RTC_Bcd2ToByte>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009ec0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	785b      	ldrb	r3, [r3, #1]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 fb12 	bl	800a4f2 <RTC_Bcd2ToByte>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	011b      	lsls	r3, r3, #4
 8009ed6:	1a9b      	subs	r3, r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009eda:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	789b      	ldrb	r3, [r3, #2]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 fb06 	bl	800a4f2 <RTC_Bcd2ToByte>
 8009ee6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009ee8:	4423      	add	r3, r4
 8009eea:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8009eec:	6979      	ldr	r1, [r7, #20]
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f000 fa2b 	bl	800a34a <RTC_WriteTimeCounter>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d007      	beq.n	8009f0a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2204      	movs	r2, #4
 8009efe:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e02f      	b.n	8009f6a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f022 0205 	bic.w	r2, r2, #5
 8009f18:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f000 fa3c 	bl	800a398 <RTC_ReadAlarmCounter>
 8009f20:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f28:	d018      	beq.n	8009f5c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d214      	bcs.n	8009f5c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8009f38:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009f3c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009f3e:	6939      	ldr	r1, [r7, #16]
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f000 fa42 	bl	800a3ca <RTC_WriteAlarmCounter>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d007      	beq.n	8009f5c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2204      	movs	r2, #4
 8009f50:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e006      	b.n	8009f6a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8009f68:	2300      	movs	r3, #0
  }
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	371c      	adds	r7, #28
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd90      	pop	{r4, r7, pc}
	...

08009f74 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b088      	sub	sp, #32
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	61bb      	str	r3, [r7, #24]
 8009f84:	2300      	movs	r3, #0
 8009f86:	61fb      	str	r3, [r7, #28]
 8009f88:	2300      	movs	r3, #0
 8009f8a:	617b      	str	r3, [r7, #20]
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d002      	beq.n	8009f9c <HAL_RTC_GetTime+0x28>
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d101      	bne.n	8009fa0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e0b5      	b.n	800a10c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f003 0304 	and.w	r3, r3, #4
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d001      	beq.n	8009fb2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e0ac      	b.n	800a10c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f000 f999 	bl	800a2ea <RTC_ReadTimeCounter>
 8009fb8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	4a55      	ldr	r2, [pc, #340]	; (800a114 <HAL_RTC_GetTime+0x1a0>)
 8009fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc2:	0adb      	lsrs	r3, r3, #11
 8009fc4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8009fc6:	69ba      	ldr	r2, [r7, #24]
 8009fc8:	4b52      	ldr	r3, [pc, #328]	; (800a114 <HAL_RTC_GetTime+0x1a0>)
 8009fca:	fba3 1302 	umull	r1, r3, r3, r2
 8009fce:	0adb      	lsrs	r3, r3, #11
 8009fd0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009fd4:	fb01 f303 	mul.w	r3, r1, r3
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	4a4f      	ldr	r2, [pc, #316]	; (800a118 <HAL_RTC_GetTime+0x1a4>)
 8009fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe0:	095b      	lsrs	r3, r3, #5
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	4a4a      	ldr	r2, [pc, #296]	; (800a114 <HAL_RTC_GetTime+0x1a0>)
 8009fec:	fba2 1203 	umull	r1, r2, r2, r3
 8009ff0:	0ad2      	lsrs	r2, r2, #11
 8009ff2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009ff6:	fb01 f202 	mul.w	r2, r1, r2
 8009ffa:	1a9a      	subs	r2, r3, r2
 8009ffc:	4b46      	ldr	r3, [pc, #280]	; (800a118 <HAL_RTC_GetTime+0x1a4>)
 8009ffe:	fba3 1302 	umull	r1, r3, r3, r2
 800a002:	0959      	lsrs	r1, r3, #5
 800a004:	460b      	mov	r3, r1
 800a006:	011b      	lsls	r3, r3, #4
 800a008:	1a5b      	subs	r3, r3, r1
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	1ad1      	subs	r1, r2, r3
 800a00e:	b2ca      	uxtb	r2, r1
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	2b17      	cmp	r3, #23
 800a018:	d955      	bls.n	800a0c6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	4a3f      	ldr	r2, [pc, #252]	; (800a11c <HAL_RTC_GetTime+0x1a8>)
 800a01e:	fba2 2303 	umull	r2, r3, r2, r3
 800a022:	091b      	lsrs	r3, r3, #4
 800a024:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800a026:	6939      	ldr	r1, [r7, #16]
 800a028:	4b3c      	ldr	r3, [pc, #240]	; (800a11c <HAL_RTC_GetTime+0x1a8>)
 800a02a:	fba3 2301 	umull	r2, r3, r3, r1
 800a02e:	091a      	lsrs	r2, r3, #4
 800a030:	4613      	mov	r3, r2
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	4413      	add	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	1aca      	subs	r2, r1, r3
 800a03a:	b2d2      	uxtb	r2, r2
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 f9a9 	bl	800a398 <RTC_ReadAlarmCounter>
 800a046:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04e:	d008      	beq.n	800a062 <HAL_RTC_GetTime+0xee>
 800a050:	69fa      	ldr	r2, [r7, #28]
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	429a      	cmp	r2, r3
 800a056:	d904      	bls.n	800a062 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800a058:	69fa      	ldr	r2, [r7, #28]
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	61fb      	str	r3, [r7, #28]
 800a060:	e002      	b.n	800a068 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800a062:	f04f 33ff 	mov.w	r3, #4294967295
 800a066:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	4a2d      	ldr	r2, [pc, #180]	; (800a120 <HAL_RTC_GetTime+0x1ac>)
 800a06c:	fb02 f303 	mul.w	r3, r2, r3
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800a076:	69b9      	ldr	r1, [r7, #24]
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 f966 	bl	800a34a <RTC_WriteTimeCounter>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e041      	b.n	800a10c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08e:	d00c      	beq.n	800a0aa <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800a090:	69fa      	ldr	r2, [r7, #28]
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	4413      	add	r3, r2
 800a096:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800a098:	69f9      	ldr	r1, [r7, #28]
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f000 f995 	bl	800a3ca <RTC_WriteAlarmCounter>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00a      	beq.n	800a0bc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e030      	b.n	800a10c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800a0aa:	69f9      	ldr	r1, [r7, #28]
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 f98c 	bl	800a3ca <RTC_WriteAlarmCounter>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e027      	b.n	800a10c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800a0bc:	6979      	ldr	r1, [r7, #20]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 fa34 	bl	800a52c <RTC_DateUpdate>
 800a0c4:	e003      	b.n	800a0ce <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d01a      	beq.n	800a10a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f000 f9ed 	bl	800a4b8 <RTC_ByteToBcd2>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	785b      	ldrb	r3, [r3, #1]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 f9e4 	bl	800a4b8 <RTC_ByteToBcd2>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	789b      	ldrb	r3, [r3, #2]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 f9db 	bl	800a4b8 <RTC_ByteToBcd2>
 800a102:	4603      	mov	r3, r0
 800a104:	461a      	mov	r2, r3
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3720      	adds	r7, #32
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	91a2b3c5 	.word	0x91a2b3c5
 800a118:	88888889 	.word	0x88888889
 800a11c:	aaaaaaab 	.word	0xaaaaaaab
 800a120:	00015180 	.word	0x00015180

0800a124 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b088      	sub	sp, #32
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800a130:	2300      	movs	r3, #0
 800a132:	61fb      	str	r3, [r7, #28]
 800a134:	2300      	movs	r3, #0
 800a136:	61bb      	str	r3, [r7, #24]
 800a138:	2300      	movs	r3, #0
 800a13a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <HAL_RTC_SetDate+0x24>
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e097      	b.n	800a27c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	7c1b      	ldrb	r3, [r3, #16]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d101      	bne.n	800a158 <HAL_RTC_SetDate+0x34>
 800a154:	2302      	movs	r3, #2
 800a156:	e091      	b.n	800a27c <HAL_RTC_SetDate+0x158>
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2201      	movs	r2, #1
 800a15c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2202      	movs	r2, #2
 800a162:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10c      	bne.n	800a184 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	78da      	ldrb	r2, [r3, #3]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	785a      	ldrb	r2, [r3, #1]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	789a      	ldrb	r2, [r3, #2]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	739a      	strb	r2, [r3, #14]
 800a182:	e01a      	b.n	800a1ba <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	78db      	ldrb	r3, [r3, #3]
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 f9b2 	bl	800a4f2 <RTC_Bcd2ToByte>
 800a18e:	4603      	mov	r3, r0
 800a190:	461a      	mov	r2, r3
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	785b      	ldrb	r3, [r3, #1]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f000 f9a9 	bl	800a4f2 <RTC_Bcd2ToByte>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	789b      	ldrb	r3, [r3, #2]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f000 f9a0 	bl	800a4f2 <RTC_Bcd2ToByte>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	7bdb      	ldrb	r3, [r3, #15]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	7b59      	ldrb	r1, [r3, #13]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	7b9b      	ldrb	r3, [r3, #14]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	f000 fa8b 	bl	800a6e4 <RTC_WeekDayNum>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	7b1a      	ldrb	r2, [r3, #12]
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 f883 	bl	800a2ea <RTC_ReadTimeCounter>
 800a1e4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	4a26      	ldr	r2, [pc, #152]	; (800a284 <HAL_RTC_SetDate+0x160>)
 800a1ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ee:	0adb      	lsrs	r3, r3, #11
 800a1f0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2b18      	cmp	r3, #24
 800a1f6:	d93a      	bls.n	800a26e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	4a23      	ldr	r2, [pc, #140]	; (800a288 <HAL_RTC_SetDate+0x164>)
 800a1fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a200:	091b      	lsrs	r3, r3, #4
 800a202:	4a22      	ldr	r2, [pc, #136]	; (800a28c <HAL_RTC_SetDate+0x168>)
 800a204:	fb02 f303 	mul.w	r3, r2, r3
 800a208:	69fa      	ldr	r2, [r7, #28]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800a20e:	69f9      	ldr	r1, [r7, #28]
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 f89a 	bl	800a34a <RTC_WriteTimeCounter>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d007      	beq.n	800a22c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2204      	movs	r2, #4
 800a220:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e027      	b.n	800a27c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 f8b3 	bl	800a398 <RTC_ReadAlarmCounter>
 800a232:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23a:	d018      	beq.n	800a26e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800a23c:	69ba      	ldr	r2, [r7, #24]
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	429a      	cmp	r2, r3
 800a242:	d214      	bcs.n	800a26e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800a24a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800a24e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800a250:	69b9      	ldr	r1, [r7, #24]
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 f8b9 	bl	800a3ca <RTC_WriteAlarmCounter>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d007      	beq.n	800a26e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2204      	movs	r2, #4
 800a262:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e006      	b.n	800a27c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2201      	movs	r2, #1
 800a272:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3720      	adds	r7, #32
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	91a2b3c5 	.word	0x91a2b3c5
 800a288:	aaaaaaab 	.word	0xaaaaaaab
 800a28c:	00015180 	.word	0x00015180

0800a290 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e01d      	b.n	800a2e2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f022 0208 	bic.w	r2, r2, #8
 800a2b4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800a2b6:	f7fb fe8d 	bl	8005fd4 <HAL_GetTick>
 800a2ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800a2bc:	e009      	b.n	800a2d2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a2be:	f7fb fe89 	bl	8005fd4 <HAL_GetTick>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2cc:	d901      	bls.n	800a2d2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	e007      	b.n	800a2e2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	f003 0308 	and.w	r3, r3, #8
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d0ee      	beq.n	800a2be <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b087      	sub	sp, #28
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	827b      	strh	r3, [r7, #18]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	823b      	strh	r3, [r7, #16]
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800a2fe:	2300      	movs	r3, #0
 800a300:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	69db      	ldr	r3, [r3, #28]
 800a310:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800a31a:	8a7a      	ldrh	r2, [r7, #18]
 800a31c:	8a3b      	ldrh	r3, [r7, #16]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d008      	beq.n	800a334 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800a322:	8a3b      	ldrh	r3, [r7, #16]
 800a324:	041a      	lsls	r2, r3, #16
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	69db      	ldr	r3, [r3, #28]
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	4313      	orrs	r3, r2
 800a330:	617b      	str	r3, [r7, #20]
 800a332:	e004      	b.n	800a33e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800a334:	8a7b      	ldrh	r3, [r7, #18]
 800a336:	041a      	lsls	r2, r3, #16
 800a338:	89fb      	ldrh	r3, [r7, #14]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800a33e:	697b      	ldr	r3, [r7, #20]
}
 800a340:	4618      	mov	r0, r3
 800a342:	371c      	adds	r7, #28
 800a344:	46bd      	mov	sp, r7
 800a346:	bc80      	pop	{r7}
 800a348:	4770      	bx	lr

0800a34a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b084      	sub	sp, #16
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f85d 	bl	800a418 <RTC_EnterInitMode>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	73fb      	strb	r3, [r7, #15]
 800a368:	e011      	b.n	800a38e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	0c12      	lsrs	r2, r2, #16
 800a372:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	b292      	uxth	r2, r2
 800a37c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f872 	bl	800a468 <RTC_ExitInitMode>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	81fb      	strh	r3, [r7, #14]
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
 800a3ae:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800a3b8:	89fb      	ldrh	r3, [r7, #14]
 800a3ba:	041a      	lsls	r2, r3, #16
 800a3bc:	89bb      	ldrh	r3, [r7, #12]
 800a3be:	4313      	orrs	r3, r2
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3714      	adds	r7, #20
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bc80      	pop	{r7}
 800a3c8:	4770      	bx	lr

0800a3ca <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f81d 	bl	800a418 <RTC_EnterInitMode>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	73fb      	strb	r3, [r7, #15]
 800a3e8:	e011      	b.n	800a40e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	0c12      	lsrs	r2, r2, #16
 800a3f2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	b292      	uxth	r2, r2
 800a3fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f832 	bl	800a468 <RTC_ExitInitMode>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800a40a:	2301      	movs	r3, #1
 800a40c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a420:	2300      	movs	r3, #0
 800a422:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800a424:	f7fb fdd6 	bl	8005fd4 <HAL_GetTick>
 800a428:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a42a:	e009      	b.n	800a440 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a42c:	f7fb fdd2 	bl	8005fd4 <HAL_GetTick>
 800a430:	4602      	mov	r2, r0
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	1ad3      	subs	r3, r2, r3
 800a436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a43a:	d901      	bls.n	800a440 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800a43c:	2303      	movs	r3, #3
 800a43e:	e00f      	b.n	800a460 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	f003 0320 	and.w	r3, r3, #32
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0ee      	beq.n	800a42c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f042 0210 	orr.w	r2, r2, #16
 800a45c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a470:	2300      	movs	r3, #0
 800a472:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0210 	bic.w	r2, r2, #16
 800a482:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800a484:	f7fb fda6 	bl	8005fd4 <HAL_GetTick>
 800a488:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a48a:	e009      	b.n	800a4a0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a48c:	f7fb fda2 	bl	8005fd4 <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a49a:	d901      	bls.n	800a4a0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e007      	b.n	800a4b0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f003 0320 	and.w	r3, r3, #32
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d0ee      	beq.n	800a48c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800a4c6:	e005      	b.n	800a4d4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800a4ce:	79fb      	ldrb	r3, [r7, #7]
 800a4d0:	3b0a      	subs	r3, #10
 800a4d2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800a4d4:	79fb      	ldrb	r3, [r7, #7]
 800a4d6:	2b09      	cmp	r3, #9
 800a4d8:	d8f6      	bhi.n	800a4c8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	b2db      	uxtb	r3, r3
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bc80      	pop	{r7}
 800a4f0:	4770      	bx	lr

0800a4f2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b085      	sub	sp, #20
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800a500:	79fb      	ldrb	r3, [r7, #7]
 800a502:	091b      	lsrs	r3, r3, #4
 800a504:	b2db      	uxtb	r3, r3
 800a506:	461a      	mov	r2, r3
 800a508:	4613      	mov	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	4413      	add	r3, r2
 800a50e:	005b      	lsls	r3, r3, #1
 800a510:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	f003 030f 	and.w	r3, r3, #15
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	4413      	add	r3, r2
 800a520:	b2db      	uxtb	r3, r3
}
 800a522:	4618      	mov	r0, r3
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	bc80      	pop	{r7}
 800a52a:	4770      	bx	lr

0800a52c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800a536:	2300      	movs	r3, #0
 800a538:	617b      	str	r3, [r7, #20]
 800a53a:	2300      	movs	r3, #0
 800a53c:	613b      	str	r3, [r7, #16]
 800a53e:	2300      	movs	r3, #0
 800a540:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800a542:	2300      	movs	r3, #0
 800a544:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	7bdb      	ldrb	r3, [r3, #15]
 800a54a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	7b5b      	ldrb	r3, [r3, #13]
 800a550:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	7b9b      	ldrb	r3, [r3, #14]
 800a556:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800a558:	2300      	movs	r3, #0
 800a55a:	60bb      	str	r3, [r7, #8]
 800a55c:	e06f      	b.n	800a63e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d011      	beq.n	800a588 <RTC_DateUpdate+0x5c>
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	2b03      	cmp	r3, #3
 800a568:	d00e      	beq.n	800a588 <RTC_DateUpdate+0x5c>
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	2b05      	cmp	r3, #5
 800a56e:	d00b      	beq.n	800a588 <RTC_DateUpdate+0x5c>
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	2b07      	cmp	r3, #7
 800a574:	d008      	beq.n	800a588 <RTC_DateUpdate+0x5c>
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d005      	beq.n	800a588 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	2b0a      	cmp	r3, #10
 800a580:	d002      	beq.n	800a588 <RTC_DateUpdate+0x5c>
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	2b0c      	cmp	r3, #12
 800a586:	d117      	bne.n	800a5b8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2b1e      	cmp	r3, #30
 800a58c:	d803      	bhi.n	800a596 <RTC_DateUpdate+0x6a>
      {
        day++;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3301      	adds	r3, #1
 800a592:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800a594:	e050      	b.n	800a638 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	2b0c      	cmp	r3, #12
 800a59a:	d005      	beq.n	800a5a8 <RTC_DateUpdate+0x7c>
        {
          month++;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	613b      	str	r3, [r7, #16]
          day = 1U;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800a5a6:	e047      	b.n	800a638 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	613b      	str	r3, [r7, #16]
          day = 1U;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	60fb      	str	r3, [r7, #12]
          year++;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800a5b6:	e03f      	b.n	800a638 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	2b04      	cmp	r3, #4
 800a5bc:	d008      	beq.n	800a5d0 <RTC_DateUpdate+0xa4>
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	2b06      	cmp	r3, #6
 800a5c2:	d005      	beq.n	800a5d0 <RTC_DateUpdate+0xa4>
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	2b09      	cmp	r3, #9
 800a5c8:	d002      	beq.n	800a5d0 <RTC_DateUpdate+0xa4>
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	2b0b      	cmp	r3, #11
 800a5ce:	d10c      	bne.n	800a5ea <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b1d      	cmp	r3, #29
 800a5d4:	d803      	bhi.n	800a5de <RTC_DateUpdate+0xb2>
      {
        day++;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800a5dc:	e02c      	b.n	800a638 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	613b      	str	r3, [r7, #16]
        day = 1U;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800a5e8:	e026      	b.n	800a638 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d123      	bne.n	800a638 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b1b      	cmp	r3, #27
 800a5f4:	d803      	bhi.n	800a5fe <RTC_DateUpdate+0xd2>
      {
        day++;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	e01c      	b.n	800a638 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2b1c      	cmp	r3, #28
 800a602:	d111      	bne.n	800a628 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	b29b      	uxth	r3, r3
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 f839 	bl	800a680 <RTC_IsLeapYear>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d003      	beq.n	800a61c <RTC_DateUpdate+0xf0>
        {
          day++;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3301      	adds	r3, #1
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	e00d      	b.n	800a638 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	3301      	adds	r3, #1
 800a620:	613b      	str	r3, [r7, #16]
          day = 1U;
 800a622:	2301      	movs	r3, #1
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	e007      	b.n	800a638 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2b1d      	cmp	r3, #29
 800a62c:	d104      	bne.n	800a638 <RTC_DateUpdate+0x10c>
      {
        month++;
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	3301      	adds	r3, #1
 800a632:	613b      	str	r3, [r7, #16]
        day = 1U;
 800a634:	2301      	movs	r3, #1
 800a636:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	3301      	adds	r3, #1
 800a63c:	60bb      	str	r3, [r7, #8]
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d38b      	bcc.n	800a55e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	b2da      	uxtb	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	b2db      	uxtb	r3, r3
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	b2d2      	uxtb	r2, r2
 800a666:	4619      	mov	r1, r3
 800a668:	6978      	ldr	r0, [r7, #20]
 800a66a:	f000 f83b 	bl	800a6e4 <RTC_WeekDayNum>
 800a66e:	4603      	mov	r3, r0
 800a670:	461a      	mov	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	731a      	strb	r2, [r3, #12]
}
 800a676:	bf00      	nop
 800a678:	3718      	adds	r7, #24
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
	...

0800a680 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	4603      	mov	r3, r0
 800a688:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800a68a:	88fb      	ldrh	r3, [r7, #6]
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	b29b      	uxth	r3, r3
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800a696:	2300      	movs	r3, #0
 800a698:	e01d      	b.n	800a6d6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800a69a:	88fb      	ldrh	r3, [r7, #6]
 800a69c:	4a10      	ldr	r2, [pc, #64]	; (800a6e0 <RTC_IsLeapYear+0x60>)
 800a69e:	fba2 1203 	umull	r1, r2, r2, r3
 800a6a2:	0952      	lsrs	r2, r2, #5
 800a6a4:	2164      	movs	r1, #100	; 0x64
 800a6a6:	fb01 f202 	mul.w	r2, r1, r2
 800a6aa:	1a9b      	subs	r3, r3, r2
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e00f      	b.n	800a6d6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800a6b6:	88fb      	ldrh	r3, [r7, #6]
 800a6b8:	4a09      	ldr	r2, [pc, #36]	; (800a6e0 <RTC_IsLeapYear+0x60>)
 800a6ba:	fba2 1203 	umull	r1, r2, r2, r3
 800a6be:	09d2      	lsrs	r2, r2, #7
 800a6c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a6c4:	fb01 f202 	mul.w	r2, r1, r2
 800a6c8:	1a9b      	subs	r3, r3, r2
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e000      	b.n	800a6d6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800a6d4:	2300      	movs	r3, #0
  }
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bc80      	pop	{r7}
 800a6de:	4770      	bx	lr
 800a6e0:	51eb851f 	.word	0x51eb851f

0800a6e4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	60bb      	str	r3, [r7, #8]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a702:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800a704:	78fb      	ldrb	r3, [r7, #3]
 800a706:	2b02      	cmp	r3, #2
 800a708:	d82d      	bhi.n	800a766 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800a70a:	78fa      	ldrb	r2, [r7, #3]
 800a70c:	4613      	mov	r3, r2
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	4413      	add	r3, r2
 800a712:	00db      	lsls	r3, r3, #3
 800a714:	1a9b      	subs	r3, r3, r2
 800a716:	4a2c      	ldr	r2, [pc, #176]	; (800a7c8 <RTC_WeekDayNum+0xe4>)
 800a718:	fba2 2303 	umull	r2, r3, r2, r3
 800a71c:	085a      	lsrs	r2, r3, #1
 800a71e:	78bb      	ldrb	r3, [r7, #2]
 800a720:	441a      	add	r2, r3
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	441a      	add	r2, r3
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	3b01      	subs	r3, #1
 800a72a:	089b      	lsrs	r3, r3, #2
 800a72c:	441a      	add	r2, r3
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	3b01      	subs	r3, #1
 800a732:	4926      	ldr	r1, [pc, #152]	; (800a7cc <RTC_WeekDayNum+0xe8>)
 800a734:	fba1 1303 	umull	r1, r3, r1, r3
 800a738:	095b      	lsrs	r3, r3, #5
 800a73a:	1ad2      	subs	r2, r2, r3
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	3b01      	subs	r3, #1
 800a740:	4922      	ldr	r1, [pc, #136]	; (800a7cc <RTC_WeekDayNum+0xe8>)
 800a742:	fba1 1303 	umull	r1, r3, r1, r3
 800a746:	09db      	lsrs	r3, r3, #7
 800a748:	4413      	add	r3, r2
 800a74a:	1d1a      	adds	r2, r3, #4
 800a74c:	4b20      	ldr	r3, [pc, #128]	; (800a7d0 <RTC_WeekDayNum+0xec>)
 800a74e:	fba3 1302 	umull	r1, r3, r3, r2
 800a752:	1ad1      	subs	r1, r2, r3
 800a754:	0849      	lsrs	r1, r1, #1
 800a756:	440b      	add	r3, r1
 800a758:	0899      	lsrs	r1, r3, #2
 800a75a:	460b      	mov	r3, r1
 800a75c:	00db      	lsls	r3, r3, #3
 800a75e:	1a5b      	subs	r3, r3, r1
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	60fb      	str	r3, [r7, #12]
 800a764:	e029      	b.n	800a7ba <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800a766:	78fa      	ldrb	r2, [r7, #3]
 800a768:	4613      	mov	r3, r2
 800a76a:	005b      	lsls	r3, r3, #1
 800a76c:	4413      	add	r3, r2
 800a76e:	00db      	lsls	r3, r3, #3
 800a770:	1a9b      	subs	r3, r3, r2
 800a772:	4a15      	ldr	r2, [pc, #84]	; (800a7c8 <RTC_WeekDayNum+0xe4>)
 800a774:	fba2 2303 	umull	r2, r3, r2, r3
 800a778:	085a      	lsrs	r2, r3, #1
 800a77a:	78bb      	ldrb	r3, [r7, #2]
 800a77c:	441a      	add	r2, r3
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	441a      	add	r2, r3
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	089b      	lsrs	r3, r3, #2
 800a786:	441a      	add	r2, r3
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	4910      	ldr	r1, [pc, #64]	; (800a7cc <RTC_WeekDayNum+0xe8>)
 800a78c:	fba1 1303 	umull	r1, r3, r1, r3
 800a790:	095b      	lsrs	r3, r3, #5
 800a792:	1ad2      	subs	r2, r2, r3
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	490d      	ldr	r1, [pc, #52]	; (800a7cc <RTC_WeekDayNum+0xe8>)
 800a798:	fba1 1303 	umull	r1, r3, r1, r3
 800a79c:	09db      	lsrs	r3, r3, #7
 800a79e:	4413      	add	r3, r2
 800a7a0:	1c9a      	adds	r2, r3, #2
 800a7a2:	4b0b      	ldr	r3, [pc, #44]	; (800a7d0 <RTC_WeekDayNum+0xec>)
 800a7a4:	fba3 1302 	umull	r1, r3, r3, r2
 800a7a8:	1ad1      	subs	r1, r2, r3
 800a7aa:	0849      	lsrs	r1, r1, #1
 800a7ac:	440b      	add	r3, r1
 800a7ae:	0899      	lsrs	r1, r3, #2
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	00db      	lsls	r3, r3, #3
 800a7b4:	1a5b      	subs	r3, r3, r1
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	b2db      	uxtb	r3, r3
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3714      	adds	r7, #20
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bc80      	pop	{r7}
 800a7c6:	4770      	bx	lr
 800a7c8:	38e38e39 	.word	0x38e38e39
 800a7cc:	51eb851f 	.word	0x51eb851f
 800a7d0:	24924925 	.word	0x24924925

0800a7d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e041      	b.n	800a86a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d106      	bne.n	800a800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f839 	bl	800a872 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2202      	movs	r2, #2
 800a804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	3304      	adds	r3, #4
 800a810:	4619      	mov	r1, r3
 800a812:	4610      	mov	r0, r2
 800a814:	f000 f9bc 	bl	800ab90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a872:	b480      	push	{r7}
 800a874:	b083      	sub	sp, #12
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a87a:	bf00      	nop
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	bc80      	pop	{r7}
 800a882:	4770      	bx	lr

0800a884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b01      	cmp	r3, #1
 800a896:	d001      	beq.n	800a89c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	e03f      	b.n	800a91c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2202      	movs	r2, #2
 800a8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68da      	ldr	r2, [r3, #12]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f042 0201 	orr.w	r2, r2, #1
 800a8b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a1b      	ldr	r2, [pc, #108]	; (800a928 <HAL_TIM_Base_Start_IT+0xa4>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d013      	beq.n	800a8e6 <HAL_TIM_Base_Start_IT+0x62>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8c6:	d00e      	beq.n	800a8e6 <HAL_TIM_Base_Start_IT+0x62>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a17      	ldr	r2, [pc, #92]	; (800a92c <HAL_TIM_Base_Start_IT+0xa8>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d009      	beq.n	800a8e6 <HAL_TIM_Base_Start_IT+0x62>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a16      	ldr	r2, [pc, #88]	; (800a930 <HAL_TIM_Base_Start_IT+0xac>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d004      	beq.n	800a8e6 <HAL_TIM_Base_Start_IT+0x62>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a14      	ldr	r2, [pc, #80]	; (800a934 <HAL_TIM_Base_Start_IT+0xb0>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d111      	bne.n	800a90a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	f003 0307 	and.w	r3, r3, #7
 800a8f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b06      	cmp	r3, #6
 800a8f6:	d010      	beq.n	800a91a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f042 0201 	orr.w	r2, r2, #1
 800a906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a908:	e007      	b.n	800a91a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f042 0201 	orr.w	r2, r2, #1
 800a918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3714      	adds	r7, #20
 800a920:	46bd      	mov	sp, r7
 800a922:	bc80      	pop	{r7}
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	40012c00 	.word	0x40012c00
 800a92c:	40000400 	.word	0x40000400
 800a930:	40000800 	.word	0x40000800
 800a934:	40000c00 	.word	0x40000c00

0800a938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	f003 0302 	and.w	r3, r3, #2
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d122      	bne.n	800a994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f003 0302 	and.w	r3, r3, #2
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d11b      	bne.n	800a994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f06f 0202 	mvn.w	r2, #2
 800a964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	699b      	ldr	r3, [r3, #24]
 800a972:	f003 0303 	and.w	r3, r3, #3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d003      	beq.n	800a982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f8ed 	bl	800ab5a <HAL_TIM_IC_CaptureCallback>
 800a980:	e005      	b.n	800a98e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f8e0 	bl	800ab48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f8ef 	bl	800ab6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	f003 0304 	and.w	r3, r3, #4
 800a99e:	2b04      	cmp	r3, #4
 800a9a0:	d122      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	f003 0304 	and.w	r3, r3, #4
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d11b      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f06f 0204 	mvn.w	r2, #4
 800a9b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2202      	movs	r2, #2
 800a9be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f8c3 	bl	800ab5a <HAL_TIM_IC_CaptureCallback>
 800a9d4:	e005      	b.n	800a9e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f8b6 	bl	800ab48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f8c5 	bl	800ab6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	f003 0308 	and.w	r3, r3, #8
 800a9f2:	2b08      	cmp	r3, #8
 800a9f4:	d122      	bne.n	800aa3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f003 0308 	and.w	r3, r3, #8
 800aa00:	2b08      	cmp	r3, #8
 800aa02:	d11b      	bne.n	800aa3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f06f 0208 	mvn.w	r2, #8
 800aa0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2204      	movs	r2, #4
 800aa12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	69db      	ldr	r3, [r3, #28]
 800aa1a:	f003 0303 	and.w	r3, r3, #3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f899 	bl	800ab5a <HAL_TIM_IC_CaptureCallback>
 800aa28:	e005      	b.n	800aa36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 f88c 	bl	800ab48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f89b 	bl	800ab6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	f003 0310 	and.w	r3, r3, #16
 800aa46:	2b10      	cmp	r3, #16
 800aa48:	d122      	bne.n	800aa90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	f003 0310 	and.w	r3, r3, #16
 800aa54:	2b10      	cmp	r3, #16
 800aa56:	d11b      	bne.n	800aa90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f06f 0210 	mvn.w	r2, #16
 800aa60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2208      	movs	r2, #8
 800aa66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	69db      	ldr	r3, [r3, #28]
 800aa6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f86f 	bl	800ab5a <HAL_TIM_IC_CaptureCallback>
 800aa7c:	e005      	b.n	800aa8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f862 	bl	800ab48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 f871 	bl	800ab6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	f003 0301 	and.w	r3, r3, #1
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d10e      	bne.n	800aabc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f003 0301 	and.w	r3, r3, #1
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d107      	bne.n	800aabc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f06f 0201 	mvn.w	r2, #1
 800aab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f7fa fc9c 	bl	80053f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aac6:	2b80      	cmp	r3, #128	; 0x80
 800aac8:	d10e      	bne.n	800aae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad4:	2b80      	cmp	r3, #128	; 0x80
 800aad6:	d107      	bne.n	800aae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 f8c9 	bl	800ac7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf2:	2b40      	cmp	r3, #64	; 0x40
 800aaf4:	d10e      	bne.n	800ab14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab00:	2b40      	cmp	r3, #64	; 0x40
 800ab02:	d107      	bne.n	800ab14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f835 	bl	800ab7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	f003 0320 	and.w	r3, r3, #32
 800ab1e:	2b20      	cmp	r3, #32
 800ab20:	d10e      	bne.n	800ab40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f003 0320 	and.w	r3, r3, #32
 800ab2c:	2b20      	cmp	r3, #32
 800ab2e:	d107      	bne.n	800ab40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f06f 0220 	mvn.w	r2, #32
 800ab38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f894 	bl	800ac68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab40:	bf00      	nop
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bc80      	pop	{r7}
 800ab58:	4770      	bx	lr

0800ab5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b083      	sub	sp, #12
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab62:	bf00      	nop
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bc80      	pop	{r7}
 800ab6a:	4770      	bx	lr

0800ab6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bc80      	pop	{r7}
 800ab7c:	4770      	bx	lr

0800ab7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b083      	sub	sp, #12
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab86:	bf00      	nop
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bc80      	pop	{r7}
 800ab8e:	4770      	bx	lr

0800ab90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a2d      	ldr	r2, [pc, #180]	; (800ac58 <TIM_Base_SetConfig+0xc8>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d00f      	beq.n	800abc8 <TIM_Base_SetConfig+0x38>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abae:	d00b      	beq.n	800abc8 <TIM_Base_SetConfig+0x38>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a2a      	ldr	r2, [pc, #168]	; (800ac5c <TIM_Base_SetConfig+0xcc>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d007      	beq.n	800abc8 <TIM_Base_SetConfig+0x38>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a29      	ldr	r2, [pc, #164]	; (800ac60 <TIM_Base_SetConfig+0xd0>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d003      	beq.n	800abc8 <TIM_Base_SetConfig+0x38>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a28      	ldr	r2, [pc, #160]	; (800ac64 <TIM_Base_SetConfig+0xd4>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d108      	bne.n	800abda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a1e      	ldr	r2, [pc, #120]	; (800ac58 <TIM_Base_SetConfig+0xc8>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d00f      	beq.n	800ac02 <TIM_Base_SetConfig+0x72>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe8:	d00b      	beq.n	800ac02 <TIM_Base_SetConfig+0x72>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a1b      	ldr	r2, [pc, #108]	; (800ac5c <TIM_Base_SetConfig+0xcc>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d007      	beq.n	800ac02 <TIM_Base_SetConfig+0x72>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a1a      	ldr	r2, [pc, #104]	; (800ac60 <TIM_Base_SetConfig+0xd0>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d003      	beq.n	800ac02 <TIM_Base_SetConfig+0x72>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a19      	ldr	r2, [pc, #100]	; (800ac64 <TIM_Base_SetConfig+0xd4>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d108      	bne.n	800ac14 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	695b      	ldr	r3, [r3, #20]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	689a      	ldr	r2, [r3, #8]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a07      	ldr	r2, [pc, #28]	; (800ac58 <TIM_Base_SetConfig+0xc8>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d103      	bne.n	800ac48 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	691a      	ldr	r2, [r3, #16]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	615a      	str	r2, [r3, #20]
}
 800ac4e:	bf00      	nop
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bc80      	pop	{r7}
 800ac56:	4770      	bx	lr
 800ac58:	40012c00 	.word	0x40012c00
 800ac5c:	40000400 	.word	0x40000400
 800ac60:	40000800 	.word	0x40000800
 800ac64:	40000c00 	.word	0x40000c00

0800ac68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bc80      	pop	{r7}
 800ac78:	4770      	bx	lr

0800ac7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	b083      	sub	sp, #12
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac82:	bf00      	nop
 800ac84:	370c      	adds	r7, #12
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bc80      	pop	{r7}
 800ac8a:	4770      	bx	lr

0800ac8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e04a      	b.n	800ad34 <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d111      	bne.n	800acce <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fc62 	bl	800b57c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d102      	bne.n	800acc6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a1e      	ldr	r2, [pc, #120]	; (800ad3c <HAL_UART_Init+0xb0>)
 800acc4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2224      	movs	r2, #36	; 0x24
 800acd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68da      	ldr	r2, [r3, #12]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ace4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 ff84 	bl	800bbf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	691a      	ldr	r2, [r3, #16]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800acfa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	695a      	ldr	r2, [r3, #20]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68da      	ldr	r2, [r3, #12]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2220      	movs	r2, #32
 800ad26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2220      	movs	r2, #32
 800ad2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	08005579 	.word	0x08005579

0800ad40 <HAL_UART_RegisterCallback>:
  *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID, pUART_CallbackTypeDef pCallback)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b087      	sub	sp, #28
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	460b      	mov	r3, r1
 800ad4a:	607a      	str	r2, [r7, #4]
 800ad4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d107      	bne.n	800ad68 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5c:	f043 0220 	orr.w	r2, r3, #32
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e08c      	b.n	800ae82 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d101      	bne.n	800ad76 <HAL_UART_RegisterCallback+0x36>
 800ad72:	2302      	movs	r3, #2
 800ad74:	e085      	b.n	800ae82 <HAL_UART_RegisterCallback+0x142>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	2b20      	cmp	r3, #32
 800ad88:	d151      	bne.n	800ae2e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800ad8a:	7afb      	ldrb	r3, [r7, #11]
 800ad8c:	2b0c      	cmp	r3, #12
 800ad8e:	d845      	bhi.n	800ae1c <HAL_UART_RegisterCallback+0xdc>
 800ad90:	a201      	add	r2, pc, #4	; (adr r2, 800ad98 <HAL_UART_RegisterCallback+0x58>)
 800ad92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad96:	bf00      	nop
 800ad98:	0800adcd 	.word	0x0800adcd
 800ad9c:	0800add5 	.word	0x0800add5
 800ada0:	0800addd 	.word	0x0800addd
 800ada4:	0800ade5 	.word	0x0800ade5
 800ada8:	0800aded 	.word	0x0800aded
 800adac:	0800adf5 	.word	0x0800adf5
 800adb0:	0800adfd 	.word	0x0800adfd
 800adb4:	0800ae05 	.word	0x0800ae05
 800adb8:	0800ae1d 	.word	0x0800ae1d
 800adbc:	0800ae1d 	.word	0x0800ae1d
 800adc0:	0800ae1d 	.word	0x0800ae1d
 800adc4:	0800ae0d 	.word	0x0800ae0d
 800adc8:	0800ae15 	.word	0x0800ae15
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800add2:	e051      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800adda:	e04d      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800ade2:	e049      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800adea:	e045      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800adf2:	e041      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800adfa:	e03d      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800ae02:	e039      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800ae0a:	e035      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800ae12:	e031      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800ae1a:	e02d      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae20:	f043 0220 	orr.w	r2, r3, #32
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	75fb      	strb	r3, [r7, #23]
        break;
 800ae2c:	e024      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d116      	bne.n	800ae68 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800ae3a:	7afb      	ldrb	r3, [r7, #11]
 800ae3c:	2b0b      	cmp	r3, #11
 800ae3e:	d002      	beq.n	800ae46 <HAL_UART_RegisterCallback+0x106>
 800ae40:	2b0c      	cmp	r3, #12
 800ae42:	d004      	beq.n	800ae4e <HAL_UART_RegisterCallback+0x10e>
 800ae44:	e007      	b.n	800ae56 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800ae4c:	e014      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800ae54:	e010      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5a:	f043 0220 	orr.w	r2, r3, #32
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	75fb      	strb	r3, [r7, #23]
        break;
 800ae66:	e007      	b.n	800ae78 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6c:	f043 0220 	orr.w	r2, r3, #32
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	371c      	adds	r7, #28
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bc80      	pop	{r7}
 800ae8a:	4770      	bx	lr

0800ae8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08a      	sub	sp, #40	; 0x28
 800ae90:	af02      	add	r7, sp, #8
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	603b      	str	r3, [r7, #0]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	2b20      	cmp	r3, #32
 800aeaa:	d17c      	bne.n	800afa6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d002      	beq.n	800aeb8 <HAL_UART_Transmit+0x2c>
 800aeb2:	88fb      	ldrh	r3, [r7, #6]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d101      	bne.n	800aebc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e075      	b.n	800afa8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d101      	bne.n	800aeca <HAL_UART_Transmit+0x3e>
 800aec6:	2302      	movs	r3, #2
 800aec8:	e06e      	b.n	800afa8 <HAL_UART_Transmit+0x11c>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2221      	movs	r2, #33	; 0x21
 800aedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aee0:	f7fb f878 	bl	8005fd4 <HAL_GetTick>
 800aee4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	88fa      	ldrh	r2, [r7, #6]
 800aeea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	88fa      	ldrh	r2, [r7, #6]
 800aef0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aefa:	d108      	bne.n	800af0e <HAL_UART_Transmit+0x82>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d104      	bne.n	800af0e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800af04:	2300      	movs	r3, #0
 800af06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	61bb      	str	r3, [r7, #24]
 800af0c:	e003      	b.n	800af16 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af12:	2300      	movs	r3, #0
 800af14:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800af1e:	e02a      	b.n	800af76 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	2200      	movs	r2, #0
 800af28:	2180      	movs	r1, #128	; 0x80
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f000 fc11 	bl	800b752 <UART_WaitOnFlagUntilTimeout>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d001      	beq.n	800af3a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800af36:	2303      	movs	r3, #3
 800af38:	e036      	b.n	800afa8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d10b      	bne.n	800af58 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	461a      	mov	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af4e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	3302      	adds	r3, #2
 800af54:	61bb      	str	r3, [r7, #24]
 800af56:	e007      	b.n	800af68 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	781a      	ldrb	r2, [r3, #0]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	3301      	adds	r3, #1
 800af66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	3b01      	subs	r3, #1
 800af70:	b29a      	uxth	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1cf      	bne.n	800af20 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	2200      	movs	r2, #0
 800af88:	2140      	movs	r1, #64	; 0x40
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f000 fbe1 	bl	800b752 <UART_WaitOnFlagUntilTimeout>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d001      	beq.n	800af9a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800af96:	2303      	movs	r3, #3
 800af98:	e006      	b.n	800afa8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2220      	movs	r2, #32
 800af9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800afa2:	2300      	movs	r3, #0
 800afa4:	e000      	b.n	800afa8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800afa6:	2302      	movs	r3, #2
  }
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3720      	adds	r7, #32
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	4613      	mov	r3, r2
 800afbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	2b20      	cmp	r3, #32
 800afc8:	d130      	bne.n	800b02c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d002      	beq.n	800afd6 <HAL_UART_Transmit_IT+0x26>
 800afd0:	88fb      	ldrh	r3, [r7, #6]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d101      	bne.n	800afda <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e029      	b.n	800b02e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d101      	bne.n	800afe8 <HAL_UART_Transmit_IT+0x38>
 800afe4:	2302      	movs	r3, #2
 800afe6:	e022      	b.n	800b02e <HAL_UART_Transmit_IT+0x7e>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	68ba      	ldr	r2, [r7, #8]
 800aff4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	88fa      	ldrh	r2, [r7, #6]
 800affa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	88fa      	ldrh	r2, [r7, #6]
 800b000:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2221      	movs	r2, #33	; 0x21
 800b00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b026:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	e000      	b.n	800b02e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b02c:	2302      	movs	r3, #2
  }
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3714      	adds	r7, #20
 800b032:	46bd      	mov	sp, r7
 800b034:	bc80      	pop	{r7}
 800b036:	4770      	bx	lr

0800b038 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	4613      	mov	r3, r2
 800b044:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b20      	cmp	r3, #32
 800b050:	d13c      	bne.n	800b0cc <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800b058:	88fb      	ldrh	r3, [r7, #6]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	e035      	b.n	800b0ce <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d101      	bne.n	800b070 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800b06c:	2302      	movs	r3, #2
 800b06e:	e02e      	b.n	800b0ce <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2201      	movs	r2, #1
 800b07c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800b07e:	88fb      	ldrh	r3, [r7, #6]
 800b080:	461a      	mov	r2, r3
 800b082:	68b9      	ldr	r1, [r7, #8]
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f000 fbae 	bl	800b7e6 <UART_Start_Receive_IT>
 800b08a:	4603      	mov	r3, r0
 800b08c:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b08e:	7dfb      	ldrb	r3, [r7, #23]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d119      	bne.n	800b0c8 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d113      	bne.n	800b0c4 <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b09c:	2300      	movs	r3, #0
 800b09e:	613b      	str	r3, [r7, #16]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	613b      	str	r3, [r7, #16]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	613b      	str	r3, [r7, #16]
 800b0b0:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	68da      	ldr	r2, [r3, #12]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f042 0210 	orr.w	r2, r2, #16
 800b0c0:	60da      	str	r2, [r3, #12]
 800b0c2:	e001      	b.n	800b0c8 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ca:	e000      	b.n	800b0ce <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 800b0cc:	2302      	movs	r3, #2
  }
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3718      	adds	r7, #24
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b086      	sub	sp, #24
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	60f8      	str	r0, [r7, #12]
 800b0de:	60b9      	str	r1, [r7, #8]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b20      	cmp	r3, #32
 800b0ee:	d13c      	bne.n	800b16a <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d002      	beq.n	800b0fc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b0f6:	88fb      	ldrh	r3, [r7, #6]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e035      	b.n	800b16c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b106:	2b01      	cmp	r3, #1
 800b108:	d101      	bne.n	800b10e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800b10a:	2302      	movs	r3, #2
 800b10c:	e02e      	b.n	800b16c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2201      	movs	r2, #1
 800b11a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b11c:	88fb      	ldrh	r3, [r7, #6]
 800b11e:	461a      	mov	r2, r3
 800b120:	68b9      	ldr	r1, [r7, #8]
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f000 fb98 	bl	800b858 <UART_Start_Receive_DMA>
 800b128:	4603      	mov	r3, r0
 800b12a:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b12c:	7dfb      	ldrb	r3, [r7, #23]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d119      	bne.n	800b166 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b136:	2b01      	cmp	r3, #1
 800b138:	d113      	bne.n	800b162 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b13a:	2300      	movs	r3, #0
 800b13c:	613b      	str	r3, [r7, #16]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	613b      	str	r3, [r7, #16]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	613b      	str	r3, [r7, #16]
 800b14e:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68da      	ldr	r2, [r3, #12]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f042 0210 	orr.w	r2, r2, #16
 800b15e:	60da      	str	r2, [r3, #12]
 800b160:	e001      	b.n	800b166 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800b166:	7dfb      	ldrb	r3, [r7, #23]
 800b168:	e000      	b.n	800b16c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 800b16a:	2302      	movs	r3, #2
  }
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3718      	adds	r7, #24
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08a      	sub	sp, #40	; 0x28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	695b      	ldr	r3, [r3, #20]
 800b192:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800b194:	2300      	movs	r3, #0
 800b196:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800b198:	2300      	movs	r3, #0
 800b19a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	f003 030f 	and.w	r3, r3, #15
 800b1a2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10d      	bne.n	800b1c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	f003 0320 	and.w	r3, r3, #32
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d008      	beq.n	800b1c6 <HAL_UART_IRQHandler+0x52>
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	f003 0320 	and.w	r3, r3, #32
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fc6c 	bl	800ba9c <UART_Receive_IT>
      return;
 800b1c4:	e180      	b.n	800b4c8 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f000 80b4 	beq.w	800b336 <HAL_UART_IRQHandler+0x1c2>
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d105      	bne.n	800b1e4 <HAL_UART_IRQHandler+0x70>
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 80a9 	beq.w	800b336 <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00a      	beq.n	800b204 <HAL_UART_IRQHandler+0x90>
 800b1ee:	6a3b      	ldr	r3, [r7, #32]
 800b1f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d005      	beq.n	800b204 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fc:	f043 0201 	orr.w	r2, r3, #1
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	f003 0304 	and.w	r3, r3, #4
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00a      	beq.n	800b224 <HAL_UART_IRQHandler+0xb0>
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	d005      	beq.n	800b224 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21c:	f043 0202 	orr.w	r2, r3, #2
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	f003 0302 	and.w	r3, r3, #2
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00a      	beq.n	800b244 <HAL_UART_IRQHandler+0xd0>
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	2b00      	cmp	r3, #0
 800b236:	d005      	beq.n	800b244 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23c:	f043 0204 	orr.w	r2, r3, #4
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b246:	f003 0308 	and.w	r3, r3, #8
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00f      	beq.n	800b26e <HAL_UART_IRQHandler+0xfa>
 800b24e:	6a3b      	ldr	r3, [r7, #32]
 800b250:	f003 0320 	and.w	r3, r3, #32
 800b254:	2b00      	cmp	r3, #0
 800b256:	d104      	bne.n	800b262 <HAL_UART_IRQHandler+0xee>
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d005      	beq.n	800b26e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b266:	f043 0208 	orr.w	r2, r3, #8
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 8123 	beq.w	800b4be <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27a:	f003 0320 	and.w	r3, r3, #32
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d007      	beq.n	800b292 <HAL_UART_IRQHandler+0x11e>
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	f003 0320 	and.w	r3, r3, #32
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fc05 	bl	800ba9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	695b      	ldr	r3, [r3, #20]
 800b298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	bf14      	ite	ne
 800b2a0:	2301      	movne	r3, #1
 800b2a2:	2300      	moveq	r3, #0
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ac:	f003 0308 	and.w	r3, r3, #8
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d102      	bne.n	800b2ba <HAL_UART_IRQHandler+0x146>
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d033      	beq.n	800b322 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fb45 	bl	800b94a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	695b      	ldr	r3, [r3, #20]
 800b2c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d024      	beq.n	800b318 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	695a      	ldr	r2, [r3, #20]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d013      	beq.n	800b30e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ea:	4a79      	ldr	r2, [pc, #484]	; (800b4d0 <HAL_UART_IRQHandler+0x35c>)
 800b2ec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fb f868 	bl	80063c8 <HAL_DMA_Abort_IT>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d019      	beq.n	800b332 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b308:	4610      	mov	r0, r2
 800b30a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b30c:	e011      	b.n	800b332 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b316:	e00c      	b.n	800b332 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b320:	e007      	b.n	800b332 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b330:	e0c5      	b.n	800b4be <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b332:	bf00      	nop
    return;
 800b334:	e0c3      	b.n	800b4be <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	f040 80a3 	bne.w	800b486 <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b342:	f003 0310 	and.w	r3, r3, #16
 800b346:	2b00      	cmp	r3, #0
 800b348:	f000 809d 	beq.w	800b486 <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	f003 0310 	and.w	r3, r3, #16
 800b352:	2b00      	cmp	r3, #0
 800b354:	f000 8097 	beq.w	800b486 <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b358:	2300      	movs	r3, #0
 800b35a:	60fb      	str	r3, [r7, #12]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	60fb      	str	r3, [r7, #12]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	60fb      	str	r3, [r7, #12]
 800b36c:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d04f      	beq.n	800b41c <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800b386:	8a3b      	ldrh	r3, [r7, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f000 809a 	beq.w	800b4c2 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b392:	8a3a      	ldrh	r2, [r7, #16]
 800b394:	429a      	cmp	r2, r3
 800b396:	f080 8094 	bcs.w	800b4c2 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	8a3a      	ldrh	r2, [r7, #16]
 800b39e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a4:	699b      	ldr	r3, [r3, #24]
 800b3a6:	2b20      	cmp	r3, #32
 800b3a8:	d02b      	beq.n	800b402 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68da      	ldr	r2, [r3, #12]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3b8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	695a      	ldr	r2, [r3, #20]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f022 0201 	bic.w	r2, r2, #1
 800b3c8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	695a      	ldr	r2, [r3, #20]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3d8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2220      	movs	r2, #32
 800b3de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68da      	ldr	r2, [r3, #12]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f022 0210 	bic.w	r2, r2, #16
 800b3f6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fa ffa8 	bl	8006352 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b40e:	b292      	uxth	r2, r2
 800b410:	1a8a      	subs	r2, r1, r2
 800b412:	b292      	uxth	r2, r2
 800b414:	4611      	mov	r1, r2
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 800b41a:	e052      	b.n	800b4c2 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b424:	b29b      	uxth	r3, r3
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b42e:	b29b      	uxth	r3, r3
 800b430:	2b00      	cmp	r3, #0
 800b432:	d048      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 800b434:	8a7b      	ldrh	r3, [r7, #18]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d045      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	68da      	ldr	r2, [r3, #12]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b448:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	695a      	ldr	r2, [r3, #20]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f022 0201 	bic.w	r2, r2, #1
 800b458:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2220      	movs	r2, #32
 800b45e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68da      	ldr	r2, [r3, #12]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f022 0210 	bic.w	r2, r2, #16
 800b476:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b47c:	8a7a      	ldrh	r2, [r7, #18]
 800b47e:	4611      	mov	r1, r2
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 800b484:	e01f      	b.n	800b4c6 <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d008      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x32e>
 800b490:	6a3b      	ldr	r3, [r7, #32]
 800b492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa96 	bl	800b9cc <UART_Transmit_IT>
    return;
 800b4a0:	e012      	b.n	800b4c8 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00d      	beq.n	800b4c8 <HAL_UART_IRQHandler+0x354>
 800b4ac:	6a3b      	ldr	r3, [r7, #32]
 800b4ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d008      	beq.n	800b4c8 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fad7 	bl	800ba6a <UART_EndTransmit_IT>
    return;
 800b4bc:	e004      	b.n	800b4c8 <HAL_UART_IRQHandler+0x354>
    return;
 800b4be:	bf00      	nop
 800b4c0:	e002      	b.n	800b4c8 <HAL_UART_IRQHandler+0x354>
      return;
 800b4c2:	bf00      	nop
 800b4c4:	e000      	b.n	800b4c8 <HAL_UART_IRQHandler+0x354>
      return;
 800b4c6:	bf00      	nop
  }
}
 800b4c8:	3728      	adds	r7, #40	; 0x28
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	0800b9a3 	.word	0x0800b9a3

0800b4d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b4dc:	bf00      	nop
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bc80      	pop	{r7}
 800b4e4:	4770      	bx	lr

0800b4e6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b4e6:	b480      	push	{r7}
 800b4e8:	b083      	sub	sp, #12
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b4ee:	bf00      	nop
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bc80      	pop	{r7}
 800b4f6:	4770      	bx	lr

0800b4f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	bc80      	pop	{r7}
 800b508:	4770      	bx	lr

0800b50a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b50a:	b480      	push	{r7}
 800b50c:	b083      	sub	sp, #12
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b512:	bf00      	nop
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	bc80      	pop	{r7}
 800b51a:	4770      	bx	lr

0800b51c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	bc80      	pop	{r7}
 800b52c:	4770      	bx	lr

0800b52e <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b52e:	b480      	push	{r7}
 800b530:	b083      	sub	sp, #12
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b536:	bf00      	nop
 800b538:	370c      	adds	r7, #12
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bc80      	pop	{r7}
 800b53e:	4770      	bx	lr

0800b540 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bc80      	pop	{r7}
 800b550:	4770      	bx	lr

0800b552 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b552:	b480      	push	{r7}
 800b554:	b083      	sub	sp, #12
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b55a:	bf00      	nop
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	bc80      	pop	{r7}
 800b562:	4770      	bx	lr

0800b564 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	bc80      	pop	{r7}
 800b578:	4770      	bx	lr
	...

0800b57c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a0f      	ldr	r2, [pc, #60]	; (800b5c4 <UART_InitCallbacksToDefault+0x48>)
 800b588:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a0e      	ldr	r2, [pc, #56]	; (800b5c8 <UART_InitCallbacksToDefault+0x4c>)
 800b58e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a0e      	ldr	r2, [pc, #56]	; (800b5cc <UART_InitCallbacksToDefault+0x50>)
 800b594:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4a0d      	ldr	r2, [pc, #52]	; (800b5d0 <UART_InitCallbacksToDefault+0x54>)
 800b59a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a0d      	ldr	r2, [pc, #52]	; (800b5d4 <UART_InitCallbacksToDefault+0x58>)
 800b5a0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a0c      	ldr	r2, [pc, #48]	; (800b5d8 <UART_InitCallbacksToDefault+0x5c>)
 800b5a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a0c      	ldr	r2, [pc, #48]	; (800b5dc <UART_InitCallbacksToDefault+0x60>)
 800b5ac:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a0b      	ldr	r2, [pc, #44]	; (800b5e0 <UART_InitCallbacksToDefault+0x64>)
 800b5b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a0b      	ldr	r2, [pc, #44]	; (800b5e4 <UART_InitCallbacksToDefault+0x68>)
 800b5b8:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b5ba:	bf00      	nop
 800b5bc:	370c      	adds	r7, #12
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bc80      	pop	{r7}
 800b5c2:	4770      	bx	lr
 800b5c4:	0800b4e7 	.word	0x0800b4e7
 800b5c8:	0800b4d5 	.word	0x0800b4d5
 800b5cc:	0800b50b 	.word	0x0800b50b
 800b5d0:	0800b4f9 	.word	0x0800b4f9
 800b5d4:	0800b51d 	.word	0x0800b51d
 800b5d8:	0800b52f 	.word	0x0800b52f
 800b5dc:	0800b541 	.word	0x0800b541
 800b5e0:	0800b553 	.word	0x0800b553
 800b5e4:	0800b565 	.word	0x0800b565

0800b5e8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f003 0320 	and.w	r3, r3, #32
 800b600:	2b00      	cmp	r3, #0
 800b602:	d12a      	bne.n	800b65a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68da      	ldr	r2, [r3, #12]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b618:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	695a      	ldr	r2, [r3, #20]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f022 0201 	bic.w	r2, r2, #1
 800b628:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	695a      	ldr	r2, [r3, #20]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b638:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2220      	movs	r2, #32
 800b63e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b646:	2b01      	cmp	r3, #1
 800b648:	d107      	bne.n	800b65a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68da      	ldr	r2, [r3, #12]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f022 0210 	bic.w	r2, r2, #16
 800b658:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d107      	bne.n	800b672 <UART_DMAReceiveCplt+0x8a>
  {  
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b66a:	4611      	mov	r1, r2
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b670:	e003      	b.n	800b67a <UART_DMAReceiveCplt+0x92>
    huart->RxCpltCallback(huart);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	4798      	blx	r3
}
 800b67a:	bf00      	nop
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b084      	sub	sp, #16
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b694:	2b01      	cmp	r3, #1
 800b696:	d109      	bne.n	800b6ac <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b6a0:	0852      	lsrs	r2, r2, #1
 800b6a2:	b292      	uxth	r2, r2
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6aa:	e003      	b.n	800b6b4 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	4798      	blx	r3
}
 800b6b4:	bf00      	nop
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	bf14      	ite	ne
 800b6dc:	2301      	movne	r3, #1
 800b6de:	2300      	moveq	r3, #0
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b21      	cmp	r3, #33	; 0x21
 800b6ee:	d108      	bne.n	800b702 <UART_DMAError+0x46>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d005      	beq.n	800b702 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b6fc:	68b8      	ldr	r0, [r7, #8]
 800b6fe:	f000 f90f 	bl	800b920 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	695b      	ldr	r3, [r3, #20]
 800b708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	bf14      	ite	ne
 800b710:	2301      	movne	r3, #1
 800b712:	2300      	moveq	r3, #0
 800b714:	b2db      	uxtb	r3, r3
 800b716:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	2b22      	cmp	r3, #34	; 0x22
 800b722:	d108      	bne.n	800b736 <UART_DMAError+0x7a>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d005      	beq.n	800b736 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2200      	movs	r2, #0
 800b72e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b730:	68b8      	ldr	r0, [r7, #8]
 800b732:	f000 f90a 	bl	800b94a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b73a:	f043 0210 	orr.w	r2, r3, #16
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b746:	68b8      	ldr	r0, [r7, #8]
 800b748:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b74a:	bf00      	nop
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b084      	sub	sp, #16
 800b756:	af00      	add	r7, sp, #0
 800b758:	60f8      	str	r0, [r7, #12]
 800b75a:	60b9      	str	r1, [r7, #8]
 800b75c:	603b      	str	r3, [r7, #0]
 800b75e:	4613      	mov	r3, r2
 800b760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b762:	e02c      	b.n	800b7be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76a:	d028      	beq.n	800b7be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d007      	beq.n	800b782 <UART_WaitOnFlagUntilTimeout+0x30>
 800b772:	f7fa fc2f 	bl	8005fd4 <HAL_GetTick>
 800b776:	4602      	mov	r2, r0
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	69ba      	ldr	r2, [r7, #24]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d21d      	bcs.n	800b7be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68da      	ldr	r2, [r3, #12]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b790:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	695a      	ldr	r2, [r3, #20]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f022 0201 	bic.w	r2, r2, #1
 800b7a0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2220      	movs	r2, #32
 800b7a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2220      	movs	r2, #32
 800b7ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b7ba:	2303      	movs	r3, #3
 800b7bc:	e00f      	b.n	800b7de <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	bf0c      	ite	eq
 800b7ce:	2301      	moveq	r3, #1
 800b7d0:	2300      	movne	r3, #0
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d0c3      	beq.n	800b764 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7e6:	b480      	push	{r7}
 800b7e8:	b085      	sub	sp, #20
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	60f8      	str	r0, [r7, #12]
 800b7ee:	60b9      	str	r1, [r7, #8]
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	68ba      	ldr	r2, [r7, #8]
 800b7f8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	88fa      	ldrh	r2, [r7, #6]
 800b7fe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	88fa      	ldrh	r2, [r7, #6]
 800b804:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2222      	movs	r2, #34	; 0x22
 800b810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68da      	ldr	r2, [r3, #12]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b82a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	695a      	ldr	r2, [r3, #20]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f042 0201 	orr.w	r2, r2, #1
 800b83a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	68da      	ldr	r2, [r3, #12]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f042 0220 	orr.w	r2, r2, #32
 800b84a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3714      	adds	r7, #20
 800b852:	46bd      	mov	sp, r7
 800b854:	bc80      	pop	{r7}
 800b856:	4770      	bx	lr

0800b858 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	4613      	mov	r3, r2
 800b864:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b866:	68ba      	ldr	r2, [r7, #8]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	88fa      	ldrh	r2, [r7, #6]
 800b870:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2200      	movs	r2, #0
 800b876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2222      	movs	r2, #34	; 0x22
 800b87c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b884:	4a23      	ldr	r2, [pc, #140]	; (800b914 <UART_Start_Receive_DMA+0xbc>)
 800b886:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b88c:	4a22      	ldr	r2, [pc, #136]	; (800b918 <UART_Start_Receive_DMA+0xc0>)
 800b88e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b894:	4a21      	ldr	r2, [pc, #132]	; (800b91c <UART_Start_Receive_DMA+0xc4>)
 800b896:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89c:	2200      	movs	r2, #0
 800b89e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b8a0:	f107 0308 	add.w	r3, r7, #8
 800b8a4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	88fb      	ldrh	r3, [r7, #6]
 800b8b8:	f7fa fcec 	bl	8006294 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b8bc:	2300      	movs	r3, #0
 800b8be:	613b      	str	r3, [r7, #16]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	613b      	str	r3, [r7, #16]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	613b      	str	r3, [r7, #16]
 800b8d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	68da      	ldr	r2, [r3, #12]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8e8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	695a      	ldr	r2, [r3, #20]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f042 0201 	orr.w	r2, r2, #1
 800b8f8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	695a      	ldr	r2, [r3, #20]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b908:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3718      	adds	r7, #24
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	0800b5e9 	.word	0x0800b5e9
 800b918:	0800b683 	.word	0x0800b683
 800b91c:	0800b6bd 	.word	0x0800b6bd

0800b920 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68da      	ldr	r2, [r3, #12]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b936:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2220      	movs	r2, #32
 800b93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	bc80      	pop	{r7}
 800b948:	4770      	bx	lr

0800b94a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b94a:	b480      	push	{r7}
 800b94c:	b083      	sub	sp, #12
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68da      	ldr	r2, [r3, #12]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b960:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	695a      	ldr	r2, [r3, #20]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f022 0201 	bic.w	r2, r2, #1
 800b970:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b976:	2b01      	cmp	r3, #1
 800b978:	d107      	bne.n	800b98a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68da      	ldr	r2, [r3, #12]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f022 0210 	bic.w	r2, r2, #16
 800b988:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2220      	movs	r2, #32
 800b98e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b998:	bf00      	nop
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bc80      	pop	{r7}
 800b9a0:	4770      	bx	lr

0800b9a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9c4:	bf00      	nop
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	2b21      	cmp	r3, #33	; 0x21
 800b9de:	d13e      	bne.n	800ba5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9e8:	d114      	bne.n	800ba14 <UART_Transmit_IT+0x48>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d110      	bne.n	800ba14 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	881b      	ldrh	r3, [r3, #0]
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a1b      	ldr	r3, [r3, #32]
 800ba0c:	1c9a      	adds	r2, r3, #2
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	621a      	str	r2, [r3, #32]
 800ba12:	e008      	b.n	800ba26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a1b      	ldr	r3, [r3, #32]
 800ba18:	1c59      	adds	r1, r3, #1
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	6211      	str	r1, [r2, #32]
 800ba1e:	781a      	ldrb	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	4619      	mov	r1, r3
 800ba34:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10f      	bne.n	800ba5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68da      	ldr	r2, [r3, #12]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68da      	ldr	r2, [r3, #12]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	e000      	b.n	800ba60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ba5e:	2302      	movs	r3, #2
  }
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3714      	adds	r7, #20
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bc80      	pop	{r7}
 800ba68:	4770      	bx	lr

0800ba6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68da      	ldr	r2, [r3, #12]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2220      	movs	r2, #32
 800ba86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3708      	adds	r7, #8
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b086      	sub	sp, #24
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b22      	cmp	r3, #34	; 0x22
 800baae:	f040 809b 	bne.w	800bbe8 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baba:	d117      	bne.n	800baec <UART_Receive_IT+0x50>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d113      	bne.n	800baec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bac4:	2300      	movs	r3, #0
 800bac6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bacc:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bada:	b29a      	uxth	r2, r3
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae4:	1c9a      	adds	r2, r3, #2
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	629a      	str	r2, [r3, #40]	; 0x28
 800baea:	e026      	b.n	800bb3a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800baf2:	2300      	movs	r3, #0
 800baf4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bafe:	d007      	beq.n	800bb10 <UART_Receive_IT+0x74>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10a      	bne.n	800bb1e <UART_Receive_IT+0x82>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d106      	bne.n	800bb1e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	701a      	strb	r2, [r3, #0]
 800bb1c:	e008      	b.n	800bb30 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb34:	1c5a      	adds	r2, r3, #1
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	3b01      	subs	r3, #1
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	4619      	mov	r1, r3
 800bb48:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d14a      	bne.n	800bbe4 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68da      	ldr	r2, [r3, #12]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f022 0220 	bic.w	r2, r2, #32
 800bb5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68da      	ldr	r2, [r3, #12]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	695a      	ldr	r2, [r3, #20]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f022 0201 	bic.w	r2, r2, #1
 800bb7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2220      	movs	r2, #32
 800bb82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d124      	bne.n	800bbd8 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68da      	ldr	r2, [r3, #12]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f022 0210 	bic.w	r2, r2, #16
 800bba2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f003 0310 	and.w	r3, r3, #16
 800bbae:	2b10      	cmp	r3, #16
 800bbb0:	d10a      	bne.n	800bbc8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	60fb      	str	r3, [r7, #12]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	60fb      	str	r3, [r7, #12]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	4798      	blx	r3
 800bbd6:	e003      	b.n	800bbe0 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	e002      	b.n	800bbea <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	e000      	b.n	800bbea <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800bbe8:	2302      	movs	r3, #2
  }
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3718      	adds	r7, #24
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
	...

0800bbf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	68da      	ldr	r2, [r3, #12]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	430a      	orrs	r2, r1
 800bc10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	689a      	ldr	r2, [r3, #8]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	431a      	orrs	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bc2e:	f023 030c 	bic.w	r3, r3, #12
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	6812      	ldr	r2, [r2, #0]
 800bc36:	68b9      	ldr	r1, [r7, #8]
 800bc38:	430b      	orrs	r3, r1
 800bc3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	695b      	ldr	r3, [r3, #20]
 800bc42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	699a      	ldr	r2, [r3, #24]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	430a      	orrs	r2, r1
 800bc50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a2c      	ldr	r2, [pc, #176]	; (800bd08 <UART_SetConfig+0x114>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d103      	bne.n	800bc64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bc5c:	f7fd fd66 	bl	800972c <HAL_RCC_GetPCLK2Freq>
 800bc60:	60f8      	str	r0, [r7, #12]
 800bc62:	e002      	b.n	800bc6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bc64:	f7fd fd4e 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800bc68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4413      	add	r3, r2
 800bc72:	009a      	lsls	r2, r3, #2
 800bc74:	441a      	add	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc80:	4a22      	ldr	r2, [pc, #136]	; (800bd0c <UART_SetConfig+0x118>)
 800bc82:	fba2 2303 	umull	r2, r3, r2, r3
 800bc86:	095b      	lsrs	r3, r3, #5
 800bc88:	0119      	lsls	r1, r3, #4
 800bc8a:	68fa      	ldr	r2, [r7, #12]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	4413      	add	r3, r2
 800bc92:	009a      	lsls	r2, r3, #2
 800bc94:	441a      	add	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	fbb2 f2f3 	udiv	r2, r2, r3
 800bca0:	4b1a      	ldr	r3, [pc, #104]	; (800bd0c <UART_SetConfig+0x118>)
 800bca2:	fba3 0302 	umull	r0, r3, r3, r2
 800bca6:	095b      	lsrs	r3, r3, #5
 800bca8:	2064      	movs	r0, #100	; 0x64
 800bcaa:	fb00 f303 	mul.w	r3, r0, r3
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	011b      	lsls	r3, r3, #4
 800bcb2:	3332      	adds	r3, #50	; 0x32
 800bcb4:	4a15      	ldr	r2, [pc, #84]	; (800bd0c <UART_SetConfig+0x118>)
 800bcb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcba:	095b      	lsrs	r3, r3, #5
 800bcbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcc0:	4419      	add	r1, r3
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	4413      	add	r3, r2
 800bcca:	009a      	lsls	r2, r3, #2
 800bccc:	441a      	add	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bcd8:	4b0c      	ldr	r3, [pc, #48]	; (800bd0c <UART_SetConfig+0x118>)
 800bcda:	fba3 0302 	umull	r0, r3, r3, r2
 800bcde:	095b      	lsrs	r3, r3, #5
 800bce0:	2064      	movs	r0, #100	; 0x64
 800bce2:	fb00 f303 	mul.w	r3, r0, r3
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	011b      	lsls	r3, r3, #4
 800bcea:	3332      	adds	r3, #50	; 0x32
 800bcec:	4a07      	ldr	r2, [pc, #28]	; (800bd0c <UART_SetConfig+0x118>)
 800bcee:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf2:	095b      	lsrs	r3, r3, #5
 800bcf4:	f003 020f 	and.w	r2, r3, #15
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	440a      	add	r2, r1
 800bcfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bd00:	bf00      	nop
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	40013800 	.word	0x40013800
 800bd0c:	51eb851f 	.word	0x51eb851f

0800bd10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	4603      	mov	r3, r0
 800bd18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bd1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd22:	2b84      	cmp	r3, #132	; 0x84
 800bd24:	d005      	beq.n	800bd32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bd26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	3303      	adds	r3, #3
 800bd30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bd32:	68fb      	ldr	r3, [r7, #12]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3714      	adds	r7, #20
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bc80      	pop	{r7}
 800bd3c:	4770      	bx	lr

0800bd3e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bd3e:	b480      	push	{r7}
 800bd40:	b083      	sub	sp, #12
 800bd42:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd44:	f3ef 8305 	mrs	r3, IPSR
 800bd48:	607b      	str	r3, [r7, #4]
  return(result);
 800bd4a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	bf14      	ite	ne
 800bd50:	2301      	movne	r3, #1
 800bd52:	2300      	moveq	r3, #0
 800bd54:	b2db      	uxtb	r3, r3
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	370c      	adds	r7, #12
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bc80      	pop	{r7}
 800bd5e:	4770      	bx	lr

0800bd60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bd64:	f001 fbd0 	bl	800d508 <vTaskStartScheduler>
  
  return osOK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bd72:	f7ff ffe4 	bl	800bd3e <inHandlerMode>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bd7c:	f001 fce2 	bl	800d744 <xTaskGetTickCountFromISR>
 800bd80:	4603      	mov	r3, r0
 800bd82:	e002      	b.n	800bd8a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bd84:	f001 fcd0 	bl	800d728 <xTaskGetTickCount>
 800bd88:	4603      	mov	r3, r0
  }
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bd8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd90:	b089      	sub	sp, #36	; 0x24
 800bd92:	af04      	add	r7, sp, #16
 800bd94:	6078      	str	r0, [r7, #4]
 800bd96:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	695b      	ldr	r3, [r3, #20]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d020      	beq.n	800bde2 <osThreadCreate+0x54>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d01c      	beq.n	800bde2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	685c      	ldr	r4, [r3, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681d      	ldr	r5, [r3, #0]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	691e      	ldr	r6, [r3, #16]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7ff ffa8 	bl	800bd10 <makeFreeRtosPriority>
 800bdc0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	695b      	ldr	r3, [r3, #20]
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bdca:	9202      	str	r2, [sp, #8]
 800bdcc:	9301      	str	r3, [sp, #4]
 800bdce:	9100      	str	r1, [sp, #0]
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	4632      	mov	r2, r6
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f001 f9cf 	bl	800d17a <xTaskCreateStatic>
 800bddc:	4603      	mov	r3, r0
 800bdde:	60fb      	str	r3, [r7, #12]
 800bde0:	e01c      	b.n	800be1c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	685c      	ldr	r4, [r3, #4]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bdee:	b29e      	uxth	r6, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7ff ff8a 	bl	800bd10 <makeFreeRtosPriority>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	f107 030c 	add.w	r3, r7, #12
 800be02:	9301      	str	r3, [sp, #4]
 800be04:	9200      	str	r2, [sp, #0]
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	4632      	mov	r2, r6
 800be0a:	4629      	mov	r1, r5
 800be0c:	4620      	mov	r0, r4
 800be0e:	f001 fa10 	bl	800d232 <xTaskCreate>
 800be12:	4603      	mov	r3, r0
 800be14:	2b01      	cmp	r3, #1
 800be16:	d001      	beq.n	800be1c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800be18:	2300      	movs	r3, #0
 800be1a:	e000      	b.n	800be1e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800be1c:	68fb      	ldr	r3, [r7, #12]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3714      	adds	r7, #20
 800be22:	46bd      	mov	sp, r7
 800be24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b084      	sub	sp, #16
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <osDelay+0x16>
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	e000      	b.n	800be3e <osDelay+0x18>
 800be3c:	2301      	movs	r3, #1
 800be3e:	4618      	mov	r0, r3
 800be40:	f001 fb2e 	bl	800d4a0 <vTaskDelay>
  
  return osOK;
 800be44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
	...

0800be50 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af02      	add	r7, sp, #8
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	460b      	mov	r3, r1
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d013      	beq.n	800be8e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800be66:	7afb      	ldrb	r3, [r7, #11]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d101      	bne.n	800be70 <osTimerCreate+0x20>
 800be6c:	2101      	movs	r1, #1
 800be6e:	e000      	b.n	800be72 <osTimerCreate+0x22>
 800be70:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800be7a:	9201      	str	r2, [sp, #4]
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	460a      	mov	r2, r1
 800be82:	2101      	movs	r1, #1
 800be84:	480b      	ldr	r0, [pc, #44]	; (800beb4 <osTimerCreate+0x64>)
 800be86:	f002 fa62 	bl	800e34e <xTimerCreateStatic>
 800be8a:	4603      	mov	r3, r0
 800be8c:	e00e      	b.n	800beac <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800be8e:	7afb      	ldrb	r3, [r7, #11]
 800be90:	2b01      	cmp	r3, #1
 800be92:	d101      	bne.n	800be98 <osTimerCreate+0x48>
 800be94:	2201      	movs	r2, #1
 800be96:	e000      	b.n	800be9a <osTimerCreate+0x4a>
 800be98:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2101      	movs	r1, #1
 800bea4:	4803      	ldr	r0, [pc, #12]	; (800beb4 <osTimerCreate+0x64>)
 800bea6:	f002 fa31 	bl	800e30c <xTimerCreate>
 800beaa:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800beac:	4618      	mov	r0, r3
 800beae:	3710      	adds	r7, #16
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	08013c4c 	.word	0x08013c4c

0800beb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f103 0208 	add.w	r2, r3, #8
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f04f 32ff 	mov.w	r2, #4294967295
 800bed0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f103 0208 	add.w	r2, r3, #8
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f103 0208 	add.w	r2, r3, #8
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800beec:	bf00      	nop
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bc80      	pop	{r7}
 800bef4:	4770      	bx	lr

0800bef6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bef6:	b480      	push	{r7}
 800bef8:	b083      	sub	sp, #12
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf04:	bf00      	nop
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bc80      	pop	{r7}
 800bf0c:	4770      	bx	lr

0800bf0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf0e:	b480      	push	{r7}
 800bf10:	b085      	sub	sp, #20
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	689a      	ldr	r2, [r3, #8]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	683a      	ldr	r2, [r7, #0]
 800bf32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	1c5a      	adds	r2, r3, #1
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	601a      	str	r2, [r3, #0]
}
 800bf4a:	bf00      	nop
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bc80      	pop	{r7}
 800bf52:	4770      	bx	lr

0800bf54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6a:	d103      	bne.n	800bf74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	60fb      	str	r3, [r7, #12]
 800bf72:	e00c      	b.n	800bf8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	3308      	adds	r3, #8
 800bf78:	60fb      	str	r3, [r7, #12]
 800bf7a:	e002      	b.n	800bf82 <vListInsert+0x2e>
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	60fb      	str	r3, [r7, #12]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d2f6      	bcs.n	800bf7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	685a      	ldr	r2, [r3, #4]
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	683a      	ldr	r2, [r7, #0]
 800bf9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	1c5a      	adds	r2, r3, #1
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	601a      	str	r2, [r3, #0]
}
 800bfba:	bf00      	nop
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bc80      	pop	{r7}
 800bfc2:	4770      	bx	lr

0800bfc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	6892      	ldr	r2, [r2, #8]
 800bfda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	6852      	ldr	r2, [r2, #4]
 800bfe4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d103      	bne.n	800bff8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	689a      	ldr	r2, [r3, #8]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	1e5a      	subs	r2, r3, #1
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3714      	adds	r7, #20
 800c010:	46bd      	mov	sp, r7
 800c012:	bc80      	pop	{r7}
 800c014:	4770      	bx	lr
	...

0800c018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10a      	bne.n	800c042 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c03e:	bf00      	nop
 800c040:	e7fe      	b.n	800c040 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c042:	f002 fd93 	bl	800eb6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c04e:	68f9      	ldr	r1, [r7, #12]
 800c050:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c052:	fb01 f303 	mul.w	r3, r1, r3
 800c056:	441a      	add	r2, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2200      	movs	r2, #0
 800c060:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c072:	3b01      	subs	r3, #1
 800c074:	68f9      	ldr	r1, [r7, #12]
 800c076:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c078:	fb01 f303 	mul.w	r3, r1, r3
 800c07c:	441a      	add	r2, r3
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	22ff      	movs	r2, #255	; 0xff
 800c086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	22ff      	movs	r2, #255	; 0xff
 800c08e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d114      	bne.n	800c0c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	691b      	ldr	r3, [r3, #16]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d01a      	beq.n	800c0d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	3310      	adds	r3, #16
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f001 fcc7 	bl	800da38 <xTaskRemoveFromEventList>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d012      	beq.n	800c0d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c0b0:	4b0c      	ldr	r3, [pc, #48]	; (800c0e4 <xQueueGenericReset+0xcc>)
 800c0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0b6:	601a      	str	r2, [r3, #0]
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	e009      	b.n	800c0d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3310      	adds	r3, #16
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7ff fef6 	bl	800beb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3324      	adds	r3, #36	; 0x24
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7ff fef1 	bl	800beb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c0d6:	f002 fd79 	bl	800ebcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c0da:	2301      	movs	r3, #1
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	e000ed04 	.word	0xe000ed04

0800c0e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b08e      	sub	sp, #56	; 0x38
 800c0ec:	af02      	add	r7, sp, #8
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	607a      	str	r2, [r7, #4]
 800c0f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d10a      	bne.n	800c112 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c100:	f383 8811 	msr	BASEPRI, r3
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c10e:	bf00      	nop
 800c110:	e7fe      	b.n	800c110 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10a      	bne.n	800c12e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11c:	f383 8811 	msr	BASEPRI, r3
 800c120:	f3bf 8f6f 	isb	sy
 800c124:	f3bf 8f4f 	dsb	sy
 800c128:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c12a:	bf00      	nop
 800c12c:	e7fe      	b.n	800c12c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d002      	beq.n	800c13a <xQueueGenericCreateStatic+0x52>
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d001      	beq.n	800c13e <xQueueGenericCreateStatic+0x56>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e000      	b.n	800c140 <xQueueGenericCreateStatic+0x58>
 800c13e:	2300      	movs	r3, #0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10a      	bne.n	800c15a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	623b      	str	r3, [r7, #32]
}
 800c156:	bf00      	nop
 800c158:	e7fe      	b.n	800c158 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d102      	bne.n	800c166 <xQueueGenericCreateStatic+0x7e>
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d101      	bne.n	800c16a <xQueueGenericCreateStatic+0x82>
 800c166:	2301      	movs	r3, #1
 800c168:	e000      	b.n	800c16c <xQueueGenericCreateStatic+0x84>
 800c16a:	2300      	movs	r3, #0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10a      	bne.n	800c186 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	61fb      	str	r3, [r7, #28]
}
 800c182:	bf00      	nop
 800c184:	e7fe      	b.n	800c184 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c186:	2348      	movs	r3, #72	; 0x48
 800c188:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2b48      	cmp	r3, #72	; 0x48
 800c18e:	d00a      	beq.n	800c1a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	61bb      	str	r3, [r7, #24]
}
 800c1a2:	bf00      	nop
 800c1a4:	e7fe      	b.n	800c1a4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00d      	beq.n	800c1cc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1b8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	68b9      	ldr	r1, [r7, #8]
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	f000 f843 	bl	800c252 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800c1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3730      	adds	r7, #48	; 0x30
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b08a      	sub	sp, #40	; 0x28
 800c1da:	af02      	add	r7, sp, #8
 800c1dc:	60f8      	str	r0, [r7, #12]
 800c1de:	60b9      	str	r1, [r7, #8]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10a      	bne.n	800c200 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ee:	f383 8811 	msr	BASEPRI, r3
 800c1f2:	f3bf 8f6f 	isb	sy
 800c1f6:	f3bf 8f4f 	dsb	sy
 800c1fa:	613b      	str	r3, [r7, #16]
}
 800c1fc:	bf00      	nop
 800c1fe:	e7fe      	b.n	800c1fe <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d102      	bne.n	800c20c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c206:	2300      	movs	r3, #0
 800c208:	61fb      	str	r3, [r7, #28]
 800c20a:	e004      	b.n	800c216 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	fb02 f303 	mul.w	r3, r2, r3
 800c214:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	3348      	adds	r3, #72	; 0x48
 800c21a:	4618      	mov	r0, r3
 800c21c:	f002 fda6 	bl	800ed6c <pvPortMalloc>
 800c220:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00f      	beq.n	800c248 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	3348      	adds	r3, #72	; 0x48
 800c22c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	2200      	movs	r2, #0
 800c232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c236:	79fa      	ldrb	r2, [r7, #7]
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	4613      	mov	r3, r2
 800c23e:	697a      	ldr	r2, [r7, #20]
 800c240:	68b9      	ldr	r1, [r7, #8]
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f000 f805 	bl	800c252 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800c248:	69bb      	ldr	r3, [r7, #24]
	}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3720      	adds	r7, #32
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b084      	sub	sp, #16
 800c256:	af00      	add	r7, sp, #0
 800c258:	60f8      	str	r0, [r7, #12]
 800c25a:	60b9      	str	r1, [r7, #8]
 800c25c:	607a      	str	r2, [r7, #4]
 800c25e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d103      	bne.n	800c26e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	69ba      	ldr	r2, [r7, #24]
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	e002      	b.n	800c274 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c280:	2101      	movs	r1, #1
 800c282:	69b8      	ldr	r0, [r7, #24]
 800c284:	f7ff fec8 	bl	800c018 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c288:	bf00      	nop
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b08e      	sub	sp, #56	; 0x38
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10a      	bne.n	800c2c2 <xQueueGenericSend+0x32>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2be:	bf00      	nop
 800c2c0:	e7fe      	b.n	800c2c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d103      	bne.n	800c2d0 <xQueueGenericSend+0x40>
 800c2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d101      	bne.n	800c2d4 <xQueueGenericSend+0x44>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e000      	b.n	800c2d6 <xQueueGenericSend+0x46>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10a      	bne.n	800c2f0 <xQueueGenericSend+0x60>
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2ec:	bf00      	nop
 800c2ee:	e7fe      	b.n	800c2ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2b02      	cmp	r3, #2
 800c2f4:	d103      	bne.n	800c2fe <xQueueGenericSend+0x6e>
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d101      	bne.n	800c302 <xQueueGenericSend+0x72>
 800c2fe:	2301      	movs	r3, #1
 800c300:	e000      	b.n	800c304 <xQueueGenericSend+0x74>
 800c302:	2300      	movs	r3, #0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10a      	bne.n	800c31e <xQueueGenericSend+0x8e>
	__asm volatile
 800c308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30c:	f383 8811 	msr	BASEPRI, r3
 800c310:	f3bf 8f6f 	isb	sy
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	623b      	str	r3, [r7, #32]
}
 800c31a:	bf00      	nop
 800c31c:	e7fe      	b.n	800c31c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c31e:	f001 fd7f 	bl	800de20 <xTaskGetSchedulerState>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d102      	bne.n	800c32e <xQueueGenericSend+0x9e>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <xQueueGenericSend+0xa2>
 800c32e:	2301      	movs	r3, #1
 800c330:	e000      	b.n	800c334 <xQueueGenericSend+0xa4>
 800c332:	2300      	movs	r3, #0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10a      	bne.n	800c34e <xQueueGenericSend+0xbe>
	__asm volatile
 800c338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33c:	f383 8811 	msr	BASEPRI, r3
 800c340:	f3bf 8f6f 	isb	sy
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	61fb      	str	r3, [r7, #28]
}
 800c34a:	bf00      	nop
 800c34c:	e7fe      	b.n	800c34c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c34e:	f002 fc0d 	bl	800eb6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d302      	bcc.n	800c364 <xQueueGenericSend+0xd4>
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b02      	cmp	r3, #2
 800c362:	d129      	bne.n	800c3b8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c364:	683a      	ldr	r2, [r7, #0]
 800c366:	68b9      	ldr	r1, [r7, #8]
 800c368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c36a:	f000 fa07 	bl	800c77c <prvCopyDataToQueue>
 800c36e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c374:	2b00      	cmp	r3, #0
 800c376:	d010      	beq.n	800c39a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37a:	3324      	adds	r3, #36	; 0x24
 800c37c:	4618      	mov	r0, r3
 800c37e:	f001 fb5b 	bl	800da38 <xTaskRemoveFromEventList>
 800c382:	4603      	mov	r3, r0
 800c384:	2b00      	cmp	r3, #0
 800c386:	d013      	beq.n	800c3b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c388:	4b3f      	ldr	r3, [pc, #252]	; (800c488 <xQueueGenericSend+0x1f8>)
 800c38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c38e:	601a      	str	r2, [r3, #0]
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	e00a      	b.n	800c3b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d007      	beq.n	800c3b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c3a0:	4b39      	ldr	r3, [pc, #228]	; (800c488 <xQueueGenericSend+0x1f8>)
 800c3a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a6:	601a      	str	r2, [r3, #0]
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c3b0:	f002 fc0c 	bl	800ebcc <vPortExitCritical>
				return pdPASS;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e063      	b.n	800c480 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d103      	bne.n	800c3c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c3be:	f002 fc05 	bl	800ebcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	e05c      	b.n	800c480 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d106      	bne.n	800c3da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3cc:	f107 0314 	add.w	r3, r7, #20
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f001 fbb9 	bl	800db48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3da:	f002 fbf7 	bl	800ebcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3de:	f001 f8f9 	bl	800d5d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3e2:	f002 fbc3 	bl	800eb6c <vPortEnterCritical>
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3ec:	b25b      	sxtb	r3, r3
 800c3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f2:	d103      	bne.n	800c3fc <xQueueGenericSend+0x16c>
 800c3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c402:	b25b      	sxtb	r3, r3
 800c404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c408:	d103      	bne.n	800c412 <xQueueGenericSend+0x182>
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	2200      	movs	r2, #0
 800c40e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c412:	f002 fbdb 	bl	800ebcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c416:	1d3a      	adds	r2, r7, #4
 800c418:	f107 0314 	add.w	r3, r7, #20
 800c41c:	4611      	mov	r1, r2
 800c41e:	4618      	mov	r0, r3
 800c420:	f001 fba8 	bl	800db74 <xTaskCheckForTimeOut>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d124      	bne.n	800c474 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c42a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c42c:	f000 fa9e 	bl	800c96c <prvIsQueueFull>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d018      	beq.n	800c468 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	3310      	adds	r3, #16
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	4611      	mov	r1, r2
 800c43e:	4618      	mov	r0, r3
 800c440:	f001 faaa 	bl	800d998 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c446:	f000 fa29 	bl	800c89c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c44a:	f001 f8d1 	bl	800d5f0 <xTaskResumeAll>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	f47f af7c 	bne.w	800c34e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c456:	4b0c      	ldr	r3, [pc, #48]	; (800c488 <xQueueGenericSend+0x1f8>)
 800c458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c45c:	601a      	str	r2, [r3, #0]
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	e772      	b.n	800c34e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c46a:	f000 fa17 	bl	800c89c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c46e:	f001 f8bf 	bl	800d5f0 <xTaskResumeAll>
 800c472:	e76c      	b.n	800c34e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c476:	f000 fa11 	bl	800c89c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c47a:	f001 f8b9 	bl	800d5f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c47e:	2300      	movs	r3, #0
		}
	}
}
 800c480:	4618      	mov	r0, r3
 800c482:	3738      	adds	r7, #56	; 0x38
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	e000ed04 	.word	0xe000ed04

0800c48c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b08e      	sub	sp, #56	; 0x38
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10a      	bne.n	800c4ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c4b6:	bf00      	nop
 800c4b8:	e7fe      	b.n	800c4b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d103      	bne.n	800c4c8 <xQueueGenericSendFromISR+0x3c>
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <xQueueGenericSendFromISR+0x40>
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e000      	b.n	800c4ce <xQueueGenericSendFromISR+0x42>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10a      	bne.n	800c4e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d6:	f383 8811 	msr	BASEPRI, r3
 800c4da:	f3bf 8f6f 	isb	sy
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	623b      	str	r3, [r7, #32]
}
 800c4e4:	bf00      	nop
 800c4e6:	e7fe      	b.n	800c4e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d103      	bne.n	800c4f6 <xQueueGenericSendFromISR+0x6a>
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d101      	bne.n	800c4fa <xQueueGenericSendFromISR+0x6e>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <xQueueGenericSendFromISR+0x70>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10a      	bne.n	800c516 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	61fb      	str	r3, [r7, #28]
}
 800c512:	bf00      	nop
 800c514:	e7fe      	b.n	800c514 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c516:	f002 fbeb 	bl	800ecf0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c51a:	f3ef 8211 	mrs	r2, BASEPRI
 800c51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	61ba      	str	r2, [r7, #24]
 800c530:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c532:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c534:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53e:	429a      	cmp	r2, r3
 800c540:	d302      	bcc.n	800c548 <xQueueGenericSendFromISR+0xbc>
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	2b02      	cmp	r3, #2
 800c546:	d12c      	bne.n	800c5a2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c54e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c552:	683a      	ldr	r2, [r7, #0]
 800c554:	68b9      	ldr	r1, [r7, #8]
 800c556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c558:	f000 f910 	bl	800c77c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c55c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c564:	d112      	bne.n	800c58c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d016      	beq.n	800c59c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c570:	3324      	adds	r3, #36	; 0x24
 800c572:	4618      	mov	r0, r3
 800c574:	f001 fa60 	bl	800da38 <xTaskRemoveFromEventList>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00e      	beq.n	800c59c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00b      	beq.n	800c59c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	601a      	str	r2, [r3, #0]
 800c58a:	e007      	b.n	800c59c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c58c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c590:	3301      	adds	r3, #1
 800c592:	b2db      	uxtb	r3, r3
 800c594:	b25a      	sxtb	r2, r3
 800c596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c59c:	2301      	movs	r3, #1
 800c59e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c5a0:	e001      	b.n	800c5a6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	637b      	str	r3, [r7, #52]	; 0x34
 800c5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c5b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3738      	adds	r7, #56	; 0x38
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b08c      	sub	sp, #48	; 0x30
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d10a      	bne.n	800c5ec <xQueueReceive+0x30>
	__asm volatile
 800c5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5da:	f383 8811 	msr	BASEPRI, r3
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	623b      	str	r3, [r7, #32]
}
 800c5e8:	bf00      	nop
 800c5ea:	e7fe      	b.n	800c5ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d103      	bne.n	800c5fa <xQueueReceive+0x3e>
 800c5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d101      	bne.n	800c5fe <xQueueReceive+0x42>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e000      	b.n	800c600 <xQueueReceive+0x44>
 800c5fe:	2300      	movs	r3, #0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10a      	bne.n	800c61a <xQueueReceive+0x5e>
	__asm volatile
 800c604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c608:	f383 8811 	msr	BASEPRI, r3
 800c60c:	f3bf 8f6f 	isb	sy
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	61fb      	str	r3, [r7, #28]
}
 800c616:	bf00      	nop
 800c618:	e7fe      	b.n	800c618 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c61a:	f001 fc01 	bl	800de20 <xTaskGetSchedulerState>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d102      	bne.n	800c62a <xQueueReceive+0x6e>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d101      	bne.n	800c62e <xQueueReceive+0x72>
 800c62a:	2301      	movs	r3, #1
 800c62c:	e000      	b.n	800c630 <xQueueReceive+0x74>
 800c62e:	2300      	movs	r3, #0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10a      	bne.n	800c64a <xQueueReceive+0x8e>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	61bb      	str	r3, [r7, #24]
}
 800c646:	bf00      	nop
 800c648:	e7fe      	b.n	800c648 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c64a:	f002 fa8f 	bl	800eb6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c652:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	2b00      	cmp	r3, #0
 800c658:	d01f      	beq.n	800c69a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c65a:	68b9      	ldr	r1, [r7, #8]
 800c65c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c65e:	f000 f8f7 	bl	800c850 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c664:	1e5a      	subs	r2, r3, #1
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66c:	691b      	ldr	r3, [r3, #16]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00f      	beq.n	800c692 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c674:	3310      	adds	r3, #16
 800c676:	4618      	mov	r0, r3
 800c678:	f001 f9de 	bl	800da38 <xTaskRemoveFromEventList>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d007      	beq.n	800c692 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c682:	4b3d      	ldr	r3, [pc, #244]	; (800c778 <xQueueReceive+0x1bc>)
 800c684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c688:	601a      	str	r2, [r3, #0]
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c692:	f002 fa9b 	bl	800ebcc <vPortExitCritical>
				return pdPASS;
 800c696:	2301      	movs	r3, #1
 800c698:	e069      	b.n	800c76e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d103      	bne.n	800c6a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6a0:	f002 fa94 	bl	800ebcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	e062      	b.n	800c76e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d106      	bne.n	800c6bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6ae:	f107 0310 	add.w	r3, r7, #16
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f001 fa48 	bl	800db48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6bc:	f002 fa86 	bl	800ebcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6c0:	f000 ff88 	bl	800d5d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6c4:	f002 fa52 	bl	800eb6c <vPortEnterCritical>
 800c6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6ce:	b25b      	sxtb	r3, r3
 800c6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d4:	d103      	bne.n	800c6de <xQueueReceive+0x122>
 800c6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6e4:	b25b      	sxtb	r3, r3
 800c6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ea:	d103      	bne.n	800c6f4 <xQueueReceive+0x138>
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6f4:	f002 fa6a 	bl	800ebcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6f8:	1d3a      	adds	r2, r7, #4
 800c6fa:	f107 0310 	add.w	r3, r7, #16
 800c6fe:	4611      	mov	r1, r2
 800c700:	4618      	mov	r0, r3
 800c702:	f001 fa37 	bl	800db74 <xTaskCheckForTimeOut>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d123      	bne.n	800c754 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c70c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c70e:	f000 f917 	bl	800c940 <prvIsQueueEmpty>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d017      	beq.n	800c748 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71a:	3324      	adds	r3, #36	; 0x24
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	4611      	mov	r1, r2
 800c720:	4618      	mov	r0, r3
 800c722:	f001 f939 	bl	800d998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c728:	f000 f8b8 	bl	800c89c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c72c:	f000 ff60 	bl	800d5f0 <xTaskResumeAll>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d189      	bne.n	800c64a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c736:	4b10      	ldr	r3, [pc, #64]	; (800c778 <xQueueReceive+0x1bc>)
 800c738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	e780      	b.n	800c64a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c74a:	f000 f8a7 	bl	800c89c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c74e:	f000 ff4f 	bl	800d5f0 <xTaskResumeAll>
 800c752:	e77a      	b.n	800c64a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c756:	f000 f8a1 	bl	800c89c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c75a:	f000 ff49 	bl	800d5f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c75e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c760:	f000 f8ee 	bl	800c940 <prvIsQueueEmpty>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	f43f af6f 	beq.w	800c64a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c76c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3730      	adds	r7, #48	; 0x30
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	e000ed04 	.word	0xe000ed04

0800c77c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b086      	sub	sp, #24
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c788:	2300      	movs	r3, #0
 800c78a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c790:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10d      	bne.n	800c7b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d14d      	bne.n	800c83e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f001 fb58 	bl	800de5c <xTaskPriorityDisinherit>
 800c7ac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	605a      	str	r2, [r3, #4]
 800c7b4:	e043      	b.n	800c83e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d119      	bne.n	800c7f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6898      	ldr	r0, [r3, #8]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	68b9      	ldr	r1, [r7, #8]
 800c7c8:	f002 fd02 	bl	800f1d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	689a      	ldr	r2, [r3, #8]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d4:	441a      	add	r2, r3
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	689a      	ldr	r2, [r3, #8]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d32b      	bcc.n	800c83e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	609a      	str	r2, [r3, #8]
 800c7ee:	e026      	b.n	800c83e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	68d8      	ldr	r0, [r3, #12]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	68b9      	ldr	r1, [r7, #8]
 800c7fc:	f002 fce8 	bl	800f1d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	68da      	ldr	r2, [r3, #12]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c808:	425b      	negs	r3, r3
 800c80a:	441a      	add	r2, r3
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	68da      	ldr	r2, [r3, #12]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d207      	bcs.n	800c82c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	685a      	ldr	r2, [r3, #4]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c824:	425b      	negs	r3, r3
 800c826:	441a      	add	r2, r3
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b02      	cmp	r3, #2
 800c830:	d105      	bne.n	800c83e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d002      	beq.n	800c83e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	3b01      	subs	r3, #1
 800c83c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	1c5a      	adds	r2, r3, #1
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c846:	697b      	ldr	r3, [r7, #20]
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d018      	beq.n	800c894 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	68da      	ldr	r2, [r3, #12]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c86a:	441a      	add	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	68da      	ldr	r2, [r3, #12]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d303      	bcc.n	800c884 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	68d9      	ldr	r1, [r3, #12]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c88c:	461a      	mov	r2, r3
 800c88e:	6838      	ldr	r0, [r7, #0]
 800c890:	f002 fc9e 	bl	800f1d0 <memcpy>
	}
}
 800c894:	bf00      	nop
 800c896:	3708      	adds	r7, #8
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c8a4:	f002 f962 	bl	800eb6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8b0:	e011      	b.n	800c8d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d012      	beq.n	800c8e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	3324      	adds	r3, #36	; 0x24
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f001 f8ba 	bl	800da38 <xTaskRemoveFromEventList>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d001      	beq.n	800c8ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c8ca:	f001 f9b5 	bl	800dc38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c8ce:	7bfb      	ldrb	r3, [r7, #15]
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	dce9      	bgt.n	800c8b2 <prvUnlockQueue+0x16>
 800c8de:	e000      	b.n	800c8e2 <prvUnlockQueue+0x46>
					break;
 800c8e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	22ff      	movs	r2, #255	; 0xff
 800c8e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c8ea:	f002 f96f 	bl	800ebcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c8ee:	f002 f93d 	bl	800eb6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c8fa:	e011      	b.n	800c920 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d012      	beq.n	800c92a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	3310      	adds	r3, #16
 800c908:	4618      	mov	r0, r3
 800c90a:	f001 f895 	bl	800da38 <xTaskRemoveFromEventList>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d001      	beq.n	800c918 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c914:	f001 f990 	bl	800dc38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c918:	7bbb      	ldrb	r3, [r7, #14]
 800c91a:	3b01      	subs	r3, #1
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c924:	2b00      	cmp	r3, #0
 800c926:	dce9      	bgt.n	800c8fc <prvUnlockQueue+0x60>
 800c928:	e000      	b.n	800c92c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c92a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	22ff      	movs	r2, #255	; 0xff
 800c930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c934:	f002 f94a 	bl	800ebcc <vPortExitCritical>
}
 800c938:	bf00      	nop
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c948:	f002 f910 	bl	800eb6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c950:	2b00      	cmp	r3, #0
 800c952:	d102      	bne.n	800c95a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c954:	2301      	movs	r3, #1
 800c956:	60fb      	str	r3, [r7, #12]
 800c958:	e001      	b.n	800c95e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c95a:	2300      	movs	r3, #0
 800c95c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c95e:	f002 f935 	bl	800ebcc <vPortExitCritical>

	return xReturn;
 800c962:	68fb      	ldr	r3, [r7, #12]
}
 800c964:	4618      	mov	r0, r3
 800c966:	3710      	adds	r7, #16
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c974:	f002 f8fa 	bl	800eb6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c980:	429a      	cmp	r2, r3
 800c982:	d102      	bne.n	800c98a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c984:	2301      	movs	r3, #1
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	e001      	b.n	800c98e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c98a:	2300      	movs	r3, #0
 800c98c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c98e:	f002 f91d 	bl	800ebcc <vPortExitCritical>

	return xReturn;
 800c992:	68fb      	ldr	r3, [r7, #12]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3710      	adds	r7, #16
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c99c:	b480      	push	{r7}
 800c99e:	b085      	sub	sp, #20
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	60fb      	str	r3, [r7, #12]
 800c9aa:	e014      	b.n	800c9d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c9ac:	4a0e      	ldr	r2, [pc, #56]	; (800c9e8 <vQueueAddToRegistry+0x4c>)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10b      	bne.n	800c9d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c9b8:	490b      	ldr	r1, [pc, #44]	; (800c9e8 <vQueueAddToRegistry+0x4c>)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	683a      	ldr	r2, [r7, #0]
 800c9be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c9c2:	4a09      	ldr	r2, [pc, #36]	; (800c9e8 <vQueueAddToRegistry+0x4c>)
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	00db      	lsls	r3, r3, #3
 800c9c8:	4413      	add	r3, r2
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c9ce:	e006      	b.n	800c9de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	60fb      	str	r3, [r7, #12]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2b07      	cmp	r3, #7
 800c9da:	d9e7      	bls.n	800c9ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c9dc:	bf00      	nop
 800c9de:	bf00      	nop
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bc80      	pop	{r7}
 800c9e6:	4770      	bx	lr
 800c9e8:	200018fc 	.word	0x200018fc

0800c9ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b086      	sub	sp, #24
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c9fc:	f002 f8b6 	bl	800eb6c <vPortEnterCritical>
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca06:	b25b      	sxtb	r3, r3
 800ca08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca0c:	d103      	bne.n	800ca16 <vQueueWaitForMessageRestricted+0x2a>
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	2200      	movs	r2, #0
 800ca12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca1c:	b25b      	sxtb	r3, r3
 800ca1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca22:	d103      	bne.n	800ca2c <vQueueWaitForMessageRestricted+0x40>
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca2c:	f002 f8ce 	bl	800ebcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d106      	bne.n	800ca46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	3324      	adds	r3, #36	; 0x24
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	68b9      	ldr	r1, [r7, #8]
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 ffcd 	bl	800d9e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ca46:	6978      	ldr	r0, [r7, #20]
 800ca48:	f7ff ff28 	bl	800c89c <prvUnlockQueue>
	}
 800ca4c:	bf00      	nop
 800ca4e:	3718      	adds	r7, #24
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08a      	sub	sp, #40	; 0x28
 800ca58:	af02      	add	r7, sp, #8
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2b04      	cmp	r3, #4
 800ca64:	d80a      	bhi.n	800ca7c <xStreamBufferGenericCreate+0x28>
	__asm volatile
 800ca66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	61bb      	str	r3, [r7, #24]
}
 800ca78:	bf00      	nop
 800ca7a:	e7fe      	b.n	800ca7a <xStreamBufferGenericCreate+0x26>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d90a      	bls.n	800ca9a <xStreamBufferGenericCreate+0x46>
	__asm volatile
 800ca84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca88:	f383 8811 	msr	BASEPRI, r3
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f3bf 8f4f 	dsb	sy
 800ca94:	617b      	str	r3, [r7, #20]
}
 800ca96:	bf00      	nop
 800ca98:	e7fe      	b.n	800ca98 <xStreamBufferGenericCreate+0x44>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d101      	bne.n	800caa4 <xStreamBufferGenericCreate+0x50>
		{
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 800caa0:	2301      	movs	r3, #1
 800caa2:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	3301      	adds	r3, #1
 800caa8:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	3320      	adds	r3, #32
 800caae:	4618      	mov	r0, r3
 800cab0:	f002 f95c 	bl	800ed6c <pvPortMalloc>
 800cab4:	61f8      	str	r0, [r7, #28]

		if( pucAllocatedMemory != NULL )
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d009      	beq.n	800cad0 <xStreamBufferGenericCreate+0x7c>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	f103 0120 	add.w	r1, r3, #32
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	69f8      	ldr	r0, [r7, #28]
 800cacc:	f000 fb1c 	bl	800d108 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t * ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800cad0:	69fb      	ldr	r3, [r7, #28]
	}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3720      	adds	r7, #32
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800cada:	b480      	push	{r7}
 800cadc:	b087      	sub	sp, #28
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10a      	bne.n	800cb02 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	60fb      	str	r3, [r7, #12]
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	689a      	ldr	r2, [r3, #8]
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	697a      	ldr	r2, [r7, #20]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d304      	bcc.n	800cb32 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	697a      	ldr	r2, [r7, #20]
 800cb2e:	1ad3      	subs	r3, r2, r3
 800cb30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800cb32:	697b      	ldr	r3, [r7, #20]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	371c      	adds	r7, #28
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bc80      	pop	{r7}
 800cb3c:	4770      	bx	lr

0800cb3e <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b090      	sub	sp, #64	; 0x40
 800cb42:	af02      	add	r7, sp, #8
 800cb44:	60f8      	str	r0, [r7, #12]
 800cb46:	60b9      	str	r1, [r7, #8]
 800cb48:	607a      	str	r2, [r7, #4]
 800cb4a:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800cb50:	2300      	movs	r3, #0
 800cb52:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d10a      	bne.n	800cb74 <xStreamBufferSend+0x36>
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb70:	bf00      	nop
 800cb72:	e7fe      	b.n	800cb72 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800cb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d10a      	bne.n	800cb90 <xStreamBufferSend+0x52>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	623b      	str	r3, [r7, #32]
}
 800cb8c:	bf00      	nop
 800cb8e:	e7fe      	b.n	800cb8e <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800cb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb92:	7f1b      	ldrb	r3, [r3, #28]
 800cb94:	f003 0301 	and.w	r3, r3, #1
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d002      	beq.n	800cba2 <xStreamBufferSend+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800cb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9e:	3304      	adds	r3, #4
 800cba0:	633b      	str	r3, [r7, #48]	; 0x30
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d03f      	beq.n	800cc28 <xStreamBufferSend+0xea>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800cba8:	f107 0314 	add.w	r3, r7, #20
 800cbac:	4618      	mov	r0, r3
 800cbae:	f000 ffa5 	bl	800dafc <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800cbb2:	f001 ffdb 	bl	800eb6c <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800cbb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbb8:	f7ff ff8f 	bl	800cada <xStreamBufferSpacesAvailable>
 800cbbc:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800cbbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d217      	bcs.n	800cbf6 <xStreamBufferSend+0xb8>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800cbc6:	2000      	movs	r0, #0
 800cbc8:	f001 facc 	bl	800e164 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbce:	695b      	ldr	r3, [r3, #20]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00a      	beq.n	800cbea <xStreamBufferSend+0xac>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	61fb      	str	r3, [r7, #28]
}
 800cbe6:	bf00      	nop
 800cbe8:	e7fe      	b.n	800cbe8 <xStreamBufferSend+0xaa>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800cbea:	f001 f90b 	bl	800de04 <xTaskGetCurrentTaskHandle>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf2:	615a      	str	r2, [r3, #20]
 800cbf4:	e002      	b.n	800cbfc <xStreamBufferSend+0xbe>
				}
				else
				{
					taskEXIT_CRITICAL();
 800cbf6:	f001 ffe9 	bl	800ebcc <vPortExitCritical>
					break;
 800cbfa:	e015      	b.n	800cc28 <xStreamBufferSend+0xea>
				}
			}
			taskEXIT_CRITICAL();
 800cbfc:	f001 ffe6 	bl	800ebcc <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f04f 31ff 	mov.w	r1, #4294967295
 800cc08:	2000      	movs	r0, #0
 800cc0a:	f001 f9ad 	bl	800df68 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800cc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc10:	2200      	movs	r2, #0
 800cc12:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800cc14:	463a      	mov	r2, r7
 800cc16:	f107 0314 	add.w	r3, r7, #20
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f000 ffa9 	bl	800db74 <xTaskCheckForTimeOut>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d0c4      	beq.n	800cbb2 <xStreamBufferSend+0x74>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800cc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d103      	bne.n	800cc36 <xStreamBufferSend+0xf8>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800cc2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc30:	f7ff ff53 	bl	800cada <xStreamBufferSpacesAvailable>
 800cc34:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800cc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	68b9      	ldr	r1, [r7, #8]
 800cc40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc42:	f000 f823 	bl	800cc8c <prvWriteMessageToBuffer>
 800cc46:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800cc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d019      	beq.n	800cc82 <xStreamBufferSend+0x144>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800cc4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc50:	f000 fa3b 	bl	800d0ca <prvBytesInBuffer>
 800cc54:	4602      	mov	r2, r0
 800cc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d311      	bcc.n	800cc82 <xStreamBufferSend+0x144>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800cc5e:	f000 fcb9 	bl	800d5d4 <vTaskSuspendAll>
 800cc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d009      	beq.n	800cc7e <xStreamBufferSend+0x140>
 800cc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6c:	6918      	ldr	r0, [r3, #16]
 800cc6e:	2300      	movs	r3, #0
 800cc70:	2200      	movs	r2, #0
 800cc72:	2100      	movs	r1, #0
 800cc74:	f001 f9d2 	bl	800e01c <xTaskGenericNotify>
 800cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	611a      	str	r2, [r3, #16]
 800cc7e:	f000 fcb7 	bl	800d5f0 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800cc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3738      	adds	r7, #56	; 0x38
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b086      	sub	sp, #24
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
 800cc98:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d102      	bne.n	800cca6 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800cca0:	2300      	movs	r3, #0
 800cca2:	617b      	str	r3, [r7, #20]
 800cca4:	e01d      	b.n	800cce2 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	7f1b      	ldrb	r3, [r3, #28]
 800ccaa:	f003 0301 	and.w	r3, r3, #1
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d108      	bne.n	800ccc4 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	bf28      	it	cs
 800ccbe:	4613      	movcs	r3, r2
 800ccc0:	607b      	str	r3, [r7, #4]
 800ccc2:	e00e      	b.n	800cce2 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800ccc4:	683a      	ldr	r2, [r7, #0]
 800ccc6:	6a3b      	ldr	r3, [r7, #32]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d308      	bcc.n	800ccde <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800cccc:	2301      	movs	r3, #1
 800ccce:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800ccd0:	1d3b      	adds	r3, r7, #4
 800ccd2:	2204      	movs	r2, #4
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	68f8      	ldr	r0, [r7, #12]
 800ccd8:	f000 f90b 	bl	800cef2 <prvWriteBytesToBuffer>
 800ccdc:	e001      	b.n	800cce2 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800ccde:	2300      	movs	r3, #0
 800cce0:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d007      	beq.n	800ccf8 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	461a      	mov	r2, r3
 800ccec:	68b9      	ldr	r1, [r7, #8]
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f000 f8ff 	bl	800cef2 <prvWriteBytesToBuffer>
 800ccf4:	6138      	str	r0, [r7, #16]
 800ccf6:	e001      	b.n	800ccfc <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800ccfc:	693b      	ldr	r3, [r7, #16]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b08e      	sub	sp, #56	; 0x38
 800cd0a:	af02      	add	r7, sp, #8
 800cd0c:	60f8      	str	r0, [r7, #12]
 800cd0e:	60b9      	str	r1, [r7, #8]
 800cd10:	607a      	str	r2, [r7, #4]
 800cd12:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10a      	bne.n	800cd38 <xStreamBufferReceive+0x32>
	__asm volatile
 800cd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd26:	f383 8811 	msr	BASEPRI, r3
 800cd2a:	f3bf 8f6f 	isb	sy
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	61fb      	str	r3, [r7, #28]
}
 800cd34:	bf00      	nop
 800cd36:	e7fe      	b.n	800cd36 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800cd38:	6a3b      	ldr	r3, [r7, #32]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d10a      	bne.n	800cd54 <xStreamBufferReceive+0x4e>
	__asm volatile
 800cd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd42:	f383 8811 	msr	BASEPRI, r3
 800cd46:	f3bf 8f6f 	isb	sy
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	61bb      	str	r3, [r7, #24]
}
 800cd50:	bf00      	nop
 800cd52:	e7fe      	b.n	800cd52 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800cd54:	6a3b      	ldr	r3, [r7, #32]
 800cd56:	7f1b      	ldrb	r3, [r3, #28]
 800cd58:	f003 0301 	and.w	r3, r3, #1
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800cd60:	2304      	movs	r3, #4
 800cd62:	627b      	str	r3, [r7, #36]	; 0x24
 800cd64:	e001      	b.n	800cd6a <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d035      	beq.n	800cddc <xStreamBufferReceive+0xd6>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800cd70:	f001 fefc 	bl	800eb6c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800cd74:	6a38      	ldr	r0, [r7, #32]
 800cd76:	f000 f9a8 	bl	800d0ca <prvBytesInBuffer>
 800cd7a:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800cd7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d816      	bhi.n	800cdb2 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800cd84:	2000      	movs	r0, #0
 800cd86:	f001 f9ed 	bl	800e164 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800cd8a:	6a3b      	ldr	r3, [r7, #32]
 800cd8c:	691b      	ldr	r3, [r3, #16]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00a      	beq.n	800cda8 <xStreamBufferReceive+0xa2>
	__asm volatile
 800cd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	617b      	str	r3, [r7, #20]
}
 800cda4:	bf00      	nop
 800cda6:	e7fe      	b.n	800cda6 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800cda8:	f001 f82c 	bl	800de04 <xTaskGetCurrentTaskHandle>
 800cdac:	4602      	mov	r2, r0
 800cdae:	6a3b      	ldr	r3, [r7, #32]
 800cdb0:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cdb2:	f001 ff0b 	bl	800ebcc <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800cdb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d812      	bhi.n	800cde4 <xStreamBufferReceive+0xde>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f04f 31ff 	mov.w	r1, #4294967295
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	f001 f8ce 	bl	800df68 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800cdcc:	6a3b      	ldr	r3, [r7, #32]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800cdd2:	6a38      	ldr	r0, [r7, #32]
 800cdd4:	f000 f979 	bl	800d0ca <prvBytesInBuffer>
 800cdd8:	62b8      	str	r0, [r7, #40]	; 0x28
 800cdda:	e003      	b.n	800cde4 <xStreamBufferReceive+0xde>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800cddc:	6a38      	ldr	r0, [r7, #32]
 800cdde:	f000 f974 	bl	800d0ca <prvBytesInBuffer>
 800cde2:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800cde4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d91d      	bls.n	800ce28 <xStreamBufferReceive+0x122>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800cdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	68b9      	ldr	r1, [r7, #8]
 800cdf6:	6a38      	ldr	r0, [r7, #32]
 800cdf8:	f000 f81b 	bl	800ce32 <prvReadMessageFromBuffer>
 800cdfc:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d011      	beq.n	800ce28 <xStreamBufferReceive+0x122>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800ce04:	f000 fbe6 	bl	800d5d4 <vTaskSuspendAll>
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d009      	beq.n	800ce24 <xStreamBufferReceive+0x11e>
 800ce10:	6a3b      	ldr	r3, [r7, #32]
 800ce12:	6958      	ldr	r0, [r3, #20]
 800ce14:	2300      	movs	r3, #0
 800ce16:	2200      	movs	r2, #0
 800ce18:	2100      	movs	r1, #0
 800ce1a:	f001 f8ff 	bl	800e01c <xTaskGenericNotify>
 800ce1e:	6a3b      	ldr	r3, [r7, #32]
 800ce20:	2200      	movs	r2, #0
 800ce22:	615a      	str	r2, [r3, #20]
 800ce24:	f000 fbe4 	bl	800d5f0 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800ce28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3730      	adds	r7, #48	; 0x30
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b088      	sub	sp, #32
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	60f8      	str	r0, [r7, #12]
 800ce3a:	60b9      	str	r1, [r7, #8]
 800ce3c:	607a      	str	r2, [r7, #4]
 800ce3e:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800ce40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d017      	beq.n	800ce76 <prvReadMessageFromBuffer+0x44>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	61fb      	str	r3, [r7, #28]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800ce4c:	f107 0114 	add.w	r1, r7, #20
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce54:	68f8      	ldr	r0, [r7, #12]
 800ce56:	f000 f8be 	bl	800cfd6 <prvReadBytesFromBuffer>

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800ce5a:	683a      	ldr	r2, [r7, #0]
 800ce5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d207      	bcs.n	800ce7a <prvReadMessageFromBuffer+0x48>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	69fa      	ldr	r2, [r7, #28]
 800ce6e:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	617b      	str	r3, [r7, #20]
 800ce74:	e001      	b.n	800ce7a <prvReadMessageFromBuffer+0x48>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	617b      	str	r3, [r7, #20]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800ce7a:	697a      	ldr	r2, [r7, #20]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	68b9      	ldr	r1, [r7, #8]
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f000 f8a8 	bl	800cfd6 <prvReadBytesFromBuffer>
 800ce86:	61b8      	str	r0, [r7, #24]

	return xReceivedLength;
 800ce88:	69bb      	ldr	r3, [r7, #24]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3720      	adds	r7, #32
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <xStreamBufferIsFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b086      	sub	sp, #24
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxStreamBuffer );
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10a      	bne.n	800ceba <xStreamBufferIsFull+0x28>
	__asm volatile
 800cea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea8:	f383 8811 	msr	BASEPRI, r3
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	60bb      	str	r3, [r7, #8]
}
 800ceb6:	bf00      	nop
 800ceb8:	e7fe      	b.n	800ceb8 <xStreamBufferIsFull+0x26>

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	7f1b      	ldrb	r3, [r3, #28]
 800cebe:	f003 0301 	and.w	r3, r3, #1
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <xStreamBufferIsFull+0x3a>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800cec6:	2304      	movs	r3, #4
 800cec8:	613b      	str	r3, [r7, #16]
 800ceca:	e001      	b.n	800ced0 <xStreamBufferIsFull+0x3e>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	613b      	str	r3, [r7, #16]
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f7ff fe02 	bl	800cada <xStreamBufferSpacesAvailable>
 800ced6:	4602      	mov	r2, r0
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d302      	bcc.n	800cee4 <xStreamBufferIsFull+0x52>
	{
		xReturn = pdTRUE;
 800cede:	2301      	movs	r3, #1
 800cee0:	617b      	str	r3, [r7, #20]
 800cee2:	e001      	b.n	800cee8 <xStreamBufferIsFull+0x56>
	}
	else
	{
		xReturn = pdFALSE;
 800cee4:	2300      	movs	r3, #0
 800cee6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cee8:	697b      	ldr	r3, [r7, #20]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3718      	adds	r7, #24
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b08a      	sub	sp, #40	; 0x28
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	60f8      	str	r0, [r7, #12]
 800cefa:	60b9      	str	r1, [r7, #8]
 800cefc:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10a      	bne.n	800cf1a <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800cf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf08:	f383 8811 	msr	BASEPRI, r3
 800cf0c:	f3bf 8f6f 	isb	sy
 800cf10:	f3bf 8f4f 	dsb	sy
 800cf14:	61fb      	str	r3, [r7, #28]
}
 800cf16:	bf00      	nop
 800cf18:	e7fe      	b.n	800cf18 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	689a      	ldr	r2, [r3, #8]
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	bf28      	it	cs
 800cf2e:	4613      	movcs	r3, r2
 800cf30:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800cf32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf34:	6a3b      	ldr	r3, [r7, #32]
 800cf36:	441a      	add	r2, r3
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d90a      	bls.n	800cf56 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	61bb      	str	r3, [r7, #24]
}
 800cf52:	bf00      	nop
 800cf54:	e7fe      	b.n	800cf54 <prvWriteBytesToBuffer+0x62>
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	699a      	ldr	r2, [r3, #24]
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5c:	4413      	add	r3, r2
 800cf5e:	6a3a      	ldr	r2, [r7, #32]
 800cf60:	68b9      	ldr	r1, [r7, #8]
 800cf62:	4618      	mov	r0, r3
 800cf64:	f002 f934 	bl	800f1d0 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	6a3b      	ldr	r3, [r7, #32]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d91c      	bls.n	800cfaa <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	6a3b      	ldr	r3, [r7, #32]
 800cf74:	1ad2      	subs	r2, r2, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d90a      	bls.n	800cf94 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	617b      	str	r3, [r7, #20]
}
 800cf90:	bf00      	nop
 800cf92:	e7fe      	b.n	800cf92 <prvWriteBytesToBuffer+0xa0>
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6998      	ldr	r0, [r3, #24]
 800cf98:	68ba      	ldr	r2, [r7, #8]
 800cf9a:	6a3b      	ldr	r3, [r7, #32]
 800cf9c:	18d1      	adds	r1, r2, r3
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	6a3b      	ldr	r3, [r7, #32]
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	f002 f913 	bl	800f1d0 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800cfaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4413      	add	r3, r2
 800cfb0:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d304      	bcc.n	800cfc6 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfca:	605a      	str	r2, [r3, #4]

	return xCount;
 800cfcc:	687b      	ldr	r3, [r7, #4]
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3728      	adds	r7, #40	; 0x28
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}

0800cfd6 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800cfd6:	b580      	push	{r7, lr}
 800cfd8:	b08a      	sub	sp, #40	; 0x28
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	60f8      	str	r0, [r7, #12]
 800cfde:	60b9      	str	r1, [r7, #8]
 800cfe0:	607a      	str	r2, [r7, #4]
 800cfe2:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	bf28      	it	cs
 800cfec:	4613      	movcs	r3, r2
 800cfee:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800cff0:	6a3b      	ldr	r3, [r7, #32]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d064      	beq.n	800d0c0 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	689a      	ldr	r2, [r3, #8]
 800d000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	6a3a      	ldr	r2, [r7, #32]
 800d006:	4293      	cmp	r3, r2
 800d008:	bf28      	it	cs
 800d00a:	4613      	movcs	r3, r2
 800d00c:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800d00e:	69fa      	ldr	r2, [r7, #28]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	429a      	cmp	r2, r3
 800d014:	d90a      	bls.n	800d02c <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	61bb      	str	r3, [r7, #24]
}
 800d028:	bf00      	nop
 800d02a:	e7fe      	b.n	800d02a <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800d02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	441a      	add	r2, r3
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	429a      	cmp	r2, r3
 800d038:	d90a      	bls.n	800d050 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800d03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03e:	f383 8811 	msr	BASEPRI, r3
 800d042:	f3bf 8f6f 	isb	sy
 800d046:	f3bf 8f4f 	dsb	sy
 800d04a:	617b      	str	r3, [r7, #20]
}
 800d04c:	bf00      	nop
 800d04e:	e7fe      	b.n	800d04e <prvReadBytesFromBuffer+0x78>
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	699a      	ldr	r2, [r3, #24]
 800d054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d056:	4413      	add	r3, r2
 800d058:	69fa      	ldr	r2, [r7, #28]
 800d05a:	4619      	mov	r1, r3
 800d05c:	68b8      	ldr	r0, [r7, #8]
 800d05e:	f002 f8b7 	bl	800f1d0 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800d062:	6a3a      	ldr	r2, [r7, #32]
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	429a      	cmp	r2, r3
 800d068:	d919      	bls.n	800d09e <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800d06a:	6a3a      	ldr	r2, [r7, #32]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d90a      	bls.n	800d088 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	613b      	str	r3, [r7, #16]
}
 800d084:	bf00      	nop
 800d086:	e7fe      	b.n	800d086 <prvReadBytesFromBuffer+0xb0>
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800d088:	68ba      	ldr	r2, [r7, #8]
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	18d0      	adds	r0, r2, r3
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6999      	ldr	r1, [r3, #24]
 800d092:	6a3a      	ldr	r2, [r7, #32]
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	461a      	mov	r2, r3
 800d09a:	f002 f899 	bl	800f1d0 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800d09e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d304      	bcc.n	800d0ba <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0be:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3728      	adds	r7, #40	; 0x28
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800d0ca:	b480      	push	{r7}
 800d0cc:	b085      	sub	sp, #20
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	689a      	ldr	r2, [r3, #8]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	4413      	add	r3, r2
 800d0dc:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	68fa      	ldr	r2, [r7, #12]
 800d0e4:	1ad3      	subs	r3, r2, r3
 800d0e6:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	689b      	ldr	r3, [r3, #8]
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d304      	bcc.n	800d0fc <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3714      	adds	r7, #20
 800d102:	46bd      	mov	sp, r7
 800d104:	bc80      	pop	{r7}
 800d106:	4770      	bx	lr

0800d108 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  BaseType_t xIsMessageBuffer )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
 800d114:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800d116:	2355      	movs	r3, #85	; 0x55
 800d118:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	6979      	ldr	r1, [r7, #20]
 800d11e:	68b8      	ldr	r0, [r7, #8]
 800d120:	f002 f864 	bl	800f1ec <memset>
 800d124:	4602      	mov	r2, r0
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	4293      	cmp	r3, r2
 800d12a:	d00a      	beq.n	800d142 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800d12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d130:	f383 8811 	msr	BASEPRI, r3
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	613b      	str	r3, [r7, #16]
}
 800d13e:	bf00      	nop
 800d140:	e7fe      	b.n	800d140 <prvInitialiseNewStreamBuffer+0x38>
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800d142:	2220      	movs	r2, #32
 800d144:	2100      	movs	r1, #0
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f002 f850 	bl	800f1ec <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	68ba      	ldr	r2, [r7, #8]
 800d150:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	683a      	ldr	r2, [r7, #0]
 800d15c:	60da      	str	r2, [r3, #12]

	if( xIsMessageBuffer != pdFALSE )
 800d15e:	6a3b      	ldr	r3, [r7, #32]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d006      	beq.n	800d172 <prvInitialiseNewStreamBuffer+0x6a>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	7f1b      	ldrb	r3, [r3, #28]
 800d168:	f043 0301 	orr.w	r3, r3, #1
 800d16c:	b2da      	uxtb	r2, r3
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	771a      	strb	r2, [r3, #28]
	}
}
 800d172:	bf00      	nop
 800d174:	3718      	adds	r7, #24
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b08e      	sub	sp, #56	; 0x38
 800d17e:	af04      	add	r7, sp, #16
 800d180:	60f8      	str	r0, [r7, #12]
 800d182:	60b9      	str	r1, [r7, #8]
 800d184:	607a      	str	r2, [r7, #4]
 800d186:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10a      	bne.n	800d1a4 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	623b      	str	r3, [r7, #32]
}
 800d1a0:	bf00      	nop
 800d1a2:	e7fe      	b.n	800d1a2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10a      	bne.n	800d1c0 <xTaskCreateStatic+0x46>
	__asm volatile
 800d1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	61fb      	str	r3, [r7, #28]
}
 800d1bc:	bf00      	nop
 800d1be:	e7fe      	b.n	800d1be <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d1c0:	2354      	movs	r3, #84	; 0x54
 800d1c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	2b54      	cmp	r3, #84	; 0x54
 800d1c8:	d00a      	beq.n	800d1e0 <xTaskCreateStatic+0x66>
	__asm volatile
 800d1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	61bb      	str	r3, [r7, #24]
}
 800d1dc:	bf00      	nop
 800d1de:	e7fe      	b.n	800d1de <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d01e      	beq.n	800d224 <xTaskCreateStatic+0xaa>
 800d1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d01b      	beq.n	800d224 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f8:	2202      	movs	r2, #2
 800d1fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1fe:	2300      	movs	r3, #0
 800d200:	9303      	str	r3, [sp, #12]
 800d202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d204:	9302      	str	r3, [sp, #8]
 800d206:	f107 0314 	add.w	r3, r7, #20
 800d20a:	9301      	str	r3, [sp, #4]
 800d20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20e:	9300      	str	r3, [sp, #0]
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	68b9      	ldr	r1, [r7, #8]
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	f000 f850 	bl	800d2bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d21c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d21e:	f000 f8d5 	bl	800d3cc <prvAddNewTaskToReadyList>
 800d222:	e001      	b.n	800d228 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800d224:	2300      	movs	r3, #0
 800d226:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d228:	697b      	ldr	r3, [r7, #20]
	}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3728      	adds	r7, #40	; 0x28
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d232:	b580      	push	{r7, lr}
 800d234:	b08c      	sub	sp, #48	; 0x30
 800d236:	af04      	add	r7, sp, #16
 800d238:	60f8      	str	r0, [r7, #12]
 800d23a:	60b9      	str	r1, [r7, #8]
 800d23c:	603b      	str	r3, [r7, #0]
 800d23e:	4613      	mov	r3, r2
 800d240:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d242:	88fb      	ldrh	r3, [r7, #6]
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	4618      	mov	r0, r3
 800d248:	f001 fd90 	bl	800ed6c <pvPortMalloc>
 800d24c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d00e      	beq.n	800d272 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800d254:	2054      	movs	r0, #84	; 0x54
 800d256:	f001 fd89 	bl	800ed6c <pvPortMalloc>
 800d25a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d003      	beq.n	800d26a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	697a      	ldr	r2, [r7, #20]
 800d266:	631a      	str	r2, [r3, #48]	; 0x30
 800d268:	e005      	b.n	800d276 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d26a:	6978      	ldr	r0, [r7, #20]
 800d26c:	f001 fe42 	bl	800eef4 <vPortFree>
 800d270:	e001      	b.n	800d276 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d272:	2300      	movs	r3, #0
 800d274:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d017      	beq.n	800d2ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	2200      	movs	r2, #0
 800d280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d284:	88fa      	ldrh	r2, [r7, #6]
 800d286:	2300      	movs	r3, #0
 800d288:	9303      	str	r3, [sp, #12]
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	9302      	str	r3, [sp, #8]
 800d28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d290:	9301      	str	r3, [sp, #4]
 800d292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d294:	9300      	str	r3, [sp, #0]
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	68b9      	ldr	r1, [r7, #8]
 800d29a:	68f8      	ldr	r0, [r7, #12]
 800d29c:	f000 f80e 	bl	800d2bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2a0:	69f8      	ldr	r0, [r7, #28]
 800d2a2:	f000 f893 	bl	800d3cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	61bb      	str	r3, [r7, #24]
 800d2aa:	e002      	b.n	800d2b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d2b2:	69bb      	ldr	r3, [r7, #24]
	}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3720      	adds	r7, #32
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b088      	sub	sp, #32
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	60b9      	str	r1, [r7, #8]
 800d2c6:	607a      	str	r2, [r7, #4]
 800d2c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	21a5      	movs	r1, #165	; 0xa5
 800d2d6:	f001 ff89 	bl	800f1ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	4413      	add	r3, r2
 800d2ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	f023 0307 	bic.w	r3, r3, #7
 800d2f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	f003 0307 	and.w	r3, r3, #7
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00a      	beq.n	800d314 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	617b      	str	r3, [r7, #20]
}
 800d310:	bf00      	nop
 800d312:	e7fe      	b.n	800d312 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d314:	2300      	movs	r3, #0
 800d316:	61fb      	str	r3, [r7, #28]
 800d318:	e012      	b.n	800d340 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	4413      	add	r3, r2
 800d320:	7819      	ldrb	r1, [r3, #0]
 800d322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	4413      	add	r3, r2
 800d328:	3334      	adds	r3, #52	; 0x34
 800d32a:	460a      	mov	r2, r1
 800d32c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	4413      	add	r3, r2
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d006      	beq.n	800d348 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	3301      	adds	r3, #1
 800d33e:	61fb      	str	r3, [r7, #28]
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	2b0f      	cmp	r3, #15
 800d344:	d9e9      	bls.n	800d31a <prvInitialiseNewTask+0x5e>
 800d346:	e000      	b.n	800d34a <prvInitialiseNewTask+0x8e>
		{
			break;
 800d348:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34c:	2200      	movs	r2, #0
 800d34e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d354:	2b06      	cmp	r3, #6
 800d356:	d901      	bls.n	800d35c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d358:	2306      	movs	r3, #6
 800d35a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d360:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d366:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	2200      	movs	r2, #0
 800d36c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d370:	3304      	adds	r3, #4
 800d372:	4618      	mov	r0, r3
 800d374:	f7fe fdbf 	bl	800bef6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37a:	3318      	adds	r3, #24
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7fe fdba 	bl	800bef6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d386:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38a:	f1c3 0207 	rsb	r2, r3, #7
 800d38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d390:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d396:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39a:	2200      	movs	r2, #0
 800d39c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d3a6:	683a      	ldr	r2, [r7, #0]
 800d3a8:	68f9      	ldr	r1, [r7, #12]
 800d3aa:	69b8      	ldr	r0, [r7, #24]
 800d3ac:	f001 faee 	bl	800e98c <pxPortInitialiseStack>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800d3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d002      	beq.n	800d3c2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3c2:	bf00      	nop
 800d3c4:	3720      	adds	r7, #32
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
	...

0800d3cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d3d4:	f001 fbca 	bl	800eb6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d3d8:	4b2a      	ldr	r3, [pc, #168]	; (800d484 <prvAddNewTaskToReadyList+0xb8>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	4a29      	ldr	r2, [pc, #164]	; (800d484 <prvAddNewTaskToReadyList+0xb8>)
 800d3e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d3e2:	4b29      	ldr	r3, [pc, #164]	; (800d488 <prvAddNewTaskToReadyList+0xbc>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d109      	bne.n	800d3fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d3ea:	4a27      	ldr	r2, [pc, #156]	; (800d488 <prvAddNewTaskToReadyList+0xbc>)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d3f0:	4b24      	ldr	r3, [pc, #144]	; (800d484 <prvAddNewTaskToReadyList+0xb8>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d110      	bne.n	800d41a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d3f8:	f000 fc42 	bl	800dc80 <prvInitialiseTaskLists>
 800d3fc:	e00d      	b.n	800d41a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d3fe:	4b23      	ldr	r3, [pc, #140]	; (800d48c <prvAddNewTaskToReadyList+0xc0>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d109      	bne.n	800d41a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d406:	4b20      	ldr	r3, [pc, #128]	; (800d488 <prvAddNewTaskToReadyList+0xbc>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d410:	429a      	cmp	r2, r3
 800d412:	d802      	bhi.n	800d41a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d414:	4a1c      	ldr	r2, [pc, #112]	; (800d488 <prvAddNewTaskToReadyList+0xbc>)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d41a:	4b1d      	ldr	r3, [pc, #116]	; (800d490 <prvAddNewTaskToReadyList+0xc4>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	3301      	adds	r3, #1
 800d420:	4a1b      	ldr	r2, [pc, #108]	; (800d490 <prvAddNewTaskToReadyList+0xc4>)
 800d422:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d428:	2201      	movs	r2, #1
 800d42a:	409a      	lsls	r2, r3
 800d42c:	4b19      	ldr	r3, [pc, #100]	; (800d494 <prvAddNewTaskToReadyList+0xc8>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4313      	orrs	r3, r2
 800d432:	4a18      	ldr	r2, [pc, #96]	; (800d494 <prvAddNewTaskToReadyList+0xc8>)
 800d434:	6013      	str	r3, [r2, #0]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d43a:	4613      	mov	r3, r2
 800d43c:	009b      	lsls	r3, r3, #2
 800d43e:	4413      	add	r3, r2
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	4a15      	ldr	r2, [pc, #84]	; (800d498 <prvAddNewTaskToReadyList+0xcc>)
 800d444:	441a      	add	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	3304      	adds	r3, #4
 800d44a:	4619      	mov	r1, r3
 800d44c:	4610      	mov	r0, r2
 800d44e:	f7fe fd5e 	bl	800bf0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d452:	f001 fbbb 	bl	800ebcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d456:	4b0d      	ldr	r3, [pc, #52]	; (800d48c <prvAddNewTaskToReadyList+0xc0>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00e      	beq.n	800d47c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d45e:	4b0a      	ldr	r3, [pc, #40]	; (800d488 <prvAddNewTaskToReadyList+0xbc>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d468:	429a      	cmp	r2, r3
 800d46a:	d207      	bcs.n	800d47c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d46c:	4b0b      	ldr	r3, [pc, #44]	; (800d49c <prvAddNewTaskToReadyList+0xd0>)
 800d46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d472:	601a      	str	r2, [r3, #0]
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d47c:	bf00      	nop
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	20001a3c 	.word	0x20001a3c
 800d488:	2000193c 	.word	0x2000193c
 800d48c:	20001a48 	.word	0x20001a48
 800d490:	20001a58 	.word	0x20001a58
 800d494:	20001a44 	.word	0x20001a44
 800d498:	20001940 	.word	0x20001940
 800d49c:	e000ed04 	.word	0xe000ed04

0800d4a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d017      	beq.n	800d4e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d4b2:	4b13      	ldr	r3, [pc, #76]	; (800d500 <vTaskDelay+0x60>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <vTaskDelay+0x30>
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	60bb      	str	r3, [r7, #8]
}
 800d4cc:	bf00      	nop
 800d4ce:	e7fe      	b.n	800d4ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d4d0:	f000 f880 	bl	800d5d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 fe6a 	bl	800e1b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d4dc:	f000 f888 	bl	800d5f0 <xTaskResumeAll>
 800d4e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d107      	bne.n	800d4f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d4e8:	4b06      	ldr	r3, [pc, #24]	; (800d504 <vTaskDelay+0x64>)
 800d4ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ee:	601a      	str	r2, [r3, #0]
 800d4f0:	f3bf 8f4f 	dsb	sy
 800d4f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d4f8:	bf00      	nop
 800d4fa:	3710      	adds	r7, #16
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	20001a64 	.word	0x20001a64
 800d504:	e000ed04 	.word	0xe000ed04

0800d508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b08a      	sub	sp, #40	; 0x28
 800d50c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d50e:	2300      	movs	r3, #0
 800d510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d512:	2300      	movs	r3, #0
 800d514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d516:	463a      	mov	r2, r7
 800d518:	1d39      	adds	r1, r7, #4
 800d51a:	f107 0308 	add.w	r3, r7, #8
 800d51e:	4618      	mov	r0, r3
 800d520:	f7f7 fc4e 	bl	8004dc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d524:	6839      	ldr	r1, [r7, #0]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	68ba      	ldr	r2, [r7, #8]
 800d52a:	9202      	str	r2, [sp, #8]
 800d52c:	9301      	str	r3, [sp, #4]
 800d52e:	2300      	movs	r3, #0
 800d530:	9300      	str	r3, [sp, #0]
 800d532:	2300      	movs	r3, #0
 800d534:	460a      	mov	r2, r1
 800d536:	4921      	ldr	r1, [pc, #132]	; (800d5bc <vTaskStartScheduler+0xb4>)
 800d538:	4821      	ldr	r0, [pc, #132]	; (800d5c0 <vTaskStartScheduler+0xb8>)
 800d53a:	f7ff fe1e 	bl	800d17a <xTaskCreateStatic>
 800d53e:	4603      	mov	r3, r0
 800d540:	4a20      	ldr	r2, [pc, #128]	; (800d5c4 <vTaskStartScheduler+0xbc>)
 800d542:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d544:	4b1f      	ldr	r3, [pc, #124]	; (800d5c4 <vTaskStartScheduler+0xbc>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d002      	beq.n	800d552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d54c:	2301      	movs	r3, #1
 800d54e:	617b      	str	r3, [r7, #20]
 800d550:	e001      	b.n	800d556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d552:	2300      	movs	r3, #0
 800d554:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d102      	bne.n	800d562 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d55c:	f000 fe8e 	bl	800e27c <xTimerCreateTimerTask>
 800d560:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d116      	bne.n	800d596 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56c:	f383 8811 	msr	BASEPRI, r3
 800d570:	f3bf 8f6f 	isb	sy
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	613b      	str	r3, [r7, #16]
}
 800d57a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d57c:	4b12      	ldr	r3, [pc, #72]	; (800d5c8 <vTaskStartScheduler+0xc0>)
 800d57e:	f04f 32ff 	mov.w	r2, #4294967295
 800d582:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d584:	4b11      	ldr	r3, [pc, #68]	; (800d5cc <vTaskStartScheduler+0xc4>)
 800d586:	2201      	movs	r2, #1
 800d588:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800d58a:	4b11      	ldr	r3, [pc, #68]	; (800d5d0 <vTaskStartScheduler+0xc8>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d590:	f001 fa7a 	bl	800ea88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d594:	e00e      	b.n	800d5b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59c:	d10a      	bne.n	800d5b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800d59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	60fb      	str	r3, [r7, #12]
}
 800d5b0:	bf00      	nop
 800d5b2:	e7fe      	b.n	800d5b2 <vTaskStartScheduler+0xaa>
}
 800d5b4:	bf00      	nop
 800d5b6:	3718      	adds	r7, #24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	08013c50 	.word	0x08013c50
 800d5c0:	0800dc51 	.word	0x0800dc51
 800d5c4:	20001a60 	.word	0x20001a60
 800d5c8:	20001a5c 	.word	0x20001a5c
 800d5cc:	20001a48 	.word	0x20001a48
 800d5d0:	20001a40 	.word	0x20001a40

0800d5d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d5d8:	4b04      	ldr	r3, [pc, #16]	; (800d5ec <vTaskSuspendAll+0x18>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	4a03      	ldr	r2, [pc, #12]	; (800d5ec <vTaskSuspendAll+0x18>)
 800d5e0:	6013      	str	r3, [r2, #0]
}
 800d5e2:	bf00      	nop
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bc80      	pop	{r7}
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	20001a64 	.word	0x20001a64

0800d5f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d5fe:	4b41      	ldr	r3, [pc, #260]	; (800d704 <xTaskResumeAll+0x114>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d10a      	bne.n	800d61c <xTaskResumeAll+0x2c>
	__asm volatile
 800d606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60a:	f383 8811 	msr	BASEPRI, r3
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	603b      	str	r3, [r7, #0]
}
 800d618:	bf00      	nop
 800d61a:	e7fe      	b.n	800d61a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d61c:	f001 faa6 	bl	800eb6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d620:	4b38      	ldr	r3, [pc, #224]	; (800d704 <xTaskResumeAll+0x114>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3b01      	subs	r3, #1
 800d626:	4a37      	ldr	r2, [pc, #220]	; (800d704 <xTaskResumeAll+0x114>)
 800d628:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d62a:	4b36      	ldr	r3, [pc, #216]	; (800d704 <xTaskResumeAll+0x114>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d161      	bne.n	800d6f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d632:	4b35      	ldr	r3, [pc, #212]	; (800d708 <xTaskResumeAll+0x118>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d05d      	beq.n	800d6f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d63a:	e02e      	b.n	800d69a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d63c:	4b33      	ldr	r3, [pc, #204]	; (800d70c <xTaskResumeAll+0x11c>)
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	3318      	adds	r3, #24
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe fcbb 	bl	800bfc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3304      	adds	r3, #4
 800d652:	4618      	mov	r0, r3
 800d654:	f7fe fcb6 	bl	800bfc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65c:	2201      	movs	r2, #1
 800d65e:	409a      	lsls	r2, r3
 800d660:	4b2b      	ldr	r3, [pc, #172]	; (800d710 <xTaskResumeAll+0x120>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4313      	orrs	r3, r2
 800d666:	4a2a      	ldr	r2, [pc, #168]	; (800d710 <xTaskResumeAll+0x120>)
 800d668:	6013      	str	r3, [r2, #0]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d66e:	4613      	mov	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	4a27      	ldr	r2, [pc, #156]	; (800d714 <xTaskResumeAll+0x124>)
 800d678:	441a      	add	r2, r3
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	3304      	adds	r3, #4
 800d67e:	4619      	mov	r1, r3
 800d680:	4610      	mov	r0, r2
 800d682:	f7fe fc44 	bl	800bf0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68a:	4b23      	ldr	r3, [pc, #140]	; (800d718 <xTaskResumeAll+0x128>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d690:	429a      	cmp	r2, r3
 800d692:	d302      	bcc.n	800d69a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d694:	4b21      	ldr	r3, [pc, #132]	; (800d71c <xTaskResumeAll+0x12c>)
 800d696:	2201      	movs	r2, #1
 800d698:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d69a:	4b1c      	ldr	r3, [pc, #112]	; (800d70c <xTaskResumeAll+0x11c>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1cc      	bne.n	800d63c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d001      	beq.n	800d6ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d6a8:	f000 fb88 	bl	800ddbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d6ac:	4b1c      	ldr	r3, [pc, #112]	; (800d720 <xTaskResumeAll+0x130>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d010      	beq.n	800d6da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d6b8:	f000 f856 	bl	800d768 <xTaskIncrementTick>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d002      	beq.n	800d6c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d6c2:	4b16      	ldr	r3, [pc, #88]	; (800d71c <xTaskResumeAll+0x12c>)
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1f1      	bne.n	800d6b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d6d4:	4b12      	ldr	r3, [pc, #72]	; (800d720 <xTaskResumeAll+0x130>)
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d6da:	4b10      	ldr	r3, [pc, #64]	; (800d71c <xTaskResumeAll+0x12c>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d009      	beq.n	800d6f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d6e6:	4b0f      	ldr	r3, [pc, #60]	; (800d724 <xTaskResumeAll+0x134>)
 800d6e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ec:	601a      	str	r2, [r3, #0]
 800d6ee:	f3bf 8f4f 	dsb	sy
 800d6f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d6f6:	f001 fa69 	bl	800ebcc <vPortExitCritical>

	return xAlreadyYielded;
 800d6fa:	68bb      	ldr	r3, [r7, #8]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3710      	adds	r7, #16
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	20001a64 	.word	0x20001a64
 800d708:	20001a3c 	.word	0x20001a3c
 800d70c:	200019fc 	.word	0x200019fc
 800d710:	20001a44 	.word	0x20001a44
 800d714:	20001940 	.word	0x20001940
 800d718:	2000193c 	.word	0x2000193c
 800d71c:	20001a50 	.word	0x20001a50
 800d720:	20001a4c 	.word	0x20001a4c
 800d724:	e000ed04 	.word	0xe000ed04

0800d728 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d72e:	4b04      	ldr	r3, [pc, #16]	; (800d740 <xTaskGetTickCount+0x18>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d734:	687b      	ldr	r3, [r7, #4]
}
 800d736:	4618      	mov	r0, r3
 800d738:	370c      	adds	r7, #12
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bc80      	pop	{r7}
 800d73e:	4770      	bx	lr
 800d740:	20001a40 	.word	0x20001a40

0800d744 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d74a:	f001 fad1 	bl	800ecf0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d74e:	2300      	movs	r3, #0
 800d750:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d752:	4b04      	ldr	r3, [pc, #16]	; (800d764 <xTaskGetTickCountFromISR+0x20>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d758:	683b      	ldr	r3, [r7, #0]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	20001a40 	.word	0x20001a40

0800d768 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b086      	sub	sp, #24
 800d76c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d76e:	2300      	movs	r3, #0
 800d770:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d772:	4b51      	ldr	r3, [pc, #324]	; (800d8b8 <xTaskIncrementTick+0x150>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	f040 808d 	bne.w	800d896 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d77c:	4b4f      	ldr	r3, [pc, #316]	; (800d8bc <xTaskIncrementTick+0x154>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	3301      	adds	r3, #1
 800d782:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d784:	4a4d      	ldr	r2, [pc, #308]	; (800d8bc <xTaskIncrementTick+0x154>)
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d120      	bne.n	800d7d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d790:	4b4b      	ldr	r3, [pc, #300]	; (800d8c0 <xTaskIncrementTick+0x158>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00a      	beq.n	800d7b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800d79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79e:	f383 8811 	msr	BASEPRI, r3
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	f3bf 8f4f 	dsb	sy
 800d7aa:	603b      	str	r3, [r7, #0]
}
 800d7ac:	bf00      	nop
 800d7ae:	e7fe      	b.n	800d7ae <xTaskIncrementTick+0x46>
 800d7b0:	4b43      	ldr	r3, [pc, #268]	; (800d8c0 <xTaskIncrementTick+0x158>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	60fb      	str	r3, [r7, #12]
 800d7b6:	4b43      	ldr	r3, [pc, #268]	; (800d8c4 <xTaskIncrementTick+0x15c>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4a41      	ldr	r2, [pc, #260]	; (800d8c0 <xTaskIncrementTick+0x158>)
 800d7bc:	6013      	str	r3, [r2, #0]
 800d7be:	4a41      	ldr	r2, [pc, #260]	; (800d8c4 <xTaskIncrementTick+0x15c>)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6013      	str	r3, [r2, #0]
 800d7c4:	4b40      	ldr	r3, [pc, #256]	; (800d8c8 <xTaskIncrementTick+0x160>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	4a3f      	ldr	r2, [pc, #252]	; (800d8c8 <xTaskIncrementTick+0x160>)
 800d7cc:	6013      	str	r3, [r2, #0]
 800d7ce:	f000 faf5 	bl	800ddbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d7d2:	4b3e      	ldr	r3, [pc, #248]	; (800d8cc <xTaskIncrementTick+0x164>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	693a      	ldr	r2, [r7, #16]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d34d      	bcc.n	800d878 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7dc:	4b38      	ldr	r3, [pc, #224]	; (800d8c0 <xTaskIncrementTick+0x158>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d101      	bne.n	800d7ea <xTaskIncrementTick+0x82>
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e000      	b.n	800d7ec <xTaskIncrementTick+0x84>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d004      	beq.n	800d7fa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7f0:	4b36      	ldr	r3, [pc, #216]	; (800d8cc <xTaskIncrementTick+0x164>)
 800d7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f6:	601a      	str	r2, [r3, #0]
					break;
 800d7f8:	e03e      	b.n	800d878 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d7fa:	4b31      	ldr	r3, [pc, #196]	; (800d8c0 <xTaskIncrementTick+0x158>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d80a:	693a      	ldr	r2, [r7, #16]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d203      	bcs.n	800d81a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d812:	4a2e      	ldr	r2, [pc, #184]	; (800d8cc <xTaskIncrementTick+0x164>)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6013      	str	r3, [r2, #0]
						break;
 800d818:	e02e      	b.n	800d878 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	3304      	adds	r3, #4
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fe fbd0 	bl	800bfc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d004      	beq.n	800d836 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	3318      	adds	r3, #24
 800d830:	4618      	mov	r0, r3
 800d832:	f7fe fbc7 	bl	800bfc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83a:	2201      	movs	r2, #1
 800d83c:	409a      	lsls	r2, r3
 800d83e:	4b24      	ldr	r3, [pc, #144]	; (800d8d0 <xTaskIncrementTick+0x168>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4313      	orrs	r3, r2
 800d844:	4a22      	ldr	r2, [pc, #136]	; (800d8d0 <xTaskIncrementTick+0x168>)
 800d846:	6013      	str	r3, [r2, #0]
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d84c:	4613      	mov	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4413      	add	r3, r2
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	4a1f      	ldr	r2, [pc, #124]	; (800d8d4 <xTaskIncrementTick+0x16c>)
 800d856:	441a      	add	r2, r3
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	3304      	adds	r3, #4
 800d85c:	4619      	mov	r1, r3
 800d85e:	4610      	mov	r0, r2
 800d860:	f7fe fb55 	bl	800bf0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d868:	4b1b      	ldr	r3, [pc, #108]	; (800d8d8 <xTaskIncrementTick+0x170>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86e:	429a      	cmp	r2, r3
 800d870:	d3b4      	bcc.n	800d7dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d872:	2301      	movs	r3, #1
 800d874:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d876:	e7b1      	b.n	800d7dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d878:	4b17      	ldr	r3, [pc, #92]	; (800d8d8 <xTaskIncrementTick+0x170>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d87e:	4915      	ldr	r1, [pc, #84]	; (800d8d4 <xTaskIncrementTick+0x16c>)
 800d880:	4613      	mov	r3, r2
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	4413      	add	r3, r2
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	440b      	add	r3, r1
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d907      	bls.n	800d8a0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800d890:	2301      	movs	r3, #1
 800d892:	617b      	str	r3, [r7, #20]
 800d894:	e004      	b.n	800d8a0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d896:	4b11      	ldr	r3, [pc, #68]	; (800d8dc <xTaskIncrementTick+0x174>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3301      	adds	r3, #1
 800d89c:	4a0f      	ldr	r2, [pc, #60]	; (800d8dc <xTaskIncrementTick+0x174>)
 800d89e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d8a0:	4b0f      	ldr	r3, [pc, #60]	; (800d8e0 <xTaskIncrementTick+0x178>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d001      	beq.n	800d8ac <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d8ac:	697b      	ldr	r3, [r7, #20]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3718      	adds	r7, #24
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	20001a64 	.word	0x20001a64
 800d8bc:	20001a40 	.word	0x20001a40
 800d8c0:	200019f4 	.word	0x200019f4
 800d8c4:	200019f8 	.word	0x200019f8
 800d8c8:	20001a54 	.word	0x20001a54
 800d8cc:	20001a5c 	.word	0x20001a5c
 800d8d0:	20001a44 	.word	0x20001a44
 800d8d4:	20001940 	.word	0x20001940
 800d8d8:	2000193c 	.word	0x2000193c
 800d8dc:	20001a4c 	.word	0x20001a4c
 800d8e0:	20001a50 	.word	0x20001a50

0800d8e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b087      	sub	sp, #28
 800d8e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d8ea:	4b26      	ldr	r3, [pc, #152]	; (800d984 <vTaskSwitchContext+0xa0>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d8f2:	4b25      	ldr	r3, [pc, #148]	; (800d988 <vTaskSwitchContext+0xa4>)
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d8f8:	e03f      	b.n	800d97a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d8fa:	4b23      	ldr	r3, [pc, #140]	; (800d988 <vTaskSwitchContext+0xa4>)
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d900:	4b22      	ldr	r3, [pc, #136]	; (800d98c <vTaskSwitchContext+0xa8>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	fab3 f383 	clz	r3, r3
 800d90c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d90e:	7afb      	ldrb	r3, [r7, #11]
 800d910:	f1c3 031f 	rsb	r3, r3, #31
 800d914:	617b      	str	r3, [r7, #20]
 800d916:	491e      	ldr	r1, [pc, #120]	; (800d990 <vTaskSwitchContext+0xac>)
 800d918:	697a      	ldr	r2, [r7, #20]
 800d91a:	4613      	mov	r3, r2
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	4413      	add	r3, r2
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	440b      	add	r3, r1
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10a      	bne.n	800d940 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	607b      	str	r3, [r7, #4]
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <vTaskSwitchContext+0x5a>
 800d940:	697a      	ldr	r2, [r7, #20]
 800d942:	4613      	mov	r3, r2
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	4413      	add	r3, r2
 800d948:	009b      	lsls	r3, r3, #2
 800d94a:	4a11      	ldr	r2, [pc, #68]	; (800d990 <vTaskSwitchContext+0xac>)
 800d94c:	4413      	add	r3, r2
 800d94e:	613b      	str	r3, [r7, #16]
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	685a      	ldr	r2, [r3, #4]
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	605a      	str	r2, [r3, #4]
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	685a      	ldr	r2, [r3, #4]
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	3308      	adds	r3, #8
 800d962:	429a      	cmp	r2, r3
 800d964:	d104      	bne.n	800d970 <vTaskSwitchContext+0x8c>
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	685a      	ldr	r2, [r3, #4]
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	605a      	str	r2, [r3, #4]
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	4a07      	ldr	r2, [pc, #28]	; (800d994 <vTaskSwitchContext+0xb0>)
 800d978:	6013      	str	r3, [r2, #0]
}
 800d97a:	bf00      	nop
 800d97c:	371c      	adds	r7, #28
 800d97e:	46bd      	mov	sp, r7
 800d980:	bc80      	pop	{r7}
 800d982:	4770      	bx	lr
 800d984:	20001a64 	.word	0x20001a64
 800d988:	20001a50 	.word	0x20001a50
 800d98c:	20001a44 	.word	0x20001a44
 800d990:	20001940 	.word	0x20001940
 800d994:	2000193c 	.word	0x2000193c

0800d998 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d10a      	bne.n	800d9be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	60fb      	str	r3, [r7, #12]
}
 800d9ba:	bf00      	nop
 800d9bc:	e7fe      	b.n	800d9bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9be:	4b07      	ldr	r3, [pc, #28]	; (800d9dc <vTaskPlaceOnEventList+0x44>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	3318      	adds	r3, #24
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f7fe fac4 	bl	800bf54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d9cc:	2101      	movs	r1, #1
 800d9ce:	6838      	ldr	r0, [r7, #0]
 800d9d0:	f000 fbee 	bl	800e1b0 <prvAddCurrentTaskToDelayedList>
}
 800d9d4:	bf00      	nop
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	2000193c 	.word	0x2000193c

0800d9e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d10a      	bne.n	800da08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f6:	f383 8811 	msr	BASEPRI, r3
 800d9fa:	f3bf 8f6f 	isb	sy
 800d9fe:	f3bf 8f4f 	dsb	sy
 800da02:	617b      	str	r3, [r7, #20]
}
 800da04:	bf00      	nop
 800da06:	e7fe      	b.n	800da06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da08:	4b0a      	ldr	r3, [pc, #40]	; (800da34 <vTaskPlaceOnEventListRestricted+0x54>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3318      	adds	r3, #24
 800da0e:	4619      	mov	r1, r3
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f7fe fa7c 	bl	800bf0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800da1c:	f04f 33ff 	mov.w	r3, #4294967295
 800da20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da22:	6879      	ldr	r1, [r7, #4]
 800da24:	68b8      	ldr	r0, [r7, #8]
 800da26:	f000 fbc3 	bl	800e1b0 <prvAddCurrentTaskToDelayedList>
	}
 800da2a:	bf00      	nop
 800da2c:	3718      	adds	r7, #24
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	2000193c 	.word	0x2000193c

0800da38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b086      	sub	sp, #24
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d10a      	bne.n	800da64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800da4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da52:	f383 8811 	msr	BASEPRI, r3
 800da56:	f3bf 8f6f 	isb	sy
 800da5a:	f3bf 8f4f 	dsb	sy
 800da5e:	60fb      	str	r3, [r7, #12]
}
 800da60:	bf00      	nop
 800da62:	e7fe      	b.n	800da62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	3318      	adds	r3, #24
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fe faab 	bl	800bfc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da6e:	4b1d      	ldr	r3, [pc, #116]	; (800dae4 <xTaskRemoveFromEventList+0xac>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d11c      	bne.n	800dab0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	3304      	adds	r3, #4
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fe faa2 	bl	800bfc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da84:	2201      	movs	r2, #1
 800da86:	409a      	lsls	r2, r3
 800da88:	4b17      	ldr	r3, [pc, #92]	; (800dae8 <xTaskRemoveFromEventList+0xb0>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4313      	orrs	r3, r2
 800da8e:	4a16      	ldr	r2, [pc, #88]	; (800dae8 <xTaskRemoveFromEventList+0xb0>)
 800da90:	6013      	str	r3, [r2, #0]
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da96:	4613      	mov	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	4a13      	ldr	r2, [pc, #76]	; (800daec <xTaskRemoveFromEventList+0xb4>)
 800daa0:	441a      	add	r2, r3
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	3304      	adds	r3, #4
 800daa6:	4619      	mov	r1, r3
 800daa8:	4610      	mov	r0, r2
 800daaa:	f7fe fa30 	bl	800bf0e <vListInsertEnd>
 800daae:	e005      	b.n	800dabc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	3318      	adds	r3, #24
 800dab4:	4619      	mov	r1, r3
 800dab6:	480e      	ldr	r0, [pc, #56]	; (800daf0 <xTaskRemoveFromEventList+0xb8>)
 800dab8:	f7fe fa29 	bl	800bf0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dac0:	4b0c      	ldr	r3, [pc, #48]	; (800daf4 <xTaskRemoveFromEventList+0xbc>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d905      	bls.n	800dad6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800daca:	2301      	movs	r3, #1
 800dacc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dace:	4b0a      	ldr	r3, [pc, #40]	; (800daf8 <xTaskRemoveFromEventList+0xc0>)
 800dad0:	2201      	movs	r2, #1
 800dad2:	601a      	str	r2, [r3, #0]
 800dad4:	e001      	b.n	800dada <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800dad6:	2300      	movs	r3, #0
 800dad8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800dada:	697b      	ldr	r3, [r7, #20]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3718      	adds	r7, #24
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	20001a64 	.word	0x20001a64
 800dae8:	20001a44 	.word	0x20001a44
 800daec:	20001940 	.word	0x20001940
 800daf0:	200019fc 	.word	0x200019fc
 800daf4:	2000193c 	.word	0x2000193c
 800daf8:	20001a50 	.word	0x20001a50

0800dafc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d10a      	bne.n	800db20 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800db0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0e:	f383 8811 	msr	BASEPRI, r3
 800db12:	f3bf 8f6f 	isb	sy
 800db16:	f3bf 8f4f 	dsb	sy
 800db1a:	60fb      	str	r3, [r7, #12]
}
 800db1c:	bf00      	nop
 800db1e:	e7fe      	b.n	800db1e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800db20:	f001 f824 	bl	800eb6c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800db24:	4b06      	ldr	r3, [pc, #24]	; (800db40 <vTaskSetTimeOutState+0x44>)
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800db2c:	4b05      	ldr	r3, [pc, #20]	; (800db44 <vTaskSetTimeOutState+0x48>)
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800db34:	f001 f84a 	bl	800ebcc <vPortExitCritical>
}
 800db38:	bf00      	nop
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}
 800db40:	20001a54 	.word	0x20001a54
 800db44:	20001a40 	.word	0x20001a40

0800db48 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800db50:	4b06      	ldr	r3, [pc, #24]	; (800db6c <vTaskInternalSetTimeOutState+0x24>)
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800db58:	4b05      	ldr	r3, [pc, #20]	; (800db70 <vTaskInternalSetTimeOutState+0x28>)
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	605a      	str	r2, [r3, #4]
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	bc80      	pop	{r7}
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop
 800db6c:	20001a54 	.word	0x20001a54
 800db70:	20001a40 	.word	0x20001a40

0800db74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b088      	sub	sp, #32
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10a      	bne.n	800db9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800db84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	613b      	str	r3, [r7, #16]
}
 800db96:	bf00      	nop
 800db98:	e7fe      	b.n	800db98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d10a      	bne.n	800dbb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	60fb      	str	r3, [r7, #12]
}
 800dbb2:	bf00      	nop
 800dbb4:	e7fe      	b.n	800dbb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dbb6:	f000 ffd9 	bl	800eb6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dbba:	4b1d      	ldr	r3, [pc, #116]	; (800dc30 <xTaskCheckForTimeOut+0xbc>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	69ba      	ldr	r2, [r7, #24]
 800dbc6:	1ad3      	subs	r3, r2, r3
 800dbc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd2:	d102      	bne.n	800dbda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	61fb      	str	r3, [r7, #28]
 800dbd8:	e023      	b.n	800dc22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	4b15      	ldr	r3, [pc, #84]	; (800dc34 <xTaskCheckForTimeOut+0xc0>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d007      	beq.n	800dbf6 <xTaskCheckForTimeOut+0x82>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	69ba      	ldr	r2, [r7, #24]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d302      	bcc.n	800dbf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	61fb      	str	r3, [r7, #28]
 800dbf4:	e015      	b.n	800dc22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	697a      	ldr	r2, [r7, #20]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d20b      	bcs.n	800dc18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	1ad2      	subs	r2, r2, r3
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7ff ff9b 	bl	800db48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dc12:	2300      	movs	r3, #0
 800dc14:	61fb      	str	r3, [r7, #28]
 800dc16:	e004      	b.n	800dc22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dc22:	f000 ffd3 	bl	800ebcc <vPortExitCritical>

	return xReturn;
 800dc26:	69fb      	ldr	r3, [r7, #28]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3720      	adds	r7, #32
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	20001a40 	.word	0x20001a40
 800dc34:	20001a54 	.word	0x20001a54

0800dc38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dc38:	b480      	push	{r7}
 800dc3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dc3c:	4b03      	ldr	r3, [pc, #12]	; (800dc4c <vTaskMissedYield+0x14>)
 800dc3e:	2201      	movs	r2, #1
 800dc40:	601a      	str	r2, [r3, #0]
}
 800dc42:	bf00      	nop
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bc80      	pop	{r7}
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	20001a50 	.word	0x20001a50

0800dc50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dc58:	f000 f852 	bl	800dd00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc5c:	4b06      	ldr	r3, [pc, #24]	; (800dc78 <prvIdleTask+0x28>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d9f9      	bls.n	800dc58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dc64:	4b05      	ldr	r3, [pc, #20]	; (800dc7c <prvIdleTask+0x2c>)
 800dc66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc6a:	601a      	str	r2, [r3, #0]
 800dc6c:	f3bf 8f4f 	dsb	sy
 800dc70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dc74:	e7f0      	b.n	800dc58 <prvIdleTask+0x8>
 800dc76:	bf00      	nop
 800dc78:	20001940 	.word	0x20001940
 800dc7c:	e000ed04 	.word	0xe000ed04

0800dc80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc86:	2300      	movs	r3, #0
 800dc88:	607b      	str	r3, [r7, #4]
 800dc8a:	e00c      	b.n	800dca6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	4613      	mov	r3, r2
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	4413      	add	r3, r2
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4a12      	ldr	r2, [pc, #72]	; (800dce0 <prvInitialiseTaskLists+0x60>)
 800dc98:	4413      	add	r3, r2
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7fe f90c 	bl	800beb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	3301      	adds	r3, #1
 800dca4:	607b      	str	r3, [r7, #4]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2b06      	cmp	r3, #6
 800dcaa:	d9ef      	bls.n	800dc8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dcac:	480d      	ldr	r0, [pc, #52]	; (800dce4 <prvInitialiseTaskLists+0x64>)
 800dcae:	f7fe f903 	bl	800beb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dcb2:	480d      	ldr	r0, [pc, #52]	; (800dce8 <prvInitialiseTaskLists+0x68>)
 800dcb4:	f7fe f900 	bl	800beb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dcb8:	480c      	ldr	r0, [pc, #48]	; (800dcec <prvInitialiseTaskLists+0x6c>)
 800dcba:	f7fe f8fd 	bl	800beb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dcbe:	480c      	ldr	r0, [pc, #48]	; (800dcf0 <prvInitialiseTaskLists+0x70>)
 800dcc0:	f7fe f8fa 	bl	800beb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dcc4:	480b      	ldr	r0, [pc, #44]	; (800dcf4 <prvInitialiseTaskLists+0x74>)
 800dcc6:	f7fe f8f7 	bl	800beb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dcca:	4b0b      	ldr	r3, [pc, #44]	; (800dcf8 <prvInitialiseTaskLists+0x78>)
 800dccc:	4a05      	ldr	r2, [pc, #20]	; (800dce4 <prvInitialiseTaskLists+0x64>)
 800dcce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dcd0:	4b0a      	ldr	r3, [pc, #40]	; (800dcfc <prvInitialiseTaskLists+0x7c>)
 800dcd2:	4a05      	ldr	r2, [pc, #20]	; (800dce8 <prvInitialiseTaskLists+0x68>)
 800dcd4:	601a      	str	r2, [r3, #0]
}
 800dcd6:	bf00      	nop
 800dcd8:	3708      	adds	r7, #8
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	20001940 	.word	0x20001940
 800dce4:	200019cc 	.word	0x200019cc
 800dce8:	200019e0 	.word	0x200019e0
 800dcec:	200019fc 	.word	0x200019fc
 800dcf0:	20001a10 	.word	0x20001a10
 800dcf4:	20001a28 	.word	0x20001a28
 800dcf8:	200019f4 	.word	0x200019f4
 800dcfc:	200019f8 	.word	0x200019f8

0800dd00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd06:	e019      	b.n	800dd3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dd08:	f000 ff30 	bl	800eb6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800dd0c:	4b10      	ldr	r3, [pc, #64]	; (800dd50 <prvCheckTasksWaitingTermination+0x50>)
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	3304      	adds	r3, #4
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fe f953 	bl	800bfc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd1e:	4b0d      	ldr	r3, [pc, #52]	; (800dd54 <prvCheckTasksWaitingTermination+0x54>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	3b01      	subs	r3, #1
 800dd24:	4a0b      	ldr	r2, [pc, #44]	; (800dd54 <prvCheckTasksWaitingTermination+0x54>)
 800dd26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd28:	4b0b      	ldr	r3, [pc, #44]	; (800dd58 <prvCheckTasksWaitingTermination+0x58>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	3b01      	subs	r3, #1
 800dd2e:	4a0a      	ldr	r2, [pc, #40]	; (800dd58 <prvCheckTasksWaitingTermination+0x58>)
 800dd30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dd32:	f000 ff4b 	bl	800ebcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f000 f810 	bl	800dd5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd3c:	4b06      	ldr	r3, [pc, #24]	; (800dd58 <prvCheckTasksWaitingTermination+0x58>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d1e1      	bne.n	800dd08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dd44:	bf00      	nop
 800dd46:	bf00      	nop
 800dd48:	3708      	adds	r7, #8
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	20001a10 	.word	0x20001a10
 800dd54:	20001a3c 	.word	0x20001a3c
 800dd58:	20001a24 	.word	0x20001a24

0800dd5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d108      	bne.n	800dd80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd72:	4618      	mov	r0, r3
 800dd74:	f001 f8be 	bl	800eef4 <vPortFree>
				vPortFree( pxTCB );
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f001 f8bb 	bl	800eef4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dd7e:	e018      	b.n	800ddb2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d103      	bne.n	800dd92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f001 f8b2 	bl	800eef4 <vPortFree>
	}
 800dd90:	e00f      	b.n	800ddb2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dd98:	2b02      	cmp	r3, #2
 800dd9a:	d00a      	beq.n	800ddb2 <prvDeleteTCB+0x56>
	__asm volatile
 800dd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda0:	f383 8811 	msr	BASEPRI, r3
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	60fb      	str	r3, [r7, #12]
}
 800ddae:	bf00      	nop
 800ddb0:	e7fe      	b.n	800ddb0 <prvDeleteTCB+0x54>
	}
 800ddb2:	bf00      	nop
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
	...

0800ddbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddc2:	4b0e      	ldr	r3, [pc, #56]	; (800ddfc <prvResetNextTaskUnblockTime+0x40>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d101      	bne.n	800ddd0 <prvResetNextTaskUnblockTime+0x14>
 800ddcc:	2301      	movs	r3, #1
 800ddce:	e000      	b.n	800ddd2 <prvResetNextTaskUnblockTime+0x16>
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d004      	beq.n	800dde0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ddd6:	4b0a      	ldr	r3, [pc, #40]	; (800de00 <prvResetNextTaskUnblockTime+0x44>)
 800ddd8:	f04f 32ff 	mov.w	r2, #4294967295
 800dddc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ddde:	e008      	b.n	800ddf2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dde0:	4b06      	ldr	r3, [pc, #24]	; (800ddfc <prvResetNextTaskUnblockTime+0x40>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	4a04      	ldr	r2, [pc, #16]	; (800de00 <prvResetNextTaskUnblockTime+0x44>)
 800ddf0:	6013      	str	r3, [r2, #0]
}
 800ddf2:	bf00      	nop
 800ddf4:	370c      	adds	r7, #12
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bc80      	pop	{r7}
 800ddfa:	4770      	bx	lr
 800ddfc:	200019f4 	.word	0x200019f4
 800de00:	20001a5c 	.word	0x20001a5c

0800de04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800de0a:	4b04      	ldr	r3, [pc, #16]	; (800de1c <xTaskGetCurrentTaskHandle+0x18>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800de10:	687b      	ldr	r3, [r7, #4]
	}
 800de12:	4618      	mov	r0, r3
 800de14:	370c      	adds	r7, #12
 800de16:	46bd      	mov	sp, r7
 800de18:	bc80      	pop	{r7}
 800de1a:	4770      	bx	lr
 800de1c:	2000193c 	.word	0x2000193c

0800de20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de20:	b480      	push	{r7}
 800de22:	b083      	sub	sp, #12
 800de24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de26:	4b0b      	ldr	r3, [pc, #44]	; (800de54 <xTaskGetSchedulerState+0x34>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d102      	bne.n	800de34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de2e:	2301      	movs	r3, #1
 800de30:	607b      	str	r3, [r7, #4]
 800de32:	e008      	b.n	800de46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de34:	4b08      	ldr	r3, [pc, #32]	; (800de58 <xTaskGetSchedulerState+0x38>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d102      	bne.n	800de42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800de3c:	2302      	movs	r3, #2
 800de3e:	607b      	str	r3, [r7, #4]
 800de40:	e001      	b.n	800de46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800de42:	2300      	movs	r3, #0
 800de44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800de46:	687b      	ldr	r3, [r7, #4]
	}
 800de48:	4618      	mov	r0, r3
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bc80      	pop	{r7}
 800de50:	4770      	bx	lr
 800de52:	bf00      	nop
 800de54:	20001a48 	.word	0x20001a48
 800de58:	20001a64 	.word	0x20001a64

0800de5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b086      	sub	sp, #24
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800de68:	2300      	movs	r3, #0
 800de6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d06e      	beq.n	800df50 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800de72:	4b3a      	ldr	r3, [pc, #232]	; (800df5c <xTaskPriorityDisinherit+0x100>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	693a      	ldr	r2, [r7, #16]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d00a      	beq.n	800de92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800de7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de80:	f383 8811 	msr	BASEPRI, r3
 800de84:	f3bf 8f6f 	isb	sy
 800de88:	f3bf 8f4f 	dsb	sy
 800de8c:	60fb      	str	r3, [r7, #12]
}
 800de8e:	bf00      	nop
 800de90:	e7fe      	b.n	800de90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de96:	2b00      	cmp	r3, #0
 800de98:	d10a      	bne.n	800deb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800de9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9e:	f383 8811 	msr	BASEPRI, r3
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	60bb      	str	r3, [r7, #8]
}
 800deac:	bf00      	nop
 800deae:	e7fe      	b.n	800deae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800deb4:	1e5a      	subs	r2, r3, #1
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d044      	beq.n	800df50 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800deca:	2b00      	cmp	r3, #0
 800decc:	d140      	bne.n	800df50 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	3304      	adds	r3, #4
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fe f876 	bl	800bfc4 <uxListRemove>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d115      	bne.n	800df0a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dee2:	491f      	ldr	r1, [pc, #124]	; (800df60 <xTaskPriorityDisinherit+0x104>)
 800dee4:	4613      	mov	r3, r2
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	4413      	add	r3, r2
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	440b      	add	r3, r1
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10a      	bne.n	800df0a <xTaskPriorityDisinherit+0xae>
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def8:	2201      	movs	r2, #1
 800defa:	fa02 f303 	lsl.w	r3, r2, r3
 800defe:	43da      	mvns	r2, r3
 800df00:	4b18      	ldr	r3, [pc, #96]	; (800df64 <xTaskPriorityDisinherit+0x108>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4013      	ands	r3, r2
 800df06:	4a17      	ldr	r2, [pc, #92]	; (800df64 <xTaskPriorityDisinherit+0x108>)
 800df08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df16:	f1c3 0207 	rsb	r2, r3, #7
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df22:	2201      	movs	r2, #1
 800df24:	409a      	lsls	r2, r3
 800df26:	4b0f      	ldr	r3, [pc, #60]	; (800df64 <xTaskPriorityDisinherit+0x108>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4313      	orrs	r3, r2
 800df2c:	4a0d      	ldr	r2, [pc, #52]	; (800df64 <xTaskPriorityDisinherit+0x108>)
 800df2e:	6013      	str	r3, [r2, #0]
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df34:	4613      	mov	r3, r2
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	4413      	add	r3, r2
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	4a08      	ldr	r2, [pc, #32]	; (800df60 <xTaskPriorityDisinherit+0x104>)
 800df3e:	441a      	add	r2, r3
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	3304      	adds	r3, #4
 800df44:	4619      	mov	r1, r3
 800df46:	4610      	mov	r0, r2
 800df48:	f7fd ffe1 	bl	800bf0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800df4c:	2301      	movs	r3, #1
 800df4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df50:	697b      	ldr	r3, [r7, #20]
	}
 800df52:	4618      	mov	r0, r3
 800df54:	3718      	adds	r7, #24
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	2000193c 	.word	0x2000193c
 800df60:	20001940 	.word	0x20001940
 800df64:	20001a44 	.word	0x20001a44

0800df68 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
 800df74:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800df76:	f000 fdf9 	bl	800eb6c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800df7a:	4b26      	ldr	r3, [pc, #152]	; (800e014 <xTaskNotifyWait+0xac>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800df82:	b2db      	uxtb	r3, r3
 800df84:	2b02      	cmp	r3, #2
 800df86:	d01a      	beq.n	800dfbe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800df88:	4b22      	ldr	r3, [pc, #136]	; (800e014 <xTaskNotifyWait+0xac>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800df8e:	68fa      	ldr	r2, [r7, #12]
 800df90:	43d2      	mvns	r2, r2
 800df92:	400a      	ands	r2, r1
 800df94:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800df96:	4b1f      	ldr	r3, [pc, #124]	; (800e014 <xTaskNotifyWait+0xac>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2201      	movs	r2, #1
 800df9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00b      	beq.n	800dfbe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfa6:	2101      	movs	r1, #1
 800dfa8:	6838      	ldr	r0, [r7, #0]
 800dfaa:	f000 f901 	bl	800e1b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800dfae:	4b1a      	ldr	r3, [pc, #104]	; (800e018 <xTaskNotifyWait+0xb0>)
 800dfb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfb4:	601a      	str	r2, [r3, #0]
 800dfb6:	f3bf 8f4f 	dsb	sy
 800dfba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800dfbe:	f000 fe05 	bl	800ebcc <vPortExitCritical>

		taskENTER_CRITICAL();
 800dfc2:	f000 fdd3 	bl	800eb6c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d004      	beq.n	800dfd6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800dfcc:	4b11      	ldr	r3, [pc, #68]	; (800e014 <xTaskNotifyWait+0xac>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800dfd6:	4b0f      	ldr	r3, [pc, #60]	; (800e014 <xTaskNotifyWait+0xac>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d002      	beq.n	800dfea <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	617b      	str	r3, [r7, #20]
 800dfe8:	e008      	b.n	800dffc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800dfea:	4b0a      	ldr	r3, [pc, #40]	; (800e014 <xTaskNotifyWait+0xac>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	43d2      	mvns	r2, r2
 800dff4:	400a      	ands	r2, r1
 800dff6:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800dff8:	2301      	movs	r3, #1
 800dffa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dffc:	4b05      	ldr	r3, [pc, #20]	; (800e014 <xTaskNotifyWait+0xac>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2200      	movs	r2, #0
 800e002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800e006:	f000 fde1 	bl	800ebcc <vPortExitCritical>

		return xReturn;
 800e00a:	697b      	ldr	r3, [r7, #20]
	}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3718      	adds	r7, #24
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	2000193c 	.word	0x2000193c
 800e018:	e000ed04 	.word	0xe000ed04

0800e01c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b08a      	sub	sp, #40	; 0x28
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	603b      	str	r3, [r7, #0]
 800e028:	4613      	mov	r3, r2
 800e02a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800e02c:	2301      	movs	r3, #1
 800e02e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10a      	bne.n	800e04c <xTaskGenericNotify+0x30>
	__asm volatile
 800e036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03a:	f383 8811 	msr	BASEPRI, r3
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	61bb      	str	r3, [r7, #24]
}
 800e048:	bf00      	nop
 800e04a:	e7fe      	b.n	800e04a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800e050:	f000 fd8c 	bl	800eb6c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d003      	beq.n	800e062 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e05a:	6a3b      	ldr	r3, [r7, #32]
 800e05c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e062:	6a3b      	ldr	r3, [r7, #32]
 800e064:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e068:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	2202      	movs	r2, #2
 800e06e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800e072:	79fb      	ldrb	r3, [r7, #7]
 800e074:	2b04      	cmp	r3, #4
 800e076:	d828      	bhi.n	800e0ca <xTaskGenericNotify+0xae>
 800e078:	a201      	add	r2, pc, #4	; (adr r2, 800e080 <xTaskGenericNotify+0x64>)
 800e07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e07e:	bf00      	nop
 800e080:	0800e0cb 	.word	0x0800e0cb
 800e084:	0800e095 	.word	0x0800e095
 800e088:	0800e0a3 	.word	0x0800e0a3
 800e08c:	0800e0af 	.word	0x0800e0af
 800e090:	0800e0b7 	.word	0x0800e0b7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e094:	6a3b      	ldr	r3, [r7, #32]
 800e096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	431a      	orrs	r2, r3
 800e09c:	6a3b      	ldr	r3, [r7, #32]
 800e09e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800e0a0:	e013      	b.n	800e0ca <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e0a2:	6a3b      	ldr	r3, [r7, #32]
 800e0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0a6:	1c5a      	adds	r2, r3, #1
 800e0a8:	6a3b      	ldr	r3, [r7, #32]
 800e0aa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800e0ac:	e00d      	b.n	800e0ca <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e0ae:	6a3b      	ldr	r3, [r7, #32]
 800e0b0:	68ba      	ldr	r2, [r7, #8]
 800e0b2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800e0b4:	e009      	b.n	800e0ca <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e0b6:	7ffb      	ldrb	r3, [r7, #31]
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d003      	beq.n	800e0c4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e0bc:	6a3b      	ldr	r3, [r7, #32]
 800e0be:	68ba      	ldr	r2, [r7, #8]
 800e0c0:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e0c2:	e001      	b.n	800e0c8 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800e0c8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e0ca:	7ffb      	ldrb	r3, [r7, #31]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d139      	bne.n	800e144 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0d0:	6a3b      	ldr	r3, [r7, #32]
 800e0d2:	3304      	adds	r3, #4
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7fd ff75 	bl	800bfc4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e0da:	6a3b      	ldr	r3, [r7, #32]
 800e0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0de:	2201      	movs	r2, #1
 800e0e0:	409a      	lsls	r2, r3
 800e0e2:	4b1c      	ldr	r3, [pc, #112]	; (800e154 <xTaskGenericNotify+0x138>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4313      	orrs	r3, r2
 800e0e8:	4a1a      	ldr	r2, [pc, #104]	; (800e154 <xTaskGenericNotify+0x138>)
 800e0ea:	6013      	str	r3, [r2, #0]
 800e0ec:	6a3b      	ldr	r3, [r7, #32]
 800e0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0f0:	4613      	mov	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4413      	add	r3, r2
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	4a17      	ldr	r2, [pc, #92]	; (800e158 <xTaskGenericNotify+0x13c>)
 800e0fa:	441a      	add	r2, r3
 800e0fc:	6a3b      	ldr	r3, [r7, #32]
 800e0fe:	3304      	adds	r3, #4
 800e100:	4619      	mov	r1, r3
 800e102:	4610      	mov	r0, r2
 800e104:	f7fd ff03 	bl	800bf0e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e108:	6a3b      	ldr	r3, [r7, #32]
 800e10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00a      	beq.n	800e126 <xTaskGenericNotify+0x10a>
	__asm volatile
 800e110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e114:	f383 8811 	msr	BASEPRI, r3
 800e118:	f3bf 8f6f 	isb	sy
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	617b      	str	r3, [r7, #20]
}
 800e122:	bf00      	nop
 800e124:	e7fe      	b.n	800e124 <xTaskGenericNotify+0x108>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e126:	6a3b      	ldr	r3, [r7, #32]
 800e128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e12a:	4b0c      	ldr	r3, [pc, #48]	; (800e15c <xTaskGenericNotify+0x140>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e130:	429a      	cmp	r2, r3
 800e132:	d907      	bls.n	800e144 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e134:	4b0a      	ldr	r3, [pc, #40]	; (800e160 <xTaskGenericNotify+0x144>)
 800e136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e13a:	601a      	str	r2, [r3, #0]
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e144:	f000 fd42 	bl	800ebcc <vPortExitCritical>

		return xReturn;
 800e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3728      	adds	r7, #40	; 0x28
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	20001a44 	.word	0x20001a44
 800e158:	20001940 	.word	0x20001940
 800e15c:	2000193c 	.word	0x2000193c
 800e160:	e000ed04 	.word	0xe000ed04

0800e164 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d102      	bne.n	800e178 <xTaskNotifyStateClear+0x14>
 800e172:	4b0e      	ldr	r3, [pc, #56]	; (800e1ac <xTaskNotifyStateClear+0x48>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	e000      	b.n	800e17a <xTaskNotifyStateClear+0x16>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800e17c:	f000 fcf6 	bl	800eb6c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e186:	b2db      	uxtb	r3, r3
 800e188:	2b02      	cmp	r3, #2
 800e18a:	d106      	bne.n	800e19a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	2200      	movs	r2, #0
 800e190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				xReturn = pdPASS;
 800e194:	2301      	movs	r3, #1
 800e196:	60fb      	str	r3, [r7, #12]
 800e198:	e001      	b.n	800e19e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800e19a:	2300      	movs	r3, #0
 800e19c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800e19e:	f000 fd15 	bl	800ebcc <vPortExitCritical>

		return xReturn;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
	}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	2000193c 	.word	0x2000193c

0800e1b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e1ba:	4b29      	ldr	r3, [pc, #164]	; (800e260 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1c0:	4b28      	ldr	r3, [pc, #160]	; (800e264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	3304      	adds	r3, #4
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fd fefc 	bl	800bfc4 <uxListRemove>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d10b      	bne.n	800e1ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800e1d2:	4b24      	ldr	r3, [pc, #144]	; (800e264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d8:	2201      	movs	r2, #1
 800e1da:	fa02 f303 	lsl.w	r3, r2, r3
 800e1de:	43da      	mvns	r2, r3
 800e1e0:	4b21      	ldr	r3, [pc, #132]	; (800e268 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4013      	ands	r3, r2
 800e1e6:	4a20      	ldr	r2, [pc, #128]	; (800e268 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e1e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f0:	d10a      	bne.n	800e208 <prvAddCurrentTaskToDelayedList+0x58>
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d007      	beq.n	800e208 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1f8:	4b1a      	ldr	r3, [pc, #104]	; (800e264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	3304      	adds	r3, #4
 800e1fe:	4619      	mov	r1, r3
 800e200:	481a      	ldr	r0, [pc, #104]	; (800e26c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e202:	f7fd fe84 	bl	800bf0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e206:	e026      	b.n	800e256 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	4413      	add	r3, r2
 800e20e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e210:	4b14      	ldr	r3, [pc, #80]	; (800e264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	68ba      	ldr	r2, [r7, #8]
 800e216:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e218:	68ba      	ldr	r2, [r7, #8]
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d209      	bcs.n	800e234 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e220:	4b13      	ldr	r3, [pc, #76]	; (800e270 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	4b0f      	ldr	r3, [pc, #60]	; (800e264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	3304      	adds	r3, #4
 800e22a:	4619      	mov	r1, r3
 800e22c:	4610      	mov	r0, r2
 800e22e:	f7fd fe91 	bl	800bf54 <vListInsert>
}
 800e232:	e010      	b.n	800e256 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e234:	4b0f      	ldr	r3, [pc, #60]	; (800e274 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	4b0a      	ldr	r3, [pc, #40]	; (800e264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	3304      	adds	r3, #4
 800e23e:	4619      	mov	r1, r3
 800e240:	4610      	mov	r0, r2
 800e242:	f7fd fe87 	bl	800bf54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e246:	4b0c      	ldr	r3, [pc, #48]	; (800e278 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	68ba      	ldr	r2, [r7, #8]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d202      	bcs.n	800e256 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e250:	4a09      	ldr	r2, [pc, #36]	; (800e278 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	6013      	str	r3, [r2, #0]
}
 800e256:	bf00      	nop
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	20001a40 	.word	0x20001a40
 800e264:	2000193c 	.word	0x2000193c
 800e268:	20001a44 	.word	0x20001a44
 800e26c:	20001a28 	.word	0x20001a28
 800e270:	200019f8 	.word	0x200019f8
 800e274:	200019f4 	.word	0x200019f4
 800e278:	20001a5c 	.word	0x20001a5c

0800e27c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b08a      	sub	sp, #40	; 0x28
 800e280:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e282:	2300      	movs	r3, #0
 800e284:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e286:	f000 fb41 	bl	800e90c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e28a:	4b1c      	ldr	r3, [pc, #112]	; (800e2fc <xTimerCreateTimerTask+0x80>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d021      	beq.n	800e2d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e292:	2300      	movs	r3, #0
 800e294:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e296:	2300      	movs	r3, #0
 800e298:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e29a:	1d3a      	adds	r2, r7, #4
 800e29c:	f107 0108 	add.w	r1, r7, #8
 800e2a0:	f107 030c 	add.w	r3, r7, #12
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7f6 fda3 	bl	8004df0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e2aa:	6879      	ldr	r1, [r7, #4]
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	9202      	str	r2, [sp, #8]
 800e2b2:	9301      	str	r3, [sp, #4]
 800e2b4:	2302      	movs	r3, #2
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	460a      	mov	r2, r1
 800e2bc:	4910      	ldr	r1, [pc, #64]	; (800e300 <xTimerCreateTimerTask+0x84>)
 800e2be:	4811      	ldr	r0, [pc, #68]	; (800e304 <xTimerCreateTimerTask+0x88>)
 800e2c0:	f7fe ff5b 	bl	800d17a <xTaskCreateStatic>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	4a10      	ldr	r2, [pc, #64]	; (800e308 <xTimerCreateTimerTask+0x8c>)
 800e2c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e2ca:	4b0f      	ldr	r3, [pc, #60]	; (800e308 <xTimerCreateTimerTask+0x8c>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d001      	beq.n	800e2d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d10a      	bne.n	800e2f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e0:	f383 8811 	msr	BASEPRI, r3
 800e2e4:	f3bf 8f6f 	isb	sy
 800e2e8:	f3bf 8f4f 	dsb	sy
 800e2ec:	613b      	str	r3, [r7, #16]
}
 800e2ee:	bf00      	nop
 800e2f0:	e7fe      	b.n	800e2f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e2f2:	697b      	ldr	r3, [r7, #20]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3718      	adds	r7, #24
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	20001a98 	.word	0x20001a98
 800e300:	08013c58 	.word	0x08013c58
 800e304:	0800e549 	.word	0x0800e549
 800e308:	20001a9c 	.word	0x20001a9c

0800e30c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b088      	sub	sp, #32
 800e310:	af02      	add	r7, sp, #8
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
 800e318:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800e31a:	202c      	movs	r0, #44	; 0x2c
 800e31c:	f000 fd26 	bl	800ed6c <pvPortMalloc>
 800e320:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00d      	beq.n	800e344 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	9301      	str	r3, [sp, #4]
 800e32c:	6a3b      	ldr	r3, [r7, #32]
 800e32e:	9300      	str	r3, [sp, #0]
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	68b9      	ldr	r1, [r7, #8]
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	f000 f846 	bl	800e3c8 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	2200      	movs	r2, #0
 800e340:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800e344:	697b      	ldr	r3, [r7, #20]
	}
 800e346:	4618      	mov	r0, r3
 800e348:	3718      	adds	r7, #24
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800e34e:	b580      	push	{r7, lr}
 800e350:	b08a      	sub	sp, #40	; 0x28
 800e352:	af02      	add	r7, sp, #8
 800e354:	60f8      	str	r0, [r7, #12]
 800e356:	60b9      	str	r1, [r7, #8]
 800e358:	607a      	str	r2, [r7, #4]
 800e35a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800e35c:	232c      	movs	r3, #44	; 0x2c
 800e35e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	2b2c      	cmp	r3, #44	; 0x2c
 800e364:	d00a      	beq.n	800e37c <xTimerCreateStatic+0x2e>
	__asm volatile
 800e366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	61bb      	str	r3, [r7, #24]
}
 800e378:	bf00      	nop
 800e37a:	e7fe      	b.n	800e37a <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800e37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d10a      	bne.n	800e398 <xTimerCreateStatic+0x4a>
	__asm volatile
 800e382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e386:	f383 8811 	msr	BASEPRI, r3
 800e38a:	f3bf 8f6f 	isb	sy
 800e38e:	f3bf 8f4f 	dsb	sy
 800e392:	617b      	str	r3, [r7, #20]
}
 800e394:	bf00      	nop
 800e396:	e7fe      	b.n	800e396 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d00d      	beq.n	800e3be <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e3a2:	69fb      	ldr	r3, [r7, #28]
 800e3a4:	9301      	str	r3, [sp, #4]
 800e3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	687a      	ldr	r2, [r7, #4]
 800e3ae:	68b9      	ldr	r1, [r7, #8]
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f000 f809 	bl	800e3c8 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800e3be:	69fb      	ldr	r3, [r7, #28]
	}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3720      	adds	r7, #32
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b086      	sub	sp, #24
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	607a      	str	r2, [r7, #4]
 800e3d4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d10a      	bne.n	800e3f2 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800e3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e0:	f383 8811 	msr	BASEPRI, r3
 800e3e4:	f3bf 8f6f 	isb	sy
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	617b      	str	r3, [r7, #20]
}
 800e3ee:	bf00      	nop
 800e3f0:	e7fe      	b.n	800e3f0 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800e3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d015      	beq.n	800e424 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e3f8:	f000 fa88 	bl	800e90c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fe:	68fa      	ldr	r2, [r7, #12]
 800e400:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800e408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800e40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e410:	683a      	ldr	r2, [r7, #0]
 800e412:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e416:	6a3a      	ldr	r2, [r7, #32]
 800e418:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41c:	3304      	adds	r3, #4
 800e41e:	4618      	mov	r0, r3
 800e420:	f7fd fd69 	bl	800bef6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e424:	bf00      	nop
 800e426:	3718      	adds	r7, #24
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b08a      	sub	sp, #40	; 0x28
 800e430:	af00      	add	r7, sp, #0
 800e432:	60f8      	str	r0, [r7, #12]
 800e434:	60b9      	str	r1, [r7, #8]
 800e436:	607a      	str	r2, [r7, #4]
 800e438:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e43a:	2300      	movs	r3, #0
 800e43c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d10a      	bne.n	800e45a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	623b      	str	r3, [r7, #32]
}
 800e456:	bf00      	nop
 800e458:	e7fe      	b.n	800e458 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e45a:	4b1a      	ldr	r3, [pc, #104]	; (800e4c4 <xTimerGenericCommand+0x98>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d02a      	beq.n	800e4b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	2b05      	cmp	r3, #5
 800e472:	dc18      	bgt.n	800e4a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e474:	f7ff fcd4 	bl	800de20 <xTaskGetSchedulerState>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b02      	cmp	r3, #2
 800e47c:	d109      	bne.n	800e492 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e47e:	4b11      	ldr	r3, [pc, #68]	; (800e4c4 <xTimerGenericCommand+0x98>)
 800e480:	6818      	ldr	r0, [r3, #0]
 800e482:	f107 0114 	add.w	r1, r7, #20
 800e486:	2300      	movs	r3, #0
 800e488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e48a:	f7fd ff01 	bl	800c290 <xQueueGenericSend>
 800e48e:	6278      	str	r0, [r7, #36]	; 0x24
 800e490:	e012      	b.n	800e4b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e492:	4b0c      	ldr	r3, [pc, #48]	; (800e4c4 <xTimerGenericCommand+0x98>)
 800e494:	6818      	ldr	r0, [r3, #0]
 800e496:	f107 0114 	add.w	r1, r7, #20
 800e49a:	2300      	movs	r3, #0
 800e49c:	2200      	movs	r2, #0
 800e49e:	f7fd fef7 	bl	800c290 <xQueueGenericSend>
 800e4a2:	6278      	str	r0, [r7, #36]	; 0x24
 800e4a4:	e008      	b.n	800e4b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e4a6:	4b07      	ldr	r3, [pc, #28]	; (800e4c4 <xTimerGenericCommand+0x98>)
 800e4a8:	6818      	ldr	r0, [r3, #0]
 800e4aa:	f107 0114 	add.w	r1, r7, #20
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	683a      	ldr	r2, [r7, #0]
 800e4b2:	f7fd ffeb 	bl	800c48c <xQueueGenericSendFromISR>
 800e4b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3728      	adds	r7, #40	; 0x28
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	20001a98 	.word	0x20001a98

0800e4c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af02      	add	r7, sp, #8
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e4d2:	4b1c      	ldr	r3, [pc, #112]	; (800e544 <prvProcessExpiredTimer+0x7c>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	3304      	adds	r3, #4
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fd fd6f 	bl	800bfc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	69db      	ldr	r3, [r3, #28]
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d122      	bne.n	800e534 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	699a      	ldr	r2, [r3, #24]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	18d1      	adds	r1, r2, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	683a      	ldr	r2, [r7, #0]
 800e4fa:	6978      	ldr	r0, [r7, #20]
 800e4fc:	f000 f8c8 	bl	800e690 <prvInsertTimerInActiveList>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d016      	beq.n	800e534 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e506:	2300      	movs	r3, #0
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	2300      	movs	r3, #0
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	2100      	movs	r1, #0
 800e510:	6978      	ldr	r0, [r7, #20]
 800e512:	f7ff ff8b 	bl	800e42c <xTimerGenericCommand>
 800e516:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d10a      	bne.n	800e534 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800e51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	60fb      	str	r3, [r7, #12]
}
 800e530:	bf00      	nop
 800e532:	e7fe      	b.n	800e532 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e538:	6978      	ldr	r0, [r7, #20]
 800e53a:	4798      	blx	r3
}
 800e53c:	bf00      	nop
 800e53e:	3718      	adds	r7, #24
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	20001a90 	.word	0x20001a90

0800e548 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e550:	f107 0308 	add.w	r3, r7, #8
 800e554:	4618      	mov	r0, r3
 800e556:	f000 f857 	bl	800e608 <prvGetNextExpireTime>
 800e55a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	4619      	mov	r1, r3
 800e560:	68f8      	ldr	r0, [r7, #12]
 800e562:	f000 f803 	bl	800e56c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e566:	f000 f8d5 	bl	800e714 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e56a:	e7f1      	b.n	800e550 <prvTimerTask+0x8>

0800e56c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e576:	f7ff f82d 	bl	800d5d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e57a:	f107 0308 	add.w	r3, r7, #8
 800e57e:	4618      	mov	r0, r3
 800e580:	f000 f866 	bl	800e650 <prvSampleTimeNow>
 800e584:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d130      	bne.n	800e5ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d10a      	bne.n	800e5a8 <prvProcessTimerOrBlockTask+0x3c>
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	429a      	cmp	r2, r3
 800e598:	d806      	bhi.n	800e5a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e59a:	f7ff f829 	bl	800d5f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e59e:	68f9      	ldr	r1, [r7, #12]
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f7ff ff91 	bl	800e4c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e5a6:	e024      	b.n	800e5f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d008      	beq.n	800e5c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5ae:	4b13      	ldr	r3, [pc, #76]	; (800e5fc <prvProcessTimerOrBlockTask+0x90>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	bf0c      	ite	eq
 800e5b8:	2301      	moveq	r3, #1
 800e5ba:	2300      	movne	r3, #0
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e5c0:	4b0f      	ldr	r3, [pc, #60]	; (800e600 <prvProcessTimerOrBlockTask+0x94>)
 800e5c2:	6818      	ldr	r0, [r3, #0]
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	683a      	ldr	r2, [r7, #0]
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	f7fe fa0d 	bl	800c9ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e5d2:	f7ff f80d 	bl	800d5f0 <xTaskResumeAll>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d10a      	bne.n	800e5f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e5dc:	4b09      	ldr	r3, [pc, #36]	; (800e604 <prvProcessTimerOrBlockTask+0x98>)
 800e5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	f3bf 8f4f 	dsb	sy
 800e5e8:	f3bf 8f6f 	isb	sy
}
 800e5ec:	e001      	b.n	800e5f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e5ee:	f7fe ffff 	bl	800d5f0 <xTaskResumeAll>
}
 800e5f2:	bf00      	nop
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	20001a94 	.word	0x20001a94
 800e600:	20001a98 	.word	0x20001a98
 800e604:	e000ed04 	.word	0xe000ed04

0800e608 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e610:	4b0e      	ldr	r3, [pc, #56]	; (800e64c <prvGetNextExpireTime+0x44>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	bf0c      	ite	eq
 800e61a:	2301      	moveq	r3, #1
 800e61c:	2300      	movne	r3, #0
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	461a      	mov	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d105      	bne.n	800e63a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e62e:	4b07      	ldr	r3, [pc, #28]	; (800e64c <prvGetNextExpireTime+0x44>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	60fb      	str	r3, [r7, #12]
 800e638:	e001      	b.n	800e63e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e63a:	2300      	movs	r3, #0
 800e63c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e63e:	68fb      	ldr	r3, [r7, #12]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3714      	adds	r7, #20
 800e644:	46bd      	mov	sp, r7
 800e646:	bc80      	pop	{r7}
 800e648:	4770      	bx	lr
 800e64a:	bf00      	nop
 800e64c:	20001a90 	.word	0x20001a90

0800e650 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e658:	f7ff f866 	bl	800d728 <xTaskGetTickCount>
 800e65c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e65e:	4b0b      	ldr	r3, [pc, #44]	; (800e68c <prvSampleTimeNow+0x3c>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	429a      	cmp	r2, r3
 800e666:	d205      	bcs.n	800e674 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e668:	f000 f8ee 	bl	800e848 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2201      	movs	r2, #1
 800e670:	601a      	str	r2, [r3, #0]
 800e672:	e002      	b.n	800e67a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2200      	movs	r2, #0
 800e678:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e67a:	4a04      	ldr	r2, [pc, #16]	; (800e68c <prvSampleTimeNow+0x3c>)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e680:	68fb      	ldr	r3, [r7, #12]
}
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	20001aa0 	.word	0x20001aa0

0800e690 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b086      	sub	sp, #24
 800e694:	af00      	add	r7, sp, #0
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	60b9      	str	r1, [r7, #8]
 800e69a:	607a      	str	r2, [r7, #4]
 800e69c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	68ba      	ldr	r2, [r7, #8]
 800e6a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e6ae:	68ba      	ldr	r2, [r7, #8]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d812      	bhi.n	800e6dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	1ad2      	subs	r2, r2, r3
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	699b      	ldr	r3, [r3, #24]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d302      	bcc.n	800e6ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	617b      	str	r3, [r7, #20]
 800e6c8:	e01b      	b.n	800e702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e6ca:	4b10      	ldr	r3, [pc, #64]	; (800e70c <prvInsertTimerInActiveList+0x7c>)
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	4610      	mov	r0, r2
 800e6d6:	f7fd fc3d 	bl	800bf54 <vListInsert>
 800e6da:	e012      	b.n	800e702 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d206      	bcs.n	800e6f2 <prvInsertTimerInActiveList+0x62>
 800e6e4:	68ba      	ldr	r2, [r7, #8]
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d302      	bcc.n	800e6f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	617b      	str	r3, [r7, #20]
 800e6f0:	e007      	b.n	800e702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6f2:	4b07      	ldr	r3, [pc, #28]	; (800e710 <prvInsertTimerInActiveList+0x80>)
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	4610      	mov	r0, r2
 800e6fe:	f7fd fc29 	bl	800bf54 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e702:	697b      	ldr	r3, [r7, #20]
}
 800e704:	4618      	mov	r0, r3
 800e706:	3718      	adds	r7, #24
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	20001a94 	.word	0x20001a94
 800e710:	20001a90 	.word	0x20001a90

0800e714 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b08c      	sub	sp, #48	; 0x30
 800e718:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e71a:	e081      	b.n	800e820 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	db7d      	blt.n	800e81e <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e728:	695b      	ldr	r3, [r3, #20]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d004      	beq.n	800e738 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e730:	3304      	adds	r3, #4
 800e732:	4618      	mov	r0, r3
 800e734:	f7fd fc46 	bl	800bfc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e738:	1d3b      	adds	r3, r7, #4
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7ff ff88 	bl	800e650 <prvSampleTimeNow>
 800e740:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	2b09      	cmp	r3, #9
 800e746:	d86b      	bhi.n	800e820 <prvProcessReceivedCommands+0x10c>
 800e748:	a201      	add	r2, pc, #4	; (adr r2, 800e750 <prvProcessReceivedCommands+0x3c>)
 800e74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e74e:	bf00      	nop
 800e750:	0800e779 	.word	0x0800e779
 800e754:	0800e779 	.word	0x0800e779
 800e758:	0800e779 	.word	0x0800e779
 800e75c:	0800e821 	.word	0x0800e821
 800e760:	0800e7d5 	.word	0x0800e7d5
 800e764:	0800e80d 	.word	0x0800e80d
 800e768:	0800e779 	.word	0x0800e779
 800e76c:	0800e779 	.word	0x0800e779
 800e770:	0800e821 	.word	0x0800e821
 800e774:	0800e7d5 	.word	0x0800e7d5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77c:	699b      	ldr	r3, [r3, #24]
 800e77e:	18d1      	adds	r1, r2, r3
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	6a3a      	ldr	r2, [r7, #32]
 800e784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e786:	f7ff ff83 	bl	800e690 <prvInsertTimerInActiveList>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d047      	beq.n	800e820 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e796:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79a:	69db      	ldr	r3, [r3, #28]
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d13f      	bne.n	800e820 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a4:	699b      	ldr	r3, [r3, #24]
 800e7a6:	441a      	add	r2, r3
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	9300      	str	r3, [sp, #0]
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	2100      	movs	r1, #0
 800e7b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7b2:	f7ff fe3b 	bl	800e42c <xTimerGenericCommand>
 800e7b6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d130      	bne.n	800e820 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	61bb      	str	r3, [r7, #24]
}
 800e7d0:	bf00      	nop
 800e7d2:	e7fe      	b.n	800e7d2 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7dc:	699b      	ldr	r3, [r3, #24]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d10a      	bne.n	800e7f8 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800e7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e6:	f383 8811 	msr	BASEPRI, r3
 800e7ea:	f3bf 8f6f 	isb	sy
 800e7ee:	f3bf 8f4f 	dsb	sy
 800e7f2:	617b      	str	r3, [r7, #20]
}
 800e7f4:	bf00      	nop
 800e7f6:	e7fe      	b.n	800e7f6 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fa:	699a      	ldr	r2, [r3, #24]
 800e7fc:	6a3b      	ldr	r3, [r7, #32]
 800e7fe:	18d1      	adds	r1, r2, r3
 800e800:	6a3b      	ldr	r3, [r7, #32]
 800e802:	6a3a      	ldr	r2, [r7, #32]
 800e804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e806:	f7ff ff43 	bl	800e690 <prvInsertTimerInActiveList>
					break;
 800e80a:	e009      	b.n	800e820 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e812:	2b00      	cmp	r3, #0
 800e814:	d104      	bne.n	800e820 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800e816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e818:	f000 fb6c 	bl	800eef4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e81c:	e000      	b.n	800e820 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e81e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e820:	4b08      	ldr	r3, [pc, #32]	; (800e844 <prvProcessReceivedCommands+0x130>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f107 0108 	add.w	r1, r7, #8
 800e828:	2200      	movs	r2, #0
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7fd fec6 	bl	800c5bc <xQueueReceive>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	f47f af72 	bne.w	800e71c <prvProcessReceivedCommands+0x8>
	}
}
 800e838:	bf00      	nop
 800e83a:	bf00      	nop
 800e83c:	3728      	adds	r7, #40	; 0x28
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	20001a98 	.word	0x20001a98

0800e848 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b088      	sub	sp, #32
 800e84c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e84e:	e045      	b.n	800e8dc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e850:	4b2c      	ldr	r3, [pc, #176]	; (800e904 <prvSwitchTimerLists+0xbc>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e85a:	4b2a      	ldr	r3, [pc, #168]	; (800e904 <prvSwitchTimerLists+0xbc>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	68db      	ldr	r3, [r3, #12]
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	3304      	adds	r3, #4
 800e868:	4618      	mov	r0, r3
 800e86a:	f7fd fbab 	bl	800bfc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	69db      	ldr	r3, [r3, #28]
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d12e      	bne.n	800e8dc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	699b      	ldr	r3, [r3, #24]
 800e882:	693a      	ldr	r2, [r7, #16]
 800e884:	4413      	add	r3, r2
 800e886:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d90e      	bls.n	800e8ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	68ba      	ldr	r2, [r7, #8]
 800e894:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e89c:	4b19      	ldr	r3, [pc, #100]	; (800e904 <prvSwitchTimerLists+0xbc>)
 800e89e:	681a      	ldr	r2, [r3, #0]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	3304      	adds	r3, #4
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4610      	mov	r0, r2
 800e8a8:	f7fd fb54 	bl	800bf54 <vListInsert>
 800e8ac:	e016      	b.n	800e8dc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	9300      	str	r3, [sp, #0]
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	693a      	ldr	r2, [r7, #16]
 800e8b6:	2100      	movs	r1, #0
 800e8b8:	68f8      	ldr	r0, [r7, #12]
 800e8ba:	f7ff fdb7 	bl	800e42c <xTimerGenericCommand>
 800e8be:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d10a      	bne.n	800e8dc <prvSwitchTimerLists+0x94>
	__asm volatile
 800e8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ca:	f383 8811 	msr	BASEPRI, r3
 800e8ce:	f3bf 8f6f 	isb	sy
 800e8d2:	f3bf 8f4f 	dsb	sy
 800e8d6:	603b      	str	r3, [r7, #0]
}
 800e8d8:	bf00      	nop
 800e8da:	e7fe      	b.n	800e8da <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8dc:	4b09      	ldr	r3, [pc, #36]	; (800e904 <prvSwitchTimerLists+0xbc>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d1b4      	bne.n	800e850 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e8e6:	4b07      	ldr	r3, [pc, #28]	; (800e904 <prvSwitchTimerLists+0xbc>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e8ec:	4b06      	ldr	r3, [pc, #24]	; (800e908 <prvSwitchTimerLists+0xc0>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a04      	ldr	r2, [pc, #16]	; (800e904 <prvSwitchTimerLists+0xbc>)
 800e8f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e8f4:	4a04      	ldr	r2, [pc, #16]	; (800e908 <prvSwitchTimerLists+0xc0>)
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	6013      	str	r3, [r2, #0]
}
 800e8fa:	bf00      	nop
 800e8fc:	3718      	adds	r7, #24
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	20001a90 	.word	0x20001a90
 800e908:	20001a94 	.word	0x20001a94

0800e90c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e912:	f000 f92b 	bl	800eb6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e916:	4b15      	ldr	r3, [pc, #84]	; (800e96c <prvCheckForValidListAndQueue+0x60>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d120      	bne.n	800e960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e91e:	4814      	ldr	r0, [pc, #80]	; (800e970 <prvCheckForValidListAndQueue+0x64>)
 800e920:	f7fd faca 	bl	800beb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e924:	4813      	ldr	r0, [pc, #76]	; (800e974 <prvCheckForValidListAndQueue+0x68>)
 800e926:	f7fd fac7 	bl	800beb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e92a:	4b13      	ldr	r3, [pc, #76]	; (800e978 <prvCheckForValidListAndQueue+0x6c>)
 800e92c:	4a10      	ldr	r2, [pc, #64]	; (800e970 <prvCheckForValidListAndQueue+0x64>)
 800e92e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e930:	4b12      	ldr	r3, [pc, #72]	; (800e97c <prvCheckForValidListAndQueue+0x70>)
 800e932:	4a10      	ldr	r2, [pc, #64]	; (800e974 <prvCheckForValidListAndQueue+0x68>)
 800e934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e936:	2300      	movs	r3, #0
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	4b11      	ldr	r3, [pc, #68]	; (800e980 <prvCheckForValidListAndQueue+0x74>)
 800e93c:	4a11      	ldr	r2, [pc, #68]	; (800e984 <prvCheckForValidListAndQueue+0x78>)
 800e93e:	210c      	movs	r1, #12
 800e940:	200a      	movs	r0, #10
 800e942:	f7fd fbd1 	bl	800c0e8 <xQueueGenericCreateStatic>
 800e946:	4603      	mov	r3, r0
 800e948:	4a08      	ldr	r2, [pc, #32]	; (800e96c <prvCheckForValidListAndQueue+0x60>)
 800e94a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e94c:	4b07      	ldr	r3, [pc, #28]	; (800e96c <prvCheckForValidListAndQueue+0x60>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d005      	beq.n	800e960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e954:	4b05      	ldr	r3, [pc, #20]	; (800e96c <prvCheckForValidListAndQueue+0x60>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	490b      	ldr	r1, [pc, #44]	; (800e988 <prvCheckForValidListAndQueue+0x7c>)
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fe f81e 	bl	800c99c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e960:	f000 f934 	bl	800ebcc <vPortExitCritical>
}
 800e964:	bf00      	nop
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	20001a98 	.word	0x20001a98
 800e970:	20001a68 	.word	0x20001a68
 800e974:	20001a7c 	.word	0x20001a7c
 800e978:	20001a90 	.word	0x20001a90
 800e97c:	20001a94 	.word	0x20001a94
 800e980:	20001b1c 	.word	0x20001b1c
 800e984:	20001aa4 	.word	0x20001aa4
 800e988:	08013c60 	.word	0x08013c60

0800e98c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e98c:	b480      	push	{r7}
 800e98e:	b085      	sub	sp, #20
 800e990:	af00      	add	r7, sp, #0
 800e992:	60f8      	str	r0, [r7, #12]
 800e994:	60b9      	str	r1, [r7, #8]
 800e996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	3b04      	subs	r3, #4
 800e99c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	3b04      	subs	r3, #4
 800e9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	f023 0201 	bic.w	r2, r3, #1
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	3b04      	subs	r3, #4
 800e9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e9bc:	4a08      	ldr	r2, [pc, #32]	; (800e9e0 <pxPortInitialiseStack+0x54>)
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	3b14      	subs	r3, #20
 800e9c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	3b20      	subs	r3, #32
 800e9d2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3714      	adds	r7, #20
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bc80      	pop	{r7}
 800e9de:	4770      	bx	lr
 800e9e0:	0800e9e5 	.word	0x0800e9e5

0800e9e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b085      	sub	sp, #20
 800e9e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e9ee:	4b12      	ldr	r3, [pc, #72]	; (800ea38 <prvTaskExitError+0x54>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9f6:	d00a      	beq.n	800ea0e <prvTaskExitError+0x2a>
	__asm volatile
 800e9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9fc:	f383 8811 	msr	BASEPRI, r3
 800ea00:	f3bf 8f6f 	isb	sy
 800ea04:	f3bf 8f4f 	dsb	sy
 800ea08:	60fb      	str	r3, [r7, #12]
}
 800ea0a:	bf00      	nop
 800ea0c:	e7fe      	b.n	800ea0c <prvTaskExitError+0x28>
	__asm volatile
 800ea0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea12:	f383 8811 	msr	BASEPRI, r3
 800ea16:	f3bf 8f6f 	isb	sy
 800ea1a:	f3bf 8f4f 	dsb	sy
 800ea1e:	60bb      	str	r3, [r7, #8]
}
 800ea20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea22:	bf00      	nop
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d0fc      	beq.n	800ea24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea2a:	bf00      	nop
 800ea2c:	bf00      	nop
 800ea2e:	3714      	adds	r7, #20
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bc80      	pop	{r7}
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop
 800ea38:	20000060 	.word	0x20000060
 800ea3c:	00000000 	.word	0x00000000

0800ea40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ea40:	4b07      	ldr	r3, [pc, #28]	; (800ea60 <pxCurrentTCBConst2>)
 800ea42:	6819      	ldr	r1, [r3, #0]
 800ea44:	6808      	ldr	r0, [r1, #0]
 800ea46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ea4a:	f380 8809 	msr	PSP, r0
 800ea4e:	f3bf 8f6f 	isb	sy
 800ea52:	f04f 0000 	mov.w	r0, #0
 800ea56:	f380 8811 	msr	BASEPRI, r0
 800ea5a:	f04e 0e0d 	orr.w	lr, lr, #13
 800ea5e:	4770      	bx	lr

0800ea60 <pxCurrentTCBConst2>:
 800ea60:	2000193c 	.word	0x2000193c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ea64:	bf00      	nop
 800ea66:	bf00      	nop

0800ea68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ea68:	4806      	ldr	r0, [pc, #24]	; (800ea84 <prvPortStartFirstTask+0x1c>)
 800ea6a:	6800      	ldr	r0, [r0, #0]
 800ea6c:	6800      	ldr	r0, [r0, #0]
 800ea6e:	f380 8808 	msr	MSP, r0
 800ea72:	b662      	cpsie	i
 800ea74:	b661      	cpsie	f
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	f3bf 8f6f 	isb	sy
 800ea7e:	df00      	svc	0
 800ea80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ea82:	bf00      	nop
 800ea84:	e000ed08 	.word	0xe000ed08

0800ea88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ea8e:	4b32      	ldr	r3, [pc, #200]	; (800eb58 <xPortStartScheduler+0xd0>)
 800ea90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	22ff      	movs	r2, #255	; 0xff
 800ea9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	781b      	ldrb	r3, [r3, #0]
 800eaa4:	b2db      	uxtb	r3, r3
 800eaa6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eaa8:	78fb      	ldrb	r3, [r7, #3]
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eab0:	b2da      	uxtb	r2, r3
 800eab2:	4b2a      	ldr	r3, [pc, #168]	; (800eb5c <xPortStartScheduler+0xd4>)
 800eab4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eab6:	4b2a      	ldr	r3, [pc, #168]	; (800eb60 <xPortStartScheduler+0xd8>)
 800eab8:	2207      	movs	r2, #7
 800eaba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eabc:	e009      	b.n	800ead2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800eabe:	4b28      	ldr	r3, [pc, #160]	; (800eb60 <xPortStartScheduler+0xd8>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	3b01      	subs	r3, #1
 800eac4:	4a26      	ldr	r2, [pc, #152]	; (800eb60 <xPortStartScheduler+0xd8>)
 800eac6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eac8:	78fb      	ldrb	r3, [r7, #3]
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	005b      	lsls	r3, r3, #1
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ead2:	78fb      	ldrb	r3, [r7, #3]
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eada:	2b80      	cmp	r3, #128	; 0x80
 800eadc:	d0ef      	beq.n	800eabe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eade:	4b20      	ldr	r3, [pc, #128]	; (800eb60 <xPortStartScheduler+0xd8>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f1c3 0307 	rsb	r3, r3, #7
 800eae6:	2b04      	cmp	r3, #4
 800eae8:	d00a      	beq.n	800eb00 <xPortStartScheduler+0x78>
	__asm volatile
 800eaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaee:	f383 8811 	msr	BASEPRI, r3
 800eaf2:	f3bf 8f6f 	isb	sy
 800eaf6:	f3bf 8f4f 	dsb	sy
 800eafa:	60bb      	str	r3, [r7, #8]
}
 800eafc:	bf00      	nop
 800eafe:	e7fe      	b.n	800eafe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eb00:	4b17      	ldr	r3, [pc, #92]	; (800eb60 <xPortStartScheduler+0xd8>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	021b      	lsls	r3, r3, #8
 800eb06:	4a16      	ldr	r2, [pc, #88]	; (800eb60 <xPortStartScheduler+0xd8>)
 800eb08:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eb0a:	4b15      	ldr	r3, [pc, #84]	; (800eb60 <xPortStartScheduler+0xd8>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb12:	4a13      	ldr	r2, [pc, #76]	; (800eb60 <xPortStartScheduler+0xd8>)
 800eb14:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	b2da      	uxtb	r2, r3
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eb1e:	4b11      	ldr	r3, [pc, #68]	; (800eb64 <xPortStartScheduler+0xdc>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	4a10      	ldr	r2, [pc, #64]	; (800eb64 <xPortStartScheduler+0xdc>)
 800eb24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb2a:	4b0e      	ldr	r3, [pc, #56]	; (800eb64 <xPortStartScheduler+0xdc>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	4a0d      	ldr	r2, [pc, #52]	; (800eb64 <xPortStartScheduler+0xdc>)
 800eb30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eb34:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eb36:	f000 f8b9 	bl	800ecac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eb3a:	4b0b      	ldr	r3, [pc, #44]	; (800eb68 <xPortStartScheduler+0xe0>)
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eb40:	f7ff ff92 	bl	800ea68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eb44:	f7fe fece 	bl	800d8e4 <vTaskSwitchContext>
	prvTaskExitError();
 800eb48:	f7ff ff4c 	bl	800e9e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eb4c:	2300      	movs	r3, #0
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3710      	adds	r7, #16
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	e000e400 	.word	0xe000e400
 800eb5c:	20001b64 	.word	0x20001b64
 800eb60:	20001b68 	.word	0x20001b68
 800eb64:	e000ed20 	.word	0xe000ed20
 800eb68:	20000060 	.word	0x20000060

0800eb6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
	__asm volatile
 800eb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb76:	f383 8811 	msr	BASEPRI, r3
 800eb7a:	f3bf 8f6f 	isb	sy
 800eb7e:	f3bf 8f4f 	dsb	sy
 800eb82:	607b      	str	r3, [r7, #4]
}
 800eb84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eb86:	4b0f      	ldr	r3, [pc, #60]	; (800ebc4 <vPortEnterCritical+0x58>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	4a0d      	ldr	r2, [pc, #52]	; (800ebc4 <vPortEnterCritical+0x58>)
 800eb8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eb90:	4b0c      	ldr	r3, [pc, #48]	; (800ebc4 <vPortEnterCritical+0x58>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d10f      	bne.n	800ebb8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eb98:	4b0b      	ldr	r3, [pc, #44]	; (800ebc8 <vPortEnterCritical+0x5c>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d00a      	beq.n	800ebb8 <vPortEnterCritical+0x4c>
	__asm volatile
 800eba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba6:	f383 8811 	msr	BASEPRI, r3
 800ebaa:	f3bf 8f6f 	isb	sy
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	603b      	str	r3, [r7, #0]
}
 800ebb4:	bf00      	nop
 800ebb6:	e7fe      	b.n	800ebb6 <vPortEnterCritical+0x4a>
	}
}
 800ebb8:	bf00      	nop
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bc80      	pop	{r7}
 800ebc0:	4770      	bx	lr
 800ebc2:	bf00      	nop
 800ebc4:	20000060 	.word	0x20000060
 800ebc8:	e000ed04 	.word	0xe000ed04

0800ebcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ebd2:	4b11      	ldr	r3, [pc, #68]	; (800ec18 <vPortExitCritical+0x4c>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d10a      	bne.n	800ebf0 <vPortExitCritical+0x24>
	__asm volatile
 800ebda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebde:	f383 8811 	msr	BASEPRI, r3
 800ebe2:	f3bf 8f6f 	isb	sy
 800ebe6:	f3bf 8f4f 	dsb	sy
 800ebea:	607b      	str	r3, [r7, #4]
}
 800ebec:	bf00      	nop
 800ebee:	e7fe      	b.n	800ebee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ebf0:	4b09      	ldr	r3, [pc, #36]	; (800ec18 <vPortExitCritical+0x4c>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	4a08      	ldr	r2, [pc, #32]	; (800ec18 <vPortExitCritical+0x4c>)
 800ebf8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ebfa:	4b07      	ldr	r3, [pc, #28]	; (800ec18 <vPortExitCritical+0x4c>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d105      	bne.n	800ec0e <vPortExitCritical+0x42>
 800ec02:	2300      	movs	r3, #0
 800ec04:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	f383 8811 	msr	BASEPRI, r3
}
 800ec0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ec0e:	bf00      	nop
 800ec10:	370c      	adds	r7, #12
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bc80      	pop	{r7}
 800ec16:	4770      	bx	lr
 800ec18:	20000060 	.word	0x20000060
 800ec1c:	00000000 	.word	0x00000000

0800ec20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ec20:	f3ef 8009 	mrs	r0, PSP
 800ec24:	f3bf 8f6f 	isb	sy
 800ec28:	4b0d      	ldr	r3, [pc, #52]	; (800ec60 <pxCurrentTCBConst>)
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ec30:	6010      	str	r0, [r2, #0]
 800ec32:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ec36:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ec3a:	f380 8811 	msr	BASEPRI, r0
 800ec3e:	f7fe fe51 	bl	800d8e4 <vTaskSwitchContext>
 800ec42:	f04f 0000 	mov.w	r0, #0
 800ec46:	f380 8811 	msr	BASEPRI, r0
 800ec4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ec4e:	6819      	ldr	r1, [r3, #0]
 800ec50:	6808      	ldr	r0, [r1, #0]
 800ec52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ec56:	f380 8809 	msr	PSP, r0
 800ec5a:	f3bf 8f6f 	isb	sy
 800ec5e:	4770      	bx	lr

0800ec60 <pxCurrentTCBConst>:
 800ec60:	2000193c 	.word	0x2000193c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ec64:	bf00      	nop
 800ec66:	bf00      	nop

0800ec68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ec6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	607b      	str	r3, [r7, #4]
}
 800ec80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ec82:	f7fe fd71 	bl	800d768 <xTaskIncrementTick>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d003      	beq.n	800ec94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ec8c:	4b06      	ldr	r3, [pc, #24]	; (800eca8 <SysTick_Handler+0x40>)
 800ec8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec92:	601a      	str	r2, [r3, #0]
 800ec94:	2300      	movs	r3, #0
 800ec96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	f383 8811 	msr	BASEPRI, r3
}
 800ec9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eca0:	bf00      	nop
 800eca2:	3708      	adds	r7, #8
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	e000ed04 	.word	0xe000ed04

0800ecac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ecac:	b480      	push	{r7}
 800ecae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ecb0:	4b0a      	ldr	r3, [pc, #40]	; (800ecdc <vPortSetupTimerInterrupt+0x30>)
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ecb6:	4b0a      	ldr	r3, [pc, #40]	; (800ece0 <vPortSetupTimerInterrupt+0x34>)
 800ecb8:	2200      	movs	r2, #0
 800ecba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ecbc:	4b09      	ldr	r3, [pc, #36]	; (800ece4 <vPortSetupTimerInterrupt+0x38>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a09      	ldr	r2, [pc, #36]	; (800ece8 <vPortSetupTimerInterrupt+0x3c>)
 800ecc2:	fba2 2303 	umull	r2, r3, r2, r3
 800ecc6:	099b      	lsrs	r3, r3, #6
 800ecc8:	4a08      	ldr	r2, [pc, #32]	; (800ecec <vPortSetupTimerInterrupt+0x40>)
 800ecca:	3b01      	subs	r3, #1
 800eccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ecce:	4b03      	ldr	r3, [pc, #12]	; (800ecdc <vPortSetupTimerInterrupt+0x30>)
 800ecd0:	2207      	movs	r2, #7
 800ecd2:	601a      	str	r2, [r3, #0]
}
 800ecd4:	bf00      	nop
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bc80      	pop	{r7}
 800ecda:	4770      	bx	lr
 800ecdc:	e000e010 	.word	0xe000e010
 800ece0:	e000e018 	.word	0xe000e018
 800ece4:	20000054 	.word	0x20000054
 800ece8:	10624dd3 	.word	0x10624dd3
 800ecec:	e000e014 	.word	0xe000e014

0800ecf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ecf6:	f3ef 8305 	mrs	r3, IPSR
 800ecfa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2b0f      	cmp	r3, #15
 800ed00:	d914      	bls.n	800ed2c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ed02:	4a16      	ldr	r2, [pc, #88]	; (800ed5c <vPortValidateInterruptPriority+0x6c>)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	4413      	add	r3, r2
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ed0c:	4b14      	ldr	r3, [pc, #80]	; (800ed60 <vPortValidateInterruptPriority+0x70>)
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	7afa      	ldrb	r2, [r7, #11]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d20a      	bcs.n	800ed2c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ed16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1a:	f383 8811 	msr	BASEPRI, r3
 800ed1e:	f3bf 8f6f 	isb	sy
 800ed22:	f3bf 8f4f 	dsb	sy
 800ed26:	607b      	str	r3, [r7, #4]
}
 800ed28:	bf00      	nop
 800ed2a:	e7fe      	b.n	800ed2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ed2c:	4b0d      	ldr	r3, [pc, #52]	; (800ed64 <vPortValidateInterruptPriority+0x74>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ed34:	4b0c      	ldr	r3, [pc, #48]	; (800ed68 <vPortValidateInterruptPriority+0x78>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d90a      	bls.n	800ed52 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ed3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed40:	f383 8811 	msr	BASEPRI, r3
 800ed44:	f3bf 8f6f 	isb	sy
 800ed48:	f3bf 8f4f 	dsb	sy
 800ed4c:	603b      	str	r3, [r7, #0]
}
 800ed4e:	bf00      	nop
 800ed50:	e7fe      	b.n	800ed50 <vPortValidateInterruptPriority+0x60>
	}
 800ed52:	bf00      	nop
 800ed54:	3714      	adds	r7, #20
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bc80      	pop	{r7}
 800ed5a:	4770      	bx	lr
 800ed5c:	e000e3f0 	.word	0xe000e3f0
 800ed60:	20001b64 	.word	0x20001b64
 800ed64:	e000ed0c 	.word	0xe000ed0c
 800ed68:	20001b68 	.word	0x20001b68

0800ed6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b08a      	sub	sp, #40	; 0x28
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ed74:	2300      	movs	r3, #0
 800ed76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ed78:	f7fe fc2c 	bl	800d5d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ed7c:	4b58      	ldr	r3, [pc, #352]	; (800eee0 <pvPortMalloc+0x174>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d101      	bne.n	800ed88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ed84:	f000 f910 	bl	800efa8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ed88:	4b56      	ldr	r3, [pc, #344]	; (800eee4 <pvPortMalloc+0x178>)
 800ed8a:	681a      	ldr	r2, [r3, #0]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4013      	ands	r3, r2
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	f040 808e 	bne.w	800eeb2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d01d      	beq.n	800edd8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ed9c:	2208      	movs	r2, #8
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	4413      	add	r3, r2
 800eda2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f003 0307 	and.w	r3, r3, #7
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d014      	beq.n	800edd8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f023 0307 	bic.w	r3, r3, #7
 800edb4:	3308      	adds	r3, #8
 800edb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f003 0307 	and.w	r3, r3, #7
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d00a      	beq.n	800edd8 <pvPortMalloc+0x6c>
	__asm volatile
 800edc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc6:	f383 8811 	msr	BASEPRI, r3
 800edca:	f3bf 8f6f 	isb	sy
 800edce:	f3bf 8f4f 	dsb	sy
 800edd2:	617b      	str	r3, [r7, #20]
}
 800edd4:	bf00      	nop
 800edd6:	e7fe      	b.n	800edd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d069      	beq.n	800eeb2 <pvPortMalloc+0x146>
 800edde:	4b42      	ldr	r3, [pc, #264]	; (800eee8 <pvPortMalloc+0x17c>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d864      	bhi.n	800eeb2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ede8:	4b40      	ldr	r3, [pc, #256]	; (800eeec <pvPortMalloc+0x180>)
 800edea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800edec:	4b3f      	ldr	r3, [pc, #252]	; (800eeec <pvPortMalloc+0x180>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800edf2:	e004      	b.n	800edfe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800edf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800edf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800edfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d903      	bls.n	800ee10 <pvPortMalloc+0xa4>
 800ee08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d1f1      	bne.n	800edf4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ee10:	4b33      	ldr	r3, [pc, #204]	; (800eee0 <pvPortMalloc+0x174>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d04b      	beq.n	800eeb2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ee1a:	6a3b      	ldr	r3, [r7, #32]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	2208      	movs	r2, #8
 800ee20:	4413      	add	r3, r2
 800ee22:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	6a3b      	ldr	r3, [r7, #32]
 800ee2a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ee2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2e:	685a      	ldr	r2, [r3, #4]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	1ad2      	subs	r2, r2, r3
 800ee34:	2308      	movs	r3, #8
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d91f      	bls.n	800ee7c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ee3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	4413      	add	r3, r2
 800ee42:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	f003 0307 	and.w	r3, r3, #7
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00a      	beq.n	800ee64 <pvPortMalloc+0xf8>
	__asm volatile
 800ee4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee52:	f383 8811 	msr	BASEPRI, r3
 800ee56:	f3bf 8f6f 	isb	sy
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	613b      	str	r3, [r7, #16]
}
 800ee60:	bf00      	nop
 800ee62:	e7fe      	b.n	800ee62 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ee64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee66:	685a      	ldr	r2, [r3, #4]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	1ad2      	subs	r2, r2, r3
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ee70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ee76:	69b8      	ldr	r0, [r7, #24]
 800ee78:	f000 f8f8 	bl	800f06c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ee7c:	4b1a      	ldr	r3, [pc, #104]	; (800eee8 <pvPortMalloc+0x17c>)
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	1ad3      	subs	r3, r2, r3
 800ee86:	4a18      	ldr	r2, [pc, #96]	; (800eee8 <pvPortMalloc+0x17c>)
 800ee88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ee8a:	4b17      	ldr	r3, [pc, #92]	; (800eee8 <pvPortMalloc+0x17c>)
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	4b18      	ldr	r3, [pc, #96]	; (800eef0 <pvPortMalloc+0x184>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d203      	bcs.n	800ee9e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ee96:	4b14      	ldr	r3, [pc, #80]	; (800eee8 <pvPortMalloc+0x17c>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	4a15      	ldr	r2, [pc, #84]	; (800eef0 <pvPortMalloc+0x184>)
 800ee9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ee9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea0:	685a      	ldr	r2, [r3, #4]
 800eea2:	4b10      	ldr	r3, [pc, #64]	; (800eee4 <pvPortMalloc+0x178>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	431a      	orrs	r2, r3
 800eea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeae:	2200      	movs	r2, #0
 800eeb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eeb2:	f7fe fb9d 	bl	800d5f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eeb6:	69fb      	ldr	r3, [r7, #28]
 800eeb8:	f003 0307 	and.w	r3, r3, #7
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d00a      	beq.n	800eed6 <pvPortMalloc+0x16a>
	__asm volatile
 800eec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec4:	f383 8811 	msr	BASEPRI, r3
 800eec8:	f3bf 8f6f 	isb	sy
 800eecc:	f3bf 8f4f 	dsb	sy
 800eed0:	60fb      	str	r3, [r7, #12]
}
 800eed2:	bf00      	nop
 800eed4:	e7fe      	b.n	800eed4 <pvPortMalloc+0x168>
	return pvReturn;
 800eed6:	69fb      	ldr	r3, [r7, #28]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3728      	adds	r7, #40	; 0x28
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	20003b74 	.word	0x20003b74
 800eee4:	20003b80 	.word	0x20003b80
 800eee8:	20003b78 	.word	0x20003b78
 800eeec:	20003b6c 	.word	0x20003b6c
 800eef0:	20003b7c 	.word	0x20003b7c

0800eef4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b086      	sub	sp, #24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d048      	beq.n	800ef98 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ef06:	2308      	movs	r3, #8
 800ef08:	425b      	negs	r3, r3
 800ef0a:	697a      	ldr	r2, [r7, #20]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	685a      	ldr	r2, [r3, #4]
 800ef18:	4b21      	ldr	r3, [pc, #132]	; (800efa0 <vPortFree+0xac>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4013      	ands	r3, r2
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d10a      	bne.n	800ef38 <vPortFree+0x44>
	__asm volatile
 800ef22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef26:	f383 8811 	msr	BASEPRI, r3
 800ef2a:	f3bf 8f6f 	isb	sy
 800ef2e:	f3bf 8f4f 	dsb	sy
 800ef32:	60fb      	str	r3, [r7, #12]
}
 800ef34:	bf00      	nop
 800ef36:	e7fe      	b.n	800ef36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d00a      	beq.n	800ef56 <vPortFree+0x62>
	__asm volatile
 800ef40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef44:	f383 8811 	msr	BASEPRI, r3
 800ef48:	f3bf 8f6f 	isb	sy
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	60bb      	str	r3, [r7, #8]
}
 800ef52:	bf00      	nop
 800ef54:	e7fe      	b.n	800ef54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	685a      	ldr	r2, [r3, #4]
 800ef5a:	4b11      	ldr	r3, [pc, #68]	; (800efa0 <vPortFree+0xac>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4013      	ands	r3, r2
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d019      	beq.n	800ef98 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d115      	bne.n	800ef98 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	685a      	ldr	r2, [r3, #4]
 800ef70:	4b0b      	ldr	r3, [pc, #44]	; (800efa0 <vPortFree+0xac>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	43db      	mvns	r3, r3
 800ef76:	401a      	ands	r2, r3
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ef7c:	f7fe fb2a 	bl	800d5d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	685a      	ldr	r2, [r3, #4]
 800ef84:	4b07      	ldr	r3, [pc, #28]	; (800efa4 <vPortFree+0xb0>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4413      	add	r3, r2
 800ef8a:	4a06      	ldr	r2, [pc, #24]	; (800efa4 <vPortFree+0xb0>)
 800ef8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ef8e:	6938      	ldr	r0, [r7, #16]
 800ef90:	f000 f86c 	bl	800f06c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ef94:	f7fe fb2c 	bl	800d5f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ef98:	bf00      	nop
 800ef9a:	3718      	adds	r7, #24
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	20003b80 	.word	0x20003b80
 800efa4:	20003b78 	.word	0x20003b78

0800efa8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800efa8:	b480      	push	{r7}
 800efaa:	b085      	sub	sp, #20
 800efac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800efae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800efb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800efb4:	4b27      	ldr	r3, [pc, #156]	; (800f054 <prvHeapInit+0xac>)
 800efb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f003 0307 	and.w	r3, r3, #7
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d00c      	beq.n	800efdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	3307      	adds	r3, #7
 800efc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f023 0307 	bic.w	r3, r3, #7
 800efce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800efd0:	68ba      	ldr	r2, [r7, #8]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	1ad3      	subs	r3, r2, r3
 800efd6:	4a1f      	ldr	r2, [pc, #124]	; (800f054 <prvHeapInit+0xac>)
 800efd8:	4413      	add	r3, r2
 800efda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800efe0:	4a1d      	ldr	r2, [pc, #116]	; (800f058 <prvHeapInit+0xb0>)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800efe6:	4b1c      	ldr	r3, [pc, #112]	; (800f058 <prvHeapInit+0xb0>)
 800efe8:	2200      	movs	r2, #0
 800efea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	68ba      	ldr	r2, [r7, #8]
 800eff0:	4413      	add	r3, r2
 800eff2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eff4:	2208      	movs	r2, #8
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	1a9b      	subs	r3, r3, r2
 800effa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f023 0307 	bic.w	r3, r3, #7
 800f002:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	4a15      	ldr	r2, [pc, #84]	; (800f05c <prvHeapInit+0xb4>)
 800f008:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f00a:	4b14      	ldr	r3, [pc, #80]	; (800f05c <prvHeapInit+0xb4>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	2200      	movs	r2, #0
 800f010:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f012:	4b12      	ldr	r3, [pc, #72]	; (800f05c <prvHeapInit+0xb4>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2200      	movs	r2, #0
 800f018:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	68fa      	ldr	r2, [r7, #12]
 800f022:	1ad2      	subs	r2, r2, r3
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f028:	4b0c      	ldr	r3, [pc, #48]	; (800f05c <prvHeapInit+0xb4>)
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	685b      	ldr	r3, [r3, #4]
 800f034:	4a0a      	ldr	r2, [pc, #40]	; (800f060 <prvHeapInit+0xb8>)
 800f036:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	4a09      	ldr	r2, [pc, #36]	; (800f064 <prvHeapInit+0xbc>)
 800f03e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f040:	4b09      	ldr	r3, [pc, #36]	; (800f068 <prvHeapInit+0xc0>)
 800f042:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f046:	601a      	str	r2, [r3, #0]
}
 800f048:	bf00      	nop
 800f04a:	3714      	adds	r7, #20
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bc80      	pop	{r7}
 800f050:	4770      	bx	lr
 800f052:	bf00      	nop
 800f054:	20001b6c 	.word	0x20001b6c
 800f058:	20003b6c 	.word	0x20003b6c
 800f05c:	20003b74 	.word	0x20003b74
 800f060:	20003b7c 	.word	0x20003b7c
 800f064:	20003b78 	.word	0x20003b78
 800f068:	20003b80 	.word	0x20003b80

0800f06c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f06c:	b480      	push	{r7}
 800f06e:	b085      	sub	sp, #20
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f074:	4b27      	ldr	r3, [pc, #156]	; (800f114 <prvInsertBlockIntoFreeList+0xa8>)
 800f076:	60fb      	str	r3, [r7, #12]
 800f078:	e002      	b.n	800f080 <prvInsertBlockIntoFreeList+0x14>
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	60fb      	str	r3, [r7, #12]
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	429a      	cmp	r2, r3
 800f088:	d8f7      	bhi.n	800f07a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	68ba      	ldr	r2, [r7, #8]
 800f094:	4413      	add	r3, r2
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	429a      	cmp	r2, r3
 800f09a:	d108      	bne.n	800f0ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	685a      	ldr	r2, [r3, #4]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	441a      	add	r2, r3
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	68ba      	ldr	r2, [r7, #8]
 800f0b8:	441a      	add	r2, r3
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d118      	bne.n	800f0f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	4b14      	ldr	r3, [pc, #80]	; (800f118 <prvInsertBlockIntoFreeList+0xac>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d00d      	beq.n	800f0ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	685a      	ldr	r2, [r3, #4]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	441a      	add	r2, r3
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	601a      	str	r2, [r3, #0]
 800f0e8:	e008      	b.n	800f0fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f0ea:	4b0b      	ldr	r3, [pc, #44]	; (800f118 <prvInsertBlockIntoFreeList+0xac>)
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	601a      	str	r2, [r3, #0]
 800f0f2:	e003      	b.n	800f0fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	429a      	cmp	r2, r3
 800f102:	d002      	beq.n	800f10a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	687a      	ldr	r2, [r7, #4]
 800f108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f10a:	bf00      	nop
 800f10c:	3714      	adds	r7, #20
 800f10e:	46bd      	mov	sp, r7
 800f110:	bc80      	pop	{r7}
 800f112:	4770      	bx	lr
 800f114:	20003b6c 	.word	0x20003b6c
 800f118:	20003b74 	.word	0x20003b74

0800f11c <__assert_func>:
 800f11c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f11e:	4614      	mov	r4, r2
 800f120:	461a      	mov	r2, r3
 800f122:	4b09      	ldr	r3, [pc, #36]	; (800f148 <__assert_func+0x2c>)
 800f124:	4605      	mov	r5, r0
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68d8      	ldr	r0, [r3, #12]
 800f12a:	b14c      	cbz	r4, 800f140 <__assert_func+0x24>
 800f12c:	4b07      	ldr	r3, [pc, #28]	; (800f14c <__assert_func+0x30>)
 800f12e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f132:	9100      	str	r1, [sp, #0]
 800f134:	462b      	mov	r3, r5
 800f136:	4906      	ldr	r1, [pc, #24]	; (800f150 <__assert_func+0x34>)
 800f138:	f000 f814 	bl	800f164 <fiprintf>
 800f13c:	f000 ff4a 	bl	800ffd4 <abort>
 800f140:	4b04      	ldr	r3, [pc, #16]	; (800f154 <__assert_func+0x38>)
 800f142:	461c      	mov	r4, r3
 800f144:	e7f3      	b.n	800f12e <__assert_func+0x12>
 800f146:	bf00      	nop
 800f148:	20000064 	.word	0x20000064
 800f14c:	08014925 	.word	0x08014925
 800f150:	08014932 	.word	0x08014932
 800f154:	08014960 	.word	0x08014960

0800f158 <__errno>:
 800f158:	4b01      	ldr	r3, [pc, #4]	; (800f160 <__errno+0x8>)
 800f15a:	6818      	ldr	r0, [r3, #0]
 800f15c:	4770      	bx	lr
 800f15e:	bf00      	nop
 800f160:	20000064 	.word	0x20000064

0800f164 <fiprintf>:
 800f164:	b40e      	push	{r1, r2, r3}
 800f166:	b503      	push	{r0, r1, lr}
 800f168:	4601      	mov	r1, r0
 800f16a:	ab03      	add	r3, sp, #12
 800f16c:	4805      	ldr	r0, [pc, #20]	; (800f184 <fiprintf+0x20>)
 800f16e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f172:	6800      	ldr	r0, [r0, #0]
 800f174:	9301      	str	r3, [sp, #4]
 800f176:	f000 f869 	bl	800f24c <_vfiprintf_r>
 800f17a:	b002      	add	sp, #8
 800f17c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f180:	b003      	add	sp, #12
 800f182:	4770      	bx	lr
 800f184:	20000064 	.word	0x20000064

0800f188 <__libc_init_array>:
 800f188:	b570      	push	{r4, r5, r6, lr}
 800f18a:	2600      	movs	r6, #0
 800f18c:	4d0c      	ldr	r5, [pc, #48]	; (800f1c0 <__libc_init_array+0x38>)
 800f18e:	4c0d      	ldr	r4, [pc, #52]	; (800f1c4 <__libc_init_array+0x3c>)
 800f190:	1b64      	subs	r4, r4, r5
 800f192:	10a4      	asrs	r4, r4, #2
 800f194:	42a6      	cmp	r6, r4
 800f196:	d109      	bne.n	800f1ac <__libc_init_array+0x24>
 800f198:	f003 fe4c 	bl	8012e34 <_init>
 800f19c:	2600      	movs	r6, #0
 800f19e:	4d0a      	ldr	r5, [pc, #40]	; (800f1c8 <__libc_init_array+0x40>)
 800f1a0:	4c0a      	ldr	r4, [pc, #40]	; (800f1cc <__libc_init_array+0x44>)
 800f1a2:	1b64      	subs	r4, r4, r5
 800f1a4:	10a4      	asrs	r4, r4, #2
 800f1a6:	42a6      	cmp	r6, r4
 800f1a8:	d105      	bne.n	800f1b6 <__libc_init_array+0x2e>
 800f1aa:	bd70      	pop	{r4, r5, r6, pc}
 800f1ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1b0:	4798      	blx	r3
 800f1b2:	3601      	adds	r6, #1
 800f1b4:	e7ee      	b.n	800f194 <__libc_init_array+0xc>
 800f1b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ba:	4798      	blx	r3
 800f1bc:	3601      	adds	r6, #1
 800f1be:	e7f2      	b.n	800f1a6 <__libc_init_array+0x1e>
 800f1c0:	08014d40 	.word	0x08014d40
 800f1c4:	08014d40 	.word	0x08014d40
 800f1c8:	08014d40 	.word	0x08014d40
 800f1cc:	08014d44 	.word	0x08014d44

0800f1d0 <memcpy>:
 800f1d0:	440a      	add	r2, r1
 800f1d2:	4291      	cmp	r1, r2
 800f1d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f1d8:	d100      	bne.n	800f1dc <memcpy+0xc>
 800f1da:	4770      	bx	lr
 800f1dc:	b510      	push	{r4, lr}
 800f1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1e2:	4291      	cmp	r1, r2
 800f1e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1e8:	d1f9      	bne.n	800f1de <memcpy+0xe>
 800f1ea:	bd10      	pop	{r4, pc}

0800f1ec <memset>:
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	4402      	add	r2, r0
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	d100      	bne.n	800f1f6 <memset+0xa>
 800f1f4:	4770      	bx	lr
 800f1f6:	f803 1b01 	strb.w	r1, [r3], #1
 800f1fa:	e7f9      	b.n	800f1f0 <memset+0x4>

0800f1fc <__sfputc_r>:
 800f1fc:	6893      	ldr	r3, [r2, #8]
 800f1fe:	b410      	push	{r4}
 800f200:	3b01      	subs	r3, #1
 800f202:	2b00      	cmp	r3, #0
 800f204:	6093      	str	r3, [r2, #8]
 800f206:	da07      	bge.n	800f218 <__sfputc_r+0x1c>
 800f208:	6994      	ldr	r4, [r2, #24]
 800f20a:	42a3      	cmp	r3, r4
 800f20c:	db01      	blt.n	800f212 <__sfputc_r+0x16>
 800f20e:	290a      	cmp	r1, #10
 800f210:	d102      	bne.n	800f218 <__sfputc_r+0x1c>
 800f212:	bc10      	pop	{r4}
 800f214:	f000 be1e 	b.w	800fe54 <__swbuf_r>
 800f218:	6813      	ldr	r3, [r2, #0]
 800f21a:	1c58      	adds	r0, r3, #1
 800f21c:	6010      	str	r0, [r2, #0]
 800f21e:	7019      	strb	r1, [r3, #0]
 800f220:	4608      	mov	r0, r1
 800f222:	bc10      	pop	{r4}
 800f224:	4770      	bx	lr

0800f226 <__sfputs_r>:
 800f226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f228:	4606      	mov	r6, r0
 800f22a:	460f      	mov	r7, r1
 800f22c:	4614      	mov	r4, r2
 800f22e:	18d5      	adds	r5, r2, r3
 800f230:	42ac      	cmp	r4, r5
 800f232:	d101      	bne.n	800f238 <__sfputs_r+0x12>
 800f234:	2000      	movs	r0, #0
 800f236:	e007      	b.n	800f248 <__sfputs_r+0x22>
 800f238:	463a      	mov	r2, r7
 800f23a:	4630      	mov	r0, r6
 800f23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f240:	f7ff ffdc 	bl	800f1fc <__sfputc_r>
 800f244:	1c43      	adds	r3, r0, #1
 800f246:	d1f3      	bne.n	800f230 <__sfputs_r+0xa>
 800f248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f24c <_vfiprintf_r>:
 800f24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f250:	460d      	mov	r5, r1
 800f252:	4614      	mov	r4, r2
 800f254:	4698      	mov	r8, r3
 800f256:	4606      	mov	r6, r0
 800f258:	b09d      	sub	sp, #116	; 0x74
 800f25a:	b118      	cbz	r0, 800f264 <_vfiprintf_r+0x18>
 800f25c:	6983      	ldr	r3, [r0, #24]
 800f25e:	b90b      	cbnz	r3, 800f264 <_vfiprintf_r+0x18>
 800f260:	f001 fe52 	bl	8010f08 <__sinit>
 800f264:	4b89      	ldr	r3, [pc, #548]	; (800f48c <_vfiprintf_r+0x240>)
 800f266:	429d      	cmp	r5, r3
 800f268:	d11b      	bne.n	800f2a2 <_vfiprintf_r+0x56>
 800f26a:	6875      	ldr	r5, [r6, #4]
 800f26c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f26e:	07d9      	lsls	r1, r3, #31
 800f270:	d405      	bmi.n	800f27e <_vfiprintf_r+0x32>
 800f272:	89ab      	ldrh	r3, [r5, #12]
 800f274:	059a      	lsls	r2, r3, #22
 800f276:	d402      	bmi.n	800f27e <_vfiprintf_r+0x32>
 800f278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f27a:	f001 fee8 	bl	801104e <__retarget_lock_acquire_recursive>
 800f27e:	89ab      	ldrh	r3, [r5, #12]
 800f280:	071b      	lsls	r3, r3, #28
 800f282:	d501      	bpl.n	800f288 <_vfiprintf_r+0x3c>
 800f284:	692b      	ldr	r3, [r5, #16]
 800f286:	b9eb      	cbnz	r3, 800f2c4 <_vfiprintf_r+0x78>
 800f288:	4629      	mov	r1, r5
 800f28a:	4630      	mov	r0, r6
 800f28c:	f000 fe34 	bl	800fef8 <__swsetup_r>
 800f290:	b1c0      	cbz	r0, 800f2c4 <_vfiprintf_r+0x78>
 800f292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f294:	07dc      	lsls	r4, r3, #31
 800f296:	d50e      	bpl.n	800f2b6 <_vfiprintf_r+0x6a>
 800f298:	f04f 30ff 	mov.w	r0, #4294967295
 800f29c:	b01d      	add	sp, #116	; 0x74
 800f29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a2:	4b7b      	ldr	r3, [pc, #492]	; (800f490 <_vfiprintf_r+0x244>)
 800f2a4:	429d      	cmp	r5, r3
 800f2a6:	d101      	bne.n	800f2ac <_vfiprintf_r+0x60>
 800f2a8:	68b5      	ldr	r5, [r6, #8]
 800f2aa:	e7df      	b.n	800f26c <_vfiprintf_r+0x20>
 800f2ac:	4b79      	ldr	r3, [pc, #484]	; (800f494 <_vfiprintf_r+0x248>)
 800f2ae:	429d      	cmp	r5, r3
 800f2b0:	bf08      	it	eq
 800f2b2:	68f5      	ldreq	r5, [r6, #12]
 800f2b4:	e7da      	b.n	800f26c <_vfiprintf_r+0x20>
 800f2b6:	89ab      	ldrh	r3, [r5, #12]
 800f2b8:	0598      	lsls	r0, r3, #22
 800f2ba:	d4ed      	bmi.n	800f298 <_vfiprintf_r+0x4c>
 800f2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2be:	f001 fec7 	bl	8011050 <__retarget_lock_release_recursive>
 800f2c2:	e7e9      	b.n	800f298 <_vfiprintf_r+0x4c>
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f2c8:	2320      	movs	r3, #32
 800f2ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2ce:	2330      	movs	r3, #48	; 0x30
 800f2d0:	f04f 0901 	mov.w	r9, #1
 800f2d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800f498 <_vfiprintf_r+0x24c>
 800f2dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2e0:	4623      	mov	r3, r4
 800f2e2:	469a      	mov	sl, r3
 800f2e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2e8:	b10a      	cbz	r2, 800f2ee <_vfiprintf_r+0xa2>
 800f2ea:	2a25      	cmp	r2, #37	; 0x25
 800f2ec:	d1f9      	bne.n	800f2e2 <_vfiprintf_r+0x96>
 800f2ee:	ebba 0b04 	subs.w	fp, sl, r4
 800f2f2:	d00b      	beq.n	800f30c <_vfiprintf_r+0xc0>
 800f2f4:	465b      	mov	r3, fp
 800f2f6:	4622      	mov	r2, r4
 800f2f8:	4629      	mov	r1, r5
 800f2fa:	4630      	mov	r0, r6
 800f2fc:	f7ff ff93 	bl	800f226 <__sfputs_r>
 800f300:	3001      	adds	r0, #1
 800f302:	f000 80aa 	beq.w	800f45a <_vfiprintf_r+0x20e>
 800f306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f308:	445a      	add	r2, fp
 800f30a:	9209      	str	r2, [sp, #36]	; 0x24
 800f30c:	f89a 3000 	ldrb.w	r3, [sl]
 800f310:	2b00      	cmp	r3, #0
 800f312:	f000 80a2 	beq.w	800f45a <_vfiprintf_r+0x20e>
 800f316:	2300      	movs	r3, #0
 800f318:	f04f 32ff 	mov.w	r2, #4294967295
 800f31c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f320:	f10a 0a01 	add.w	sl, sl, #1
 800f324:	9304      	str	r3, [sp, #16]
 800f326:	9307      	str	r3, [sp, #28]
 800f328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f32c:	931a      	str	r3, [sp, #104]	; 0x68
 800f32e:	4654      	mov	r4, sl
 800f330:	2205      	movs	r2, #5
 800f332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f336:	4858      	ldr	r0, [pc, #352]	; (800f498 <_vfiprintf_r+0x24c>)
 800f338:	f001 fef8 	bl	801112c <memchr>
 800f33c:	9a04      	ldr	r2, [sp, #16]
 800f33e:	b9d8      	cbnz	r0, 800f378 <_vfiprintf_r+0x12c>
 800f340:	06d1      	lsls	r1, r2, #27
 800f342:	bf44      	itt	mi
 800f344:	2320      	movmi	r3, #32
 800f346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f34a:	0713      	lsls	r3, r2, #28
 800f34c:	bf44      	itt	mi
 800f34e:	232b      	movmi	r3, #43	; 0x2b
 800f350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f354:	f89a 3000 	ldrb.w	r3, [sl]
 800f358:	2b2a      	cmp	r3, #42	; 0x2a
 800f35a:	d015      	beq.n	800f388 <_vfiprintf_r+0x13c>
 800f35c:	4654      	mov	r4, sl
 800f35e:	2000      	movs	r0, #0
 800f360:	f04f 0c0a 	mov.w	ip, #10
 800f364:	9a07      	ldr	r2, [sp, #28]
 800f366:	4621      	mov	r1, r4
 800f368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f36c:	3b30      	subs	r3, #48	; 0x30
 800f36e:	2b09      	cmp	r3, #9
 800f370:	d94e      	bls.n	800f410 <_vfiprintf_r+0x1c4>
 800f372:	b1b0      	cbz	r0, 800f3a2 <_vfiprintf_r+0x156>
 800f374:	9207      	str	r2, [sp, #28]
 800f376:	e014      	b.n	800f3a2 <_vfiprintf_r+0x156>
 800f378:	eba0 0308 	sub.w	r3, r0, r8
 800f37c:	fa09 f303 	lsl.w	r3, r9, r3
 800f380:	4313      	orrs	r3, r2
 800f382:	46a2      	mov	sl, r4
 800f384:	9304      	str	r3, [sp, #16]
 800f386:	e7d2      	b.n	800f32e <_vfiprintf_r+0xe2>
 800f388:	9b03      	ldr	r3, [sp, #12]
 800f38a:	1d19      	adds	r1, r3, #4
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	9103      	str	r1, [sp, #12]
 800f390:	2b00      	cmp	r3, #0
 800f392:	bfbb      	ittet	lt
 800f394:	425b      	neglt	r3, r3
 800f396:	f042 0202 	orrlt.w	r2, r2, #2
 800f39a:	9307      	strge	r3, [sp, #28]
 800f39c:	9307      	strlt	r3, [sp, #28]
 800f39e:	bfb8      	it	lt
 800f3a0:	9204      	strlt	r2, [sp, #16]
 800f3a2:	7823      	ldrb	r3, [r4, #0]
 800f3a4:	2b2e      	cmp	r3, #46	; 0x2e
 800f3a6:	d10c      	bne.n	800f3c2 <_vfiprintf_r+0x176>
 800f3a8:	7863      	ldrb	r3, [r4, #1]
 800f3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800f3ac:	d135      	bne.n	800f41a <_vfiprintf_r+0x1ce>
 800f3ae:	9b03      	ldr	r3, [sp, #12]
 800f3b0:	3402      	adds	r4, #2
 800f3b2:	1d1a      	adds	r2, r3, #4
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	9203      	str	r2, [sp, #12]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	bfb8      	it	lt
 800f3bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3c0:	9305      	str	r3, [sp, #20]
 800f3c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800f49c <_vfiprintf_r+0x250>
 800f3c6:	2203      	movs	r2, #3
 800f3c8:	4650      	mov	r0, sl
 800f3ca:	7821      	ldrb	r1, [r4, #0]
 800f3cc:	f001 feae 	bl	801112c <memchr>
 800f3d0:	b140      	cbz	r0, 800f3e4 <_vfiprintf_r+0x198>
 800f3d2:	2340      	movs	r3, #64	; 0x40
 800f3d4:	eba0 000a 	sub.w	r0, r0, sl
 800f3d8:	fa03 f000 	lsl.w	r0, r3, r0
 800f3dc:	9b04      	ldr	r3, [sp, #16]
 800f3de:	3401      	adds	r4, #1
 800f3e0:	4303      	orrs	r3, r0
 800f3e2:	9304      	str	r3, [sp, #16]
 800f3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3e8:	2206      	movs	r2, #6
 800f3ea:	482d      	ldr	r0, [pc, #180]	; (800f4a0 <_vfiprintf_r+0x254>)
 800f3ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3f0:	f001 fe9c 	bl	801112c <memchr>
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	d03f      	beq.n	800f478 <_vfiprintf_r+0x22c>
 800f3f8:	4b2a      	ldr	r3, [pc, #168]	; (800f4a4 <_vfiprintf_r+0x258>)
 800f3fa:	bb1b      	cbnz	r3, 800f444 <_vfiprintf_r+0x1f8>
 800f3fc:	9b03      	ldr	r3, [sp, #12]
 800f3fe:	3307      	adds	r3, #7
 800f400:	f023 0307 	bic.w	r3, r3, #7
 800f404:	3308      	adds	r3, #8
 800f406:	9303      	str	r3, [sp, #12]
 800f408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f40a:	443b      	add	r3, r7
 800f40c:	9309      	str	r3, [sp, #36]	; 0x24
 800f40e:	e767      	b.n	800f2e0 <_vfiprintf_r+0x94>
 800f410:	460c      	mov	r4, r1
 800f412:	2001      	movs	r0, #1
 800f414:	fb0c 3202 	mla	r2, ip, r2, r3
 800f418:	e7a5      	b.n	800f366 <_vfiprintf_r+0x11a>
 800f41a:	2300      	movs	r3, #0
 800f41c:	f04f 0c0a 	mov.w	ip, #10
 800f420:	4619      	mov	r1, r3
 800f422:	3401      	adds	r4, #1
 800f424:	9305      	str	r3, [sp, #20]
 800f426:	4620      	mov	r0, r4
 800f428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f42c:	3a30      	subs	r2, #48	; 0x30
 800f42e:	2a09      	cmp	r2, #9
 800f430:	d903      	bls.n	800f43a <_vfiprintf_r+0x1ee>
 800f432:	2b00      	cmp	r3, #0
 800f434:	d0c5      	beq.n	800f3c2 <_vfiprintf_r+0x176>
 800f436:	9105      	str	r1, [sp, #20]
 800f438:	e7c3      	b.n	800f3c2 <_vfiprintf_r+0x176>
 800f43a:	4604      	mov	r4, r0
 800f43c:	2301      	movs	r3, #1
 800f43e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f442:	e7f0      	b.n	800f426 <_vfiprintf_r+0x1da>
 800f444:	ab03      	add	r3, sp, #12
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	462a      	mov	r2, r5
 800f44a:	4630      	mov	r0, r6
 800f44c:	4b16      	ldr	r3, [pc, #88]	; (800f4a8 <_vfiprintf_r+0x25c>)
 800f44e:	a904      	add	r1, sp, #16
 800f450:	f000 f8ca 	bl	800f5e8 <_printf_float>
 800f454:	4607      	mov	r7, r0
 800f456:	1c78      	adds	r0, r7, #1
 800f458:	d1d6      	bne.n	800f408 <_vfiprintf_r+0x1bc>
 800f45a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f45c:	07d9      	lsls	r1, r3, #31
 800f45e:	d405      	bmi.n	800f46c <_vfiprintf_r+0x220>
 800f460:	89ab      	ldrh	r3, [r5, #12]
 800f462:	059a      	lsls	r2, r3, #22
 800f464:	d402      	bmi.n	800f46c <_vfiprintf_r+0x220>
 800f466:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f468:	f001 fdf2 	bl	8011050 <__retarget_lock_release_recursive>
 800f46c:	89ab      	ldrh	r3, [r5, #12]
 800f46e:	065b      	lsls	r3, r3, #25
 800f470:	f53f af12 	bmi.w	800f298 <_vfiprintf_r+0x4c>
 800f474:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f476:	e711      	b.n	800f29c <_vfiprintf_r+0x50>
 800f478:	ab03      	add	r3, sp, #12
 800f47a:	9300      	str	r3, [sp, #0]
 800f47c:	462a      	mov	r2, r5
 800f47e:	4630      	mov	r0, r6
 800f480:	4b09      	ldr	r3, [pc, #36]	; (800f4a8 <_vfiprintf_r+0x25c>)
 800f482:	a904      	add	r1, sp, #16
 800f484:	f000 fb4c 	bl	800fb20 <_printf_i>
 800f488:	e7e4      	b.n	800f454 <_vfiprintf_r+0x208>
 800f48a:	bf00      	nop
 800f48c:	08014a60 	.word	0x08014a60
 800f490:	08014a80 	.word	0x08014a80
 800f494:	08014a40 	.word	0x08014a40
 800f498:	08014968 	.word	0x08014968
 800f49c:	0801496e 	.word	0x0801496e
 800f4a0:	08014972 	.word	0x08014972
 800f4a4:	0800f5e9 	.word	0x0800f5e9
 800f4a8:	0800f227 	.word	0x0800f227

0800f4ac <__cvt>:
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4b2:	461f      	mov	r7, r3
 800f4b4:	bfbb      	ittet	lt
 800f4b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800f4ba:	461f      	movlt	r7, r3
 800f4bc:	2300      	movge	r3, #0
 800f4be:	232d      	movlt	r3, #45	; 0x2d
 800f4c0:	b088      	sub	sp, #32
 800f4c2:	4614      	mov	r4, r2
 800f4c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f4c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f4c8:	7013      	strb	r3, [r2, #0]
 800f4ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f4cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800f4d0:	f023 0820 	bic.w	r8, r3, #32
 800f4d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f4d8:	d005      	beq.n	800f4e6 <__cvt+0x3a>
 800f4da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f4de:	d100      	bne.n	800f4e2 <__cvt+0x36>
 800f4e0:	3501      	adds	r5, #1
 800f4e2:	2302      	movs	r3, #2
 800f4e4:	e000      	b.n	800f4e8 <__cvt+0x3c>
 800f4e6:	2303      	movs	r3, #3
 800f4e8:	aa07      	add	r2, sp, #28
 800f4ea:	9204      	str	r2, [sp, #16]
 800f4ec:	aa06      	add	r2, sp, #24
 800f4ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 800f4f2:	e9cd 3500 	strd	r3, r5, [sp]
 800f4f6:	4622      	mov	r2, r4
 800f4f8:	463b      	mov	r3, r7
 800f4fa:	f000 fe01 	bl	8010100 <_dtoa_r>
 800f4fe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f502:	4606      	mov	r6, r0
 800f504:	d102      	bne.n	800f50c <__cvt+0x60>
 800f506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f508:	07db      	lsls	r3, r3, #31
 800f50a:	d522      	bpl.n	800f552 <__cvt+0xa6>
 800f50c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f510:	eb06 0905 	add.w	r9, r6, r5
 800f514:	d110      	bne.n	800f538 <__cvt+0x8c>
 800f516:	7833      	ldrb	r3, [r6, #0]
 800f518:	2b30      	cmp	r3, #48	; 0x30
 800f51a:	d10a      	bne.n	800f532 <__cvt+0x86>
 800f51c:	2200      	movs	r2, #0
 800f51e:	2300      	movs	r3, #0
 800f520:	4620      	mov	r0, r4
 800f522:	4639      	mov	r1, r7
 800f524:	f7f1 faba 	bl	8000a9c <__aeabi_dcmpeq>
 800f528:	b918      	cbnz	r0, 800f532 <__cvt+0x86>
 800f52a:	f1c5 0501 	rsb	r5, r5, #1
 800f52e:	f8ca 5000 	str.w	r5, [sl]
 800f532:	f8da 3000 	ldr.w	r3, [sl]
 800f536:	4499      	add	r9, r3
 800f538:	2200      	movs	r2, #0
 800f53a:	2300      	movs	r3, #0
 800f53c:	4620      	mov	r0, r4
 800f53e:	4639      	mov	r1, r7
 800f540:	f7f1 faac 	bl	8000a9c <__aeabi_dcmpeq>
 800f544:	b108      	cbz	r0, 800f54a <__cvt+0x9e>
 800f546:	f8cd 901c 	str.w	r9, [sp, #28]
 800f54a:	2230      	movs	r2, #48	; 0x30
 800f54c:	9b07      	ldr	r3, [sp, #28]
 800f54e:	454b      	cmp	r3, r9
 800f550:	d307      	bcc.n	800f562 <__cvt+0xb6>
 800f552:	4630      	mov	r0, r6
 800f554:	9b07      	ldr	r3, [sp, #28]
 800f556:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f558:	1b9b      	subs	r3, r3, r6
 800f55a:	6013      	str	r3, [r2, #0]
 800f55c:	b008      	add	sp, #32
 800f55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f562:	1c59      	adds	r1, r3, #1
 800f564:	9107      	str	r1, [sp, #28]
 800f566:	701a      	strb	r2, [r3, #0]
 800f568:	e7f0      	b.n	800f54c <__cvt+0xa0>

0800f56a <__exponent>:
 800f56a:	4603      	mov	r3, r0
 800f56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f56e:	2900      	cmp	r1, #0
 800f570:	f803 2b02 	strb.w	r2, [r3], #2
 800f574:	bfb6      	itet	lt
 800f576:	222d      	movlt	r2, #45	; 0x2d
 800f578:	222b      	movge	r2, #43	; 0x2b
 800f57a:	4249      	neglt	r1, r1
 800f57c:	2909      	cmp	r1, #9
 800f57e:	7042      	strb	r2, [r0, #1]
 800f580:	dd2b      	ble.n	800f5da <__exponent+0x70>
 800f582:	f10d 0407 	add.w	r4, sp, #7
 800f586:	46a4      	mov	ip, r4
 800f588:	270a      	movs	r7, #10
 800f58a:	fb91 f6f7 	sdiv	r6, r1, r7
 800f58e:	460a      	mov	r2, r1
 800f590:	46a6      	mov	lr, r4
 800f592:	fb07 1516 	mls	r5, r7, r6, r1
 800f596:	2a63      	cmp	r2, #99	; 0x63
 800f598:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800f59c:	4631      	mov	r1, r6
 800f59e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f5a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f5a6:	dcf0      	bgt.n	800f58a <__exponent+0x20>
 800f5a8:	3130      	adds	r1, #48	; 0x30
 800f5aa:	f1ae 0502 	sub.w	r5, lr, #2
 800f5ae:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f5b2:	4629      	mov	r1, r5
 800f5b4:	1c44      	adds	r4, r0, #1
 800f5b6:	4561      	cmp	r1, ip
 800f5b8:	d30a      	bcc.n	800f5d0 <__exponent+0x66>
 800f5ba:	f10d 0209 	add.w	r2, sp, #9
 800f5be:	eba2 020e 	sub.w	r2, r2, lr
 800f5c2:	4565      	cmp	r5, ip
 800f5c4:	bf88      	it	hi
 800f5c6:	2200      	movhi	r2, #0
 800f5c8:	4413      	add	r3, r2
 800f5ca:	1a18      	subs	r0, r3, r0
 800f5cc:	b003      	add	sp, #12
 800f5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5d4:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f5d8:	e7ed      	b.n	800f5b6 <__exponent+0x4c>
 800f5da:	2330      	movs	r3, #48	; 0x30
 800f5dc:	3130      	adds	r1, #48	; 0x30
 800f5de:	7083      	strb	r3, [r0, #2]
 800f5e0:	70c1      	strb	r1, [r0, #3]
 800f5e2:	1d03      	adds	r3, r0, #4
 800f5e4:	e7f1      	b.n	800f5ca <__exponent+0x60>
	...

0800f5e8 <_printf_float>:
 800f5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ec:	b091      	sub	sp, #68	; 0x44
 800f5ee:	460c      	mov	r4, r1
 800f5f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800f5f4:	4616      	mov	r6, r2
 800f5f6:	461f      	mov	r7, r3
 800f5f8:	4605      	mov	r5, r0
 800f5fa:	f001 fd23 	bl	8011044 <_localeconv_r>
 800f5fe:	6803      	ldr	r3, [r0, #0]
 800f600:	4618      	mov	r0, r3
 800f602:	9309      	str	r3, [sp, #36]	; 0x24
 800f604:	f7f0 fe1e 	bl	8000244 <strlen>
 800f608:	2300      	movs	r3, #0
 800f60a:	930e      	str	r3, [sp, #56]	; 0x38
 800f60c:	f8d8 3000 	ldr.w	r3, [r8]
 800f610:	900a      	str	r0, [sp, #40]	; 0x28
 800f612:	3307      	adds	r3, #7
 800f614:	f023 0307 	bic.w	r3, r3, #7
 800f618:	f103 0208 	add.w	r2, r3, #8
 800f61c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f620:	f8d4 b000 	ldr.w	fp, [r4]
 800f624:	f8c8 2000 	str.w	r2, [r8]
 800f628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f630:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800f634:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800f638:	930b      	str	r3, [sp, #44]	; 0x2c
 800f63a:	f04f 32ff 	mov.w	r2, #4294967295
 800f63e:	4640      	mov	r0, r8
 800f640:	4b9c      	ldr	r3, [pc, #624]	; (800f8b4 <_printf_float+0x2cc>)
 800f642:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f644:	f7f1 fa5c 	bl	8000b00 <__aeabi_dcmpun>
 800f648:	bb70      	cbnz	r0, 800f6a8 <_printf_float+0xc0>
 800f64a:	f04f 32ff 	mov.w	r2, #4294967295
 800f64e:	4640      	mov	r0, r8
 800f650:	4b98      	ldr	r3, [pc, #608]	; (800f8b4 <_printf_float+0x2cc>)
 800f652:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f654:	f7f1 fa36 	bl	8000ac4 <__aeabi_dcmple>
 800f658:	bb30      	cbnz	r0, 800f6a8 <_printf_float+0xc0>
 800f65a:	2200      	movs	r2, #0
 800f65c:	2300      	movs	r3, #0
 800f65e:	4640      	mov	r0, r8
 800f660:	4651      	mov	r1, sl
 800f662:	f7f1 fa25 	bl	8000ab0 <__aeabi_dcmplt>
 800f666:	b110      	cbz	r0, 800f66e <_printf_float+0x86>
 800f668:	232d      	movs	r3, #45	; 0x2d
 800f66a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f66e:	4b92      	ldr	r3, [pc, #584]	; (800f8b8 <_printf_float+0x2d0>)
 800f670:	4892      	ldr	r0, [pc, #584]	; (800f8bc <_printf_float+0x2d4>)
 800f672:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f676:	bf94      	ite	ls
 800f678:	4698      	movls	r8, r3
 800f67a:	4680      	movhi	r8, r0
 800f67c:	2303      	movs	r3, #3
 800f67e:	f04f 0a00 	mov.w	sl, #0
 800f682:	6123      	str	r3, [r4, #16]
 800f684:	f02b 0304 	bic.w	r3, fp, #4
 800f688:	6023      	str	r3, [r4, #0]
 800f68a:	4633      	mov	r3, r6
 800f68c:	4621      	mov	r1, r4
 800f68e:	4628      	mov	r0, r5
 800f690:	9700      	str	r7, [sp, #0]
 800f692:	aa0f      	add	r2, sp, #60	; 0x3c
 800f694:	f000 f9d4 	bl	800fa40 <_printf_common>
 800f698:	3001      	adds	r0, #1
 800f69a:	f040 8090 	bne.w	800f7be <_printf_float+0x1d6>
 800f69e:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a2:	b011      	add	sp, #68	; 0x44
 800f6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6a8:	4642      	mov	r2, r8
 800f6aa:	4653      	mov	r3, sl
 800f6ac:	4640      	mov	r0, r8
 800f6ae:	4651      	mov	r1, sl
 800f6b0:	f7f1 fa26 	bl	8000b00 <__aeabi_dcmpun>
 800f6b4:	b148      	cbz	r0, 800f6ca <_printf_float+0xe2>
 800f6b6:	f1ba 0f00 	cmp.w	sl, #0
 800f6ba:	bfb8      	it	lt
 800f6bc:	232d      	movlt	r3, #45	; 0x2d
 800f6be:	4880      	ldr	r0, [pc, #512]	; (800f8c0 <_printf_float+0x2d8>)
 800f6c0:	bfb8      	it	lt
 800f6c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f6c6:	4b7f      	ldr	r3, [pc, #508]	; (800f8c4 <_printf_float+0x2dc>)
 800f6c8:	e7d3      	b.n	800f672 <_printf_float+0x8a>
 800f6ca:	6863      	ldr	r3, [r4, #4]
 800f6cc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f6d0:	1c5a      	adds	r2, r3, #1
 800f6d2:	d142      	bne.n	800f75a <_printf_float+0x172>
 800f6d4:	2306      	movs	r3, #6
 800f6d6:	6063      	str	r3, [r4, #4]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	9206      	str	r2, [sp, #24]
 800f6dc:	aa0e      	add	r2, sp, #56	; 0x38
 800f6de:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800f6e2:	aa0d      	add	r2, sp, #52	; 0x34
 800f6e4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800f6e8:	9203      	str	r2, [sp, #12]
 800f6ea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800f6ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f6f2:	6023      	str	r3, [r4, #0]
 800f6f4:	6863      	ldr	r3, [r4, #4]
 800f6f6:	4642      	mov	r2, r8
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	4628      	mov	r0, r5
 800f6fc:	4653      	mov	r3, sl
 800f6fe:	910b      	str	r1, [sp, #44]	; 0x2c
 800f700:	f7ff fed4 	bl	800f4ac <__cvt>
 800f704:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f706:	4680      	mov	r8, r0
 800f708:	2947      	cmp	r1, #71	; 0x47
 800f70a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f70c:	d108      	bne.n	800f720 <_printf_float+0x138>
 800f70e:	1cc8      	adds	r0, r1, #3
 800f710:	db02      	blt.n	800f718 <_printf_float+0x130>
 800f712:	6863      	ldr	r3, [r4, #4]
 800f714:	4299      	cmp	r1, r3
 800f716:	dd40      	ble.n	800f79a <_printf_float+0x1b2>
 800f718:	f1a9 0902 	sub.w	r9, r9, #2
 800f71c:	fa5f f989 	uxtb.w	r9, r9
 800f720:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f724:	d81f      	bhi.n	800f766 <_printf_float+0x17e>
 800f726:	464a      	mov	r2, r9
 800f728:	3901      	subs	r1, #1
 800f72a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f72e:	910d      	str	r1, [sp, #52]	; 0x34
 800f730:	f7ff ff1b 	bl	800f56a <__exponent>
 800f734:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f736:	4682      	mov	sl, r0
 800f738:	1813      	adds	r3, r2, r0
 800f73a:	2a01      	cmp	r2, #1
 800f73c:	6123      	str	r3, [r4, #16]
 800f73e:	dc02      	bgt.n	800f746 <_printf_float+0x15e>
 800f740:	6822      	ldr	r2, [r4, #0]
 800f742:	07d2      	lsls	r2, r2, #31
 800f744:	d501      	bpl.n	800f74a <_printf_float+0x162>
 800f746:	3301      	adds	r3, #1
 800f748:	6123      	str	r3, [r4, #16]
 800f74a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d09b      	beq.n	800f68a <_printf_float+0xa2>
 800f752:	232d      	movs	r3, #45	; 0x2d
 800f754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f758:	e797      	b.n	800f68a <_printf_float+0xa2>
 800f75a:	2947      	cmp	r1, #71	; 0x47
 800f75c:	d1bc      	bne.n	800f6d8 <_printf_float+0xf0>
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1ba      	bne.n	800f6d8 <_printf_float+0xf0>
 800f762:	2301      	movs	r3, #1
 800f764:	e7b7      	b.n	800f6d6 <_printf_float+0xee>
 800f766:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f76a:	d118      	bne.n	800f79e <_printf_float+0x1b6>
 800f76c:	2900      	cmp	r1, #0
 800f76e:	6863      	ldr	r3, [r4, #4]
 800f770:	dd0b      	ble.n	800f78a <_printf_float+0x1a2>
 800f772:	6121      	str	r1, [r4, #16]
 800f774:	b913      	cbnz	r3, 800f77c <_printf_float+0x194>
 800f776:	6822      	ldr	r2, [r4, #0]
 800f778:	07d0      	lsls	r0, r2, #31
 800f77a:	d502      	bpl.n	800f782 <_printf_float+0x19a>
 800f77c:	3301      	adds	r3, #1
 800f77e:	440b      	add	r3, r1
 800f780:	6123      	str	r3, [r4, #16]
 800f782:	f04f 0a00 	mov.w	sl, #0
 800f786:	65a1      	str	r1, [r4, #88]	; 0x58
 800f788:	e7df      	b.n	800f74a <_printf_float+0x162>
 800f78a:	b913      	cbnz	r3, 800f792 <_printf_float+0x1aa>
 800f78c:	6822      	ldr	r2, [r4, #0]
 800f78e:	07d2      	lsls	r2, r2, #31
 800f790:	d501      	bpl.n	800f796 <_printf_float+0x1ae>
 800f792:	3302      	adds	r3, #2
 800f794:	e7f4      	b.n	800f780 <_printf_float+0x198>
 800f796:	2301      	movs	r3, #1
 800f798:	e7f2      	b.n	800f780 <_printf_float+0x198>
 800f79a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f79e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7a0:	4299      	cmp	r1, r3
 800f7a2:	db05      	blt.n	800f7b0 <_printf_float+0x1c8>
 800f7a4:	6823      	ldr	r3, [r4, #0]
 800f7a6:	6121      	str	r1, [r4, #16]
 800f7a8:	07d8      	lsls	r0, r3, #31
 800f7aa:	d5ea      	bpl.n	800f782 <_printf_float+0x19a>
 800f7ac:	1c4b      	adds	r3, r1, #1
 800f7ae:	e7e7      	b.n	800f780 <_printf_float+0x198>
 800f7b0:	2900      	cmp	r1, #0
 800f7b2:	bfcc      	ite	gt
 800f7b4:	2201      	movgt	r2, #1
 800f7b6:	f1c1 0202 	rsble	r2, r1, #2
 800f7ba:	4413      	add	r3, r2
 800f7bc:	e7e0      	b.n	800f780 <_printf_float+0x198>
 800f7be:	6823      	ldr	r3, [r4, #0]
 800f7c0:	055a      	lsls	r2, r3, #21
 800f7c2:	d407      	bmi.n	800f7d4 <_printf_float+0x1ec>
 800f7c4:	6923      	ldr	r3, [r4, #16]
 800f7c6:	4642      	mov	r2, r8
 800f7c8:	4631      	mov	r1, r6
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	47b8      	blx	r7
 800f7ce:	3001      	adds	r0, #1
 800f7d0:	d12b      	bne.n	800f82a <_printf_float+0x242>
 800f7d2:	e764      	b.n	800f69e <_printf_float+0xb6>
 800f7d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f7d8:	f240 80dd 	bls.w	800f996 <_printf_float+0x3ae>
 800f7dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	f7f1 f95a 	bl	8000a9c <__aeabi_dcmpeq>
 800f7e8:	2800      	cmp	r0, #0
 800f7ea:	d033      	beq.n	800f854 <_printf_float+0x26c>
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	4631      	mov	r1, r6
 800f7f0:	4628      	mov	r0, r5
 800f7f2:	4a35      	ldr	r2, [pc, #212]	; (800f8c8 <_printf_float+0x2e0>)
 800f7f4:	47b8      	blx	r7
 800f7f6:	3001      	adds	r0, #1
 800f7f8:	f43f af51 	beq.w	800f69e <_printf_float+0xb6>
 800f7fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f800:	429a      	cmp	r2, r3
 800f802:	db02      	blt.n	800f80a <_printf_float+0x222>
 800f804:	6823      	ldr	r3, [r4, #0]
 800f806:	07d8      	lsls	r0, r3, #31
 800f808:	d50f      	bpl.n	800f82a <_printf_float+0x242>
 800f80a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f80e:	4631      	mov	r1, r6
 800f810:	4628      	mov	r0, r5
 800f812:	47b8      	blx	r7
 800f814:	3001      	adds	r0, #1
 800f816:	f43f af42 	beq.w	800f69e <_printf_float+0xb6>
 800f81a:	f04f 0800 	mov.w	r8, #0
 800f81e:	f104 091a 	add.w	r9, r4, #26
 800f822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f824:	3b01      	subs	r3, #1
 800f826:	4543      	cmp	r3, r8
 800f828:	dc09      	bgt.n	800f83e <_printf_float+0x256>
 800f82a:	6823      	ldr	r3, [r4, #0]
 800f82c:	079b      	lsls	r3, r3, #30
 800f82e:	f100 8102 	bmi.w	800fa36 <_printf_float+0x44e>
 800f832:	68e0      	ldr	r0, [r4, #12]
 800f834:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f836:	4298      	cmp	r0, r3
 800f838:	bfb8      	it	lt
 800f83a:	4618      	movlt	r0, r3
 800f83c:	e731      	b.n	800f6a2 <_printf_float+0xba>
 800f83e:	2301      	movs	r3, #1
 800f840:	464a      	mov	r2, r9
 800f842:	4631      	mov	r1, r6
 800f844:	4628      	mov	r0, r5
 800f846:	47b8      	blx	r7
 800f848:	3001      	adds	r0, #1
 800f84a:	f43f af28 	beq.w	800f69e <_printf_float+0xb6>
 800f84e:	f108 0801 	add.w	r8, r8, #1
 800f852:	e7e6      	b.n	800f822 <_printf_float+0x23a>
 800f854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f856:	2b00      	cmp	r3, #0
 800f858:	dc38      	bgt.n	800f8cc <_printf_float+0x2e4>
 800f85a:	2301      	movs	r3, #1
 800f85c:	4631      	mov	r1, r6
 800f85e:	4628      	mov	r0, r5
 800f860:	4a19      	ldr	r2, [pc, #100]	; (800f8c8 <_printf_float+0x2e0>)
 800f862:	47b8      	blx	r7
 800f864:	3001      	adds	r0, #1
 800f866:	f43f af1a 	beq.w	800f69e <_printf_float+0xb6>
 800f86a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f86e:	4313      	orrs	r3, r2
 800f870:	d102      	bne.n	800f878 <_printf_float+0x290>
 800f872:	6823      	ldr	r3, [r4, #0]
 800f874:	07d9      	lsls	r1, r3, #31
 800f876:	d5d8      	bpl.n	800f82a <_printf_float+0x242>
 800f878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f87c:	4631      	mov	r1, r6
 800f87e:	4628      	mov	r0, r5
 800f880:	47b8      	blx	r7
 800f882:	3001      	adds	r0, #1
 800f884:	f43f af0b 	beq.w	800f69e <_printf_float+0xb6>
 800f888:	f04f 0900 	mov.w	r9, #0
 800f88c:	f104 0a1a 	add.w	sl, r4, #26
 800f890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f892:	425b      	negs	r3, r3
 800f894:	454b      	cmp	r3, r9
 800f896:	dc01      	bgt.n	800f89c <_printf_float+0x2b4>
 800f898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f89a:	e794      	b.n	800f7c6 <_printf_float+0x1de>
 800f89c:	2301      	movs	r3, #1
 800f89e:	4652      	mov	r2, sl
 800f8a0:	4631      	mov	r1, r6
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	47b8      	blx	r7
 800f8a6:	3001      	adds	r0, #1
 800f8a8:	f43f aef9 	beq.w	800f69e <_printf_float+0xb6>
 800f8ac:	f109 0901 	add.w	r9, r9, #1
 800f8b0:	e7ee      	b.n	800f890 <_printf_float+0x2a8>
 800f8b2:	bf00      	nop
 800f8b4:	7fefffff 	.word	0x7fefffff
 800f8b8:	08014979 	.word	0x08014979
 800f8bc:	0801497d 	.word	0x0801497d
 800f8c0:	08014985 	.word	0x08014985
 800f8c4:	08014981 	.word	0x08014981
 800f8c8:	08014989 	.word	0x08014989
 800f8cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	bfa8      	it	ge
 800f8d4:	461a      	movge	r2, r3
 800f8d6:	2a00      	cmp	r2, #0
 800f8d8:	4691      	mov	r9, r2
 800f8da:	dc37      	bgt.n	800f94c <_printf_float+0x364>
 800f8dc:	f04f 0b00 	mov.w	fp, #0
 800f8e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8e4:	f104 021a 	add.w	r2, r4, #26
 800f8e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f8ec:	ebaa 0309 	sub.w	r3, sl, r9
 800f8f0:	455b      	cmp	r3, fp
 800f8f2:	dc33      	bgt.n	800f95c <_printf_float+0x374>
 800f8f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	db3b      	blt.n	800f974 <_printf_float+0x38c>
 800f8fc:	6823      	ldr	r3, [r4, #0]
 800f8fe:	07da      	lsls	r2, r3, #31
 800f900:	d438      	bmi.n	800f974 <_printf_float+0x38c>
 800f902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f904:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f906:	eba3 020a 	sub.w	r2, r3, sl
 800f90a:	eba3 0901 	sub.w	r9, r3, r1
 800f90e:	4591      	cmp	r9, r2
 800f910:	bfa8      	it	ge
 800f912:	4691      	movge	r9, r2
 800f914:	f1b9 0f00 	cmp.w	r9, #0
 800f918:	dc34      	bgt.n	800f984 <_printf_float+0x39c>
 800f91a:	f04f 0800 	mov.w	r8, #0
 800f91e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f922:	f104 0a1a 	add.w	sl, r4, #26
 800f926:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f92a:	1a9b      	subs	r3, r3, r2
 800f92c:	eba3 0309 	sub.w	r3, r3, r9
 800f930:	4543      	cmp	r3, r8
 800f932:	f77f af7a 	ble.w	800f82a <_printf_float+0x242>
 800f936:	2301      	movs	r3, #1
 800f938:	4652      	mov	r2, sl
 800f93a:	4631      	mov	r1, r6
 800f93c:	4628      	mov	r0, r5
 800f93e:	47b8      	blx	r7
 800f940:	3001      	adds	r0, #1
 800f942:	f43f aeac 	beq.w	800f69e <_printf_float+0xb6>
 800f946:	f108 0801 	add.w	r8, r8, #1
 800f94a:	e7ec      	b.n	800f926 <_printf_float+0x33e>
 800f94c:	4613      	mov	r3, r2
 800f94e:	4631      	mov	r1, r6
 800f950:	4642      	mov	r2, r8
 800f952:	4628      	mov	r0, r5
 800f954:	47b8      	blx	r7
 800f956:	3001      	adds	r0, #1
 800f958:	d1c0      	bne.n	800f8dc <_printf_float+0x2f4>
 800f95a:	e6a0      	b.n	800f69e <_printf_float+0xb6>
 800f95c:	2301      	movs	r3, #1
 800f95e:	4631      	mov	r1, r6
 800f960:	4628      	mov	r0, r5
 800f962:	920b      	str	r2, [sp, #44]	; 0x2c
 800f964:	47b8      	blx	r7
 800f966:	3001      	adds	r0, #1
 800f968:	f43f ae99 	beq.w	800f69e <_printf_float+0xb6>
 800f96c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f96e:	f10b 0b01 	add.w	fp, fp, #1
 800f972:	e7b9      	b.n	800f8e8 <_printf_float+0x300>
 800f974:	4631      	mov	r1, r6
 800f976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f97a:	4628      	mov	r0, r5
 800f97c:	47b8      	blx	r7
 800f97e:	3001      	adds	r0, #1
 800f980:	d1bf      	bne.n	800f902 <_printf_float+0x31a>
 800f982:	e68c      	b.n	800f69e <_printf_float+0xb6>
 800f984:	464b      	mov	r3, r9
 800f986:	4631      	mov	r1, r6
 800f988:	4628      	mov	r0, r5
 800f98a:	eb08 020a 	add.w	r2, r8, sl
 800f98e:	47b8      	blx	r7
 800f990:	3001      	adds	r0, #1
 800f992:	d1c2      	bne.n	800f91a <_printf_float+0x332>
 800f994:	e683      	b.n	800f69e <_printf_float+0xb6>
 800f996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f998:	2a01      	cmp	r2, #1
 800f99a:	dc01      	bgt.n	800f9a0 <_printf_float+0x3b8>
 800f99c:	07db      	lsls	r3, r3, #31
 800f99e:	d537      	bpl.n	800fa10 <_printf_float+0x428>
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	4642      	mov	r2, r8
 800f9a4:	4631      	mov	r1, r6
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	47b8      	blx	r7
 800f9aa:	3001      	adds	r0, #1
 800f9ac:	f43f ae77 	beq.w	800f69e <_printf_float+0xb6>
 800f9b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9b4:	4631      	mov	r1, r6
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	47b8      	blx	r7
 800f9ba:	3001      	adds	r0, #1
 800f9bc:	f43f ae6f 	beq.w	800f69e <_printf_float+0xb6>
 800f9c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	f7f1 f868 	bl	8000a9c <__aeabi_dcmpeq>
 800f9cc:	b9d8      	cbnz	r0, 800fa06 <_printf_float+0x41e>
 800f9ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9d0:	f108 0201 	add.w	r2, r8, #1
 800f9d4:	3b01      	subs	r3, #1
 800f9d6:	4631      	mov	r1, r6
 800f9d8:	4628      	mov	r0, r5
 800f9da:	47b8      	blx	r7
 800f9dc:	3001      	adds	r0, #1
 800f9de:	d10e      	bne.n	800f9fe <_printf_float+0x416>
 800f9e0:	e65d      	b.n	800f69e <_printf_float+0xb6>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	464a      	mov	r2, r9
 800f9e6:	4631      	mov	r1, r6
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	47b8      	blx	r7
 800f9ec:	3001      	adds	r0, #1
 800f9ee:	f43f ae56 	beq.w	800f69e <_printf_float+0xb6>
 800f9f2:	f108 0801 	add.w	r8, r8, #1
 800f9f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9f8:	3b01      	subs	r3, #1
 800f9fa:	4543      	cmp	r3, r8
 800f9fc:	dcf1      	bgt.n	800f9e2 <_printf_float+0x3fa>
 800f9fe:	4653      	mov	r3, sl
 800fa00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fa04:	e6e0      	b.n	800f7c8 <_printf_float+0x1e0>
 800fa06:	f04f 0800 	mov.w	r8, #0
 800fa0a:	f104 091a 	add.w	r9, r4, #26
 800fa0e:	e7f2      	b.n	800f9f6 <_printf_float+0x40e>
 800fa10:	2301      	movs	r3, #1
 800fa12:	4642      	mov	r2, r8
 800fa14:	e7df      	b.n	800f9d6 <_printf_float+0x3ee>
 800fa16:	2301      	movs	r3, #1
 800fa18:	464a      	mov	r2, r9
 800fa1a:	4631      	mov	r1, r6
 800fa1c:	4628      	mov	r0, r5
 800fa1e:	47b8      	blx	r7
 800fa20:	3001      	adds	r0, #1
 800fa22:	f43f ae3c 	beq.w	800f69e <_printf_float+0xb6>
 800fa26:	f108 0801 	add.w	r8, r8, #1
 800fa2a:	68e3      	ldr	r3, [r4, #12]
 800fa2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fa2e:	1a5b      	subs	r3, r3, r1
 800fa30:	4543      	cmp	r3, r8
 800fa32:	dcf0      	bgt.n	800fa16 <_printf_float+0x42e>
 800fa34:	e6fd      	b.n	800f832 <_printf_float+0x24a>
 800fa36:	f04f 0800 	mov.w	r8, #0
 800fa3a:	f104 0919 	add.w	r9, r4, #25
 800fa3e:	e7f4      	b.n	800fa2a <_printf_float+0x442>

0800fa40 <_printf_common>:
 800fa40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa44:	4616      	mov	r6, r2
 800fa46:	4699      	mov	r9, r3
 800fa48:	688a      	ldr	r2, [r1, #8]
 800fa4a:	690b      	ldr	r3, [r1, #16]
 800fa4c:	4607      	mov	r7, r0
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	bfb8      	it	lt
 800fa52:	4613      	movlt	r3, r2
 800fa54:	6033      	str	r3, [r6, #0]
 800fa56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa5a:	460c      	mov	r4, r1
 800fa5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa60:	b10a      	cbz	r2, 800fa66 <_printf_common+0x26>
 800fa62:	3301      	adds	r3, #1
 800fa64:	6033      	str	r3, [r6, #0]
 800fa66:	6823      	ldr	r3, [r4, #0]
 800fa68:	0699      	lsls	r1, r3, #26
 800fa6a:	bf42      	ittt	mi
 800fa6c:	6833      	ldrmi	r3, [r6, #0]
 800fa6e:	3302      	addmi	r3, #2
 800fa70:	6033      	strmi	r3, [r6, #0]
 800fa72:	6825      	ldr	r5, [r4, #0]
 800fa74:	f015 0506 	ands.w	r5, r5, #6
 800fa78:	d106      	bne.n	800fa88 <_printf_common+0x48>
 800fa7a:	f104 0a19 	add.w	sl, r4, #25
 800fa7e:	68e3      	ldr	r3, [r4, #12]
 800fa80:	6832      	ldr	r2, [r6, #0]
 800fa82:	1a9b      	subs	r3, r3, r2
 800fa84:	42ab      	cmp	r3, r5
 800fa86:	dc28      	bgt.n	800fada <_printf_common+0x9a>
 800fa88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa8c:	1e13      	subs	r3, r2, #0
 800fa8e:	6822      	ldr	r2, [r4, #0]
 800fa90:	bf18      	it	ne
 800fa92:	2301      	movne	r3, #1
 800fa94:	0692      	lsls	r2, r2, #26
 800fa96:	d42d      	bmi.n	800faf4 <_printf_common+0xb4>
 800fa98:	4649      	mov	r1, r9
 800fa9a:	4638      	mov	r0, r7
 800fa9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800faa0:	47c0      	blx	r8
 800faa2:	3001      	adds	r0, #1
 800faa4:	d020      	beq.n	800fae8 <_printf_common+0xa8>
 800faa6:	6823      	ldr	r3, [r4, #0]
 800faa8:	68e5      	ldr	r5, [r4, #12]
 800faaa:	f003 0306 	and.w	r3, r3, #6
 800faae:	2b04      	cmp	r3, #4
 800fab0:	bf18      	it	ne
 800fab2:	2500      	movne	r5, #0
 800fab4:	6832      	ldr	r2, [r6, #0]
 800fab6:	f04f 0600 	mov.w	r6, #0
 800faba:	68a3      	ldr	r3, [r4, #8]
 800fabc:	bf08      	it	eq
 800fabe:	1aad      	subeq	r5, r5, r2
 800fac0:	6922      	ldr	r2, [r4, #16]
 800fac2:	bf08      	it	eq
 800fac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fac8:	4293      	cmp	r3, r2
 800faca:	bfc4      	itt	gt
 800facc:	1a9b      	subgt	r3, r3, r2
 800face:	18ed      	addgt	r5, r5, r3
 800fad0:	341a      	adds	r4, #26
 800fad2:	42b5      	cmp	r5, r6
 800fad4:	d11a      	bne.n	800fb0c <_printf_common+0xcc>
 800fad6:	2000      	movs	r0, #0
 800fad8:	e008      	b.n	800faec <_printf_common+0xac>
 800fada:	2301      	movs	r3, #1
 800fadc:	4652      	mov	r2, sl
 800fade:	4649      	mov	r1, r9
 800fae0:	4638      	mov	r0, r7
 800fae2:	47c0      	blx	r8
 800fae4:	3001      	adds	r0, #1
 800fae6:	d103      	bne.n	800faf0 <_printf_common+0xb0>
 800fae8:	f04f 30ff 	mov.w	r0, #4294967295
 800faec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faf0:	3501      	adds	r5, #1
 800faf2:	e7c4      	b.n	800fa7e <_printf_common+0x3e>
 800faf4:	2030      	movs	r0, #48	; 0x30
 800faf6:	18e1      	adds	r1, r4, r3
 800faf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fafc:	1c5a      	adds	r2, r3, #1
 800fafe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb02:	4422      	add	r2, r4
 800fb04:	3302      	adds	r3, #2
 800fb06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb0a:	e7c5      	b.n	800fa98 <_printf_common+0x58>
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	4622      	mov	r2, r4
 800fb10:	4649      	mov	r1, r9
 800fb12:	4638      	mov	r0, r7
 800fb14:	47c0      	blx	r8
 800fb16:	3001      	adds	r0, #1
 800fb18:	d0e6      	beq.n	800fae8 <_printf_common+0xa8>
 800fb1a:	3601      	adds	r6, #1
 800fb1c:	e7d9      	b.n	800fad2 <_printf_common+0x92>
	...

0800fb20 <_printf_i>:
 800fb20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb24:	7e0f      	ldrb	r7, [r1, #24]
 800fb26:	4691      	mov	r9, r2
 800fb28:	2f78      	cmp	r7, #120	; 0x78
 800fb2a:	4680      	mov	r8, r0
 800fb2c:	460c      	mov	r4, r1
 800fb2e:	469a      	mov	sl, r3
 800fb30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fb36:	d807      	bhi.n	800fb48 <_printf_i+0x28>
 800fb38:	2f62      	cmp	r7, #98	; 0x62
 800fb3a:	d80a      	bhi.n	800fb52 <_printf_i+0x32>
 800fb3c:	2f00      	cmp	r7, #0
 800fb3e:	f000 80d9 	beq.w	800fcf4 <_printf_i+0x1d4>
 800fb42:	2f58      	cmp	r7, #88	; 0x58
 800fb44:	f000 80a4 	beq.w	800fc90 <_printf_i+0x170>
 800fb48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fb50:	e03a      	b.n	800fbc8 <_printf_i+0xa8>
 800fb52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb56:	2b15      	cmp	r3, #21
 800fb58:	d8f6      	bhi.n	800fb48 <_printf_i+0x28>
 800fb5a:	a101      	add	r1, pc, #4	; (adr r1, 800fb60 <_printf_i+0x40>)
 800fb5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb60:	0800fbb9 	.word	0x0800fbb9
 800fb64:	0800fbcd 	.word	0x0800fbcd
 800fb68:	0800fb49 	.word	0x0800fb49
 800fb6c:	0800fb49 	.word	0x0800fb49
 800fb70:	0800fb49 	.word	0x0800fb49
 800fb74:	0800fb49 	.word	0x0800fb49
 800fb78:	0800fbcd 	.word	0x0800fbcd
 800fb7c:	0800fb49 	.word	0x0800fb49
 800fb80:	0800fb49 	.word	0x0800fb49
 800fb84:	0800fb49 	.word	0x0800fb49
 800fb88:	0800fb49 	.word	0x0800fb49
 800fb8c:	0800fcdb 	.word	0x0800fcdb
 800fb90:	0800fbfd 	.word	0x0800fbfd
 800fb94:	0800fcbd 	.word	0x0800fcbd
 800fb98:	0800fb49 	.word	0x0800fb49
 800fb9c:	0800fb49 	.word	0x0800fb49
 800fba0:	0800fcfd 	.word	0x0800fcfd
 800fba4:	0800fb49 	.word	0x0800fb49
 800fba8:	0800fbfd 	.word	0x0800fbfd
 800fbac:	0800fb49 	.word	0x0800fb49
 800fbb0:	0800fb49 	.word	0x0800fb49
 800fbb4:	0800fcc5 	.word	0x0800fcc5
 800fbb8:	682b      	ldr	r3, [r5, #0]
 800fbba:	1d1a      	adds	r2, r3, #4
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	602a      	str	r2, [r5, #0]
 800fbc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fbc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fbc8:	2301      	movs	r3, #1
 800fbca:	e0a4      	b.n	800fd16 <_printf_i+0x1f6>
 800fbcc:	6820      	ldr	r0, [r4, #0]
 800fbce:	6829      	ldr	r1, [r5, #0]
 800fbd0:	0606      	lsls	r6, r0, #24
 800fbd2:	f101 0304 	add.w	r3, r1, #4
 800fbd6:	d50a      	bpl.n	800fbee <_printf_i+0xce>
 800fbd8:	680e      	ldr	r6, [r1, #0]
 800fbda:	602b      	str	r3, [r5, #0]
 800fbdc:	2e00      	cmp	r6, #0
 800fbde:	da03      	bge.n	800fbe8 <_printf_i+0xc8>
 800fbe0:	232d      	movs	r3, #45	; 0x2d
 800fbe2:	4276      	negs	r6, r6
 800fbe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbe8:	230a      	movs	r3, #10
 800fbea:	485e      	ldr	r0, [pc, #376]	; (800fd64 <_printf_i+0x244>)
 800fbec:	e019      	b.n	800fc22 <_printf_i+0x102>
 800fbee:	680e      	ldr	r6, [r1, #0]
 800fbf0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fbf4:	602b      	str	r3, [r5, #0]
 800fbf6:	bf18      	it	ne
 800fbf8:	b236      	sxthne	r6, r6
 800fbfa:	e7ef      	b.n	800fbdc <_printf_i+0xbc>
 800fbfc:	682b      	ldr	r3, [r5, #0]
 800fbfe:	6820      	ldr	r0, [r4, #0]
 800fc00:	1d19      	adds	r1, r3, #4
 800fc02:	6029      	str	r1, [r5, #0]
 800fc04:	0601      	lsls	r1, r0, #24
 800fc06:	d501      	bpl.n	800fc0c <_printf_i+0xec>
 800fc08:	681e      	ldr	r6, [r3, #0]
 800fc0a:	e002      	b.n	800fc12 <_printf_i+0xf2>
 800fc0c:	0646      	lsls	r6, r0, #25
 800fc0e:	d5fb      	bpl.n	800fc08 <_printf_i+0xe8>
 800fc10:	881e      	ldrh	r6, [r3, #0]
 800fc12:	2f6f      	cmp	r7, #111	; 0x6f
 800fc14:	bf0c      	ite	eq
 800fc16:	2308      	moveq	r3, #8
 800fc18:	230a      	movne	r3, #10
 800fc1a:	4852      	ldr	r0, [pc, #328]	; (800fd64 <_printf_i+0x244>)
 800fc1c:	2100      	movs	r1, #0
 800fc1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc22:	6865      	ldr	r5, [r4, #4]
 800fc24:	2d00      	cmp	r5, #0
 800fc26:	bfa8      	it	ge
 800fc28:	6821      	ldrge	r1, [r4, #0]
 800fc2a:	60a5      	str	r5, [r4, #8]
 800fc2c:	bfa4      	itt	ge
 800fc2e:	f021 0104 	bicge.w	r1, r1, #4
 800fc32:	6021      	strge	r1, [r4, #0]
 800fc34:	b90e      	cbnz	r6, 800fc3a <_printf_i+0x11a>
 800fc36:	2d00      	cmp	r5, #0
 800fc38:	d04d      	beq.n	800fcd6 <_printf_i+0x1b6>
 800fc3a:	4615      	mov	r5, r2
 800fc3c:	fbb6 f1f3 	udiv	r1, r6, r3
 800fc40:	fb03 6711 	mls	r7, r3, r1, r6
 800fc44:	5dc7      	ldrb	r7, [r0, r7]
 800fc46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fc4a:	4637      	mov	r7, r6
 800fc4c:	42bb      	cmp	r3, r7
 800fc4e:	460e      	mov	r6, r1
 800fc50:	d9f4      	bls.n	800fc3c <_printf_i+0x11c>
 800fc52:	2b08      	cmp	r3, #8
 800fc54:	d10b      	bne.n	800fc6e <_printf_i+0x14e>
 800fc56:	6823      	ldr	r3, [r4, #0]
 800fc58:	07de      	lsls	r6, r3, #31
 800fc5a:	d508      	bpl.n	800fc6e <_printf_i+0x14e>
 800fc5c:	6923      	ldr	r3, [r4, #16]
 800fc5e:	6861      	ldr	r1, [r4, #4]
 800fc60:	4299      	cmp	r1, r3
 800fc62:	bfde      	ittt	le
 800fc64:	2330      	movle	r3, #48	; 0x30
 800fc66:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc6e:	1b52      	subs	r2, r2, r5
 800fc70:	6122      	str	r2, [r4, #16]
 800fc72:	464b      	mov	r3, r9
 800fc74:	4621      	mov	r1, r4
 800fc76:	4640      	mov	r0, r8
 800fc78:	f8cd a000 	str.w	sl, [sp]
 800fc7c:	aa03      	add	r2, sp, #12
 800fc7e:	f7ff fedf 	bl	800fa40 <_printf_common>
 800fc82:	3001      	adds	r0, #1
 800fc84:	d14c      	bne.n	800fd20 <_printf_i+0x200>
 800fc86:	f04f 30ff 	mov.w	r0, #4294967295
 800fc8a:	b004      	add	sp, #16
 800fc8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc90:	4834      	ldr	r0, [pc, #208]	; (800fd64 <_printf_i+0x244>)
 800fc92:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fc96:	6829      	ldr	r1, [r5, #0]
 800fc98:	6823      	ldr	r3, [r4, #0]
 800fc9a:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc9e:	6029      	str	r1, [r5, #0]
 800fca0:	061d      	lsls	r5, r3, #24
 800fca2:	d514      	bpl.n	800fcce <_printf_i+0x1ae>
 800fca4:	07df      	lsls	r7, r3, #31
 800fca6:	bf44      	itt	mi
 800fca8:	f043 0320 	orrmi.w	r3, r3, #32
 800fcac:	6023      	strmi	r3, [r4, #0]
 800fcae:	b91e      	cbnz	r6, 800fcb8 <_printf_i+0x198>
 800fcb0:	6823      	ldr	r3, [r4, #0]
 800fcb2:	f023 0320 	bic.w	r3, r3, #32
 800fcb6:	6023      	str	r3, [r4, #0]
 800fcb8:	2310      	movs	r3, #16
 800fcba:	e7af      	b.n	800fc1c <_printf_i+0xfc>
 800fcbc:	6823      	ldr	r3, [r4, #0]
 800fcbe:	f043 0320 	orr.w	r3, r3, #32
 800fcc2:	6023      	str	r3, [r4, #0]
 800fcc4:	2378      	movs	r3, #120	; 0x78
 800fcc6:	4828      	ldr	r0, [pc, #160]	; (800fd68 <_printf_i+0x248>)
 800fcc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fccc:	e7e3      	b.n	800fc96 <_printf_i+0x176>
 800fcce:	0659      	lsls	r1, r3, #25
 800fcd0:	bf48      	it	mi
 800fcd2:	b2b6      	uxthmi	r6, r6
 800fcd4:	e7e6      	b.n	800fca4 <_printf_i+0x184>
 800fcd6:	4615      	mov	r5, r2
 800fcd8:	e7bb      	b.n	800fc52 <_printf_i+0x132>
 800fcda:	682b      	ldr	r3, [r5, #0]
 800fcdc:	6826      	ldr	r6, [r4, #0]
 800fcde:	1d18      	adds	r0, r3, #4
 800fce0:	6961      	ldr	r1, [r4, #20]
 800fce2:	6028      	str	r0, [r5, #0]
 800fce4:	0635      	lsls	r5, r6, #24
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	d501      	bpl.n	800fcee <_printf_i+0x1ce>
 800fcea:	6019      	str	r1, [r3, #0]
 800fcec:	e002      	b.n	800fcf4 <_printf_i+0x1d4>
 800fcee:	0670      	lsls	r0, r6, #25
 800fcf0:	d5fb      	bpl.n	800fcea <_printf_i+0x1ca>
 800fcf2:	8019      	strh	r1, [r3, #0]
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	4615      	mov	r5, r2
 800fcf8:	6123      	str	r3, [r4, #16]
 800fcfa:	e7ba      	b.n	800fc72 <_printf_i+0x152>
 800fcfc:	682b      	ldr	r3, [r5, #0]
 800fcfe:	2100      	movs	r1, #0
 800fd00:	1d1a      	adds	r2, r3, #4
 800fd02:	602a      	str	r2, [r5, #0]
 800fd04:	681d      	ldr	r5, [r3, #0]
 800fd06:	6862      	ldr	r2, [r4, #4]
 800fd08:	4628      	mov	r0, r5
 800fd0a:	f001 fa0f 	bl	801112c <memchr>
 800fd0e:	b108      	cbz	r0, 800fd14 <_printf_i+0x1f4>
 800fd10:	1b40      	subs	r0, r0, r5
 800fd12:	6060      	str	r0, [r4, #4]
 800fd14:	6863      	ldr	r3, [r4, #4]
 800fd16:	6123      	str	r3, [r4, #16]
 800fd18:	2300      	movs	r3, #0
 800fd1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd1e:	e7a8      	b.n	800fc72 <_printf_i+0x152>
 800fd20:	462a      	mov	r2, r5
 800fd22:	4649      	mov	r1, r9
 800fd24:	4640      	mov	r0, r8
 800fd26:	6923      	ldr	r3, [r4, #16]
 800fd28:	47d0      	blx	sl
 800fd2a:	3001      	adds	r0, #1
 800fd2c:	d0ab      	beq.n	800fc86 <_printf_i+0x166>
 800fd2e:	6823      	ldr	r3, [r4, #0]
 800fd30:	079b      	lsls	r3, r3, #30
 800fd32:	d413      	bmi.n	800fd5c <_printf_i+0x23c>
 800fd34:	68e0      	ldr	r0, [r4, #12]
 800fd36:	9b03      	ldr	r3, [sp, #12]
 800fd38:	4298      	cmp	r0, r3
 800fd3a:	bfb8      	it	lt
 800fd3c:	4618      	movlt	r0, r3
 800fd3e:	e7a4      	b.n	800fc8a <_printf_i+0x16a>
 800fd40:	2301      	movs	r3, #1
 800fd42:	4632      	mov	r2, r6
 800fd44:	4649      	mov	r1, r9
 800fd46:	4640      	mov	r0, r8
 800fd48:	47d0      	blx	sl
 800fd4a:	3001      	adds	r0, #1
 800fd4c:	d09b      	beq.n	800fc86 <_printf_i+0x166>
 800fd4e:	3501      	adds	r5, #1
 800fd50:	68e3      	ldr	r3, [r4, #12]
 800fd52:	9903      	ldr	r1, [sp, #12]
 800fd54:	1a5b      	subs	r3, r3, r1
 800fd56:	42ab      	cmp	r3, r5
 800fd58:	dcf2      	bgt.n	800fd40 <_printf_i+0x220>
 800fd5a:	e7eb      	b.n	800fd34 <_printf_i+0x214>
 800fd5c:	2500      	movs	r5, #0
 800fd5e:	f104 0619 	add.w	r6, r4, #25
 800fd62:	e7f5      	b.n	800fd50 <_printf_i+0x230>
 800fd64:	0801498b 	.word	0x0801498b
 800fd68:	0801499c 	.word	0x0801499c

0800fd6c <iprintf>:
 800fd6c:	b40f      	push	{r0, r1, r2, r3}
 800fd6e:	4b0a      	ldr	r3, [pc, #40]	; (800fd98 <iprintf+0x2c>)
 800fd70:	b513      	push	{r0, r1, r4, lr}
 800fd72:	681c      	ldr	r4, [r3, #0]
 800fd74:	b124      	cbz	r4, 800fd80 <iprintf+0x14>
 800fd76:	69a3      	ldr	r3, [r4, #24]
 800fd78:	b913      	cbnz	r3, 800fd80 <iprintf+0x14>
 800fd7a:	4620      	mov	r0, r4
 800fd7c:	f001 f8c4 	bl	8010f08 <__sinit>
 800fd80:	ab05      	add	r3, sp, #20
 800fd82:	4620      	mov	r0, r4
 800fd84:	9a04      	ldr	r2, [sp, #16]
 800fd86:	68a1      	ldr	r1, [r4, #8]
 800fd88:	9301      	str	r3, [sp, #4]
 800fd8a:	f7ff fa5f 	bl	800f24c <_vfiprintf_r>
 800fd8e:	b002      	add	sp, #8
 800fd90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd94:	b004      	add	sp, #16
 800fd96:	4770      	bx	lr
 800fd98:	20000064 	.word	0x20000064

0800fd9c <putchar>:
 800fd9c:	b538      	push	{r3, r4, r5, lr}
 800fd9e:	4b08      	ldr	r3, [pc, #32]	; (800fdc0 <putchar+0x24>)
 800fda0:	4605      	mov	r5, r0
 800fda2:	681c      	ldr	r4, [r3, #0]
 800fda4:	b124      	cbz	r4, 800fdb0 <putchar+0x14>
 800fda6:	69a3      	ldr	r3, [r4, #24]
 800fda8:	b913      	cbnz	r3, 800fdb0 <putchar+0x14>
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f001 f8ac 	bl	8010f08 <__sinit>
 800fdb0:	4629      	mov	r1, r5
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	68a2      	ldr	r2, [r4, #8]
 800fdb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdba:	f001 bfdb 	b.w	8011d74 <_putc_r>
 800fdbe:	bf00      	nop
 800fdc0:	20000064 	.word	0x20000064

0800fdc4 <sniprintf>:
 800fdc4:	b40c      	push	{r2, r3}
 800fdc6:	b530      	push	{r4, r5, lr}
 800fdc8:	4b17      	ldr	r3, [pc, #92]	; (800fe28 <sniprintf+0x64>)
 800fdca:	1e0c      	subs	r4, r1, #0
 800fdcc:	681d      	ldr	r5, [r3, #0]
 800fdce:	b09d      	sub	sp, #116	; 0x74
 800fdd0:	da08      	bge.n	800fde4 <sniprintf+0x20>
 800fdd2:	238b      	movs	r3, #139	; 0x8b
 800fdd4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd8:	602b      	str	r3, [r5, #0]
 800fdda:	b01d      	add	sp, #116	; 0x74
 800fddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fde0:	b002      	add	sp, #8
 800fde2:	4770      	bx	lr
 800fde4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fde8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fdec:	bf0c      	ite	eq
 800fdee:	4623      	moveq	r3, r4
 800fdf0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fdf4:	9304      	str	r3, [sp, #16]
 800fdf6:	9307      	str	r3, [sp, #28]
 800fdf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdfc:	9002      	str	r0, [sp, #8]
 800fdfe:	9006      	str	r0, [sp, #24]
 800fe00:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fe04:	4628      	mov	r0, r5
 800fe06:	ab21      	add	r3, sp, #132	; 0x84
 800fe08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fe0a:	a902      	add	r1, sp, #8
 800fe0c:	9301      	str	r3, [sp, #4]
 800fe0e:	f001 feb1 	bl	8011b74 <_svfiprintf_r>
 800fe12:	1c43      	adds	r3, r0, #1
 800fe14:	bfbc      	itt	lt
 800fe16:	238b      	movlt	r3, #139	; 0x8b
 800fe18:	602b      	strlt	r3, [r5, #0]
 800fe1a:	2c00      	cmp	r4, #0
 800fe1c:	d0dd      	beq.n	800fdda <sniprintf+0x16>
 800fe1e:	2200      	movs	r2, #0
 800fe20:	9b02      	ldr	r3, [sp, #8]
 800fe22:	701a      	strb	r2, [r3, #0]
 800fe24:	e7d9      	b.n	800fdda <sniprintf+0x16>
 800fe26:	bf00      	nop
 800fe28:	20000064 	.word	0x20000064

0800fe2c <strcpy>:
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe32:	f803 2b01 	strb.w	r2, [r3], #1
 800fe36:	2a00      	cmp	r2, #0
 800fe38:	d1f9      	bne.n	800fe2e <strcpy+0x2>
 800fe3a:	4770      	bx	lr

0800fe3c <strnlen>:
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	b510      	push	{r4, lr}
 800fe40:	4401      	add	r1, r0
 800fe42:	428a      	cmp	r2, r1
 800fe44:	4613      	mov	r3, r2
 800fe46:	d003      	beq.n	800fe50 <strnlen+0x14>
 800fe48:	781c      	ldrb	r4, [r3, #0]
 800fe4a:	3201      	adds	r2, #1
 800fe4c:	2c00      	cmp	r4, #0
 800fe4e:	d1f8      	bne.n	800fe42 <strnlen+0x6>
 800fe50:	1a18      	subs	r0, r3, r0
 800fe52:	bd10      	pop	{r4, pc}

0800fe54 <__swbuf_r>:
 800fe54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe56:	460e      	mov	r6, r1
 800fe58:	4614      	mov	r4, r2
 800fe5a:	4605      	mov	r5, r0
 800fe5c:	b118      	cbz	r0, 800fe66 <__swbuf_r+0x12>
 800fe5e:	6983      	ldr	r3, [r0, #24]
 800fe60:	b90b      	cbnz	r3, 800fe66 <__swbuf_r+0x12>
 800fe62:	f001 f851 	bl	8010f08 <__sinit>
 800fe66:	4b21      	ldr	r3, [pc, #132]	; (800feec <__swbuf_r+0x98>)
 800fe68:	429c      	cmp	r4, r3
 800fe6a:	d12b      	bne.n	800fec4 <__swbuf_r+0x70>
 800fe6c:	686c      	ldr	r4, [r5, #4]
 800fe6e:	69a3      	ldr	r3, [r4, #24]
 800fe70:	60a3      	str	r3, [r4, #8]
 800fe72:	89a3      	ldrh	r3, [r4, #12]
 800fe74:	071a      	lsls	r2, r3, #28
 800fe76:	d52f      	bpl.n	800fed8 <__swbuf_r+0x84>
 800fe78:	6923      	ldr	r3, [r4, #16]
 800fe7a:	b36b      	cbz	r3, 800fed8 <__swbuf_r+0x84>
 800fe7c:	6923      	ldr	r3, [r4, #16]
 800fe7e:	6820      	ldr	r0, [r4, #0]
 800fe80:	b2f6      	uxtb	r6, r6
 800fe82:	1ac0      	subs	r0, r0, r3
 800fe84:	6963      	ldr	r3, [r4, #20]
 800fe86:	4637      	mov	r7, r6
 800fe88:	4283      	cmp	r3, r0
 800fe8a:	dc04      	bgt.n	800fe96 <__swbuf_r+0x42>
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	4628      	mov	r0, r5
 800fe90:	f000 ffa6 	bl	8010de0 <_fflush_r>
 800fe94:	bb30      	cbnz	r0, 800fee4 <__swbuf_r+0x90>
 800fe96:	68a3      	ldr	r3, [r4, #8]
 800fe98:	3001      	adds	r0, #1
 800fe9a:	3b01      	subs	r3, #1
 800fe9c:	60a3      	str	r3, [r4, #8]
 800fe9e:	6823      	ldr	r3, [r4, #0]
 800fea0:	1c5a      	adds	r2, r3, #1
 800fea2:	6022      	str	r2, [r4, #0]
 800fea4:	701e      	strb	r6, [r3, #0]
 800fea6:	6963      	ldr	r3, [r4, #20]
 800fea8:	4283      	cmp	r3, r0
 800feaa:	d004      	beq.n	800feb6 <__swbuf_r+0x62>
 800feac:	89a3      	ldrh	r3, [r4, #12]
 800feae:	07db      	lsls	r3, r3, #31
 800feb0:	d506      	bpl.n	800fec0 <__swbuf_r+0x6c>
 800feb2:	2e0a      	cmp	r6, #10
 800feb4:	d104      	bne.n	800fec0 <__swbuf_r+0x6c>
 800feb6:	4621      	mov	r1, r4
 800feb8:	4628      	mov	r0, r5
 800feba:	f000 ff91 	bl	8010de0 <_fflush_r>
 800febe:	b988      	cbnz	r0, 800fee4 <__swbuf_r+0x90>
 800fec0:	4638      	mov	r0, r7
 800fec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fec4:	4b0a      	ldr	r3, [pc, #40]	; (800fef0 <__swbuf_r+0x9c>)
 800fec6:	429c      	cmp	r4, r3
 800fec8:	d101      	bne.n	800fece <__swbuf_r+0x7a>
 800feca:	68ac      	ldr	r4, [r5, #8]
 800fecc:	e7cf      	b.n	800fe6e <__swbuf_r+0x1a>
 800fece:	4b09      	ldr	r3, [pc, #36]	; (800fef4 <__swbuf_r+0xa0>)
 800fed0:	429c      	cmp	r4, r3
 800fed2:	bf08      	it	eq
 800fed4:	68ec      	ldreq	r4, [r5, #12]
 800fed6:	e7ca      	b.n	800fe6e <__swbuf_r+0x1a>
 800fed8:	4621      	mov	r1, r4
 800feda:	4628      	mov	r0, r5
 800fedc:	f000 f80c 	bl	800fef8 <__swsetup_r>
 800fee0:	2800      	cmp	r0, #0
 800fee2:	d0cb      	beq.n	800fe7c <__swbuf_r+0x28>
 800fee4:	f04f 37ff 	mov.w	r7, #4294967295
 800fee8:	e7ea      	b.n	800fec0 <__swbuf_r+0x6c>
 800feea:	bf00      	nop
 800feec:	08014a60 	.word	0x08014a60
 800fef0:	08014a80 	.word	0x08014a80
 800fef4:	08014a40 	.word	0x08014a40

0800fef8 <__swsetup_r>:
 800fef8:	4b32      	ldr	r3, [pc, #200]	; (800ffc4 <__swsetup_r+0xcc>)
 800fefa:	b570      	push	{r4, r5, r6, lr}
 800fefc:	681d      	ldr	r5, [r3, #0]
 800fefe:	4606      	mov	r6, r0
 800ff00:	460c      	mov	r4, r1
 800ff02:	b125      	cbz	r5, 800ff0e <__swsetup_r+0x16>
 800ff04:	69ab      	ldr	r3, [r5, #24]
 800ff06:	b913      	cbnz	r3, 800ff0e <__swsetup_r+0x16>
 800ff08:	4628      	mov	r0, r5
 800ff0a:	f000 fffd 	bl	8010f08 <__sinit>
 800ff0e:	4b2e      	ldr	r3, [pc, #184]	; (800ffc8 <__swsetup_r+0xd0>)
 800ff10:	429c      	cmp	r4, r3
 800ff12:	d10f      	bne.n	800ff34 <__swsetup_r+0x3c>
 800ff14:	686c      	ldr	r4, [r5, #4]
 800ff16:	89a3      	ldrh	r3, [r4, #12]
 800ff18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff1c:	0719      	lsls	r1, r3, #28
 800ff1e:	d42c      	bmi.n	800ff7a <__swsetup_r+0x82>
 800ff20:	06dd      	lsls	r5, r3, #27
 800ff22:	d411      	bmi.n	800ff48 <__swsetup_r+0x50>
 800ff24:	2309      	movs	r3, #9
 800ff26:	6033      	str	r3, [r6, #0]
 800ff28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ff2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff30:	81a3      	strh	r3, [r4, #12]
 800ff32:	e03e      	b.n	800ffb2 <__swsetup_r+0xba>
 800ff34:	4b25      	ldr	r3, [pc, #148]	; (800ffcc <__swsetup_r+0xd4>)
 800ff36:	429c      	cmp	r4, r3
 800ff38:	d101      	bne.n	800ff3e <__swsetup_r+0x46>
 800ff3a:	68ac      	ldr	r4, [r5, #8]
 800ff3c:	e7eb      	b.n	800ff16 <__swsetup_r+0x1e>
 800ff3e:	4b24      	ldr	r3, [pc, #144]	; (800ffd0 <__swsetup_r+0xd8>)
 800ff40:	429c      	cmp	r4, r3
 800ff42:	bf08      	it	eq
 800ff44:	68ec      	ldreq	r4, [r5, #12]
 800ff46:	e7e6      	b.n	800ff16 <__swsetup_r+0x1e>
 800ff48:	0758      	lsls	r0, r3, #29
 800ff4a:	d512      	bpl.n	800ff72 <__swsetup_r+0x7a>
 800ff4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff4e:	b141      	cbz	r1, 800ff62 <__swsetup_r+0x6a>
 800ff50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff54:	4299      	cmp	r1, r3
 800ff56:	d002      	beq.n	800ff5e <__swsetup_r+0x66>
 800ff58:	4630      	mov	r0, r6
 800ff5a:	f001 fca5 	bl	80118a8 <_free_r>
 800ff5e:	2300      	movs	r3, #0
 800ff60:	6363      	str	r3, [r4, #52]	; 0x34
 800ff62:	89a3      	ldrh	r3, [r4, #12]
 800ff64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ff68:	81a3      	strh	r3, [r4, #12]
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	6063      	str	r3, [r4, #4]
 800ff6e:	6923      	ldr	r3, [r4, #16]
 800ff70:	6023      	str	r3, [r4, #0]
 800ff72:	89a3      	ldrh	r3, [r4, #12]
 800ff74:	f043 0308 	orr.w	r3, r3, #8
 800ff78:	81a3      	strh	r3, [r4, #12]
 800ff7a:	6923      	ldr	r3, [r4, #16]
 800ff7c:	b94b      	cbnz	r3, 800ff92 <__swsetup_r+0x9a>
 800ff7e:	89a3      	ldrh	r3, [r4, #12]
 800ff80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ff84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff88:	d003      	beq.n	800ff92 <__swsetup_r+0x9a>
 800ff8a:	4621      	mov	r1, r4
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	f001 f885 	bl	801109c <__smakebuf_r>
 800ff92:	89a0      	ldrh	r0, [r4, #12]
 800ff94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff98:	f010 0301 	ands.w	r3, r0, #1
 800ff9c:	d00a      	beq.n	800ffb4 <__swsetup_r+0xbc>
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	60a3      	str	r3, [r4, #8]
 800ffa2:	6963      	ldr	r3, [r4, #20]
 800ffa4:	425b      	negs	r3, r3
 800ffa6:	61a3      	str	r3, [r4, #24]
 800ffa8:	6923      	ldr	r3, [r4, #16]
 800ffaa:	b943      	cbnz	r3, 800ffbe <__swsetup_r+0xc6>
 800ffac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ffb0:	d1ba      	bne.n	800ff28 <__swsetup_r+0x30>
 800ffb2:	bd70      	pop	{r4, r5, r6, pc}
 800ffb4:	0781      	lsls	r1, r0, #30
 800ffb6:	bf58      	it	pl
 800ffb8:	6963      	ldrpl	r3, [r4, #20]
 800ffba:	60a3      	str	r3, [r4, #8]
 800ffbc:	e7f4      	b.n	800ffa8 <__swsetup_r+0xb0>
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	e7f7      	b.n	800ffb2 <__swsetup_r+0xba>
 800ffc2:	bf00      	nop
 800ffc4:	20000064 	.word	0x20000064
 800ffc8:	08014a60 	.word	0x08014a60
 800ffcc:	08014a80 	.word	0x08014a80
 800ffd0:	08014a40 	.word	0x08014a40

0800ffd4 <abort>:
 800ffd4:	2006      	movs	r0, #6
 800ffd6:	b508      	push	{r3, lr}
 800ffd8:	f001 ff4c 	bl	8011e74 <raise>
 800ffdc:	2001      	movs	r0, #1
 800ffde:	f7f5 fc96 	bl	800590e <_exit>

0800ffe2 <quorem>:
 800ffe2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe6:	6903      	ldr	r3, [r0, #16]
 800ffe8:	690c      	ldr	r4, [r1, #16]
 800ffea:	4607      	mov	r7, r0
 800ffec:	42a3      	cmp	r3, r4
 800ffee:	f2c0 8082 	blt.w	80100f6 <quorem+0x114>
 800fff2:	3c01      	subs	r4, #1
 800fff4:	f100 0514 	add.w	r5, r0, #20
 800fff8:	f101 0814 	add.w	r8, r1, #20
 800fffc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010000:	9301      	str	r3, [sp, #4]
 8010002:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010006:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801000a:	3301      	adds	r3, #1
 801000c:	429a      	cmp	r2, r3
 801000e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010012:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010016:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801001a:	d331      	bcc.n	8010080 <quorem+0x9e>
 801001c:	f04f 0e00 	mov.w	lr, #0
 8010020:	4640      	mov	r0, r8
 8010022:	46ac      	mov	ip, r5
 8010024:	46f2      	mov	sl, lr
 8010026:	f850 2b04 	ldr.w	r2, [r0], #4
 801002a:	b293      	uxth	r3, r2
 801002c:	fb06 e303 	mla	r3, r6, r3, lr
 8010030:	0c12      	lsrs	r2, r2, #16
 8010032:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010036:	b29b      	uxth	r3, r3
 8010038:	fb06 e202 	mla	r2, r6, r2, lr
 801003c:	ebaa 0303 	sub.w	r3, sl, r3
 8010040:	f8dc a000 	ldr.w	sl, [ip]
 8010044:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010048:	fa1f fa8a 	uxth.w	sl, sl
 801004c:	4453      	add	r3, sl
 801004e:	f8dc a000 	ldr.w	sl, [ip]
 8010052:	b292      	uxth	r2, r2
 8010054:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010058:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801005c:	b29b      	uxth	r3, r3
 801005e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010062:	4581      	cmp	r9, r0
 8010064:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010068:	f84c 3b04 	str.w	r3, [ip], #4
 801006c:	d2db      	bcs.n	8010026 <quorem+0x44>
 801006e:	f855 300b 	ldr.w	r3, [r5, fp]
 8010072:	b92b      	cbnz	r3, 8010080 <quorem+0x9e>
 8010074:	9b01      	ldr	r3, [sp, #4]
 8010076:	3b04      	subs	r3, #4
 8010078:	429d      	cmp	r5, r3
 801007a:	461a      	mov	r2, r3
 801007c:	d32f      	bcc.n	80100de <quorem+0xfc>
 801007e:	613c      	str	r4, [r7, #16]
 8010080:	4638      	mov	r0, r7
 8010082:	f001 faf9 	bl	8011678 <__mcmp>
 8010086:	2800      	cmp	r0, #0
 8010088:	db25      	blt.n	80100d6 <quorem+0xf4>
 801008a:	4628      	mov	r0, r5
 801008c:	f04f 0c00 	mov.w	ip, #0
 8010090:	3601      	adds	r6, #1
 8010092:	f858 1b04 	ldr.w	r1, [r8], #4
 8010096:	f8d0 e000 	ldr.w	lr, [r0]
 801009a:	b28b      	uxth	r3, r1
 801009c:	ebac 0303 	sub.w	r3, ip, r3
 80100a0:	fa1f f28e 	uxth.w	r2, lr
 80100a4:	4413      	add	r3, r2
 80100a6:	0c0a      	lsrs	r2, r1, #16
 80100a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80100ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100b6:	45c1      	cmp	r9, r8
 80100b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80100bc:	f840 3b04 	str.w	r3, [r0], #4
 80100c0:	d2e7      	bcs.n	8010092 <quorem+0xb0>
 80100c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100ca:	b922      	cbnz	r2, 80100d6 <quorem+0xf4>
 80100cc:	3b04      	subs	r3, #4
 80100ce:	429d      	cmp	r5, r3
 80100d0:	461a      	mov	r2, r3
 80100d2:	d30a      	bcc.n	80100ea <quorem+0x108>
 80100d4:	613c      	str	r4, [r7, #16]
 80100d6:	4630      	mov	r0, r6
 80100d8:	b003      	add	sp, #12
 80100da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100de:	6812      	ldr	r2, [r2, #0]
 80100e0:	3b04      	subs	r3, #4
 80100e2:	2a00      	cmp	r2, #0
 80100e4:	d1cb      	bne.n	801007e <quorem+0x9c>
 80100e6:	3c01      	subs	r4, #1
 80100e8:	e7c6      	b.n	8010078 <quorem+0x96>
 80100ea:	6812      	ldr	r2, [r2, #0]
 80100ec:	3b04      	subs	r3, #4
 80100ee:	2a00      	cmp	r2, #0
 80100f0:	d1f0      	bne.n	80100d4 <quorem+0xf2>
 80100f2:	3c01      	subs	r4, #1
 80100f4:	e7eb      	b.n	80100ce <quorem+0xec>
 80100f6:	2000      	movs	r0, #0
 80100f8:	e7ee      	b.n	80100d8 <quorem+0xf6>
 80100fa:	0000      	movs	r0, r0
 80100fc:	0000      	movs	r0, r0
	...

08010100 <_dtoa_r>:
 8010100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010104:	4616      	mov	r6, r2
 8010106:	461f      	mov	r7, r3
 8010108:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801010a:	b099      	sub	sp, #100	; 0x64
 801010c:	4605      	mov	r5, r0
 801010e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010112:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8010116:	b974      	cbnz	r4, 8010136 <_dtoa_r+0x36>
 8010118:	2010      	movs	r0, #16
 801011a:	f000 ffff 	bl	801111c <malloc>
 801011e:	4602      	mov	r2, r0
 8010120:	6268      	str	r0, [r5, #36]	; 0x24
 8010122:	b920      	cbnz	r0, 801012e <_dtoa_r+0x2e>
 8010124:	21ea      	movs	r1, #234	; 0xea
 8010126:	4ba8      	ldr	r3, [pc, #672]	; (80103c8 <_dtoa_r+0x2c8>)
 8010128:	48a8      	ldr	r0, [pc, #672]	; (80103cc <_dtoa_r+0x2cc>)
 801012a:	f7fe fff7 	bl	800f11c <__assert_func>
 801012e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010132:	6004      	str	r4, [r0, #0]
 8010134:	60c4      	str	r4, [r0, #12]
 8010136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010138:	6819      	ldr	r1, [r3, #0]
 801013a:	b151      	cbz	r1, 8010152 <_dtoa_r+0x52>
 801013c:	685a      	ldr	r2, [r3, #4]
 801013e:	2301      	movs	r3, #1
 8010140:	4093      	lsls	r3, r2
 8010142:	604a      	str	r2, [r1, #4]
 8010144:	608b      	str	r3, [r1, #8]
 8010146:	4628      	mov	r0, r5
 8010148:	f001 f858 	bl	80111fc <_Bfree>
 801014c:	2200      	movs	r2, #0
 801014e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010150:	601a      	str	r2, [r3, #0]
 8010152:	1e3b      	subs	r3, r7, #0
 8010154:	bfaf      	iteee	ge
 8010156:	2300      	movge	r3, #0
 8010158:	2201      	movlt	r2, #1
 801015a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801015e:	9305      	strlt	r3, [sp, #20]
 8010160:	bfa8      	it	ge
 8010162:	f8c8 3000 	strge.w	r3, [r8]
 8010166:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801016a:	4b99      	ldr	r3, [pc, #612]	; (80103d0 <_dtoa_r+0x2d0>)
 801016c:	bfb8      	it	lt
 801016e:	f8c8 2000 	strlt.w	r2, [r8]
 8010172:	ea33 0309 	bics.w	r3, r3, r9
 8010176:	d119      	bne.n	80101ac <_dtoa_r+0xac>
 8010178:	f242 730f 	movw	r3, #9999	; 0x270f
 801017c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801017e:	6013      	str	r3, [r2, #0]
 8010180:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010184:	4333      	orrs	r3, r6
 8010186:	f000 857f 	beq.w	8010c88 <_dtoa_r+0xb88>
 801018a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801018c:	b953      	cbnz	r3, 80101a4 <_dtoa_r+0xa4>
 801018e:	4b91      	ldr	r3, [pc, #580]	; (80103d4 <_dtoa_r+0x2d4>)
 8010190:	e022      	b.n	80101d8 <_dtoa_r+0xd8>
 8010192:	4b91      	ldr	r3, [pc, #580]	; (80103d8 <_dtoa_r+0x2d8>)
 8010194:	9303      	str	r3, [sp, #12]
 8010196:	3308      	adds	r3, #8
 8010198:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801019a:	6013      	str	r3, [r2, #0]
 801019c:	9803      	ldr	r0, [sp, #12]
 801019e:	b019      	add	sp, #100	; 0x64
 80101a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a4:	4b8b      	ldr	r3, [pc, #556]	; (80103d4 <_dtoa_r+0x2d4>)
 80101a6:	9303      	str	r3, [sp, #12]
 80101a8:	3303      	adds	r3, #3
 80101aa:	e7f5      	b.n	8010198 <_dtoa_r+0x98>
 80101ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80101b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80101b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80101b8:	2200      	movs	r2, #0
 80101ba:	2300      	movs	r3, #0
 80101bc:	f7f0 fc6e 	bl	8000a9c <__aeabi_dcmpeq>
 80101c0:	4680      	mov	r8, r0
 80101c2:	b158      	cbz	r0, 80101dc <_dtoa_r+0xdc>
 80101c4:	2301      	movs	r3, #1
 80101c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80101c8:	6013      	str	r3, [r2, #0]
 80101ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	f000 8558 	beq.w	8010c82 <_dtoa_r+0xb82>
 80101d2:	4882      	ldr	r0, [pc, #520]	; (80103dc <_dtoa_r+0x2dc>)
 80101d4:	6018      	str	r0, [r3, #0]
 80101d6:	1e43      	subs	r3, r0, #1
 80101d8:	9303      	str	r3, [sp, #12]
 80101da:	e7df      	b.n	801019c <_dtoa_r+0x9c>
 80101dc:	ab16      	add	r3, sp, #88	; 0x58
 80101de:	9301      	str	r3, [sp, #4]
 80101e0:	ab17      	add	r3, sp, #92	; 0x5c
 80101e2:	9300      	str	r3, [sp, #0]
 80101e4:	4628      	mov	r0, r5
 80101e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80101ea:	f001 faed 	bl	80117c8 <__d2b>
 80101ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80101f2:	4683      	mov	fp, r0
 80101f4:	2c00      	cmp	r4, #0
 80101f6:	d07f      	beq.n	80102f8 <_dtoa_r+0x1f8>
 80101f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80101fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8010202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010206:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801020a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801020e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8010212:	2200      	movs	r2, #0
 8010214:	4b72      	ldr	r3, [pc, #456]	; (80103e0 <_dtoa_r+0x2e0>)
 8010216:	f7f0 f821 	bl	800025c <__aeabi_dsub>
 801021a:	a365      	add	r3, pc, #404	; (adr r3, 80103b0 <_dtoa_r+0x2b0>)
 801021c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010220:	f7f0 f9d4 	bl	80005cc <__aeabi_dmul>
 8010224:	a364      	add	r3, pc, #400	; (adr r3, 80103b8 <_dtoa_r+0x2b8>)
 8010226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022a:	f7f0 f819 	bl	8000260 <__adddf3>
 801022e:	4606      	mov	r6, r0
 8010230:	4620      	mov	r0, r4
 8010232:	460f      	mov	r7, r1
 8010234:	f7f0 f960 	bl	80004f8 <__aeabi_i2d>
 8010238:	a361      	add	r3, pc, #388	; (adr r3, 80103c0 <_dtoa_r+0x2c0>)
 801023a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023e:	f7f0 f9c5 	bl	80005cc <__aeabi_dmul>
 8010242:	4602      	mov	r2, r0
 8010244:	460b      	mov	r3, r1
 8010246:	4630      	mov	r0, r6
 8010248:	4639      	mov	r1, r7
 801024a:	f7f0 f809 	bl	8000260 <__adddf3>
 801024e:	4606      	mov	r6, r0
 8010250:	460f      	mov	r7, r1
 8010252:	f7f0 fc6b 	bl	8000b2c <__aeabi_d2iz>
 8010256:	2200      	movs	r2, #0
 8010258:	4682      	mov	sl, r0
 801025a:	2300      	movs	r3, #0
 801025c:	4630      	mov	r0, r6
 801025e:	4639      	mov	r1, r7
 8010260:	f7f0 fc26 	bl	8000ab0 <__aeabi_dcmplt>
 8010264:	b148      	cbz	r0, 801027a <_dtoa_r+0x17a>
 8010266:	4650      	mov	r0, sl
 8010268:	f7f0 f946 	bl	80004f8 <__aeabi_i2d>
 801026c:	4632      	mov	r2, r6
 801026e:	463b      	mov	r3, r7
 8010270:	f7f0 fc14 	bl	8000a9c <__aeabi_dcmpeq>
 8010274:	b908      	cbnz	r0, 801027a <_dtoa_r+0x17a>
 8010276:	f10a 3aff 	add.w	sl, sl, #4294967295
 801027a:	f1ba 0f16 	cmp.w	sl, #22
 801027e:	d858      	bhi.n	8010332 <_dtoa_r+0x232>
 8010280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010284:	4b57      	ldr	r3, [pc, #348]	; (80103e4 <_dtoa_r+0x2e4>)
 8010286:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801028a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028e:	f7f0 fc0f 	bl	8000ab0 <__aeabi_dcmplt>
 8010292:	2800      	cmp	r0, #0
 8010294:	d04f      	beq.n	8010336 <_dtoa_r+0x236>
 8010296:	2300      	movs	r3, #0
 8010298:	f10a 3aff 	add.w	sl, sl, #4294967295
 801029c:	930f      	str	r3, [sp, #60]	; 0x3c
 801029e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80102a0:	1b1c      	subs	r4, r3, r4
 80102a2:	1e63      	subs	r3, r4, #1
 80102a4:	9309      	str	r3, [sp, #36]	; 0x24
 80102a6:	bf49      	itett	mi
 80102a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80102ac:	2300      	movpl	r3, #0
 80102ae:	9306      	strmi	r3, [sp, #24]
 80102b0:	2300      	movmi	r3, #0
 80102b2:	bf54      	ite	pl
 80102b4:	9306      	strpl	r3, [sp, #24]
 80102b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80102b8:	f1ba 0f00 	cmp.w	sl, #0
 80102bc:	db3d      	blt.n	801033a <_dtoa_r+0x23a>
 80102be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80102c4:	4453      	add	r3, sl
 80102c6:	9309      	str	r3, [sp, #36]	; 0x24
 80102c8:	2300      	movs	r3, #0
 80102ca:	930a      	str	r3, [sp, #40]	; 0x28
 80102cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80102ce:	2b09      	cmp	r3, #9
 80102d0:	f200 808c 	bhi.w	80103ec <_dtoa_r+0x2ec>
 80102d4:	2b05      	cmp	r3, #5
 80102d6:	bfc4      	itt	gt
 80102d8:	3b04      	subgt	r3, #4
 80102da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80102dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80102de:	bfc8      	it	gt
 80102e0:	2400      	movgt	r4, #0
 80102e2:	f1a3 0302 	sub.w	r3, r3, #2
 80102e6:	bfd8      	it	le
 80102e8:	2401      	movle	r4, #1
 80102ea:	2b03      	cmp	r3, #3
 80102ec:	f200 808a 	bhi.w	8010404 <_dtoa_r+0x304>
 80102f0:	e8df f003 	tbb	[pc, r3]
 80102f4:	5b4d4f2d 	.word	0x5b4d4f2d
 80102f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80102fc:	441c      	add	r4, r3
 80102fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8010302:	2b20      	cmp	r3, #32
 8010304:	bfc3      	ittte	gt
 8010306:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801030a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801030e:	fa09 f303 	lslgt.w	r3, r9, r3
 8010312:	f1c3 0320 	rsble	r3, r3, #32
 8010316:	bfc6      	itte	gt
 8010318:	fa26 f000 	lsrgt.w	r0, r6, r0
 801031c:	4318      	orrgt	r0, r3
 801031e:	fa06 f003 	lslle.w	r0, r6, r3
 8010322:	f7f0 f8d9 	bl	80004d8 <__aeabi_ui2d>
 8010326:	2301      	movs	r3, #1
 8010328:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801032c:	3c01      	subs	r4, #1
 801032e:	9313      	str	r3, [sp, #76]	; 0x4c
 8010330:	e76f      	b.n	8010212 <_dtoa_r+0x112>
 8010332:	2301      	movs	r3, #1
 8010334:	e7b2      	b.n	801029c <_dtoa_r+0x19c>
 8010336:	900f      	str	r0, [sp, #60]	; 0x3c
 8010338:	e7b1      	b.n	801029e <_dtoa_r+0x19e>
 801033a:	9b06      	ldr	r3, [sp, #24]
 801033c:	eba3 030a 	sub.w	r3, r3, sl
 8010340:	9306      	str	r3, [sp, #24]
 8010342:	f1ca 0300 	rsb	r3, sl, #0
 8010346:	930a      	str	r3, [sp, #40]	; 0x28
 8010348:	2300      	movs	r3, #0
 801034a:	930e      	str	r3, [sp, #56]	; 0x38
 801034c:	e7be      	b.n	80102cc <_dtoa_r+0x1cc>
 801034e:	2300      	movs	r3, #0
 8010350:	930b      	str	r3, [sp, #44]	; 0x2c
 8010352:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010354:	2b00      	cmp	r3, #0
 8010356:	dc58      	bgt.n	801040a <_dtoa_r+0x30a>
 8010358:	f04f 0901 	mov.w	r9, #1
 801035c:	464b      	mov	r3, r9
 801035e:	f8cd 9020 	str.w	r9, [sp, #32]
 8010362:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8010366:	2200      	movs	r2, #0
 8010368:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801036a:	6042      	str	r2, [r0, #4]
 801036c:	2204      	movs	r2, #4
 801036e:	f102 0614 	add.w	r6, r2, #20
 8010372:	429e      	cmp	r6, r3
 8010374:	6841      	ldr	r1, [r0, #4]
 8010376:	d94e      	bls.n	8010416 <_dtoa_r+0x316>
 8010378:	4628      	mov	r0, r5
 801037a:	f000 feff 	bl	801117c <_Balloc>
 801037e:	9003      	str	r0, [sp, #12]
 8010380:	2800      	cmp	r0, #0
 8010382:	d14c      	bne.n	801041e <_dtoa_r+0x31e>
 8010384:	4602      	mov	r2, r0
 8010386:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801038a:	4b17      	ldr	r3, [pc, #92]	; (80103e8 <_dtoa_r+0x2e8>)
 801038c:	e6cc      	b.n	8010128 <_dtoa_r+0x28>
 801038e:	2301      	movs	r3, #1
 8010390:	e7de      	b.n	8010350 <_dtoa_r+0x250>
 8010392:	2300      	movs	r3, #0
 8010394:	930b      	str	r3, [sp, #44]	; 0x2c
 8010396:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010398:	eb0a 0903 	add.w	r9, sl, r3
 801039c:	f109 0301 	add.w	r3, r9, #1
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	9308      	str	r3, [sp, #32]
 80103a4:	bfb8      	it	lt
 80103a6:	2301      	movlt	r3, #1
 80103a8:	e7dd      	b.n	8010366 <_dtoa_r+0x266>
 80103aa:	2301      	movs	r3, #1
 80103ac:	e7f2      	b.n	8010394 <_dtoa_r+0x294>
 80103ae:	bf00      	nop
 80103b0:	636f4361 	.word	0x636f4361
 80103b4:	3fd287a7 	.word	0x3fd287a7
 80103b8:	8b60c8b3 	.word	0x8b60c8b3
 80103bc:	3fc68a28 	.word	0x3fc68a28
 80103c0:	509f79fb 	.word	0x509f79fb
 80103c4:	3fd34413 	.word	0x3fd34413
 80103c8:	080149ba 	.word	0x080149ba
 80103cc:	080149d1 	.word	0x080149d1
 80103d0:	7ff00000 	.word	0x7ff00000
 80103d4:	080149b6 	.word	0x080149b6
 80103d8:	080149ad 	.word	0x080149ad
 80103dc:	0801498a 	.word	0x0801498a
 80103e0:	3ff80000 	.word	0x3ff80000
 80103e4:	08014b28 	.word	0x08014b28
 80103e8:	08014a2c 	.word	0x08014a2c
 80103ec:	2401      	movs	r4, #1
 80103ee:	2300      	movs	r3, #0
 80103f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80103f2:	9322      	str	r3, [sp, #136]	; 0x88
 80103f4:	f04f 39ff 	mov.w	r9, #4294967295
 80103f8:	2200      	movs	r2, #0
 80103fa:	2312      	movs	r3, #18
 80103fc:	f8cd 9020 	str.w	r9, [sp, #32]
 8010400:	9223      	str	r2, [sp, #140]	; 0x8c
 8010402:	e7b0      	b.n	8010366 <_dtoa_r+0x266>
 8010404:	2301      	movs	r3, #1
 8010406:	930b      	str	r3, [sp, #44]	; 0x2c
 8010408:	e7f4      	b.n	80103f4 <_dtoa_r+0x2f4>
 801040a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 801040e:	464b      	mov	r3, r9
 8010410:	f8cd 9020 	str.w	r9, [sp, #32]
 8010414:	e7a7      	b.n	8010366 <_dtoa_r+0x266>
 8010416:	3101      	adds	r1, #1
 8010418:	6041      	str	r1, [r0, #4]
 801041a:	0052      	lsls	r2, r2, #1
 801041c:	e7a7      	b.n	801036e <_dtoa_r+0x26e>
 801041e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010420:	9a03      	ldr	r2, [sp, #12]
 8010422:	601a      	str	r2, [r3, #0]
 8010424:	9b08      	ldr	r3, [sp, #32]
 8010426:	2b0e      	cmp	r3, #14
 8010428:	f200 80a8 	bhi.w	801057c <_dtoa_r+0x47c>
 801042c:	2c00      	cmp	r4, #0
 801042e:	f000 80a5 	beq.w	801057c <_dtoa_r+0x47c>
 8010432:	f1ba 0f00 	cmp.w	sl, #0
 8010436:	dd34      	ble.n	80104a2 <_dtoa_r+0x3a2>
 8010438:	4a9a      	ldr	r2, [pc, #616]	; (80106a4 <_dtoa_r+0x5a4>)
 801043a:	f00a 030f 	and.w	r3, sl, #15
 801043e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010442:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010446:	e9d3 3400 	ldrd	r3, r4, [r3]
 801044a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801044e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8010452:	d016      	beq.n	8010482 <_dtoa_r+0x382>
 8010454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010458:	4b93      	ldr	r3, [pc, #588]	; (80106a8 <_dtoa_r+0x5a8>)
 801045a:	2703      	movs	r7, #3
 801045c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010460:	f7f0 f9de 	bl	8000820 <__aeabi_ddiv>
 8010464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010468:	f004 040f 	and.w	r4, r4, #15
 801046c:	4e8e      	ldr	r6, [pc, #568]	; (80106a8 <_dtoa_r+0x5a8>)
 801046e:	b954      	cbnz	r4, 8010486 <_dtoa_r+0x386>
 8010470:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010478:	f7f0 f9d2 	bl	8000820 <__aeabi_ddiv>
 801047c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010480:	e029      	b.n	80104d6 <_dtoa_r+0x3d6>
 8010482:	2702      	movs	r7, #2
 8010484:	e7f2      	b.n	801046c <_dtoa_r+0x36c>
 8010486:	07e1      	lsls	r1, r4, #31
 8010488:	d508      	bpl.n	801049c <_dtoa_r+0x39c>
 801048a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801048e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010492:	f7f0 f89b 	bl	80005cc <__aeabi_dmul>
 8010496:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801049a:	3701      	adds	r7, #1
 801049c:	1064      	asrs	r4, r4, #1
 801049e:	3608      	adds	r6, #8
 80104a0:	e7e5      	b.n	801046e <_dtoa_r+0x36e>
 80104a2:	f000 80a5 	beq.w	80105f0 <_dtoa_r+0x4f0>
 80104a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80104aa:	f1ca 0400 	rsb	r4, sl, #0
 80104ae:	4b7d      	ldr	r3, [pc, #500]	; (80106a4 <_dtoa_r+0x5a4>)
 80104b0:	f004 020f 	and.w	r2, r4, #15
 80104b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104bc:	f7f0 f886 	bl	80005cc <__aeabi_dmul>
 80104c0:	2702      	movs	r7, #2
 80104c2:	2300      	movs	r3, #0
 80104c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104c8:	4e77      	ldr	r6, [pc, #476]	; (80106a8 <_dtoa_r+0x5a8>)
 80104ca:	1124      	asrs	r4, r4, #4
 80104cc:	2c00      	cmp	r4, #0
 80104ce:	f040 8084 	bne.w	80105da <_dtoa_r+0x4da>
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d1d2      	bne.n	801047c <_dtoa_r+0x37c>
 80104d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104d8:	2b00      	cmp	r3, #0
 80104da:	f000 808b 	beq.w	80105f4 <_dtoa_r+0x4f4>
 80104de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80104e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80104e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80104ea:	2200      	movs	r2, #0
 80104ec:	4b6f      	ldr	r3, [pc, #444]	; (80106ac <_dtoa_r+0x5ac>)
 80104ee:	f7f0 fadf 	bl	8000ab0 <__aeabi_dcmplt>
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d07e      	beq.n	80105f4 <_dtoa_r+0x4f4>
 80104f6:	9b08      	ldr	r3, [sp, #32]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d07b      	beq.n	80105f4 <_dtoa_r+0x4f4>
 80104fc:	f1b9 0f00 	cmp.w	r9, #0
 8010500:	dd38      	ble.n	8010574 <_dtoa_r+0x474>
 8010502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010506:	2200      	movs	r2, #0
 8010508:	4b69      	ldr	r3, [pc, #420]	; (80106b0 <_dtoa_r+0x5b0>)
 801050a:	f7f0 f85f 	bl	80005cc <__aeabi_dmul>
 801050e:	464c      	mov	r4, r9
 8010510:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010514:	f10a 38ff 	add.w	r8, sl, #4294967295
 8010518:	3701      	adds	r7, #1
 801051a:	4638      	mov	r0, r7
 801051c:	f7ef ffec 	bl	80004f8 <__aeabi_i2d>
 8010520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010524:	f7f0 f852 	bl	80005cc <__aeabi_dmul>
 8010528:	2200      	movs	r2, #0
 801052a:	4b62      	ldr	r3, [pc, #392]	; (80106b4 <_dtoa_r+0x5b4>)
 801052c:	f7ef fe98 	bl	8000260 <__adddf3>
 8010530:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010534:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010538:	9611      	str	r6, [sp, #68]	; 0x44
 801053a:	2c00      	cmp	r4, #0
 801053c:	d15d      	bne.n	80105fa <_dtoa_r+0x4fa>
 801053e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010542:	2200      	movs	r2, #0
 8010544:	4b5c      	ldr	r3, [pc, #368]	; (80106b8 <_dtoa_r+0x5b8>)
 8010546:	f7ef fe89 	bl	800025c <__aeabi_dsub>
 801054a:	4602      	mov	r2, r0
 801054c:	460b      	mov	r3, r1
 801054e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010552:	4633      	mov	r3, r6
 8010554:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010556:	f7f0 fac9 	bl	8000aec <__aeabi_dcmpgt>
 801055a:	2800      	cmp	r0, #0
 801055c:	f040 829c 	bne.w	8010a98 <_dtoa_r+0x998>
 8010560:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010564:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010566:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801056a:	f7f0 faa1 	bl	8000ab0 <__aeabi_dcmplt>
 801056e:	2800      	cmp	r0, #0
 8010570:	f040 8290 	bne.w	8010a94 <_dtoa_r+0x994>
 8010574:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8010578:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801057c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801057e:	2b00      	cmp	r3, #0
 8010580:	f2c0 8152 	blt.w	8010828 <_dtoa_r+0x728>
 8010584:	f1ba 0f0e 	cmp.w	sl, #14
 8010588:	f300 814e 	bgt.w	8010828 <_dtoa_r+0x728>
 801058c:	4b45      	ldr	r3, [pc, #276]	; (80106a4 <_dtoa_r+0x5a4>)
 801058e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010592:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010596:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801059a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801059c:	2b00      	cmp	r3, #0
 801059e:	f280 80db 	bge.w	8010758 <_dtoa_r+0x658>
 80105a2:	9b08      	ldr	r3, [sp, #32]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f300 80d7 	bgt.w	8010758 <_dtoa_r+0x658>
 80105aa:	f040 8272 	bne.w	8010a92 <_dtoa_r+0x992>
 80105ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105b2:	2200      	movs	r2, #0
 80105b4:	4b40      	ldr	r3, [pc, #256]	; (80106b8 <_dtoa_r+0x5b8>)
 80105b6:	f7f0 f809 	bl	80005cc <__aeabi_dmul>
 80105ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105be:	f7f0 fa8b 	bl	8000ad8 <__aeabi_dcmpge>
 80105c2:	9c08      	ldr	r4, [sp, #32]
 80105c4:	4626      	mov	r6, r4
 80105c6:	2800      	cmp	r0, #0
 80105c8:	f040 8248 	bne.w	8010a5c <_dtoa_r+0x95c>
 80105cc:	2331      	movs	r3, #49	; 0x31
 80105ce:	9f03      	ldr	r7, [sp, #12]
 80105d0:	f10a 0a01 	add.w	sl, sl, #1
 80105d4:	f807 3b01 	strb.w	r3, [r7], #1
 80105d8:	e244      	b.n	8010a64 <_dtoa_r+0x964>
 80105da:	07e2      	lsls	r2, r4, #31
 80105dc:	d505      	bpl.n	80105ea <_dtoa_r+0x4ea>
 80105de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80105e2:	f7ef fff3 	bl	80005cc <__aeabi_dmul>
 80105e6:	2301      	movs	r3, #1
 80105e8:	3701      	adds	r7, #1
 80105ea:	1064      	asrs	r4, r4, #1
 80105ec:	3608      	adds	r6, #8
 80105ee:	e76d      	b.n	80104cc <_dtoa_r+0x3cc>
 80105f0:	2702      	movs	r7, #2
 80105f2:	e770      	b.n	80104d6 <_dtoa_r+0x3d6>
 80105f4:	46d0      	mov	r8, sl
 80105f6:	9c08      	ldr	r4, [sp, #32]
 80105f8:	e78f      	b.n	801051a <_dtoa_r+0x41a>
 80105fa:	9903      	ldr	r1, [sp, #12]
 80105fc:	4b29      	ldr	r3, [pc, #164]	; (80106a4 <_dtoa_r+0x5a4>)
 80105fe:	4421      	add	r1, r4
 8010600:	9112      	str	r1, [sp, #72]	; 0x48
 8010602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010604:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010608:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801060c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010610:	2900      	cmp	r1, #0
 8010612:	d055      	beq.n	80106c0 <_dtoa_r+0x5c0>
 8010614:	2000      	movs	r0, #0
 8010616:	4929      	ldr	r1, [pc, #164]	; (80106bc <_dtoa_r+0x5bc>)
 8010618:	f7f0 f902 	bl	8000820 <__aeabi_ddiv>
 801061c:	463b      	mov	r3, r7
 801061e:	4632      	mov	r2, r6
 8010620:	f7ef fe1c 	bl	800025c <__aeabi_dsub>
 8010624:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010628:	9f03      	ldr	r7, [sp, #12]
 801062a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801062e:	f7f0 fa7d 	bl	8000b2c <__aeabi_d2iz>
 8010632:	4604      	mov	r4, r0
 8010634:	f7ef ff60 	bl	80004f8 <__aeabi_i2d>
 8010638:	4602      	mov	r2, r0
 801063a:	460b      	mov	r3, r1
 801063c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010640:	f7ef fe0c 	bl	800025c <__aeabi_dsub>
 8010644:	4602      	mov	r2, r0
 8010646:	460b      	mov	r3, r1
 8010648:	3430      	adds	r4, #48	; 0x30
 801064a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801064e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010652:	f807 4b01 	strb.w	r4, [r7], #1
 8010656:	f7f0 fa2b 	bl	8000ab0 <__aeabi_dcmplt>
 801065a:	2800      	cmp	r0, #0
 801065c:	d174      	bne.n	8010748 <_dtoa_r+0x648>
 801065e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010662:	2000      	movs	r0, #0
 8010664:	4911      	ldr	r1, [pc, #68]	; (80106ac <_dtoa_r+0x5ac>)
 8010666:	f7ef fdf9 	bl	800025c <__aeabi_dsub>
 801066a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801066e:	f7f0 fa1f 	bl	8000ab0 <__aeabi_dcmplt>
 8010672:	2800      	cmp	r0, #0
 8010674:	f040 80b7 	bne.w	80107e6 <_dtoa_r+0x6e6>
 8010678:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801067a:	429f      	cmp	r7, r3
 801067c:	f43f af7a 	beq.w	8010574 <_dtoa_r+0x474>
 8010680:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010684:	2200      	movs	r2, #0
 8010686:	4b0a      	ldr	r3, [pc, #40]	; (80106b0 <_dtoa_r+0x5b0>)
 8010688:	f7ef ffa0 	bl	80005cc <__aeabi_dmul>
 801068c:	2200      	movs	r2, #0
 801068e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010696:	4b06      	ldr	r3, [pc, #24]	; (80106b0 <_dtoa_r+0x5b0>)
 8010698:	f7ef ff98 	bl	80005cc <__aeabi_dmul>
 801069c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80106a0:	e7c3      	b.n	801062a <_dtoa_r+0x52a>
 80106a2:	bf00      	nop
 80106a4:	08014b28 	.word	0x08014b28
 80106a8:	08014b00 	.word	0x08014b00
 80106ac:	3ff00000 	.word	0x3ff00000
 80106b0:	40240000 	.word	0x40240000
 80106b4:	401c0000 	.word	0x401c0000
 80106b8:	40140000 	.word	0x40140000
 80106bc:	3fe00000 	.word	0x3fe00000
 80106c0:	4630      	mov	r0, r6
 80106c2:	4639      	mov	r1, r7
 80106c4:	f7ef ff82 	bl	80005cc <__aeabi_dmul>
 80106c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80106ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80106ce:	9c03      	ldr	r4, [sp, #12]
 80106d0:	9314      	str	r3, [sp, #80]	; 0x50
 80106d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80106d6:	f7f0 fa29 	bl	8000b2c <__aeabi_d2iz>
 80106da:	9015      	str	r0, [sp, #84]	; 0x54
 80106dc:	f7ef ff0c 	bl	80004f8 <__aeabi_i2d>
 80106e0:	4602      	mov	r2, r0
 80106e2:	460b      	mov	r3, r1
 80106e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80106e8:	f7ef fdb8 	bl	800025c <__aeabi_dsub>
 80106ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106ee:	4606      	mov	r6, r0
 80106f0:	3330      	adds	r3, #48	; 0x30
 80106f2:	f804 3b01 	strb.w	r3, [r4], #1
 80106f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80106f8:	460f      	mov	r7, r1
 80106fa:	429c      	cmp	r4, r3
 80106fc:	f04f 0200 	mov.w	r2, #0
 8010700:	d124      	bne.n	801074c <_dtoa_r+0x64c>
 8010702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010706:	4bb0      	ldr	r3, [pc, #704]	; (80109c8 <_dtoa_r+0x8c8>)
 8010708:	f7ef fdaa 	bl	8000260 <__adddf3>
 801070c:	4602      	mov	r2, r0
 801070e:	460b      	mov	r3, r1
 8010710:	4630      	mov	r0, r6
 8010712:	4639      	mov	r1, r7
 8010714:	f7f0 f9ea 	bl	8000aec <__aeabi_dcmpgt>
 8010718:	2800      	cmp	r0, #0
 801071a:	d163      	bne.n	80107e4 <_dtoa_r+0x6e4>
 801071c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010720:	2000      	movs	r0, #0
 8010722:	49a9      	ldr	r1, [pc, #676]	; (80109c8 <_dtoa_r+0x8c8>)
 8010724:	f7ef fd9a 	bl	800025c <__aeabi_dsub>
 8010728:	4602      	mov	r2, r0
 801072a:	460b      	mov	r3, r1
 801072c:	4630      	mov	r0, r6
 801072e:	4639      	mov	r1, r7
 8010730:	f7f0 f9be 	bl	8000ab0 <__aeabi_dcmplt>
 8010734:	2800      	cmp	r0, #0
 8010736:	f43f af1d 	beq.w	8010574 <_dtoa_r+0x474>
 801073a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801073c:	1e7b      	subs	r3, r7, #1
 801073e:	9314      	str	r3, [sp, #80]	; 0x50
 8010740:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8010744:	2b30      	cmp	r3, #48	; 0x30
 8010746:	d0f8      	beq.n	801073a <_dtoa_r+0x63a>
 8010748:	46c2      	mov	sl, r8
 801074a:	e03b      	b.n	80107c4 <_dtoa_r+0x6c4>
 801074c:	4b9f      	ldr	r3, [pc, #636]	; (80109cc <_dtoa_r+0x8cc>)
 801074e:	f7ef ff3d 	bl	80005cc <__aeabi_dmul>
 8010752:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010756:	e7bc      	b.n	80106d2 <_dtoa_r+0x5d2>
 8010758:	9f03      	ldr	r7, [sp, #12]
 801075a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801075e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010762:	4640      	mov	r0, r8
 8010764:	4649      	mov	r1, r9
 8010766:	f7f0 f85b 	bl	8000820 <__aeabi_ddiv>
 801076a:	f7f0 f9df 	bl	8000b2c <__aeabi_d2iz>
 801076e:	4604      	mov	r4, r0
 8010770:	f7ef fec2 	bl	80004f8 <__aeabi_i2d>
 8010774:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010778:	f7ef ff28 	bl	80005cc <__aeabi_dmul>
 801077c:	4602      	mov	r2, r0
 801077e:	460b      	mov	r3, r1
 8010780:	4640      	mov	r0, r8
 8010782:	4649      	mov	r1, r9
 8010784:	f7ef fd6a 	bl	800025c <__aeabi_dsub>
 8010788:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801078c:	f807 6b01 	strb.w	r6, [r7], #1
 8010790:	9e03      	ldr	r6, [sp, #12]
 8010792:	f8dd c020 	ldr.w	ip, [sp, #32]
 8010796:	1bbe      	subs	r6, r7, r6
 8010798:	45b4      	cmp	ip, r6
 801079a:	4602      	mov	r2, r0
 801079c:	460b      	mov	r3, r1
 801079e:	d136      	bne.n	801080e <_dtoa_r+0x70e>
 80107a0:	f7ef fd5e 	bl	8000260 <__adddf3>
 80107a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80107a8:	4680      	mov	r8, r0
 80107aa:	4689      	mov	r9, r1
 80107ac:	f7f0 f99e 	bl	8000aec <__aeabi_dcmpgt>
 80107b0:	bb58      	cbnz	r0, 801080a <_dtoa_r+0x70a>
 80107b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80107b6:	4640      	mov	r0, r8
 80107b8:	4649      	mov	r1, r9
 80107ba:	f7f0 f96f 	bl	8000a9c <__aeabi_dcmpeq>
 80107be:	b108      	cbz	r0, 80107c4 <_dtoa_r+0x6c4>
 80107c0:	07e1      	lsls	r1, r4, #31
 80107c2:	d422      	bmi.n	801080a <_dtoa_r+0x70a>
 80107c4:	4628      	mov	r0, r5
 80107c6:	4659      	mov	r1, fp
 80107c8:	f000 fd18 	bl	80111fc <_Bfree>
 80107cc:	2300      	movs	r3, #0
 80107ce:	703b      	strb	r3, [r7, #0]
 80107d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80107d2:	f10a 0001 	add.w	r0, sl, #1
 80107d6:	6018      	str	r0, [r3, #0]
 80107d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80107da:	2b00      	cmp	r3, #0
 80107dc:	f43f acde 	beq.w	801019c <_dtoa_r+0x9c>
 80107e0:	601f      	str	r7, [r3, #0]
 80107e2:	e4db      	b.n	801019c <_dtoa_r+0x9c>
 80107e4:	4627      	mov	r7, r4
 80107e6:	463b      	mov	r3, r7
 80107e8:	461f      	mov	r7, r3
 80107ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107ee:	2a39      	cmp	r2, #57	; 0x39
 80107f0:	d107      	bne.n	8010802 <_dtoa_r+0x702>
 80107f2:	9a03      	ldr	r2, [sp, #12]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d1f7      	bne.n	80107e8 <_dtoa_r+0x6e8>
 80107f8:	2230      	movs	r2, #48	; 0x30
 80107fa:	9903      	ldr	r1, [sp, #12]
 80107fc:	f108 0801 	add.w	r8, r8, #1
 8010800:	700a      	strb	r2, [r1, #0]
 8010802:	781a      	ldrb	r2, [r3, #0]
 8010804:	3201      	adds	r2, #1
 8010806:	701a      	strb	r2, [r3, #0]
 8010808:	e79e      	b.n	8010748 <_dtoa_r+0x648>
 801080a:	46d0      	mov	r8, sl
 801080c:	e7eb      	b.n	80107e6 <_dtoa_r+0x6e6>
 801080e:	2200      	movs	r2, #0
 8010810:	4b6e      	ldr	r3, [pc, #440]	; (80109cc <_dtoa_r+0x8cc>)
 8010812:	f7ef fedb 	bl	80005cc <__aeabi_dmul>
 8010816:	2200      	movs	r2, #0
 8010818:	2300      	movs	r3, #0
 801081a:	4680      	mov	r8, r0
 801081c:	4689      	mov	r9, r1
 801081e:	f7f0 f93d 	bl	8000a9c <__aeabi_dcmpeq>
 8010822:	2800      	cmp	r0, #0
 8010824:	d09b      	beq.n	801075e <_dtoa_r+0x65e>
 8010826:	e7cd      	b.n	80107c4 <_dtoa_r+0x6c4>
 8010828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801082a:	2a00      	cmp	r2, #0
 801082c:	f000 80d0 	beq.w	80109d0 <_dtoa_r+0x8d0>
 8010830:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010832:	2a01      	cmp	r2, #1
 8010834:	f300 80ae 	bgt.w	8010994 <_dtoa_r+0x894>
 8010838:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801083a:	2a00      	cmp	r2, #0
 801083c:	f000 80a6 	beq.w	801098c <_dtoa_r+0x88c>
 8010840:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010844:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010846:	9f06      	ldr	r7, [sp, #24]
 8010848:	9a06      	ldr	r2, [sp, #24]
 801084a:	2101      	movs	r1, #1
 801084c:	441a      	add	r2, r3
 801084e:	9206      	str	r2, [sp, #24]
 8010850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010852:	4628      	mov	r0, r5
 8010854:	441a      	add	r2, r3
 8010856:	9209      	str	r2, [sp, #36]	; 0x24
 8010858:	f000 fd86 	bl	8011368 <__i2b>
 801085c:	4606      	mov	r6, r0
 801085e:	2f00      	cmp	r7, #0
 8010860:	dd0c      	ble.n	801087c <_dtoa_r+0x77c>
 8010862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010864:	2b00      	cmp	r3, #0
 8010866:	dd09      	ble.n	801087c <_dtoa_r+0x77c>
 8010868:	42bb      	cmp	r3, r7
 801086a:	bfa8      	it	ge
 801086c:	463b      	movge	r3, r7
 801086e:	9a06      	ldr	r2, [sp, #24]
 8010870:	1aff      	subs	r7, r7, r3
 8010872:	1ad2      	subs	r2, r2, r3
 8010874:	9206      	str	r2, [sp, #24]
 8010876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010878:	1ad3      	subs	r3, r2, r3
 801087a:	9309      	str	r3, [sp, #36]	; 0x24
 801087c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801087e:	b1f3      	cbz	r3, 80108be <_dtoa_r+0x7be>
 8010880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010882:	2b00      	cmp	r3, #0
 8010884:	f000 80a8 	beq.w	80109d8 <_dtoa_r+0x8d8>
 8010888:	2c00      	cmp	r4, #0
 801088a:	dd10      	ble.n	80108ae <_dtoa_r+0x7ae>
 801088c:	4631      	mov	r1, r6
 801088e:	4622      	mov	r2, r4
 8010890:	4628      	mov	r0, r5
 8010892:	f000 fe27 	bl	80114e4 <__pow5mult>
 8010896:	465a      	mov	r2, fp
 8010898:	4601      	mov	r1, r0
 801089a:	4606      	mov	r6, r0
 801089c:	4628      	mov	r0, r5
 801089e:	f000 fd79 	bl	8011394 <__multiply>
 80108a2:	4680      	mov	r8, r0
 80108a4:	4659      	mov	r1, fp
 80108a6:	4628      	mov	r0, r5
 80108a8:	f000 fca8 	bl	80111fc <_Bfree>
 80108ac:	46c3      	mov	fp, r8
 80108ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108b0:	1b1a      	subs	r2, r3, r4
 80108b2:	d004      	beq.n	80108be <_dtoa_r+0x7be>
 80108b4:	4659      	mov	r1, fp
 80108b6:	4628      	mov	r0, r5
 80108b8:	f000 fe14 	bl	80114e4 <__pow5mult>
 80108bc:	4683      	mov	fp, r0
 80108be:	2101      	movs	r1, #1
 80108c0:	4628      	mov	r0, r5
 80108c2:	f000 fd51 	bl	8011368 <__i2b>
 80108c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108c8:	4604      	mov	r4, r0
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	f340 8086 	ble.w	80109dc <_dtoa_r+0x8dc>
 80108d0:	461a      	mov	r2, r3
 80108d2:	4601      	mov	r1, r0
 80108d4:	4628      	mov	r0, r5
 80108d6:	f000 fe05 	bl	80114e4 <__pow5mult>
 80108da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80108dc:	4604      	mov	r4, r0
 80108de:	2b01      	cmp	r3, #1
 80108e0:	dd7f      	ble.n	80109e2 <_dtoa_r+0x8e2>
 80108e2:	f04f 0800 	mov.w	r8, #0
 80108e6:	6923      	ldr	r3, [r4, #16]
 80108e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80108ec:	6918      	ldr	r0, [r3, #16]
 80108ee:	f000 fced 	bl	80112cc <__hi0bits>
 80108f2:	f1c0 0020 	rsb	r0, r0, #32
 80108f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108f8:	4418      	add	r0, r3
 80108fa:	f010 001f 	ands.w	r0, r0, #31
 80108fe:	f000 8092 	beq.w	8010a26 <_dtoa_r+0x926>
 8010902:	f1c0 0320 	rsb	r3, r0, #32
 8010906:	2b04      	cmp	r3, #4
 8010908:	f340 808a 	ble.w	8010a20 <_dtoa_r+0x920>
 801090c:	f1c0 001c 	rsb	r0, r0, #28
 8010910:	9b06      	ldr	r3, [sp, #24]
 8010912:	4407      	add	r7, r0
 8010914:	4403      	add	r3, r0
 8010916:	9306      	str	r3, [sp, #24]
 8010918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801091a:	4403      	add	r3, r0
 801091c:	9309      	str	r3, [sp, #36]	; 0x24
 801091e:	9b06      	ldr	r3, [sp, #24]
 8010920:	2b00      	cmp	r3, #0
 8010922:	dd05      	ble.n	8010930 <_dtoa_r+0x830>
 8010924:	4659      	mov	r1, fp
 8010926:	461a      	mov	r2, r3
 8010928:	4628      	mov	r0, r5
 801092a:	f000 fe35 	bl	8011598 <__lshift>
 801092e:	4683      	mov	fp, r0
 8010930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010932:	2b00      	cmp	r3, #0
 8010934:	dd05      	ble.n	8010942 <_dtoa_r+0x842>
 8010936:	4621      	mov	r1, r4
 8010938:	461a      	mov	r2, r3
 801093a:	4628      	mov	r0, r5
 801093c:	f000 fe2c 	bl	8011598 <__lshift>
 8010940:	4604      	mov	r4, r0
 8010942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010944:	2b00      	cmp	r3, #0
 8010946:	d070      	beq.n	8010a2a <_dtoa_r+0x92a>
 8010948:	4621      	mov	r1, r4
 801094a:	4658      	mov	r0, fp
 801094c:	f000 fe94 	bl	8011678 <__mcmp>
 8010950:	2800      	cmp	r0, #0
 8010952:	da6a      	bge.n	8010a2a <_dtoa_r+0x92a>
 8010954:	2300      	movs	r3, #0
 8010956:	4659      	mov	r1, fp
 8010958:	220a      	movs	r2, #10
 801095a:	4628      	mov	r0, r5
 801095c:	f000 fc70 	bl	8011240 <__multadd>
 8010960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010962:	4683      	mov	fp, r0
 8010964:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010968:	2b00      	cmp	r3, #0
 801096a:	f000 8194 	beq.w	8010c96 <_dtoa_r+0xb96>
 801096e:	4631      	mov	r1, r6
 8010970:	2300      	movs	r3, #0
 8010972:	220a      	movs	r2, #10
 8010974:	4628      	mov	r0, r5
 8010976:	f000 fc63 	bl	8011240 <__multadd>
 801097a:	f1b9 0f00 	cmp.w	r9, #0
 801097e:	4606      	mov	r6, r0
 8010980:	f300 8093 	bgt.w	8010aaa <_dtoa_r+0x9aa>
 8010984:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010986:	2b02      	cmp	r3, #2
 8010988:	dc57      	bgt.n	8010a3a <_dtoa_r+0x93a>
 801098a:	e08e      	b.n	8010aaa <_dtoa_r+0x9aa>
 801098c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801098e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010992:	e757      	b.n	8010844 <_dtoa_r+0x744>
 8010994:	9b08      	ldr	r3, [sp, #32]
 8010996:	1e5c      	subs	r4, r3, #1
 8010998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801099a:	42a3      	cmp	r3, r4
 801099c:	bfb7      	itett	lt
 801099e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80109a0:	1b1c      	subge	r4, r3, r4
 80109a2:	1ae2      	sublt	r2, r4, r3
 80109a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80109a6:	bfbe      	ittt	lt
 80109a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80109aa:	189b      	addlt	r3, r3, r2
 80109ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80109ae:	9b08      	ldr	r3, [sp, #32]
 80109b0:	bfb8      	it	lt
 80109b2:	2400      	movlt	r4, #0
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	bfbb      	ittet	lt
 80109b8:	9b06      	ldrlt	r3, [sp, #24]
 80109ba:	9a08      	ldrlt	r2, [sp, #32]
 80109bc:	9f06      	ldrge	r7, [sp, #24]
 80109be:	1a9f      	sublt	r7, r3, r2
 80109c0:	bfac      	ite	ge
 80109c2:	9b08      	ldrge	r3, [sp, #32]
 80109c4:	2300      	movlt	r3, #0
 80109c6:	e73f      	b.n	8010848 <_dtoa_r+0x748>
 80109c8:	3fe00000 	.word	0x3fe00000
 80109cc:	40240000 	.word	0x40240000
 80109d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80109d2:	9f06      	ldr	r7, [sp, #24]
 80109d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80109d6:	e742      	b.n	801085e <_dtoa_r+0x75e>
 80109d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109da:	e76b      	b.n	80108b4 <_dtoa_r+0x7b4>
 80109dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80109de:	2b01      	cmp	r3, #1
 80109e0:	dc19      	bgt.n	8010a16 <_dtoa_r+0x916>
 80109e2:	9b04      	ldr	r3, [sp, #16]
 80109e4:	b9bb      	cbnz	r3, 8010a16 <_dtoa_r+0x916>
 80109e6:	9b05      	ldr	r3, [sp, #20]
 80109e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80109ec:	b99b      	cbnz	r3, 8010a16 <_dtoa_r+0x916>
 80109ee:	9b05      	ldr	r3, [sp, #20]
 80109f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80109f4:	0d1b      	lsrs	r3, r3, #20
 80109f6:	051b      	lsls	r3, r3, #20
 80109f8:	b183      	cbz	r3, 8010a1c <_dtoa_r+0x91c>
 80109fa:	f04f 0801 	mov.w	r8, #1
 80109fe:	9b06      	ldr	r3, [sp, #24]
 8010a00:	3301      	adds	r3, #1
 8010a02:	9306      	str	r3, [sp, #24]
 8010a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a06:	3301      	adds	r3, #1
 8010a08:	9309      	str	r3, [sp, #36]	; 0x24
 8010a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f47f af6a 	bne.w	80108e6 <_dtoa_r+0x7e6>
 8010a12:	2001      	movs	r0, #1
 8010a14:	e76f      	b.n	80108f6 <_dtoa_r+0x7f6>
 8010a16:	f04f 0800 	mov.w	r8, #0
 8010a1a:	e7f6      	b.n	8010a0a <_dtoa_r+0x90a>
 8010a1c:	4698      	mov	r8, r3
 8010a1e:	e7f4      	b.n	8010a0a <_dtoa_r+0x90a>
 8010a20:	f43f af7d 	beq.w	801091e <_dtoa_r+0x81e>
 8010a24:	4618      	mov	r0, r3
 8010a26:	301c      	adds	r0, #28
 8010a28:	e772      	b.n	8010910 <_dtoa_r+0x810>
 8010a2a:	9b08      	ldr	r3, [sp, #32]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	dc36      	bgt.n	8010a9e <_dtoa_r+0x99e>
 8010a30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010a32:	2b02      	cmp	r3, #2
 8010a34:	dd33      	ble.n	8010a9e <_dtoa_r+0x99e>
 8010a36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010a3a:	f1b9 0f00 	cmp.w	r9, #0
 8010a3e:	d10d      	bne.n	8010a5c <_dtoa_r+0x95c>
 8010a40:	4621      	mov	r1, r4
 8010a42:	464b      	mov	r3, r9
 8010a44:	2205      	movs	r2, #5
 8010a46:	4628      	mov	r0, r5
 8010a48:	f000 fbfa 	bl	8011240 <__multadd>
 8010a4c:	4601      	mov	r1, r0
 8010a4e:	4604      	mov	r4, r0
 8010a50:	4658      	mov	r0, fp
 8010a52:	f000 fe11 	bl	8011678 <__mcmp>
 8010a56:	2800      	cmp	r0, #0
 8010a58:	f73f adb8 	bgt.w	80105cc <_dtoa_r+0x4cc>
 8010a5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010a5e:	9f03      	ldr	r7, [sp, #12]
 8010a60:	ea6f 0a03 	mvn.w	sl, r3
 8010a64:	f04f 0800 	mov.w	r8, #0
 8010a68:	4621      	mov	r1, r4
 8010a6a:	4628      	mov	r0, r5
 8010a6c:	f000 fbc6 	bl	80111fc <_Bfree>
 8010a70:	2e00      	cmp	r6, #0
 8010a72:	f43f aea7 	beq.w	80107c4 <_dtoa_r+0x6c4>
 8010a76:	f1b8 0f00 	cmp.w	r8, #0
 8010a7a:	d005      	beq.n	8010a88 <_dtoa_r+0x988>
 8010a7c:	45b0      	cmp	r8, r6
 8010a7e:	d003      	beq.n	8010a88 <_dtoa_r+0x988>
 8010a80:	4641      	mov	r1, r8
 8010a82:	4628      	mov	r0, r5
 8010a84:	f000 fbba 	bl	80111fc <_Bfree>
 8010a88:	4631      	mov	r1, r6
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	f000 fbb6 	bl	80111fc <_Bfree>
 8010a90:	e698      	b.n	80107c4 <_dtoa_r+0x6c4>
 8010a92:	2400      	movs	r4, #0
 8010a94:	4626      	mov	r6, r4
 8010a96:	e7e1      	b.n	8010a5c <_dtoa_r+0x95c>
 8010a98:	46c2      	mov	sl, r8
 8010a9a:	4626      	mov	r6, r4
 8010a9c:	e596      	b.n	80105cc <_dtoa_r+0x4cc>
 8010a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010aa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f000 80fd 	beq.w	8010ca4 <_dtoa_r+0xba4>
 8010aaa:	2f00      	cmp	r7, #0
 8010aac:	dd05      	ble.n	8010aba <_dtoa_r+0x9ba>
 8010aae:	4631      	mov	r1, r6
 8010ab0:	463a      	mov	r2, r7
 8010ab2:	4628      	mov	r0, r5
 8010ab4:	f000 fd70 	bl	8011598 <__lshift>
 8010ab8:	4606      	mov	r6, r0
 8010aba:	f1b8 0f00 	cmp.w	r8, #0
 8010abe:	d05c      	beq.n	8010b7a <_dtoa_r+0xa7a>
 8010ac0:	4628      	mov	r0, r5
 8010ac2:	6871      	ldr	r1, [r6, #4]
 8010ac4:	f000 fb5a 	bl	801117c <_Balloc>
 8010ac8:	4607      	mov	r7, r0
 8010aca:	b928      	cbnz	r0, 8010ad8 <_dtoa_r+0x9d8>
 8010acc:	4602      	mov	r2, r0
 8010ace:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010ad2:	4b7f      	ldr	r3, [pc, #508]	; (8010cd0 <_dtoa_r+0xbd0>)
 8010ad4:	f7ff bb28 	b.w	8010128 <_dtoa_r+0x28>
 8010ad8:	6932      	ldr	r2, [r6, #16]
 8010ada:	f106 010c 	add.w	r1, r6, #12
 8010ade:	3202      	adds	r2, #2
 8010ae0:	0092      	lsls	r2, r2, #2
 8010ae2:	300c      	adds	r0, #12
 8010ae4:	f7fe fb74 	bl	800f1d0 <memcpy>
 8010ae8:	2201      	movs	r2, #1
 8010aea:	4639      	mov	r1, r7
 8010aec:	4628      	mov	r0, r5
 8010aee:	f000 fd53 	bl	8011598 <__lshift>
 8010af2:	46b0      	mov	r8, r6
 8010af4:	4606      	mov	r6, r0
 8010af6:	9b03      	ldr	r3, [sp, #12]
 8010af8:	3301      	adds	r3, #1
 8010afa:	9308      	str	r3, [sp, #32]
 8010afc:	9b03      	ldr	r3, [sp, #12]
 8010afe:	444b      	add	r3, r9
 8010b00:	930a      	str	r3, [sp, #40]	; 0x28
 8010b02:	9b04      	ldr	r3, [sp, #16]
 8010b04:	f003 0301 	and.w	r3, r3, #1
 8010b08:	9309      	str	r3, [sp, #36]	; 0x24
 8010b0a:	9b08      	ldr	r3, [sp, #32]
 8010b0c:	4621      	mov	r1, r4
 8010b0e:	3b01      	subs	r3, #1
 8010b10:	4658      	mov	r0, fp
 8010b12:	9304      	str	r3, [sp, #16]
 8010b14:	f7ff fa65 	bl	800ffe2 <quorem>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	4641      	mov	r1, r8
 8010b1c:	3330      	adds	r3, #48	; 0x30
 8010b1e:	9006      	str	r0, [sp, #24]
 8010b20:	4658      	mov	r0, fp
 8010b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b24:	f000 fda8 	bl	8011678 <__mcmp>
 8010b28:	4632      	mov	r2, r6
 8010b2a:	4681      	mov	r9, r0
 8010b2c:	4621      	mov	r1, r4
 8010b2e:	4628      	mov	r0, r5
 8010b30:	f000 fdbe 	bl	80116b0 <__mdiff>
 8010b34:	68c2      	ldr	r2, [r0, #12]
 8010b36:	4607      	mov	r7, r0
 8010b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b3a:	bb02      	cbnz	r2, 8010b7e <_dtoa_r+0xa7e>
 8010b3c:	4601      	mov	r1, r0
 8010b3e:	4658      	mov	r0, fp
 8010b40:	f000 fd9a 	bl	8011678 <__mcmp>
 8010b44:	4602      	mov	r2, r0
 8010b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b48:	4639      	mov	r1, r7
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8010b50:	f000 fb54 	bl	80111fc <_Bfree>
 8010b54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b58:	9f08      	ldr	r7, [sp, #32]
 8010b5a:	ea43 0102 	orr.w	r1, r3, r2
 8010b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b60:	430b      	orrs	r3, r1
 8010b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b64:	d10d      	bne.n	8010b82 <_dtoa_r+0xa82>
 8010b66:	2b39      	cmp	r3, #57	; 0x39
 8010b68:	d029      	beq.n	8010bbe <_dtoa_r+0xabe>
 8010b6a:	f1b9 0f00 	cmp.w	r9, #0
 8010b6e:	dd01      	ble.n	8010b74 <_dtoa_r+0xa74>
 8010b70:	9b06      	ldr	r3, [sp, #24]
 8010b72:	3331      	adds	r3, #49	; 0x31
 8010b74:	9a04      	ldr	r2, [sp, #16]
 8010b76:	7013      	strb	r3, [r2, #0]
 8010b78:	e776      	b.n	8010a68 <_dtoa_r+0x968>
 8010b7a:	4630      	mov	r0, r6
 8010b7c:	e7b9      	b.n	8010af2 <_dtoa_r+0x9f2>
 8010b7e:	2201      	movs	r2, #1
 8010b80:	e7e2      	b.n	8010b48 <_dtoa_r+0xa48>
 8010b82:	f1b9 0f00 	cmp.w	r9, #0
 8010b86:	db06      	blt.n	8010b96 <_dtoa_r+0xa96>
 8010b88:	9922      	ldr	r1, [sp, #136]	; 0x88
 8010b8a:	ea41 0909 	orr.w	r9, r1, r9
 8010b8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b90:	ea59 0101 	orrs.w	r1, r9, r1
 8010b94:	d120      	bne.n	8010bd8 <_dtoa_r+0xad8>
 8010b96:	2a00      	cmp	r2, #0
 8010b98:	ddec      	ble.n	8010b74 <_dtoa_r+0xa74>
 8010b9a:	4659      	mov	r1, fp
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	9308      	str	r3, [sp, #32]
 8010ba2:	f000 fcf9 	bl	8011598 <__lshift>
 8010ba6:	4621      	mov	r1, r4
 8010ba8:	4683      	mov	fp, r0
 8010baa:	f000 fd65 	bl	8011678 <__mcmp>
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	9b08      	ldr	r3, [sp, #32]
 8010bb2:	dc02      	bgt.n	8010bba <_dtoa_r+0xaba>
 8010bb4:	d1de      	bne.n	8010b74 <_dtoa_r+0xa74>
 8010bb6:	07da      	lsls	r2, r3, #31
 8010bb8:	d5dc      	bpl.n	8010b74 <_dtoa_r+0xa74>
 8010bba:	2b39      	cmp	r3, #57	; 0x39
 8010bbc:	d1d8      	bne.n	8010b70 <_dtoa_r+0xa70>
 8010bbe:	2339      	movs	r3, #57	; 0x39
 8010bc0:	9a04      	ldr	r2, [sp, #16]
 8010bc2:	7013      	strb	r3, [r2, #0]
 8010bc4:	463b      	mov	r3, r7
 8010bc6:	461f      	mov	r7, r3
 8010bc8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8010bcc:	3b01      	subs	r3, #1
 8010bce:	2a39      	cmp	r2, #57	; 0x39
 8010bd0:	d050      	beq.n	8010c74 <_dtoa_r+0xb74>
 8010bd2:	3201      	adds	r2, #1
 8010bd4:	701a      	strb	r2, [r3, #0]
 8010bd6:	e747      	b.n	8010a68 <_dtoa_r+0x968>
 8010bd8:	2a00      	cmp	r2, #0
 8010bda:	dd03      	ble.n	8010be4 <_dtoa_r+0xae4>
 8010bdc:	2b39      	cmp	r3, #57	; 0x39
 8010bde:	d0ee      	beq.n	8010bbe <_dtoa_r+0xabe>
 8010be0:	3301      	adds	r3, #1
 8010be2:	e7c7      	b.n	8010b74 <_dtoa_r+0xa74>
 8010be4:	9a08      	ldr	r2, [sp, #32]
 8010be6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010be8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010bec:	428a      	cmp	r2, r1
 8010bee:	d02a      	beq.n	8010c46 <_dtoa_r+0xb46>
 8010bf0:	4659      	mov	r1, fp
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	220a      	movs	r2, #10
 8010bf6:	4628      	mov	r0, r5
 8010bf8:	f000 fb22 	bl	8011240 <__multadd>
 8010bfc:	45b0      	cmp	r8, r6
 8010bfe:	4683      	mov	fp, r0
 8010c00:	f04f 0300 	mov.w	r3, #0
 8010c04:	f04f 020a 	mov.w	r2, #10
 8010c08:	4641      	mov	r1, r8
 8010c0a:	4628      	mov	r0, r5
 8010c0c:	d107      	bne.n	8010c1e <_dtoa_r+0xb1e>
 8010c0e:	f000 fb17 	bl	8011240 <__multadd>
 8010c12:	4680      	mov	r8, r0
 8010c14:	4606      	mov	r6, r0
 8010c16:	9b08      	ldr	r3, [sp, #32]
 8010c18:	3301      	adds	r3, #1
 8010c1a:	9308      	str	r3, [sp, #32]
 8010c1c:	e775      	b.n	8010b0a <_dtoa_r+0xa0a>
 8010c1e:	f000 fb0f 	bl	8011240 <__multadd>
 8010c22:	4631      	mov	r1, r6
 8010c24:	4680      	mov	r8, r0
 8010c26:	2300      	movs	r3, #0
 8010c28:	220a      	movs	r2, #10
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	f000 fb08 	bl	8011240 <__multadd>
 8010c30:	4606      	mov	r6, r0
 8010c32:	e7f0      	b.n	8010c16 <_dtoa_r+0xb16>
 8010c34:	f1b9 0f00 	cmp.w	r9, #0
 8010c38:	bfcc      	ite	gt
 8010c3a:	464f      	movgt	r7, r9
 8010c3c:	2701      	movle	r7, #1
 8010c3e:	f04f 0800 	mov.w	r8, #0
 8010c42:	9a03      	ldr	r2, [sp, #12]
 8010c44:	4417      	add	r7, r2
 8010c46:	4659      	mov	r1, fp
 8010c48:	2201      	movs	r2, #1
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	9308      	str	r3, [sp, #32]
 8010c4e:	f000 fca3 	bl	8011598 <__lshift>
 8010c52:	4621      	mov	r1, r4
 8010c54:	4683      	mov	fp, r0
 8010c56:	f000 fd0f 	bl	8011678 <__mcmp>
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	dcb2      	bgt.n	8010bc4 <_dtoa_r+0xac4>
 8010c5e:	d102      	bne.n	8010c66 <_dtoa_r+0xb66>
 8010c60:	9b08      	ldr	r3, [sp, #32]
 8010c62:	07db      	lsls	r3, r3, #31
 8010c64:	d4ae      	bmi.n	8010bc4 <_dtoa_r+0xac4>
 8010c66:	463b      	mov	r3, r7
 8010c68:	461f      	mov	r7, r3
 8010c6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c6e:	2a30      	cmp	r2, #48	; 0x30
 8010c70:	d0fa      	beq.n	8010c68 <_dtoa_r+0xb68>
 8010c72:	e6f9      	b.n	8010a68 <_dtoa_r+0x968>
 8010c74:	9a03      	ldr	r2, [sp, #12]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d1a5      	bne.n	8010bc6 <_dtoa_r+0xac6>
 8010c7a:	2331      	movs	r3, #49	; 0x31
 8010c7c:	f10a 0a01 	add.w	sl, sl, #1
 8010c80:	e779      	b.n	8010b76 <_dtoa_r+0xa76>
 8010c82:	4b14      	ldr	r3, [pc, #80]	; (8010cd4 <_dtoa_r+0xbd4>)
 8010c84:	f7ff baa8 	b.w	80101d8 <_dtoa_r+0xd8>
 8010c88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	f47f aa81 	bne.w	8010192 <_dtoa_r+0x92>
 8010c90:	4b11      	ldr	r3, [pc, #68]	; (8010cd8 <_dtoa_r+0xbd8>)
 8010c92:	f7ff baa1 	b.w	80101d8 <_dtoa_r+0xd8>
 8010c96:	f1b9 0f00 	cmp.w	r9, #0
 8010c9a:	dc03      	bgt.n	8010ca4 <_dtoa_r+0xba4>
 8010c9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c9e:	2b02      	cmp	r3, #2
 8010ca0:	f73f aecb 	bgt.w	8010a3a <_dtoa_r+0x93a>
 8010ca4:	9f03      	ldr	r7, [sp, #12]
 8010ca6:	4621      	mov	r1, r4
 8010ca8:	4658      	mov	r0, fp
 8010caa:	f7ff f99a 	bl	800ffe2 <quorem>
 8010cae:	9a03      	ldr	r2, [sp, #12]
 8010cb0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010cb4:	f807 3b01 	strb.w	r3, [r7], #1
 8010cb8:	1aba      	subs	r2, r7, r2
 8010cba:	4591      	cmp	r9, r2
 8010cbc:	ddba      	ble.n	8010c34 <_dtoa_r+0xb34>
 8010cbe:	4659      	mov	r1, fp
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	220a      	movs	r2, #10
 8010cc4:	4628      	mov	r0, r5
 8010cc6:	f000 fabb 	bl	8011240 <__multadd>
 8010cca:	4683      	mov	fp, r0
 8010ccc:	e7eb      	b.n	8010ca6 <_dtoa_r+0xba6>
 8010cce:	bf00      	nop
 8010cd0:	08014a2c 	.word	0x08014a2c
 8010cd4:	08014989 	.word	0x08014989
 8010cd8:	080149ad 	.word	0x080149ad

08010cdc <__sflush_r>:
 8010cdc:	898a      	ldrh	r2, [r1, #12]
 8010cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ce0:	4605      	mov	r5, r0
 8010ce2:	0710      	lsls	r0, r2, #28
 8010ce4:	460c      	mov	r4, r1
 8010ce6:	d457      	bmi.n	8010d98 <__sflush_r+0xbc>
 8010ce8:	684b      	ldr	r3, [r1, #4]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	dc04      	bgt.n	8010cf8 <__sflush_r+0x1c>
 8010cee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	dc01      	bgt.n	8010cf8 <__sflush_r+0x1c>
 8010cf4:	2000      	movs	r0, #0
 8010cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cfa:	2e00      	cmp	r6, #0
 8010cfc:	d0fa      	beq.n	8010cf4 <__sflush_r+0x18>
 8010cfe:	2300      	movs	r3, #0
 8010d00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d04:	682f      	ldr	r7, [r5, #0]
 8010d06:	602b      	str	r3, [r5, #0]
 8010d08:	d032      	beq.n	8010d70 <__sflush_r+0x94>
 8010d0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010d0c:	89a3      	ldrh	r3, [r4, #12]
 8010d0e:	075a      	lsls	r2, r3, #29
 8010d10:	d505      	bpl.n	8010d1e <__sflush_r+0x42>
 8010d12:	6863      	ldr	r3, [r4, #4]
 8010d14:	1ac0      	subs	r0, r0, r3
 8010d16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d18:	b10b      	cbz	r3, 8010d1e <__sflush_r+0x42>
 8010d1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010d1c:	1ac0      	subs	r0, r0, r3
 8010d1e:	2300      	movs	r3, #0
 8010d20:	4602      	mov	r2, r0
 8010d22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d24:	4628      	mov	r0, r5
 8010d26:	6a21      	ldr	r1, [r4, #32]
 8010d28:	47b0      	blx	r6
 8010d2a:	1c43      	adds	r3, r0, #1
 8010d2c:	89a3      	ldrh	r3, [r4, #12]
 8010d2e:	d106      	bne.n	8010d3e <__sflush_r+0x62>
 8010d30:	6829      	ldr	r1, [r5, #0]
 8010d32:	291d      	cmp	r1, #29
 8010d34:	d82c      	bhi.n	8010d90 <__sflush_r+0xb4>
 8010d36:	4a29      	ldr	r2, [pc, #164]	; (8010ddc <__sflush_r+0x100>)
 8010d38:	40ca      	lsrs	r2, r1
 8010d3a:	07d6      	lsls	r6, r2, #31
 8010d3c:	d528      	bpl.n	8010d90 <__sflush_r+0xb4>
 8010d3e:	2200      	movs	r2, #0
 8010d40:	6062      	str	r2, [r4, #4]
 8010d42:	6922      	ldr	r2, [r4, #16]
 8010d44:	04d9      	lsls	r1, r3, #19
 8010d46:	6022      	str	r2, [r4, #0]
 8010d48:	d504      	bpl.n	8010d54 <__sflush_r+0x78>
 8010d4a:	1c42      	adds	r2, r0, #1
 8010d4c:	d101      	bne.n	8010d52 <__sflush_r+0x76>
 8010d4e:	682b      	ldr	r3, [r5, #0]
 8010d50:	b903      	cbnz	r3, 8010d54 <__sflush_r+0x78>
 8010d52:	6560      	str	r0, [r4, #84]	; 0x54
 8010d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d56:	602f      	str	r7, [r5, #0]
 8010d58:	2900      	cmp	r1, #0
 8010d5a:	d0cb      	beq.n	8010cf4 <__sflush_r+0x18>
 8010d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d60:	4299      	cmp	r1, r3
 8010d62:	d002      	beq.n	8010d6a <__sflush_r+0x8e>
 8010d64:	4628      	mov	r0, r5
 8010d66:	f000 fd9f 	bl	80118a8 <_free_r>
 8010d6a:	2000      	movs	r0, #0
 8010d6c:	6360      	str	r0, [r4, #52]	; 0x34
 8010d6e:	e7c2      	b.n	8010cf6 <__sflush_r+0x1a>
 8010d70:	6a21      	ldr	r1, [r4, #32]
 8010d72:	2301      	movs	r3, #1
 8010d74:	4628      	mov	r0, r5
 8010d76:	47b0      	blx	r6
 8010d78:	1c41      	adds	r1, r0, #1
 8010d7a:	d1c7      	bne.n	8010d0c <__sflush_r+0x30>
 8010d7c:	682b      	ldr	r3, [r5, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d0c4      	beq.n	8010d0c <__sflush_r+0x30>
 8010d82:	2b1d      	cmp	r3, #29
 8010d84:	d001      	beq.n	8010d8a <__sflush_r+0xae>
 8010d86:	2b16      	cmp	r3, #22
 8010d88:	d101      	bne.n	8010d8e <__sflush_r+0xb2>
 8010d8a:	602f      	str	r7, [r5, #0]
 8010d8c:	e7b2      	b.n	8010cf4 <__sflush_r+0x18>
 8010d8e:	89a3      	ldrh	r3, [r4, #12]
 8010d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d94:	81a3      	strh	r3, [r4, #12]
 8010d96:	e7ae      	b.n	8010cf6 <__sflush_r+0x1a>
 8010d98:	690f      	ldr	r7, [r1, #16]
 8010d9a:	2f00      	cmp	r7, #0
 8010d9c:	d0aa      	beq.n	8010cf4 <__sflush_r+0x18>
 8010d9e:	0793      	lsls	r3, r2, #30
 8010da0:	bf18      	it	ne
 8010da2:	2300      	movne	r3, #0
 8010da4:	680e      	ldr	r6, [r1, #0]
 8010da6:	bf08      	it	eq
 8010da8:	694b      	ldreq	r3, [r1, #20]
 8010daa:	1bf6      	subs	r6, r6, r7
 8010dac:	600f      	str	r7, [r1, #0]
 8010dae:	608b      	str	r3, [r1, #8]
 8010db0:	2e00      	cmp	r6, #0
 8010db2:	dd9f      	ble.n	8010cf4 <__sflush_r+0x18>
 8010db4:	4633      	mov	r3, r6
 8010db6:	463a      	mov	r2, r7
 8010db8:	4628      	mov	r0, r5
 8010dba:	6a21      	ldr	r1, [r4, #32]
 8010dbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8010dc0:	47e0      	blx	ip
 8010dc2:	2800      	cmp	r0, #0
 8010dc4:	dc06      	bgt.n	8010dd4 <__sflush_r+0xf8>
 8010dc6:	89a3      	ldrh	r3, [r4, #12]
 8010dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8010dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dd0:	81a3      	strh	r3, [r4, #12]
 8010dd2:	e790      	b.n	8010cf6 <__sflush_r+0x1a>
 8010dd4:	4407      	add	r7, r0
 8010dd6:	1a36      	subs	r6, r6, r0
 8010dd8:	e7ea      	b.n	8010db0 <__sflush_r+0xd4>
 8010dda:	bf00      	nop
 8010ddc:	20400001 	.word	0x20400001

08010de0 <_fflush_r>:
 8010de0:	b538      	push	{r3, r4, r5, lr}
 8010de2:	690b      	ldr	r3, [r1, #16]
 8010de4:	4605      	mov	r5, r0
 8010de6:	460c      	mov	r4, r1
 8010de8:	b913      	cbnz	r3, 8010df0 <_fflush_r+0x10>
 8010dea:	2500      	movs	r5, #0
 8010dec:	4628      	mov	r0, r5
 8010dee:	bd38      	pop	{r3, r4, r5, pc}
 8010df0:	b118      	cbz	r0, 8010dfa <_fflush_r+0x1a>
 8010df2:	6983      	ldr	r3, [r0, #24]
 8010df4:	b90b      	cbnz	r3, 8010dfa <_fflush_r+0x1a>
 8010df6:	f000 f887 	bl	8010f08 <__sinit>
 8010dfa:	4b14      	ldr	r3, [pc, #80]	; (8010e4c <_fflush_r+0x6c>)
 8010dfc:	429c      	cmp	r4, r3
 8010dfe:	d11b      	bne.n	8010e38 <_fflush_r+0x58>
 8010e00:	686c      	ldr	r4, [r5, #4]
 8010e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d0ef      	beq.n	8010dea <_fflush_r+0xa>
 8010e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010e0c:	07d0      	lsls	r0, r2, #31
 8010e0e:	d404      	bmi.n	8010e1a <_fflush_r+0x3a>
 8010e10:	0599      	lsls	r1, r3, #22
 8010e12:	d402      	bmi.n	8010e1a <_fflush_r+0x3a>
 8010e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e16:	f000 f91a 	bl	801104e <__retarget_lock_acquire_recursive>
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	4621      	mov	r1, r4
 8010e1e:	f7ff ff5d 	bl	8010cdc <__sflush_r>
 8010e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e24:	4605      	mov	r5, r0
 8010e26:	07da      	lsls	r2, r3, #31
 8010e28:	d4e0      	bmi.n	8010dec <_fflush_r+0xc>
 8010e2a:	89a3      	ldrh	r3, [r4, #12]
 8010e2c:	059b      	lsls	r3, r3, #22
 8010e2e:	d4dd      	bmi.n	8010dec <_fflush_r+0xc>
 8010e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e32:	f000 f90d 	bl	8011050 <__retarget_lock_release_recursive>
 8010e36:	e7d9      	b.n	8010dec <_fflush_r+0xc>
 8010e38:	4b05      	ldr	r3, [pc, #20]	; (8010e50 <_fflush_r+0x70>)
 8010e3a:	429c      	cmp	r4, r3
 8010e3c:	d101      	bne.n	8010e42 <_fflush_r+0x62>
 8010e3e:	68ac      	ldr	r4, [r5, #8]
 8010e40:	e7df      	b.n	8010e02 <_fflush_r+0x22>
 8010e42:	4b04      	ldr	r3, [pc, #16]	; (8010e54 <_fflush_r+0x74>)
 8010e44:	429c      	cmp	r4, r3
 8010e46:	bf08      	it	eq
 8010e48:	68ec      	ldreq	r4, [r5, #12]
 8010e4a:	e7da      	b.n	8010e02 <_fflush_r+0x22>
 8010e4c:	08014a60 	.word	0x08014a60
 8010e50:	08014a80 	.word	0x08014a80
 8010e54:	08014a40 	.word	0x08014a40

08010e58 <std>:
 8010e58:	2300      	movs	r3, #0
 8010e5a:	b510      	push	{r4, lr}
 8010e5c:	4604      	mov	r4, r0
 8010e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8010e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e66:	6083      	str	r3, [r0, #8]
 8010e68:	8181      	strh	r1, [r0, #12]
 8010e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8010e6c:	81c2      	strh	r2, [r0, #14]
 8010e6e:	6183      	str	r3, [r0, #24]
 8010e70:	4619      	mov	r1, r3
 8010e72:	2208      	movs	r2, #8
 8010e74:	305c      	adds	r0, #92	; 0x5c
 8010e76:	f7fe f9b9 	bl	800f1ec <memset>
 8010e7a:	4b05      	ldr	r3, [pc, #20]	; (8010e90 <std+0x38>)
 8010e7c:	6224      	str	r4, [r4, #32]
 8010e7e:	6263      	str	r3, [r4, #36]	; 0x24
 8010e80:	4b04      	ldr	r3, [pc, #16]	; (8010e94 <std+0x3c>)
 8010e82:	62a3      	str	r3, [r4, #40]	; 0x28
 8010e84:	4b04      	ldr	r3, [pc, #16]	; (8010e98 <std+0x40>)
 8010e86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010e88:	4b04      	ldr	r3, [pc, #16]	; (8010e9c <std+0x44>)
 8010e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8010e8c:	bd10      	pop	{r4, pc}
 8010e8e:	bf00      	nop
 8010e90:	08011ead 	.word	0x08011ead
 8010e94:	08011ecf 	.word	0x08011ecf
 8010e98:	08011f07 	.word	0x08011f07
 8010e9c:	08011f2b 	.word	0x08011f2b

08010ea0 <_cleanup_r>:
 8010ea0:	4901      	ldr	r1, [pc, #4]	; (8010ea8 <_cleanup_r+0x8>)
 8010ea2:	f000 b8af 	b.w	8011004 <_fwalk_reent>
 8010ea6:	bf00      	nop
 8010ea8:	08010de1 	.word	0x08010de1

08010eac <__sfmoreglue>:
 8010eac:	2268      	movs	r2, #104	; 0x68
 8010eae:	b570      	push	{r4, r5, r6, lr}
 8010eb0:	1e4d      	subs	r5, r1, #1
 8010eb2:	4355      	muls	r5, r2
 8010eb4:	460e      	mov	r6, r1
 8010eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010eba:	f000 fd5d 	bl	8011978 <_malloc_r>
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	b140      	cbz	r0, 8010ed4 <__sfmoreglue+0x28>
 8010ec2:	2100      	movs	r1, #0
 8010ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8010ec8:	300c      	adds	r0, #12
 8010eca:	60a0      	str	r0, [r4, #8]
 8010ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010ed0:	f7fe f98c 	bl	800f1ec <memset>
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	bd70      	pop	{r4, r5, r6, pc}

08010ed8 <__sfp_lock_acquire>:
 8010ed8:	4801      	ldr	r0, [pc, #4]	; (8010ee0 <__sfp_lock_acquire+0x8>)
 8010eda:	f000 b8b8 	b.w	801104e <__retarget_lock_acquire_recursive>
 8010ede:	bf00      	nop
 8010ee0:	20003b85 	.word	0x20003b85

08010ee4 <__sfp_lock_release>:
 8010ee4:	4801      	ldr	r0, [pc, #4]	; (8010eec <__sfp_lock_release+0x8>)
 8010ee6:	f000 b8b3 	b.w	8011050 <__retarget_lock_release_recursive>
 8010eea:	bf00      	nop
 8010eec:	20003b85 	.word	0x20003b85

08010ef0 <__sinit_lock_acquire>:
 8010ef0:	4801      	ldr	r0, [pc, #4]	; (8010ef8 <__sinit_lock_acquire+0x8>)
 8010ef2:	f000 b8ac 	b.w	801104e <__retarget_lock_acquire_recursive>
 8010ef6:	bf00      	nop
 8010ef8:	20003b86 	.word	0x20003b86

08010efc <__sinit_lock_release>:
 8010efc:	4801      	ldr	r0, [pc, #4]	; (8010f04 <__sinit_lock_release+0x8>)
 8010efe:	f000 b8a7 	b.w	8011050 <__retarget_lock_release_recursive>
 8010f02:	bf00      	nop
 8010f04:	20003b86 	.word	0x20003b86

08010f08 <__sinit>:
 8010f08:	b510      	push	{r4, lr}
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	f7ff fff0 	bl	8010ef0 <__sinit_lock_acquire>
 8010f10:	69a3      	ldr	r3, [r4, #24]
 8010f12:	b11b      	cbz	r3, 8010f1c <__sinit+0x14>
 8010f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f18:	f7ff bff0 	b.w	8010efc <__sinit_lock_release>
 8010f1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010f20:	6523      	str	r3, [r4, #80]	; 0x50
 8010f22:	4b13      	ldr	r3, [pc, #76]	; (8010f70 <__sinit+0x68>)
 8010f24:	4a13      	ldr	r2, [pc, #76]	; (8010f74 <__sinit+0x6c>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	62a2      	str	r2, [r4, #40]	; 0x28
 8010f2a:	42a3      	cmp	r3, r4
 8010f2c:	bf08      	it	eq
 8010f2e:	2301      	moveq	r3, #1
 8010f30:	4620      	mov	r0, r4
 8010f32:	bf08      	it	eq
 8010f34:	61a3      	streq	r3, [r4, #24]
 8010f36:	f000 f81f 	bl	8010f78 <__sfp>
 8010f3a:	6060      	str	r0, [r4, #4]
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	f000 f81b 	bl	8010f78 <__sfp>
 8010f42:	60a0      	str	r0, [r4, #8]
 8010f44:	4620      	mov	r0, r4
 8010f46:	f000 f817 	bl	8010f78 <__sfp>
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	2104      	movs	r1, #4
 8010f4e:	60e0      	str	r0, [r4, #12]
 8010f50:	6860      	ldr	r0, [r4, #4]
 8010f52:	f7ff ff81 	bl	8010e58 <std>
 8010f56:	2201      	movs	r2, #1
 8010f58:	2109      	movs	r1, #9
 8010f5a:	68a0      	ldr	r0, [r4, #8]
 8010f5c:	f7ff ff7c 	bl	8010e58 <std>
 8010f60:	2202      	movs	r2, #2
 8010f62:	2112      	movs	r1, #18
 8010f64:	68e0      	ldr	r0, [r4, #12]
 8010f66:	f7ff ff77 	bl	8010e58 <std>
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	61a3      	str	r3, [r4, #24]
 8010f6e:	e7d1      	b.n	8010f14 <__sinit+0xc>
 8010f70:	08014964 	.word	0x08014964
 8010f74:	08010ea1 	.word	0x08010ea1

08010f78 <__sfp>:
 8010f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f7a:	4607      	mov	r7, r0
 8010f7c:	f7ff ffac 	bl	8010ed8 <__sfp_lock_acquire>
 8010f80:	4b1e      	ldr	r3, [pc, #120]	; (8010ffc <__sfp+0x84>)
 8010f82:	681e      	ldr	r6, [r3, #0]
 8010f84:	69b3      	ldr	r3, [r6, #24]
 8010f86:	b913      	cbnz	r3, 8010f8e <__sfp+0x16>
 8010f88:	4630      	mov	r0, r6
 8010f8a:	f7ff ffbd 	bl	8010f08 <__sinit>
 8010f8e:	3648      	adds	r6, #72	; 0x48
 8010f90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010f94:	3b01      	subs	r3, #1
 8010f96:	d503      	bpl.n	8010fa0 <__sfp+0x28>
 8010f98:	6833      	ldr	r3, [r6, #0]
 8010f9a:	b30b      	cbz	r3, 8010fe0 <__sfp+0x68>
 8010f9c:	6836      	ldr	r6, [r6, #0]
 8010f9e:	e7f7      	b.n	8010f90 <__sfp+0x18>
 8010fa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010fa4:	b9d5      	cbnz	r5, 8010fdc <__sfp+0x64>
 8010fa6:	4b16      	ldr	r3, [pc, #88]	; (8011000 <__sfp+0x88>)
 8010fa8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010fac:	60e3      	str	r3, [r4, #12]
 8010fae:	6665      	str	r5, [r4, #100]	; 0x64
 8010fb0:	f000 f84c 	bl	801104c <__retarget_lock_init_recursive>
 8010fb4:	f7ff ff96 	bl	8010ee4 <__sfp_lock_release>
 8010fb8:	2208      	movs	r2, #8
 8010fba:	4629      	mov	r1, r5
 8010fbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010fc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010fc4:	6025      	str	r5, [r4, #0]
 8010fc6:	61a5      	str	r5, [r4, #24]
 8010fc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010fcc:	f7fe f90e 	bl	800f1ec <memset>
 8010fd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010fd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010fd8:	4620      	mov	r0, r4
 8010fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fdc:	3468      	adds	r4, #104	; 0x68
 8010fde:	e7d9      	b.n	8010f94 <__sfp+0x1c>
 8010fe0:	2104      	movs	r1, #4
 8010fe2:	4638      	mov	r0, r7
 8010fe4:	f7ff ff62 	bl	8010eac <__sfmoreglue>
 8010fe8:	4604      	mov	r4, r0
 8010fea:	6030      	str	r0, [r6, #0]
 8010fec:	2800      	cmp	r0, #0
 8010fee:	d1d5      	bne.n	8010f9c <__sfp+0x24>
 8010ff0:	f7ff ff78 	bl	8010ee4 <__sfp_lock_release>
 8010ff4:	230c      	movs	r3, #12
 8010ff6:	603b      	str	r3, [r7, #0]
 8010ff8:	e7ee      	b.n	8010fd8 <__sfp+0x60>
 8010ffa:	bf00      	nop
 8010ffc:	08014964 	.word	0x08014964
 8011000:	ffff0001 	.word	0xffff0001

08011004 <_fwalk_reent>:
 8011004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011008:	4606      	mov	r6, r0
 801100a:	4688      	mov	r8, r1
 801100c:	2700      	movs	r7, #0
 801100e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011016:	f1b9 0901 	subs.w	r9, r9, #1
 801101a:	d505      	bpl.n	8011028 <_fwalk_reent+0x24>
 801101c:	6824      	ldr	r4, [r4, #0]
 801101e:	2c00      	cmp	r4, #0
 8011020:	d1f7      	bne.n	8011012 <_fwalk_reent+0xe>
 8011022:	4638      	mov	r0, r7
 8011024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011028:	89ab      	ldrh	r3, [r5, #12]
 801102a:	2b01      	cmp	r3, #1
 801102c:	d907      	bls.n	801103e <_fwalk_reent+0x3a>
 801102e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011032:	3301      	adds	r3, #1
 8011034:	d003      	beq.n	801103e <_fwalk_reent+0x3a>
 8011036:	4629      	mov	r1, r5
 8011038:	4630      	mov	r0, r6
 801103a:	47c0      	blx	r8
 801103c:	4307      	orrs	r7, r0
 801103e:	3568      	adds	r5, #104	; 0x68
 8011040:	e7e9      	b.n	8011016 <_fwalk_reent+0x12>
	...

08011044 <_localeconv_r>:
 8011044:	4800      	ldr	r0, [pc, #0]	; (8011048 <_localeconv_r+0x4>)
 8011046:	4770      	bx	lr
 8011048:	200001b8 	.word	0x200001b8

0801104c <__retarget_lock_init_recursive>:
 801104c:	4770      	bx	lr

0801104e <__retarget_lock_acquire_recursive>:
 801104e:	4770      	bx	lr

08011050 <__retarget_lock_release_recursive>:
 8011050:	4770      	bx	lr

08011052 <__swhatbuf_r>:
 8011052:	b570      	push	{r4, r5, r6, lr}
 8011054:	460e      	mov	r6, r1
 8011056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801105a:	4614      	mov	r4, r2
 801105c:	2900      	cmp	r1, #0
 801105e:	461d      	mov	r5, r3
 8011060:	b096      	sub	sp, #88	; 0x58
 8011062:	da08      	bge.n	8011076 <__swhatbuf_r+0x24>
 8011064:	2200      	movs	r2, #0
 8011066:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801106a:	602a      	str	r2, [r5, #0]
 801106c:	061a      	lsls	r2, r3, #24
 801106e:	d410      	bmi.n	8011092 <__swhatbuf_r+0x40>
 8011070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011074:	e00e      	b.n	8011094 <__swhatbuf_r+0x42>
 8011076:	466a      	mov	r2, sp
 8011078:	f000 ff7e 	bl	8011f78 <_fstat_r>
 801107c:	2800      	cmp	r0, #0
 801107e:	dbf1      	blt.n	8011064 <__swhatbuf_r+0x12>
 8011080:	9a01      	ldr	r2, [sp, #4]
 8011082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801108a:	425a      	negs	r2, r3
 801108c:	415a      	adcs	r2, r3
 801108e:	602a      	str	r2, [r5, #0]
 8011090:	e7ee      	b.n	8011070 <__swhatbuf_r+0x1e>
 8011092:	2340      	movs	r3, #64	; 0x40
 8011094:	2000      	movs	r0, #0
 8011096:	6023      	str	r3, [r4, #0]
 8011098:	b016      	add	sp, #88	; 0x58
 801109a:	bd70      	pop	{r4, r5, r6, pc}

0801109c <__smakebuf_r>:
 801109c:	898b      	ldrh	r3, [r1, #12]
 801109e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80110a0:	079d      	lsls	r5, r3, #30
 80110a2:	4606      	mov	r6, r0
 80110a4:	460c      	mov	r4, r1
 80110a6:	d507      	bpl.n	80110b8 <__smakebuf_r+0x1c>
 80110a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80110ac:	6023      	str	r3, [r4, #0]
 80110ae:	6123      	str	r3, [r4, #16]
 80110b0:	2301      	movs	r3, #1
 80110b2:	6163      	str	r3, [r4, #20]
 80110b4:	b002      	add	sp, #8
 80110b6:	bd70      	pop	{r4, r5, r6, pc}
 80110b8:	466a      	mov	r2, sp
 80110ba:	ab01      	add	r3, sp, #4
 80110bc:	f7ff ffc9 	bl	8011052 <__swhatbuf_r>
 80110c0:	9900      	ldr	r1, [sp, #0]
 80110c2:	4605      	mov	r5, r0
 80110c4:	4630      	mov	r0, r6
 80110c6:	f000 fc57 	bl	8011978 <_malloc_r>
 80110ca:	b948      	cbnz	r0, 80110e0 <__smakebuf_r+0x44>
 80110cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110d0:	059a      	lsls	r2, r3, #22
 80110d2:	d4ef      	bmi.n	80110b4 <__smakebuf_r+0x18>
 80110d4:	f023 0303 	bic.w	r3, r3, #3
 80110d8:	f043 0302 	orr.w	r3, r3, #2
 80110dc:	81a3      	strh	r3, [r4, #12]
 80110de:	e7e3      	b.n	80110a8 <__smakebuf_r+0xc>
 80110e0:	4b0d      	ldr	r3, [pc, #52]	; (8011118 <__smakebuf_r+0x7c>)
 80110e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80110e4:	89a3      	ldrh	r3, [r4, #12]
 80110e6:	6020      	str	r0, [r4, #0]
 80110e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110ec:	81a3      	strh	r3, [r4, #12]
 80110ee:	9b00      	ldr	r3, [sp, #0]
 80110f0:	6120      	str	r0, [r4, #16]
 80110f2:	6163      	str	r3, [r4, #20]
 80110f4:	9b01      	ldr	r3, [sp, #4]
 80110f6:	b15b      	cbz	r3, 8011110 <__smakebuf_r+0x74>
 80110f8:	4630      	mov	r0, r6
 80110fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110fe:	f000 ff4d 	bl	8011f9c <_isatty_r>
 8011102:	b128      	cbz	r0, 8011110 <__smakebuf_r+0x74>
 8011104:	89a3      	ldrh	r3, [r4, #12]
 8011106:	f023 0303 	bic.w	r3, r3, #3
 801110a:	f043 0301 	orr.w	r3, r3, #1
 801110e:	81a3      	strh	r3, [r4, #12]
 8011110:	89a0      	ldrh	r0, [r4, #12]
 8011112:	4305      	orrs	r5, r0
 8011114:	81a5      	strh	r5, [r4, #12]
 8011116:	e7cd      	b.n	80110b4 <__smakebuf_r+0x18>
 8011118:	08010ea1 	.word	0x08010ea1

0801111c <malloc>:
 801111c:	4b02      	ldr	r3, [pc, #8]	; (8011128 <malloc+0xc>)
 801111e:	4601      	mov	r1, r0
 8011120:	6818      	ldr	r0, [r3, #0]
 8011122:	f000 bc29 	b.w	8011978 <_malloc_r>
 8011126:	bf00      	nop
 8011128:	20000064 	.word	0x20000064

0801112c <memchr>:
 801112c:	4603      	mov	r3, r0
 801112e:	b510      	push	{r4, lr}
 8011130:	b2c9      	uxtb	r1, r1
 8011132:	4402      	add	r2, r0
 8011134:	4293      	cmp	r3, r2
 8011136:	4618      	mov	r0, r3
 8011138:	d101      	bne.n	801113e <memchr+0x12>
 801113a:	2000      	movs	r0, #0
 801113c:	e003      	b.n	8011146 <memchr+0x1a>
 801113e:	7804      	ldrb	r4, [r0, #0]
 8011140:	3301      	adds	r3, #1
 8011142:	428c      	cmp	r4, r1
 8011144:	d1f6      	bne.n	8011134 <memchr+0x8>
 8011146:	bd10      	pop	{r4, pc}

08011148 <memmove>:
 8011148:	4288      	cmp	r0, r1
 801114a:	b510      	push	{r4, lr}
 801114c:	eb01 0402 	add.w	r4, r1, r2
 8011150:	d902      	bls.n	8011158 <memmove+0x10>
 8011152:	4284      	cmp	r4, r0
 8011154:	4623      	mov	r3, r4
 8011156:	d807      	bhi.n	8011168 <memmove+0x20>
 8011158:	1e43      	subs	r3, r0, #1
 801115a:	42a1      	cmp	r1, r4
 801115c:	d008      	beq.n	8011170 <memmove+0x28>
 801115e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011162:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011166:	e7f8      	b.n	801115a <memmove+0x12>
 8011168:	4601      	mov	r1, r0
 801116a:	4402      	add	r2, r0
 801116c:	428a      	cmp	r2, r1
 801116e:	d100      	bne.n	8011172 <memmove+0x2a>
 8011170:	bd10      	pop	{r4, pc}
 8011172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801117a:	e7f7      	b.n	801116c <memmove+0x24>

0801117c <_Balloc>:
 801117c:	b570      	push	{r4, r5, r6, lr}
 801117e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011180:	4604      	mov	r4, r0
 8011182:	460d      	mov	r5, r1
 8011184:	b976      	cbnz	r6, 80111a4 <_Balloc+0x28>
 8011186:	2010      	movs	r0, #16
 8011188:	f7ff ffc8 	bl	801111c <malloc>
 801118c:	4602      	mov	r2, r0
 801118e:	6260      	str	r0, [r4, #36]	; 0x24
 8011190:	b920      	cbnz	r0, 801119c <_Balloc+0x20>
 8011192:	2166      	movs	r1, #102	; 0x66
 8011194:	4b17      	ldr	r3, [pc, #92]	; (80111f4 <_Balloc+0x78>)
 8011196:	4818      	ldr	r0, [pc, #96]	; (80111f8 <_Balloc+0x7c>)
 8011198:	f7fd ffc0 	bl	800f11c <__assert_func>
 801119c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111a0:	6006      	str	r6, [r0, #0]
 80111a2:	60c6      	str	r6, [r0, #12]
 80111a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80111a6:	68f3      	ldr	r3, [r6, #12]
 80111a8:	b183      	cbz	r3, 80111cc <_Balloc+0x50>
 80111aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80111b2:	b9b8      	cbnz	r0, 80111e4 <_Balloc+0x68>
 80111b4:	2101      	movs	r1, #1
 80111b6:	fa01 f605 	lsl.w	r6, r1, r5
 80111ba:	1d72      	adds	r2, r6, #5
 80111bc:	4620      	mov	r0, r4
 80111be:	0092      	lsls	r2, r2, #2
 80111c0:	f000 fb5e 	bl	8011880 <_calloc_r>
 80111c4:	b160      	cbz	r0, 80111e0 <_Balloc+0x64>
 80111c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80111ca:	e00e      	b.n	80111ea <_Balloc+0x6e>
 80111cc:	2221      	movs	r2, #33	; 0x21
 80111ce:	2104      	movs	r1, #4
 80111d0:	4620      	mov	r0, r4
 80111d2:	f000 fb55 	bl	8011880 <_calloc_r>
 80111d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111d8:	60f0      	str	r0, [r6, #12]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d1e4      	bne.n	80111aa <_Balloc+0x2e>
 80111e0:	2000      	movs	r0, #0
 80111e2:	bd70      	pop	{r4, r5, r6, pc}
 80111e4:	6802      	ldr	r2, [r0, #0]
 80111e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80111ea:	2300      	movs	r3, #0
 80111ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80111f0:	e7f7      	b.n	80111e2 <_Balloc+0x66>
 80111f2:	bf00      	nop
 80111f4:	080149ba 	.word	0x080149ba
 80111f8:	08014aa0 	.word	0x08014aa0

080111fc <_Bfree>:
 80111fc:	b570      	push	{r4, r5, r6, lr}
 80111fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011200:	4605      	mov	r5, r0
 8011202:	460c      	mov	r4, r1
 8011204:	b976      	cbnz	r6, 8011224 <_Bfree+0x28>
 8011206:	2010      	movs	r0, #16
 8011208:	f7ff ff88 	bl	801111c <malloc>
 801120c:	4602      	mov	r2, r0
 801120e:	6268      	str	r0, [r5, #36]	; 0x24
 8011210:	b920      	cbnz	r0, 801121c <_Bfree+0x20>
 8011212:	218a      	movs	r1, #138	; 0x8a
 8011214:	4b08      	ldr	r3, [pc, #32]	; (8011238 <_Bfree+0x3c>)
 8011216:	4809      	ldr	r0, [pc, #36]	; (801123c <_Bfree+0x40>)
 8011218:	f7fd ff80 	bl	800f11c <__assert_func>
 801121c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011220:	6006      	str	r6, [r0, #0]
 8011222:	60c6      	str	r6, [r0, #12]
 8011224:	b13c      	cbz	r4, 8011236 <_Bfree+0x3a>
 8011226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011228:	6862      	ldr	r2, [r4, #4]
 801122a:	68db      	ldr	r3, [r3, #12]
 801122c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011230:	6021      	str	r1, [r4, #0]
 8011232:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011236:	bd70      	pop	{r4, r5, r6, pc}
 8011238:	080149ba 	.word	0x080149ba
 801123c:	08014aa0 	.word	0x08014aa0

08011240 <__multadd>:
 8011240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011244:	4607      	mov	r7, r0
 8011246:	460c      	mov	r4, r1
 8011248:	461e      	mov	r6, r3
 801124a:	2000      	movs	r0, #0
 801124c:	690d      	ldr	r5, [r1, #16]
 801124e:	f101 0c14 	add.w	ip, r1, #20
 8011252:	f8dc 3000 	ldr.w	r3, [ip]
 8011256:	3001      	adds	r0, #1
 8011258:	b299      	uxth	r1, r3
 801125a:	fb02 6101 	mla	r1, r2, r1, r6
 801125e:	0c1e      	lsrs	r6, r3, #16
 8011260:	0c0b      	lsrs	r3, r1, #16
 8011262:	fb02 3306 	mla	r3, r2, r6, r3
 8011266:	b289      	uxth	r1, r1
 8011268:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801126c:	4285      	cmp	r5, r0
 801126e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011272:	f84c 1b04 	str.w	r1, [ip], #4
 8011276:	dcec      	bgt.n	8011252 <__multadd+0x12>
 8011278:	b30e      	cbz	r6, 80112be <__multadd+0x7e>
 801127a:	68a3      	ldr	r3, [r4, #8]
 801127c:	42ab      	cmp	r3, r5
 801127e:	dc19      	bgt.n	80112b4 <__multadd+0x74>
 8011280:	6861      	ldr	r1, [r4, #4]
 8011282:	4638      	mov	r0, r7
 8011284:	3101      	adds	r1, #1
 8011286:	f7ff ff79 	bl	801117c <_Balloc>
 801128a:	4680      	mov	r8, r0
 801128c:	b928      	cbnz	r0, 801129a <__multadd+0x5a>
 801128e:	4602      	mov	r2, r0
 8011290:	21b5      	movs	r1, #181	; 0xb5
 8011292:	4b0c      	ldr	r3, [pc, #48]	; (80112c4 <__multadd+0x84>)
 8011294:	480c      	ldr	r0, [pc, #48]	; (80112c8 <__multadd+0x88>)
 8011296:	f7fd ff41 	bl	800f11c <__assert_func>
 801129a:	6922      	ldr	r2, [r4, #16]
 801129c:	f104 010c 	add.w	r1, r4, #12
 80112a0:	3202      	adds	r2, #2
 80112a2:	0092      	lsls	r2, r2, #2
 80112a4:	300c      	adds	r0, #12
 80112a6:	f7fd ff93 	bl	800f1d0 <memcpy>
 80112aa:	4621      	mov	r1, r4
 80112ac:	4638      	mov	r0, r7
 80112ae:	f7ff ffa5 	bl	80111fc <_Bfree>
 80112b2:	4644      	mov	r4, r8
 80112b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80112b8:	3501      	adds	r5, #1
 80112ba:	615e      	str	r6, [r3, #20]
 80112bc:	6125      	str	r5, [r4, #16]
 80112be:	4620      	mov	r0, r4
 80112c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c4:	08014a2c 	.word	0x08014a2c
 80112c8:	08014aa0 	.word	0x08014aa0

080112cc <__hi0bits>:
 80112cc:	0c02      	lsrs	r2, r0, #16
 80112ce:	0412      	lsls	r2, r2, #16
 80112d0:	4603      	mov	r3, r0
 80112d2:	b9ca      	cbnz	r2, 8011308 <__hi0bits+0x3c>
 80112d4:	0403      	lsls	r3, r0, #16
 80112d6:	2010      	movs	r0, #16
 80112d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80112dc:	bf04      	itt	eq
 80112de:	021b      	lsleq	r3, r3, #8
 80112e0:	3008      	addeq	r0, #8
 80112e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80112e6:	bf04      	itt	eq
 80112e8:	011b      	lsleq	r3, r3, #4
 80112ea:	3004      	addeq	r0, #4
 80112ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80112f0:	bf04      	itt	eq
 80112f2:	009b      	lsleq	r3, r3, #2
 80112f4:	3002      	addeq	r0, #2
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	db05      	blt.n	8011306 <__hi0bits+0x3a>
 80112fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80112fe:	f100 0001 	add.w	r0, r0, #1
 8011302:	bf08      	it	eq
 8011304:	2020      	moveq	r0, #32
 8011306:	4770      	bx	lr
 8011308:	2000      	movs	r0, #0
 801130a:	e7e5      	b.n	80112d8 <__hi0bits+0xc>

0801130c <__lo0bits>:
 801130c:	6803      	ldr	r3, [r0, #0]
 801130e:	4602      	mov	r2, r0
 8011310:	f013 0007 	ands.w	r0, r3, #7
 8011314:	d00b      	beq.n	801132e <__lo0bits+0x22>
 8011316:	07d9      	lsls	r1, r3, #31
 8011318:	d421      	bmi.n	801135e <__lo0bits+0x52>
 801131a:	0798      	lsls	r0, r3, #30
 801131c:	bf49      	itett	mi
 801131e:	085b      	lsrmi	r3, r3, #1
 8011320:	089b      	lsrpl	r3, r3, #2
 8011322:	2001      	movmi	r0, #1
 8011324:	6013      	strmi	r3, [r2, #0]
 8011326:	bf5c      	itt	pl
 8011328:	2002      	movpl	r0, #2
 801132a:	6013      	strpl	r3, [r2, #0]
 801132c:	4770      	bx	lr
 801132e:	b299      	uxth	r1, r3
 8011330:	b909      	cbnz	r1, 8011336 <__lo0bits+0x2a>
 8011332:	2010      	movs	r0, #16
 8011334:	0c1b      	lsrs	r3, r3, #16
 8011336:	b2d9      	uxtb	r1, r3
 8011338:	b909      	cbnz	r1, 801133e <__lo0bits+0x32>
 801133a:	3008      	adds	r0, #8
 801133c:	0a1b      	lsrs	r3, r3, #8
 801133e:	0719      	lsls	r1, r3, #28
 8011340:	bf04      	itt	eq
 8011342:	091b      	lsreq	r3, r3, #4
 8011344:	3004      	addeq	r0, #4
 8011346:	0799      	lsls	r1, r3, #30
 8011348:	bf04      	itt	eq
 801134a:	089b      	lsreq	r3, r3, #2
 801134c:	3002      	addeq	r0, #2
 801134e:	07d9      	lsls	r1, r3, #31
 8011350:	d403      	bmi.n	801135a <__lo0bits+0x4e>
 8011352:	085b      	lsrs	r3, r3, #1
 8011354:	f100 0001 	add.w	r0, r0, #1
 8011358:	d003      	beq.n	8011362 <__lo0bits+0x56>
 801135a:	6013      	str	r3, [r2, #0]
 801135c:	4770      	bx	lr
 801135e:	2000      	movs	r0, #0
 8011360:	4770      	bx	lr
 8011362:	2020      	movs	r0, #32
 8011364:	4770      	bx	lr
	...

08011368 <__i2b>:
 8011368:	b510      	push	{r4, lr}
 801136a:	460c      	mov	r4, r1
 801136c:	2101      	movs	r1, #1
 801136e:	f7ff ff05 	bl	801117c <_Balloc>
 8011372:	4602      	mov	r2, r0
 8011374:	b928      	cbnz	r0, 8011382 <__i2b+0x1a>
 8011376:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801137a:	4b04      	ldr	r3, [pc, #16]	; (801138c <__i2b+0x24>)
 801137c:	4804      	ldr	r0, [pc, #16]	; (8011390 <__i2b+0x28>)
 801137e:	f7fd fecd 	bl	800f11c <__assert_func>
 8011382:	2301      	movs	r3, #1
 8011384:	6144      	str	r4, [r0, #20]
 8011386:	6103      	str	r3, [r0, #16]
 8011388:	bd10      	pop	{r4, pc}
 801138a:	bf00      	nop
 801138c:	08014a2c 	.word	0x08014a2c
 8011390:	08014aa0 	.word	0x08014aa0

08011394 <__multiply>:
 8011394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011398:	4691      	mov	r9, r2
 801139a:	690a      	ldr	r2, [r1, #16]
 801139c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80113a0:	460c      	mov	r4, r1
 80113a2:	429a      	cmp	r2, r3
 80113a4:	bfbe      	ittt	lt
 80113a6:	460b      	movlt	r3, r1
 80113a8:	464c      	movlt	r4, r9
 80113aa:	4699      	movlt	r9, r3
 80113ac:	6927      	ldr	r7, [r4, #16]
 80113ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80113b2:	68a3      	ldr	r3, [r4, #8]
 80113b4:	6861      	ldr	r1, [r4, #4]
 80113b6:	eb07 060a 	add.w	r6, r7, sl
 80113ba:	42b3      	cmp	r3, r6
 80113bc:	b085      	sub	sp, #20
 80113be:	bfb8      	it	lt
 80113c0:	3101      	addlt	r1, #1
 80113c2:	f7ff fedb 	bl	801117c <_Balloc>
 80113c6:	b930      	cbnz	r0, 80113d6 <__multiply+0x42>
 80113c8:	4602      	mov	r2, r0
 80113ca:	f240 115d 	movw	r1, #349	; 0x15d
 80113ce:	4b43      	ldr	r3, [pc, #268]	; (80114dc <__multiply+0x148>)
 80113d0:	4843      	ldr	r0, [pc, #268]	; (80114e0 <__multiply+0x14c>)
 80113d2:	f7fd fea3 	bl	800f11c <__assert_func>
 80113d6:	f100 0514 	add.w	r5, r0, #20
 80113da:	462b      	mov	r3, r5
 80113dc:	2200      	movs	r2, #0
 80113de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80113e2:	4543      	cmp	r3, r8
 80113e4:	d321      	bcc.n	801142a <__multiply+0x96>
 80113e6:	f104 0314 	add.w	r3, r4, #20
 80113ea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80113ee:	f109 0314 	add.w	r3, r9, #20
 80113f2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80113f6:	9202      	str	r2, [sp, #8]
 80113f8:	1b3a      	subs	r2, r7, r4
 80113fa:	3a15      	subs	r2, #21
 80113fc:	f022 0203 	bic.w	r2, r2, #3
 8011400:	3204      	adds	r2, #4
 8011402:	f104 0115 	add.w	r1, r4, #21
 8011406:	428f      	cmp	r7, r1
 8011408:	bf38      	it	cc
 801140a:	2204      	movcc	r2, #4
 801140c:	9201      	str	r2, [sp, #4]
 801140e:	9a02      	ldr	r2, [sp, #8]
 8011410:	9303      	str	r3, [sp, #12]
 8011412:	429a      	cmp	r2, r3
 8011414:	d80c      	bhi.n	8011430 <__multiply+0x9c>
 8011416:	2e00      	cmp	r6, #0
 8011418:	dd03      	ble.n	8011422 <__multiply+0x8e>
 801141a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801141e:	2b00      	cmp	r3, #0
 8011420:	d059      	beq.n	80114d6 <__multiply+0x142>
 8011422:	6106      	str	r6, [r0, #16]
 8011424:	b005      	add	sp, #20
 8011426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801142a:	f843 2b04 	str.w	r2, [r3], #4
 801142e:	e7d8      	b.n	80113e2 <__multiply+0x4e>
 8011430:	f8b3 a000 	ldrh.w	sl, [r3]
 8011434:	f1ba 0f00 	cmp.w	sl, #0
 8011438:	d023      	beq.n	8011482 <__multiply+0xee>
 801143a:	46a9      	mov	r9, r5
 801143c:	f04f 0c00 	mov.w	ip, #0
 8011440:	f104 0e14 	add.w	lr, r4, #20
 8011444:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011448:	f8d9 1000 	ldr.w	r1, [r9]
 801144c:	fa1f fb82 	uxth.w	fp, r2
 8011450:	b289      	uxth	r1, r1
 8011452:	fb0a 110b 	mla	r1, sl, fp, r1
 8011456:	4461      	add	r1, ip
 8011458:	f8d9 c000 	ldr.w	ip, [r9]
 801145c:	0c12      	lsrs	r2, r2, #16
 801145e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8011462:	fb0a c202 	mla	r2, sl, r2, ip
 8011466:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801146a:	b289      	uxth	r1, r1
 801146c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011470:	4577      	cmp	r7, lr
 8011472:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011476:	f849 1b04 	str.w	r1, [r9], #4
 801147a:	d8e3      	bhi.n	8011444 <__multiply+0xb0>
 801147c:	9a01      	ldr	r2, [sp, #4]
 801147e:	f845 c002 	str.w	ip, [r5, r2]
 8011482:	9a03      	ldr	r2, [sp, #12]
 8011484:	3304      	adds	r3, #4
 8011486:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801148a:	f1b9 0f00 	cmp.w	r9, #0
 801148e:	d020      	beq.n	80114d2 <__multiply+0x13e>
 8011490:	46ae      	mov	lr, r5
 8011492:	f04f 0a00 	mov.w	sl, #0
 8011496:	6829      	ldr	r1, [r5, #0]
 8011498:	f104 0c14 	add.w	ip, r4, #20
 801149c:	f8bc b000 	ldrh.w	fp, [ip]
 80114a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80114a4:	b289      	uxth	r1, r1
 80114a6:	fb09 220b 	mla	r2, r9, fp, r2
 80114aa:	4492      	add	sl, r2
 80114ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80114b0:	f84e 1b04 	str.w	r1, [lr], #4
 80114b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80114b8:	f8be 1000 	ldrh.w	r1, [lr]
 80114bc:	0c12      	lsrs	r2, r2, #16
 80114be:	fb09 1102 	mla	r1, r9, r2, r1
 80114c2:	4567      	cmp	r7, ip
 80114c4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80114c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80114cc:	d8e6      	bhi.n	801149c <__multiply+0x108>
 80114ce:	9a01      	ldr	r2, [sp, #4]
 80114d0:	50a9      	str	r1, [r5, r2]
 80114d2:	3504      	adds	r5, #4
 80114d4:	e79b      	b.n	801140e <__multiply+0x7a>
 80114d6:	3e01      	subs	r6, #1
 80114d8:	e79d      	b.n	8011416 <__multiply+0x82>
 80114da:	bf00      	nop
 80114dc:	08014a2c 	.word	0x08014a2c
 80114e0:	08014aa0 	.word	0x08014aa0

080114e4 <__pow5mult>:
 80114e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114e8:	4615      	mov	r5, r2
 80114ea:	f012 0203 	ands.w	r2, r2, #3
 80114ee:	4606      	mov	r6, r0
 80114f0:	460f      	mov	r7, r1
 80114f2:	d007      	beq.n	8011504 <__pow5mult+0x20>
 80114f4:	4c25      	ldr	r4, [pc, #148]	; (801158c <__pow5mult+0xa8>)
 80114f6:	3a01      	subs	r2, #1
 80114f8:	2300      	movs	r3, #0
 80114fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80114fe:	f7ff fe9f 	bl	8011240 <__multadd>
 8011502:	4607      	mov	r7, r0
 8011504:	10ad      	asrs	r5, r5, #2
 8011506:	d03d      	beq.n	8011584 <__pow5mult+0xa0>
 8011508:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801150a:	b97c      	cbnz	r4, 801152c <__pow5mult+0x48>
 801150c:	2010      	movs	r0, #16
 801150e:	f7ff fe05 	bl	801111c <malloc>
 8011512:	4602      	mov	r2, r0
 8011514:	6270      	str	r0, [r6, #36]	; 0x24
 8011516:	b928      	cbnz	r0, 8011524 <__pow5mult+0x40>
 8011518:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801151c:	4b1c      	ldr	r3, [pc, #112]	; (8011590 <__pow5mult+0xac>)
 801151e:	481d      	ldr	r0, [pc, #116]	; (8011594 <__pow5mult+0xb0>)
 8011520:	f7fd fdfc 	bl	800f11c <__assert_func>
 8011524:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011528:	6004      	str	r4, [r0, #0]
 801152a:	60c4      	str	r4, [r0, #12]
 801152c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011530:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011534:	b94c      	cbnz	r4, 801154a <__pow5mult+0x66>
 8011536:	f240 2171 	movw	r1, #625	; 0x271
 801153a:	4630      	mov	r0, r6
 801153c:	f7ff ff14 	bl	8011368 <__i2b>
 8011540:	2300      	movs	r3, #0
 8011542:	4604      	mov	r4, r0
 8011544:	f8c8 0008 	str.w	r0, [r8, #8]
 8011548:	6003      	str	r3, [r0, #0]
 801154a:	f04f 0900 	mov.w	r9, #0
 801154e:	07eb      	lsls	r3, r5, #31
 8011550:	d50a      	bpl.n	8011568 <__pow5mult+0x84>
 8011552:	4639      	mov	r1, r7
 8011554:	4622      	mov	r2, r4
 8011556:	4630      	mov	r0, r6
 8011558:	f7ff ff1c 	bl	8011394 <__multiply>
 801155c:	4680      	mov	r8, r0
 801155e:	4639      	mov	r1, r7
 8011560:	4630      	mov	r0, r6
 8011562:	f7ff fe4b 	bl	80111fc <_Bfree>
 8011566:	4647      	mov	r7, r8
 8011568:	106d      	asrs	r5, r5, #1
 801156a:	d00b      	beq.n	8011584 <__pow5mult+0xa0>
 801156c:	6820      	ldr	r0, [r4, #0]
 801156e:	b938      	cbnz	r0, 8011580 <__pow5mult+0x9c>
 8011570:	4622      	mov	r2, r4
 8011572:	4621      	mov	r1, r4
 8011574:	4630      	mov	r0, r6
 8011576:	f7ff ff0d 	bl	8011394 <__multiply>
 801157a:	6020      	str	r0, [r4, #0]
 801157c:	f8c0 9000 	str.w	r9, [r0]
 8011580:	4604      	mov	r4, r0
 8011582:	e7e4      	b.n	801154e <__pow5mult+0x6a>
 8011584:	4638      	mov	r0, r7
 8011586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801158a:	bf00      	nop
 801158c:	08014bf0 	.word	0x08014bf0
 8011590:	080149ba 	.word	0x080149ba
 8011594:	08014aa0 	.word	0x08014aa0

08011598 <__lshift>:
 8011598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801159c:	460c      	mov	r4, r1
 801159e:	4607      	mov	r7, r0
 80115a0:	4691      	mov	r9, r2
 80115a2:	6923      	ldr	r3, [r4, #16]
 80115a4:	6849      	ldr	r1, [r1, #4]
 80115a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80115aa:	68a3      	ldr	r3, [r4, #8]
 80115ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80115b0:	f108 0601 	add.w	r6, r8, #1
 80115b4:	42b3      	cmp	r3, r6
 80115b6:	db0b      	blt.n	80115d0 <__lshift+0x38>
 80115b8:	4638      	mov	r0, r7
 80115ba:	f7ff fddf 	bl	801117c <_Balloc>
 80115be:	4605      	mov	r5, r0
 80115c0:	b948      	cbnz	r0, 80115d6 <__lshift+0x3e>
 80115c2:	4602      	mov	r2, r0
 80115c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80115c8:	4b29      	ldr	r3, [pc, #164]	; (8011670 <__lshift+0xd8>)
 80115ca:	482a      	ldr	r0, [pc, #168]	; (8011674 <__lshift+0xdc>)
 80115cc:	f7fd fda6 	bl	800f11c <__assert_func>
 80115d0:	3101      	adds	r1, #1
 80115d2:	005b      	lsls	r3, r3, #1
 80115d4:	e7ee      	b.n	80115b4 <__lshift+0x1c>
 80115d6:	2300      	movs	r3, #0
 80115d8:	f100 0114 	add.w	r1, r0, #20
 80115dc:	f100 0210 	add.w	r2, r0, #16
 80115e0:	4618      	mov	r0, r3
 80115e2:	4553      	cmp	r3, sl
 80115e4:	db37      	blt.n	8011656 <__lshift+0xbe>
 80115e6:	6920      	ldr	r0, [r4, #16]
 80115e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80115ec:	f104 0314 	add.w	r3, r4, #20
 80115f0:	f019 091f 	ands.w	r9, r9, #31
 80115f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80115f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80115fc:	d02f      	beq.n	801165e <__lshift+0xc6>
 80115fe:	468a      	mov	sl, r1
 8011600:	f04f 0c00 	mov.w	ip, #0
 8011604:	f1c9 0e20 	rsb	lr, r9, #32
 8011608:	681a      	ldr	r2, [r3, #0]
 801160a:	fa02 f209 	lsl.w	r2, r2, r9
 801160e:	ea42 020c 	orr.w	r2, r2, ip
 8011612:	f84a 2b04 	str.w	r2, [sl], #4
 8011616:	f853 2b04 	ldr.w	r2, [r3], #4
 801161a:	4298      	cmp	r0, r3
 801161c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011620:	d8f2      	bhi.n	8011608 <__lshift+0x70>
 8011622:	1b03      	subs	r3, r0, r4
 8011624:	3b15      	subs	r3, #21
 8011626:	f023 0303 	bic.w	r3, r3, #3
 801162a:	3304      	adds	r3, #4
 801162c:	f104 0215 	add.w	r2, r4, #21
 8011630:	4290      	cmp	r0, r2
 8011632:	bf38      	it	cc
 8011634:	2304      	movcc	r3, #4
 8011636:	f841 c003 	str.w	ip, [r1, r3]
 801163a:	f1bc 0f00 	cmp.w	ip, #0
 801163e:	d001      	beq.n	8011644 <__lshift+0xac>
 8011640:	f108 0602 	add.w	r6, r8, #2
 8011644:	3e01      	subs	r6, #1
 8011646:	4638      	mov	r0, r7
 8011648:	4621      	mov	r1, r4
 801164a:	612e      	str	r6, [r5, #16]
 801164c:	f7ff fdd6 	bl	80111fc <_Bfree>
 8011650:	4628      	mov	r0, r5
 8011652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011656:	f842 0f04 	str.w	r0, [r2, #4]!
 801165a:	3301      	adds	r3, #1
 801165c:	e7c1      	b.n	80115e2 <__lshift+0x4a>
 801165e:	3904      	subs	r1, #4
 8011660:	f853 2b04 	ldr.w	r2, [r3], #4
 8011664:	4298      	cmp	r0, r3
 8011666:	f841 2f04 	str.w	r2, [r1, #4]!
 801166a:	d8f9      	bhi.n	8011660 <__lshift+0xc8>
 801166c:	e7ea      	b.n	8011644 <__lshift+0xac>
 801166e:	bf00      	nop
 8011670:	08014a2c 	.word	0x08014a2c
 8011674:	08014aa0 	.word	0x08014aa0

08011678 <__mcmp>:
 8011678:	4603      	mov	r3, r0
 801167a:	690a      	ldr	r2, [r1, #16]
 801167c:	6900      	ldr	r0, [r0, #16]
 801167e:	b530      	push	{r4, r5, lr}
 8011680:	1a80      	subs	r0, r0, r2
 8011682:	d10d      	bne.n	80116a0 <__mcmp+0x28>
 8011684:	3314      	adds	r3, #20
 8011686:	3114      	adds	r1, #20
 8011688:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801168c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011690:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011694:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011698:	4295      	cmp	r5, r2
 801169a:	d002      	beq.n	80116a2 <__mcmp+0x2a>
 801169c:	d304      	bcc.n	80116a8 <__mcmp+0x30>
 801169e:	2001      	movs	r0, #1
 80116a0:	bd30      	pop	{r4, r5, pc}
 80116a2:	42a3      	cmp	r3, r4
 80116a4:	d3f4      	bcc.n	8011690 <__mcmp+0x18>
 80116a6:	e7fb      	b.n	80116a0 <__mcmp+0x28>
 80116a8:	f04f 30ff 	mov.w	r0, #4294967295
 80116ac:	e7f8      	b.n	80116a0 <__mcmp+0x28>
	...

080116b0 <__mdiff>:
 80116b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b4:	460d      	mov	r5, r1
 80116b6:	4607      	mov	r7, r0
 80116b8:	4611      	mov	r1, r2
 80116ba:	4628      	mov	r0, r5
 80116bc:	4614      	mov	r4, r2
 80116be:	f7ff ffdb 	bl	8011678 <__mcmp>
 80116c2:	1e06      	subs	r6, r0, #0
 80116c4:	d111      	bne.n	80116ea <__mdiff+0x3a>
 80116c6:	4631      	mov	r1, r6
 80116c8:	4638      	mov	r0, r7
 80116ca:	f7ff fd57 	bl	801117c <_Balloc>
 80116ce:	4602      	mov	r2, r0
 80116d0:	b928      	cbnz	r0, 80116de <__mdiff+0x2e>
 80116d2:	f240 2132 	movw	r1, #562	; 0x232
 80116d6:	4b3a      	ldr	r3, [pc, #232]	; (80117c0 <__mdiff+0x110>)
 80116d8:	483a      	ldr	r0, [pc, #232]	; (80117c4 <__mdiff+0x114>)
 80116da:	f7fd fd1f 	bl	800f11c <__assert_func>
 80116de:	2301      	movs	r3, #1
 80116e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80116e4:	4610      	mov	r0, r2
 80116e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ea:	bfa4      	itt	ge
 80116ec:	4623      	movge	r3, r4
 80116ee:	462c      	movge	r4, r5
 80116f0:	4638      	mov	r0, r7
 80116f2:	6861      	ldr	r1, [r4, #4]
 80116f4:	bfa6      	itte	ge
 80116f6:	461d      	movge	r5, r3
 80116f8:	2600      	movge	r6, #0
 80116fa:	2601      	movlt	r6, #1
 80116fc:	f7ff fd3e 	bl	801117c <_Balloc>
 8011700:	4602      	mov	r2, r0
 8011702:	b918      	cbnz	r0, 801170c <__mdiff+0x5c>
 8011704:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011708:	4b2d      	ldr	r3, [pc, #180]	; (80117c0 <__mdiff+0x110>)
 801170a:	e7e5      	b.n	80116d8 <__mdiff+0x28>
 801170c:	f102 0814 	add.w	r8, r2, #20
 8011710:	46c2      	mov	sl, r8
 8011712:	f04f 0c00 	mov.w	ip, #0
 8011716:	6927      	ldr	r7, [r4, #16]
 8011718:	60c6      	str	r6, [r0, #12]
 801171a:	692e      	ldr	r6, [r5, #16]
 801171c:	f104 0014 	add.w	r0, r4, #20
 8011720:	f105 0914 	add.w	r9, r5, #20
 8011724:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8011728:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801172c:	3410      	adds	r4, #16
 801172e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8011732:	f859 3b04 	ldr.w	r3, [r9], #4
 8011736:	fa1f f18b 	uxth.w	r1, fp
 801173a:	448c      	add	ip, r1
 801173c:	b299      	uxth	r1, r3
 801173e:	0c1b      	lsrs	r3, r3, #16
 8011740:	ebac 0101 	sub.w	r1, ip, r1
 8011744:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011748:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801174c:	b289      	uxth	r1, r1
 801174e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8011752:	454e      	cmp	r6, r9
 8011754:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011758:	f84a 3b04 	str.w	r3, [sl], #4
 801175c:	d8e7      	bhi.n	801172e <__mdiff+0x7e>
 801175e:	1b73      	subs	r3, r6, r5
 8011760:	3b15      	subs	r3, #21
 8011762:	f023 0303 	bic.w	r3, r3, #3
 8011766:	3515      	adds	r5, #21
 8011768:	3304      	adds	r3, #4
 801176a:	42ae      	cmp	r6, r5
 801176c:	bf38      	it	cc
 801176e:	2304      	movcc	r3, #4
 8011770:	4418      	add	r0, r3
 8011772:	4443      	add	r3, r8
 8011774:	461e      	mov	r6, r3
 8011776:	4605      	mov	r5, r0
 8011778:	4575      	cmp	r5, lr
 801177a:	d30e      	bcc.n	801179a <__mdiff+0xea>
 801177c:	f10e 0103 	add.w	r1, lr, #3
 8011780:	1a09      	subs	r1, r1, r0
 8011782:	f021 0103 	bic.w	r1, r1, #3
 8011786:	3803      	subs	r0, #3
 8011788:	4586      	cmp	lr, r0
 801178a:	bf38      	it	cc
 801178c:	2100      	movcc	r1, #0
 801178e:	4419      	add	r1, r3
 8011790:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8011794:	b18b      	cbz	r3, 80117ba <__mdiff+0x10a>
 8011796:	6117      	str	r7, [r2, #16]
 8011798:	e7a4      	b.n	80116e4 <__mdiff+0x34>
 801179a:	f855 8b04 	ldr.w	r8, [r5], #4
 801179e:	fa1f f188 	uxth.w	r1, r8
 80117a2:	4461      	add	r1, ip
 80117a4:	140c      	asrs	r4, r1, #16
 80117a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80117aa:	b289      	uxth	r1, r1
 80117ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80117b0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80117b4:	f846 1b04 	str.w	r1, [r6], #4
 80117b8:	e7de      	b.n	8011778 <__mdiff+0xc8>
 80117ba:	3f01      	subs	r7, #1
 80117bc:	e7e8      	b.n	8011790 <__mdiff+0xe0>
 80117be:	bf00      	nop
 80117c0:	08014a2c 	.word	0x08014a2c
 80117c4:	08014aa0 	.word	0x08014aa0

080117c8 <__d2b>:
 80117c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80117cc:	2101      	movs	r1, #1
 80117ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80117d2:	4690      	mov	r8, r2
 80117d4:	461d      	mov	r5, r3
 80117d6:	f7ff fcd1 	bl	801117c <_Balloc>
 80117da:	4604      	mov	r4, r0
 80117dc:	b930      	cbnz	r0, 80117ec <__d2b+0x24>
 80117de:	4602      	mov	r2, r0
 80117e0:	f240 310a 	movw	r1, #778	; 0x30a
 80117e4:	4b24      	ldr	r3, [pc, #144]	; (8011878 <__d2b+0xb0>)
 80117e6:	4825      	ldr	r0, [pc, #148]	; (801187c <__d2b+0xb4>)
 80117e8:	f7fd fc98 	bl	800f11c <__assert_func>
 80117ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80117f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80117f4:	bb2d      	cbnz	r5, 8011842 <__d2b+0x7a>
 80117f6:	9301      	str	r3, [sp, #4]
 80117f8:	f1b8 0300 	subs.w	r3, r8, #0
 80117fc:	d026      	beq.n	801184c <__d2b+0x84>
 80117fe:	4668      	mov	r0, sp
 8011800:	9300      	str	r3, [sp, #0]
 8011802:	f7ff fd83 	bl	801130c <__lo0bits>
 8011806:	9900      	ldr	r1, [sp, #0]
 8011808:	b1f0      	cbz	r0, 8011848 <__d2b+0x80>
 801180a:	9a01      	ldr	r2, [sp, #4]
 801180c:	f1c0 0320 	rsb	r3, r0, #32
 8011810:	fa02 f303 	lsl.w	r3, r2, r3
 8011814:	430b      	orrs	r3, r1
 8011816:	40c2      	lsrs	r2, r0
 8011818:	6163      	str	r3, [r4, #20]
 801181a:	9201      	str	r2, [sp, #4]
 801181c:	9b01      	ldr	r3, [sp, #4]
 801181e:	2b00      	cmp	r3, #0
 8011820:	bf14      	ite	ne
 8011822:	2102      	movne	r1, #2
 8011824:	2101      	moveq	r1, #1
 8011826:	61a3      	str	r3, [r4, #24]
 8011828:	6121      	str	r1, [r4, #16]
 801182a:	b1c5      	cbz	r5, 801185e <__d2b+0x96>
 801182c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011830:	4405      	add	r5, r0
 8011832:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011836:	603d      	str	r5, [r7, #0]
 8011838:	6030      	str	r0, [r6, #0]
 801183a:	4620      	mov	r0, r4
 801183c:	b002      	add	sp, #8
 801183e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011846:	e7d6      	b.n	80117f6 <__d2b+0x2e>
 8011848:	6161      	str	r1, [r4, #20]
 801184a:	e7e7      	b.n	801181c <__d2b+0x54>
 801184c:	a801      	add	r0, sp, #4
 801184e:	f7ff fd5d 	bl	801130c <__lo0bits>
 8011852:	2101      	movs	r1, #1
 8011854:	9b01      	ldr	r3, [sp, #4]
 8011856:	6121      	str	r1, [r4, #16]
 8011858:	6163      	str	r3, [r4, #20]
 801185a:	3020      	adds	r0, #32
 801185c:	e7e5      	b.n	801182a <__d2b+0x62>
 801185e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8011862:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011866:	6038      	str	r0, [r7, #0]
 8011868:	6918      	ldr	r0, [r3, #16]
 801186a:	f7ff fd2f 	bl	80112cc <__hi0bits>
 801186e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8011872:	6031      	str	r1, [r6, #0]
 8011874:	e7e1      	b.n	801183a <__d2b+0x72>
 8011876:	bf00      	nop
 8011878:	08014a2c 	.word	0x08014a2c
 801187c:	08014aa0 	.word	0x08014aa0

08011880 <_calloc_r>:
 8011880:	b570      	push	{r4, r5, r6, lr}
 8011882:	fba1 5402 	umull	r5, r4, r1, r2
 8011886:	b934      	cbnz	r4, 8011896 <_calloc_r+0x16>
 8011888:	4629      	mov	r1, r5
 801188a:	f000 f875 	bl	8011978 <_malloc_r>
 801188e:	4606      	mov	r6, r0
 8011890:	b928      	cbnz	r0, 801189e <_calloc_r+0x1e>
 8011892:	4630      	mov	r0, r6
 8011894:	bd70      	pop	{r4, r5, r6, pc}
 8011896:	220c      	movs	r2, #12
 8011898:	2600      	movs	r6, #0
 801189a:	6002      	str	r2, [r0, #0]
 801189c:	e7f9      	b.n	8011892 <_calloc_r+0x12>
 801189e:	462a      	mov	r2, r5
 80118a0:	4621      	mov	r1, r4
 80118a2:	f7fd fca3 	bl	800f1ec <memset>
 80118a6:	e7f4      	b.n	8011892 <_calloc_r+0x12>

080118a8 <_free_r>:
 80118a8:	b538      	push	{r3, r4, r5, lr}
 80118aa:	4605      	mov	r5, r0
 80118ac:	2900      	cmp	r1, #0
 80118ae:	d040      	beq.n	8011932 <_free_r+0x8a>
 80118b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118b4:	1f0c      	subs	r4, r1, #4
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	bfb8      	it	lt
 80118ba:	18e4      	addlt	r4, r4, r3
 80118bc:	f000 fba2 	bl	8012004 <__malloc_lock>
 80118c0:	4a1c      	ldr	r2, [pc, #112]	; (8011934 <_free_r+0x8c>)
 80118c2:	6813      	ldr	r3, [r2, #0]
 80118c4:	b933      	cbnz	r3, 80118d4 <_free_r+0x2c>
 80118c6:	6063      	str	r3, [r4, #4]
 80118c8:	6014      	str	r4, [r2, #0]
 80118ca:	4628      	mov	r0, r5
 80118cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118d0:	f000 bb9e 	b.w	8012010 <__malloc_unlock>
 80118d4:	42a3      	cmp	r3, r4
 80118d6:	d908      	bls.n	80118ea <_free_r+0x42>
 80118d8:	6820      	ldr	r0, [r4, #0]
 80118da:	1821      	adds	r1, r4, r0
 80118dc:	428b      	cmp	r3, r1
 80118de:	bf01      	itttt	eq
 80118e0:	6819      	ldreq	r1, [r3, #0]
 80118e2:	685b      	ldreq	r3, [r3, #4]
 80118e4:	1809      	addeq	r1, r1, r0
 80118e6:	6021      	streq	r1, [r4, #0]
 80118e8:	e7ed      	b.n	80118c6 <_free_r+0x1e>
 80118ea:	461a      	mov	r2, r3
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	b10b      	cbz	r3, 80118f4 <_free_r+0x4c>
 80118f0:	42a3      	cmp	r3, r4
 80118f2:	d9fa      	bls.n	80118ea <_free_r+0x42>
 80118f4:	6811      	ldr	r1, [r2, #0]
 80118f6:	1850      	adds	r0, r2, r1
 80118f8:	42a0      	cmp	r0, r4
 80118fa:	d10b      	bne.n	8011914 <_free_r+0x6c>
 80118fc:	6820      	ldr	r0, [r4, #0]
 80118fe:	4401      	add	r1, r0
 8011900:	1850      	adds	r0, r2, r1
 8011902:	4283      	cmp	r3, r0
 8011904:	6011      	str	r1, [r2, #0]
 8011906:	d1e0      	bne.n	80118ca <_free_r+0x22>
 8011908:	6818      	ldr	r0, [r3, #0]
 801190a:	685b      	ldr	r3, [r3, #4]
 801190c:	4401      	add	r1, r0
 801190e:	6011      	str	r1, [r2, #0]
 8011910:	6053      	str	r3, [r2, #4]
 8011912:	e7da      	b.n	80118ca <_free_r+0x22>
 8011914:	d902      	bls.n	801191c <_free_r+0x74>
 8011916:	230c      	movs	r3, #12
 8011918:	602b      	str	r3, [r5, #0]
 801191a:	e7d6      	b.n	80118ca <_free_r+0x22>
 801191c:	6820      	ldr	r0, [r4, #0]
 801191e:	1821      	adds	r1, r4, r0
 8011920:	428b      	cmp	r3, r1
 8011922:	bf01      	itttt	eq
 8011924:	6819      	ldreq	r1, [r3, #0]
 8011926:	685b      	ldreq	r3, [r3, #4]
 8011928:	1809      	addeq	r1, r1, r0
 801192a:	6021      	streq	r1, [r4, #0]
 801192c:	6063      	str	r3, [r4, #4]
 801192e:	6054      	str	r4, [r2, #4]
 8011930:	e7cb      	b.n	80118ca <_free_r+0x22>
 8011932:	bd38      	pop	{r3, r4, r5, pc}
 8011934:	20003b88 	.word	0x20003b88

08011938 <sbrk_aligned>:
 8011938:	b570      	push	{r4, r5, r6, lr}
 801193a:	4e0e      	ldr	r6, [pc, #56]	; (8011974 <sbrk_aligned+0x3c>)
 801193c:	460c      	mov	r4, r1
 801193e:	6831      	ldr	r1, [r6, #0]
 8011940:	4605      	mov	r5, r0
 8011942:	b911      	cbnz	r1, 801194a <sbrk_aligned+0x12>
 8011944:	f000 fa5e 	bl	8011e04 <_sbrk_r>
 8011948:	6030      	str	r0, [r6, #0]
 801194a:	4621      	mov	r1, r4
 801194c:	4628      	mov	r0, r5
 801194e:	f000 fa59 	bl	8011e04 <_sbrk_r>
 8011952:	1c43      	adds	r3, r0, #1
 8011954:	d00a      	beq.n	801196c <sbrk_aligned+0x34>
 8011956:	1cc4      	adds	r4, r0, #3
 8011958:	f024 0403 	bic.w	r4, r4, #3
 801195c:	42a0      	cmp	r0, r4
 801195e:	d007      	beq.n	8011970 <sbrk_aligned+0x38>
 8011960:	1a21      	subs	r1, r4, r0
 8011962:	4628      	mov	r0, r5
 8011964:	f000 fa4e 	bl	8011e04 <_sbrk_r>
 8011968:	3001      	adds	r0, #1
 801196a:	d101      	bne.n	8011970 <sbrk_aligned+0x38>
 801196c:	f04f 34ff 	mov.w	r4, #4294967295
 8011970:	4620      	mov	r0, r4
 8011972:	bd70      	pop	{r4, r5, r6, pc}
 8011974:	20003b8c 	.word	0x20003b8c

08011978 <_malloc_r>:
 8011978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801197c:	1ccd      	adds	r5, r1, #3
 801197e:	f025 0503 	bic.w	r5, r5, #3
 8011982:	3508      	adds	r5, #8
 8011984:	2d0c      	cmp	r5, #12
 8011986:	bf38      	it	cc
 8011988:	250c      	movcc	r5, #12
 801198a:	2d00      	cmp	r5, #0
 801198c:	4607      	mov	r7, r0
 801198e:	db01      	blt.n	8011994 <_malloc_r+0x1c>
 8011990:	42a9      	cmp	r1, r5
 8011992:	d905      	bls.n	80119a0 <_malloc_r+0x28>
 8011994:	230c      	movs	r3, #12
 8011996:	2600      	movs	r6, #0
 8011998:	603b      	str	r3, [r7, #0]
 801199a:	4630      	mov	r0, r6
 801199c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119a0:	4e2e      	ldr	r6, [pc, #184]	; (8011a5c <_malloc_r+0xe4>)
 80119a2:	f000 fb2f 	bl	8012004 <__malloc_lock>
 80119a6:	6833      	ldr	r3, [r6, #0]
 80119a8:	461c      	mov	r4, r3
 80119aa:	bb34      	cbnz	r4, 80119fa <_malloc_r+0x82>
 80119ac:	4629      	mov	r1, r5
 80119ae:	4638      	mov	r0, r7
 80119b0:	f7ff ffc2 	bl	8011938 <sbrk_aligned>
 80119b4:	1c43      	adds	r3, r0, #1
 80119b6:	4604      	mov	r4, r0
 80119b8:	d14d      	bne.n	8011a56 <_malloc_r+0xde>
 80119ba:	6834      	ldr	r4, [r6, #0]
 80119bc:	4626      	mov	r6, r4
 80119be:	2e00      	cmp	r6, #0
 80119c0:	d140      	bne.n	8011a44 <_malloc_r+0xcc>
 80119c2:	6823      	ldr	r3, [r4, #0]
 80119c4:	4631      	mov	r1, r6
 80119c6:	4638      	mov	r0, r7
 80119c8:	eb04 0803 	add.w	r8, r4, r3
 80119cc:	f000 fa1a 	bl	8011e04 <_sbrk_r>
 80119d0:	4580      	cmp	r8, r0
 80119d2:	d13a      	bne.n	8011a4a <_malloc_r+0xd2>
 80119d4:	6821      	ldr	r1, [r4, #0]
 80119d6:	3503      	adds	r5, #3
 80119d8:	1a6d      	subs	r5, r5, r1
 80119da:	f025 0503 	bic.w	r5, r5, #3
 80119de:	3508      	adds	r5, #8
 80119e0:	2d0c      	cmp	r5, #12
 80119e2:	bf38      	it	cc
 80119e4:	250c      	movcc	r5, #12
 80119e6:	4638      	mov	r0, r7
 80119e8:	4629      	mov	r1, r5
 80119ea:	f7ff ffa5 	bl	8011938 <sbrk_aligned>
 80119ee:	3001      	adds	r0, #1
 80119f0:	d02b      	beq.n	8011a4a <_malloc_r+0xd2>
 80119f2:	6823      	ldr	r3, [r4, #0]
 80119f4:	442b      	add	r3, r5
 80119f6:	6023      	str	r3, [r4, #0]
 80119f8:	e00e      	b.n	8011a18 <_malloc_r+0xa0>
 80119fa:	6822      	ldr	r2, [r4, #0]
 80119fc:	1b52      	subs	r2, r2, r5
 80119fe:	d41e      	bmi.n	8011a3e <_malloc_r+0xc6>
 8011a00:	2a0b      	cmp	r2, #11
 8011a02:	d916      	bls.n	8011a32 <_malloc_r+0xba>
 8011a04:	1961      	adds	r1, r4, r5
 8011a06:	42a3      	cmp	r3, r4
 8011a08:	6025      	str	r5, [r4, #0]
 8011a0a:	bf18      	it	ne
 8011a0c:	6059      	strne	r1, [r3, #4]
 8011a0e:	6863      	ldr	r3, [r4, #4]
 8011a10:	bf08      	it	eq
 8011a12:	6031      	streq	r1, [r6, #0]
 8011a14:	5162      	str	r2, [r4, r5]
 8011a16:	604b      	str	r3, [r1, #4]
 8011a18:	4638      	mov	r0, r7
 8011a1a:	f104 060b 	add.w	r6, r4, #11
 8011a1e:	f000 faf7 	bl	8012010 <__malloc_unlock>
 8011a22:	f026 0607 	bic.w	r6, r6, #7
 8011a26:	1d23      	adds	r3, r4, #4
 8011a28:	1af2      	subs	r2, r6, r3
 8011a2a:	d0b6      	beq.n	801199a <_malloc_r+0x22>
 8011a2c:	1b9b      	subs	r3, r3, r6
 8011a2e:	50a3      	str	r3, [r4, r2]
 8011a30:	e7b3      	b.n	801199a <_malloc_r+0x22>
 8011a32:	6862      	ldr	r2, [r4, #4]
 8011a34:	42a3      	cmp	r3, r4
 8011a36:	bf0c      	ite	eq
 8011a38:	6032      	streq	r2, [r6, #0]
 8011a3a:	605a      	strne	r2, [r3, #4]
 8011a3c:	e7ec      	b.n	8011a18 <_malloc_r+0xa0>
 8011a3e:	4623      	mov	r3, r4
 8011a40:	6864      	ldr	r4, [r4, #4]
 8011a42:	e7b2      	b.n	80119aa <_malloc_r+0x32>
 8011a44:	4634      	mov	r4, r6
 8011a46:	6876      	ldr	r6, [r6, #4]
 8011a48:	e7b9      	b.n	80119be <_malloc_r+0x46>
 8011a4a:	230c      	movs	r3, #12
 8011a4c:	4638      	mov	r0, r7
 8011a4e:	603b      	str	r3, [r7, #0]
 8011a50:	f000 fade 	bl	8012010 <__malloc_unlock>
 8011a54:	e7a1      	b.n	801199a <_malloc_r+0x22>
 8011a56:	6025      	str	r5, [r4, #0]
 8011a58:	e7de      	b.n	8011a18 <_malloc_r+0xa0>
 8011a5a:	bf00      	nop
 8011a5c:	20003b88 	.word	0x20003b88

08011a60 <_realloc_r>:
 8011a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a64:	4680      	mov	r8, r0
 8011a66:	4614      	mov	r4, r2
 8011a68:	460e      	mov	r6, r1
 8011a6a:	b921      	cbnz	r1, 8011a76 <_realloc_r+0x16>
 8011a6c:	4611      	mov	r1, r2
 8011a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a72:	f7ff bf81 	b.w	8011978 <_malloc_r>
 8011a76:	b92a      	cbnz	r2, 8011a84 <_realloc_r+0x24>
 8011a78:	f7ff ff16 	bl	80118a8 <_free_r>
 8011a7c:	4625      	mov	r5, r4
 8011a7e:	4628      	mov	r0, r5
 8011a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a84:	f000 faca 	bl	801201c <_malloc_usable_size_r>
 8011a88:	4284      	cmp	r4, r0
 8011a8a:	4607      	mov	r7, r0
 8011a8c:	d802      	bhi.n	8011a94 <_realloc_r+0x34>
 8011a8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011a92:	d812      	bhi.n	8011aba <_realloc_r+0x5a>
 8011a94:	4621      	mov	r1, r4
 8011a96:	4640      	mov	r0, r8
 8011a98:	f7ff ff6e 	bl	8011978 <_malloc_r>
 8011a9c:	4605      	mov	r5, r0
 8011a9e:	2800      	cmp	r0, #0
 8011aa0:	d0ed      	beq.n	8011a7e <_realloc_r+0x1e>
 8011aa2:	42bc      	cmp	r4, r7
 8011aa4:	4622      	mov	r2, r4
 8011aa6:	4631      	mov	r1, r6
 8011aa8:	bf28      	it	cs
 8011aaa:	463a      	movcs	r2, r7
 8011aac:	f7fd fb90 	bl	800f1d0 <memcpy>
 8011ab0:	4631      	mov	r1, r6
 8011ab2:	4640      	mov	r0, r8
 8011ab4:	f7ff fef8 	bl	80118a8 <_free_r>
 8011ab8:	e7e1      	b.n	8011a7e <_realloc_r+0x1e>
 8011aba:	4635      	mov	r5, r6
 8011abc:	e7df      	b.n	8011a7e <_realloc_r+0x1e>

08011abe <__ssputs_r>:
 8011abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ac2:	688e      	ldr	r6, [r1, #8]
 8011ac4:	4682      	mov	sl, r0
 8011ac6:	429e      	cmp	r6, r3
 8011ac8:	460c      	mov	r4, r1
 8011aca:	4690      	mov	r8, r2
 8011acc:	461f      	mov	r7, r3
 8011ace:	d838      	bhi.n	8011b42 <__ssputs_r+0x84>
 8011ad0:	898a      	ldrh	r2, [r1, #12]
 8011ad2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011ad6:	d032      	beq.n	8011b3e <__ssputs_r+0x80>
 8011ad8:	6825      	ldr	r5, [r4, #0]
 8011ada:	6909      	ldr	r1, [r1, #16]
 8011adc:	3301      	adds	r3, #1
 8011ade:	eba5 0901 	sub.w	r9, r5, r1
 8011ae2:	6965      	ldr	r5, [r4, #20]
 8011ae4:	444b      	add	r3, r9
 8011ae6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011aea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011aee:	106d      	asrs	r5, r5, #1
 8011af0:	429d      	cmp	r5, r3
 8011af2:	bf38      	it	cc
 8011af4:	461d      	movcc	r5, r3
 8011af6:	0553      	lsls	r3, r2, #21
 8011af8:	d531      	bpl.n	8011b5e <__ssputs_r+0xa0>
 8011afa:	4629      	mov	r1, r5
 8011afc:	f7ff ff3c 	bl	8011978 <_malloc_r>
 8011b00:	4606      	mov	r6, r0
 8011b02:	b950      	cbnz	r0, 8011b1a <__ssputs_r+0x5c>
 8011b04:	230c      	movs	r3, #12
 8011b06:	f04f 30ff 	mov.w	r0, #4294967295
 8011b0a:	f8ca 3000 	str.w	r3, [sl]
 8011b0e:	89a3      	ldrh	r3, [r4, #12]
 8011b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b14:	81a3      	strh	r3, [r4, #12]
 8011b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b1a:	464a      	mov	r2, r9
 8011b1c:	6921      	ldr	r1, [r4, #16]
 8011b1e:	f7fd fb57 	bl	800f1d0 <memcpy>
 8011b22:	89a3      	ldrh	r3, [r4, #12]
 8011b24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b2c:	81a3      	strh	r3, [r4, #12]
 8011b2e:	6126      	str	r6, [r4, #16]
 8011b30:	444e      	add	r6, r9
 8011b32:	6026      	str	r6, [r4, #0]
 8011b34:	463e      	mov	r6, r7
 8011b36:	6165      	str	r5, [r4, #20]
 8011b38:	eba5 0509 	sub.w	r5, r5, r9
 8011b3c:	60a5      	str	r5, [r4, #8]
 8011b3e:	42be      	cmp	r6, r7
 8011b40:	d900      	bls.n	8011b44 <__ssputs_r+0x86>
 8011b42:	463e      	mov	r6, r7
 8011b44:	4632      	mov	r2, r6
 8011b46:	4641      	mov	r1, r8
 8011b48:	6820      	ldr	r0, [r4, #0]
 8011b4a:	f7ff fafd 	bl	8011148 <memmove>
 8011b4e:	68a3      	ldr	r3, [r4, #8]
 8011b50:	2000      	movs	r0, #0
 8011b52:	1b9b      	subs	r3, r3, r6
 8011b54:	60a3      	str	r3, [r4, #8]
 8011b56:	6823      	ldr	r3, [r4, #0]
 8011b58:	4433      	add	r3, r6
 8011b5a:	6023      	str	r3, [r4, #0]
 8011b5c:	e7db      	b.n	8011b16 <__ssputs_r+0x58>
 8011b5e:	462a      	mov	r2, r5
 8011b60:	f7ff ff7e 	bl	8011a60 <_realloc_r>
 8011b64:	4606      	mov	r6, r0
 8011b66:	2800      	cmp	r0, #0
 8011b68:	d1e1      	bne.n	8011b2e <__ssputs_r+0x70>
 8011b6a:	4650      	mov	r0, sl
 8011b6c:	6921      	ldr	r1, [r4, #16]
 8011b6e:	f7ff fe9b 	bl	80118a8 <_free_r>
 8011b72:	e7c7      	b.n	8011b04 <__ssputs_r+0x46>

08011b74 <_svfiprintf_r>:
 8011b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b78:	4698      	mov	r8, r3
 8011b7a:	898b      	ldrh	r3, [r1, #12]
 8011b7c:	4607      	mov	r7, r0
 8011b7e:	061b      	lsls	r3, r3, #24
 8011b80:	460d      	mov	r5, r1
 8011b82:	4614      	mov	r4, r2
 8011b84:	b09d      	sub	sp, #116	; 0x74
 8011b86:	d50e      	bpl.n	8011ba6 <_svfiprintf_r+0x32>
 8011b88:	690b      	ldr	r3, [r1, #16]
 8011b8a:	b963      	cbnz	r3, 8011ba6 <_svfiprintf_r+0x32>
 8011b8c:	2140      	movs	r1, #64	; 0x40
 8011b8e:	f7ff fef3 	bl	8011978 <_malloc_r>
 8011b92:	6028      	str	r0, [r5, #0]
 8011b94:	6128      	str	r0, [r5, #16]
 8011b96:	b920      	cbnz	r0, 8011ba2 <_svfiprintf_r+0x2e>
 8011b98:	230c      	movs	r3, #12
 8011b9a:	603b      	str	r3, [r7, #0]
 8011b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011ba0:	e0d1      	b.n	8011d46 <_svfiprintf_r+0x1d2>
 8011ba2:	2340      	movs	r3, #64	; 0x40
 8011ba4:	616b      	str	r3, [r5, #20]
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8011baa:	2320      	movs	r3, #32
 8011bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011bb0:	2330      	movs	r3, #48	; 0x30
 8011bb2:	f04f 0901 	mov.w	r9, #1
 8011bb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011bba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011d60 <_svfiprintf_r+0x1ec>
 8011bbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011bc2:	4623      	mov	r3, r4
 8011bc4:	469a      	mov	sl, r3
 8011bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bca:	b10a      	cbz	r2, 8011bd0 <_svfiprintf_r+0x5c>
 8011bcc:	2a25      	cmp	r2, #37	; 0x25
 8011bce:	d1f9      	bne.n	8011bc4 <_svfiprintf_r+0x50>
 8011bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8011bd4:	d00b      	beq.n	8011bee <_svfiprintf_r+0x7a>
 8011bd6:	465b      	mov	r3, fp
 8011bd8:	4622      	mov	r2, r4
 8011bda:	4629      	mov	r1, r5
 8011bdc:	4638      	mov	r0, r7
 8011bde:	f7ff ff6e 	bl	8011abe <__ssputs_r>
 8011be2:	3001      	adds	r0, #1
 8011be4:	f000 80aa 	beq.w	8011d3c <_svfiprintf_r+0x1c8>
 8011be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011bea:	445a      	add	r2, fp
 8011bec:	9209      	str	r2, [sp, #36]	; 0x24
 8011bee:	f89a 3000 	ldrb.w	r3, [sl]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	f000 80a2 	beq.w	8011d3c <_svfiprintf_r+0x1c8>
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8011bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c02:	f10a 0a01 	add.w	sl, sl, #1
 8011c06:	9304      	str	r3, [sp, #16]
 8011c08:	9307      	str	r3, [sp, #28]
 8011c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8011c10:	4654      	mov	r4, sl
 8011c12:	2205      	movs	r2, #5
 8011c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c18:	4851      	ldr	r0, [pc, #324]	; (8011d60 <_svfiprintf_r+0x1ec>)
 8011c1a:	f7ff fa87 	bl	801112c <memchr>
 8011c1e:	9a04      	ldr	r2, [sp, #16]
 8011c20:	b9d8      	cbnz	r0, 8011c5a <_svfiprintf_r+0xe6>
 8011c22:	06d0      	lsls	r0, r2, #27
 8011c24:	bf44      	itt	mi
 8011c26:	2320      	movmi	r3, #32
 8011c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c2c:	0711      	lsls	r1, r2, #28
 8011c2e:	bf44      	itt	mi
 8011c30:	232b      	movmi	r3, #43	; 0x2b
 8011c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c36:	f89a 3000 	ldrb.w	r3, [sl]
 8011c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8011c3c:	d015      	beq.n	8011c6a <_svfiprintf_r+0xf6>
 8011c3e:	4654      	mov	r4, sl
 8011c40:	2000      	movs	r0, #0
 8011c42:	f04f 0c0a 	mov.w	ip, #10
 8011c46:	9a07      	ldr	r2, [sp, #28]
 8011c48:	4621      	mov	r1, r4
 8011c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c4e:	3b30      	subs	r3, #48	; 0x30
 8011c50:	2b09      	cmp	r3, #9
 8011c52:	d94e      	bls.n	8011cf2 <_svfiprintf_r+0x17e>
 8011c54:	b1b0      	cbz	r0, 8011c84 <_svfiprintf_r+0x110>
 8011c56:	9207      	str	r2, [sp, #28]
 8011c58:	e014      	b.n	8011c84 <_svfiprintf_r+0x110>
 8011c5a:	eba0 0308 	sub.w	r3, r0, r8
 8011c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8011c62:	4313      	orrs	r3, r2
 8011c64:	46a2      	mov	sl, r4
 8011c66:	9304      	str	r3, [sp, #16]
 8011c68:	e7d2      	b.n	8011c10 <_svfiprintf_r+0x9c>
 8011c6a:	9b03      	ldr	r3, [sp, #12]
 8011c6c:	1d19      	adds	r1, r3, #4
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	9103      	str	r1, [sp, #12]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	bfbb      	ittet	lt
 8011c76:	425b      	neglt	r3, r3
 8011c78:	f042 0202 	orrlt.w	r2, r2, #2
 8011c7c:	9307      	strge	r3, [sp, #28]
 8011c7e:	9307      	strlt	r3, [sp, #28]
 8011c80:	bfb8      	it	lt
 8011c82:	9204      	strlt	r2, [sp, #16]
 8011c84:	7823      	ldrb	r3, [r4, #0]
 8011c86:	2b2e      	cmp	r3, #46	; 0x2e
 8011c88:	d10c      	bne.n	8011ca4 <_svfiprintf_r+0x130>
 8011c8a:	7863      	ldrb	r3, [r4, #1]
 8011c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8011c8e:	d135      	bne.n	8011cfc <_svfiprintf_r+0x188>
 8011c90:	9b03      	ldr	r3, [sp, #12]
 8011c92:	3402      	adds	r4, #2
 8011c94:	1d1a      	adds	r2, r3, #4
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	9203      	str	r2, [sp, #12]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	bfb8      	it	lt
 8011c9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ca2:	9305      	str	r3, [sp, #20]
 8011ca4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8011d64 <_svfiprintf_r+0x1f0>
 8011ca8:	2203      	movs	r2, #3
 8011caa:	4650      	mov	r0, sl
 8011cac:	7821      	ldrb	r1, [r4, #0]
 8011cae:	f7ff fa3d 	bl	801112c <memchr>
 8011cb2:	b140      	cbz	r0, 8011cc6 <_svfiprintf_r+0x152>
 8011cb4:	2340      	movs	r3, #64	; 0x40
 8011cb6:	eba0 000a 	sub.w	r0, r0, sl
 8011cba:	fa03 f000 	lsl.w	r0, r3, r0
 8011cbe:	9b04      	ldr	r3, [sp, #16]
 8011cc0:	3401      	adds	r4, #1
 8011cc2:	4303      	orrs	r3, r0
 8011cc4:	9304      	str	r3, [sp, #16]
 8011cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cca:	2206      	movs	r2, #6
 8011ccc:	4826      	ldr	r0, [pc, #152]	; (8011d68 <_svfiprintf_r+0x1f4>)
 8011cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011cd2:	f7ff fa2b 	bl	801112c <memchr>
 8011cd6:	2800      	cmp	r0, #0
 8011cd8:	d038      	beq.n	8011d4c <_svfiprintf_r+0x1d8>
 8011cda:	4b24      	ldr	r3, [pc, #144]	; (8011d6c <_svfiprintf_r+0x1f8>)
 8011cdc:	bb1b      	cbnz	r3, 8011d26 <_svfiprintf_r+0x1b2>
 8011cde:	9b03      	ldr	r3, [sp, #12]
 8011ce0:	3307      	adds	r3, #7
 8011ce2:	f023 0307 	bic.w	r3, r3, #7
 8011ce6:	3308      	adds	r3, #8
 8011ce8:	9303      	str	r3, [sp, #12]
 8011cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cec:	4433      	add	r3, r6
 8011cee:	9309      	str	r3, [sp, #36]	; 0x24
 8011cf0:	e767      	b.n	8011bc2 <_svfiprintf_r+0x4e>
 8011cf2:	460c      	mov	r4, r1
 8011cf4:	2001      	movs	r0, #1
 8011cf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8011cfa:	e7a5      	b.n	8011c48 <_svfiprintf_r+0xd4>
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	f04f 0c0a 	mov.w	ip, #10
 8011d02:	4619      	mov	r1, r3
 8011d04:	3401      	adds	r4, #1
 8011d06:	9305      	str	r3, [sp, #20]
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d0e:	3a30      	subs	r2, #48	; 0x30
 8011d10:	2a09      	cmp	r2, #9
 8011d12:	d903      	bls.n	8011d1c <_svfiprintf_r+0x1a8>
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d0c5      	beq.n	8011ca4 <_svfiprintf_r+0x130>
 8011d18:	9105      	str	r1, [sp, #20]
 8011d1a:	e7c3      	b.n	8011ca4 <_svfiprintf_r+0x130>
 8011d1c:	4604      	mov	r4, r0
 8011d1e:	2301      	movs	r3, #1
 8011d20:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d24:	e7f0      	b.n	8011d08 <_svfiprintf_r+0x194>
 8011d26:	ab03      	add	r3, sp, #12
 8011d28:	9300      	str	r3, [sp, #0]
 8011d2a:	462a      	mov	r2, r5
 8011d2c:	4638      	mov	r0, r7
 8011d2e:	4b10      	ldr	r3, [pc, #64]	; (8011d70 <_svfiprintf_r+0x1fc>)
 8011d30:	a904      	add	r1, sp, #16
 8011d32:	f7fd fc59 	bl	800f5e8 <_printf_float>
 8011d36:	1c42      	adds	r2, r0, #1
 8011d38:	4606      	mov	r6, r0
 8011d3a:	d1d6      	bne.n	8011cea <_svfiprintf_r+0x176>
 8011d3c:	89ab      	ldrh	r3, [r5, #12]
 8011d3e:	065b      	lsls	r3, r3, #25
 8011d40:	f53f af2c 	bmi.w	8011b9c <_svfiprintf_r+0x28>
 8011d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d46:	b01d      	add	sp, #116	; 0x74
 8011d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d4c:	ab03      	add	r3, sp, #12
 8011d4e:	9300      	str	r3, [sp, #0]
 8011d50:	462a      	mov	r2, r5
 8011d52:	4638      	mov	r0, r7
 8011d54:	4b06      	ldr	r3, [pc, #24]	; (8011d70 <_svfiprintf_r+0x1fc>)
 8011d56:	a904      	add	r1, sp, #16
 8011d58:	f7fd fee2 	bl	800fb20 <_printf_i>
 8011d5c:	e7eb      	b.n	8011d36 <_svfiprintf_r+0x1c2>
 8011d5e:	bf00      	nop
 8011d60:	08014968 	.word	0x08014968
 8011d64:	0801496e 	.word	0x0801496e
 8011d68:	08014972 	.word	0x08014972
 8011d6c:	0800f5e9 	.word	0x0800f5e9
 8011d70:	08011abf 	.word	0x08011abf

08011d74 <_putc_r>:
 8011d74:	b570      	push	{r4, r5, r6, lr}
 8011d76:	460d      	mov	r5, r1
 8011d78:	4614      	mov	r4, r2
 8011d7a:	4606      	mov	r6, r0
 8011d7c:	b118      	cbz	r0, 8011d86 <_putc_r+0x12>
 8011d7e:	6983      	ldr	r3, [r0, #24]
 8011d80:	b90b      	cbnz	r3, 8011d86 <_putc_r+0x12>
 8011d82:	f7ff f8c1 	bl	8010f08 <__sinit>
 8011d86:	4b1c      	ldr	r3, [pc, #112]	; (8011df8 <_putc_r+0x84>)
 8011d88:	429c      	cmp	r4, r3
 8011d8a:	d124      	bne.n	8011dd6 <_putc_r+0x62>
 8011d8c:	6874      	ldr	r4, [r6, #4]
 8011d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011d90:	07d8      	lsls	r0, r3, #31
 8011d92:	d405      	bmi.n	8011da0 <_putc_r+0x2c>
 8011d94:	89a3      	ldrh	r3, [r4, #12]
 8011d96:	0599      	lsls	r1, r3, #22
 8011d98:	d402      	bmi.n	8011da0 <_putc_r+0x2c>
 8011d9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d9c:	f7ff f957 	bl	801104e <__retarget_lock_acquire_recursive>
 8011da0:	68a3      	ldr	r3, [r4, #8]
 8011da2:	3b01      	subs	r3, #1
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	60a3      	str	r3, [r4, #8]
 8011da8:	da05      	bge.n	8011db6 <_putc_r+0x42>
 8011daa:	69a2      	ldr	r2, [r4, #24]
 8011dac:	4293      	cmp	r3, r2
 8011dae:	db1c      	blt.n	8011dea <_putc_r+0x76>
 8011db0:	b2eb      	uxtb	r3, r5
 8011db2:	2b0a      	cmp	r3, #10
 8011db4:	d019      	beq.n	8011dea <_putc_r+0x76>
 8011db6:	6823      	ldr	r3, [r4, #0]
 8011db8:	1c5a      	adds	r2, r3, #1
 8011dba:	6022      	str	r2, [r4, #0]
 8011dbc:	701d      	strb	r5, [r3, #0]
 8011dbe:	b2ed      	uxtb	r5, r5
 8011dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011dc2:	07da      	lsls	r2, r3, #31
 8011dc4:	d405      	bmi.n	8011dd2 <_putc_r+0x5e>
 8011dc6:	89a3      	ldrh	r3, [r4, #12]
 8011dc8:	059b      	lsls	r3, r3, #22
 8011dca:	d402      	bmi.n	8011dd2 <_putc_r+0x5e>
 8011dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011dce:	f7ff f93f 	bl	8011050 <__retarget_lock_release_recursive>
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	bd70      	pop	{r4, r5, r6, pc}
 8011dd6:	4b09      	ldr	r3, [pc, #36]	; (8011dfc <_putc_r+0x88>)
 8011dd8:	429c      	cmp	r4, r3
 8011dda:	d101      	bne.n	8011de0 <_putc_r+0x6c>
 8011ddc:	68b4      	ldr	r4, [r6, #8]
 8011dde:	e7d6      	b.n	8011d8e <_putc_r+0x1a>
 8011de0:	4b07      	ldr	r3, [pc, #28]	; (8011e00 <_putc_r+0x8c>)
 8011de2:	429c      	cmp	r4, r3
 8011de4:	bf08      	it	eq
 8011de6:	68f4      	ldreq	r4, [r6, #12]
 8011de8:	e7d1      	b.n	8011d8e <_putc_r+0x1a>
 8011dea:	4629      	mov	r1, r5
 8011dec:	4622      	mov	r2, r4
 8011dee:	4630      	mov	r0, r6
 8011df0:	f7fe f830 	bl	800fe54 <__swbuf_r>
 8011df4:	4605      	mov	r5, r0
 8011df6:	e7e3      	b.n	8011dc0 <_putc_r+0x4c>
 8011df8:	08014a60 	.word	0x08014a60
 8011dfc:	08014a80 	.word	0x08014a80
 8011e00:	08014a40 	.word	0x08014a40

08011e04 <_sbrk_r>:
 8011e04:	b538      	push	{r3, r4, r5, lr}
 8011e06:	2300      	movs	r3, #0
 8011e08:	4d05      	ldr	r5, [pc, #20]	; (8011e20 <_sbrk_r+0x1c>)
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	4608      	mov	r0, r1
 8011e0e:	602b      	str	r3, [r5, #0]
 8011e10:	f7f3 fdf0 	bl	80059f4 <_sbrk>
 8011e14:	1c43      	adds	r3, r0, #1
 8011e16:	d102      	bne.n	8011e1e <_sbrk_r+0x1a>
 8011e18:	682b      	ldr	r3, [r5, #0]
 8011e1a:	b103      	cbz	r3, 8011e1e <_sbrk_r+0x1a>
 8011e1c:	6023      	str	r3, [r4, #0]
 8011e1e:	bd38      	pop	{r3, r4, r5, pc}
 8011e20:	20003b90 	.word	0x20003b90

08011e24 <_raise_r>:
 8011e24:	291f      	cmp	r1, #31
 8011e26:	b538      	push	{r3, r4, r5, lr}
 8011e28:	4604      	mov	r4, r0
 8011e2a:	460d      	mov	r5, r1
 8011e2c:	d904      	bls.n	8011e38 <_raise_r+0x14>
 8011e2e:	2316      	movs	r3, #22
 8011e30:	6003      	str	r3, [r0, #0]
 8011e32:	f04f 30ff 	mov.w	r0, #4294967295
 8011e36:	bd38      	pop	{r3, r4, r5, pc}
 8011e38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011e3a:	b112      	cbz	r2, 8011e42 <_raise_r+0x1e>
 8011e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e40:	b94b      	cbnz	r3, 8011e56 <_raise_r+0x32>
 8011e42:	4620      	mov	r0, r4
 8011e44:	f000 f830 	bl	8011ea8 <_getpid_r>
 8011e48:	462a      	mov	r2, r5
 8011e4a:	4601      	mov	r1, r0
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e52:	f000 b817 	b.w	8011e84 <_kill_r>
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d00a      	beq.n	8011e70 <_raise_r+0x4c>
 8011e5a:	1c59      	adds	r1, r3, #1
 8011e5c:	d103      	bne.n	8011e66 <_raise_r+0x42>
 8011e5e:	2316      	movs	r3, #22
 8011e60:	6003      	str	r3, [r0, #0]
 8011e62:	2001      	movs	r0, #1
 8011e64:	e7e7      	b.n	8011e36 <_raise_r+0x12>
 8011e66:	2400      	movs	r4, #0
 8011e68:	4628      	mov	r0, r5
 8011e6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011e6e:	4798      	blx	r3
 8011e70:	2000      	movs	r0, #0
 8011e72:	e7e0      	b.n	8011e36 <_raise_r+0x12>

08011e74 <raise>:
 8011e74:	4b02      	ldr	r3, [pc, #8]	; (8011e80 <raise+0xc>)
 8011e76:	4601      	mov	r1, r0
 8011e78:	6818      	ldr	r0, [r3, #0]
 8011e7a:	f7ff bfd3 	b.w	8011e24 <_raise_r>
 8011e7e:	bf00      	nop
 8011e80:	20000064 	.word	0x20000064

08011e84 <_kill_r>:
 8011e84:	b538      	push	{r3, r4, r5, lr}
 8011e86:	2300      	movs	r3, #0
 8011e88:	4d06      	ldr	r5, [pc, #24]	; (8011ea4 <_kill_r+0x20>)
 8011e8a:	4604      	mov	r4, r0
 8011e8c:	4608      	mov	r0, r1
 8011e8e:	4611      	mov	r1, r2
 8011e90:	602b      	str	r3, [r5, #0]
 8011e92:	f7f3 fd2c 	bl	80058ee <_kill>
 8011e96:	1c43      	adds	r3, r0, #1
 8011e98:	d102      	bne.n	8011ea0 <_kill_r+0x1c>
 8011e9a:	682b      	ldr	r3, [r5, #0]
 8011e9c:	b103      	cbz	r3, 8011ea0 <_kill_r+0x1c>
 8011e9e:	6023      	str	r3, [r4, #0]
 8011ea0:	bd38      	pop	{r3, r4, r5, pc}
 8011ea2:	bf00      	nop
 8011ea4:	20003b90 	.word	0x20003b90

08011ea8 <_getpid_r>:
 8011ea8:	f7f3 bd1a 	b.w	80058e0 <_getpid>

08011eac <__sread>:
 8011eac:	b510      	push	{r4, lr}
 8011eae:	460c      	mov	r4, r1
 8011eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eb4:	f000 f8ba 	bl	801202c <_read_r>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	bfab      	itete	ge
 8011ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8011ec0:	181b      	addge	r3, r3, r0
 8011ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011ec6:	bfac      	ite	ge
 8011ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8011eca:	81a3      	strhlt	r3, [r4, #12]
 8011ecc:	bd10      	pop	{r4, pc}

08011ece <__swrite>:
 8011ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed2:	461f      	mov	r7, r3
 8011ed4:	898b      	ldrh	r3, [r1, #12]
 8011ed6:	4605      	mov	r5, r0
 8011ed8:	05db      	lsls	r3, r3, #23
 8011eda:	460c      	mov	r4, r1
 8011edc:	4616      	mov	r6, r2
 8011ede:	d505      	bpl.n	8011eec <__swrite+0x1e>
 8011ee0:	2302      	movs	r3, #2
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ee8:	f000 f868 	bl	8011fbc <_lseek_r>
 8011eec:	89a3      	ldrh	r3, [r4, #12]
 8011eee:	4632      	mov	r2, r6
 8011ef0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ef4:	81a3      	strh	r3, [r4, #12]
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	463b      	mov	r3, r7
 8011efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f02:	f000 b817 	b.w	8011f34 <_write_r>

08011f06 <__sseek>:
 8011f06:	b510      	push	{r4, lr}
 8011f08:	460c      	mov	r4, r1
 8011f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f0e:	f000 f855 	bl	8011fbc <_lseek_r>
 8011f12:	1c43      	adds	r3, r0, #1
 8011f14:	89a3      	ldrh	r3, [r4, #12]
 8011f16:	bf15      	itete	ne
 8011f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8011f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f22:	81a3      	strheq	r3, [r4, #12]
 8011f24:	bf18      	it	ne
 8011f26:	81a3      	strhne	r3, [r4, #12]
 8011f28:	bd10      	pop	{r4, pc}

08011f2a <__sclose>:
 8011f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f2e:	f000 b813 	b.w	8011f58 <_close_r>
	...

08011f34 <_write_r>:
 8011f34:	b538      	push	{r3, r4, r5, lr}
 8011f36:	4604      	mov	r4, r0
 8011f38:	4608      	mov	r0, r1
 8011f3a:	4611      	mov	r1, r2
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	4d05      	ldr	r5, [pc, #20]	; (8011f54 <_write_r+0x20>)
 8011f40:	602a      	str	r2, [r5, #0]
 8011f42:	461a      	mov	r2, r3
 8011f44:	f7f3 fd0a 	bl	800595c <_write>
 8011f48:	1c43      	adds	r3, r0, #1
 8011f4a:	d102      	bne.n	8011f52 <_write_r+0x1e>
 8011f4c:	682b      	ldr	r3, [r5, #0]
 8011f4e:	b103      	cbz	r3, 8011f52 <_write_r+0x1e>
 8011f50:	6023      	str	r3, [r4, #0]
 8011f52:	bd38      	pop	{r3, r4, r5, pc}
 8011f54:	20003b90 	.word	0x20003b90

08011f58 <_close_r>:
 8011f58:	b538      	push	{r3, r4, r5, lr}
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	4d05      	ldr	r5, [pc, #20]	; (8011f74 <_close_r+0x1c>)
 8011f5e:	4604      	mov	r4, r0
 8011f60:	4608      	mov	r0, r1
 8011f62:	602b      	str	r3, [r5, #0]
 8011f64:	f7f3 fd16 	bl	8005994 <_close>
 8011f68:	1c43      	adds	r3, r0, #1
 8011f6a:	d102      	bne.n	8011f72 <_close_r+0x1a>
 8011f6c:	682b      	ldr	r3, [r5, #0]
 8011f6e:	b103      	cbz	r3, 8011f72 <_close_r+0x1a>
 8011f70:	6023      	str	r3, [r4, #0]
 8011f72:	bd38      	pop	{r3, r4, r5, pc}
 8011f74:	20003b90 	.word	0x20003b90

08011f78 <_fstat_r>:
 8011f78:	b538      	push	{r3, r4, r5, lr}
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	4d06      	ldr	r5, [pc, #24]	; (8011f98 <_fstat_r+0x20>)
 8011f7e:	4604      	mov	r4, r0
 8011f80:	4608      	mov	r0, r1
 8011f82:	4611      	mov	r1, r2
 8011f84:	602b      	str	r3, [r5, #0]
 8011f86:	f7f3 fd10 	bl	80059aa <_fstat>
 8011f8a:	1c43      	adds	r3, r0, #1
 8011f8c:	d102      	bne.n	8011f94 <_fstat_r+0x1c>
 8011f8e:	682b      	ldr	r3, [r5, #0]
 8011f90:	b103      	cbz	r3, 8011f94 <_fstat_r+0x1c>
 8011f92:	6023      	str	r3, [r4, #0]
 8011f94:	bd38      	pop	{r3, r4, r5, pc}
 8011f96:	bf00      	nop
 8011f98:	20003b90 	.word	0x20003b90

08011f9c <_isatty_r>:
 8011f9c:	b538      	push	{r3, r4, r5, lr}
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	4d05      	ldr	r5, [pc, #20]	; (8011fb8 <_isatty_r+0x1c>)
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	4608      	mov	r0, r1
 8011fa6:	602b      	str	r3, [r5, #0]
 8011fa8:	f7f3 fd0e 	bl	80059c8 <_isatty>
 8011fac:	1c43      	adds	r3, r0, #1
 8011fae:	d102      	bne.n	8011fb6 <_isatty_r+0x1a>
 8011fb0:	682b      	ldr	r3, [r5, #0]
 8011fb2:	b103      	cbz	r3, 8011fb6 <_isatty_r+0x1a>
 8011fb4:	6023      	str	r3, [r4, #0]
 8011fb6:	bd38      	pop	{r3, r4, r5, pc}
 8011fb8:	20003b90 	.word	0x20003b90

08011fbc <_lseek_r>:
 8011fbc:	b538      	push	{r3, r4, r5, lr}
 8011fbe:	4604      	mov	r4, r0
 8011fc0:	4608      	mov	r0, r1
 8011fc2:	4611      	mov	r1, r2
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	4d05      	ldr	r5, [pc, #20]	; (8011fdc <_lseek_r+0x20>)
 8011fc8:	602a      	str	r2, [r5, #0]
 8011fca:	461a      	mov	r2, r3
 8011fcc:	f7f3 fd06 	bl	80059dc <_lseek>
 8011fd0:	1c43      	adds	r3, r0, #1
 8011fd2:	d102      	bne.n	8011fda <_lseek_r+0x1e>
 8011fd4:	682b      	ldr	r3, [r5, #0]
 8011fd6:	b103      	cbz	r3, 8011fda <_lseek_r+0x1e>
 8011fd8:	6023      	str	r3, [r4, #0]
 8011fda:	bd38      	pop	{r3, r4, r5, pc}
 8011fdc:	20003b90 	.word	0x20003b90

08011fe0 <__ascii_mbtowc>:
 8011fe0:	b082      	sub	sp, #8
 8011fe2:	b901      	cbnz	r1, 8011fe6 <__ascii_mbtowc+0x6>
 8011fe4:	a901      	add	r1, sp, #4
 8011fe6:	b142      	cbz	r2, 8011ffa <__ascii_mbtowc+0x1a>
 8011fe8:	b14b      	cbz	r3, 8011ffe <__ascii_mbtowc+0x1e>
 8011fea:	7813      	ldrb	r3, [r2, #0]
 8011fec:	600b      	str	r3, [r1, #0]
 8011fee:	7812      	ldrb	r2, [r2, #0]
 8011ff0:	1e10      	subs	r0, r2, #0
 8011ff2:	bf18      	it	ne
 8011ff4:	2001      	movne	r0, #1
 8011ff6:	b002      	add	sp, #8
 8011ff8:	4770      	bx	lr
 8011ffa:	4610      	mov	r0, r2
 8011ffc:	e7fb      	b.n	8011ff6 <__ascii_mbtowc+0x16>
 8011ffe:	f06f 0001 	mvn.w	r0, #1
 8012002:	e7f8      	b.n	8011ff6 <__ascii_mbtowc+0x16>

08012004 <__malloc_lock>:
 8012004:	4801      	ldr	r0, [pc, #4]	; (801200c <__malloc_lock+0x8>)
 8012006:	f7ff b822 	b.w	801104e <__retarget_lock_acquire_recursive>
 801200a:	bf00      	nop
 801200c:	20003b84 	.word	0x20003b84

08012010 <__malloc_unlock>:
 8012010:	4801      	ldr	r0, [pc, #4]	; (8012018 <__malloc_unlock+0x8>)
 8012012:	f7ff b81d 	b.w	8011050 <__retarget_lock_release_recursive>
 8012016:	bf00      	nop
 8012018:	20003b84 	.word	0x20003b84

0801201c <_malloc_usable_size_r>:
 801201c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012020:	1f18      	subs	r0, r3, #4
 8012022:	2b00      	cmp	r3, #0
 8012024:	bfbc      	itt	lt
 8012026:	580b      	ldrlt	r3, [r1, r0]
 8012028:	18c0      	addlt	r0, r0, r3
 801202a:	4770      	bx	lr

0801202c <_read_r>:
 801202c:	b538      	push	{r3, r4, r5, lr}
 801202e:	4604      	mov	r4, r0
 8012030:	4608      	mov	r0, r1
 8012032:	4611      	mov	r1, r2
 8012034:	2200      	movs	r2, #0
 8012036:	4d05      	ldr	r5, [pc, #20]	; (801204c <_read_r+0x20>)
 8012038:	602a      	str	r2, [r5, #0]
 801203a:	461a      	mov	r2, r3
 801203c:	f7f3 fc71 	bl	8005922 <_read>
 8012040:	1c43      	adds	r3, r0, #1
 8012042:	d102      	bne.n	801204a <_read_r+0x1e>
 8012044:	682b      	ldr	r3, [r5, #0]
 8012046:	b103      	cbz	r3, 801204a <_read_r+0x1e>
 8012048:	6023      	str	r3, [r4, #0]
 801204a:	bd38      	pop	{r3, r4, r5, pc}
 801204c:	20003b90 	.word	0x20003b90

08012050 <__ascii_wctomb>:
 8012050:	4603      	mov	r3, r0
 8012052:	4608      	mov	r0, r1
 8012054:	b141      	cbz	r1, 8012068 <__ascii_wctomb+0x18>
 8012056:	2aff      	cmp	r2, #255	; 0xff
 8012058:	d904      	bls.n	8012064 <__ascii_wctomb+0x14>
 801205a:	228a      	movs	r2, #138	; 0x8a
 801205c:	f04f 30ff 	mov.w	r0, #4294967295
 8012060:	601a      	str	r2, [r3, #0]
 8012062:	4770      	bx	lr
 8012064:	2001      	movs	r0, #1
 8012066:	700a      	strb	r2, [r1, #0]
 8012068:	4770      	bx	lr
	...

0801206c <pow>:
 801206c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012070:	4614      	mov	r4, r2
 8012072:	461d      	mov	r5, r3
 8012074:	4680      	mov	r8, r0
 8012076:	4689      	mov	r9, r1
 8012078:	f000 f862 	bl	8012140 <__ieee754_pow>
 801207c:	4622      	mov	r2, r4
 801207e:	4606      	mov	r6, r0
 8012080:	460f      	mov	r7, r1
 8012082:	462b      	mov	r3, r5
 8012084:	4620      	mov	r0, r4
 8012086:	4629      	mov	r1, r5
 8012088:	f7ee fd3a 	bl	8000b00 <__aeabi_dcmpun>
 801208c:	bbc8      	cbnz	r0, 8012102 <pow+0x96>
 801208e:	2200      	movs	r2, #0
 8012090:	2300      	movs	r3, #0
 8012092:	4640      	mov	r0, r8
 8012094:	4649      	mov	r1, r9
 8012096:	f7ee fd01 	bl	8000a9c <__aeabi_dcmpeq>
 801209a:	b1b8      	cbz	r0, 80120cc <pow+0x60>
 801209c:	2200      	movs	r2, #0
 801209e:	2300      	movs	r3, #0
 80120a0:	4620      	mov	r0, r4
 80120a2:	4629      	mov	r1, r5
 80120a4:	f7ee fcfa 	bl	8000a9c <__aeabi_dcmpeq>
 80120a8:	2800      	cmp	r0, #0
 80120aa:	d141      	bne.n	8012130 <pow+0xc4>
 80120ac:	4620      	mov	r0, r4
 80120ae:	4629      	mov	r1, r5
 80120b0:	f000 fe3b 	bl	8012d2a <finite>
 80120b4:	b328      	cbz	r0, 8012102 <pow+0x96>
 80120b6:	2200      	movs	r2, #0
 80120b8:	2300      	movs	r3, #0
 80120ba:	4620      	mov	r0, r4
 80120bc:	4629      	mov	r1, r5
 80120be:	f7ee fcf7 	bl	8000ab0 <__aeabi_dcmplt>
 80120c2:	b1f0      	cbz	r0, 8012102 <pow+0x96>
 80120c4:	f7fd f848 	bl	800f158 <__errno>
 80120c8:	2322      	movs	r3, #34	; 0x22
 80120ca:	e019      	b.n	8012100 <pow+0x94>
 80120cc:	4630      	mov	r0, r6
 80120ce:	4639      	mov	r1, r7
 80120d0:	f000 fe2b 	bl	8012d2a <finite>
 80120d4:	b9c8      	cbnz	r0, 801210a <pow+0x9e>
 80120d6:	4640      	mov	r0, r8
 80120d8:	4649      	mov	r1, r9
 80120da:	f000 fe26 	bl	8012d2a <finite>
 80120de:	b1a0      	cbz	r0, 801210a <pow+0x9e>
 80120e0:	4620      	mov	r0, r4
 80120e2:	4629      	mov	r1, r5
 80120e4:	f000 fe21 	bl	8012d2a <finite>
 80120e8:	b178      	cbz	r0, 801210a <pow+0x9e>
 80120ea:	4632      	mov	r2, r6
 80120ec:	463b      	mov	r3, r7
 80120ee:	4630      	mov	r0, r6
 80120f0:	4639      	mov	r1, r7
 80120f2:	f7ee fd05 	bl	8000b00 <__aeabi_dcmpun>
 80120f6:	2800      	cmp	r0, #0
 80120f8:	d0e4      	beq.n	80120c4 <pow+0x58>
 80120fa:	f7fd f82d 	bl	800f158 <__errno>
 80120fe:	2321      	movs	r3, #33	; 0x21
 8012100:	6003      	str	r3, [r0, #0]
 8012102:	4630      	mov	r0, r6
 8012104:	4639      	mov	r1, r7
 8012106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801210a:	2200      	movs	r2, #0
 801210c:	2300      	movs	r3, #0
 801210e:	4630      	mov	r0, r6
 8012110:	4639      	mov	r1, r7
 8012112:	f7ee fcc3 	bl	8000a9c <__aeabi_dcmpeq>
 8012116:	2800      	cmp	r0, #0
 8012118:	d0f3      	beq.n	8012102 <pow+0x96>
 801211a:	4640      	mov	r0, r8
 801211c:	4649      	mov	r1, r9
 801211e:	f000 fe04 	bl	8012d2a <finite>
 8012122:	2800      	cmp	r0, #0
 8012124:	d0ed      	beq.n	8012102 <pow+0x96>
 8012126:	4620      	mov	r0, r4
 8012128:	4629      	mov	r1, r5
 801212a:	f000 fdfe 	bl	8012d2a <finite>
 801212e:	e7c8      	b.n	80120c2 <pow+0x56>
 8012130:	2600      	movs	r6, #0
 8012132:	4f01      	ldr	r7, [pc, #4]	; (8012138 <pow+0xcc>)
 8012134:	e7e5      	b.n	8012102 <pow+0x96>
 8012136:	bf00      	nop
 8012138:	3ff00000 	.word	0x3ff00000
 801213c:	00000000 	.word	0x00000000

08012140 <__ieee754_pow>:
 8012140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012144:	b093      	sub	sp, #76	; 0x4c
 8012146:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801214a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 801214e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8012152:	4689      	mov	r9, r1
 8012154:	ea56 0102 	orrs.w	r1, r6, r2
 8012158:	4680      	mov	r8, r0
 801215a:	d111      	bne.n	8012180 <__ieee754_pow+0x40>
 801215c:	1803      	adds	r3, r0, r0
 801215e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8012162:	4152      	adcs	r2, r2
 8012164:	4299      	cmp	r1, r3
 8012166:	4b82      	ldr	r3, [pc, #520]	; (8012370 <__ieee754_pow+0x230>)
 8012168:	4193      	sbcs	r3, r2
 801216a:	f080 84b9 	bcs.w	8012ae0 <__ieee754_pow+0x9a0>
 801216e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012172:	4640      	mov	r0, r8
 8012174:	4649      	mov	r1, r9
 8012176:	f7ee f873 	bl	8000260 <__adddf3>
 801217a:	4683      	mov	fp, r0
 801217c:	468c      	mov	ip, r1
 801217e:	e06f      	b.n	8012260 <__ieee754_pow+0x120>
 8012180:	4b7c      	ldr	r3, [pc, #496]	; (8012374 <__ieee754_pow+0x234>)
 8012182:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8012186:	429c      	cmp	r4, r3
 8012188:	464d      	mov	r5, r9
 801218a:	4682      	mov	sl, r0
 801218c:	dc06      	bgt.n	801219c <__ieee754_pow+0x5c>
 801218e:	d101      	bne.n	8012194 <__ieee754_pow+0x54>
 8012190:	2800      	cmp	r0, #0
 8012192:	d1ec      	bne.n	801216e <__ieee754_pow+0x2e>
 8012194:	429e      	cmp	r6, r3
 8012196:	dc01      	bgt.n	801219c <__ieee754_pow+0x5c>
 8012198:	d10f      	bne.n	80121ba <__ieee754_pow+0x7a>
 801219a:	b172      	cbz	r2, 80121ba <__ieee754_pow+0x7a>
 801219c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80121a0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80121a4:	ea55 050a 	orrs.w	r5, r5, sl
 80121a8:	d1e1      	bne.n	801216e <__ieee754_pow+0x2e>
 80121aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80121ae:	18db      	adds	r3, r3, r3
 80121b0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80121b4:	4152      	adcs	r2, r2
 80121b6:	429d      	cmp	r5, r3
 80121b8:	e7d5      	b.n	8012166 <__ieee754_pow+0x26>
 80121ba:	2d00      	cmp	r5, #0
 80121bc:	da39      	bge.n	8012232 <__ieee754_pow+0xf2>
 80121be:	4b6e      	ldr	r3, [pc, #440]	; (8012378 <__ieee754_pow+0x238>)
 80121c0:	429e      	cmp	r6, r3
 80121c2:	dc52      	bgt.n	801226a <__ieee754_pow+0x12a>
 80121c4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80121c8:	429e      	cmp	r6, r3
 80121ca:	f340 849c 	ble.w	8012b06 <__ieee754_pow+0x9c6>
 80121ce:	1533      	asrs	r3, r6, #20
 80121d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80121d4:	2b14      	cmp	r3, #20
 80121d6:	dd0f      	ble.n	80121f8 <__ieee754_pow+0xb8>
 80121d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80121dc:	fa22 f103 	lsr.w	r1, r2, r3
 80121e0:	fa01 f303 	lsl.w	r3, r1, r3
 80121e4:	4293      	cmp	r3, r2
 80121e6:	f040 848e 	bne.w	8012b06 <__ieee754_pow+0x9c6>
 80121ea:	f001 0101 	and.w	r1, r1, #1
 80121ee:	f1c1 0302 	rsb	r3, r1, #2
 80121f2:	9300      	str	r3, [sp, #0]
 80121f4:	b182      	cbz	r2, 8012218 <__ieee754_pow+0xd8>
 80121f6:	e05d      	b.n	80122b4 <__ieee754_pow+0x174>
 80121f8:	2a00      	cmp	r2, #0
 80121fa:	d159      	bne.n	80122b0 <__ieee754_pow+0x170>
 80121fc:	f1c3 0314 	rsb	r3, r3, #20
 8012200:	fa46 f103 	asr.w	r1, r6, r3
 8012204:	fa01 f303 	lsl.w	r3, r1, r3
 8012208:	42b3      	cmp	r3, r6
 801220a:	f040 8479 	bne.w	8012b00 <__ieee754_pow+0x9c0>
 801220e:	f001 0101 	and.w	r1, r1, #1
 8012212:	f1c1 0302 	rsb	r3, r1, #2
 8012216:	9300      	str	r3, [sp, #0]
 8012218:	4b58      	ldr	r3, [pc, #352]	; (801237c <__ieee754_pow+0x23c>)
 801221a:	429e      	cmp	r6, r3
 801221c:	d132      	bne.n	8012284 <__ieee754_pow+0x144>
 801221e:	2f00      	cmp	r7, #0
 8012220:	f280 846a 	bge.w	8012af8 <__ieee754_pow+0x9b8>
 8012224:	4642      	mov	r2, r8
 8012226:	464b      	mov	r3, r9
 8012228:	2000      	movs	r0, #0
 801222a:	4954      	ldr	r1, [pc, #336]	; (801237c <__ieee754_pow+0x23c>)
 801222c:	f7ee faf8 	bl	8000820 <__aeabi_ddiv>
 8012230:	e7a3      	b.n	801217a <__ieee754_pow+0x3a>
 8012232:	2300      	movs	r3, #0
 8012234:	9300      	str	r3, [sp, #0]
 8012236:	2a00      	cmp	r2, #0
 8012238:	d13c      	bne.n	80122b4 <__ieee754_pow+0x174>
 801223a:	4b4e      	ldr	r3, [pc, #312]	; (8012374 <__ieee754_pow+0x234>)
 801223c:	429e      	cmp	r6, r3
 801223e:	d1eb      	bne.n	8012218 <__ieee754_pow+0xd8>
 8012240:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012244:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012248:	ea53 030a 	orrs.w	r3, r3, sl
 801224c:	f000 8448 	beq.w	8012ae0 <__ieee754_pow+0x9a0>
 8012250:	4b4b      	ldr	r3, [pc, #300]	; (8012380 <__ieee754_pow+0x240>)
 8012252:	429c      	cmp	r4, r3
 8012254:	dd0b      	ble.n	801226e <__ieee754_pow+0x12e>
 8012256:	2f00      	cmp	r7, #0
 8012258:	f2c0 8448 	blt.w	8012aec <__ieee754_pow+0x9ac>
 801225c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8012260:	4658      	mov	r0, fp
 8012262:	4661      	mov	r1, ip
 8012264:	b013      	add	sp, #76	; 0x4c
 8012266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801226a:	2302      	movs	r3, #2
 801226c:	e7e2      	b.n	8012234 <__ieee754_pow+0xf4>
 801226e:	2f00      	cmp	r7, #0
 8012270:	f04f 0b00 	mov.w	fp, #0
 8012274:	f04f 0c00 	mov.w	ip, #0
 8012278:	daf2      	bge.n	8012260 <__ieee754_pow+0x120>
 801227a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801227e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8012282:	e7ed      	b.n	8012260 <__ieee754_pow+0x120>
 8012284:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8012288:	d106      	bne.n	8012298 <__ieee754_pow+0x158>
 801228a:	4642      	mov	r2, r8
 801228c:	464b      	mov	r3, r9
 801228e:	4640      	mov	r0, r8
 8012290:	4649      	mov	r1, r9
 8012292:	f7ee f99b 	bl	80005cc <__aeabi_dmul>
 8012296:	e770      	b.n	801217a <__ieee754_pow+0x3a>
 8012298:	4b3a      	ldr	r3, [pc, #232]	; (8012384 <__ieee754_pow+0x244>)
 801229a:	429f      	cmp	r7, r3
 801229c:	d10a      	bne.n	80122b4 <__ieee754_pow+0x174>
 801229e:	2d00      	cmp	r5, #0
 80122a0:	db08      	blt.n	80122b4 <__ieee754_pow+0x174>
 80122a2:	4640      	mov	r0, r8
 80122a4:	4649      	mov	r1, r9
 80122a6:	b013      	add	sp, #76	; 0x4c
 80122a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ac:	f000 bc5e 	b.w	8012b6c <__ieee754_sqrt>
 80122b0:	2300      	movs	r3, #0
 80122b2:	9300      	str	r3, [sp, #0]
 80122b4:	4640      	mov	r0, r8
 80122b6:	4649      	mov	r1, r9
 80122b8:	f000 fd34 	bl	8012d24 <fabs>
 80122bc:	4683      	mov	fp, r0
 80122be:	468c      	mov	ip, r1
 80122c0:	f1ba 0f00 	cmp.w	sl, #0
 80122c4:	d128      	bne.n	8012318 <__ieee754_pow+0x1d8>
 80122c6:	b124      	cbz	r4, 80122d2 <__ieee754_pow+0x192>
 80122c8:	4b2c      	ldr	r3, [pc, #176]	; (801237c <__ieee754_pow+0x23c>)
 80122ca:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d122      	bne.n	8012318 <__ieee754_pow+0x1d8>
 80122d2:	2f00      	cmp	r7, #0
 80122d4:	da07      	bge.n	80122e6 <__ieee754_pow+0x1a6>
 80122d6:	465a      	mov	r2, fp
 80122d8:	4663      	mov	r3, ip
 80122da:	2000      	movs	r0, #0
 80122dc:	4927      	ldr	r1, [pc, #156]	; (801237c <__ieee754_pow+0x23c>)
 80122de:	f7ee fa9f 	bl	8000820 <__aeabi_ddiv>
 80122e2:	4683      	mov	fp, r0
 80122e4:	468c      	mov	ip, r1
 80122e6:	2d00      	cmp	r5, #0
 80122e8:	daba      	bge.n	8012260 <__ieee754_pow+0x120>
 80122ea:	9b00      	ldr	r3, [sp, #0]
 80122ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80122f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80122f4:	4323      	orrs	r3, r4
 80122f6:	d108      	bne.n	801230a <__ieee754_pow+0x1ca>
 80122f8:	465a      	mov	r2, fp
 80122fa:	4663      	mov	r3, ip
 80122fc:	4658      	mov	r0, fp
 80122fe:	4661      	mov	r1, ip
 8012300:	f7ed ffac 	bl	800025c <__aeabi_dsub>
 8012304:	4602      	mov	r2, r0
 8012306:	460b      	mov	r3, r1
 8012308:	e790      	b.n	801222c <__ieee754_pow+0xec>
 801230a:	9b00      	ldr	r3, [sp, #0]
 801230c:	2b01      	cmp	r3, #1
 801230e:	d1a7      	bne.n	8012260 <__ieee754_pow+0x120>
 8012310:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8012314:	469c      	mov	ip, r3
 8012316:	e7a3      	b.n	8012260 <__ieee754_pow+0x120>
 8012318:	0feb      	lsrs	r3, r5, #31
 801231a:	3b01      	subs	r3, #1
 801231c:	930c      	str	r3, [sp, #48]	; 0x30
 801231e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012320:	9b00      	ldr	r3, [sp, #0]
 8012322:	4313      	orrs	r3, r2
 8012324:	d104      	bne.n	8012330 <__ieee754_pow+0x1f0>
 8012326:	4642      	mov	r2, r8
 8012328:	464b      	mov	r3, r9
 801232a:	4640      	mov	r0, r8
 801232c:	4649      	mov	r1, r9
 801232e:	e7e7      	b.n	8012300 <__ieee754_pow+0x1c0>
 8012330:	4b15      	ldr	r3, [pc, #84]	; (8012388 <__ieee754_pow+0x248>)
 8012332:	429e      	cmp	r6, r3
 8012334:	f340 80f6 	ble.w	8012524 <__ieee754_pow+0x3e4>
 8012338:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801233c:	429e      	cmp	r6, r3
 801233e:	4b10      	ldr	r3, [pc, #64]	; (8012380 <__ieee754_pow+0x240>)
 8012340:	dd09      	ble.n	8012356 <__ieee754_pow+0x216>
 8012342:	429c      	cmp	r4, r3
 8012344:	dc0c      	bgt.n	8012360 <__ieee754_pow+0x220>
 8012346:	2f00      	cmp	r7, #0
 8012348:	da0c      	bge.n	8012364 <__ieee754_pow+0x224>
 801234a:	2000      	movs	r0, #0
 801234c:	b013      	add	sp, #76	; 0x4c
 801234e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012352:	f000 bce2 	b.w	8012d1a <__math_oflow>
 8012356:	429c      	cmp	r4, r3
 8012358:	dbf5      	blt.n	8012346 <__ieee754_pow+0x206>
 801235a:	4b08      	ldr	r3, [pc, #32]	; (801237c <__ieee754_pow+0x23c>)
 801235c:	429c      	cmp	r4, r3
 801235e:	dd15      	ble.n	801238c <__ieee754_pow+0x24c>
 8012360:	2f00      	cmp	r7, #0
 8012362:	dcf2      	bgt.n	801234a <__ieee754_pow+0x20a>
 8012364:	2000      	movs	r0, #0
 8012366:	b013      	add	sp, #76	; 0x4c
 8012368:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801236c:	f000 bcd0 	b.w	8012d10 <__math_uflow>
 8012370:	fff00000 	.word	0xfff00000
 8012374:	7ff00000 	.word	0x7ff00000
 8012378:	433fffff 	.word	0x433fffff
 801237c:	3ff00000 	.word	0x3ff00000
 8012380:	3fefffff 	.word	0x3fefffff
 8012384:	3fe00000 	.word	0x3fe00000
 8012388:	41e00000 	.word	0x41e00000
 801238c:	4661      	mov	r1, ip
 801238e:	2200      	movs	r2, #0
 8012390:	4658      	mov	r0, fp
 8012392:	4b5f      	ldr	r3, [pc, #380]	; (8012510 <__ieee754_pow+0x3d0>)
 8012394:	f7ed ff62 	bl	800025c <__aeabi_dsub>
 8012398:	a355      	add	r3, pc, #340	; (adr r3, 80124f0 <__ieee754_pow+0x3b0>)
 801239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801239e:	4604      	mov	r4, r0
 80123a0:	460d      	mov	r5, r1
 80123a2:	f7ee f913 	bl	80005cc <__aeabi_dmul>
 80123a6:	a354      	add	r3, pc, #336	; (adr r3, 80124f8 <__ieee754_pow+0x3b8>)
 80123a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ac:	4606      	mov	r6, r0
 80123ae:	460f      	mov	r7, r1
 80123b0:	4620      	mov	r0, r4
 80123b2:	4629      	mov	r1, r5
 80123b4:	f7ee f90a 	bl	80005cc <__aeabi_dmul>
 80123b8:	2200      	movs	r2, #0
 80123ba:	4682      	mov	sl, r0
 80123bc:	468b      	mov	fp, r1
 80123be:	4620      	mov	r0, r4
 80123c0:	4629      	mov	r1, r5
 80123c2:	4b54      	ldr	r3, [pc, #336]	; (8012514 <__ieee754_pow+0x3d4>)
 80123c4:	f7ee f902 	bl	80005cc <__aeabi_dmul>
 80123c8:	4602      	mov	r2, r0
 80123ca:	460b      	mov	r3, r1
 80123cc:	a14c      	add	r1, pc, #304	; (adr r1, 8012500 <__ieee754_pow+0x3c0>)
 80123ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123d2:	f7ed ff43 	bl	800025c <__aeabi_dsub>
 80123d6:	4622      	mov	r2, r4
 80123d8:	462b      	mov	r3, r5
 80123da:	f7ee f8f7 	bl	80005cc <__aeabi_dmul>
 80123de:	4602      	mov	r2, r0
 80123e0:	460b      	mov	r3, r1
 80123e2:	2000      	movs	r0, #0
 80123e4:	494c      	ldr	r1, [pc, #304]	; (8012518 <__ieee754_pow+0x3d8>)
 80123e6:	f7ed ff39 	bl	800025c <__aeabi_dsub>
 80123ea:	4622      	mov	r2, r4
 80123ec:	462b      	mov	r3, r5
 80123ee:	4680      	mov	r8, r0
 80123f0:	4689      	mov	r9, r1
 80123f2:	4620      	mov	r0, r4
 80123f4:	4629      	mov	r1, r5
 80123f6:	f7ee f8e9 	bl	80005cc <__aeabi_dmul>
 80123fa:	4602      	mov	r2, r0
 80123fc:	460b      	mov	r3, r1
 80123fe:	4640      	mov	r0, r8
 8012400:	4649      	mov	r1, r9
 8012402:	f7ee f8e3 	bl	80005cc <__aeabi_dmul>
 8012406:	a340      	add	r3, pc, #256	; (adr r3, 8012508 <__ieee754_pow+0x3c8>)
 8012408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240c:	f7ee f8de 	bl	80005cc <__aeabi_dmul>
 8012410:	4602      	mov	r2, r0
 8012412:	460b      	mov	r3, r1
 8012414:	4650      	mov	r0, sl
 8012416:	4659      	mov	r1, fp
 8012418:	f7ed ff20 	bl	800025c <__aeabi_dsub>
 801241c:	f04f 0a00 	mov.w	sl, #0
 8012420:	4602      	mov	r2, r0
 8012422:	460b      	mov	r3, r1
 8012424:	4604      	mov	r4, r0
 8012426:	460d      	mov	r5, r1
 8012428:	4630      	mov	r0, r6
 801242a:	4639      	mov	r1, r7
 801242c:	f7ed ff18 	bl	8000260 <__adddf3>
 8012430:	4632      	mov	r2, r6
 8012432:	463b      	mov	r3, r7
 8012434:	4650      	mov	r0, sl
 8012436:	468b      	mov	fp, r1
 8012438:	f7ed ff10 	bl	800025c <__aeabi_dsub>
 801243c:	4602      	mov	r2, r0
 801243e:	460b      	mov	r3, r1
 8012440:	4620      	mov	r0, r4
 8012442:	4629      	mov	r1, r5
 8012444:	f7ed ff0a 	bl	800025c <__aeabi_dsub>
 8012448:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801244c:	9b00      	ldr	r3, [sp, #0]
 801244e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012450:	3b01      	subs	r3, #1
 8012452:	4313      	orrs	r3, r2
 8012454:	f04f 0600 	mov.w	r6, #0
 8012458:	f04f 0200 	mov.w	r2, #0
 801245c:	bf0c      	ite	eq
 801245e:	4b2f      	ldreq	r3, [pc, #188]	; (801251c <__ieee754_pow+0x3dc>)
 8012460:	4b2b      	ldrne	r3, [pc, #172]	; (8012510 <__ieee754_pow+0x3d0>)
 8012462:	4604      	mov	r4, r0
 8012464:	460d      	mov	r5, r1
 8012466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801246a:	e9cd 2300 	strd	r2, r3, [sp]
 801246e:	4632      	mov	r2, r6
 8012470:	463b      	mov	r3, r7
 8012472:	f7ed fef3 	bl	800025c <__aeabi_dsub>
 8012476:	4652      	mov	r2, sl
 8012478:	465b      	mov	r3, fp
 801247a:	f7ee f8a7 	bl	80005cc <__aeabi_dmul>
 801247e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012482:	4680      	mov	r8, r0
 8012484:	4689      	mov	r9, r1
 8012486:	4620      	mov	r0, r4
 8012488:	4629      	mov	r1, r5
 801248a:	f7ee f89f 	bl	80005cc <__aeabi_dmul>
 801248e:	4602      	mov	r2, r0
 8012490:	460b      	mov	r3, r1
 8012492:	4640      	mov	r0, r8
 8012494:	4649      	mov	r1, r9
 8012496:	f7ed fee3 	bl	8000260 <__adddf3>
 801249a:	4632      	mov	r2, r6
 801249c:	463b      	mov	r3, r7
 801249e:	4680      	mov	r8, r0
 80124a0:	4689      	mov	r9, r1
 80124a2:	4650      	mov	r0, sl
 80124a4:	4659      	mov	r1, fp
 80124a6:	f7ee f891 	bl	80005cc <__aeabi_dmul>
 80124aa:	4604      	mov	r4, r0
 80124ac:	460d      	mov	r5, r1
 80124ae:	460b      	mov	r3, r1
 80124b0:	4602      	mov	r2, r0
 80124b2:	4649      	mov	r1, r9
 80124b4:	4640      	mov	r0, r8
 80124b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80124ba:	f7ed fed1 	bl	8000260 <__adddf3>
 80124be:	4b18      	ldr	r3, [pc, #96]	; (8012520 <__ieee754_pow+0x3e0>)
 80124c0:	4682      	mov	sl, r0
 80124c2:	4299      	cmp	r1, r3
 80124c4:	460f      	mov	r7, r1
 80124c6:	460e      	mov	r6, r1
 80124c8:	f340 82e5 	ble.w	8012a96 <__ieee754_pow+0x956>
 80124cc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80124d0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80124d4:	4303      	orrs	r3, r0
 80124d6:	f000 81df 	beq.w	8012898 <__ieee754_pow+0x758>
 80124da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124de:	2200      	movs	r2, #0
 80124e0:	2300      	movs	r3, #0
 80124e2:	f7ee fae5 	bl	8000ab0 <__aeabi_dcmplt>
 80124e6:	3800      	subs	r0, #0
 80124e8:	bf18      	it	ne
 80124ea:	2001      	movne	r0, #1
 80124ec:	e72e      	b.n	801234c <__ieee754_pow+0x20c>
 80124ee:	bf00      	nop
 80124f0:	60000000 	.word	0x60000000
 80124f4:	3ff71547 	.word	0x3ff71547
 80124f8:	f85ddf44 	.word	0xf85ddf44
 80124fc:	3e54ae0b 	.word	0x3e54ae0b
 8012500:	55555555 	.word	0x55555555
 8012504:	3fd55555 	.word	0x3fd55555
 8012508:	652b82fe 	.word	0x652b82fe
 801250c:	3ff71547 	.word	0x3ff71547
 8012510:	3ff00000 	.word	0x3ff00000
 8012514:	3fd00000 	.word	0x3fd00000
 8012518:	3fe00000 	.word	0x3fe00000
 801251c:	bff00000 	.word	0xbff00000
 8012520:	408fffff 	.word	0x408fffff
 8012524:	4bd2      	ldr	r3, [pc, #840]	; (8012870 <__ieee754_pow+0x730>)
 8012526:	2200      	movs	r2, #0
 8012528:	402b      	ands	r3, r5
 801252a:	b943      	cbnz	r3, 801253e <__ieee754_pow+0x3fe>
 801252c:	4658      	mov	r0, fp
 801252e:	4661      	mov	r1, ip
 8012530:	4bd0      	ldr	r3, [pc, #832]	; (8012874 <__ieee754_pow+0x734>)
 8012532:	f7ee f84b 	bl	80005cc <__aeabi_dmul>
 8012536:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801253a:	4683      	mov	fp, r0
 801253c:	460c      	mov	r4, r1
 801253e:	1523      	asrs	r3, r4, #20
 8012540:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012544:	4413      	add	r3, r2
 8012546:	930b      	str	r3, [sp, #44]	; 0x2c
 8012548:	4bcb      	ldr	r3, [pc, #812]	; (8012878 <__ieee754_pow+0x738>)
 801254a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801254e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012552:	429c      	cmp	r4, r3
 8012554:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012558:	dd08      	ble.n	801256c <__ieee754_pow+0x42c>
 801255a:	4bc8      	ldr	r3, [pc, #800]	; (801287c <__ieee754_pow+0x73c>)
 801255c:	429c      	cmp	r4, r3
 801255e:	f340 8199 	ble.w	8012894 <__ieee754_pow+0x754>
 8012562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012564:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012568:	3301      	adds	r3, #1
 801256a:	930b      	str	r3, [sp, #44]	; 0x2c
 801256c:	2600      	movs	r6, #0
 801256e:	00f3      	lsls	r3, r6, #3
 8012570:	930d      	str	r3, [sp, #52]	; 0x34
 8012572:	4bc3      	ldr	r3, [pc, #780]	; (8012880 <__ieee754_pow+0x740>)
 8012574:	4658      	mov	r0, fp
 8012576:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801257a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801257e:	4629      	mov	r1, r5
 8012580:	461a      	mov	r2, r3
 8012582:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8012586:	4623      	mov	r3, r4
 8012588:	f7ed fe68 	bl	800025c <__aeabi_dsub>
 801258c:	46da      	mov	sl, fp
 801258e:	462b      	mov	r3, r5
 8012590:	4652      	mov	r2, sl
 8012592:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012596:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801259a:	f7ed fe61 	bl	8000260 <__adddf3>
 801259e:	4602      	mov	r2, r0
 80125a0:	460b      	mov	r3, r1
 80125a2:	2000      	movs	r0, #0
 80125a4:	49b7      	ldr	r1, [pc, #732]	; (8012884 <__ieee754_pow+0x744>)
 80125a6:	f7ee f93b 	bl	8000820 <__aeabi_ddiv>
 80125aa:	4602      	mov	r2, r0
 80125ac:	460b      	mov	r3, r1
 80125ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80125b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80125b6:	f7ee f809 	bl	80005cc <__aeabi_dmul>
 80125ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80125be:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80125c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80125c6:	2300      	movs	r3, #0
 80125c8:	2200      	movs	r2, #0
 80125ca:	46ab      	mov	fp, r5
 80125cc:	106d      	asrs	r5, r5, #1
 80125ce:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80125d2:	9304      	str	r3, [sp, #16]
 80125d4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80125d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80125dc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80125e0:	4640      	mov	r0, r8
 80125e2:	4649      	mov	r1, r9
 80125e4:	4614      	mov	r4, r2
 80125e6:	461d      	mov	r5, r3
 80125e8:	f7ed fff0 	bl	80005cc <__aeabi_dmul>
 80125ec:	4602      	mov	r2, r0
 80125ee:	460b      	mov	r3, r1
 80125f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80125f4:	f7ed fe32 	bl	800025c <__aeabi_dsub>
 80125f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80125fc:	4606      	mov	r6, r0
 80125fe:	460f      	mov	r7, r1
 8012600:	4620      	mov	r0, r4
 8012602:	4629      	mov	r1, r5
 8012604:	f7ed fe2a 	bl	800025c <__aeabi_dsub>
 8012608:	4602      	mov	r2, r0
 801260a:	460b      	mov	r3, r1
 801260c:	4650      	mov	r0, sl
 801260e:	4659      	mov	r1, fp
 8012610:	f7ed fe24 	bl	800025c <__aeabi_dsub>
 8012614:	4642      	mov	r2, r8
 8012616:	464b      	mov	r3, r9
 8012618:	f7ed ffd8 	bl	80005cc <__aeabi_dmul>
 801261c:	4602      	mov	r2, r0
 801261e:	460b      	mov	r3, r1
 8012620:	4630      	mov	r0, r6
 8012622:	4639      	mov	r1, r7
 8012624:	f7ed fe1a 	bl	800025c <__aeabi_dsub>
 8012628:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801262c:	f7ed ffce 	bl	80005cc <__aeabi_dmul>
 8012630:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012634:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012638:	4610      	mov	r0, r2
 801263a:	4619      	mov	r1, r3
 801263c:	f7ed ffc6 	bl	80005cc <__aeabi_dmul>
 8012640:	a379      	add	r3, pc, #484	; (adr r3, 8012828 <__ieee754_pow+0x6e8>)
 8012642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012646:	4604      	mov	r4, r0
 8012648:	460d      	mov	r5, r1
 801264a:	f7ed ffbf 	bl	80005cc <__aeabi_dmul>
 801264e:	a378      	add	r3, pc, #480	; (adr r3, 8012830 <__ieee754_pow+0x6f0>)
 8012650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012654:	f7ed fe04 	bl	8000260 <__adddf3>
 8012658:	4622      	mov	r2, r4
 801265a:	462b      	mov	r3, r5
 801265c:	f7ed ffb6 	bl	80005cc <__aeabi_dmul>
 8012660:	a375      	add	r3, pc, #468	; (adr r3, 8012838 <__ieee754_pow+0x6f8>)
 8012662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012666:	f7ed fdfb 	bl	8000260 <__adddf3>
 801266a:	4622      	mov	r2, r4
 801266c:	462b      	mov	r3, r5
 801266e:	f7ed ffad 	bl	80005cc <__aeabi_dmul>
 8012672:	a373      	add	r3, pc, #460	; (adr r3, 8012840 <__ieee754_pow+0x700>)
 8012674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012678:	f7ed fdf2 	bl	8000260 <__adddf3>
 801267c:	4622      	mov	r2, r4
 801267e:	462b      	mov	r3, r5
 8012680:	f7ed ffa4 	bl	80005cc <__aeabi_dmul>
 8012684:	a370      	add	r3, pc, #448	; (adr r3, 8012848 <__ieee754_pow+0x708>)
 8012686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801268a:	f7ed fde9 	bl	8000260 <__adddf3>
 801268e:	4622      	mov	r2, r4
 8012690:	462b      	mov	r3, r5
 8012692:	f7ed ff9b 	bl	80005cc <__aeabi_dmul>
 8012696:	a36e      	add	r3, pc, #440	; (adr r3, 8012850 <__ieee754_pow+0x710>)
 8012698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801269c:	f7ed fde0 	bl	8000260 <__adddf3>
 80126a0:	4622      	mov	r2, r4
 80126a2:	4606      	mov	r6, r0
 80126a4:	460f      	mov	r7, r1
 80126a6:	462b      	mov	r3, r5
 80126a8:	4620      	mov	r0, r4
 80126aa:	4629      	mov	r1, r5
 80126ac:	f7ed ff8e 	bl	80005cc <__aeabi_dmul>
 80126b0:	4602      	mov	r2, r0
 80126b2:	460b      	mov	r3, r1
 80126b4:	4630      	mov	r0, r6
 80126b6:	4639      	mov	r1, r7
 80126b8:	f7ed ff88 	bl	80005cc <__aeabi_dmul>
 80126bc:	4604      	mov	r4, r0
 80126be:	460d      	mov	r5, r1
 80126c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80126c4:	4642      	mov	r2, r8
 80126c6:	464b      	mov	r3, r9
 80126c8:	f7ed fdca 	bl	8000260 <__adddf3>
 80126cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80126d0:	f7ed ff7c 	bl	80005cc <__aeabi_dmul>
 80126d4:	4622      	mov	r2, r4
 80126d6:	462b      	mov	r3, r5
 80126d8:	f7ed fdc2 	bl	8000260 <__adddf3>
 80126dc:	4642      	mov	r2, r8
 80126de:	4606      	mov	r6, r0
 80126e0:	460f      	mov	r7, r1
 80126e2:	464b      	mov	r3, r9
 80126e4:	4640      	mov	r0, r8
 80126e6:	4649      	mov	r1, r9
 80126e8:	f7ed ff70 	bl	80005cc <__aeabi_dmul>
 80126ec:	2200      	movs	r2, #0
 80126ee:	4b66      	ldr	r3, [pc, #408]	; (8012888 <__ieee754_pow+0x748>)
 80126f0:	4682      	mov	sl, r0
 80126f2:	468b      	mov	fp, r1
 80126f4:	f7ed fdb4 	bl	8000260 <__adddf3>
 80126f8:	4632      	mov	r2, r6
 80126fa:	463b      	mov	r3, r7
 80126fc:	f7ed fdb0 	bl	8000260 <__adddf3>
 8012700:	2400      	movs	r4, #0
 8012702:	460d      	mov	r5, r1
 8012704:	4622      	mov	r2, r4
 8012706:	460b      	mov	r3, r1
 8012708:	4640      	mov	r0, r8
 801270a:	4649      	mov	r1, r9
 801270c:	f7ed ff5e 	bl	80005cc <__aeabi_dmul>
 8012710:	2200      	movs	r2, #0
 8012712:	4680      	mov	r8, r0
 8012714:	4689      	mov	r9, r1
 8012716:	4620      	mov	r0, r4
 8012718:	4629      	mov	r1, r5
 801271a:	4b5b      	ldr	r3, [pc, #364]	; (8012888 <__ieee754_pow+0x748>)
 801271c:	f7ed fd9e 	bl	800025c <__aeabi_dsub>
 8012720:	4652      	mov	r2, sl
 8012722:	465b      	mov	r3, fp
 8012724:	f7ed fd9a 	bl	800025c <__aeabi_dsub>
 8012728:	4602      	mov	r2, r0
 801272a:	460b      	mov	r3, r1
 801272c:	4630      	mov	r0, r6
 801272e:	4639      	mov	r1, r7
 8012730:	f7ed fd94 	bl	800025c <__aeabi_dsub>
 8012734:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012738:	f7ed ff48 	bl	80005cc <__aeabi_dmul>
 801273c:	4622      	mov	r2, r4
 801273e:	4606      	mov	r6, r0
 8012740:	460f      	mov	r7, r1
 8012742:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012746:	462b      	mov	r3, r5
 8012748:	f7ed ff40 	bl	80005cc <__aeabi_dmul>
 801274c:	4602      	mov	r2, r0
 801274e:	460b      	mov	r3, r1
 8012750:	4630      	mov	r0, r6
 8012752:	4639      	mov	r1, r7
 8012754:	f7ed fd84 	bl	8000260 <__adddf3>
 8012758:	2400      	movs	r4, #0
 801275a:	4606      	mov	r6, r0
 801275c:	460f      	mov	r7, r1
 801275e:	4602      	mov	r2, r0
 8012760:	460b      	mov	r3, r1
 8012762:	4640      	mov	r0, r8
 8012764:	4649      	mov	r1, r9
 8012766:	f7ed fd7b 	bl	8000260 <__adddf3>
 801276a:	a33b      	add	r3, pc, #236	; (adr r3, 8012858 <__ieee754_pow+0x718>)
 801276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012770:	4620      	mov	r0, r4
 8012772:	460d      	mov	r5, r1
 8012774:	f7ed ff2a 	bl	80005cc <__aeabi_dmul>
 8012778:	4642      	mov	r2, r8
 801277a:	464b      	mov	r3, r9
 801277c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012780:	4620      	mov	r0, r4
 8012782:	4629      	mov	r1, r5
 8012784:	f7ed fd6a 	bl	800025c <__aeabi_dsub>
 8012788:	4602      	mov	r2, r0
 801278a:	460b      	mov	r3, r1
 801278c:	4630      	mov	r0, r6
 801278e:	4639      	mov	r1, r7
 8012790:	f7ed fd64 	bl	800025c <__aeabi_dsub>
 8012794:	a332      	add	r3, pc, #200	; (adr r3, 8012860 <__ieee754_pow+0x720>)
 8012796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279a:	f7ed ff17 	bl	80005cc <__aeabi_dmul>
 801279e:	a332      	add	r3, pc, #200	; (adr r3, 8012868 <__ieee754_pow+0x728>)
 80127a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a4:	4606      	mov	r6, r0
 80127a6:	460f      	mov	r7, r1
 80127a8:	4620      	mov	r0, r4
 80127aa:	4629      	mov	r1, r5
 80127ac:	f7ed ff0e 	bl	80005cc <__aeabi_dmul>
 80127b0:	4602      	mov	r2, r0
 80127b2:	460b      	mov	r3, r1
 80127b4:	4630      	mov	r0, r6
 80127b6:	4639      	mov	r1, r7
 80127b8:	f7ed fd52 	bl	8000260 <__adddf3>
 80127bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80127be:	4b33      	ldr	r3, [pc, #204]	; (801288c <__ieee754_pow+0x74c>)
 80127c0:	f04f 0a00 	mov.w	sl, #0
 80127c4:	4413      	add	r3, r2
 80127c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ca:	f7ed fd49 	bl	8000260 <__adddf3>
 80127ce:	4680      	mov	r8, r0
 80127d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80127d2:	4689      	mov	r9, r1
 80127d4:	f7ed fe90 	bl	80004f8 <__aeabi_i2d>
 80127d8:	4604      	mov	r4, r0
 80127da:	460d      	mov	r5, r1
 80127dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80127de:	4b2c      	ldr	r3, [pc, #176]	; (8012890 <__ieee754_pow+0x750>)
 80127e0:	4413      	add	r3, r2
 80127e2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80127e6:	4642      	mov	r2, r8
 80127e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80127ec:	464b      	mov	r3, r9
 80127ee:	f7ed fd37 	bl	8000260 <__adddf3>
 80127f2:	4632      	mov	r2, r6
 80127f4:	463b      	mov	r3, r7
 80127f6:	f7ed fd33 	bl	8000260 <__adddf3>
 80127fa:	4622      	mov	r2, r4
 80127fc:	462b      	mov	r3, r5
 80127fe:	f7ed fd2f 	bl	8000260 <__adddf3>
 8012802:	4622      	mov	r2, r4
 8012804:	462b      	mov	r3, r5
 8012806:	4650      	mov	r0, sl
 8012808:	468b      	mov	fp, r1
 801280a:	f7ed fd27 	bl	800025c <__aeabi_dsub>
 801280e:	4632      	mov	r2, r6
 8012810:	463b      	mov	r3, r7
 8012812:	f7ed fd23 	bl	800025c <__aeabi_dsub>
 8012816:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801281a:	f7ed fd1f 	bl	800025c <__aeabi_dsub>
 801281e:	4602      	mov	r2, r0
 8012820:	460b      	mov	r3, r1
 8012822:	4640      	mov	r0, r8
 8012824:	4649      	mov	r1, r9
 8012826:	e60d      	b.n	8012444 <__ieee754_pow+0x304>
 8012828:	4a454eef 	.word	0x4a454eef
 801282c:	3fca7e28 	.word	0x3fca7e28
 8012830:	93c9db65 	.word	0x93c9db65
 8012834:	3fcd864a 	.word	0x3fcd864a
 8012838:	a91d4101 	.word	0xa91d4101
 801283c:	3fd17460 	.word	0x3fd17460
 8012840:	518f264d 	.word	0x518f264d
 8012844:	3fd55555 	.word	0x3fd55555
 8012848:	db6fabff 	.word	0xdb6fabff
 801284c:	3fdb6db6 	.word	0x3fdb6db6
 8012850:	33333303 	.word	0x33333303
 8012854:	3fe33333 	.word	0x3fe33333
 8012858:	e0000000 	.word	0xe0000000
 801285c:	3feec709 	.word	0x3feec709
 8012860:	dc3a03fd 	.word	0xdc3a03fd
 8012864:	3feec709 	.word	0x3feec709
 8012868:	145b01f5 	.word	0x145b01f5
 801286c:	be3e2fe0 	.word	0xbe3e2fe0
 8012870:	7ff00000 	.word	0x7ff00000
 8012874:	43400000 	.word	0x43400000
 8012878:	0003988e 	.word	0x0003988e
 801287c:	000bb679 	.word	0x000bb679
 8012880:	08014d08 	.word	0x08014d08
 8012884:	3ff00000 	.word	0x3ff00000
 8012888:	40080000 	.word	0x40080000
 801288c:	08014d28 	.word	0x08014d28
 8012890:	08014d18 	.word	0x08014d18
 8012894:	2601      	movs	r6, #1
 8012896:	e66a      	b.n	801256e <__ieee754_pow+0x42e>
 8012898:	a39d      	add	r3, pc, #628	; (adr r3, 8012b10 <__ieee754_pow+0x9d0>)
 801289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289e:	4640      	mov	r0, r8
 80128a0:	4649      	mov	r1, r9
 80128a2:	f7ed fcdd 	bl	8000260 <__adddf3>
 80128a6:	4622      	mov	r2, r4
 80128a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80128ac:	462b      	mov	r3, r5
 80128ae:	4650      	mov	r0, sl
 80128b0:	4639      	mov	r1, r7
 80128b2:	f7ed fcd3 	bl	800025c <__aeabi_dsub>
 80128b6:	4602      	mov	r2, r0
 80128b8:	460b      	mov	r3, r1
 80128ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80128be:	f7ee f915 	bl	8000aec <__aeabi_dcmpgt>
 80128c2:	2800      	cmp	r0, #0
 80128c4:	f47f ae09 	bne.w	80124da <__ieee754_pow+0x39a>
 80128c8:	4aa3      	ldr	r2, [pc, #652]	; (8012b58 <__ieee754_pow+0xa18>)
 80128ca:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80128ce:	4293      	cmp	r3, r2
 80128d0:	f340 8101 	ble.w	8012ad6 <__ieee754_pow+0x996>
 80128d4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80128d8:	2000      	movs	r0, #0
 80128da:	151b      	asrs	r3, r3, #20
 80128dc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80128e0:	fa4a f303 	asr.w	r3, sl, r3
 80128e4:	4433      	add	r3, r6
 80128e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80128ea:	4f9c      	ldr	r7, [pc, #624]	; (8012b5c <__ieee754_pow+0xa1c>)
 80128ec:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80128f0:	4117      	asrs	r7, r2
 80128f2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80128f6:	ea23 0107 	bic.w	r1, r3, r7
 80128fa:	f1c2 0214 	rsb	r2, r2, #20
 80128fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012902:	460b      	mov	r3, r1
 8012904:	fa4a fa02 	asr.w	sl, sl, r2
 8012908:	2e00      	cmp	r6, #0
 801290a:	4602      	mov	r2, r0
 801290c:	4629      	mov	r1, r5
 801290e:	4620      	mov	r0, r4
 8012910:	bfb8      	it	lt
 8012912:	f1ca 0a00 	rsblt	sl, sl, #0
 8012916:	f7ed fca1 	bl	800025c <__aeabi_dsub>
 801291a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801291e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012922:	2400      	movs	r4, #0
 8012924:	4642      	mov	r2, r8
 8012926:	464b      	mov	r3, r9
 8012928:	f7ed fc9a 	bl	8000260 <__adddf3>
 801292c:	a37a      	add	r3, pc, #488	; (adr r3, 8012b18 <__ieee754_pow+0x9d8>)
 801292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012932:	4620      	mov	r0, r4
 8012934:	460d      	mov	r5, r1
 8012936:	f7ed fe49 	bl	80005cc <__aeabi_dmul>
 801293a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801293e:	4606      	mov	r6, r0
 8012940:	460f      	mov	r7, r1
 8012942:	4620      	mov	r0, r4
 8012944:	4629      	mov	r1, r5
 8012946:	f7ed fc89 	bl	800025c <__aeabi_dsub>
 801294a:	4602      	mov	r2, r0
 801294c:	460b      	mov	r3, r1
 801294e:	4640      	mov	r0, r8
 8012950:	4649      	mov	r1, r9
 8012952:	f7ed fc83 	bl	800025c <__aeabi_dsub>
 8012956:	a372      	add	r3, pc, #456	; (adr r3, 8012b20 <__ieee754_pow+0x9e0>)
 8012958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801295c:	f7ed fe36 	bl	80005cc <__aeabi_dmul>
 8012960:	a371      	add	r3, pc, #452	; (adr r3, 8012b28 <__ieee754_pow+0x9e8>)
 8012962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012966:	4680      	mov	r8, r0
 8012968:	4689      	mov	r9, r1
 801296a:	4620      	mov	r0, r4
 801296c:	4629      	mov	r1, r5
 801296e:	f7ed fe2d 	bl	80005cc <__aeabi_dmul>
 8012972:	4602      	mov	r2, r0
 8012974:	460b      	mov	r3, r1
 8012976:	4640      	mov	r0, r8
 8012978:	4649      	mov	r1, r9
 801297a:	f7ed fc71 	bl	8000260 <__adddf3>
 801297e:	4604      	mov	r4, r0
 8012980:	460d      	mov	r5, r1
 8012982:	4602      	mov	r2, r0
 8012984:	460b      	mov	r3, r1
 8012986:	4630      	mov	r0, r6
 8012988:	4639      	mov	r1, r7
 801298a:	f7ed fc69 	bl	8000260 <__adddf3>
 801298e:	4632      	mov	r2, r6
 8012990:	463b      	mov	r3, r7
 8012992:	4680      	mov	r8, r0
 8012994:	4689      	mov	r9, r1
 8012996:	f7ed fc61 	bl	800025c <__aeabi_dsub>
 801299a:	4602      	mov	r2, r0
 801299c:	460b      	mov	r3, r1
 801299e:	4620      	mov	r0, r4
 80129a0:	4629      	mov	r1, r5
 80129a2:	f7ed fc5b 	bl	800025c <__aeabi_dsub>
 80129a6:	4642      	mov	r2, r8
 80129a8:	4606      	mov	r6, r0
 80129aa:	460f      	mov	r7, r1
 80129ac:	464b      	mov	r3, r9
 80129ae:	4640      	mov	r0, r8
 80129b0:	4649      	mov	r1, r9
 80129b2:	f7ed fe0b 	bl	80005cc <__aeabi_dmul>
 80129b6:	a35e      	add	r3, pc, #376	; (adr r3, 8012b30 <__ieee754_pow+0x9f0>)
 80129b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129bc:	4604      	mov	r4, r0
 80129be:	460d      	mov	r5, r1
 80129c0:	f7ed fe04 	bl	80005cc <__aeabi_dmul>
 80129c4:	a35c      	add	r3, pc, #368	; (adr r3, 8012b38 <__ieee754_pow+0x9f8>)
 80129c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ca:	f7ed fc47 	bl	800025c <__aeabi_dsub>
 80129ce:	4622      	mov	r2, r4
 80129d0:	462b      	mov	r3, r5
 80129d2:	f7ed fdfb 	bl	80005cc <__aeabi_dmul>
 80129d6:	a35a      	add	r3, pc, #360	; (adr r3, 8012b40 <__ieee754_pow+0xa00>)
 80129d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129dc:	f7ed fc40 	bl	8000260 <__adddf3>
 80129e0:	4622      	mov	r2, r4
 80129e2:	462b      	mov	r3, r5
 80129e4:	f7ed fdf2 	bl	80005cc <__aeabi_dmul>
 80129e8:	a357      	add	r3, pc, #348	; (adr r3, 8012b48 <__ieee754_pow+0xa08>)
 80129ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ee:	f7ed fc35 	bl	800025c <__aeabi_dsub>
 80129f2:	4622      	mov	r2, r4
 80129f4:	462b      	mov	r3, r5
 80129f6:	f7ed fde9 	bl	80005cc <__aeabi_dmul>
 80129fa:	a355      	add	r3, pc, #340	; (adr r3, 8012b50 <__ieee754_pow+0xa10>)
 80129fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a00:	f7ed fc2e 	bl	8000260 <__adddf3>
 8012a04:	4622      	mov	r2, r4
 8012a06:	462b      	mov	r3, r5
 8012a08:	f7ed fde0 	bl	80005cc <__aeabi_dmul>
 8012a0c:	4602      	mov	r2, r0
 8012a0e:	460b      	mov	r3, r1
 8012a10:	4640      	mov	r0, r8
 8012a12:	4649      	mov	r1, r9
 8012a14:	f7ed fc22 	bl	800025c <__aeabi_dsub>
 8012a18:	4604      	mov	r4, r0
 8012a1a:	460d      	mov	r5, r1
 8012a1c:	4602      	mov	r2, r0
 8012a1e:	460b      	mov	r3, r1
 8012a20:	4640      	mov	r0, r8
 8012a22:	4649      	mov	r1, r9
 8012a24:	f7ed fdd2 	bl	80005cc <__aeabi_dmul>
 8012a28:	2200      	movs	r2, #0
 8012a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012a32:	4620      	mov	r0, r4
 8012a34:	4629      	mov	r1, r5
 8012a36:	f7ed fc11 	bl	800025c <__aeabi_dsub>
 8012a3a:	4602      	mov	r2, r0
 8012a3c:	460b      	mov	r3, r1
 8012a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a42:	f7ed feed 	bl	8000820 <__aeabi_ddiv>
 8012a46:	4632      	mov	r2, r6
 8012a48:	4604      	mov	r4, r0
 8012a4a:	460d      	mov	r5, r1
 8012a4c:	463b      	mov	r3, r7
 8012a4e:	4640      	mov	r0, r8
 8012a50:	4649      	mov	r1, r9
 8012a52:	f7ed fdbb 	bl	80005cc <__aeabi_dmul>
 8012a56:	4632      	mov	r2, r6
 8012a58:	463b      	mov	r3, r7
 8012a5a:	f7ed fc01 	bl	8000260 <__adddf3>
 8012a5e:	4602      	mov	r2, r0
 8012a60:	460b      	mov	r3, r1
 8012a62:	4620      	mov	r0, r4
 8012a64:	4629      	mov	r1, r5
 8012a66:	f7ed fbf9 	bl	800025c <__aeabi_dsub>
 8012a6a:	4642      	mov	r2, r8
 8012a6c:	464b      	mov	r3, r9
 8012a6e:	f7ed fbf5 	bl	800025c <__aeabi_dsub>
 8012a72:	4602      	mov	r2, r0
 8012a74:	460b      	mov	r3, r1
 8012a76:	2000      	movs	r0, #0
 8012a78:	4939      	ldr	r1, [pc, #228]	; (8012b60 <__ieee754_pow+0xa20>)
 8012a7a:	f7ed fbef 	bl	800025c <__aeabi_dsub>
 8012a7e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8012a82:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012a86:	da29      	bge.n	8012adc <__ieee754_pow+0x99c>
 8012a88:	4652      	mov	r2, sl
 8012a8a:	f000 f955 	bl	8012d38 <scalbn>
 8012a8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a92:	f7ff bbfe 	b.w	8012292 <__ieee754_pow+0x152>
 8012a96:	4b33      	ldr	r3, [pc, #204]	; (8012b64 <__ieee754_pow+0xa24>)
 8012a98:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8012a9c:	429f      	cmp	r7, r3
 8012a9e:	f77f af13 	ble.w	80128c8 <__ieee754_pow+0x788>
 8012aa2:	4b31      	ldr	r3, [pc, #196]	; (8012b68 <__ieee754_pow+0xa28>)
 8012aa4:	440b      	add	r3, r1
 8012aa6:	4303      	orrs	r3, r0
 8012aa8:	d009      	beq.n	8012abe <__ieee754_pow+0x97e>
 8012aaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012aae:	2200      	movs	r2, #0
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	f7ed fffd 	bl	8000ab0 <__aeabi_dcmplt>
 8012ab6:	3800      	subs	r0, #0
 8012ab8:	bf18      	it	ne
 8012aba:	2001      	movne	r0, #1
 8012abc:	e453      	b.n	8012366 <__ieee754_pow+0x226>
 8012abe:	4622      	mov	r2, r4
 8012ac0:	462b      	mov	r3, r5
 8012ac2:	f7ed fbcb 	bl	800025c <__aeabi_dsub>
 8012ac6:	4642      	mov	r2, r8
 8012ac8:	464b      	mov	r3, r9
 8012aca:	f7ee f805 	bl	8000ad8 <__aeabi_dcmpge>
 8012ace:	2800      	cmp	r0, #0
 8012ad0:	f43f aefa 	beq.w	80128c8 <__ieee754_pow+0x788>
 8012ad4:	e7e9      	b.n	8012aaa <__ieee754_pow+0x96a>
 8012ad6:	f04f 0a00 	mov.w	sl, #0
 8012ada:	e720      	b.n	801291e <__ieee754_pow+0x7de>
 8012adc:	4621      	mov	r1, r4
 8012ade:	e7d6      	b.n	8012a8e <__ieee754_pow+0x94e>
 8012ae0:	f04f 0b00 	mov.w	fp, #0
 8012ae4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8012b60 <__ieee754_pow+0xa20>
 8012ae8:	f7ff bbba 	b.w	8012260 <__ieee754_pow+0x120>
 8012aec:	f04f 0b00 	mov.w	fp, #0
 8012af0:	f04f 0c00 	mov.w	ip, #0
 8012af4:	f7ff bbb4 	b.w	8012260 <__ieee754_pow+0x120>
 8012af8:	4640      	mov	r0, r8
 8012afa:	4649      	mov	r1, r9
 8012afc:	f7ff bb3d 	b.w	801217a <__ieee754_pow+0x3a>
 8012b00:	9200      	str	r2, [sp, #0]
 8012b02:	f7ff bb89 	b.w	8012218 <__ieee754_pow+0xd8>
 8012b06:	2300      	movs	r3, #0
 8012b08:	f7ff bb73 	b.w	80121f2 <__ieee754_pow+0xb2>
 8012b0c:	f3af 8000 	nop.w
 8012b10:	652b82fe 	.word	0x652b82fe
 8012b14:	3c971547 	.word	0x3c971547
 8012b18:	00000000 	.word	0x00000000
 8012b1c:	3fe62e43 	.word	0x3fe62e43
 8012b20:	fefa39ef 	.word	0xfefa39ef
 8012b24:	3fe62e42 	.word	0x3fe62e42
 8012b28:	0ca86c39 	.word	0x0ca86c39
 8012b2c:	be205c61 	.word	0xbe205c61
 8012b30:	72bea4d0 	.word	0x72bea4d0
 8012b34:	3e663769 	.word	0x3e663769
 8012b38:	c5d26bf1 	.word	0xc5d26bf1
 8012b3c:	3ebbbd41 	.word	0x3ebbbd41
 8012b40:	af25de2c 	.word	0xaf25de2c
 8012b44:	3f11566a 	.word	0x3f11566a
 8012b48:	16bebd93 	.word	0x16bebd93
 8012b4c:	3f66c16c 	.word	0x3f66c16c
 8012b50:	5555553e 	.word	0x5555553e
 8012b54:	3fc55555 	.word	0x3fc55555
 8012b58:	3fe00000 	.word	0x3fe00000
 8012b5c:	000fffff 	.word	0x000fffff
 8012b60:	3ff00000 	.word	0x3ff00000
 8012b64:	4090cbff 	.word	0x4090cbff
 8012b68:	3f6f3400 	.word	0x3f6f3400

08012b6c <__ieee754_sqrt>:
 8012b6c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8012cc8 <__ieee754_sqrt+0x15c>
 8012b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b74:	ea3c 0c01 	bics.w	ip, ip, r1
 8012b78:	4606      	mov	r6, r0
 8012b7a:	460d      	mov	r5, r1
 8012b7c:	460c      	mov	r4, r1
 8012b7e:	460a      	mov	r2, r1
 8012b80:	4607      	mov	r7, r0
 8012b82:	4603      	mov	r3, r0
 8012b84:	d10f      	bne.n	8012ba6 <__ieee754_sqrt+0x3a>
 8012b86:	4602      	mov	r2, r0
 8012b88:	460b      	mov	r3, r1
 8012b8a:	f7ed fd1f 	bl	80005cc <__aeabi_dmul>
 8012b8e:	4602      	mov	r2, r0
 8012b90:	460b      	mov	r3, r1
 8012b92:	4630      	mov	r0, r6
 8012b94:	4629      	mov	r1, r5
 8012b96:	f7ed fb63 	bl	8000260 <__adddf3>
 8012b9a:	4606      	mov	r6, r0
 8012b9c:	460d      	mov	r5, r1
 8012b9e:	4630      	mov	r0, r6
 8012ba0:	4629      	mov	r1, r5
 8012ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ba6:	2900      	cmp	r1, #0
 8012ba8:	dc0e      	bgt.n	8012bc8 <__ieee754_sqrt+0x5c>
 8012baa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8012bae:	ea5c 0707 	orrs.w	r7, ip, r7
 8012bb2:	d0f4      	beq.n	8012b9e <__ieee754_sqrt+0x32>
 8012bb4:	b141      	cbz	r1, 8012bc8 <__ieee754_sqrt+0x5c>
 8012bb6:	4602      	mov	r2, r0
 8012bb8:	460b      	mov	r3, r1
 8012bba:	f7ed fb4f 	bl	800025c <__aeabi_dsub>
 8012bbe:	4602      	mov	r2, r0
 8012bc0:	460b      	mov	r3, r1
 8012bc2:	f7ed fe2d 	bl	8000820 <__aeabi_ddiv>
 8012bc6:	e7e8      	b.n	8012b9a <__ieee754_sqrt+0x2e>
 8012bc8:	1521      	asrs	r1, r4, #20
 8012bca:	d075      	beq.n	8012cb8 <__ieee754_sqrt+0x14c>
 8012bcc:	07cc      	lsls	r4, r1, #31
 8012bce:	f04f 0400 	mov.w	r4, #0
 8012bd2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012bd6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8012bda:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8012bde:	bf5e      	ittt	pl
 8012be0:	0fd9      	lsrpl	r1, r3, #31
 8012be2:	005b      	lslpl	r3, r3, #1
 8012be4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8012be8:	0fd9      	lsrs	r1, r3, #31
 8012bea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8012bee:	2516      	movs	r5, #22
 8012bf0:	4620      	mov	r0, r4
 8012bf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012bf6:	107f      	asrs	r7, r7, #1
 8012bf8:	005b      	lsls	r3, r3, #1
 8012bfa:	1846      	adds	r6, r0, r1
 8012bfc:	4296      	cmp	r6, r2
 8012bfe:	bfde      	ittt	le
 8012c00:	1b92      	suble	r2, r2, r6
 8012c02:	1870      	addle	r0, r6, r1
 8012c04:	1864      	addle	r4, r4, r1
 8012c06:	0052      	lsls	r2, r2, #1
 8012c08:	3d01      	subs	r5, #1
 8012c0a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8012c0e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012c12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012c16:	d1f0      	bne.n	8012bfa <__ieee754_sqrt+0x8e>
 8012c18:	4629      	mov	r1, r5
 8012c1a:	f04f 0e20 	mov.w	lr, #32
 8012c1e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012c22:	4282      	cmp	r2, r0
 8012c24:	eb06 0c05 	add.w	ip, r6, r5
 8012c28:	dc02      	bgt.n	8012c30 <__ieee754_sqrt+0xc4>
 8012c2a:	d113      	bne.n	8012c54 <__ieee754_sqrt+0xe8>
 8012c2c:	459c      	cmp	ip, r3
 8012c2e:	d811      	bhi.n	8012c54 <__ieee754_sqrt+0xe8>
 8012c30:	f1bc 0f00 	cmp.w	ip, #0
 8012c34:	eb0c 0506 	add.w	r5, ip, r6
 8012c38:	da43      	bge.n	8012cc2 <__ieee754_sqrt+0x156>
 8012c3a:	2d00      	cmp	r5, #0
 8012c3c:	db41      	blt.n	8012cc2 <__ieee754_sqrt+0x156>
 8012c3e:	f100 0801 	add.w	r8, r0, #1
 8012c42:	1a12      	subs	r2, r2, r0
 8012c44:	4640      	mov	r0, r8
 8012c46:	459c      	cmp	ip, r3
 8012c48:	bf88      	it	hi
 8012c4a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8012c4e:	eba3 030c 	sub.w	r3, r3, ip
 8012c52:	4431      	add	r1, r6
 8012c54:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012c58:	f1be 0e01 	subs.w	lr, lr, #1
 8012c5c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8012c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012c64:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012c68:	d1db      	bne.n	8012c22 <__ieee754_sqrt+0xb6>
 8012c6a:	4313      	orrs	r3, r2
 8012c6c:	d006      	beq.n	8012c7c <__ieee754_sqrt+0x110>
 8012c6e:	1c48      	adds	r0, r1, #1
 8012c70:	bf0b      	itete	eq
 8012c72:	4671      	moveq	r1, lr
 8012c74:	3101      	addne	r1, #1
 8012c76:	3401      	addeq	r4, #1
 8012c78:	f021 0101 	bicne.w	r1, r1, #1
 8012c7c:	1063      	asrs	r3, r4, #1
 8012c7e:	0849      	lsrs	r1, r1, #1
 8012c80:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012c84:	07e2      	lsls	r2, r4, #31
 8012c86:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012c8a:	bf48      	it	mi
 8012c8c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8012c90:	460e      	mov	r6, r1
 8012c92:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012c96:	e782      	b.n	8012b9e <__ieee754_sqrt+0x32>
 8012c98:	0ada      	lsrs	r2, r3, #11
 8012c9a:	3815      	subs	r0, #21
 8012c9c:	055b      	lsls	r3, r3, #21
 8012c9e:	2a00      	cmp	r2, #0
 8012ca0:	d0fa      	beq.n	8012c98 <__ieee754_sqrt+0x12c>
 8012ca2:	02d5      	lsls	r5, r2, #11
 8012ca4:	d50a      	bpl.n	8012cbc <__ieee754_sqrt+0x150>
 8012ca6:	f1c1 0420 	rsb	r4, r1, #32
 8012caa:	fa23 f404 	lsr.w	r4, r3, r4
 8012cae:	1e4d      	subs	r5, r1, #1
 8012cb0:	408b      	lsls	r3, r1
 8012cb2:	4322      	orrs	r2, r4
 8012cb4:	1b41      	subs	r1, r0, r5
 8012cb6:	e789      	b.n	8012bcc <__ieee754_sqrt+0x60>
 8012cb8:	4608      	mov	r0, r1
 8012cba:	e7f0      	b.n	8012c9e <__ieee754_sqrt+0x132>
 8012cbc:	0052      	lsls	r2, r2, #1
 8012cbe:	3101      	adds	r1, #1
 8012cc0:	e7ef      	b.n	8012ca2 <__ieee754_sqrt+0x136>
 8012cc2:	4680      	mov	r8, r0
 8012cc4:	e7bd      	b.n	8012c42 <__ieee754_sqrt+0xd6>
 8012cc6:	bf00      	nop
 8012cc8:	7ff00000 	.word	0x7ff00000

08012ccc <with_errno>:
 8012ccc:	b570      	push	{r4, r5, r6, lr}
 8012cce:	4604      	mov	r4, r0
 8012cd0:	460d      	mov	r5, r1
 8012cd2:	4616      	mov	r6, r2
 8012cd4:	f7fc fa40 	bl	800f158 <__errno>
 8012cd8:	4629      	mov	r1, r5
 8012cda:	6006      	str	r6, [r0, #0]
 8012cdc:	4620      	mov	r0, r4
 8012cde:	bd70      	pop	{r4, r5, r6, pc}

08012ce0 <xflow>:
 8012ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ce2:	4615      	mov	r5, r2
 8012ce4:	461c      	mov	r4, r3
 8012ce6:	b180      	cbz	r0, 8012d0a <xflow+0x2a>
 8012ce8:	4610      	mov	r0, r2
 8012cea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012cee:	e9cd 0100 	strd	r0, r1, [sp]
 8012cf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	4621      	mov	r1, r4
 8012cfa:	f7ed fc67 	bl	80005cc <__aeabi_dmul>
 8012cfe:	2222      	movs	r2, #34	; 0x22
 8012d00:	b003      	add	sp, #12
 8012d02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d06:	f7ff bfe1 	b.w	8012ccc <with_errno>
 8012d0a:	4610      	mov	r0, r2
 8012d0c:	4619      	mov	r1, r3
 8012d0e:	e7ee      	b.n	8012cee <xflow+0xe>

08012d10 <__math_uflow>:
 8012d10:	2200      	movs	r2, #0
 8012d12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012d16:	f7ff bfe3 	b.w	8012ce0 <xflow>

08012d1a <__math_oflow>:
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012d20:	f7ff bfde 	b.w	8012ce0 <xflow>

08012d24 <fabs>:
 8012d24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012d28:	4770      	bx	lr

08012d2a <finite>:
 8012d2a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8012d2e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012d32:	0fc0      	lsrs	r0, r0, #31
 8012d34:	4770      	bx	lr
	...

08012d38 <scalbn>:
 8012d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d3a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8012d3e:	4604      	mov	r4, r0
 8012d40:	460d      	mov	r5, r1
 8012d42:	4617      	mov	r7, r2
 8012d44:	460b      	mov	r3, r1
 8012d46:	b996      	cbnz	r6, 8012d6e <scalbn+0x36>
 8012d48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012d4c:	4303      	orrs	r3, r0
 8012d4e:	d039      	beq.n	8012dc4 <scalbn+0x8c>
 8012d50:	4b33      	ldr	r3, [pc, #204]	; (8012e20 <scalbn+0xe8>)
 8012d52:	2200      	movs	r2, #0
 8012d54:	f7ed fc3a 	bl	80005cc <__aeabi_dmul>
 8012d58:	4b32      	ldr	r3, [pc, #200]	; (8012e24 <scalbn+0xec>)
 8012d5a:	4604      	mov	r4, r0
 8012d5c:	429f      	cmp	r7, r3
 8012d5e:	460d      	mov	r5, r1
 8012d60:	da0f      	bge.n	8012d82 <scalbn+0x4a>
 8012d62:	a32b      	add	r3, pc, #172	; (adr r3, 8012e10 <scalbn+0xd8>)
 8012d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d68:	f7ed fc30 	bl	80005cc <__aeabi_dmul>
 8012d6c:	e006      	b.n	8012d7c <scalbn+0x44>
 8012d6e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012d72:	4296      	cmp	r6, r2
 8012d74:	d10a      	bne.n	8012d8c <scalbn+0x54>
 8012d76:	4602      	mov	r2, r0
 8012d78:	f7ed fa72 	bl	8000260 <__adddf3>
 8012d7c:	4604      	mov	r4, r0
 8012d7e:	460d      	mov	r5, r1
 8012d80:	e020      	b.n	8012dc4 <scalbn+0x8c>
 8012d82:	460b      	mov	r3, r1
 8012d84:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012d88:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8012d8c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8012d90:	19b9      	adds	r1, r7, r6
 8012d92:	4291      	cmp	r1, r2
 8012d94:	dd0e      	ble.n	8012db4 <scalbn+0x7c>
 8012d96:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8012d9a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8012d9e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8012da2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8012da6:	4820      	ldr	r0, [pc, #128]	; (8012e28 <scalbn+0xf0>)
 8012da8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8012dac:	a31a      	add	r3, pc, #104	; (adr r3, 8012e18 <scalbn+0xe0>)
 8012dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012db2:	e7d9      	b.n	8012d68 <scalbn+0x30>
 8012db4:	2900      	cmp	r1, #0
 8012db6:	dd08      	ble.n	8012dca <scalbn+0x92>
 8012db8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012dbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012dc0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	4629      	mov	r1, r5
 8012dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8012dce:	da12      	bge.n	8012df6 <scalbn+0xbe>
 8012dd0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012dd4:	429f      	cmp	r7, r3
 8012dd6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8012dda:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8012dde:	dcdc      	bgt.n	8012d9a <scalbn+0x62>
 8012de0:	a30b      	add	r3, pc, #44	; (adr r3, 8012e10 <scalbn+0xd8>)
 8012de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8012dea:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8012dee:	480f      	ldr	r0, [pc, #60]	; (8012e2c <scalbn+0xf4>)
 8012df0:	f041 011f 	orr.w	r1, r1, #31
 8012df4:	e7b8      	b.n	8012d68 <scalbn+0x30>
 8012df6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012dfa:	3136      	adds	r1, #54	; 0x36
 8012dfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012e00:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8012e04:	4620      	mov	r0, r4
 8012e06:	4629      	mov	r1, r5
 8012e08:	2200      	movs	r2, #0
 8012e0a:	4b09      	ldr	r3, [pc, #36]	; (8012e30 <scalbn+0xf8>)
 8012e0c:	e7ac      	b.n	8012d68 <scalbn+0x30>
 8012e0e:	bf00      	nop
 8012e10:	c2f8f359 	.word	0xc2f8f359
 8012e14:	01a56e1f 	.word	0x01a56e1f
 8012e18:	8800759c 	.word	0x8800759c
 8012e1c:	7e37e43c 	.word	0x7e37e43c
 8012e20:	43500000 	.word	0x43500000
 8012e24:	ffff3cb0 	.word	0xffff3cb0
 8012e28:	8800759c 	.word	0x8800759c
 8012e2c:	c2f8f359 	.word	0xc2f8f359
 8012e30:	3c900000 	.word	0x3c900000

08012e34 <_init>:
 8012e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e36:	bf00      	nop
 8012e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e3a:	bc08      	pop	{r3}
 8012e3c:	469e      	mov	lr, r3
 8012e3e:	4770      	bx	lr

08012e40 <_fini>:
 8012e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e42:	bf00      	nop
 8012e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e46:	bc08      	pop	{r3}
 8012e48:	469e      	mov	lr, r3
 8012e4a:	4770      	bx	lr
