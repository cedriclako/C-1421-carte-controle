
UFEC23_Novika.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001124c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013d0  08011440  08011440  00021440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012810  08012810  0003032c  2**0
                  CONTENTS
  4 .ARM          00000008  08012810  08012810  00022810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012818  08012818  0003032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012818  08012818  00022818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801281c  0801281c  0002281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  08012820  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003578  20000330  08012b4c  00030330  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200038a8  08012b4c  000338a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aa23  00000000  00000000  00030355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cec  00000000  00000000  0005ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc0  00000000  00000000  00060a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad8  00000000  00000000  00062728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c5a  00000000  00000000  00064200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023677  00000000  00000000  00089e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a1b  00000000  00000000  000ad4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176eec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b2c  00000000  00000000  00176f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000330 	.word	0x20000330
 800020c:	00000000 	.word	0x00000000
 8000210:	08011424 	.word	0x08011424

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000334 	.word	0x20000334
 800022c:	08011424 	.word	0x08011424

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	; 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_frsub>:
 8000c1c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c20:	e002      	b.n	8000c28 <__addsf3>
 8000c22:	bf00      	nop

08000c24 <__aeabi_fsub>:
 8000c24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c28 <__addsf3>:
 8000c28:	0042      	lsls	r2, r0, #1
 8000c2a:	bf1f      	itttt	ne
 8000c2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c30:	ea92 0f03 	teqne	r2, r3
 8000c34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3c:	d06a      	beq.n	8000d14 <__addsf3+0xec>
 8000c3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c46:	bfc1      	itttt	gt
 8000c48:	18d2      	addgt	r2, r2, r3
 8000c4a:	4041      	eorgt	r1, r0
 8000c4c:	4048      	eorgt	r0, r1
 8000c4e:	4041      	eorgt	r1, r0
 8000c50:	bfb8      	it	lt
 8000c52:	425b      	neglt	r3, r3
 8000c54:	2b19      	cmp	r3, #25
 8000c56:	bf88      	it	hi
 8000c58:	4770      	bxhi	lr
 8000c5a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c66:	bf18      	it	ne
 8000c68:	4240      	negne	r0, r0
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c76:	bf18      	it	ne
 8000c78:	4249      	negne	r1, r1
 8000c7a:	ea92 0f03 	teq	r2, r3
 8000c7e:	d03f      	beq.n	8000d00 <__addsf3+0xd8>
 8000c80:	f1a2 0201 	sub.w	r2, r2, #1
 8000c84:	fa41 fc03 	asr.w	ip, r1, r3
 8000c88:	eb10 000c 	adds.w	r0, r0, ip
 8000c8c:	f1c3 0320 	rsb	r3, r3, #32
 8000c90:	fa01 f103 	lsl.w	r1, r1, r3
 8000c94:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__addsf3+0x78>
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ca0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ca4:	d313      	bcc.n	8000cce <__addsf3+0xa6>
 8000ca6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000caa:	d306      	bcc.n	8000cba <__addsf3+0x92>
 8000cac:	0840      	lsrs	r0, r0, #1
 8000cae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cb2:	f102 0201 	add.w	r2, r2, #1
 8000cb6:	2afe      	cmp	r2, #254	; 0xfe
 8000cb8:	d251      	bcs.n	8000d5e <__addsf3+0x136>
 8000cba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc2:	bf08      	it	eq
 8000cc4:	f020 0001 	biceq.w	r0, r0, #1
 8000cc8:	ea40 0003 	orr.w	r0, r0, r3
 8000ccc:	4770      	bx	lr
 8000cce:	0049      	lsls	r1, r1, #1
 8000cd0:	eb40 0000 	adc.w	r0, r0, r0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cdc:	d2ed      	bcs.n	8000cba <__addsf3+0x92>
 8000cde:	fab0 fc80 	clz	ip, r0
 8000ce2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ce6:	ebb2 020c 	subs.w	r2, r2, ip
 8000cea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cee:	bfaa      	itet	ge
 8000cf0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cf4:	4252      	neglt	r2, r2
 8000cf6:	4318      	orrge	r0, r3
 8000cf8:	bfbc      	itt	lt
 8000cfa:	40d0      	lsrlt	r0, r2
 8000cfc:	4318      	orrlt	r0, r3
 8000cfe:	4770      	bx	lr
 8000d00:	f092 0f00 	teq	r2, #0
 8000d04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d08:	bf06      	itte	eq
 8000d0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d0e:	3201      	addeq	r2, #1
 8000d10:	3b01      	subne	r3, #1
 8000d12:	e7b5      	b.n	8000c80 <__addsf3+0x58>
 8000d14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d1c:	bf18      	it	ne
 8000d1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d22:	d021      	beq.n	8000d68 <__addsf3+0x140>
 8000d24:	ea92 0f03 	teq	r2, r3
 8000d28:	d004      	beq.n	8000d34 <__addsf3+0x10c>
 8000d2a:	f092 0f00 	teq	r2, #0
 8000d2e:	bf08      	it	eq
 8000d30:	4608      	moveq	r0, r1
 8000d32:	4770      	bx	lr
 8000d34:	ea90 0f01 	teq	r0, r1
 8000d38:	bf1c      	itt	ne
 8000d3a:	2000      	movne	r0, #0
 8000d3c:	4770      	bxne	lr
 8000d3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d42:	d104      	bne.n	8000d4e <__addsf3+0x126>
 8000d44:	0040      	lsls	r0, r0, #1
 8000d46:	bf28      	it	cs
 8000d48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	4770      	bx	lr
 8000d4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d52:	bf3c      	itt	cc
 8000d54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d58:	4770      	bxcc	lr
 8000d5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d66:	4770      	bx	lr
 8000d68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d6c:	bf16      	itet	ne
 8000d6e:	4608      	movne	r0, r1
 8000d70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d74:	4601      	movne	r1, r0
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	bf06      	itte	eq
 8000d7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d7e:	ea90 0f01 	teqeq	r0, r1
 8000d82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_ui2f>:
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e004      	b.n	8000d98 <__aeabi_i2f+0x8>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_i2f>:
 8000d90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d94:	bf48      	it	mi
 8000d96:	4240      	negmi	r0, r0
 8000d98:	ea5f 0c00 	movs.w	ip, r0
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000da4:	4601      	mov	r1, r0
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	e01c      	b.n	8000de6 <__aeabi_l2f+0x2a>

08000dac <__aeabi_ul2f>:
 8000dac:	ea50 0201 	orrs.w	r2, r0, r1
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e00a      	b.n	8000dd0 <__aeabi_l2f+0x14>
 8000dba:	bf00      	nop

08000dbc <__aeabi_l2f>:
 8000dbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dc8:	d502      	bpl.n	8000dd0 <__aeabi_l2f+0x14>
 8000dca:	4240      	negs	r0, r0
 8000dcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd0:	ea5f 0c01 	movs.w	ip, r1
 8000dd4:	bf02      	ittt	eq
 8000dd6:	4684      	moveq	ip, r0
 8000dd8:	4601      	moveq	r1, r0
 8000dda:	2000      	moveq	r0, #0
 8000ddc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000de0:	bf08      	it	eq
 8000de2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000de6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dea:	fabc f28c 	clz	r2, ip
 8000dee:	3a08      	subs	r2, #8
 8000df0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000df4:	db10      	blt.n	8000e18 <__aeabi_l2f+0x5c>
 8000df6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e00:	f1c2 0220 	rsb	r2, r2, #32
 8000e04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e08:	fa20 f202 	lsr.w	r2, r0, r2
 8000e0c:	eb43 0002 	adc.w	r0, r3, r2
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f102 0220 	add.w	r2, r2, #32
 8000e1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e20:	f1c2 0220 	rsb	r2, r2, #32
 8000e24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e28:	fa21 f202 	lsr.w	r2, r1, r2
 8000e2c:	eb43 0002 	adc.w	r0, r3, r2
 8000e30:	bf08      	it	eq
 8000e32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e36:	4770      	bx	lr

08000e38 <__aeabi_fmul>:
 8000e38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e40:	bf1e      	ittt	ne
 8000e42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e46:	ea92 0f0c 	teqne	r2, ip
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d06f      	beq.n	8000f30 <__aeabi_fmul+0xf8>
 8000e50:	441a      	add	r2, r3
 8000e52:	ea80 0c01 	eor.w	ip, r0, r1
 8000e56:	0240      	lsls	r0, r0, #9
 8000e58:	bf18      	it	ne
 8000e5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e5e:	d01e      	beq.n	8000e9e <__aeabi_fmul+0x66>
 8000e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e78:	bf3e      	ittt	cc
 8000e7a:	0049      	lslcc	r1, r1, #1
 8000e7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e80:	005b      	lslcc	r3, r3, #1
 8000e82:	ea40 0001 	orr.w	r0, r0, r1
 8000e86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e8a:	2afd      	cmp	r2, #253	; 0xfd
 8000e8c:	d81d      	bhi.n	8000eca <__aeabi_fmul+0x92>
 8000e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e96:	bf08      	it	eq
 8000e98:	f020 0001 	biceq.w	r0, r0, #1
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea6:	bf08      	it	eq
 8000ea8:	0249      	lsleq	r1, r1, #9
 8000eaa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000eb2:	3a7f      	subs	r2, #127	; 0x7f
 8000eb4:	bfc2      	ittt	gt
 8000eb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ebe:	4770      	bxgt	lr
 8000ec0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	3a01      	subs	r2, #1
 8000eca:	dc5d      	bgt.n	8000f88 <__aeabi_fmul+0x150>
 8000ecc:	f112 0f19 	cmn.w	r2, #25
 8000ed0:	bfdc      	itt	le
 8000ed2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ed6:	4770      	bxle	lr
 8000ed8:	f1c2 0200 	rsb	r2, r2, #0
 8000edc:	0041      	lsls	r1, r0, #1
 8000ede:	fa21 f102 	lsr.w	r1, r1, r2
 8000ee2:	f1c2 0220 	rsb	r2, r2, #32
 8000ee6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eee:	f140 0000 	adc.w	r0, r0, #0
 8000ef2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ef6:	bf08      	it	eq
 8000ef8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000efc:	4770      	bx	lr
 8000efe:	f092 0f00 	teq	r2, #0
 8000f02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0040      	lsleq	r0, r0, #1
 8000f0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0e:	3a01      	subeq	r2, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fmul+0xce>
 8000f12:	ea40 000c 	orr.w	r0, r0, ip
 8000f16:	f093 0f00 	teq	r3, #0
 8000f1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0049      	lsleq	r1, r1, #1
 8000f22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f26:	3b01      	subeq	r3, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fmul+0xe6>
 8000f2a:	ea41 010c 	orr.w	r1, r1, ip
 8000f2e:	e78f      	b.n	8000e50 <__aeabi_fmul+0x18>
 8000f30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f34:	ea92 0f0c 	teq	r2, ip
 8000f38:	bf18      	it	ne
 8000f3a:	ea93 0f0c 	teqne	r3, ip
 8000f3e:	d00a      	beq.n	8000f56 <__aeabi_fmul+0x11e>
 8000f40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f44:	bf18      	it	ne
 8000f46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	d1d8      	bne.n	8000efe <__aeabi_fmul+0xc6>
 8000f4c:	ea80 0001 	eor.w	r0, r0, r1
 8000f50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f54:	4770      	bx	lr
 8000f56:	f090 0f00 	teq	r0, #0
 8000f5a:	bf17      	itett	ne
 8000f5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f60:	4608      	moveq	r0, r1
 8000f62:	f091 0f00 	teqne	r1, #0
 8000f66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f6a:	d014      	beq.n	8000f96 <__aeabi_fmul+0x15e>
 8000f6c:	ea92 0f0c 	teq	r2, ip
 8000f70:	d101      	bne.n	8000f76 <__aeabi_fmul+0x13e>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d10f      	bne.n	8000f96 <__aeabi_fmul+0x15e>
 8000f76:	ea93 0f0c 	teq	r3, ip
 8000f7a:	d103      	bne.n	8000f84 <__aeabi_fmul+0x14c>
 8000f7c:	024b      	lsls	r3, r1, #9
 8000f7e:	bf18      	it	ne
 8000f80:	4608      	movne	r0, r1
 8000f82:	d108      	bne.n	8000f96 <__aeabi_fmul+0x15e>
 8000f84:	ea80 0001 	eor.w	r0, r0, r1
 8000f88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f94:	4770      	bx	lr
 8000f96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f9e:	4770      	bx	lr

08000fa0 <__aeabi_fdiv>:
 8000fa0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fa4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fa8:	bf1e      	ittt	ne
 8000faa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fae:	ea92 0f0c 	teqne	r2, ip
 8000fb2:	ea93 0f0c 	teqne	r3, ip
 8000fb6:	d069      	beq.n	800108c <__aeabi_fdiv+0xec>
 8000fb8:	eba2 0203 	sub.w	r2, r2, r3
 8000fbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000fc0:	0249      	lsls	r1, r1, #9
 8000fc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fc6:	d037      	beq.n	8001038 <__aeabi_fdiv+0x98>
 8000fc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fcc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	bf38      	it	cc
 8000fdc:	005b      	lslcc	r3, r3, #1
 8000fde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fe2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	bf24      	itt	cs
 8000fea:	1a5b      	subcs	r3, r3, r1
 8000fec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ff0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ffa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ffe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001002:	bf24      	itt	cs
 8001004:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001008:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800100c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001010:	bf24      	itt	cs
 8001012:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001016:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	bf18      	it	ne
 800101e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001022:	d1e0      	bne.n	8000fe6 <__aeabi_fdiv+0x46>
 8001024:	2afd      	cmp	r2, #253	; 0xfd
 8001026:	f63f af50 	bhi.w	8000eca <__aeabi_fmul+0x92>
 800102a:	428b      	cmp	r3, r1
 800102c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001030:	bf08      	it	eq
 8001032:	f020 0001 	biceq.w	r0, r0, #1
 8001036:	4770      	bx	lr
 8001038:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800103c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001040:	327f      	adds	r2, #127	; 0x7f
 8001042:	bfc2      	ittt	gt
 8001044:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001048:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800104c:	4770      	bxgt	lr
 800104e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	3a01      	subs	r2, #1
 8001058:	e737      	b.n	8000eca <__aeabi_fmul+0x92>
 800105a:	f092 0f00 	teq	r2, #0
 800105e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001062:	bf02      	ittt	eq
 8001064:	0040      	lsleq	r0, r0, #1
 8001066:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800106a:	3a01      	subeq	r2, #1
 800106c:	d0f9      	beq.n	8001062 <__aeabi_fdiv+0xc2>
 800106e:	ea40 000c 	orr.w	r0, r0, ip
 8001072:	f093 0f00 	teq	r3, #0
 8001076:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800107a:	bf02      	ittt	eq
 800107c:	0049      	lsleq	r1, r1, #1
 800107e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001082:	3b01      	subeq	r3, #1
 8001084:	d0f9      	beq.n	800107a <__aeabi_fdiv+0xda>
 8001086:	ea41 010c 	orr.w	r1, r1, ip
 800108a:	e795      	b.n	8000fb8 <__aeabi_fdiv+0x18>
 800108c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001090:	ea92 0f0c 	teq	r2, ip
 8001094:	d108      	bne.n	80010a8 <__aeabi_fdiv+0x108>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	f47f af7d 	bne.w	8000f96 <__aeabi_fmul+0x15e>
 800109c:	ea93 0f0c 	teq	r3, ip
 80010a0:	f47f af70 	bne.w	8000f84 <__aeabi_fmul+0x14c>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e776      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010a8:	ea93 0f0c 	teq	r3, ip
 80010ac:	d104      	bne.n	80010b8 <__aeabi_fdiv+0x118>
 80010ae:	024b      	lsls	r3, r1, #9
 80010b0:	f43f af4c 	beq.w	8000f4c <__aeabi_fmul+0x114>
 80010b4:	4608      	mov	r0, r1
 80010b6:	e76e      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010bc:	bf18      	it	ne
 80010be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010c2:	d1ca      	bne.n	800105a <__aeabi_fdiv+0xba>
 80010c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010c8:	f47f af5c 	bne.w	8000f84 <__aeabi_fmul+0x14c>
 80010cc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010d0:	f47f af3c 	bne.w	8000f4c <__aeabi_fmul+0x114>
 80010d4:	e75f      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010d6:	bf00      	nop

080010d8 <__gesf2>:
 80010d8:	f04f 3cff 	mov.w	ip, #4294967295
 80010dc:	e006      	b.n	80010ec <__cmpsf2+0x4>
 80010de:	bf00      	nop

080010e0 <__lesf2>:
 80010e0:	f04f 0c01 	mov.w	ip, #1
 80010e4:	e002      	b.n	80010ec <__cmpsf2+0x4>
 80010e6:	bf00      	nop

080010e8 <__cmpsf2>:
 80010e8:	f04f 0c01 	mov.w	ip, #1
 80010ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010fc:	bf18      	it	ne
 80010fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001102:	d011      	beq.n	8001128 <__cmpsf2+0x40>
 8001104:	b001      	add	sp, #4
 8001106:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800110a:	bf18      	it	ne
 800110c:	ea90 0f01 	teqne	r0, r1
 8001110:	bf58      	it	pl
 8001112:	ebb2 0003 	subspl.w	r0, r2, r3
 8001116:	bf88      	it	hi
 8001118:	17c8      	asrhi	r0, r1, #31
 800111a:	bf38      	it	cc
 800111c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001120:	bf18      	it	ne
 8001122:	f040 0001 	orrne.w	r0, r0, #1
 8001126:	4770      	bx	lr
 8001128:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800112c:	d102      	bne.n	8001134 <__cmpsf2+0x4c>
 800112e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001132:	d105      	bne.n	8001140 <__cmpsf2+0x58>
 8001134:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001138:	d1e4      	bne.n	8001104 <__cmpsf2+0x1c>
 800113a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800113e:	d0e1      	beq.n	8001104 <__cmpsf2+0x1c>
 8001140:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <__aeabi_cfrcmple>:
 8001148:	4684      	mov	ip, r0
 800114a:	4608      	mov	r0, r1
 800114c:	4661      	mov	r1, ip
 800114e:	e7ff      	b.n	8001150 <__aeabi_cfcmpeq>

08001150 <__aeabi_cfcmpeq>:
 8001150:	b50f      	push	{r0, r1, r2, r3, lr}
 8001152:	f7ff ffc9 	bl	80010e8 <__cmpsf2>
 8001156:	2800      	cmp	r0, #0
 8001158:	bf48      	it	mi
 800115a:	f110 0f00 	cmnmi.w	r0, #0
 800115e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001160 <__aeabi_fcmpeq>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff fff4 	bl	8001150 <__aeabi_cfcmpeq>
 8001168:	bf0c      	ite	eq
 800116a:	2001      	moveq	r0, #1
 800116c:	2000      	movne	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmplt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffea 	bl	8001150 <__aeabi_cfcmpeq>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmple>:
 8001188:	f84d ed08 	str.w	lr, [sp, #-8]!
 800118c:	f7ff ffe0 	bl	8001150 <__aeabi_cfcmpeq>
 8001190:	bf94      	ite	ls
 8001192:	2001      	movls	r0, #1
 8001194:	2000      	movhi	r0, #0
 8001196:	f85d fb08 	ldr.w	pc, [sp], #8
 800119a:	bf00      	nop

0800119c <__aeabi_fcmpge>:
 800119c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a0:	f7ff ffd2 	bl	8001148 <__aeabi_cfrcmple>
 80011a4:	bf94      	ite	ls
 80011a6:	2001      	movls	r0, #1
 80011a8:	2000      	movhi	r0, #0
 80011aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ae:	bf00      	nop

080011b0 <__aeabi_fcmpgt>:
 80011b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b4:	f7ff ffc8 	bl	8001148 <__aeabi_cfrcmple>
 80011b8:	bf34      	ite	cc
 80011ba:	2001      	movcc	r0, #1
 80011bc:	2000      	movcs	r0, #0
 80011be:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c2:	bf00      	nop

080011c4 <__aeabi_uldivmod>:
 80011c4:	b953      	cbnz	r3, 80011dc <__aeabi_uldivmod+0x18>
 80011c6:	b94a      	cbnz	r2, 80011dc <__aeabi_uldivmod+0x18>
 80011c8:	2900      	cmp	r1, #0
 80011ca:	bf08      	it	eq
 80011cc:	2800      	cmpeq	r0, #0
 80011ce:	bf1c      	itt	ne
 80011d0:	f04f 31ff 	movne.w	r1, #4294967295
 80011d4:	f04f 30ff 	movne.w	r0, #4294967295
 80011d8:	f000 b96e 	b.w	80014b8 <__aeabi_idiv0>
 80011dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80011e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011e4:	f000 f806 	bl	80011f4 <__udivmoddi4>
 80011e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f0:	b004      	add	sp, #16
 80011f2:	4770      	bx	lr

080011f4 <__udivmoddi4>:
 80011f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011f8:	9e08      	ldr	r6, [sp, #32]
 80011fa:	460d      	mov	r5, r1
 80011fc:	4604      	mov	r4, r0
 80011fe:	468e      	mov	lr, r1
 8001200:	2b00      	cmp	r3, #0
 8001202:	f040 8083 	bne.w	800130c <__udivmoddi4+0x118>
 8001206:	428a      	cmp	r2, r1
 8001208:	4617      	mov	r7, r2
 800120a:	d947      	bls.n	800129c <__udivmoddi4+0xa8>
 800120c:	fab2 f382 	clz	r3, r2
 8001210:	b14b      	cbz	r3, 8001226 <__udivmoddi4+0x32>
 8001212:	f1c3 0120 	rsb	r1, r3, #32
 8001216:	fa05 fe03 	lsl.w	lr, r5, r3
 800121a:	fa20 f101 	lsr.w	r1, r0, r1
 800121e:	409f      	lsls	r7, r3
 8001220:	ea41 0e0e 	orr.w	lr, r1, lr
 8001224:	409c      	lsls	r4, r3
 8001226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800122a:	fbbe fcf8 	udiv	ip, lr, r8
 800122e:	fa1f f987 	uxth.w	r9, r7
 8001232:	fb08 e21c 	mls	r2, r8, ip, lr
 8001236:	fb0c f009 	mul.w	r0, ip, r9
 800123a:	0c21      	lsrs	r1, r4, #16
 800123c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001240:	4290      	cmp	r0, r2
 8001242:	d90a      	bls.n	800125a <__udivmoddi4+0x66>
 8001244:	18ba      	adds	r2, r7, r2
 8001246:	f10c 31ff 	add.w	r1, ip, #4294967295
 800124a:	f080 8118 	bcs.w	800147e <__udivmoddi4+0x28a>
 800124e:	4290      	cmp	r0, r2
 8001250:	f240 8115 	bls.w	800147e <__udivmoddi4+0x28a>
 8001254:	f1ac 0c02 	sub.w	ip, ip, #2
 8001258:	443a      	add	r2, r7
 800125a:	1a12      	subs	r2, r2, r0
 800125c:	fbb2 f0f8 	udiv	r0, r2, r8
 8001260:	fb08 2210 	mls	r2, r8, r0, r2
 8001264:	fb00 f109 	mul.w	r1, r0, r9
 8001268:	b2a4      	uxth	r4, r4
 800126a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800126e:	42a1      	cmp	r1, r4
 8001270:	d909      	bls.n	8001286 <__udivmoddi4+0x92>
 8001272:	193c      	adds	r4, r7, r4
 8001274:	f100 32ff 	add.w	r2, r0, #4294967295
 8001278:	f080 8103 	bcs.w	8001482 <__udivmoddi4+0x28e>
 800127c:	42a1      	cmp	r1, r4
 800127e:	f240 8100 	bls.w	8001482 <__udivmoddi4+0x28e>
 8001282:	3802      	subs	r0, #2
 8001284:	443c      	add	r4, r7
 8001286:	1a64      	subs	r4, r4, r1
 8001288:	2100      	movs	r1, #0
 800128a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800128e:	b11e      	cbz	r6, 8001298 <__udivmoddi4+0xa4>
 8001290:	2200      	movs	r2, #0
 8001292:	40dc      	lsrs	r4, r3
 8001294:	e9c6 4200 	strd	r4, r2, [r6]
 8001298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800129c:	b902      	cbnz	r2, 80012a0 <__udivmoddi4+0xac>
 800129e:	deff      	udf	#255	; 0xff
 80012a0:	fab2 f382 	clz	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d14f      	bne.n	8001348 <__udivmoddi4+0x154>
 80012a8:	1a8d      	subs	r5, r1, r2
 80012aa:	2101      	movs	r1, #1
 80012ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80012b0:	fa1f f882 	uxth.w	r8, r2
 80012b4:	fbb5 fcfe 	udiv	ip, r5, lr
 80012b8:	fb0e 551c 	mls	r5, lr, ip, r5
 80012bc:	fb08 f00c 	mul.w	r0, r8, ip
 80012c0:	0c22      	lsrs	r2, r4, #16
 80012c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80012c6:	42a8      	cmp	r0, r5
 80012c8:	d907      	bls.n	80012da <__udivmoddi4+0xe6>
 80012ca:	197d      	adds	r5, r7, r5
 80012cc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80012d0:	d202      	bcs.n	80012d8 <__udivmoddi4+0xe4>
 80012d2:	42a8      	cmp	r0, r5
 80012d4:	f200 80e9 	bhi.w	80014aa <__udivmoddi4+0x2b6>
 80012d8:	4694      	mov	ip, r2
 80012da:	1a2d      	subs	r5, r5, r0
 80012dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80012e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80012e4:	fb08 f800 	mul.w	r8, r8, r0
 80012e8:	b2a4      	uxth	r4, r4
 80012ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012ee:	45a0      	cmp	r8, r4
 80012f0:	d907      	bls.n	8001302 <__udivmoddi4+0x10e>
 80012f2:	193c      	adds	r4, r7, r4
 80012f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80012f8:	d202      	bcs.n	8001300 <__udivmoddi4+0x10c>
 80012fa:	45a0      	cmp	r8, r4
 80012fc:	f200 80d9 	bhi.w	80014b2 <__udivmoddi4+0x2be>
 8001300:	4610      	mov	r0, r2
 8001302:	eba4 0408 	sub.w	r4, r4, r8
 8001306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800130a:	e7c0      	b.n	800128e <__udivmoddi4+0x9a>
 800130c:	428b      	cmp	r3, r1
 800130e:	d908      	bls.n	8001322 <__udivmoddi4+0x12e>
 8001310:	2e00      	cmp	r6, #0
 8001312:	f000 80b1 	beq.w	8001478 <__udivmoddi4+0x284>
 8001316:	2100      	movs	r1, #0
 8001318:	e9c6 0500 	strd	r0, r5, [r6]
 800131c:	4608      	mov	r0, r1
 800131e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001322:	fab3 f183 	clz	r1, r3
 8001326:	2900      	cmp	r1, #0
 8001328:	d14b      	bne.n	80013c2 <__udivmoddi4+0x1ce>
 800132a:	42ab      	cmp	r3, r5
 800132c:	d302      	bcc.n	8001334 <__udivmoddi4+0x140>
 800132e:	4282      	cmp	r2, r0
 8001330:	f200 80b9 	bhi.w	80014a6 <__udivmoddi4+0x2b2>
 8001334:	1a84      	subs	r4, r0, r2
 8001336:	eb65 0303 	sbc.w	r3, r5, r3
 800133a:	2001      	movs	r0, #1
 800133c:	469e      	mov	lr, r3
 800133e:	2e00      	cmp	r6, #0
 8001340:	d0aa      	beq.n	8001298 <__udivmoddi4+0xa4>
 8001342:	e9c6 4e00 	strd	r4, lr, [r6]
 8001346:	e7a7      	b.n	8001298 <__udivmoddi4+0xa4>
 8001348:	409f      	lsls	r7, r3
 800134a:	f1c3 0220 	rsb	r2, r3, #32
 800134e:	40d1      	lsrs	r1, r2
 8001350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001354:	fbb1 f0fe 	udiv	r0, r1, lr
 8001358:	fa1f f887 	uxth.w	r8, r7
 800135c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001360:	fa24 f202 	lsr.w	r2, r4, r2
 8001364:	409d      	lsls	r5, r3
 8001366:	fb00 fc08 	mul.w	ip, r0, r8
 800136a:	432a      	orrs	r2, r5
 800136c:	0c15      	lsrs	r5, r2, #16
 800136e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001372:	45ac      	cmp	ip, r5
 8001374:	fa04 f403 	lsl.w	r4, r4, r3
 8001378:	d909      	bls.n	800138e <__udivmoddi4+0x19a>
 800137a:	197d      	adds	r5, r7, r5
 800137c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001380:	f080 808f 	bcs.w	80014a2 <__udivmoddi4+0x2ae>
 8001384:	45ac      	cmp	ip, r5
 8001386:	f240 808c 	bls.w	80014a2 <__udivmoddi4+0x2ae>
 800138a:	3802      	subs	r0, #2
 800138c:	443d      	add	r5, r7
 800138e:	eba5 050c 	sub.w	r5, r5, ip
 8001392:	fbb5 f1fe 	udiv	r1, r5, lr
 8001396:	fb0e 5c11 	mls	ip, lr, r1, r5
 800139a:	fb01 f908 	mul.w	r9, r1, r8
 800139e:	b295      	uxth	r5, r2
 80013a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80013a4:	45a9      	cmp	r9, r5
 80013a6:	d907      	bls.n	80013b8 <__udivmoddi4+0x1c4>
 80013a8:	197d      	adds	r5, r7, r5
 80013aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80013ae:	d274      	bcs.n	800149a <__udivmoddi4+0x2a6>
 80013b0:	45a9      	cmp	r9, r5
 80013b2:	d972      	bls.n	800149a <__udivmoddi4+0x2a6>
 80013b4:	3902      	subs	r1, #2
 80013b6:	443d      	add	r5, r7
 80013b8:	eba5 0509 	sub.w	r5, r5, r9
 80013bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013c0:	e778      	b.n	80012b4 <__udivmoddi4+0xc0>
 80013c2:	f1c1 0720 	rsb	r7, r1, #32
 80013c6:	408b      	lsls	r3, r1
 80013c8:	fa22 fc07 	lsr.w	ip, r2, r7
 80013cc:	ea4c 0c03 	orr.w	ip, ip, r3
 80013d0:	fa25 f407 	lsr.w	r4, r5, r7
 80013d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80013d8:	fbb4 f9fe 	udiv	r9, r4, lr
 80013dc:	fa1f f88c 	uxth.w	r8, ip
 80013e0:	fb0e 4419 	mls	r4, lr, r9, r4
 80013e4:	fa20 f307 	lsr.w	r3, r0, r7
 80013e8:	fb09 fa08 	mul.w	sl, r9, r8
 80013ec:	408d      	lsls	r5, r1
 80013ee:	431d      	orrs	r5, r3
 80013f0:	0c2b      	lsrs	r3, r5, #16
 80013f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80013f6:	45a2      	cmp	sl, r4
 80013f8:	fa02 f201 	lsl.w	r2, r2, r1
 80013fc:	fa00 f301 	lsl.w	r3, r0, r1
 8001400:	d909      	bls.n	8001416 <__udivmoddi4+0x222>
 8001402:	eb1c 0404 	adds.w	r4, ip, r4
 8001406:	f109 30ff 	add.w	r0, r9, #4294967295
 800140a:	d248      	bcs.n	800149e <__udivmoddi4+0x2aa>
 800140c:	45a2      	cmp	sl, r4
 800140e:	d946      	bls.n	800149e <__udivmoddi4+0x2aa>
 8001410:	f1a9 0902 	sub.w	r9, r9, #2
 8001414:	4464      	add	r4, ip
 8001416:	eba4 040a 	sub.w	r4, r4, sl
 800141a:	fbb4 f0fe 	udiv	r0, r4, lr
 800141e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001422:	fb00 fa08 	mul.w	sl, r0, r8
 8001426:	b2ad      	uxth	r5, r5
 8001428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800142c:	45a2      	cmp	sl, r4
 800142e:	d908      	bls.n	8001442 <__udivmoddi4+0x24e>
 8001430:	eb1c 0404 	adds.w	r4, ip, r4
 8001434:	f100 35ff 	add.w	r5, r0, #4294967295
 8001438:	d22d      	bcs.n	8001496 <__udivmoddi4+0x2a2>
 800143a:	45a2      	cmp	sl, r4
 800143c:	d92b      	bls.n	8001496 <__udivmoddi4+0x2a2>
 800143e:	3802      	subs	r0, #2
 8001440:	4464      	add	r4, ip
 8001442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001446:	fba0 8902 	umull	r8, r9, r0, r2
 800144a:	eba4 040a 	sub.w	r4, r4, sl
 800144e:	454c      	cmp	r4, r9
 8001450:	46c6      	mov	lr, r8
 8001452:	464d      	mov	r5, r9
 8001454:	d319      	bcc.n	800148a <__udivmoddi4+0x296>
 8001456:	d016      	beq.n	8001486 <__udivmoddi4+0x292>
 8001458:	b15e      	cbz	r6, 8001472 <__udivmoddi4+0x27e>
 800145a:	ebb3 020e 	subs.w	r2, r3, lr
 800145e:	eb64 0405 	sbc.w	r4, r4, r5
 8001462:	fa04 f707 	lsl.w	r7, r4, r7
 8001466:	fa22 f301 	lsr.w	r3, r2, r1
 800146a:	431f      	orrs	r7, r3
 800146c:	40cc      	lsrs	r4, r1
 800146e:	e9c6 7400 	strd	r7, r4, [r6]
 8001472:	2100      	movs	r1, #0
 8001474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001478:	4631      	mov	r1, r6
 800147a:	4630      	mov	r0, r6
 800147c:	e70c      	b.n	8001298 <__udivmoddi4+0xa4>
 800147e:	468c      	mov	ip, r1
 8001480:	e6eb      	b.n	800125a <__udivmoddi4+0x66>
 8001482:	4610      	mov	r0, r2
 8001484:	e6ff      	b.n	8001286 <__udivmoddi4+0x92>
 8001486:	4543      	cmp	r3, r8
 8001488:	d2e6      	bcs.n	8001458 <__udivmoddi4+0x264>
 800148a:	ebb8 0e02 	subs.w	lr, r8, r2
 800148e:	eb69 050c 	sbc.w	r5, r9, ip
 8001492:	3801      	subs	r0, #1
 8001494:	e7e0      	b.n	8001458 <__udivmoddi4+0x264>
 8001496:	4628      	mov	r0, r5
 8001498:	e7d3      	b.n	8001442 <__udivmoddi4+0x24e>
 800149a:	4611      	mov	r1, r2
 800149c:	e78c      	b.n	80013b8 <__udivmoddi4+0x1c4>
 800149e:	4681      	mov	r9, r0
 80014a0:	e7b9      	b.n	8001416 <__udivmoddi4+0x222>
 80014a2:	4608      	mov	r0, r1
 80014a4:	e773      	b.n	800138e <__udivmoddi4+0x19a>
 80014a6:	4608      	mov	r0, r1
 80014a8:	e749      	b.n	800133e <__udivmoddi4+0x14a>
 80014aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80014ae:	443d      	add	r5, r7
 80014b0:	e713      	b.n	80012da <__udivmoddi4+0xe6>
 80014b2:	3802      	subs	r0, #2
 80014b4:	443c      	add	r4, r7
 80014b6:	e724      	b.n	8001302 <__udivmoddi4+0x10e>

080014b8 <__aeabi_idiv0>:
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <Algo_Init>:
void Algo_task(uint32_t u32CurrentTime_ms);
bool Algo_adjust_steppers_position(uint8_t* cmd);
void Algo_steppers_ready(void);

void Algo_Init(void const * argument)
{
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b0b0      	sub	sp, #192	; 0xc0
 80014c0:	af04      	add	r7, sp, #16
 80014c2:	6078      	str	r0, [r7, #4]
	static Mobj UFEC23;
	const PF_MotorOpeningsParam_t* pGrillMotorParam = PB_GetGrillMotorParam();
 80014c4:	f000 fe66 	bl	8002194 <PB_GetGrillMotorParam>
 80014c8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	const PF_MotorOpeningsParam_t* pPrimaryMotorParam = PB_GetPrimaryMotorParam();
 80014cc:	f000 fe4e 	bl	800216c <PB_GetPrimaryMotorParam>
 80014d0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	const PF_MotorOpeningsParam_t* pSecondaryMotorParam = PB_GetSecondaryMotorParam();
 80014d4:	f000 fe54 	bl	8002180 <PB_GetSecondaryMotorParam>
 80014d8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	const PF_CombTempParam_t* pTemperatureParam = PB_GetTemperatureParam();
 80014dc:	f000 fe3c 	bl	8002158 <PB_GetTemperatureParam>
 80014e0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	const PF_UsrParam* pUserParam = PB_GetUserParam();
 80014e4:	f000 fe60 	bl	80021a8 <PB_GetUserParam>
 80014e8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98




	Temperature_Init();
 80014ec:	f001 fa2c 	bl	8002948 <Temperature_Init>
	PARAMFILE_Init();
 80014f0:	f000 fdea 	bl	80020c8 <PARAMFILE_Init>
	ESPMANAGER_Init();
 80014f4:	f000 f914 	bl	8001720 <ESPMANAGER_Init>
	Particle_Init();
 80014f8:	f000 ff4e 	bl	8002398 <Particle_Init>

	// Print all parameters into the debug file
	for(uint32_t ix = 0; ix < PARAMFILE_GetParamEntryCount(); ix++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001502:	e038      	b.n	8001576 <Algo_Init+0xba>
	{
	  const PFL_SParameterItem* pParamItem = PARAMFILE_GetParamEntryByIndex(ix);
 8001504:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001508:	f000 fdfc 	bl	8002104 <PARAMFILE_GetParamEntryByIndex>
 800150c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	  if (pParamItem == NULL)
 8001510:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001514:	2b00      	cmp	r3, #0
 8001516:	d028      	beq.n	800156a <Algo_Init+0xae>
		  continue;

	  char tmp[128+1];
	  int32_t s32Value;
	  PFL_GetValueInt32(&PARAMFILE_g_sHandle, pParamItem->szKey, &s32Value);
 8001518:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001522:	4619      	mov	r1, r3
 8001524:	4828      	ldr	r0, [pc, #160]	; (80015c8 <Algo_Init+0x10c>)
 8001526:	f000 fe90 	bl	800224a <PFL_GetValueInt32>
	  snprintf(tmp, sizeof(tmp), "%s | %d (default: %d, min: %d, max: %d)", pParamItem->szKey, (int)s32Value, (int)pParamItem->uType.sInt32.s32Default, (int)pParamItem->uType.sInt32.s32Min, (int)pParamItem->uType.sInt32.s32Max);
 800152a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800152e:	681d      	ldr	r5, [r3, #0]
 8001530:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001534:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001538:	6912      	ldr	r2, [r2, #16]
 800153a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800153e:	6949      	ldr	r1, [r1, #20]
 8001540:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001544:	6980      	ldr	r0, [r0, #24]
 8001546:	f107 040c 	add.w	r4, r7, #12
 800154a:	9003      	str	r0, [sp, #12]
 800154c:	9102      	str	r1, [sp, #8]
 800154e:	9201      	str	r2, [sp, #4]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	462b      	mov	r3, r5
 8001554:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <Algo_Init+0x110>)
 8001556:	2181      	movs	r1, #129	; 0x81
 8001558:	4620      	mov	r0, r4
 800155a:	f00c ff07 	bl	800e36c <sniprintf>
	  printf(tmp);
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4618      	mov	r0, r3
 8001564:	f00c feea 	bl	800e33c <iprintf>
 8001568:	e000      	b.n	800156c <Algo_Init+0xb0>
		  continue;
 800156a:	bf00      	nop
	for(uint32_t ix = 0; ix < PARAMFILE_GetParamEntryCount(); ix++)
 800156c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001570:	3301      	adds	r3, #1
 8001572:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001576:	f000 fdbb 	bl	80020f0 <PARAMFILE_GetParamEntryCount>
 800157a:	4602      	mov	r2, r0
 800157c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001580:	4293      	cmp	r3, r2
 8001582:	d3bf      	bcc.n	8001504 <Algo_Init+0x48>
	}


    for(;;)
    {
    	Algo_steppers_ready();
 8001584:	f000 f878 	bl	8001678 <Algo_steppers_ready>
    	TemperatureManager(&UFEC23,osKernelSysTick());
 8001588:	f008 ff07 	bl	800a39a <osKernelSysTick>
 800158c:	4603      	mov	r3, r0
 800158e:	4619      	mov	r1, r3
 8001590:	480f      	ldr	r0, [pc, #60]	; (80015d0 <Algo_Init+0x114>)
 8001592:	f001 fa0d 	bl	80029b0 <TemperatureManager>
    	DebugManager(&UFEC23,osKernelSysTick());
 8001596:	f008 ff00 	bl	800a39a <osKernelSysTick>
 800159a:	4603      	mov	r3, r0
 800159c:	4619      	mov	r1, r3
 800159e:	480c      	ldr	r0, [pc, #48]	; (80015d0 <Algo_Init+0x114>)
 80015a0:	f000 f880 	bl	80016a4 <DebugManager>
    	ESPMANAGER_Task();
 80015a4:	f000 f8ec 	bl	8001780 <ESPMANAGER_Task>
    	ParticlesManager(osKernelSysTick());
 80015a8:	f008 fef7 	bl	800a39a <osKernelSysTick>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 ff30 	bl	8002414 <ParticlesManager>
    	Algo_task(osKernelSysTick());
 80015b4:	f008 fef1 	bl	800a39a <osKernelSysTick>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f80a 	bl	80015d4 <Algo_task>
    	osDelay(10);
 80015c0:	200a      	movs	r0, #10
 80015c2:	f008 ff46 	bl	800a452 <osDelay>
    	Algo_steppers_ready();
 80015c6:	e7dd      	b.n	8001584 <Algo_Init+0xc8>
 80015c8:	200035e4 	.word	0x200035e4
 80015cc:	08011440 	.word	0x08011440
 80015d0:	2000034c 	.word	0x2000034c

080015d4 <Algo_task>:
    }

}

void Algo_task(uint32_t u32CurrentTime_ms)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	static uint32_t u32LastTime_ms = 0;
	static uint8_t u8cmds[6] = {0x00,0x00,0x00,0x00,0x00,0x00};
	bool bMotorManagerOK = false;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]

	if(u32CurrentTime_ms - u32LastTime_ms > SECONDS(1))
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <Algo_task+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ec:	d90d      	bls.n	800160a <Algo_task+0x36>
	{
		if(Algo_adjust_steppers_position(u8cmds))
 80015ee:	480a      	ldr	r0, [pc, #40]	; (8001618 <Algo_task+0x44>)
 80015f0:	f000 f814 	bl	800161c <Algo_adjust_steppers_position>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <Algo_task+0x2c>
		{
			bMotorManagerOK = true;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e001      	b.n	8001604 <Algo_task+0x30>
		}
		else
		{
			bMotorManagerOK = false;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]
		}
		u32LastTime_ms = u32CurrentTime_ms;
 8001604:	4a03      	ldr	r2, [pc, #12]	; (8001614 <Algo_task+0x40>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
	}

}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000370 	.word	0x20000370
 8001618:	20000374 	.word	0x20000374

0800161c <Algo_adjust_steppers_position>:


bool Algo_adjust_steppers_position(uint8_t* cmd)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	if(!motors_ready_for_req)
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <Algo_adjust_steppers_position+0x54>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f083 0301 	eor.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <Algo_adjust_steppers_position+0x1a>
	{
		return false;
 8001632:	2300      	movs	r3, #0
 8001634:	e017      	b.n	8001666 <Algo_adjust_steppers_position+0x4a>
	}
	if(!xMessageBufferSend(MotorControlsHandle,cmd,6,0))
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <Algo_adjust_steppers_position+0x58>)
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	2300      	movs	r3, #0
 800163c:	2206      	movs	r2, #6
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f009 fd93 	bl	800b16a <xStreamBufferSend>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <Algo_adjust_steppers_position+0x32>
	{
		return false;
 800164a:	2300      	movs	r3, #0
 800164c:	e00b      	b.n	8001666 <Algo_adjust_steppers_position+0x4a>
	}
	cmd[4] = 50;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3304      	adds	r3, #4
 8001652:	2232      	movs	r2, #50	; 0x32
 8001654:	701a      	strb	r2, [r3, #0]
	cmd[5] = 10;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3305      	adds	r3, #5
 800165a:	220a      	movs	r2, #10
 800165c:	701a      	strb	r2, [r3, #0]
	motors_ready_for_req = false;
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <Algo_adjust_steppers_position+0x54>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
	return true;
 8001664:	2301      	movs	r3, #1
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000000 	.word	0x20000000
 8001674:	20003700 	.word	0x20003700

08001678 <Algo_steppers_ready>:

void Algo_steppers_ready(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	if(!motors_ready_for_req)
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <Algo_steppers_ready+0x24>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	f083 0301 	eor.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <Algo_steppers_ready+0x20>
	{
		xQueueReceive(MotorInPlaceHandle,&motors_ready_for_req,5);
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <Algo_steppers_ready+0x28>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2205      	movs	r2, #5
 8001690:	4902      	ldr	r1, [pc, #8]	; (800169c <Algo_steppers_ready+0x24>)
 8001692:	4618      	mov	r0, r3
 8001694:	f009 faa8 	bl	800abe8 <xQueueReceive>
	}

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000
 80016a0:	200036fc 	.word	0x200036fc

080016a4 <DebugManager>:
/* Private variables ---------------------------------------------------------*/
/* Private function ---------------------------------------------------------*/


void DebugManager(Mobj * stove, uint32_t u32time_ms)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
	static uint32_t u32LastTimeInDebug = 0;

	if(u32time_ms - u32LastTimeInDebug > SECONDS(5))
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <DebugManager+0x50>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d916      	bls.n	80016ec <DebugManager+0x48>
	{
		printf("%.2f\r\n",stove->fBaffleTemp);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff2a 	bl	800051c <__aeabi_f2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	480a      	ldr	r0, [pc, #40]	; (80016f8 <DebugManager+0x54>)
 80016ce:	f00c fe35 	bl	800e33c <iprintf>
		printf("%.2f\r\n",stove->fBaffleDeltaT);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff20 	bl	800051c <__aeabi_f2d>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <DebugManager+0x54>)
 80016e2:	f00c fe2b 	bl	800e33c <iprintf>
		//printf("%.2f\r\n",stove->fChamberTemp);
		//printf("%.2f\r\n",stove->fPlenumTemp);
		u32LastTimeInDebug = u32time_ms;
 80016e6:	4a03      	ldr	r2, [pc, #12]	; (80016f4 <DebugManager+0x50>)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6013      	str	r3, [r2, #0]
	}
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000037c 	.word	0x2000037c
 80016f8:	08011468 	.word	0x08011468

080016fc <__io_putchar>:
 extern "C" {
#endif

extern UART_HandleTypeDef huart1;

int __io_putchar(int ch) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001704:	1d39      	adds	r1, r7, #4
 8001706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800170a:	2201      	movs	r2, #1
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <__io_putchar+0x20>)
 800170e:	f007 fed3 	bl	80094b8 <HAL_UART_Transmit>
  return ch;
 8001712:	687b      	ldr	r3, [r7, #4]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20003704 	.word	0x20003704

08001720 <ESPMANAGER_Init>:
// --------
// Bridge state
static SBridgeState m_sBridgeState;

void ESPMANAGER_Init()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	// Initialize bridge ...
	m_sBridgeState.u32GetParameterCurrentIndex = 0;
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <ESPMANAGER_Init+0x3c>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]

	m_last_DMA_count = 0;
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <ESPMANAGER_Init+0x40>)
 800172c:	2200      	movs	r2, #0
 800172e:	801a      	strh	r2, [r3, #0]

    // Encoder
    UARTPROTOCOLENC_Init(&m_sHandleEncoder, &m_sConfigEncoder);
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <ESPMANAGER_Init+0x44>)
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <ESPMANAGER_Init+0x48>)
 8001734:	f002 ff54 	bl	80045e0 <UARTPROTOCOLENC_Init>

    // Decoder
    UARTPROTOCOLDEC_Init(&m_sHandleDecoder, &m_sConfigDecoder);
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <ESPMANAGER_Init+0x4c>)
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <ESPMANAGER_Init+0x50>)
 800173c:	f002 fda2 	bl	8004284 <UARTPROTOCOLDEC_Init>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, m_u8UART_RX_DMABuffers, MAX_RX_DMA_SIZE);
 8001740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001744:	490b      	ldr	r1, [pc, #44]	; (8001774 <ESPMANAGER_Init+0x54>)
 8001746:	480c      	ldr	r0, [pc, #48]	; (8001778 <ESPMANAGER_Init+0x58>)
 8001748:	f007 ffdb 	bl	8009702 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UART_RegisterCallback(&huart2, HAL_UART_ERROR_CB_ID, UARTErrorCb);
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <ESPMANAGER_Init+0x5c>)
 800174e:	2104      	movs	r1, #4
 8001750:	4809      	ldr	r0, [pc, #36]	; (8001778 <ESPMANAGER_Init+0x58>)
 8001752:	f007 fe0b 	bl	800936c <HAL_UART_RegisterCallback>
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000c2c 	.word	0x20000c2c
 8001760:	20000780 	.word	0x20000780
 8001764:	20000004 	.word	0x20000004
 8001768:	20000804 	.word	0x20000804
 800176c:	20000008 	.word	0x20000008
 8001770:	20000c08 	.word	0x20000c08
 8001774:	20000380 	.word	0x20000380
 8001778:	20003794 	.word	0x20003794
 800177c:	0800183d 	.word	0x0800183d

08001780 <ESPMANAGER_Task>:

void ESPMANAGER_Task(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0


		if (m_bNeedRestartDMA)
 8001786:	4b27      	ldr	r3, [pc, #156]	; (8001824 <ESPMANAGER_Task+0xa4>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <ESPMANAGER_Task+0x22>
		{
			m_bNeedRestartDMA = false;
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <ESPMANAGER_Task+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, m_u8UART_RX_DMABuffers, MAX_RX_DMA_SIZE);
 8001796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179a:	4923      	ldr	r1, [pc, #140]	; (8001828 <ESPMANAGER_Task+0xa8>)
 800179c:	4823      	ldr	r0, [pc, #140]	; (800182c <ESPMANAGER_Task+0xac>)
 800179e:	f007 ffb0 	bl	8009702 <HAL_UARTEx_ReceiveToIdle_DMA>
		}

		const uint16_t u16DMA_count = (uint16_t)(MAX_RX_DMA_SIZE - hdma_usart2_rx.Instance->CNDTR);
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <ESPMANAGER_Task+0xb0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80017ae:	80fb      	strh	r3, [r7, #6]

		if(u16DMA_count > m_last_DMA_count)
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <ESPMANAGER_Task+0xb4>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	88fa      	ldrh	r2, [r7, #6]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d911      	bls.n	80017de <ESPMANAGER_Task+0x5e>
		{
			UARTPROTOCOLDEC_HandleIn(&m_sHandleDecoder,&m_u8UART_RX_DMABuffers[m_last_DMA_count],(uint16_t)(u16DMA_count-m_last_DMA_count));
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <ESPMANAGER_Task+0xb4>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <ESPMANAGER_Task+0xa8>)
 80017c2:	18d1      	adds	r1, r2, r3
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <ESPMANAGER_Task+0xb4>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	88fa      	ldrh	r2, [r7, #6]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	4819      	ldr	r0, [pc, #100]	; (8001838 <ESPMANAGER_Task+0xb8>)
 80017d2:	f002 fd95 	bl	8004300 <UARTPROTOCOLDEC_HandleIn>
			m_last_DMA_count = u16DMA_count;
 80017d6:	4a17      	ldr	r2, [pc, #92]	; (8001834 <ESPMANAGER_Task+0xb4>)
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	8013      	strh	r3, [r2, #0]

			m_last_DMA_count = u16DMA_count;
		}


}
 80017dc:	e01e      	b.n	800181c <ESPMANAGER_Task+0x9c>
		else if(u16DMA_count < m_last_DMA_count)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <ESPMANAGER_Task+0xb4>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	88fa      	ldrh	r2, [r7, #6]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d219      	bcs.n	800181c <ESPMANAGER_Task+0x9c>
			UARTPROTOCOLDEC_HandleIn(&m_sHandleDecoder,&m_u8UART_RX_DMABuffers[m_last_DMA_count],(uint16_t)(MAX_RX_DMA_SIZE-m_last_DMA_count));
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <ESPMANAGER_Task+0xb4>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <ESPMANAGER_Task+0xa8>)
 80017f0:	18d1      	adds	r1, r2, r3
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <ESPMANAGER_Task+0xb4>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	480e      	ldr	r0, [pc, #56]	; (8001838 <ESPMANAGER_Task+0xb8>)
 8001800:	f002 fd7e 	bl	8004300 <UARTPROTOCOLDEC_HandleIn>
			if(u16DMA_count != 0)
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <ESPMANAGER_Task+0x96>
				UARTPROTOCOLDEC_HandleIn(&m_sHandleDecoder,m_u8UART_RX_DMABuffers,(uint32_t)(u16DMA_count));
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	461a      	mov	r2, r3
 800180e:	4906      	ldr	r1, [pc, #24]	; (8001828 <ESPMANAGER_Task+0xa8>)
 8001810:	4809      	ldr	r0, [pc, #36]	; (8001838 <ESPMANAGER_Task+0xb8>)
 8001812:	f002 fd75 	bl	8004300 <UARTPROTOCOLDEC_HandleIn>
			m_last_DMA_count = u16DMA_count;
 8001816:	4a07      	ldr	r2, [pc, #28]	; (8001834 <ESPMANAGER_Task+0xb4>)
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	8013      	strh	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000c28 	.word	0x20000c28
 8001828:	20000380 	.word	0x20000380
 800182c:	20003794 	.word	0x20003794
 8001830:	200035f0 	.word	0x200035f0
 8001834:	20000780 	.word	0x20000780
 8001838:	20000c08 	.word	0x20000c08

0800183c <UARTErrorCb>:

static void UARTErrorCb(UART_HandleTypeDef *huart)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	// If there is not enough activity it seems to trigger an error
	// in that case we need to restart the DMA
	m_bNeedRestartDMA = true;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <UARTErrorCb+0x18>)
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	20000c28 	.word	0x20000c28

08001858 <EncWriteUART>:

static void EncWriteUART(const UARTPROTOCOLENC_SHandle* psHandle, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
    //uart_write_bytes(HWGPIO_BRIDGEUART_PORT_NUM, u8Datas, u32DataLen);
	// Write byte into UART ...
	HAL_UART_Transmit(&huart2, (uint8_t*)u8Datas, (uint16_t)u32DataLen, 500);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	b29a      	uxth	r2, r3
 8001868:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	4803      	ldr	r0, [pc, #12]	; (800187c <EncWriteUART+0x24>)
 8001870:	f007 fe22 	bl	80094b8 <HAL_UART_Transmit>
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20003794 	.word	0x20003794

08001880 <DecAcceptFrame>:


static void DecAcceptFrame(const UARTPROTOCOLDEC_SHandle* psHandle, uint8_t u8ID, const uint8_t u8Payloads[], uint16_t u16PayloadLen)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b09a      	sub	sp, #104	; 0x68
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	461a      	mov	r2, r3
 800188c:	460b      	mov	r3, r1
 800188e:	72fb      	strb	r3, [r7, #11]
 8001890:	4613      	mov	r3, r2
 8001892:	813b      	strh	r3, [r7, #8]
	switch((UFEC23PROTOCOL_FRAMEID)u8ID)
 8001894:	7afb      	ldrb	r3, [r7, #11]
 8001896:	2b10      	cmp	r3, #16
 8001898:	f000 8098 	beq.w	80019cc <DecAcceptFrame+0x14c>
 800189c:	2b10      	cmp	r3, #16
 800189e:	f300 80c7 	bgt.w	8001a30 <DecAcceptFrame+0x1b0>
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d002      	beq.n	80018ac <DecAcceptFrame+0x2c>
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	d020      	beq.n	80018ec <DecAcceptFrame+0x6c>
		}
		//case UFEC23PROTOCOL_FRAMEID_C2SCommitParameter:
		//	break;
		default:
			// TODO: Not a valid protocol ID... Do something? Throw into UART log?
			break;
 80018aa:	e0c1      	b.n	8001a30 <DecAcceptFrame+0x1b0>
			if (!UFEC23ENDEC_A2AReqPingAliveDecode(&reqPing, u8Payloads, u16PayloadLen))
 80018ac:	893a      	ldrh	r2, [r7, #8]
 80018ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f002 ff58 	bl	800476a <UFEC23ENDEC_A2AReqPingAliveDecode>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f083 0301 	eor.w	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 80b6 	bne.w	8001a34 <DecAcceptFrame+0x1b4>
			const uint16_t u16Len = (uint16_t)UFEC23ENDEC_A2AReqPingAliveEncode(m_u8UARTOutputBuffers, UART_OUTBUFFER_LEN, &reqPing);
 80018c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018cc:	461a      	mov	r2, r3
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	485d      	ldr	r0, [pc, #372]	; (8001a48 <DecAcceptFrame+0x1c8>)
 80018d2:	f002 ff34 	bl	800473e <UFEC23ENDEC_A2AReqPingAliveEncode>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			UARTPROTOCOLENC_Send(&m_sHandleEncoder, UFEC23PROTOCOL_FRAMEID_A2AReqPingAliveResp, m_u8UARTOutputBuffers, u16Len);
 80018dc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80018e0:	4a59      	ldr	r2, [pc, #356]	; (8001a48 <DecAcceptFrame+0x1c8>)
 80018e2:	2181      	movs	r1, #129	; 0x81
 80018e4:	4859      	ldr	r0, [pc, #356]	; (8001a4c <DecAcceptFrame+0x1cc>)
 80018e6:	f002 fea5 	bl	8004634 <UARTPROTOCOLENC_Send>
			break;
 80018ea:	e0a8      	b.n	8001a3e <DecAcceptFrame+0x1be>
			if(!UFEC23ENDEC_C2SGetParameterDecode(&param, u8Payloads,(uint32_t) u16PayloadLen))
 80018ec:	893a      	ldrh	r2, [r7, #8]
 80018ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 ff4d 	bl	8004794 <UFEC23ENDEC_C2SGetParameterDecode>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f083 0301 	eor.w	r3, r3, #1
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 8098 	bne.w	8001a38 <DecAcceptFrame+0x1b8>
			const uint32_t u32ParamEntryCount = PARAMFILE_GetParamEntryCount();
 8001908:	f000 fbf2 	bl	80020f0 <PARAMFILE_GetParamEntryCount>
 800190c:	6638      	str	r0, [r7, #96]	; 0x60
			if (param.eIterateOp == UFEC23ENDEC_EITERATEOP_First)
 800190e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001912:	2b00      	cmp	r3, #0
 8001914:	d103      	bne.n	800191e <DecAcceptFrame+0x9e>
				m_sBridgeState.u32GetParameterCurrentIndex = 0;
 8001916:	4b4e      	ldr	r3, [pc, #312]	; (8001a50 <DecAcceptFrame+0x1d0>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	e008      	b.n	8001930 <DecAcceptFrame+0xb0>
			else if (param.eIterateOp == UFEC23ENDEC_EITERATEOP_Next)
 800191e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001922:	2b01      	cmp	r3, #1
 8001924:	d104      	bne.n	8001930 <DecAcceptFrame+0xb0>
				m_sBridgeState.u32GetParameterCurrentIndex++; // Next record ....
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <DecAcceptFrame+0x1d0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	3301      	adds	r3, #1
 800192c:	4a48      	ldr	r2, [pc, #288]	; (8001a50 <DecAcceptFrame+0x1d0>)
 800192e:	6013      	str	r3, [r2, #0]
			sResp.bHasRecord = false;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			sResp.bIsEOF = true;
 8001936:	2301      	movs	r3, #1
 8001938:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			if (m_sBridgeState.u32GetParameterCurrentIndex < u32ParamEntryCount)
 800193c:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <DecAcceptFrame+0x1d0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001942:	429a      	cmp	r2, r3
 8001944:	d930      	bls.n	80019a8 <DecAcceptFrame+0x128>
				const PFL_SParameterItem* pParamItem = PARAMFILE_GetParamEntryByIndex(m_sBridgeState.u32GetParameterCurrentIndex);
 8001946:	4b42      	ldr	r3, [pc, #264]	; (8001a50 <DecAcceptFrame+0x1d0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fbda 	bl	8002104 <PARAMFILE_GetParamEntryByIndex>
 8001950:	65f8      	str	r0, [r7, #92]	; 0x5c
				if (pParamItem != NULL && pParamItem->eType == PFL_TYPE_Int32)
 8001952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d027      	beq.n	80019a8 <DecAcceptFrame+0x128>
 8001958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800195a:	7a1b      	ldrb	r3, [r3, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d123      	bne.n	80019a8 <DecAcceptFrame+0x128>
					sResp.bHasRecord = true;
 8001960:	2301      	movs	r3, #1
 8001962:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					sResp.bIsEOF = false;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					sResp.sEntry.eParamType = UFEC23ENDEC_EPARAMTYPE_Int32;
 800196c:	2300      	movs	r3, #0
 800196e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					sResp.sEntry.uType.sInt32.s32Default = pParamItem->uType.sInt32.s32Default;
 8001972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
					sResp.sEntry.uType.sInt32.s32Min = pParamItem->uType.sInt32.s32Min;
 8001978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
					sResp.sEntry.uType.sInt32.s32Max = pParamItem->uType.sInt32.s32Max;
 800197e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
					strcpy(sResp.sEntry.szKey, pParamItem->szKey);
 8001984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f00c fd20 	bl	800e3d4 <strcpy>
					PFL_GetValueInt32(&PARAMFILE_g_sHandle, pParamItem->szKey, &s32Value);
 8001994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800199c:	4619      	mov	r1, r3
 800199e:	482d      	ldr	r0, [pc, #180]	; (8001a54 <DecAcceptFrame+0x1d4>)
 80019a0:	f000 fc53 	bl	800224a <PFL_GetValueInt32>
					sResp.uValue.s32Value = s32Value;
 80019a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019a6:	643b      	str	r3, [r7, #64]	; 0x40
			const uint16_t u16Len = (uint16_t)UFEC23ENDEC_S2CGetParameterRespEncode(m_u8UARTOutputBuffers, UART_OUTBUFFER_LEN, &sResp);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	461a      	mov	r2, r3
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	4825      	ldr	r0, [pc, #148]	; (8001a48 <DecAcceptFrame+0x1c8>)
 80019b2:	f002 ff0a 	bl	80047ca <UFEC23ENDEC_S2CGetParameterRespEncode>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			UARTPROTOCOLENC_Send(&m_sHandleEncoder, UFEC23PROTOCOL_FRAMEID_S2CGetParameterResp, m_u8UARTOutputBuffers, u16Len);
 80019bc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80019c0:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <DecAcceptFrame+0x1c8>)
 80019c2:	218f      	movs	r1, #143	; 0x8f
 80019c4:	4821      	ldr	r0, [pc, #132]	; (8001a4c <DecAcceptFrame+0x1cc>)
 80019c6:	f002 fe35 	bl	8004634 <UARTPROTOCOLENC_Send>
			break;
 80019ca:	e038      	b.n	8001a3e <DecAcceptFrame+0x1be>
			if(!UFEC23ENDEC_C2SSetParameterDecode(&param, u8Payloads,(uint32_t) u16PayloadLen))
 80019cc:	893a      	ldrh	r2, [r7, #8]
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 ff87 	bl	80048e8 <UFEC23ENDEC_C2SSetParameterDecode>
 80019da:	4603      	mov	r3, r0
 80019dc:	f083 0301 	eor.w	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d12a      	bne.n	8001a3c <DecAcceptFrame+0x1bc>
			const PFL_ESETRET setRet = PFL_SetValueInt32(&PARAMFILE_g_sHandle, param.szKey, param.uValue.s32Value);
 80019e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	4819      	ldr	r0, [pc, #100]	; (8001a54 <DecAcceptFrame+0x1d4>)
 80019f0:	f000 fc4f 	bl	8002292 <PFL_SetValueInt32>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				.eResult = (setRet == PFL_ESETRET_OK) ? UFEC23PROTOCOL_ERESULT_Ok : UFEC23PROTOCOL_ERESULT_Fail
 80019fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf14      	ite	ne
 8001a02:	2301      	movne	r3, #1
 8001a04:	2300      	moveq	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
			UFEC23PROTOCOL_S2CSetParameterResp s2cSetParameterResp =
 8001a08:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			const uint16_t u16Len = (uint16_t)UFEC23ENDEC_S2CSetParameterRespEncode(m_u8UARTOutputBuffers, UART_OUTBUFFER_LEN, &s2cSetParameterResp);
 8001a0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a10:	461a      	mov	r2, r3
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <DecAcceptFrame+0x1c8>)
 8001a16:	f002 ffaa 	bl	800496e <UFEC23ENDEC_S2CSetParameterRespEncode>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			UARTPROTOCOLENC_Send(&m_sHandleEncoder, UFEC23PROTOCOL_FRAMEID_S2CSetParameterResp, m_u8UARTOutputBuffers, u16Len);
 8001a20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001a24:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <DecAcceptFrame+0x1c8>)
 8001a26:	2190      	movs	r1, #144	; 0x90
 8001a28:	4808      	ldr	r0, [pc, #32]	; (8001a4c <DecAcceptFrame+0x1cc>)
 8001a2a:	f002 fe03 	bl	8004634 <UARTPROTOCOLENC_Send>
			break;
 8001a2e:	e006      	b.n	8001a3e <DecAcceptFrame+0x1be>
			break;
 8001a30:	bf00      	nop
 8001a32:	e004      	b.n	8001a3e <DecAcceptFrame+0x1be>
				break;
 8001a34:	bf00      	nop
 8001a36:	e002      	b.n	8001a3e <DecAcceptFrame+0x1be>
				break;
 8001a38:	bf00      	nop
 8001a3a:	e000      	b.n	8001a3e <DecAcceptFrame+0x1be>
				break;
 8001a3c:	bf00      	nop
	}

}
 8001a3e:	bf00      	nop
 8001a40:	3768      	adds	r7, #104	; 0x68
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000784 	.word	0x20000784
 8001a4c:	20000804 	.word	0x20000804
 8001a50:	20000c2c 	.word	0x20000c2c
 8001a54:	200035e4 	.word	0x200035e4

08001a58 <DecDropFrame>:

static void DecDropFrame(const UARTPROTOCOLDEC_SHandle* psHandle, const char* szReason)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
    // Exists mostly for debug purpose
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <GetTimerCountMS>:

static int64_t GetTimerCountMS(const UARTPROTOCOLDEC_SHandle* psHandle)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	return xTaskGetTickCount() * portTICK_PERIOD_MS;
 8001a74:	f00a f93e 	bl	800bcf4 <xTaskGetTickCount>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f04f 0300 	mov.w	r3, #0
}
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <Motor_task>:

bool StepperAtSetpoint(StepObj *motor);
bool StepperLimitSwitchActive(StepObj *motor);

void Motor_task(void const * argument)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b0af      	sub	sp, #188	; 0xbc
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

	Step1_2_3_WAKE();
 8001a94:	2200      	movs	r2, #0
 8001a96:	2110      	movs	r1, #16
 8001a98:	48c6      	ldr	r0, [pc, #792]	; (8001db4 <Motor_task+0x328>)
 8001a9a:	f003 fec0 	bl	800581e <HAL_GPIO_WritePin>
#if NOVIKA_SETUP
	HAL_GPIO_WritePin(Stepper_HalfStep_GPIO_Port,Stepper_HalfStep_Pin,RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aa4:	48c4      	ldr	r0, [pc, #784]	; (8001db8 <Motor_task+0x32c>)
 8001aa6:	f003 feba 	bl	800581e <HAL_GPIO_WritePin>
#else
	HAL_GPIO_WritePin(Stepper_HalfStep_GPIO_Port,Stepper_HalfStep_Pin,SET);
#endif
	StepObj motor[NumberOfMotors] = {
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	229c      	movs	r2, #156	; 0x9c
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f00b fe82 	bl	800d7bc <memset>
 8001ab8:	2308      	movs	r3, #8
 8001aba:	833b      	strh	r3, [r7, #24]
 8001abc:	2320      	movs	r3, #32
 8001abe:	837b      	strh	r3, [r7, #26]
 8001ac0:	2310      	movs	r3, #16
 8001ac2:	83bb      	strh	r3, [r7, #28]
 8001ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac8:	83fb      	strh	r3, [r7, #30]
 8001aca:	2304      	movs	r3, #4
 8001acc:	843b      	strh	r3, [r7, #32]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ad2:	4bb9      	ldr	r3, [pc, #740]	; (8001db8 <Motor_task+0x32c>)
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	4bb8      	ldr	r3, [pc, #736]	; (8001db8 <Motor_task+0x32c>)
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ada:	4bb7      	ldr	r3, [pc, #732]	; (8001db8 <Motor_task+0x32c>)
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ade:	4bb5      	ldr	r3, [pc, #724]	; (8001db4 <Motor_task+0x328>)
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ae2:	4bb6      	ldr	r3, [pc, #728]	; (8001dbc <Motor_task+0x330>)
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae6:	4bb3      	ldr	r3, [pc, #716]	; (8001db4 <Motor_task+0x328>)
 8001ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aea:	2364      	movs	r3, #100	; 0x64
 8001aec:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001af0:	2364      	movs	r3, #100	; 0x64
 8001af2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001af6:	2361      	movs	r3, #97	; 0x61
 8001af8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001afc:	2306      	movs	r3, #6
 8001afe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b16:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b26:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001b30:	4ba0      	ldr	r3, [pc, #640]	; (8001db4 <Motor_task+0x328>)
 8001b32:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b34:	4b9f      	ldr	r3, [pc, #636]	; (8001db4 <Motor_task+0x328>)
 8001b36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b38:	4b9e      	ldr	r3, [pc, #632]	; (8001db4 <Motor_task+0x328>)
 8001b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8001b3c:	4b9d      	ldr	r3, [pc, #628]	; (8001db4 <Motor_task+0x328>)
 8001b3e:	667b      	str	r3, [r7, #100]	; 0x64
 8001b40:	4b9c      	ldr	r3, [pc, #624]	; (8001db4 <Motor_task+0x328>)
 8001b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b44:	4b9b      	ldr	r3, [pc, #620]	; (8001db4 <Motor_task+0x328>)
 8001b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b48:	2364      	movs	r3, #100	; 0x64
 8001b4a:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8001b4e:	2364      	movs	r3, #100	; 0x64
 8001b50:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 8001b54:	2361      	movs	r3, #97	; 0x61
 8001b56:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8001b60:	2320      	movs	r3, #32
 8001b62:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8001b66:	2304      	movs	r3, #4
 8001b68:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001b72:	2320      	movs	r3, #32
 8001b74:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001b78:	2340      	movs	r3, #64	; 0x40
 8001b7a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001b7e:	4b8e      	ldr	r3, [pc, #568]	; (8001db8 <Motor_task+0x32c>)
 8001b80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b84:	4b8b      	ldr	r3, [pc, #556]	; (8001db4 <Motor_task+0x328>)
 8001b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b8a:	4b8a      	ldr	r3, [pc, #552]	; (8001db4 <Motor_task+0x328>)
 8001b8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b90:	4b89      	ldr	r3, [pc, #548]	; (8001db8 <Motor_task+0x32c>)
 8001b92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b96:	4b8a      	ldr	r3, [pc, #552]	; (8001dc0 <Motor_task+0x334>)
 8001b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b9c:	4b88      	ldr	r3, [pc, #544]	; (8001dc0 <Motor_task+0x334>)
 8001b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ba2:	2364      	movs	r3, #100	; 0x64
 8001ba4:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8001ba8:	2364      	movs	r3, #100	; 0x64
 8001baa:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8001bae:	2361      	movs	r3, #97	; 0x61
 8001bb0:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8001bb4:	2306      	movs	r3, #6
 8001bb6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
								Step2_STEP_GPIO_Port, Step2_ENABLE_GPIO_Port, Step2_RESET_GPIO_Port,Step2_LowCurrent_GPIO_Port,Step2_DIR_GPIO_Port, Limit_switch2_GPIO_Port),
			STEPPER_INIT(PF_SECONDARY_MINIMUM_OPENING,PF_SECONDARY_FULL_OPEN, Step3_STEP_Pin,Step3_ENABLE_Pin,Step3_RESET_Pin,Step3_LowCurrent_Pin,Step3_DIR_Pin, Limit_switch3_Pin,
										Step3_STEP_GPIO_Port,Step3_ENABLE_GPIO_Port,Step3_RESET_GPIO_Port,Step3_LowCurrent_GPIO_Port,Step3_DIR_GPIO_Port, Limit_switch3_GPIO_Port),
			};

	bool AllInPlace = true;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	74fb      	strb	r3, [r7, #19]
	uint8_t u8cmd_buf[6] = {0x00};
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	823b      	strh	r3, [r7, #16]
	uint32_t u32CurrentTime_ms = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  for(;;)
  {
	  u32CurrentTime_ms = osKernelSysTick();
 8001bcc:	f008 fbe5 	bl	800a39a <osKernelSysTick>
 8001bd0:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

	  if(StepperAtSetpoint(&motor[PrimaryStepper]) && StepperAtSetpoint(&motor[GrillStepper])
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f93b 	bl	8001e54 <StepperAtSetpoint>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d071      	beq.n	8001cc8 <Motor_task+0x23c>
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	3334      	adds	r3, #52	; 0x34
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f932 	bl	8001e54 <StepperAtSetpoint>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d068      	beq.n	8001cc8 <Motor_task+0x23c>
			  && StepperAtSetpoint(&motor[SecondaryStepper]))
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	3368      	adds	r3, #104	; 0x68
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 f929 	bl	8001e54 <StepperAtSetpoint>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d05f      	beq.n	8001cc8 <Motor_task+0x23c>
	  {
		  if(!AllInPlace)
 8001c08:	7cfb      	ldrb	r3, [r7, #19]
 8001c0a:	f083 0301 	eor.w	r3, r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <Motor_task+0x19c>
		  {
			  AllInPlace = true;
 8001c14:	2301      	movs	r3, #1
 8001c16:	74fb      	strb	r3, [r7, #19]
			  xQueueSend(MotorInPlaceHandle,&AllInPlace,0);
 8001c18:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <Motor_task+0x338>)
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	f107 0113 	add.w	r1, r7, #19
 8001c20:	2300      	movs	r3, #0
 8001c22:	2200      	movs	r2, #0
 8001c24:	f008 fe4a 	bl	800a8bc <xQueueGenericSend>
		  }
		  if(xMessageBufferReceive(MotorControlsHandle, u8cmd_buf, 6, 10) == 6)
 8001c28:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <Motor_task+0x33c>)
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	f107 010c 	add.w	r1, r7, #12
 8001c30:	230a      	movs	r3, #10
 8001c32:	2206      	movs	r2, #6
 8001c34:	f009 fb7d 	bl	800b332 <xStreamBufferReceive>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	f040 8104 	bne.w	8001e48 <Motor_task+0x3bc>
		  {
			  for(uint8_t i = 0;i < NumberOfMotors;i++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8001c46:	e03a      	b.n	8001cbe <Motor_task+0x232>
			  {
				  motor[i].u8SetPoint = MIN(u8cmd_buf[2*i], motor->u8MaxValue);
 8001c48:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8001c4c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001c56:	4413      	add	r3, r2
 8001c58:	f813 2cac 	ldrb.w	r2, [r3, #-172]
 8001c5c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001c60:	428a      	cmp	r2, r1
 8001c62:	bf28      	it	cs
 8001c64:	460a      	movcs	r2, r1
 8001c66:	b2d1      	uxtb	r1, r2
 8001c68:	2234      	movs	r2, #52	; 0x34
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001c72:	4413      	add	r3, r2
 8001c74:	3b7b      	subs	r3, #123	; 0x7b
 8001c76:	460a      	mov	r2, r1
 8001c78:	701a      	strb	r2, [r3, #0]
				  motor[i].fSecPerStep = (float) (u8cmd_buf[2*i + 1])/10;
 8001c7a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	3301      	adds	r3, #1
 8001c82:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001c86:	4413      	add	r3, r2
 8001c88:	f813 3cac 	ldrb.w	r3, [r3, #-172]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff f87b 	bl	8000d88 <__aeabi_ui2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f897 40b7 	ldrb.w	r4, [r7, #183]	; 0xb7
 8001c98:	494c      	ldr	r1, [pc, #304]	; (8001dcc <Motor_task+0x340>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f980 	bl	8000fa0 <__aeabi_fdiv>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2334      	movs	r3, #52	; 0x34
 8001ca6:	fb03 f304 	mul.w	r3, r3, r4
 8001caa:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001cae:	440b      	add	r3, r1
 8001cb0:	3b74      	subs	r3, #116	; 0x74
 8001cb2:	601a      	str	r2, [r3, #0]
			  for(uint8_t i = 0;i < NumberOfMotors;i++)
 8001cb4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8001cbe:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d9c0      	bls.n	8001c48 <Motor_task+0x1bc>
		  if(xMessageBufferReceive(MotorControlsHandle, u8cmd_buf, 6, 10) == 6)
 8001cc6:	e0bf      	b.n	8001e48 <Motor_task+0x3bc>
			  }
		  }
	  }else
	  {
		  AllInPlace = false;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	74fb      	strb	r3, [r7, #19]
		  for(uint8_t i = 0;i < NumberOfMotors;i++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8001cd2:	e0b4      	b.n	8001e3e <Motor_task+0x3b2>
		  {

			  if(!StepperAtSetpoint(&motor[i]) && (u32CurrentTime_ms - motor[i].u32LastMove_ms > STEP_PERIOD))
 8001cd4:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001cd8:	f107 0214 	add.w	r2, r7, #20
 8001cdc:	2134      	movs	r1, #52	; 0x34
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 f8b5 	bl	8001e54 <StepperAtSetpoint>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f083 0301 	eor.w	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 809e 	beq.w	8001e34 <Motor_task+0x3a8>
 8001cf8:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001cfc:	2234      	movs	r2, #52	; 0x34
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001d06:	4413      	add	r3, r2
 8001d08:	3b78      	subs	r3, #120	; 0x78
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b14      	cmp	r3, #20
 8001d14:	f240 808e 	bls.w	8001e34 <Motor_task+0x3a8>
			  {
				  if((motor[i].u8SetPoint == 0) && (motor[i].fSecPerStep == 0.0))
 8001d18:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001d1c:	2234      	movs	r2, #52	; 0x34
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001d26:	4413      	add	r3, r2
 8001d28:	3b7b      	subs	r3, #123	; 0x7b
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d14f      	bne.n	8001dd0 <Motor_task+0x344>
 8001d30:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001d34:	2234      	movs	r2, #52	; 0x34
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b74      	subs	r3, #116	; 0x74
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f04f 0100 	mov.w	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fa09 	bl	8001160 <__aeabi_fcmpeq>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d03d      	beq.n	8001dd0 <Motor_task+0x344>
				  {
					  if(StepperSetToZero(&motor[i]))
 8001d54:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001d58:	f107 0214 	add.w	r2, r7, #20
 8001d5c:	2134      	movs	r1, #52	; 0x34
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 f889 	bl	8001e7c <StepperSetToZero>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d061      	beq.n	8001e34 <Motor_task+0x3a8>
					  {
						  motor[i].u8SetPoint = motor[i].u8MinValue;
 8001d70:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001d74:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001d78:	2134      	movs	r1, #52	; 0x34
 8001d7a:	fb01 f202 	mul.w	r2, r1, r2
 8001d7e:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001d82:	440a      	add	r2, r1
 8001d84:	3a79      	subs	r2, #121	; 0x79
 8001d86:	7811      	ldrb	r1, [r2, #0]
 8001d88:	2234      	movs	r2, #52	; 0x34
 8001d8a:	fb02 f303 	mul.w	r3, r2, r3
 8001d8e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001d92:	4413      	add	r3, r2
 8001d94:	3b7b      	subs	r3, #123	; 0x7b
 8001d96:	460a      	mov	r2, r1
 8001d98:	701a      	strb	r2, [r3, #0]
						  StepperDisable(&motor[i]);
 8001d9a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001d9e:	f107 0214 	add.w	r2, r7, #20
 8001da2:	2134      	movs	r1, #52	; 0x34
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f96b 	bl	8002086 <StepperDisable>
					  if(StepperSetToZero(&motor[i]))
 8001db0:	e040      	b.n	8001e34 <Motor_task+0x3a8>
 8001db2:	bf00      	nop
 8001db4:	40011000 	.word	0x40011000
 8001db8:	40010c00 	.word	0x40010c00
 8001dbc:	40011400 	.word	0x40011400
 8001dc0:	40010800 	.word	0x40010800
 8001dc4:	200036fc 	.word	0x200036fc
 8001dc8:	20003700 	.word	0x20003700
 8001dcc:	41200000 	.word	0x41200000
					  }

				  }else if(u32CurrentTime_ms - motor[i].u32LastMove_ms > motor[i].fSecPerStep*1000)
 8001dd0:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001dd4:	2234      	movs	r2, #52	; 0x34
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001dde:	4413      	add	r3, r2
 8001de0:	3b78      	subs	r3, #120	; 0x78
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe ffcc 	bl	8000d88 <__aeabi_ui2f>
 8001df0:	4604      	mov	r4, r0
 8001df2:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001df6:	2234      	movs	r2, #52	; 0x34
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001e00:	4413      	add	r3, r2
 8001e02:	3b74      	subs	r3, #116	; 0x74
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4912      	ldr	r1, [pc, #72]	; (8001e50 <Motor_task+0x3c4>)
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff f815 	bl	8000e38 <__aeabi_fmul>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4619      	mov	r1, r3
 8001e12:	4620      	mov	r0, r4
 8001e14:	f7ff f9cc 	bl	80011b0 <__aeabi_fcmpgt>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00a      	beq.n	8001e34 <Motor_task+0x3a8>
				  {
					  StepperAdjustPosition(&motor[i]);
 8001e1e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001e22:	f107 0214 	add.w	r2, r7, #20
 8001e26:	2134      	movs	r1, #52	; 0x34
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f84d 	bl	8001ece <StepperAdjustPosition>
		  for(uint8_t i = 0;i < NumberOfMotors;i++)
 8001e34:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8001e3e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	f67f af46 	bls.w	8001cd4 <Motor_task+0x248>

		  }

	  }

	  osDelay(1);
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f008 fb02 	bl	800a452 <osDelay>
	  u32CurrentTime_ms = osKernelSysTick();
 8001e4e:	e6bd      	b.n	8001bcc <Motor_task+0x140>
 8001e50:	447a0000 	.word	0x447a0000

08001e54 <StepperAtSetpoint>:


}

bool StepperAtSetpoint(StepObj *motor)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	return motor->u8Position == motor->u8SetPoint;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <StepperSetToZero>:

bool StepperSetToZero(StepObj *motor)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	if(!StepperLimitSwitchActive(motor))
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f8b0 	bl	8001fea <StepperLimitSwitchActive>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f083 0301 	eor.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d010      	beq.n	8001eb8 <StepperSetToZero+0x3c>
	{
		StepperEnable(motor);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8bd 	bl	8002016 <StepperEnable>
		StepperLowCurrentON(motor);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f8e2 	bl	8002066 <StepperLowCurrentON>
	    motor->sDirection = Closing;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
	    StepperSetDirection(motor);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f8fc 	bl	80020a6 <StepperSetDirection>

	    StepperToggleOneStep(motor);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f87b 	bl	8001faa <StepperToggleOneStep>
	    return false;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e006      	b.n	8001ec6 <StepperSetToZero+0x4a>

	}
	motor->u8Position = motor->u8MinValue;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	return true;
 8001ec4:	2301      	movs	r3, #1
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <StepperAdjustPosition>:
    	osDelay(50);
	}
}
*/
void StepperAdjustPosition(StepObj *motor)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]

	int8_t delta_pos;

    if(StepperLimitSwitchActive(motor))
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f887 	bl	8001fea <StepperLimitSwitchActive>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <StepperAdjustPosition+0x20>
    {
    	motor->u8Position = motor->u8MinValue;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

	StepperEnable(motor);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f891 	bl	8002016 <StepperEnable>
	StepperLowCurrentOFF(motor);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f8a6 	bl	8002046 <StepperLowCurrentOFF>

	if(motor->u8Position > motor->u8SetPoint)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d908      	bls.n	8001f1c <StepperAdjustPosition+0x4e>
	{
		motor->sDirection = Closing;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
		StepperSetDirection(motor);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f8c8 	bl	80020a6 <StepperSetDirection>
		delta_pos = -1;
 8001f16:	23ff      	movs	r3, #255	; 0xff
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	e007      	b.n	8001f2c <StepperAdjustPosition+0x5e>
	}
	else
	{
		motor->sDirection = Opening;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
		StepperSetDirection(motor);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8bf 	bl	80020a6 <StepperSetDirection>
		delta_pos = 1;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
	}


    motor->u8Position += delta_pos;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	4413      	add	r3, r2
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	StepperToggleOneStep(motor);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f833 	bl	8001faa <StepperToggleOneStep>

    if(StepperLimitSwitchActive(motor) && motor->sDirection == Closing)
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f850 	bl	8001fea <StepperLimitSwitchActive>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00d      	beq.n	8001f6c <StepperAdjustPosition+0x9e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d109      	bne.n	8001f6c <StepperAdjustPosition+0x9e>
	{
		motor->u8Position = motor->u8MinValue; // On a atteint le minimum, on peut désactiver le moteur
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		StepperDisable(motor);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f88e 	bl	8002086 <StepperDisable>
 8001f6a:	e00f      	b.n	8001f8c <StepperAdjustPosition+0xbe>
	}
    else if(motor->u8Position == motor->u8MinValue) // On pense qu'on est au minimum, mais on est perdu
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d107      	bne.n	8001f8c <StepperAdjustPosition+0xbe>
    {
    	motor->u8SetPoint = 0; 		// On demande une remise à zéro
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    	motor->fSecPerStep = 0.0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if(motor->u8Position == motor->u8SetPoint)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d102      	bne.n	8001fa2 <StepperAdjustPosition+0xd4>
    {
    	StepperLowCurrentON(motor);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f862 	bl	8002066 <StepperLowCurrentON>
    }

}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <StepperToggleOneStep>:

void StepperToggleOneStep(StepObj * motor)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(motor->sPins.PWM_PORT,motor->sPins.PWM_PIN,GPIO_PIN_RESET);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6918      	ldr	r0, [r3, #16]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	889b      	ldrh	r3, [r3, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f003 fc2e 	bl	800581e <HAL_GPIO_WritePin>
	osDelay(10);
 8001fc2:	200a      	movs	r0, #10
 8001fc4:	f008 fa45 	bl	800a452 <osDelay>
	HAL_GPIO_WritePin(motor->sPins.PWM_PORT,motor->sPins.PWM_PIN,GPIO_PIN_SET);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6918      	ldr	r0, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	889b      	ldrh	r3, [r3, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f003 fc23 	bl	800581e <HAL_GPIO_WritePin>
	motor->u32LastMove_ms = osKernelSysTick();
 8001fd8:	f008 f9df 	bl	800a39a <osKernelSysTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <StepperLimitSwitchActive>:
bool StepperLimitSwitchActive(StepObj * motor)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]

	return HAL_GPIO_ReadPin(motor->sPins.SWITCH_PORT,motor->sPins.SWITCH_PIN) == GPIO_PIN_RESET;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	89db      	ldrh	r3, [r3, #14]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f003 fbf7 	bl	80057f0 <HAL_GPIO_ReadPin>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <StepperEnable>:

void StepperEnable(StepObj * motor)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->sPins.ENABLE_PORT,motor->sPins.ENABLE_PIN,GPIO_PIN_RESET);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6958      	ldr	r0, [r3, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	88db      	ldrh	r3, [r3, #6]
 8002026:	2200      	movs	r2, #0
 8002028:	4619      	mov	r1, r3
 800202a:	f003 fbf8 	bl	800581e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->sPins.RESET_PORT,motor->sPins.RESET_PIN,GPIO_PIN_SET);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6998      	ldr	r0, [r3, #24]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	891b      	ldrh	r3, [r3, #8]
 8002036:	2201      	movs	r2, #1
 8002038:	4619      	mov	r1, r3
 800203a:	f003 fbf0 	bl	800581e <HAL_GPIO_WritePin>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <StepperLowCurrentOFF>:

void StepperLowCurrentOFF(StepObj *motor)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->sPins.LOW_CURRENT_PORT,motor->sPins.LOW_CURRENT_PIN,GPIO_PIN_RESET);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69d8      	ldr	r0, [r3, #28]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	895b      	ldrh	r3, [r3, #10]
 8002056:	2200      	movs	r2, #0
 8002058:	4619      	mov	r1, r3
 800205a:	f003 fbe0 	bl	800581e <HAL_GPIO_WritePin>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <StepperLowCurrentON>:

void StepperLowCurrentON(StepObj *motor)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->sPins.LOW_CURRENT_PORT,motor->sPins.LOW_CURRENT_PIN,GPIO_PIN_SET);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69d8      	ldr	r0, [r3, #28]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	895b      	ldrh	r3, [r3, #10]
 8002076:	2201      	movs	r2, #1
 8002078:	4619      	mov	r1, r3
 800207a:	f003 fbd0 	bl	800581e <HAL_GPIO_WritePin>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <StepperDisable>:

void StepperDisable(StepObj *motor)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->sPins.ENABLE_PORT,motor->sPins.ENABLE_PIN,GPIO_PIN_SET);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6958      	ldr	r0, [r3, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	88db      	ldrh	r3, [r3, #6]
 8002096:	2201      	movs	r2, #1
 8002098:	4619      	mov	r1, r3
 800209a:	f003 fbc0 	bl	800581e <HAL_GPIO_WritePin>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <StepperSetDirection>:

void StepperSetDirection(StepObj *motor)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->sPins.DIRECTION_PORT,motor->sPins.DIRECTION_PIN,motor->sDirection);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a18      	ldr	r0, [r3, #32]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8999      	ldrh	r1, [r3, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	f003 fbaf 	bl	800581e <HAL_GPIO_WritePin>
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <PARAMFILE_Init>:

PFL_SHandle PARAMFILE_g_sHandle;
const PFL_SConfig m_sConfig = { .ptrLoadAll = LoadAllCallback, .ptrCommitAll = CommitAllCallback };

void PARAMFILE_Init()
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	PFL_Init(&PARAMFILE_g_sHandle,  m_sParameterItems, PARAMETERITEM_COUNT, &m_sConfig);
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <PARAMFILE_Init+0x1c>)
 80020ce:	2245      	movs	r2, #69	; 0x45
 80020d0:	4905      	ldr	r1, [pc, #20]	; (80020e8 <PARAMFILE_Init+0x20>)
 80020d2:	4806      	ldr	r0, [pc, #24]	; (80020ec <PARAMFILE_Init+0x24>)
 80020d4:	f000 f872 	bl	80021bc <PFL_Init>
	//PFL_LoadAll(&PARAMFILE_g_sHandle);
	PFL_LoadAllDefault(&PARAMFILE_g_sHandle);
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <PARAMFILE_Init+0x24>)
 80020da:	f000 f884 	bl	80021e6 <PFL_LoadAllDefault>
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	08012384 	.word	0x08012384
 80020e8:	08011bf8 	.word	0x08011bf8
 80020ec:	200035e4 	.word	0x200035e4

080020f0 <PARAMFILE_GetParamEntryCount>:

uint32_t PARAMFILE_GetParamEntryCount()
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
	return PARAMFILE_g_sHandle.u32ParameterEntryCount;
 80020f4:	4b02      	ldr	r3, [pc, #8]	; (8002100 <PARAMFILE_GetParamEntryCount+0x10>)
 80020f6:	685b      	ldr	r3, [r3, #4]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	200035e4 	.word	0x200035e4

08002104 <PARAMFILE_GetParamEntryByIndex>:

const PFL_SParameterItem* PARAMFILE_GetParamEntryByIndex(uint32_t u32Index)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	if (u32Index >= PARAMETERITEM_COUNT)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b44      	cmp	r3, #68	; 0x44
 8002110:	d901      	bls.n	8002116 <PARAMFILE_GetParamEntryByIndex+0x12>
		return NULL;
 8002112:	2300      	movs	r3, #0
 8002114:	e007      	b.n	8002126 <PARAMFILE_GetParamEntryByIndex+0x22>
	return &PARAMFILE_g_sHandle.pParameterEntries[u32Index];
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <PARAMFILE_GetParamEntryByIndex+0x2c>)
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	200035e4 	.word	0x200035e4

08002134 <LoadAllCallback>:

static void LoadAllCallback(const PFL_SHandle* psHandle)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	// TODO: Flash reading is not yet implemented
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <CommitAllCallback>:

static void CommitAllCallback(const PFL_SHandle* psHandle)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
	// TODO: Flash writing is not yet implemented
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <PB_GetTemperatureParam>:


const PF_CombTempParam_t* PB_GetTemperatureParam()
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
	return &m_sTemperatureParam;
 800215c:	4b02      	ldr	r3, [pc, #8]	; (8002168 <PB_GetTemperatureParam+0x10>)
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000020 	.word	0x20000020

0800216c <PB_GetPrimaryMotorParam>:

const PF_MotorOpeningsParam_t* PB_GetPrimaryMotorParam()
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
	return &m_sPrimaryMotorParam;
 8002170:	4b02      	ldr	r3, [pc, #8]	; (800217c <PB_GetPrimaryMotorParam+0x10>)
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000064 	.word	0x20000064

08002180 <PB_GetSecondaryMotorParam>:

const PF_MotorOpeningsParam_t* PB_GetSecondaryMotorParam()
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
	return &m_sSecondaryMotorParam;
 8002184:	4b02      	ldr	r3, [pc, #8]	; (8002190 <PB_GetSecondaryMotorParam+0x10>)
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	200000e4 	.word	0x200000e4

08002194 <PB_GetGrillMotorParam>:

const PF_MotorOpeningsParam_t* PB_GetGrillMotorParam()
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
	return &m_sGrillMotorParam;
 8002198:	4b02      	ldr	r3, [pc, #8]	; (80021a4 <PB_GetGrillMotorParam+0x10>)
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	200000a4 	.word	0x200000a4

080021a8 <PB_GetUserParam>:

const PF_UsrParam* PB_GetUserParam()
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
	return &m_sMemBlock;
 80021ac:	4b02      	ldr	r3, [pc, #8]	; (80021b8 <PB_GetUserParam+0x10>)
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000124 	.word	0x20000124

080021bc <PFL_Init>:

static const PFL_SParameterItem* GetParameterEntryByKey(const PFL_SHandle* pHandle, const char* szKey);
static PFL_ESETRET ValidateValueInt32(const PFL_SHandle* pHandle, const PFL_SParameterItem* pParameterFile, int32_t s32Value);

void PFL_Init(PFL_SHandle* pHandle, const PFL_SParameterItem* pParameterEntries, uint32_t u32ParameterEntryCount, const PFL_SConfig* psConfig)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
	pHandle->pParameterEntries = pParameterEntries;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	601a      	str	r2, [r3, #0]
	pHandle->u32ParameterEntryCount = u32ParameterEntryCount;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	605a      	str	r2, [r3, #4]

	pHandle->psConfig = psConfig;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <PFL_LoadAllDefault>:
		}
	}
}

void PFL_LoadAllDefault(PFL_SHandle* pHandle)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
	if (pHandle->psConfig->ptrLoadAll != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d004      	beq.n	8002202 <PFL_LoadAllDefault+0x1c>
		pHandle->psConfig->ptrLoadAll(pHandle);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3

	// Verify variables and load default value if necessary
	for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e016      	b.n	8002236 <PFL_LoadAllDefault+0x50>
	{
		const PFL_SParameterItem* pEnt = &pHandle->pParameterEntries[i];
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	613b      	str	r3, [r7, #16]

		if (pEnt->eType == PFL_TYPE_Int32)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	7a1b      	ldrb	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <PFL_LoadAllDefault+0x4a>
		{
			int32_t* ps32Value = ((int32_t*)pEnt->vdVar);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	60fb      	str	r3, [r7, #12]
			*ps32Value = pEnt->uType.sInt32.s32Default;
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3301      	adds	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	d8e3      	bhi.n	8002208 <PFL_LoadAllDefault+0x22>
		}
	}
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <PFL_GetValueInt32>:
	if (pHandle->psConfig->ptrCommitAll != NULL)
		pHandle->psConfig->ptrCommitAll(pHandle);
}

PFL_ESETRET PFL_GetValueInt32(const PFL_SHandle* pHandle, const char* szName, int32_t* psOut32Value)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
	const PFL_SParameterItem* pEnt = GetParameterEntryByKey(pHandle, szName);
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f873 	bl	8002344 <GetParameterEntryByKey>
 800225e:	6178      	str	r0, [r7, #20]
	if (pEnt == NULL || pEnt->eType != PFL_TYPE_Int32 || pEnt->vdVar == NULL)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <PFL_GetValueInt32+0x2c>
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	7a1b      	ldrb	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <PFL_GetValueInt32+0x2c>
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <PFL_GetValueInt32+0x30>
		return PFL_ESETRET_EntryNoFound;
 8002276:	2304      	movs	r3, #4
 8002278:	e007      	b.n	800228a <PFL_GetValueInt32+0x40>

	const int32_t* ps32Value = ((int32_t*)pEnt->vdVar);
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	613b      	str	r3, [r7, #16]
	if (eValidateRet != PFL_ESETRET_OK)
	{
		*psOut32Value = pEnt->uType.sInt32.s32Default;
		return eValidateRet;
	}*/
	*psOut32Value = *ps32Value;
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	601a      	str	r2, [r3, #0]
	return PFL_ESETRET_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <PFL_SetValueInt32>:

PFL_ESETRET PFL_SetValueInt32(const PFL_SHandle* pHandle, const char* szName, int32_t s32NewValue)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b088      	sub	sp, #32
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
	const PFL_SParameterItem* pEnt = GetParameterEntryByKey(pHandle, szName);
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f84f 	bl	8002344 <GetParameterEntryByKey>
 80022a6:	61f8      	str	r0, [r7, #28]
	if (pEnt == NULL || pEnt->eType != PFL_TYPE_Int32 || pEnt->vdVar == NULL)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <PFL_SetValueInt32+0x2c>
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	7a1b      	ldrb	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d103      	bne.n	80022be <PFL_SetValueInt32+0x2c>
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <PFL_SetValueInt32+0x30>
		return PFL_ESETRET_EntryNoFound;
 80022be:	2304      	movs	r3, #4
 80022c0:	e012      	b.n	80022e8 <PFL_SetValueInt32+0x56>
	int32_t* ps32Value = ((int32_t*)pEnt->vdVar);
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	61bb      	str	r3, [r7, #24]
	const PFL_ESETRET eValidateRet = ValidateValueInt32(pHandle, pEnt, s32NewValue);
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	69f9      	ldr	r1, [r7, #28]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f80f 	bl	80022f0 <ValidateValueInt32>
 80022d2:	4603      	mov	r3, r0
 80022d4:	75fb      	strb	r3, [r7, #23]
	if (eValidateRet != PFL_ESETRET_OK)
 80022d6:	7dfb      	ldrb	r3, [r7, #23]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <PFL_SetValueInt32+0x4e>
		return eValidateRet;
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
 80022de:	e003      	b.n	80022e8 <PFL_SetValueInt32+0x56>
	// We can record if it pass validation step
	*ps32Value = s32NewValue;
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
	return PFL_ESETRET_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <ValidateValueInt32>:

static PFL_ESETRET ValidateValueInt32(const PFL_SHandle* pHandle, const PFL_SParameterItem* pParameterFile, int32_t s32Value)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
    assert(pParameterFile != NULL && pParameterFile->eType == PFL_TYPE_Int32);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <ValidateValueInt32+0x1a>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	7a1b      	ldrb	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <ValidateValueInt32+0x26>
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <ValidateValueInt32+0x48>)
 800230c:	4a0b      	ldr	r2, [pc, #44]	; (800233c <ValidateValueInt32+0x4c>)
 800230e:	2169      	movs	r1, #105	; 0x69
 8002310:	480b      	ldr	r0, [pc, #44]	; (8002340 <ValidateValueInt32+0x50>)
 8002312:	f00b f9eb 	bl	800d6ec <__assert_func>
	if (s32Value < pParameterFile->uType.sInt32.s32Min || s32Value > pParameterFile->uType.sInt32.s32Max)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	db04      	blt.n	800232a <ValidateValueInt32+0x3a>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	dd01      	ble.n	800232e <ValidateValueInt32+0x3e>
		return PFL_ESETRET_InvalidRange;
 800232a:	2302      	movs	r3, #2
 800232c:	e000      	b.n	8002330 <ValidateValueInt32+0x40>
	return PFL_ESETRET_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	08011968 	.word	0x08011968
 800233c:	0801238c 	.word	0x0801238c
 8002340:	080119ac 	.word	0x080119ac

08002344 <GetParameterEntryByKey>:

static const PFL_SParameterItem* GetParameterEntryByKey(const PFL_SHandle* pHandle, const char* szKey)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	e016      	b.n	8002382 <GetParameterEntryByKey+0x3e>
    {
    	const PFL_SParameterItem* pParamItem = &pHandle->pParameterEntries[i];
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6819      	ldr	r1, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	60bb      	str	r3, [r7, #8]
        if (strcmp(pParamItem->szKey, szKey) == 0)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6839      	ldr	r1, [r7, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fd ff5f 	bl	8000230 <strcmp>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <GetParameterEntryByKey+0x38>
            return pParamItem;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	e008      	b.n	800238e <GetParameterEntryByKey+0x4a>
    for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3301      	adds	r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	429a      	cmp	r2, r3
 800238a:	d8e3      	bhi.n	8002354 <GetParameterEntryByKey+0x10>
    }
    return NULL;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <Particle_Init>:

uint16_t Particle_Send_CMD(uint8_t cmd);


void Particle_Init(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
	ParticleDevice.LED_current_meas = 0;
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <Particle_Init+0x6c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	831a      	strh	r2, [r3, #24]
	ParticleDevice.ch0_ON = 0;
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <Particle_Init+0x6c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	801a      	strh	r2, [r3, #0]
	ParticleDevice.ch0_OFF = 0;
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <Particle_Init+0x6c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	805a      	strh	r2, [r3, #2]
	ParticleDevice.ch1_ON = 0;
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <Particle_Init+0x6c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	809a      	strh	r2, [r3, #4]
	ParticleDevice.ch1_OFF = 0;
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <Particle_Init+0x6c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	80da      	strh	r2, [r3, #6]
	ParticleDevice.variance = 0;
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <Particle_Init+0x6c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	815a      	strh	r2, [r3, #10]
	ParticleDevice.temperature = 0;
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <Particle_Init+0x6c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	819a      	strh	r2, [r3, #12]
	ParticleDevice.LED_current_meas = 0;
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <Particle_Init+0x6c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	831a      	strh	r2, [r3, #24]
	ParticleDevice.slope = 0;
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <Particle_Init+0x6c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	615a      	str	r2, [r3, #20]
	ParticleDevice.Lux_ON = 0;
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <Particle_Init+0x6c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	835a      	strh	r2, [r3, #26]
	ParticleDevice.Lux_OFF = 0;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <Particle_Init+0x6c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	839a      	strh	r2, [r3, #28]
	ParticleDevice.TimeSinceInit = 0;
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <Particle_Init+0x6c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	621a      	str	r2, [r3, #32]
	ParticleDevice.last_particle_time = 0;
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <Particle_Init+0x6c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24
	ParticleDevice.normalized_zero = 80.0;
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <Particle_Init+0x6c>)
 80023ec:	4a06      	ldr	r2, [pc, #24]	; (8002408 <Particle_Init+0x70>)
 80023ee:	611a      	str	r2, [r3, #16]

	currentState = Idle;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <Particle_Init+0x74>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
	nextState = Idle;
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <Particle_Init+0x78>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	20000c88 	.word	0x20000c88
 8002408:	42a00000 	.word	0x42a00000
 800240c:	20000c30 	.word	0x20000c30
 8002410:	20000c31 	.word	0x20000c31

08002414 <ParticlesManager>:

void ParticlesManager(uint32_t u32Time_ms)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	static uint16_t tx_checksum, rx_checksum;
	static uint8_t rx_payload_size, tx_size, zero_current;
	static uint32_t response_delay = 800;
	static uint8_t request_interval = TIME_TO_WAIT_IF_OK;
	static uint32_t u32LastReqTime = 0;
	int slp_sign = 1;
 800241c:	2301      	movs	r3, #1
 800241e:	60fb      	str	r3, [r7, #12]


	switch(currentState)
 8002420:	4ba0      	ldr	r3, [pc, #640]	; (80026a4 <ParticlesManager+0x290>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b04      	cmp	r3, #4
 8002426:	f200 8247 	bhi.w	80028b8 <ParticlesManager+0x4a4>
 800242a:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <ParticlesManager+0x1c>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002445 	.word	0x08002445
 8002434:	0800255b 	.word	0x0800255b
 8002438:	080025ad 	.word	0x080025ad
 800243c:	0800261b 	.word	0x0800261b
 8002440:	080026fd 	.word	0x080026fd
	{
	case Idle:
		if(u32Time_ms - u32LastReqTime > SECONDS(request_interval))
 8002444:	4b98      	ldr	r3, [pc, #608]	; (80026a8 <ParticlesManager+0x294>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	4a97      	ldr	r2, [pc, #604]	; (80026ac <ParticlesManager+0x298>)
 800244e:	7812      	ldrb	r2, [r2, #0]
 8002450:	4611      	mov	r1, r2
 8002452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002456:	fb02 f201 	mul.w	r2, r2, r1
 800245a:	4293      	cmp	r3, r2
 800245c:	f240 8229 	bls.w	80028b2 <ParticlesManager+0x49e>
		{
			//GC 2023-07-19 debug
			if(config_mode)
 8002460:	4b93      	ldr	r3, [pc, #588]	; (80026b0 <ParticlesManager+0x29c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d040      	beq.n	80024ea <ParticlesManager+0xd6>
			{
				//Test unitaire - WRITE CMD
				TX_BUFFER[0] = START_BYTE;
 8002468:	4b92      	ldr	r3, [pc, #584]	; (80026b4 <ParticlesManager+0x2a0>)
 800246a:	22cc      	movs	r2, #204	; 0xcc
 800246c:	701a      	strb	r2, [r3, #0]
				TX_BUFFER[1] = WRITE_CMD | 0x04; //Attention, devrait etre 0x05, updater aussi PF_VvalidatateConfig
 800246e:	4b91      	ldr	r3, [pc, #580]	; (80026b4 <ParticlesManager+0x2a0>)
 8002470:	22c4      	movs	r2, #196	; 0xc4
 8002472:	705a      	strb	r2, [r3, #1]
				tx_checksum = TX_BUFFER[1];
 8002474:	4b8f      	ldr	r3, [pc, #572]	; (80026b4 <ParticlesManager+0x2a0>)
 8002476:	785b      	ldrb	r3, [r3, #1]
 8002478:	b29a      	uxth	r2, r3
 800247a:	4b8f      	ldr	r3, [pc, #572]	; (80026b8 <ParticlesManager+0x2a4>)
 800247c:	801a      	strh	r2, [r3, #0]
				TX_BUFFER[2] = 3;//(uint8_t)pParam->s32TLSGAIN;
 800247e:	4b8d      	ldr	r3, [pc, #564]	; (80026b4 <ParticlesManager+0x2a0>)
 8002480:	2203      	movs	r2, #3
 8002482:	709a      	strb	r2, [r3, #2]
				TX_BUFFER[3] = 5;//(uint8_t)pParam->s32TSLINT;
 8002484:	4b8b      	ldr	r3, [pc, #556]	; (80026b4 <ParticlesManager+0x2a0>)
 8002486:	2205      	movs	r2, #5
 8002488:	70da      	strb	r2, [r3, #3]
				TX_BUFFER[4] = 7;//(uint8_t)pParam->s32DACCMD;
 800248a:	4b8a      	ldr	r3, [pc, #552]	; (80026b4 <ParticlesManager+0x2a0>)
 800248c:	2207      	movs	r2, #7
 800248e:	711a      	strb	r2, [r3, #4]
				TX_BUFFER[5] = 10;//(uint8_t)pParam->s32TIMEINTERVAL;  //GC Attention, devrait être un WORD (2 byte)
 8002490:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <ParticlesManager+0x2a0>)
 8002492:	220a      	movs	r2, #10
 8002494:	715a      	strb	r2, [r3, #5]
				//TX_BUFFER[6] = 0;//(uint8_t)pParam->s32TIMEINTERVAL;  //GC Attention, devrait être un WORD (2 byte)
				for(uint8_t j = 2;j < 6;j++)
 8002496:	2302      	movs	r3, #2
 8002498:	72fb      	strb	r3, [r7, #11]
 800249a:	e00c      	b.n	80024b6 <ParticlesManager+0xa2>
				{
					tx_checksum += TX_BUFFER[j];
 800249c:	7afb      	ldrb	r3, [r7, #11]
 800249e:	4a85      	ldr	r2, [pc, #532]	; (80026b4 <ParticlesManager+0x2a0>)
 80024a0:	5cd3      	ldrb	r3, [r2, r3]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	4b84      	ldr	r3, [pc, #528]	; (80026b8 <ParticlesManager+0x2a4>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	4413      	add	r3, r2
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b82      	ldr	r3, [pc, #520]	; (80026b8 <ParticlesManager+0x2a4>)
 80024ae:	801a      	strh	r2, [r3, #0]
				for(uint8_t j = 2;j < 6;j++)
 80024b0:	7afb      	ldrb	r3, [r7, #11]
 80024b2:	3301      	adds	r3, #1
 80024b4:	72fb      	strb	r3, [r7, #11]
 80024b6:	7afb      	ldrb	r3, [r7, #11]
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d9ef      	bls.n	800249c <ParticlesManager+0x88>
				}
				TX_BUFFER[6] = (uint8_t)(tx_checksum >> 8);
 80024bc:	4b7e      	ldr	r3, [pc, #504]	; (80026b8 <ParticlesManager+0x2a4>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b7b      	ldr	r3, [pc, #492]	; (80026b4 <ParticlesManager+0x2a0>)
 80024c8:	719a      	strb	r2, [r3, #6]
				TX_BUFFER[7] = (uint8_t)(tx_checksum & 0x00FF);
 80024ca:	4b7b      	ldr	r3, [pc, #492]	; (80026b8 <ParticlesManager+0x2a4>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b78      	ldr	r3, [pc, #480]	; (80026b4 <ParticlesManager+0x2a0>)
 80024d2:	71da      	strb	r2, [r3, #7]
				TX_BUFFER[8] = STOP_BYTE;
 80024d4:	4b77      	ldr	r3, [pc, #476]	; (80026b4 <ParticlesManager+0x2a0>)
 80024d6:	2299      	movs	r2, #153	; 0x99
 80024d8:	721a      	strb	r2, [r3, #8]
				tx_size = 9;
 80024da:	4b78      	ldr	r3, [pc, #480]	; (80026bc <ParticlesManager+0x2a8>)
 80024dc:	2209      	movs	r2, #9
 80024de:	701a      	strb	r2, [r3, #0]
				response_delay = 600;
 80024e0:	4b77      	ldr	r3, [pc, #476]	; (80026c0 <ParticlesManager+0x2ac>)
 80024e2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e033      	b.n	8002552 <ParticlesManager+0x13e>
			}else if(IncFireCount)
 80024ea:	4b76      	ldr	r3, [pc, #472]	; (80026c4 <ParticlesManager+0x2b0>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00e      	beq.n	8002510 <ParticlesManager+0xfc>
			{
				//Test unitaire - FIRECNT_CMD
				tx_checksum = Particle_Send_CMD(FIRECNT_CMD);
 80024f2:	2080      	movs	r0, #128	; 0x80
 80024f4:	f000 f9fe 	bl	80028f4 <Particle_Send_CMD>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b6e      	ldr	r3, [pc, #440]	; (80026b8 <ParticlesManager+0x2a4>)
 80024fe:	801a      	strh	r2, [r3, #0]
				tx_size = 5;
 8002500:	4b6e      	ldr	r3, [pc, #440]	; (80026bc <ParticlesManager+0x2a8>)
 8002502:	2205      	movs	r2, #5
 8002504:	701a      	strb	r2, [r3, #0]
				response_delay = 600;
 8002506:	4b6e      	ldr	r3, [pc, #440]	; (80026c0 <ParticlesManager+0x2ac>)
 8002508:	f44f 7216 	mov.w	r2, #600	; 0x258
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e020      	b.n	8002552 <ParticlesManager+0x13e>
			}else if(setZero)
 8002510:	4b6d      	ldr	r3, [pc, #436]	; (80026c8 <ParticlesManager+0x2b4>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00e      	beq.n	8002536 <ParticlesManager+0x122>
			{
				//Test unitaire - SETZERO CMD
				tx_checksum = Particle_Send_CMD(SETZERO_CMD);
 8002518:	2040      	movs	r0, #64	; 0x40
 800251a:	f000 f9eb 	bl	80028f4 <Particle_Send_CMD>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	4b65      	ldr	r3, [pc, #404]	; (80026b8 <ParticlesManager+0x2a4>)
 8002524:	801a      	strh	r2, [r3, #0]
				tx_size = 5;
 8002526:	4b65      	ldr	r3, [pc, #404]	; (80026bc <ParticlesManager+0x2a8>)
 8002528:	2205      	movs	r2, #5
 800252a:	701a      	strb	r2, [r3, #0]
				response_delay = 600;
 800252c:	4b64      	ldr	r3, [pc, #400]	; (80026c0 <ParticlesManager+0x2ac>)
 800252e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e00d      	b.n	8002552 <ParticlesManager+0x13e>

			}else{

				//Test unitaire - READ_CMD
				tx_checksum = Particle_Send_CMD(READ_CMD);
 8002536:	2000      	movs	r0, #0
 8002538:	f000 f9dc 	bl	80028f4 <Particle_Send_CMD>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	4b5d      	ldr	r3, [pc, #372]	; (80026b8 <ParticlesManager+0x2a4>)
 8002542:	801a      	strh	r2, [r3, #0]
				tx_size = 5;
 8002544:	4b5d      	ldr	r3, [pc, #372]	; (80026bc <ParticlesManager+0x2a8>)
 8002546:	2205      	movs	r2, #5
 8002548:	701a      	strb	r2, [r3, #0]
				response_delay = 800;
 800254a:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <ParticlesManager+0x2ac>)
 800254c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002550:	601a      	str	r2, [r3, #0]
				//TX_BUFFER[3] = (uint8_t)(tx_checksum & 0x00FF);
				//TX_BUFFER[4] = STOP_BYTE;
				//tx_size = 5;
				//response_delay = 800;
			}
			nextState = Send_request;
 8002552:	4b5e      	ldr	r3, [pc, #376]	; (80026cc <ParticlesManager+0x2b8>)
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002558:	e1ab      	b.n	80028b2 <ParticlesManager+0x49e>
	case Send_request:
		if(uartErrorCount > COMM_ERR_LIMIT && request_interval !=TIME_TO_WAIT_IF_ERR)
 800255a:	4b5d      	ldr	r3, [pc, #372]	; (80026d0 <ParticlesManager+0x2bc>)
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	2b0a      	cmp	r3, #10
 8002560:	d90a      	bls.n	8002578 <ParticlesManager+0x164>
 8002562:	4b52      	ldr	r3, [pc, #328]	; (80026ac <ParticlesManager+0x298>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b1e      	cmp	r3, #30
 8002568:	d006      	beq.n	8002578 <ParticlesManager+0x164>
		{
			request_interval = TIME_TO_WAIT_IF_ERR;
 800256a:	4b50      	ldr	r3, [pc, #320]	; (80026ac <ParticlesManager+0x298>)
 800256c:	221e      	movs	r2, #30
 800256e:	701a      	strb	r2, [r3, #0]
			nextState = Idle;
 8002570:	4b56      	ldr	r3, [pc, #344]	; (80026cc <ParticlesManager+0x2b8>)
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
			break;
 8002576:	e19f      	b.n	80028b8 <ParticlesManager+0x4a4>
		}
		HAL_UART_Transmit_IT(&huart3, TX_BUFFER, tx_size);
 8002578:	4b50      	ldr	r3, [pc, #320]	; (80026bc <ParticlesManager+0x2a8>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	494c      	ldr	r1, [pc, #304]	; (80026b4 <ParticlesManager+0x2a0>)
 8002582:	4854      	ldr	r0, [pc, #336]	; (80026d4 <ParticlesManager+0x2c0>)
 8002584:	f007 f82a 	bl	80095dc <HAL_UART_Transmit_IT>
		RX_BUFFER[0] = 0;
 8002588:	4b53      	ldr	r3, [pc, #332]	; (80026d8 <ParticlesManager+0x2c4>)
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
		RX_BUFFER[1] = 0;
 800258e:	4b52      	ldr	r3, [pc, #328]	; (80026d8 <ParticlesManager+0x2c4>)
 8002590:	2200      	movs	r2, #0
 8002592:	705a      	strb	r2, [r3, #1]
		u32LastReqTime = u32Time_ms;
 8002594:	4a44      	ldr	r2, [pc, #272]	; (80026a8 <ParticlesManager+0x294>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6013      	str	r3, [r2, #0]
		HAL_UARTEx_ReceiveToIdle_IT(&huart3, RX_BUFFER,RX_BUFFER_LENGTH);
 800259a:	2240      	movs	r2, #64	; 0x40
 800259c:	494e      	ldr	r1, [pc, #312]	; (80026d8 <ParticlesManager+0x2c4>)
 800259e:	484d      	ldr	r0, [pc, #308]	; (80026d4 <ParticlesManager+0x2c0>)
 80025a0:	f007 f860 	bl	8009664 <HAL_UARTEx_ReceiveToIdle_IT>
		nextState = Request_sent;
 80025a4:	4b49      	ldr	r3, [pc, #292]	; (80026cc <ParticlesManager+0x2b8>)
 80025a6:	2202      	movs	r2, #2
 80025a8:	701a      	strb	r2, [r3, #0]
		break;
 80025aa:	e185      	b.n	80028b8 <ParticlesManager+0x4a4>
	case Request_sent:
		if(RX_BUFFER[0] == START_BYTE)
 80025ac:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <ParticlesManager+0x2c4>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2bcc      	cmp	r3, #204	; 0xcc
 80025b2:	d117      	bne.n	80025e4 <ParticlesManager+0x1d0>
		{
			rx_payload_size = RX_BUFFER[1] & 0x3F;
 80025b4:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <ParticlesManager+0x2c4>)
 80025b6:	785b      	ldrb	r3, [r3, #1]
 80025b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <ParticlesManager+0x2c8>)
 80025c0:	701a      	strb	r2, [r3, #0]

			if(rx_payload_size != 0 && RX_BUFFER[rx_payload_size + 4] == STOP_BYTE)
 80025c2:	4b46      	ldr	r3, [pc, #280]	; (80026dc <ParticlesManager+0x2c8>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8175 	beq.w	80028b6 <ParticlesManager+0x4a2>
 80025cc:	4b43      	ldr	r3, [pc, #268]	; (80026dc <ParticlesManager+0x2c8>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	3304      	adds	r3, #4
 80025d2:	4a41      	ldr	r2, [pc, #260]	; (80026d8 <ParticlesManager+0x2c4>)
 80025d4:	5cd3      	ldrb	r3, [r2, r3]
 80025d6:	2b99      	cmp	r3, #153	; 0x99
 80025d8:	f040 816d 	bne.w	80028b6 <ParticlesManager+0x4a2>
			{
				nextState = Validate_data;
 80025dc:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <ParticlesManager+0x2b8>)
 80025de:	2203      	movs	r2, #3
 80025e0:	701a      	strb	r2, [r3, #0]
			}
			uartErrorCount++;

		}

		break;
 80025e2:	e168      	b.n	80028b6 <ParticlesManager+0x4a2>
		}else if(u32Time_ms - u32LastReqTime > response_delay)
 80025e4:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <ParticlesManager+0x294>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	1ad2      	subs	r2, r2, r3
 80025ec:	4b34      	ldr	r3, [pc, #208]	; (80026c0 <ParticlesManager+0x2ac>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	f240 8160 	bls.w	80028b6 <ParticlesManager+0x4a2>
			if(uartErrorCount <= COMM_ERR_LIMIT)
 80025f6:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <ParticlesManager+0x2bc>)
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	2b0a      	cmp	r3, #10
 80025fc:	d803      	bhi.n	8002606 <ParticlesManager+0x1f2>
				nextState = Send_request;
 80025fe:	4b33      	ldr	r3, [pc, #204]	; (80026cc <ParticlesManager+0x2b8>)
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e002      	b.n	800260c <ParticlesManager+0x1f8>
				nextState = Idle;
 8002606:	4b31      	ldr	r3, [pc, #196]	; (80026cc <ParticlesManager+0x2b8>)
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
			uartErrorCount++;
 800260c:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <ParticlesManager+0x2bc>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <ParticlesManager+0x2bc>)
 8002616:	801a      	strh	r2, [r3, #0]
		break;
 8002618:	e14d      	b.n	80028b6 <ParticlesManager+0x4a2>
	case Validate_data:
		rx_checksum = RX_BUFFER[1];
 800261a:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <ParticlesManager+0x2c4>)
 800261c:	785b      	ldrb	r3, [r3, #1]
 800261e:	b29a      	uxth	r2, r3
 8002620:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <ParticlesManager+0x2cc>)
 8002622:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 2;i <= rx_payload_size+1;i++)
 8002624:	2302      	movs	r3, #2
 8002626:	72bb      	strb	r3, [r7, #10]
 8002628:	e00c      	b.n	8002644 <ParticlesManager+0x230>
		{
			rx_checksum += RX_BUFFER[i];
 800262a:	7abb      	ldrb	r3, [r7, #10]
 800262c:	4a2a      	ldr	r2, [pc, #168]	; (80026d8 <ParticlesManager+0x2c4>)
 800262e:	5cd3      	ldrb	r3, [r2, r3]
 8002630:	b29a      	uxth	r2, r3
 8002632:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <ParticlesManager+0x2cc>)
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	4413      	add	r3, r2
 8002638:	b29a      	uxth	r2, r3
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <ParticlesManager+0x2cc>)
 800263c:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 2;i <= rx_payload_size+1;i++)
 800263e:	7abb      	ldrb	r3, [r7, #10]
 8002640:	3301      	adds	r3, #1
 8002642:	72bb      	strb	r3, [r7, #10]
 8002644:	7aba      	ldrb	r2, [r7, #10]
 8002646:	4b25      	ldr	r3, [pc, #148]	; (80026dc <ParticlesManager+0x2c8>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	429a      	cmp	r2, r3
 800264e:	ddec      	ble.n	800262a <ParticlesManager+0x216>
		}

		if(rx_checksum == ((uint16_t)(RX_BUFFER[rx_payload_size+2] << 8) + (uint16_t)RX_BUFFER[rx_payload_size+3]))
 8002650:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <ParticlesManager+0x2cc>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <ParticlesManager+0x2c8>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	3302      	adds	r3, #2
 800265c:	4a1e      	ldr	r2, [pc, #120]	; (80026d8 <ParticlesManager+0x2c4>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	b29b      	uxth	r3, r3
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	b29b      	uxth	r3, r3
 8002666:	4618      	mov	r0, r3
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <ParticlesManager+0x2c8>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	3303      	adds	r3, #3
 800266e:	4a1a      	ldr	r2, [pc, #104]	; (80026d8 <ParticlesManager+0x2c4>)
 8002670:	5cd3      	ldrb	r3, [r2, r3]
 8002672:	4403      	add	r3, r0
 8002674:	4299      	cmp	r1, r3
 8002676:	d10c      	bne.n	8002692 <ParticlesManager+0x27e>
		{
			particleBoardAbsent = false;
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <ParticlesManager+0x2d0>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
			request_interval = TIME_TO_WAIT_IF_OK;
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <ParticlesManager+0x298>)
 8002680:	2202      	movs	r2, #2
 8002682:	701a      	strb	r2, [r3, #0]
			uartErrorCount = 0;
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <ParticlesManager+0x2bc>)
 8002686:	2200      	movs	r2, #0
 8002688:	801a      	strh	r2, [r3, #0]
			nextState = Data_ready;
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <ParticlesManager+0x2b8>)
 800268c:	2204      	movs	r2, #4
 800268e:	701a      	strb	r2, [r3, #0]
			{
				nextState = Idle;
			}
			uartErrorCount++;
		}
		break;
 8002690:	e112      	b.n	80028b8 <ParticlesManager+0x4a4>
			if(uartErrorCount <= COMM_ERR_LIMIT)
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <ParticlesManager+0x2bc>)
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	2b0a      	cmp	r3, #10
 8002698:	d826      	bhi.n	80026e8 <ParticlesManager+0x2d4>
				nextState = Send_request;
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <ParticlesManager+0x2b8>)
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	e025      	b.n	80026ee <ParticlesManager+0x2da>
 80026a2:	bf00      	nop
 80026a4:	20000c30 	.word	0x20000c30
 80026a8:	20000cb4 	.word	0x20000cb4
 80026ac:	2000013c 	.word	0x2000013c
 80026b0:	20000cb1 	.word	0x20000cb1
 80026b4:	20000c74 	.word	0x20000c74
 80026b8:	20000cb8 	.word	0x20000cb8
 80026bc:	20000cba 	.word	0x20000cba
 80026c0:	20000140 	.word	0x20000140
 80026c4:	20000cb3 	.word	0x20000cb3
 80026c8:	20000cb2 	.word	0x20000cb2
 80026cc:	20000c31 	.word	0x20000c31
 80026d0:	20000cbc 	.word	0x20000cbc
 80026d4:	20003634 	.word	0x20003634
 80026d8:	20000c34 	.word	0x20000c34
 80026dc:	20000cbe 	.word	0x20000cbe
 80026e0:	20000cc0 	.word	0x20000cc0
 80026e4:	20000cb0 	.word	0x20000cb0
				nextState = Idle;
 80026e8:	4b7a      	ldr	r3, [pc, #488]	; (80028d4 <ParticlesManager+0x4c0>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
			uartErrorCount++;
 80026ee:	4b7a      	ldr	r3, [pc, #488]	; (80028d8 <ParticlesManager+0x4c4>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	4b78      	ldr	r3, [pc, #480]	; (80028d8 <ParticlesManager+0x4c4>)
 80026f8:	801a      	strh	r2, [r3, #0]
		break;
 80026fa:	e0dd      	b.n	80028b8 <ParticlesManager+0x4a4>
	case Data_ready:
		nextState = Idle;
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <ParticlesManager+0x4c0>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
		if((RX_BUFFER[1] & 0xC0) == READ_CMD)
 8002702:	4b76      	ldr	r3, [pc, #472]	; (80028dc <ParticlesManager+0x4c8>)
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 809b 	bne.w	8002846 <ParticlesManager+0x432>
		{
			ParticleDevice.ch0_ON = (uint16_t)(RX_BUFFER[2] << 8) + (uint16_t)RX_BUFFER[3];
 8002710:	4b72      	ldr	r3, [pc, #456]	; (80028dc <ParticlesManager+0x4c8>)
 8002712:	789b      	ldrb	r3, [r3, #2]
 8002714:	b29b      	uxth	r3, r3
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	b29a      	uxth	r2, r3
 800271a:	4b70      	ldr	r3, [pc, #448]	; (80028dc <ParticlesManager+0x4c8>)
 800271c:	78db      	ldrb	r3, [r3, #3]
 800271e:	b29b      	uxth	r3, r3
 8002720:	4413      	add	r3, r2
 8002722:	b29a      	uxth	r2, r3
 8002724:	4b6e      	ldr	r3, [pc, #440]	; (80028e0 <ParticlesManager+0x4cc>)
 8002726:	801a      	strh	r2, [r3, #0]
			ParticleDevice.ch0_OFF = (uint16_t)(RX_BUFFER[4] << 8) + (uint16_t)RX_BUFFER[5];
 8002728:	4b6c      	ldr	r3, [pc, #432]	; (80028dc <ParticlesManager+0x4c8>)
 800272a:	791b      	ldrb	r3, [r3, #4]
 800272c:	b29b      	uxth	r3, r3
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	b29a      	uxth	r2, r3
 8002732:	4b6a      	ldr	r3, [pc, #424]	; (80028dc <ParticlesManager+0x4c8>)
 8002734:	795b      	ldrb	r3, [r3, #5]
 8002736:	b29b      	uxth	r3, r3
 8002738:	4413      	add	r3, r2
 800273a:	b29a      	uxth	r2, r3
 800273c:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <ParticlesManager+0x4cc>)
 800273e:	805a      	strh	r2, [r3, #2]
			ParticleDevice.ch1_ON = (uint16_t)(RX_BUFFER[6] << 8) + (uint16_t)RX_BUFFER[7];
 8002740:	4b66      	ldr	r3, [pc, #408]	; (80028dc <ParticlesManager+0x4c8>)
 8002742:	799b      	ldrb	r3, [r3, #6]
 8002744:	b29b      	uxth	r3, r3
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	b29a      	uxth	r2, r3
 800274a:	4b64      	ldr	r3, [pc, #400]	; (80028dc <ParticlesManager+0x4c8>)
 800274c:	79db      	ldrb	r3, [r3, #7]
 800274e:	b29b      	uxth	r3, r3
 8002750:	4413      	add	r3, r2
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b62      	ldr	r3, [pc, #392]	; (80028e0 <ParticlesManager+0x4cc>)
 8002756:	809a      	strh	r2, [r3, #4]
			ParticleDevice.ch1_OFF = (uint16_t)(RX_BUFFER[8] << 8) + (uint16_t)RX_BUFFER[9];
 8002758:	4b60      	ldr	r3, [pc, #384]	; (80028dc <ParticlesManager+0x4c8>)
 800275a:	7a1b      	ldrb	r3, [r3, #8]
 800275c:	b29b      	uxth	r3, r3
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	b29a      	uxth	r2, r3
 8002762:	4b5e      	ldr	r3, [pc, #376]	; (80028dc <ParticlesManager+0x4c8>)
 8002764:	7a5b      	ldrb	r3, [r3, #9]
 8002766:	b29b      	uxth	r3, r3
 8002768:	4413      	add	r3, r2
 800276a:	b29a      	uxth	r2, r3
 800276c:	4b5c      	ldr	r3, [pc, #368]	; (80028e0 <ParticlesManager+0x4cc>)
 800276e:	80da      	strh	r2, [r3, #6]
			ParticleDevice.variance = (uint16_t)(RX_BUFFER[10] << 8) + (uint16_t)RX_BUFFER[11];
 8002770:	4b5a      	ldr	r3, [pc, #360]	; (80028dc <ParticlesManager+0x4c8>)
 8002772:	7a9b      	ldrb	r3, [r3, #10]
 8002774:	b29b      	uxth	r3, r3
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	b29a      	uxth	r2, r3
 800277a:	4b58      	ldr	r3, [pc, #352]	; (80028dc <ParticlesManager+0x4c8>)
 800277c:	7adb      	ldrb	r3, [r3, #11]
 800277e:	b29b      	uxth	r3, r3
 8002780:	4413      	add	r3, r2
 8002782:	b29a      	uxth	r2, r3
 8002784:	4b56      	ldr	r3, [pc, #344]	; (80028e0 <ParticlesManager+0x4cc>)
 8002786:	815a      	strh	r2, [r3, #10]
			ParticleDevice.temperature = (uint16_t)(RX_BUFFER[12] << 8) + (uint16_t)RX_BUFFER[13];
 8002788:	4b54      	ldr	r3, [pc, #336]	; (80028dc <ParticlesManager+0x4c8>)
 800278a:	7b1b      	ldrb	r3, [r3, #12]
 800278c:	b29b      	uxth	r3, r3
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	b29a      	uxth	r2, r3
 8002792:	4b52      	ldr	r3, [pc, #328]	; (80028dc <ParticlesManager+0x4c8>)
 8002794:	7b5b      	ldrb	r3, [r3, #13]
 8002796:	b29b      	uxth	r3, r3
 8002798:	4413      	add	r3, r2
 800279a:	b29a      	uxth	r2, r3
 800279c:	4b50      	ldr	r3, [pc, #320]	; (80028e0 <ParticlesManager+0x4cc>)
 800279e:	819a      	strh	r2, [r3, #12]
			ParticleDevice.LED_current_meas = (uint16_t)(RX_BUFFER[14] << 8) + (uint16_t)RX_BUFFER[15];
 80027a0:	4b4e      	ldr	r3, [pc, #312]	; (80028dc <ParticlesManager+0x4c8>)
 80027a2:	7b9b      	ldrb	r3, [r3, #14]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	4b4c      	ldr	r3, [pc, #304]	; (80028dc <ParticlesManager+0x4c8>)
 80027ac:	7bdb      	ldrb	r3, [r3, #15]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <ParticlesManager+0x4cc>)
 80027b6:	831a      	strh	r2, [r3, #24]

			if(RX_BUFFER[16] & 0x80)
 80027b8:	4b48      	ldr	r3, [pc, #288]	; (80028dc <ParticlesManager+0x4c8>)
 80027ba:	7c1b      	ldrb	r3, [r3, #16]
 80027bc:	b25b      	sxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	da09      	bge.n	80027d6 <ParticlesManager+0x3c2>
			{
				RX_BUFFER[16] &= 0x7F;
 80027c2:	4b46      	ldr	r3, [pc, #280]	; (80028dc <ParticlesManager+0x4c8>)
 80027c4:	7c1b      	ldrb	r3, [r3, #16]
 80027c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	4b43      	ldr	r3, [pc, #268]	; (80028dc <ParticlesManager+0x4c8>)
 80027ce:	741a      	strb	r2, [r3, #16]
				slp_sign = -1;
 80027d0:	f04f 33ff 	mov.w	r3, #4294967295
 80027d4:	60fb      	str	r3, [r7, #12]
			}
			ParticleDevice.slope = slp_sign*((int)(RX_BUFFER[16] << 8) + (int)RX_BUFFER[17]);
 80027d6:	4b41      	ldr	r3, [pc, #260]	; (80028dc <ParticlesManager+0x4c8>)
 80027d8:	7c1b      	ldrb	r3, [r3, #16]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	4a3f      	ldr	r2, [pc, #252]	; (80028dc <ParticlesManager+0x4c8>)
 80027de:	7c52      	ldrb	r2, [r2, #17]
 80027e0:	4413      	add	r3, r2
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	4a3d      	ldr	r2, [pc, #244]	; (80028e0 <ParticlesManager+0x4cc>)
 80027ea:	6153      	str	r3, [r2, #20]
			ParticleDevice.Lux_ON = (uint16_t)(RX_BUFFER[18] << 8) + (uint16_t)RX_BUFFER[19];
 80027ec:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <ParticlesManager+0x4c8>)
 80027ee:	7c9b      	ldrb	r3, [r3, #18]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	4b39      	ldr	r3, [pc, #228]	; (80028dc <ParticlesManager+0x4c8>)
 80027f8:	7cdb      	ldrb	r3, [r3, #19]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	b29a      	uxth	r2, r3
 8002800:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <ParticlesManager+0x4cc>)
 8002802:	835a      	strh	r2, [r3, #26]
			ParticleDevice.Lux_OFF = (uint16_t)(RX_BUFFER[20] << 8) + (uint16_t)RX_BUFFER[21];
 8002804:	4b35      	ldr	r3, [pc, #212]	; (80028dc <ParticlesManager+0x4c8>)
 8002806:	7d1b      	ldrb	r3, [r3, #20]
 8002808:	b29b      	uxth	r3, r3
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	b29a      	uxth	r2, r3
 800280e:	4b33      	ldr	r3, [pc, #204]	; (80028dc <ParticlesManager+0x4c8>)
 8002810:	7d5b      	ldrb	r3, [r3, #21]
 8002812:	b29b      	uxth	r3, r3
 8002814:	4413      	add	r3, r2
 8002816:	b29a      	uxth	r2, r3
 8002818:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <ParticlesManager+0x4cc>)
 800281a:	839a      	strh	r2, [r3, #28]
			ParticleDevice.TimeSinceInit = (uint32_t)(RX_BUFFER[22] << 24) + (uint32_t)(RX_BUFFER[23] << 16) + (uint32_t)(RX_BUFFER[24] << 8) + (uint32_t)(RX_BUFFER[25]);
 800281c:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <ParticlesManager+0x4c8>)
 800281e:	7d9b      	ldrb	r3, [r3, #22]
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	461a      	mov	r2, r3
 8002824:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <ParticlesManager+0x4c8>)
 8002826:	7ddb      	ldrb	r3, [r3, #23]
 8002828:	041b      	lsls	r3, r3, #16
 800282a:	4413      	add	r3, r2
 800282c:	4a2b      	ldr	r2, [pc, #172]	; (80028dc <ParticlesManager+0x4c8>)
 800282e:	7e12      	ldrb	r2, [r2, #24]
 8002830:	0212      	lsls	r2, r2, #8
 8002832:	4413      	add	r3, r2
 8002834:	4a29      	ldr	r2, [pc, #164]	; (80028dc <ParticlesManager+0x4c8>)
 8002836:	7e52      	ldrb	r2, [r2, #25]
 8002838:	4413      	add	r3, r2
 800283a:	4a29      	ldr	r2, [pc, #164]	; (80028e0 <ParticlesManager+0x4cc>)
 800283c:	6213      	str	r3, [r2, #32]

			config_mode = true; //GC 2023-07-19 Debug comm
 800283e:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <ParticlesManager+0x4d0>)
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
			{
				nextState = Idle;
			}
			uartErrorCount++;
		}
		break;
 8002844:	e038      	b.n	80028b8 <ParticlesManager+0x4a4>
		}else if((RX_BUFFER[1] & 0xC0) == WRITE_CMD)
 8002846:	4b25      	ldr	r3, [pc, #148]	; (80028dc <ParticlesManager+0x4c8>)
 8002848:	785b      	ldrb	r3, [r3, #1]
 800284a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800284e:	2bc0      	cmp	r3, #192	; 0xc0
 8002850:	d103      	bne.n	800285a <ParticlesManager+0x446>
			config_mode = false; //GC 2023-07-19 debug
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <ParticlesManager+0x4d0>)
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
		break;
 8002858:	e02e      	b.n	80028b8 <ParticlesManager+0x4a4>
		}else if((RX_BUFFER[1] & 0xC0) == SETZERO_CMD)
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <ParticlesManager+0x4c8>)
 800285c:	785b      	ldrb	r3, [r3, #1]
 800285e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d113      	bne.n	800288e <ParticlesManager+0x47a>
			setZero = false;
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <ParticlesManager+0x4d4>)
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
			ParticleDevice.zero = (uint16_t)(RX_BUFFER[4] << 8) + (uint16_t)RX_BUFFER[5];
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <ParticlesManager+0x4c8>)
 800286e:	791b      	ldrb	r3, [r3, #4]
 8002870:	b29b      	uxth	r3, r3
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	b29a      	uxth	r2, r3
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <ParticlesManager+0x4c8>)
 8002878:	795b      	ldrb	r3, [r3, #5]
 800287a:	b29b      	uxth	r3, r3
 800287c:	4413      	add	r3, r2
 800287e:	b29a      	uxth	r2, r3
 8002880:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <ParticlesManager+0x4cc>)
 8002882:	81da      	strh	r2, [r3, #14]
			zero_current = RX_BUFFER[7];
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <ParticlesManager+0x4c8>)
 8002886:	79da      	ldrb	r2, [r3, #7]
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <ParticlesManager+0x4d8>)
 800288a:	701a      	strb	r2, [r3, #0]
		break;
 800288c:	e014      	b.n	80028b8 <ParticlesManager+0x4a4>
			if(uartErrorCount <= COMM_ERR_LIMIT)
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <ParticlesManager+0x4c4>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	2b0a      	cmp	r3, #10
 8002894:	d803      	bhi.n	800289e <ParticlesManager+0x48a>
				nextState = Send_request;
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <ParticlesManager+0x4c0>)
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e002      	b.n	80028a4 <ParticlesManager+0x490>
				nextState = Idle;
 800289e:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <ParticlesManager+0x4c0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
			uartErrorCount++;
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <ParticlesManager+0x4c4>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	3301      	adds	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <ParticlesManager+0x4c4>)
 80028ae:	801a      	strh	r2, [r3, #0]
		break;
 80028b0:	e002      	b.n	80028b8 <ParticlesManager+0x4a4>
		break;
 80028b2:	bf00      	nop
 80028b4:	e000      	b.n	80028b8 <ParticlesManager+0x4a4>
		break;
 80028b6:	bf00      	nop
	}
	if(nextState != currentState)
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <ParticlesManager+0x4c0>)
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <ParticlesManager+0x4dc>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d003      	beq.n	80028cc <ParticlesManager+0x4b8>
	{
		currentState = nextState;
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <ParticlesManager+0x4c0>)
 80028c6:	781a      	ldrb	r2, [r3, #0]
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <ParticlesManager+0x4dc>)
 80028ca:	701a      	strb	r2, [r3, #0]
	}

}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000c31 	.word	0x20000c31
 80028d8:	20000cbc 	.word	0x20000cbc
 80028dc:	20000c34 	.word	0x20000c34
 80028e0:	20000c88 	.word	0x20000c88
 80028e4:	20000cb1 	.word	0x20000cb1
 80028e8:	20000cb2 	.word	0x20000cb2
 80028ec:	20000cc2 	.word	0x20000cc2
 80028f0:	20000c30 	.word	0x20000c30

080028f4 <Particle_Send_CMD>:
{
	IncFireCount = true;
}

uint16_t Particle_Send_CMD(uint8_t cmd)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
	static uint16_t tx_checksum;

	TX_BUFFER[0] = START_BYTE;
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <Particle_Send_CMD+0x4c>)
 8002900:	22cc      	movs	r2, #204	; 0xcc
 8002902:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = cmd;
 8002904:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <Particle_Send_CMD+0x4c>)
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	7053      	strb	r3, [r2, #1]
	tx_checksum = cmd;
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	b29a      	uxth	r2, r3
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <Particle_Send_CMD+0x50>)
 8002910:	801a      	strh	r2, [r3, #0]
	TX_BUFFER[2] = (uint8_t)(tx_checksum >> 8);
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <Particle_Send_CMD+0x50>)
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	0a1b      	lsrs	r3, r3, #8
 8002918:	b29b      	uxth	r3, r3
 800291a:	b2da      	uxtb	r2, r3
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <Particle_Send_CMD+0x4c>)
 800291e:	709a      	strb	r2, [r3, #2]
	TX_BUFFER[3] = (uint8_t)(tx_checksum & 0x00FF);
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <Particle_Send_CMD+0x50>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <Particle_Send_CMD+0x4c>)
 8002928:	70da      	strb	r2, [r3, #3]
	TX_BUFFER[4] = STOP_BYTE;
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <Particle_Send_CMD+0x4c>)
 800292c:	2299      	movs	r2, #153	; 0x99
 800292e:	711a      	strb	r2, [r3, #4]

	return tx_checksum;
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <Particle_Send_CMD+0x50>)
 8002932:	881b      	ldrh	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20000c74 	.word	0x20000c74
 8002944:	20000cc4 	.word	0x20000cc4

08002948 <Temperature_Init>:
float uVtoDegreeCTypeK(float uVdata,float Tref);
float VtoDegreeCRtd(float Vdata);


void Temperature_Init(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
	currentState = Sending_config;
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <Temperature_Init+0x48>)
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
	nextState = Sending_config;
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <Temperature_Init+0x4c>)
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
	b_tx_pending = false;
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <Temperature_Init+0x50>)
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 800295e:	4b0f      	ldr	r3, [pc, #60]	; (800299c <Temperature_Init+0x54>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 8002964:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <Temperature_Init+0x58>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <Temperature_Init+0x5c>)
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
	Tobj.ADCConfigByte[0] = 0x9F;
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <Temperature_Init+0x60>)
 8002972:	229f      	movs	r2, #159	; 0x9f
 8002974:	741a      	strb	r2, [r3, #16]
	Tobj.ADCConfigByte[1] = 0xBF;
 8002976:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <Temperature_Init+0x60>)
 8002978:	22bf      	movs	r2, #191	; 0xbf
 800297a:	745a      	strb	r2, [r3, #17]
	Tobj.ADCConfigByte[2] = 0xDC;
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <Temperature_Init+0x60>)
 800297e:	22dc      	movs	r2, #220	; 0xdc
 8002980:	749a      	strb	r2, [r3, #18]
	Tobj.ADCConfigByte[3] = 0xFC;
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <Temperature_Init+0x60>)
 8002984:	22fc      	movs	r2, #252	; 0xfc
 8002986:	74da      	strb	r2, [r3, #19]
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	20000cca 	.word	0x20000cca
 8002994:	20000ccb 	.word	0x20000ccb
 8002998:	20000cc6 	.word	0x20000cc6
 800299c:	20000cc7 	.word	0x20000cc7
 80029a0:	20000cc8 	.word	0x20000cc8
 80029a4:	20000cc9 	.word	0x20000cc9
 80029a8:	20000ccc 	.word	0x20000ccc
 80029ac:	00000000 	.word	0x00000000

080029b0 <TemperatureManager>:



void TemperatureManager(Mobj* stove, uint32_t u32time_ms)
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
	static int8_t ch_idx = NUMBER_OF_ADC_CH - 1;
	static uint8_t adcData[4];
	static uint32_t u32conf_time;
	int32_t i32tempReading=0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
	float ftempReading = 0.0;
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
	float flastReading = 0.0;
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
	const float slope_filter_weight = 0.1;
 80029ca:	4b85      	ldr	r3, [pc, #532]	; (8002be0 <TemperatureManager+0x230>)
 80029cc:	60bb      	str	r3, [r7, #8]

	switch(currentState)
 80029ce:	4b85      	ldr	r3, [pc, #532]	; (8002be4 <TemperatureManager+0x234>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	f200 820a 	bhi.w	8002dec <TemperatureManager+0x43c>
 80029d8:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <TemperatureManager+0x30>)
 80029da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029de:	bf00      	nop
 80029e0:	080029f1 	.word	0x080029f1
 80029e4:	08002a3b 	.word	0x08002a3b
 80029e8:	08002a53 	.word	0x08002a53
 80029ec:	08002a9f 	.word	0x08002a9f
	{
	case Sending_config:
		if(b_tx_success)
 80029f0:	4b7d      	ldr	r3, [pc, #500]	; (8002be8 <TemperatureManager+0x238>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d009      	beq.n	8002a0c <TemperatureManager+0x5c>
		{
			b_tx_success = false;
 80029f8:	4b7b      	ldr	r3, [pc, #492]	; (8002be8 <TemperatureManager+0x238>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
			nextState = Wait_for_data_rdy;
 80029fe:	4b7b      	ldr	r3, [pc, #492]	; (8002bec <TemperatureManager+0x23c>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
			u32conf_time = u32time_ms;
 8002a04:	4a7a      	ldr	r2, [pc, #488]	; (8002bf0 <TemperatureManager+0x240>)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6013      	str	r3, [r2, #0]
		else if(!b_tx_pending)
		{
			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&Tobj.ADCConfigByte[ch_idx],1);
			b_tx_pending = true;
		}
		break;
 8002a0a:	e1e8      	b.n	8002dde <TemperatureManager+0x42e>
		else if(!b_tx_pending)
 8002a0c:	4b79      	ldr	r3, [pc, #484]	; (8002bf4 <TemperatureManager+0x244>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	f083 0301 	eor.w	r3, r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 81e1 	beq.w	8002dde <TemperatureManager+0x42e>
			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&Tobj.ADCConfigByte[ch_idx],1);
 8002a1c:	4b76      	ldr	r3, [pc, #472]	; (8002bf8 <TemperatureManager+0x248>)
 8002a1e:	f993 3000 	ldrsb.w	r3, [r3]
 8002a22:	3310      	adds	r3, #16
 8002a24:	4a75      	ldr	r2, [pc, #468]	; (8002bfc <TemperatureManager+0x24c>)
 8002a26:	441a      	add	r2, r3
 8002a28:	2301      	movs	r3, #1
 8002a2a:	21d0      	movs	r1, #208	; 0xd0
 8002a2c:	4874      	ldr	r0, [pc, #464]	; (8002c00 <TemperatureManager+0x250>)
 8002a2e:	f003 f853 	bl	8005ad8 <HAL_I2C_Master_Transmit_IT>
			b_tx_pending = true;
 8002a32:	4b70      	ldr	r3, [pc, #448]	; (8002bf4 <TemperatureManager+0x244>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
		break;
 8002a38:	e1d1      	b.n	8002dde <TemperatureManager+0x42e>
	case Wait_for_data_rdy:
		if(u32time_ms - u32conf_time > 300) //Conversion time around 266 ms
 8002a3a:	4b6d      	ldr	r3, [pc, #436]	; (8002bf0 <TemperatureManager+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002a46:	f240 81cc 	bls.w	8002de2 <TemperatureManager+0x432>
		{
			nextState = Send_read_req;
 8002a4a:	4b68      	ldr	r3, [pc, #416]	; (8002bec <TemperatureManager+0x23c>)
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002a50:	e1c7      	b.n	8002de2 <TemperatureManager+0x432>
	case Send_read_req:

		if(b_rx_success)
 8002a52:	4b6c      	ldr	r3, [pc, #432]	; (8002c04 <TemperatureManager+0x254>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00f      	beq.n	8002a7a <TemperatureManager+0xca>
		{
			b_rx_success = false;
 8002a5a:	4b6a      	ldr	r3, [pc, #424]	; (8002c04 <TemperatureManager+0x254>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
			if(IsDataNew(adcData[3]))
 8002a60:	4b69      	ldr	r3, [pc, #420]	; (8002c08 <TemperatureManager+0x258>)
 8002a62:	78db      	ldrb	r3, [r3, #3]
 8002a64:	b25b      	sxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f2c0 81bd 	blt.w	8002de6 <TemperatureManager+0x436>
			{
				adcData[3] = 0;
 8002a6c:	4b66      	ldr	r3, [pc, #408]	; (8002c08 <TemperatureManager+0x258>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	70da      	strb	r2, [r3, #3]
				nextState = Response_received;
 8002a72:	4b5e      	ldr	r3, [pc, #376]	; (8002bec <TemperatureManager+0x23c>)
 8002a74:	2203      	movs	r2, #3
 8002a76:	701a      	strb	r2, [r3, #0]
		{
			HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
			b_rx_pending = true;
		}

		break;
 8002a78:	e1b5      	b.n	8002de6 <TemperatureManager+0x436>
		else if(!b_rx_pending)
 8002a7a:	4b64      	ldr	r3, [pc, #400]	; (8002c0c <TemperatureManager+0x25c>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	f083 0301 	eor.w	r3, r3, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 81ae 	beq.w	8002de6 <TemperatureManager+0x436>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	4a5e      	ldr	r2, [pc, #376]	; (8002c08 <TemperatureManager+0x258>)
 8002a8e:	21d0      	movs	r1, #208	; 0xd0
 8002a90:	485b      	ldr	r0, [pc, #364]	; (8002c00 <TemperatureManager+0x250>)
 8002a92:	f003 f8c5 	bl	8005c20 <HAL_I2C_Master_Receive_IT>
			b_rx_pending = true;
 8002a96:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <TemperatureManager+0x25c>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
		break;
 8002a9c:	e1a3      	b.n	8002de6 <TemperatureManager+0x436>
	case Response_received:
		i32tempReading = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
		i32tempReading = (adcData[0] << 30) + (adcData[1] << 22)  + (adcData[2] << 14); // justify the result for 32bit storage
 8002aa2:	4b59      	ldr	r3, [pc, #356]	; (8002c08 <TemperatureManager+0x258>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	079a      	lsls	r2, r3, #30
 8002aa8:	4b57      	ldr	r3, [pc, #348]	; (8002c08 <TemperatureManager+0x258>)
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	059b      	lsls	r3, r3, #22
 8002aae:	441a      	add	r2, r3
 8002ab0:	4b55      	ldr	r3, [pc, #340]	; (8002c08 <TemperatureManager+0x258>)
 8002ab2:	789b      	ldrb	r3, [r3, #2]
 8002ab4:	039b      	lsls	r3, r3, #14
 8002ab6:	4413      	add	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]
		if (i32tempReading < 0)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	da02      	bge.n	8002ac6 <TemperatureManager+0x116>
		{
			i32tempReading = -i32tempReading;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	425b      	negs	r3, r3
 8002ac4:	617b      	str	r3, [r7, #20]
		}
		i32tempReading = (i32tempReading) >> 14;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	139b      	asrs	r3, r3, #14
 8002aca:	617b      	str	r3, [r7, #20]

		switch(ch_idx)
 8002acc:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <TemperatureManager+0x248>)
 8002ace:	f993 3000 	ldrsb.w	r3, [r3]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	f200 8170 	bhi.w	8002db8 <TemperatureManager+0x408>
 8002ad8:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <TemperatureManager+0x130>)
 8002ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ade:	bf00      	nop
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002c25 	.word	0x08002c25
 8002ae8:	08002d13 	.word	0x08002d13
 8002aec:	08002d63 	.word	0x08002d63
		{
			case BaffleThermocouple:
				ftempReading = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 8002af0:	6978      	ldr	r0, [r7, #20]
 8002af2:	f7fe f94d 	bl	8000d90 <__aeabi_i2f>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fd0f 	bl	800051c <__aeabi_f2d>
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <TemperatureManager+0x260>)
 8002b04:	f7fd fd62 	bl	80005cc <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <TemperatureManager+0x264>)
 8002b16:	f7fd fe83 	bl	8000820 <__aeabi_ddiv>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f7fe f82b 	bl	8000b7c <__aeabi_d2f>
 8002b26:	4603      	mov	r3, r0
 8002b28:	613b      	str	r3, [r7, #16]
				flastReading = stove->fBaffleTemp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	60fb      	str	r3, [r7, #12]
				stove->fBaffleTemp = CELSIUS_TO_FAHRENHEIT(uVtoDegreeCTypeK(ftempReading, Tobj.fTcoldJunct)); //6.7//26.1 //board is self heating to 7.3 above ambient
 8002b30:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <TemperatureManager+0x24c>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4619      	mov	r1, r3
 8002b36:	6938      	ldr	r0, [r7, #16]
 8002b38:	f000 f9ea 	bl	8002f10 <uVtoDegreeCTypeK>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4936      	ldr	r1, [pc, #216]	; (8002c18 <TemperatureManager+0x268>)
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe f979 	bl	8000e38 <__aeabi_fmul>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4934      	ldr	r1, [pc, #208]	; (8002c1c <TemperatureManager+0x26c>)
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fa28 	bl	8000fa0 <__aeabi_fdiv>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe f866 	bl	8000c28 <__addsf3>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	60da      	str	r2, [r3, #12]

				if(Tobj.u32LastTimeBaffle !=0)
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <TemperatureManager+0x24c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d034      	beq.n	8002bd6 <TemperatureManager+0x226>
				{
					stove->fBaffleDeltaT =  slope_filter_weight*stove->fBaffleDeltaT +
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe f960 	bl	8000e38 <__aeabi_fmul>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461c      	mov	r4, r3
							(1-slope_filter_weight)*(stove->fBaffleTemp-flastReading)/((u32time_ms-Tobj.u32LastTimeBaffle)/1000);
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002b82:	f7fe f84f 	bl	8000c24 <__aeabi_fsub>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461d      	mov	r5, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	68f9      	ldr	r1, [r7, #12]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe f847 	bl	8000c24 <__aeabi_fsub>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f7fe f94c 	bl	8000e38 <__aeabi_fmul>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	461d      	mov	r5, r3
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <TemperatureManager+0x24c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <TemperatureManager+0x270>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe f8e7 	bl	8000d88 <__aeabi_ui2f>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4628      	mov	r0, r5
 8002bc0:	f7fe f9ee 	bl	8000fa0 <__aeabi_fdiv>
 8002bc4:	4603      	mov	r3, r0
					stove->fBaffleDeltaT =  slope_filter_weight*stove->fBaffleDeltaT +
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7fe f82d 	bl	8000c28 <__addsf3>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	619a      	str	r2, [r3, #24]
				}

				Tobj.u32LastTimeBaffle = u32time_ms;
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <TemperatureManager+0x24c>)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6013      	str	r3, [r2, #0]

				break;
 8002bdc:	e0ed      	b.n	8002dba <TemperatureManager+0x40a>
 8002bde:	bf00      	nop
 8002be0:	3dcccccd 	.word	0x3dcccccd
 8002be4:	20000cca 	.word	0x20000cca
 8002be8:	20000cc7 	.word	0x20000cc7
 8002bec:	20000ccb 	.word	0x20000ccb
 8002bf0:	20000ce0 	.word	0x20000ce0
 8002bf4:	20000cc6 	.word	0x20000cc6
 8002bf8:	20000144 	.word	0x20000144
 8002bfc:	20000ccc 	.word	0x20000ccc
 8002c00:	200036a8 	.word	0x200036a8
 8002c04:	20000cc9 	.word	0x20000cc9
 8002c08:	20000ce4 	.word	0x20000ce4
 8002c0c:	20000cc8 	.word	0x20000cc8
 8002c10:	402f4000 	.word	0x402f4000
 8002c14:	40200000 	.word	0x40200000
 8002c18:	41100000 	.word	0x41100000
 8002c1c:	40a00000 	.word	0x40a00000
 8002c20:	10624dd3 	.word	0x10624dd3
			case ChamberThermocouple:
				ftempReading = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 8002c24:	6978      	ldr	r0, [r7, #20]
 8002c26:	f7fe f8b3 	bl	8000d90 <__aeabi_i2f>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fc75 	bl	800051c <__aeabi_f2d>
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	4b78      	ldr	r3, [pc, #480]	; (8002e18 <TemperatureManager+0x468>)
 8002c38:	f7fd fcc8 	bl	80005cc <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	4b74      	ldr	r3, [pc, #464]	; (8002e1c <TemperatureManager+0x46c>)
 8002c4a:	f7fd fde9 	bl	8000820 <__aeabi_ddiv>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7fd ff91 	bl	8000b7c <__aeabi_d2f>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	613b      	str	r3, [r7, #16]
				flastReading = stove->fChamberTemp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	60fb      	str	r3, [r7, #12]
				stove->fChamberTemp = CELSIUS_TO_FAHRENHEIT(uVtoDegreeCTypeK(ftempReading, Tobj.fTcoldJunct)); //6.7//26.1 //board is self heating to 7.3 above ambient
 8002c64:	4b6e      	ldr	r3, [pc, #440]	; (8002e20 <TemperatureManager+0x470>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	6938      	ldr	r0, [r7, #16]
 8002c6c:	f000 f950 	bl	8002f10 <uVtoDegreeCTypeK>
 8002c70:	4603      	mov	r3, r0
 8002c72:	496c      	ldr	r1, [pc, #432]	; (8002e24 <TemperatureManager+0x474>)
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe f8df 	bl	8000e38 <__aeabi_fmul>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	496a      	ldr	r1, [pc, #424]	; (8002e28 <TemperatureManager+0x478>)
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe f98e 	bl	8000fa0 <__aeabi_fdiv>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd ffcc 	bl	8000c28 <__addsf3>
 8002c90:	4603      	mov	r3, r0
 8002c92:	461a      	mov	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	611a      	str	r2, [r3, #16]

				if(Tobj.u32LastTimeChamber !=0)
 8002c98:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <TemperatureManager+0x470>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d034      	beq.n	8002d0a <TemperatureManager+0x35a>
				{
					stove->fChamberDeltaT =  slope_filter_weight*stove->fChamberDeltaT +
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe f8c6 	bl	8000e38 <__aeabi_fmul>
 8002cac:	4603      	mov	r3, r0
 8002cae:	461c      	mov	r4, r3
											(1-slope_filter_weight)*(stove->fChamberTemp-flastReading)/((u32time_ms-Tobj.u32LastTimeChamber)/1000);
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002cb6:	f7fd ffb5 	bl	8000c24 <__aeabi_fsub>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461d      	mov	r5, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	68f9      	ldr	r1, [r7, #12]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd ffad 	bl	8000c24 <__aeabi_fsub>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4628      	mov	r0, r5
 8002cd0:	f7fe f8b2 	bl	8000e38 <__aeabi_fmul>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461d      	mov	r5, r3
 8002cd8:	4b51      	ldr	r3, [pc, #324]	; (8002e20 <TemperatureManager+0x470>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	4a52      	ldr	r2, [pc, #328]	; (8002e2c <TemperatureManager+0x47c>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe f84d 	bl	8000d88 <__aeabi_ui2f>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	f7fe f954 	bl	8000fa0 <__aeabi_fdiv>
 8002cf8:	4603      	mov	r3, r0
					stove->fChamberDeltaT =  slope_filter_weight*stove->fChamberDeltaT +
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f7fd ff93 	bl	8000c28 <__addsf3>
 8002d02:	4603      	mov	r3, r0
 8002d04:	461a      	mov	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	61da      	str	r2, [r3, #28]
				}

				Tobj.u32LastTimeChamber = u32time_ms;
 8002d0a:	4a45      	ldr	r2, [pc, #276]	; (8002e20 <TemperatureManager+0x470>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6053      	str	r3, [r2, #4]
				break;
 8002d10:	e053      	b.n	8002dba <TemperatureManager+0x40a>
			case PlenumRtd:
				ftempReading = (float)(i32tempReading*15.625e-6);
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f7fd fbf0 	bl	80004f8 <__aeabi_i2d>
 8002d18:	a33b      	add	r3, pc, #236	; (adr r3, 8002e08 <TemperatureManager+0x458>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f7fd fc55 	bl	80005cc <__aeabi_dmul>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fd ff27 	bl	8000b7c <__aeabi_d2f>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	613b      	str	r3, [r7, #16]
				stove->fPlenumTemp = CELSIUS_TO_FAHRENHEIT(VtoDegreeCRtd(ftempReading));
 8002d32:	6938      	ldr	r0, [r7, #16]
 8002d34:	f000 fc10 	bl	8003558 <VtoDegreeCRtd>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	493a      	ldr	r1, [pc, #232]	; (8002e24 <TemperatureManager+0x474>)
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe f87b 	bl	8000e38 <__aeabi_fmul>
 8002d42:	4603      	mov	r3, r0
 8002d44:	4938      	ldr	r1, [pc, #224]	; (8002e28 <TemperatureManager+0x478>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe f92a 	bl	8000fa0 <__aeabi_fdiv>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd ff68 	bl	8000c28 <__addsf3>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	615a      	str	r2, [r3, #20]

				break;
 8002d60:	e02b      	b.n	8002dba <TemperatureManager+0x40a>
			case TempSense_board:
				ftempReading = (float)(i32tempReading*15.625e-6);
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7fd fbc8 	bl	80004f8 <__aeabi_i2d>
 8002d68:	a327      	add	r3, pc, #156	; (adr r3, 8002e08 <TemperatureManager+0x458>)
 8002d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6e:	f7fd fc2d 	bl	80005cc <__aeabi_dmul>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f7fd feff 	bl	8000b7c <__aeabi_d2f>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	613b      	str	r3, [r7, #16]
				Tobj.fTcoldJunct = (ftempReading-0.500)/.010;
 8002d82:	6938      	ldr	r0, [r7, #16]
 8002d84:	f7fd fbca 	bl	800051c <__aeabi_f2d>
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <TemperatureManager+0x480>)
 8002d8e:	f7fd fa65 	bl	800025c <__aeabi_dsub>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	a31d      	add	r3, pc, #116	; (adr r3, 8002e10 <TemperatureManager+0x460>)
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	f7fd fd3e 	bl	8000820 <__aeabi_ddiv>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	f7fd fee6 	bl	8000b7c <__aeabi_d2f>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4a1b      	ldr	r2, [pc, #108]	; (8002e20 <TemperatureManager+0x470>)
 8002db4:	60d3      	str	r3, [r2, #12]
				break;
 8002db6:	e000      	b.n	8002dba <TemperatureManager+0x40a>
			default:
				break;
 8002db8:	bf00      	nop
		}

		nextState = Sending_config;
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <TemperatureManager+0x484>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
		if(ch_idx-- < 0)
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <TemperatureManager+0x488>)
 8002dc2:	f993 3000 	ldrsb.w	r3, [r3]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	3a01      	subs	r2, #1
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	b251      	sxtb	r1, r2
 8002dce:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <TemperatureManager+0x488>)
 8002dd0:	7011      	strb	r1, [r2, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da09      	bge.n	8002dea <TemperatureManager+0x43a>
		{
			ch_idx = NUMBER_OF_ADC_CH - 1;
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <TemperatureManager+0x488>)
 8002dd8:	2203      	movs	r2, #3
 8002dda:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002ddc:	e005      	b.n	8002dea <TemperatureManager+0x43a>
		break;
 8002dde:	bf00      	nop
 8002de0:	e004      	b.n	8002dec <TemperatureManager+0x43c>
		break;
 8002de2:	bf00      	nop
 8002de4:	e002      	b.n	8002dec <TemperatureManager+0x43c>
		break;
 8002de6:	bf00      	nop
 8002de8:	e000      	b.n	8002dec <TemperatureManager+0x43c>
		break;
 8002dea:	bf00      	nop
	}

	if(nextState != currentState)
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <TemperatureManager+0x484>)
 8002dee:	781a      	ldrb	r2, [r3, #0]
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <TemperatureManager+0x48c>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d003      	beq.n	8002e00 <TemperatureManager+0x450>
	{
		currentState = nextState;
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <TemperatureManager+0x484>)
 8002dfa:	781a      	ldrb	r2, [r3, #0]
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <TemperatureManager+0x48c>)
 8002dfe:	701a      	strb	r2, [r3, #0]
	}

}
 8002e00:	bf00      	nop
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bdb0      	pop	{r4, r5, r7, pc}
 8002e08:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e0c:	3ef0624d 	.word	0x3ef0624d
 8002e10:	47ae147b 	.word	0x47ae147b
 8002e14:	3f847ae1 	.word	0x3f847ae1
 8002e18:	402f4000 	.word	0x402f4000
 8002e1c:	40200000 	.word	0x40200000
 8002e20:	20000ccc 	.word	0x20000ccc
 8002e24:	41100000 	.word	0x41100000
 8002e28:	40a00000 	.word	0x40a00000
 8002e2c:	10624dd3 	.word	0x10624dd3
 8002e30:	3fe00000 	.word	0x3fe00000
 8002e34:	20000ccb 	.word	0x20000ccb
 8002e38:	20000144 	.word	0x20000144
 8002e3c:	20000cca 	.word	0x20000cca

08002e40 <HAL_I2C_MasterTxCpltCallback>:
{
	return Tboard;
}

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	b_tx_success = true;
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_I2C_MasterTxCpltCallback+0x20>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
	b_tx_pending = false;
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000cc7 	.word	0x20000cc7
 8002e64:	20000cc6 	.word	0x20000cc6

08002e68 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	b_rx_success = true;
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_I2C_MasterRxCpltCallback+0x20>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_I2C_MasterRxCpltCallback+0x24>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000cc9 	.word	0x20000cc9
 8002e8c:	20000cc8 	.word	0x20000cc8

08002e90 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	b_tx_pending = false;
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_I2C_ErrorCallback+0x30>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_I2C_ErrorCallback+0x34>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_I2C_ErrorCallback+0x38>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_I2C_ErrorCallback+0x3c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
	uint32_t errorcode = hi2c->ErrorCode;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	60fb      	str	r3, [r7, #12]
	UNUSED(errorcode);
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	20000cc6 	.word	0x20000cc6
 8002ec4:	20000cc7 	.word	0x20000cc7
 8002ec8:	20000cc8 	.word	0x20000cc8
 8002ecc:	20000cc9 	.word	0x20000cc9

08002ed0 <HAL_I2C_AbortCpltCallback>:
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	b_tx_pending = false;
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_I2C_AbortCpltCallback+0x30>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_I2C_AbortCpltCallback+0x34>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <HAL_I2C_AbortCpltCallback+0x38>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <HAL_I2C_AbortCpltCallback+0x3c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
	uint32_t errorcode = hi2c->ErrorCode;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	60fb      	str	r3, [r7, #12]
	UNUSED(errorcode);
}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	20000cc6 	.word	0x20000cc6
 8002f04:	20000cc7 	.word	0x20000cc7
 8002f08:	20000cc8 	.word	0x20000cc8
 8002f0c:	20000cc9 	.word	0x20000cc9

08002f10 <uVtoDegreeCTypeK>:
#define T_COEF_A0 1.185976E-1
#define T_COEF_A1 -1.183432E-4
#define T_COEF_A2 1.269686E2

float uVtoDegreeCTypeK(float uVdata,float Tref)
{
 8002f10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f14:	b08a      	sub	sp, #40	; 0x28
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
    double Vref = T_COEF_C0 + T_COEF_C1*Tref + T_COEF_C2*pow(Tref,2) + T_COEF_C3*pow(Tref,3) + T_COEF_C4*pow(Tref,4) + T_COEF_C5*pow(Tref,5) + T_COEF_C6*pow(Tref,6) + T_COEF_C7*pow(Tref,7) + T_COEF_C8*pow(Tref,8) + T_COEF_C9*pow(Tref,9)+T_COEF_A0*pow(2.718281828,T_COEF_A1*(Tref-T_COEF_A2)*(Tref-T_COEF_A2));
 8002f1c:	6838      	ldr	r0, [r7, #0]
 8002f1e:	f7fd fafd 	bl	800051c <__aeabi_f2d>
 8002f22:	a3cd      	add	r3, pc, #820	; (adr r3, 8003258 <uVtoDegreeCTypeK+0x348>)
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f7fd fb50 	bl	80005cc <__aeabi_dmul>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	a3ca      	add	r3, pc, #808	; (adr r3, 8003260 <uVtoDegreeCTypeK+0x350>)
 8002f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3a:	f7fd f98f 	bl	800025c <__aeabi_dsub>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4614      	mov	r4, r2
 8002f44:	461d      	mov	r5, r3
 8002f46:	6838      	ldr	r0, [r7, #0]
 8002f48:	f7fd fae8 	bl	800051c <__aeabi_f2d>
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f54:	f00d fad6 	bl	8010504 <pow>
 8002f58:	a3c3      	add	r3, pc, #780	; (adr r3, 8003268 <uVtoDegreeCTypeK+0x358>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f7fd fb35 	bl	80005cc <__aeabi_dmul>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4620      	mov	r0, r4
 8002f68:	4629      	mov	r1, r5
 8002f6a:	f7fd f979 	bl	8000260 <__adddf3>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4614      	mov	r4, r2
 8002f74:	461d      	mov	r5, r3
 8002f76:	6838      	ldr	r0, [r7, #0]
 8002f78:	f7fd fad0 	bl	800051c <__aeabi_f2d>
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	4bdd      	ldr	r3, [pc, #884]	; (80032f8 <uVtoDegreeCTypeK+0x3e8>)
 8002f82:	f00d fabf 	bl	8010504 <pow>
 8002f86:	a3ba      	add	r3, pc, #744	; (adr r3, 8003270 <uVtoDegreeCTypeK+0x360>)
 8002f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8c:	f7fd fb1e 	bl	80005cc <__aeabi_dmul>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4620      	mov	r0, r4
 8002f96:	4629      	mov	r1, r5
 8002f98:	f7fd f962 	bl	8000260 <__adddf3>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4614      	mov	r4, r2
 8002fa2:	461d      	mov	r5, r3
 8002fa4:	6838      	ldr	r0, [r7, #0]
 8002fa6:	f7fd fab9 	bl	800051c <__aeabi_f2d>
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	4bd3      	ldr	r3, [pc, #844]	; (80032fc <uVtoDegreeCTypeK+0x3ec>)
 8002fb0:	f00d faa8 	bl	8010504 <pow>
 8002fb4:	a3b0      	add	r3, pc, #704	; (adr r3, 8003278 <uVtoDegreeCTypeK+0x368>)
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fba:	f7fd fb07 	bl	80005cc <__aeabi_dmul>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	f7fd f94b 	bl	8000260 <__adddf3>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4614      	mov	r4, r2
 8002fd0:	461d      	mov	r5, r3
 8002fd2:	6838      	ldr	r0, [r7, #0]
 8002fd4:	f7fd faa2 	bl	800051c <__aeabi_f2d>
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	4bc8      	ldr	r3, [pc, #800]	; (8003300 <uVtoDegreeCTypeK+0x3f0>)
 8002fde:	f00d fa91 	bl	8010504 <pow>
 8002fe2:	a3a7      	add	r3, pc, #668	; (adr r3, 8003280 <uVtoDegreeCTypeK+0x370>)
 8002fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe8:	f7fd faf0 	bl	80005cc <__aeabi_dmul>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	4629      	mov	r1, r5
 8002ff4:	f7fd f934 	bl	8000260 <__adddf3>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4614      	mov	r4, r2
 8002ffe:	461d      	mov	r5, r3
 8003000:	6838      	ldr	r0, [r7, #0]
 8003002:	f7fd fa8b 	bl	800051c <__aeabi_f2d>
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	4bbe      	ldr	r3, [pc, #760]	; (8003304 <uVtoDegreeCTypeK+0x3f4>)
 800300c:	f00d fa7a 	bl	8010504 <pow>
 8003010:	a39d      	add	r3, pc, #628	; (adr r3, 8003288 <uVtoDegreeCTypeK+0x378>)
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	f7fd fad9 	bl	80005cc <__aeabi_dmul>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4620      	mov	r0, r4
 8003020:	4629      	mov	r1, r5
 8003022:	f7fd f91d 	bl	8000260 <__adddf3>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4614      	mov	r4, r2
 800302c:	461d      	mov	r5, r3
 800302e:	6838      	ldr	r0, [r7, #0]
 8003030:	f7fd fa74 	bl	800051c <__aeabi_f2d>
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	4bb3      	ldr	r3, [pc, #716]	; (8003308 <uVtoDegreeCTypeK+0x3f8>)
 800303a:	f00d fa63 	bl	8010504 <pow>
 800303e:	a394      	add	r3, pc, #592	; (adr r3, 8003290 <uVtoDegreeCTypeK+0x380>)
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	f7fd fac2 	bl	80005cc <__aeabi_dmul>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4620      	mov	r0, r4
 800304e:	4629      	mov	r1, r5
 8003050:	f7fd f906 	bl	8000260 <__adddf3>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4614      	mov	r4, r2
 800305a:	461d      	mov	r5, r3
 800305c:	6838      	ldr	r0, [r7, #0]
 800305e:	f7fd fa5d 	bl	800051c <__aeabi_f2d>
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	4ba9      	ldr	r3, [pc, #676]	; (800330c <uVtoDegreeCTypeK+0x3fc>)
 8003068:	f00d fa4c 	bl	8010504 <pow>
 800306c:	a38a      	add	r3, pc, #552	; (adr r3, 8003298 <uVtoDegreeCTypeK+0x388>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	f7fd faab 	bl	80005cc <__aeabi_dmul>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4620      	mov	r0, r4
 800307c:	4629      	mov	r1, r5
 800307e:	f7fd f8ef 	bl	8000260 <__adddf3>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4614      	mov	r4, r2
 8003088:	461d      	mov	r5, r3
 800308a:	6838      	ldr	r0, [r7, #0]
 800308c:	f7fd fa46 	bl	800051c <__aeabi_f2d>
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	4b9e      	ldr	r3, [pc, #632]	; (8003310 <uVtoDegreeCTypeK+0x400>)
 8003096:	f00d fa35 	bl	8010504 <pow>
 800309a:	a381      	add	r3, pc, #516	; (adr r3, 80032a0 <uVtoDegreeCTypeK+0x390>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f7fd fa94 	bl	80005cc <__aeabi_dmul>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4620      	mov	r0, r4
 80030aa:	4629      	mov	r1, r5
 80030ac:	f7fd f8d8 	bl	8000260 <__adddf3>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4614      	mov	r4, r2
 80030b6:	461d      	mov	r5, r3
 80030b8:	6838      	ldr	r0, [r7, #0]
 80030ba:	f7fd fa2f 	bl	800051c <__aeabi_f2d>
 80030be:	a37a      	add	r3, pc, #488	; (adr r3, 80032a8 <uVtoDegreeCTypeK+0x398>)
 80030c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c4:	f7fd f8ca 	bl	800025c <__aeabi_dsub>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	a377      	add	r3, pc, #476	; (adr r3, 80032b0 <uVtoDegreeCTypeK+0x3a0>)
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	f7fd fa79 	bl	80005cc <__aeabi_dmul>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4690      	mov	r8, r2
 80030e0:	4699      	mov	r9, r3
 80030e2:	6838      	ldr	r0, [r7, #0]
 80030e4:	f7fd fa1a 	bl	800051c <__aeabi_f2d>
 80030e8:	a36f      	add	r3, pc, #444	; (adr r3, 80032a8 <uVtoDegreeCTypeK+0x398>)
 80030ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ee:	f7fd f8b5 	bl	800025c <__aeabi_dsub>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4640      	mov	r0, r8
 80030f8:	4649      	mov	r1, r9
 80030fa:	f7fd fa67 	bl	80005cc <__aeabi_dmul>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	a16d      	add	r1, pc, #436	; (adr r1, 80032b8 <uVtoDegreeCTypeK+0x3a8>)
 8003104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003108:	f00d f9fc 	bl	8010504 <pow>
 800310c:	a36c      	add	r3, pc, #432	; (adr r3, 80032c0 <uVtoDegreeCTypeK+0x3b0>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f7fd fa5b 	bl	80005cc <__aeabi_dmul>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4620      	mov	r0, r4
 800311c:	4629      	mov	r1, r5
 800311e:	f7fd f89f 	bl	8000260 <__adddf3>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double Vmeas = uVdata/1000; //value need to be in mV
 800312a:	497a      	ldr	r1, [pc, #488]	; (8003314 <uVtoDegreeCTypeK+0x404>)
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7fd ff37 	bl	8000fa0 <__aeabi_fdiv>
 8003132:	4603      	mov	r3, r0
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd f9f1 	bl	800051c <__aeabi_f2d>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double totalV = Vmeas + Vref;
 8003142:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003146:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800314a:	f7fd f889 	bl	8000260 <__adddf3>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	e9c7 2302 	strd	r2, r3, [r7, #8]

    double t90;
    if(totalV < 20.644)
 8003156:	a35c      	add	r3, pc, #368	; (adr r3, 80032c8 <uVtoDegreeCTypeK+0x3b8>)
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003160:	f7fd fca6 	bl	8000ab0 <__aeabi_dcmplt>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 812a 	beq.w	80033c0 <uVtoDegreeCTypeK+0x4b0>
    {
     t90 = T_COEF_D0_0_500 + T_COEF_D1_0_500 *totalV + T_COEF_D2_0_500 *pow(totalV,2) + T_COEF_D3_0_500 *pow(totalV,3) + T_COEF_D4_0_500 *pow(totalV,4) + T_COEF_D5_0_500 *pow(totalV,5) + T_COEF_D6_0_500 *pow(totalV,6) + T_COEF_D7_0_500 *pow(totalV,7) + T_COEF_D8_0_500 *pow(totalV,8) + T_COEF_D9_0_500 *pow(totalV,9);
 800316c:	a358      	add	r3, pc, #352	; (adr r3, 80032d0 <uVtoDegreeCTypeK+0x3c0>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003176:	f7fd fa29 	bl	80005cc <__aeabi_dmul>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	f7fd f869 	bl	8000260 <__adddf3>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4614      	mov	r4, r2
 8003194:	461d      	mov	r5, r3
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800319e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031a2:	f00d f9af 	bl	8010504 <pow>
 80031a6:	a34c      	add	r3, pc, #304	; (adr r3, 80032d8 <uVtoDegreeCTypeK+0x3c8>)
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	f7fd fa0e 	bl	80005cc <__aeabi_dmul>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4620      	mov	r0, r4
 80031b6:	4629      	mov	r1, r5
 80031b8:	f7fd f852 	bl	8000260 <__adddf3>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4614      	mov	r4, r2
 80031c2:	461d      	mov	r5, r3
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	4b4b      	ldr	r3, [pc, #300]	; (80032f8 <uVtoDegreeCTypeK+0x3e8>)
 80031ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031ce:	f00d f999 	bl	8010504 <pow>
 80031d2:	a343      	add	r3, pc, #268	; (adr r3, 80032e0 <uVtoDegreeCTypeK+0x3d0>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fd f9f8 	bl	80005cc <__aeabi_dmul>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4620      	mov	r0, r4
 80031e2:	4629      	mov	r1, r5
 80031e4:	f7fd f83c 	bl	8000260 <__adddf3>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4614      	mov	r4, r2
 80031ee:	461d      	mov	r5, r3
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	4b41      	ldr	r3, [pc, #260]	; (80032fc <uVtoDegreeCTypeK+0x3ec>)
 80031f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031fa:	f00d f983 	bl	8010504 <pow>
 80031fe:	a33a      	add	r3, pc, #232	; (adr r3, 80032e8 <uVtoDegreeCTypeK+0x3d8>)
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f7fd f9e2 	bl	80005cc <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4620      	mov	r0, r4
 800320e:	4629      	mov	r1, r5
 8003210:	f7fd f826 	bl	8000260 <__adddf3>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4614      	mov	r4, r2
 800321a:	461d      	mov	r5, r3
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	4b37      	ldr	r3, [pc, #220]	; (8003300 <uVtoDegreeCTypeK+0x3f0>)
 8003222:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003226:	f00d f96d 	bl	8010504 <pow>
 800322a:	a331      	add	r3, pc, #196	; (adr r3, 80032f0 <uVtoDegreeCTypeK+0x3e0>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f7fd f9cc 	bl	80005cc <__aeabi_dmul>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4620      	mov	r0, r4
 800323a:	4629      	mov	r1, r5
 800323c:	f7fd f810 	bl	8000260 <__adddf3>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4614      	mov	r4, r2
 8003246:	461d      	mov	r5, r3
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <uVtoDegreeCTypeK+0x3f4>)
 800324e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003252:	e061      	b.n	8003318 <uVtoDegreeCTypeK+0x408>
 8003254:	f3af 8000 	nop.w
 8003258:	ecfa2196 	.word	0xecfa2196
 800325c:	3fa3ed7a 	.word	0x3fa3ed7a
 8003260:	c4b5b30b 	.word	0xc4b5b30b
 8003264:	3f9205d7 	.word	0x3f9205d7
 8003268:	f72891e7 	.word	0xf72891e7
 800326c:	3ef375d4 	.word	0x3ef375d4
 8003270:	7a34de08 	.word	0x7a34de08
 8003274:	be7ab2ac 	.word	0xbe7ab2ac
 8003278:	b676ec5f 	.word	0xb676ec5f
 800327c:	3df5e184 	.word	0x3df5e184
 8003280:	c620f2a8 	.word	0xc620f2a8
 8003284:	bd63ba97 	.word	0xbd63ba97
 8003288:	e5aa091d 	.word	0xe5aa091d
 800328c:	3cc43402 	.word	0x3cc43402
 8003290:	01c8db89 	.word	0x01c8db89
 8003294:	bc17a08b 	.word	0xbc17a08b
 8003298:	b8001899 	.word	0xb8001899
 800329c:	3b5d5cb4 	.word	0x3b5d5cb4
 80032a0:	51ff39ec 	.word	0x51ff39ec
 80032a4:	ba8df847 	.word	0xba8df847
 80032a8:	8adab9f5 	.word	0x8adab9f5
 80032ac:	405fbdfd 	.word	0x405fbdfd
 80032b0:	b1df7541 	.word	0xb1df7541
 80032b4:	bf1f05e0 	.word	0xbf1f05e0
 80032b8:	8b04919b 	.word	0x8b04919b
 80032bc:	4005bf0a 	.word	0x4005bf0a
 80032c0:	8d6253b2 	.word	0x8d6253b2
 80032c4:	3fbe5c69 	.word	0x3fbe5c69
 80032c8:	2f1a9fbe 	.word	0x2f1a9fbe
 80032cc:	4034a4dd 	.word	0x4034a4dd
 80032d0:	886594af 	.word	0x886594af
 80032d4:	40391563 	.word	0x40391563
 80032d8:	f62184e0 	.word	0xf62184e0
 80032dc:	3fb41f32 	.word	0x3fb41f32
 80032e0:	3c90aa07 	.word	0x3c90aa07
 80032e4:	bfd00521 	.word	0xbfd00521
 80032e8:	cf12f82a 	.word	0xcf12f82a
 80032ec:	3fb5497e 	.word	0x3fb5497e
 80032f0:	55785780 	.word	0x55785780
 80032f4:	bf89266f 	.word	0xbf89266f
 80032f8:	40080000 	.word	0x40080000
 80032fc:	40100000 	.word	0x40100000
 8003300:	40140000 	.word	0x40140000
 8003304:	40180000 	.word	0x40180000
 8003308:	401c0000 	.word	0x401c0000
 800330c:	40200000 	.word	0x40200000
 8003310:	40220000 	.word	0x40220000
 8003314:	447a0000 	.word	0x447a0000
 8003318:	f00d f8f4 	bl	8010504 <pow>
 800331c:	a370      	add	r3, pc, #448	; (adr r3, 80034e0 <uVtoDegreeCTypeK+0x5d0>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	f7fd f953 	bl	80005cc <__aeabi_dmul>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4620      	mov	r0, r4
 800332c:	4629      	mov	r1, r5
 800332e:	f7fc ff97 	bl	8000260 <__adddf3>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4614      	mov	r4, r2
 8003338:	461d      	mov	r5, r3
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	4b7e      	ldr	r3, [pc, #504]	; (8003538 <uVtoDegreeCTypeK+0x628>)
 8003340:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003344:	f00d f8de 	bl	8010504 <pow>
 8003348:	a367      	add	r3, pc, #412	; (adr r3, 80034e8 <uVtoDegreeCTypeK+0x5d8>)
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	f7fd f93d 	bl	80005cc <__aeabi_dmul>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4620      	mov	r0, r4
 8003358:	4629      	mov	r1, r5
 800335a:	f7fc ff81 	bl	8000260 <__adddf3>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4614      	mov	r4, r2
 8003364:	461d      	mov	r5, r3
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	4b74      	ldr	r3, [pc, #464]	; (800353c <uVtoDegreeCTypeK+0x62c>)
 800336c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003370:	f00d f8c8 	bl	8010504 <pow>
 8003374:	a35e      	add	r3, pc, #376	; (adr r3, 80034f0 <uVtoDegreeCTypeK+0x5e0>)
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f7fd f927 	bl	80005cc <__aeabi_dmul>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4620      	mov	r0, r4
 8003384:	4629      	mov	r1, r5
 8003386:	f7fc ff6b 	bl	8000260 <__adddf3>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4614      	mov	r4, r2
 8003390:	461d      	mov	r5, r3
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	4b6a      	ldr	r3, [pc, #424]	; (8003540 <uVtoDegreeCTypeK+0x630>)
 8003398:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800339c:	f00d f8b2 	bl	8010504 <pow>
 80033a0:	a355      	add	r3, pc, #340	; (adr r3, 80034f8 <uVtoDegreeCTypeK+0x5e8>)
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	f7fd f911 	bl	80005cc <__aeabi_dmul>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4620      	mov	r0, r4
 80033b0:	4629      	mov	r1, r5
 80033b2:	f7fc ff55 	bl	8000260 <__adddf3>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80033be:	e082      	b.n	80034c6 <uVtoDegreeCTypeK+0x5b6>
    }
    else
    {
	    t90 = T_COEF_D0_500_1372 + T_COEF_D1_500_1372 *totalV + T_COEF_D2_500_1372 *pow(totalV,2) + T_COEF_D3_500_1372 *pow(totalV,3) + T_COEF_D4_500_1372 *pow(totalV,4) + T_COEF_D5_500_1372 *pow(totalV,5) + T_COEF_D6_500_1372 *pow(totalV,6);
 80033c0:	a34f      	add	r3, pc, #316	; (adr r3, 8003500 <uVtoDegreeCTypeK+0x5f0>)
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033ca:	f7fd f8ff 	bl	80005cc <__aeabi_dmul>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4610      	mov	r0, r2
 80033d4:	4619      	mov	r1, r3
 80033d6:	a34c      	add	r3, pc, #304	; (adr r3, 8003508 <uVtoDegreeCTypeK+0x5f8>)
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f7fc ff3e 	bl	800025c <__aeabi_dsub>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4614      	mov	r4, r2
 80033e6:	461d      	mov	r5, r3
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033f4:	f00d f886 	bl	8010504 <pow>
 80033f8:	a345      	add	r3, pc, #276	; (adr r3, 8003510 <uVtoDegreeCTypeK+0x600>)
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	f7fd f8e5 	bl	80005cc <__aeabi_dmul>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4620      	mov	r0, r4
 8003408:	4629      	mov	r1, r5
 800340a:	f7fc ff29 	bl	8000260 <__adddf3>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4614      	mov	r4, r2
 8003414:	461d      	mov	r5, r3
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	4b4a      	ldr	r3, [pc, #296]	; (8003544 <uVtoDegreeCTypeK+0x634>)
 800341c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003420:	f00d f870 	bl	8010504 <pow>
 8003424:	a33c      	add	r3, pc, #240	; (adr r3, 8003518 <uVtoDegreeCTypeK+0x608>)
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	f7fd f8cf 	bl	80005cc <__aeabi_dmul>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4620      	mov	r0, r4
 8003434:	4629      	mov	r1, r5
 8003436:	f7fc ff13 	bl	8000260 <__adddf3>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4614      	mov	r4, r2
 8003440:	461d      	mov	r5, r3
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	4b40      	ldr	r3, [pc, #256]	; (8003548 <uVtoDegreeCTypeK+0x638>)
 8003448:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800344c:	f00d f85a 	bl	8010504 <pow>
 8003450:	a333      	add	r3, pc, #204	; (adr r3, 8003520 <uVtoDegreeCTypeK+0x610>)
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	f7fd f8b9 	bl	80005cc <__aeabi_dmul>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4620      	mov	r0, r4
 8003460:	4629      	mov	r1, r5
 8003462:	f7fc fefd 	bl	8000260 <__adddf3>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4614      	mov	r4, r2
 800346c:	461d      	mov	r5, r3
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	4b36      	ldr	r3, [pc, #216]	; (800354c <uVtoDegreeCTypeK+0x63c>)
 8003474:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003478:	f00d f844 	bl	8010504 <pow>
 800347c:	a32a      	add	r3, pc, #168	; (adr r3, 8003528 <uVtoDegreeCTypeK+0x618>)
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f7fd f8a3 	bl	80005cc <__aeabi_dmul>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4620      	mov	r0, r4
 800348c:	4629      	mov	r1, r5
 800348e:	f7fc fee7 	bl	8000260 <__adddf3>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4614      	mov	r4, r2
 8003498:	461d      	mov	r5, r3
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <uVtoDegreeCTypeK+0x640>)
 80034a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034a4:	f00d f82e 	bl	8010504 <pow>
 80034a8:	a321      	add	r3, pc, #132	; (adr r3, 8003530 <uVtoDegreeCTypeK+0x620>)
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	f7fd f88d 	bl	80005cc <__aeabi_dmul>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4620      	mov	r0, r4
 80034b8:	4629      	mov	r1, r5
 80034ba:	f7fc fed1 	bl	8000260 <__adddf3>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return (float)t90;
 80034c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034ca:	f7fd fb57 	bl	8000b7c <__aeabi_d2f>
 80034ce:	4603      	mov	r3, r0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3728      	adds	r7, #40	; 0x28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034da:	bf00      	nop
 80034dc:	f3af 8000 	nop.w
 80034e0:	598742c5 	.word	0x598742c5
 80034e4:	3f50101c 	.word	0x3f50101c
 80034e8:	8fe5dfc5 	.word	0x8fe5dfc5
 80034ec:	bf072311 	.word	0xbf072311
 80034f0:	d5041d19 	.word	0xd5041d19
 80034f4:	3eb1beee 	.word	0x3eb1beee
 80034f8:	f20e972b 	.word	0xf20e972b
 80034fc:	be469b94 	.word	0xbe469b94
 8003500:	251c193b 	.word	0x251c193b
 8003504:	404826af 	.word	0x404826af
 8003508:	1d14e3bd 	.word	0x1d14e3bd
 800350c:	406079c9 	.word	0x406079c9
 8003510:	7dffe020 	.word	0x7dffe020
 8003514:	bffa587c 	.word	0xbffa587c
 8003518:	72875bff 	.word	0x72875bff
 800351c:	3fabfabb 	.word	0x3fabfabb
 8003520:	43f14f16 	.word	0x43f14f16
 8003524:	bf4f9f9b 	.word	0xbf4f9f9b
 8003528:	31b5afb6 	.word	0x31b5afb6
 800352c:	3ee275a4 	.word	0x3ee275a4
 8003530:	f722eba7 	.word	0xf722eba7
 8003534:	be60b376 	.word	0xbe60b376
 8003538:	401c0000 	.word	0x401c0000
 800353c:	40200000 	.word	0x40200000
 8003540:	40220000 	.word	0x40220000
 8003544:	40080000 	.word	0x40080000
 8003548:	40100000 	.word	0x40100000
 800354c:	40140000 	.word	0x40140000
 8003550:	40180000 	.word	0x40180000
 8003554:	00000000 	.word	0x00000000

08003558 <VtoDegreeCRtd>:
float VtoDegreeCRtd(float Vdata)
{
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	//using a y = 366.02x^2 -942.3x +561.55 where x is the ADC voltage and y is the temperature in C
	return (Vdata*Vdata)*366.02 - 942.3*Vdata + 561.55;
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd fc68 	bl	8000e38 <__aeabi_fmul>
 8003568:	4603      	mov	r3, r0
 800356a:	4618      	mov	r0, r3
 800356c:	f7fc ffd6 	bl	800051c <__aeabi_f2d>
 8003570:	a315      	add	r3, pc, #84	; (adr r3, 80035c8 <VtoDegreeCRtd+0x70>)
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	f7fd f829 	bl	80005cc <__aeabi_dmul>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4614      	mov	r4, r2
 8003580:	461d      	mov	r5, r3
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fc ffca 	bl	800051c <__aeabi_f2d>
 8003588:	a311      	add	r3, pc, #68	; (adr r3, 80035d0 <VtoDegreeCRtd+0x78>)
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	f7fd f81d 	bl	80005cc <__aeabi_dmul>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4620      	mov	r0, r4
 8003598:	4629      	mov	r1, r5
 800359a:	f7fc fe5f 	bl	800025c <__aeabi_dsub>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	a30c      	add	r3, pc, #48	; (adr r3, 80035d8 <VtoDegreeCRtd+0x80>)
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f7fc fe58 	bl	8000260 <__adddf3>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	f7fd fae0 	bl	8000b7c <__aeabi_d2f>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bdb0      	pop	{r4, r5, r7, pc}
 80035c6:	bf00      	nop
 80035c8:	eb851eb8 	.word	0xeb851eb8
 80035cc:	4076e051 	.word	0x4076e051
 80035d0:	66666666 	.word	0x66666666
 80035d4:	408d7266 	.word	0x408d7266
 80035d8:	66666666 	.word	0x66666666
 80035dc:	40818c66 	.word	0x40818c66

080035e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a06      	ldr	r2, [pc, #24]	; (8003608 <vApplicationGetIdleTaskMemory+0x28>)
 80035f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4a05      	ldr	r2, [pc, #20]	; (800360c <vApplicationGetIdleTaskMemory+0x2c>)
 80035f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	20000ce8 	.word	0x20000ce8
 800360c:	20000d3c 	.word	0x20000d3c

08003610 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a07      	ldr	r2, [pc, #28]	; (800363c <vApplicationGetTimerTaskMemory+0x2c>)
 8003620:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4a06      	ldr	r2, [pc, #24]	; (8003640 <vApplicationGetTimerTaskMemory+0x30>)
 8003626:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800362e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000f3c 	.word	0x20000f3c
 8003640:	20000f90 	.word	0x20000f90

08003644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003644:	b5b0      	push	{r4, r5, r7, lr}
 8003646:	b090      	sub	sp, #64	; 0x40
 8003648:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800364a:	f001 f9ad 	bl	80049a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800364e:	f000 f863 	bl	8003718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003652:	f000 f9db 	bl	8003a0c <MX_GPIO_Init>
  MX_DMA_Init();
 8003656:	f000 f9bb 	bl	80039d0 <MX_DMA_Init>
  MX_I2C1_Init();
 800365a:	f000 f8c3 	bl	80037e4 <MX_I2C1_Init>
  MX_RTC_Init();
 800365e:	f000 f8ef 	bl	8003840 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8003662:	f000 f937 	bl	80038d4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003666:	f000 f989 	bl	800397c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800366a:	f000 f95d 	bl	8003928 <MX_USART2_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer */
  osTimerDef(Timer, TimerCallback);
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <main+0xb4>)
 8003670:	63bb      	str	r3, [r7, #56]	; 0x38
 8003672:	2300      	movs	r3, #0
 8003674:	63fb      	str	r3, [r7, #60]	; 0x3c
  TimerHandle = osTimerCreate(osTimer(Timer), osTimerPeriodic, NULL);
 8003676:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800367a:	2200      	movs	r2, #0
 800367c:	2101      	movs	r1, #1
 800367e:	4618      	mov	r0, r3
 8003680:	f006 fefc 	bl	800a47c <osTimerCreate>
 8003684:	4603      	mov	r3, r0
 8003686:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <main+0xb8>)
 8003688:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	MotorControlsHandle = xMessageBufferCreate(10);
 800368a:	2201      	movs	r2, #1
 800368c:	2100      	movs	r1, #0
 800368e:	200a      	movs	r0, #10
 8003690:	f007 fcf6 	bl	800b080 <xStreamBufferGenericCreate>
 8003694:	4603      	mov	r3, r0
 8003696:	4a1a      	ldr	r2, [pc, #104]	; (8003700 <main+0xbc>)
 8003698:	6013      	str	r3, [r2, #0]
	MotorInPlaceHandle = xQueueCreate(1, sizeof(bool));
 800369a:	2200      	movs	r2, #0
 800369c:	2101      	movs	r1, #1
 800369e:	2001      	movs	r0, #1
 80036a0:	f007 f8af 	bl	800a802 <xQueueGenericCreate>
 80036a4:	4603      	mov	r3, r0
 80036a6:	4a17      	ldr	r2, [pc, #92]	; (8003704 <main+0xc0>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Algo_task */
  osThreadDef(Algo_task, Algo_Init, osPriorityNormal, 0, 512);
 80036aa:	4b17      	ldr	r3, [pc, #92]	; (8003708 <main+0xc4>)
 80036ac:	f107 041c 	add.w	r4, r7, #28
 80036b0:	461d      	mov	r5, r3
 80036b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Algo_taskHandle = osThreadCreate(osThread(Algo_task), NULL);
 80036be:	f107 031c 	add.w	r3, r7, #28
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f006 fe78 	bl	800a3ba <osThreadCreate>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4a0f      	ldr	r2, [pc, #60]	; (800370c <main+0xc8>)
 80036ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorManager */
  osThreadDef(MotorManager, Motor_task, osPriorityAboveNormal, 0, 128);
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <main+0xcc>)
 80036d2:	463c      	mov	r4, r7
 80036d4:	461d      	mov	r5, r3
 80036d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorManagerHandle = osThreadCreate(osThread(MotorManager), NULL);
 80036e2:	463b      	mov	r3, r7
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f006 fe67 	bl	800a3ba <osThreadCreate>
 80036ec:	4603      	mov	r3, r0
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <main+0xd0>)
 80036f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80036f2:	f006 fe4b 	bl	800a38c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036f6:	e7fe      	b.n	80036f6 <main+0xb2>
 80036f8:	08003bad 	.word	0x08003bad
 80036fc:	20003778 	.word	0x20003778
 8003700:	20003700 	.word	0x20003700
 8003704:	200036fc 	.word	0x200036fc
 8003708:	080119e8 	.word	0x080119e8
 800370c:	2000377c 	.word	0x2000377c
 8003710:	08011a04 	.word	0x08011a04
 8003714:	20003808 	.word	0x20003808

08003718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b09c      	sub	sp, #112	; 0x70
 800371c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800371e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003722:	2238      	movs	r2, #56	; 0x38
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f00a f848 	bl	800d7bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800372c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800373c:	1d3b      	adds	r3, r7, #4
 800373e:	2220      	movs	r2, #32
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f00a f83a 	bl	800d7bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003748:	2309      	movs	r3, #9
 800374a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800374c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003750:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003752:	2300      	movs	r3, #0
 8003754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003756:	2301      	movs	r3, #1
 8003758:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800375a:	2301      	movs	r3, #1
 800375c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800375e:	2300      	movs	r3, #0
 8003760:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003762:	2302      	movs	r3, #2
 8003764:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800376a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800376c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003770:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8003772:	2300      	movs	r3, #0
 8003774:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003776:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800377a:	4618      	mov	r0, r3
 800377c:	f003 ffb8 	bl	80076f0 <HAL_RCC_OscConfig>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003786:	f000 fa2d 	bl	8003be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800378a:	230f      	movs	r3, #15
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800378e:	2302      	movs	r3, #2
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003792:	2300      	movs	r3, #0
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800379c:	2300      	movs	r3, #0
 800379e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80037a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f004 fab8 	bl	8007d1c <HAL_RCC_ClockConfig>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80037b2:	f000 fa17 	bl	8003be4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80037b6:	2301      	movs	r3, #1
 80037b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80037ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037be:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037c0:	1d3b      	adds	r3, r7, #4
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 fcf8 	bl	80081b8 <HAL_RCCEx_PeriphCLKConfig>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80037ce:	f000 fa09 	bl	8003be4 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80037d2:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <SystemClock_Config+0xc8>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
}
 80037d8:	bf00      	nop
 80037da:	3770      	adds	r7, #112	; 0x70
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	42420070 	.word	0x42420070

080037e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037e8:	4b12      	ldr	r3, [pc, #72]	; (8003834 <MX_I2C1_Init+0x50>)
 80037ea:	4a13      	ldr	r2, [pc, #76]	; (8003838 <MX_I2C1_Init+0x54>)
 80037ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80037ee:	4b11      	ldr	r3, [pc, #68]	; (8003834 <MX_I2C1_Init+0x50>)
 80037f0:	4a12      	ldr	r2, [pc, #72]	; (800383c <MX_I2C1_Init+0x58>)
 80037f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <MX_I2C1_Init+0x50>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80037fa:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <MX_I2C1_Init+0x50>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <MX_I2C1_Init+0x50>)
 8003802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003806:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <MX_I2C1_Init+0x50>)
 800380a:	2200      	movs	r2, #0
 800380c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <MX_I2C1_Init+0x50>)
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003814:	4b07      	ldr	r3, [pc, #28]	; (8003834 <MX_I2C1_Init+0x50>)
 8003816:	2200      	movs	r2, #0
 8003818:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <MX_I2C1_Init+0x50>)
 800381c:	2200      	movs	r2, #0
 800381e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003820:	4804      	ldr	r0, [pc, #16]	; (8003834 <MX_I2C1_Init+0x50>)
 8003822:	f002 f815 	bl	8005850 <HAL_I2C_Init>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800382c:	f000 f9da 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003830:	bf00      	nop
 8003832:	bd80      	pop	{r7, pc}
 8003834:	200036a8 	.word	0x200036a8
 8003838:	40005400 	.word	0x40005400
 800383c:	000186a0 	.word	0x000186a0

08003840 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	2100      	movs	r1, #0
 800384a:	460a      	mov	r2, r1
 800384c:	801a      	strh	r2, [r3, #0]
 800384e:	460a      	mov	r2, r1
 8003850:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8003852:	2300      	movs	r3, #0
 8003854:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <MX_RTC_Init+0x8c>)
 8003858:	4a1d      	ldr	r2, [pc, #116]	; (80038d0 <MX_RTC_Init+0x90>)
 800385a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800385c:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <MX_RTC_Init+0x8c>)
 800385e:	f04f 32ff 	mov.w	r2, #4294967295
 8003862:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <MX_RTC_Init+0x8c>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800386a:	4818      	ldr	r0, [pc, #96]	; (80038cc <MX_RTC_Init+0x8c>)
 800386c:	f004 ff3a 	bl	80086e4 <HAL_RTC_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8003876:	f000 f9b5 	bl	8003be4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800387a:	2300      	movs	r3, #0
 800387c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800387e:	2300      	movs	r3, #0
 8003880:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003882:	2300      	movs	r3, #0
 8003884:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003886:	1d3b      	adds	r3, r7, #4
 8003888:	2201      	movs	r2, #1
 800388a:	4619      	mov	r1, r3
 800388c:	480f      	ldr	r0, [pc, #60]	; (80038cc <MX_RTC_Init+0x8c>)
 800388e:	f004 ffbf 	bl	8008810 <HAL_RTC_SetTime>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8003898:	f000 f9a4 	bl	8003be4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800389c:	2301      	movs	r3, #1
 800389e:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80038a0:	2301      	movs	r3, #1
 80038a2:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80038a4:	2301      	movs	r3, #1
 80038a6:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80038ac:	463b      	mov	r3, r7
 80038ae:	2201      	movs	r2, #1
 80038b0:	4619      	mov	r1, r3
 80038b2:	4806      	ldr	r0, [pc, #24]	; (80038cc <MX_RTC_Init+0x8c>)
 80038b4:	f005 f844 	bl	8008940 <HAL_RTC_SetDate>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80038be:	f000 f991 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20003780 	.word	0x20003780
 80038d0:	40002800 	.word	0x40002800

080038d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <MX_USART1_UART_Init+0x4c>)
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <MX_USART1_UART_Init+0x50>)
 80038dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <MX_USART1_UART_Init+0x4c>)
 80038e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <MX_USART1_UART_Init+0x4c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <MX_USART1_UART_Init+0x4c>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <MX_USART1_UART_Init+0x4c>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <MX_USART1_UART_Init+0x4c>)
 80038fa:	220c      	movs	r2, #12
 80038fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038fe:	4b08      	ldr	r3, [pc, #32]	; (8003920 <MX_USART1_UART_Init+0x4c>)
 8003900:	2200      	movs	r2, #0
 8003902:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003904:	4b06      	ldr	r3, [pc, #24]	; (8003920 <MX_USART1_UART_Init+0x4c>)
 8003906:	2200      	movs	r2, #0
 8003908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800390a:	4805      	ldr	r0, [pc, #20]	; (8003920 <MX_USART1_UART_Init+0x4c>)
 800390c:	f005 fcd4 	bl	80092b8 <HAL_UART_Init>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003916:	f000 f965 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20003704 	.word	0x20003704
 8003924:	40013800 	.word	0x40013800

08003928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <MX_USART2_UART_Init+0x4c>)
 800392e:	4a12      	ldr	r2, [pc, #72]	; (8003978 <MX_USART2_UART_Init+0x50>)
 8003930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003932:	4b10      	ldr	r3, [pc, #64]	; (8003974 <MX_USART2_UART_Init+0x4c>)
 8003934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <MX_USART2_UART_Init+0x4c>)
 800393c:	2200      	movs	r2, #0
 800393e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <MX_USART2_UART_Init+0x4c>)
 8003942:	2200      	movs	r2, #0
 8003944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <MX_USART2_UART_Init+0x4c>)
 8003948:	2200      	movs	r2, #0
 800394a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800394c:	4b09      	ldr	r3, [pc, #36]	; (8003974 <MX_USART2_UART_Init+0x4c>)
 800394e:	220c      	movs	r2, #12
 8003950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003952:	4b08      	ldr	r3, [pc, #32]	; (8003974 <MX_USART2_UART_Init+0x4c>)
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <MX_USART2_UART_Init+0x4c>)
 800395a:	2200      	movs	r2, #0
 800395c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800395e:	4805      	ldr	r0, [pc, #20]	; (8003974 <MX_USART2_UART_Init+0x4c>)
 8003960:	f005 fcaa 	bl	80092b8 <HAL_UART_Init>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800396a:	f000 f93b 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20003794 	.word	0x20003794
 8003978:	40004400 	.word	0x40004400

0800397c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <MX_USART3_UART_Init+0x4c>)
 8003982:	4a12      	ldr	r2, [pc, #72]	; (80039cc <MX_USART3_UART_Init+0x50>)
 8003984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8003986:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <MX_USART3_UART_Init+0x4c>)
 8003988:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800398c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800398e:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <MX_USART3_UART_Init+0x4c>)
 8003990:	2200      	movs	r2, #0
 8003992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <MX_USART3_UART_Init+0x4c>)
 8003996:	2200      	movs	r2, #0
 8003998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <MX_USART3_UART_Init+0x4c>)
 800399c:	2200      	movs	r2, #0
 800399e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <MX_USART3_UART_Init+0x4c>)
 80039a2:	220c      	movs	r2, #12
 80039a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039a6:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <MX_USART3_UART_Init+0x4c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80039ac:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <MX_USART3_UART_Init+0x4c>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80039b2:	4805      	ldr	r0, [pc, #20]	; (80039c8 <MX_USART3_UART_Init+0x4c>)
 80039b4:	f005 fc80 	bl	80092b8 <HAL_UART_Init>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80039be:	f000 f911 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20003634 	.word	0x20003634
 80039cc:	40004800 	.word	0x40004800

080039d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <MX_DMA_Init+0x38>)
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4a0b      	ldr	r2, [pc, #44]	; (8003a08 <MX_DMA_Init+0x38>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6153      	str	r3, [r2, #20]
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <MX_DMA_Init+0x38>)
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80039ee:	2200      	movs	r2, #0
 80039f0:	2105      	movs	r1, #5
 80039f2:	2010      	movs	r0, #16
 80039f4:	f001 f8bf 	bl	8004b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80039f8:	2010      	movs	r0, #16
 80039fa:	f001 f8d8 	bl	8004bae <HAL_NVIC_EnableIRQ>

}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000

08003a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a12:	f107 0310 	add.w	r3, r7, #16
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a20:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <MX_GPIO_Init+0x18c>)
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	4a5c      	ldr	r2, [pc, #368]	; (8003b98 <MX_GPIO_Init+0x18c>)
 8003a26:	f043 0310 	orr.w	r3, r3, #16
 8003a2a:	6193      	str	r3, [r2, #24]
 8003a2c:	4b5a      	ldr	r3, [pc, #360]	; (8003b98 <MX_GPIO_Init+0x18c>)
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a38:	4b57      	ldr	r3, [pc, #348]	; (8003b98 <MX_GPIO_Init+0x18c>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	4a56      	ldr	r2, [pc, #344]	; (8003b98 <MX_GPIO_Init+0x18c>)
 8003a3e:	f043 0320 	orr.w	r3, r3, #32
 8003a42:	6193      	str	r3, [r2, #24]
 8003a44:	4b54      	ldr	r3, [pc, #336]	; (8003b98 <MX_GPIO_Init+0x18c>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a50:	4b51      	ldr	r3, [pc, #324]	; (8003b98 <MX_GPIO_Init+0x18c>)
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	4a50      	ldr	r2, [pc, #320]	; (8003b98 <MX_GPIO_Init+0x18c>)
 8003a56:	f043 0304 	orr.w	r3, r3, #4
 8003a5a:	6193      	str	r3, [r2, #24]
 8003a5c:	4b4e      	ldr	r3, [pc, #312]	; (8003b98 <MX_GPIO_Init+0x18c>)
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	607b      	str	r3, [r7, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a68:	4b4b      	ldr	r3, [pc, #300]	; (8003b98 <MX_GPIO_Init+0x18c>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	4a4a      	ldr	r2, [pc, #296]	; (8003b98 <MX_GPIO_Init+0x18c>)
 8003a6e:	f043 0308 	orr.w	r3, r3, #8
 8003a72:	6193      	str	r3, [r2, #24]
 8003a74:	4b48      	ldr	r3, [pc, #288]	; (8003b98 <MX_GPIO_Init+0x18c>)
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step2_LowCurrent_Pin|uc_Stepper_Sleep_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin
 8003a80:	2200      	movs	r2, #0
 8003a82:	f242 71d0 	movw	r1, #10192	; 0x27d0
 8003a86:	4845      	ldr	r0, [pc, #276]	; (8003b9c <MX_GPIO_Init+0x190>)
 8003a88:	f001 fec9 	bl	800581e <HAL_GPIO_WritePin>
                          |Step2_DIR_Pin|Step1_LowCurrent_Pin|Step2_STEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step3_RESET_Pin|STATUS_LED1_Pin|Step3_ENABLE_Pin|Step2_RESET_Pin
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f641 012c 	movw	r1, #6188	; 0x182c
 8003a92:	4842      	ldr	r0, [pc, #264]	; (8003b9c <MX_GPIO_Init+0x190>)
 8003a94:	f001 fec3 	bl	800581e <HAL_GPIO_WritePin>
                          |Step2_ENABLE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_ON_Pin|AFK_Var_Pin|USB_ENABLE_Pin, GPIO_PIN_RESET);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f248 0182 	movw	r1, #32898	; 0x8082
 8003a9e:	4840      	ldr	r0, [pc, #256]	; (8003ba0 <MX_GPIO_Init+0x194>)
 8003aa0:	f001 febd 	bl	800581e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED2_Pin|Step3_DIR_Pin|Button_LED_Pin, GPIO_PIN_SET);
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003aaa:	483d      	ldr	r0, [pc, #244]	; (8003ba0 <MX_GPIO_Init+0x194>)
 8003aac:	f001 feb7 	bl	800581e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin, GPIO_PIN_RESET);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f248 010e 	movw	r1, #32782	; 0x800e
 8003ab6:	483b      	ldr	r0, [pc, #236]	; (8003ba4 <MX_GPIO_Init+0x198>)
 8003ab8:	f001 feb1 	bl	800581e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Step1_DIR_GPIO_Port, Step1_DIR_Pin, GPIO_PIN_RESET);
 8003abc:	2200      	movs	r2, #0
 8003abe:	2104      	movs	r1, #4
 8003ac0:	4839      	ldr	r0, [pc, #228]	; (8003ba8 <MX_GPIO_Init+0x19c>)
 8003ac2:	f001 feac 	bl	800581e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step1_RESET_Pin|Step1_ENABLE_Pin, GPIO_PIN_SET);
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	2130      	movs	r1, #48	; 0x30
 8003aca:	4836      	ldr	r0, [pc, #216]	; (8003ba4 <MX_GPIO_Init+0x198>)
 8003acc:	f001 fea7 	bl	800581e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Step2_LowCurrent_Pin Step3_RESET_Pin STATUS_LED1_Pin uc_Stepper_Sleep_Pin
                           Step3_ENABLE_Pin SPEED2_COIL_Pin SPEED3_COIL_Pin Step2_DIR_Pin
                           Step1_LowCurrent_Pin Step2_STEP_Pin Step2_RESET_Pin Step2_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step2_LowCurrent_Pin|Step3_RESET_Pin|STATUS_LED1_Pin|uc_Stepper_Sleep_Pin
 8003ad0:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 8003ad4:	613b      	str	r3, [r7, #16]
                          |Step3_ENABLE_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin|Step2_DIR_Pin
                          |Step1_LowCurrent_Pin|Step2_STEP_Pin|Step2_RESET_Pin|Step2_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae2:	f107 0310 	add.w	r3, r7, #16
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	482c      	ldr	r0, [pc, #176]	; (8003b9c <MX_GPIO_Init+0x190>)
 8003aea:	f001 fcfd 	bl	80054e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch1_Pin Limit_switch2_Pin */
  GPIO_InitStruct.Pin = Limit_switch1_Pin|Limit_switch2_Pin;
 8003aee:	2303      	movs	r3, #3
 8003af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003afa:	f107 0310 	add.w	r3, r7, #16
 8003afe:	4619      	mov	r1, r3
 8003b00:	4826      	ldr	r0, [pc, #152]	; (8003b9c <MX_GPIO_Init+0x190>)
 8003b02:	f001 fcf1 	bl	80054e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_ON_Pin STATUS_LED2_Pin Step3_DIR_Pin AFK_Var_Pin
                           Button_LED_Pin USB_ENABLE_Pin */
  GPIO_InitStruct.Pin = Buzzer_ON_Pin|STATUS_LED2_Pin|Step3_DIR_Pin|AFK_Var_Pin
 8003b06:	f248 13b2 	movw	r3, #33202	; 0x81b2
 8003b0a:	613b      	str	r3, [r7, #16]
                          |Button_LED_Pin|USB_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b14:	2302      	movs	r3, #2
 8003b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b18:	f107 0310 	add.w	r3, r7, #16
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4820      	ldr	r0, [pc, #128]	; (8003ba0 <MX_GPIO_Init+0x194>)
 8003b20:	f001 fce2 	bl	80054e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_switch3_Pin */
  GPIO_InitStruct.Pin = Limit_switch3_Pin;
 8003b24:	2340      	movs	r3, #64	; 0x40
 8003b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Limit_switch3_GPIO_Port, &GPIO_InitStruct);
 8003b30:	f107 0310 	add.w	r3, r7, #16
 8003b34:	4619      	mov	r1, r3
 8003b36:	481a      	ldr	r0, [pc, #104]	; (8003ba0 <MX_GPIO_Init+0x194>)
 8003b38:	f001 fcd6 	bl	80054e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch_Door_Pin Thermostat_Input_Pin Safety_ON_Pin Interlock_Input_Pin
                           Button_Input_Pin USB_Fault_Pin */
  GPIO_InitStruct.Pin = Limit_switch_Door_Pin|Thermostat_Input_Pin|Safety_ON_Pin|Interlock_Input_Pin
 8003b3c:	f247 3301 	movw	r3, #29441	; 0x7301
 8003b40:	613b      	str	r3, [r7, #16]
                          |Button_Input_Pin|USB_Fault_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b4a:	f107 0310 	add.w	r3, r7, #16
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4814      	ldr	r0, [pc, #80]	; (8003ba4 <MX_GPIO_Init+0x198>)
 8003b52:	f001 fcc9 	bl	80054e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Step3_STEP_Pin Step3_LowCurrent_Pin Stepper_HalfStep_Pin Step1_STEP_Pin
                           Step1_RESET_Pin Step1_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin
 8003b56:	f248 033e 	movw	r3, #32830	; 0x803e
 8003b5a:	613b      	str	r3, [r7, #16]
                          |Step1_RESET_Pin|Step1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b64:	2302      	movs	r3, #2
 8003b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b68:	f107 0310 	add.w	r3, r7, #16
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	480d      	ldr	r0, [pc, #52]	; (8003ba4 <MX_GPIO_Init+0x198>)
 8003b70:	f001 fcba 	bl	80054e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Step1_DIR_Pin */
  GPIO_InitStruct.Pin = Step1_DIR_Pin;
 8003b74:	2304      	movs	r3, #4
 8003b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b80:	2302      	movs	r3, #2
 8003b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Step1_DIR_GPIO_Port, &GPIO_InitStruct);
 8003b84:	f107 0310 	add.w	r3, r7, #16
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4807      	ldr	r0, [pc, #28]	; (8003ba8 <MX_GPIO_Init+0x19c>)
 8003b8c:	f001 fcac 	bl	80054e8 <HAL_GPIO_Init>

}
 8003b90:	bf00      	nop
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40011000 	.word	0x40011000
 8003ba0:	40010800 	.word	0x40010800
 8003ba4:	40010c00 	.word	0x40010c00
 8003ba8:	40011400 	.word	0x40011400

08003bac <TimerCallback>:
  /* USER CODE END 5 */
}

/* TimerCallback function */
void TimerCallback(void const * argument)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */

  /* USER CODE END TimerCallback */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
	...

08003bc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003bd2:	f000 feff 	bl	80049d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40012c00 	.word	0x40012c00

08003be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003be8:	b672      	cpsid	i
}
 8003bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bec:	e7fe      	b.n	8003bec <Error_Handler+0x8>
	...

08003bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003bf6:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <HAL_MspInit+0x68>)
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	4a17      	ldr	r2, [pc, #92]	; (8003c58 <HAL_MspInit+0x68>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6193      	str	r3, [r2, #24]
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <HAL_MspInit+0x68>)
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_MspInit+0x68>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	4a11      	ldr	r2, [pc, #68]	; (8003c58 <HAL_MspInit+0x68>)
 8003c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c18:	61d3      	str	r3, [r2, #28]
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <HAL_MspInit+0x68>)
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c26:	2200      	movs	r2, #0
 8003c28:	210f      	movs	r1, #15
 8003c2a:	f06f 0001 	mvn.w	r0, #1
 8003c2e:	f000 ffa2 	bl	8004b76 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <HAL_MspInit+0x6c>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <HAL_MspInit+0x6c>)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40010000 	.word	0x40010000

08003c60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c68:	f107 0310 	add.w	r3, r7, #16
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <HAL_I2C_MspInit+0x90>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d133      	bne.n	8003ce8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c80:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <HAL_I2C_MspInit+0x94>)
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <HAL_I2C_MspInit+0x94>)
 8003c86:	f043 0308 	orr.w	r3, r3, #8
 8003c8a:	6193      	str	r3, [r2, #24]
 8003c8c:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <HAL_I2C_MspInit+0x94>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8003c98:	23c0      	movs	r3, #192	; 0xc0
 8003c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c9c:	2312      	movs	r3, #18
 8003c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca4:	f107 0310 	add.w	r3, r7, #16
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4813      	ldr	r0, [pc, #76]	; (8003cf8 <HAL_I2C_MspInit+0x98>)
 8003cac:	f001 fc1c 	bl	80054e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_I2C_MspInit+0x94>)
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	; (8003cf4 <HAL_I2C_MspInit+0x94>)
 8003cb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cba:	61d3      	str	r3, [r2, #28]
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <HAL_I2C_MspInit+0x94>)
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2105      	movs	r1, #5
 8003ccc:	201f      	movs	r0, #31
 8003cce:	f000 ff52 	bl	8004b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003cd2:	201f      	movs	r0, #31
 8003cd4:	f000 ff6b 	bl	8004bae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2105      	movs	r1, #5
 8003cdc:	2020      	movs	r0, #32
 8003cde:	f000 ff4a 	bl	8004b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003ce2:	2020      	movs	r0, #32
 8003ce4:	f000 ff63 	bl	8004bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ce8:	bf00      	nop
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40005400 	.word	0x40005400
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40010c00 	.word	0x40010c00

08003cfc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0b      	ldr	r2, [pc, #44]	; (8003d38 <HAL_RTC_MspInit+0x3c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d110      	bne.n	8003d30 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003d0e:	f003 fce3 	bl	80076d8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <HAL_RTC_MspInit+0x40>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <HAL_RTC_MspInit+0x40>)
 8003d18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d1c:	61d3      	str	r3, [r2, #28]
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_RTC_MspInit+0x40>)
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_RTC_MspInit+0x44>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40002800 	.word	0x40002800
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	4242043c 	.word	0x4242043c

08003d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08c      	sub	sp, #48	; 0x30
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4c:	f107 0320 	add.w	r3, r7, #32
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a72      	ldr	r2, [pc, #456]	; (8003f28 <HAL_UART_MspInit+0x1e4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d13a      	bne.n	8003dda <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d64:	4b71      	ldr	r3, [pc, #452]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	4a70      	ldr	r2, [pc, #448]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d6e:	6193      	str	r3, [r2, #24]
 8003d70:	4b6e      	ldr	r3, [pc, #440]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d78:	61fb      	str	r3, [r7, #28]
 8003d7a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7c:	4b6b      	ldr	r3, [pc, #428]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	4a6a      	ldr	r2, [pc, #424]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003d82:	f043 0304 	orr.w	r3, r3, #4
 8003d86:	6193      	str	r3, [r2, #24]
 8003d88:	4b68      	ldr	r3, [pc, #416]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da2:	f107 0320 	add.w	r3, r7, #32
 8003da6:	4619      	mov	r1, r3
 8003da8:	4861      	ldr	r0, [pc, #388]	; (8003f30 <HAL_UART_MspInit+0x1ec>)
 8003daa:	f001 fb9d 	bl	80054e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003db4:	2300      	movs	r3, #0
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dbc:	f107 0320 	add.w	r3, r7, #32
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	485b      	ldr	r0, [pc, #364]	; (8003f30 <HAL_UART_MspInit+0x1ec>)
 8003dc4:	f001 fb90 	bl	80054e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2105      	movs	r1, #5
 8003dcc:	2025      	movs	r0, #37	; 0x25
 8003dce:	f000 fed2 	bl	8004b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003dd2:	2025      	movs	r0, #37	; 0x25
 8003dd4:	f000 feeb 	bl	8004bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003dd8:	e0a2      	b.n	8003f20 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a55      	ldr	r2, [pc, #340]	; (8003f34 <HAL_UART_MspInit+0x1f0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d15e      	bne.n	8003ea2 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003de4:	4b51      	ldr	r3, [pc, #324]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	4a50      	ldr	r2, [pc, #320]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dee:	61d3      	str	r3, [r2, #28]
 8003df0:	4b4e      	ldr	r3, [pc, #312]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dfc:	4b4b      	ldr	r3, [pc, #300]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	4a4a      	ldr	r2, [pc, #296]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003e02:	f043 0304 	orr.w	r3, r3, #4
 8003e06:	6193      	str	r3, [r2, #24]
 8003e08:	4b48      	ldr	r3, [pc, #288]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e14:	2304      	movs	r3, #4
 8003e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e20:	f107 0320 	add.w	r3, r7, #32
 8003e24:	4619      	mov	r1, r3
 8003e26:	4842      	ldr	r0, [pc, #264]	; (8003f30 <HAL_UART_MspInit+0x1ec>)
 8003e28:	f001 fb5e 	bl	80054e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e30:	2300      	movs	r3, #0
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e38:	f107 0320 	add.w	r3, r7, #32
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	483c      	ldr	r0, [pc, #240]	; (8003f30 <HAL_UART_MspInit+0x1ec>)
 8003e40:	f001 fb52 	bl	80054e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003e44:	4b3c      	ldr	r3, [pc, #240]	; (8003f38 <HAL_UART_MspInit+0x1f4>)
 8003e46:	4a3d      	ldr	r2, [pc, #244]	; (8003f3c <HAL_UART_MspInit+0x1f8>)
 8003e48:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e4a:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <HAL_UART_MspInit+0x1f4>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e50:	4b39      	ldr	r3, [pc, #228]	; (8003f38 <HAL_UART_MspInit+0x1f4>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e56:	4b38      	ldr	r3, [pc, #224]	; (8003f38 <HAL_UART_MspInit+0x1f4>)
 8003e58:	2280      	movs	r2, #128	; 0x80
 8003e5a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e5c:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <HAL_UART_MspInit+0x1f4>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e62:	4b35      	ldr	r3, [pc, #212]	; (8003f38 <HAL_UART_MspInit+0x1f4>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003e68:	4b33      	ldr	r3, [pc, #204]	; (8003f38 <HAL_UART_MspInit+0x1f4>)
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e6e:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <HAL_UART_MspInit+0x1f4>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e74:	4830      	ldr	r0, [pc, #192]	; (8003f38 <HAL_UART_MspInit+0x1f4>)
 8003e76:	f000 fea9 	bl	8004bcc <HAL_DMA_Init>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8003e80:	f7ff feb0 	bl	8003be4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a2c      	ldr	r2, [pc, #176]	; (8003f38 <HAL_UART_MspInit+0x1f4>)
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
 8003e8a:	4a2b      	ldr	r2, [pc, #172]	; (8003f38 <HAL_UART_MspInit+0x1f4>)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003e90:	2200      	movs	r2, #0
 8003e92:	2105      	movs	r1, #5
 8003e94:	2026      	movs	r0, #38	; 0x26
 8003e96:	f000 fe6e 	bl	8004b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e9a:	2026      	movs	r0, #38	; 0x26
 8003e9c:	f000 fe87 	bl	8004bae <HAL_NVIC_EnableIRQ>
}
 8003ea0:	e03e      	b.n	8003f20 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a26      	ldr	r2, [pc, #152]	; (8003f40 <HAL_UART_MspInit+0x1fc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d139      	bne.n	8003f20 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003eac:	4b1f      	ldr	r3, [pc, #124]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	4a1e      	ldr	r2, [pc, #120]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003eb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb6:	61d3      	str	r3, [r2, #28]
 8003eb8:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec4:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003eca:	f043 0308 	orr.w	r3, r3, #8
 8003ece:	6193      	str	r3, [r2, #24]
 8003ed0:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <HAL_UART_MspInit+0x1e8>)
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eea:	f107 0320 	add.w	r3, r7, #32
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4814      	ldr	r0, [pc, #80]	; (8003f44 <HAL_UART_MspInit+0x200>)
 8003ef2:	f001 faf9 	bl	80054e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003ef6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003efc:	2300      	movs	r3, #0
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f04:	f107 0320 	add.w	r3, r7, #32
 8003f08:	4619      	mov	r1, r3
 8003f0a:	480e      	ldr	r0, [pc, #56]	; (8003f44 <HAL_UART_MspInit+0x200>)
 8003f0c:	f001 faec 	bl	80054e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003f10:	2200      	movs	r2, #0
 8003f12:	2105      	movs	r1, #5
 8003f14:	2027      	movs	r0, #39	; 0x27
 8003f16:	f000 fe2e 	bl	8004b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003f1a:	2027      	movs	r0, #39	; 0x27
 8003f1c:	f000 fe47 	bl	8004bae <HAL_NVIC_EnableIRQ>
}
 8003f20:	bf00      	nop
 8003f22:	3730      	adds	r7, #48	; 0x30
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40013800 	.word	0x40013800
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40010800 	.word	0x40010800
 8003f34:	40004400 	.word	0x40004400
 8003f38:	200035f0 	.word	0x200035f0
 8003f3c:	4002006c 	.word	0x4002006c
 8003f40:	40004800 	.word	0x40004800
 8003f44:	40010c00 	.word	0x40010c00

08003f48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	; 0x30
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	2019      	movs	r0, #25
 8003f5e:	f000 fe0a 	bl	8004b76 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003f62:	2019      	movs	r0, #25
 8003f64:	f000 fe23 	bl	8004bae <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003f68:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <HAL_InitTick+0x9c>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <HAL_InitTick+0x9c>)
 8003f6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f72:	6193      	str	r3, [r2, #24]
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_InitTick+0x9c>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f80:	f107 0210 	add.w	r2, r7, #16
 8003f84:	f107 0314 	add.w	r3, r7, #20
 8003f88:	4611      	mov	r1, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f004 f8c6 	bl	800811c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003f90:	f004 f8b0 	bl	80080f4 <HAL_RCC_GetPCLK2Freq>
 8003f94:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	4a13      	ldr	r2, [pc, #76]	; (8003fe8 <HAL_InitTick+0xa0>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	0c9b      	lsrs	r3, r3, #18
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003fa4:	4b11      	ldr	r3, [pc, #68]	; (8003fec <HAL_InitTick+0xa4>)
 8003fa6:	4a12      	ldr	r2, [pc, #72]	; (8003ff0 <HAL_InitTick+0xa8>)
 8003fa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <HAL_InitTick+0xa4>)
 8003fac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fb0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003fb2:	4a0e      	ldr	r2, [pc, #56]	; (8003fec <HAL_InitTick+0xa4>)
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_InitTick+0xa4>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_InitTick+0xa4>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003fc4:	4809      	ldr	r0, [pc, #36]	; (8003fec <HAL_InitTick+0xa4>)
 8003fc6:	f004 ff1b 	bl	8008e00 <HAL_TIM_Base_Init>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d104      	bne.n	8003fda <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003fd0:	4806      	ldr	r0, [pc, #24]	; (8003fec <HAL_InitTick+0xa4>)
 8003fd2:	f004 ff6d 	bl	8008eb0 <HAL_TIM_Base_Start_IT>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	e000      	b.n	8003fdc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3730      	adds	r7, #48	; 0x30
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	431bde83 	.word	0x431bde83
 8003fec:	2000380c 	.word	0x2000380c
 8003ff0:	40012c00 	.word	0x40012c00

08003ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ff8:	e7fe      	b.n	8003ff8 <NMI_Handler+0x4>

08003ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ffe:	e7fe      	b.n	8003ffe <HardFault_Handler+0x4>

08004000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004004:	e7fe      	b.n	8004004 <MemManage_Handler+0x4>

08004006 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800400a:	e7fe      	b.n	800400a <BusFault_Handler+0x4>

0800400c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004010:	e7fe      	b.n	8004010 <UsageFault_Handler+0x4>

08004012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
	...

08004020 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004024:	4802      	ldr	r0, [pc, #8]	; (8004030 <DMA1_Channel6_IRQHandler+0x10>)
 8004026:	f000 ffe9 	bl	8004ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	200035f0 	.word	0x200035f0

08004034 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004038:	4802      	ldr	r0, [pc, #8]	; (8004044 <TIM1_UP_IRQHandler+0x10>)
 800403a:	f004 ff93 	bl	8008f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	2000380c 	.word	0x2000380c

08004048 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800404c:	4802      	ldr	r0, [pc, #8]	; (8004058 <I2C1_EV_IRQHandler+0x10>)
 800404e:	f001 fe93 	bl	8005d78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	200036a8 	.word	0x200036a8

0800405c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004060:	4802      	ldr	r0, [pc, #8]	; (800406c <I2C1_ER_IRQHandler+0x10>)
 8004062:	f001 fffa 	bl	800605a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200036a8 	.word	0x200036a8

08004070 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004074:	4802      	ldr	r0, [pc, #8]	; (8004080 <USART1_IRQHandler+0x10>)
 8004076:	f005 fb93 	bl	80097a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20003704 	.word	0x20003704

08004084 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004088:	4802      	ldr	r0, [pc, #8]	; (8004094 <USART2_IRQHandler+0x10>)
 800408a:	f005 fb89 	bl	80097a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20003794 	.word	0x20003794

08004098 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800409c:	4802      	ldr	r0, [pc, #8]	; (80040a8 <USART3_IRQHandler+0x10>)
 800409e:	f005 fb7f 	bl	80097a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20003634 	.word	0x20003634

080040ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
	return 1;
 80040b0:	2301      	movs	r3, #1
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <_kill>:

int _kill(int pid, int sig)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040c4:	f009 fb30 	bl	800d728 <__errno>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2216      	movs	r2, #22
 80040cc:	601a      	str	r2, [r3, #0]
	return -1;
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <_exit>:

void _exit (int status)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040e2:	f04f 31ff 	mov.w	r1, #4294967295
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff ffe7 	bl	80040ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80040ec:	e7fe      	b.n	80040ec <_exit+0x12>

080040ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
 80040fe:	e00a      	b.n	8004116 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004100:	f3af 8000 	nop.w
 8004104:	4601      	mov	r1, r0
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	60ba      	str	r2, [r7, #8]
 800410c:	b2ca      	uxtb	r2, r1
 800410e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	3301      	adds	r3, #1
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	dbf0      	blt.n	8004100 <_read+0x12>
	}

return len;
 800411e:	687b      	ldr	r3, [r7, #4]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	e009      	b.n	800414e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	60ba      	str	r2, [r7, #8]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd fada 	bl	80016fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	3301      	adds	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	429a      	cmp	r2, r3
 8004154:	dbf1      	blt.n	800413a <_write+0x12>
	}
	return len;
 8004156:	687b      	ldr	r3, [r7, #4]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <_close>:

int _close(int file)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	return -1;
 8004168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004186:	605a      	str	r2, [r3, #4]
	return 0;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <_isatty>:

int _isatty(int file)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
	return 1;
 800419c:	2301      	movs	r3, #1
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
	return 0;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041c8:	4a14      	ldr	r2, [pc, #80]	; (800421c <_sbrk+0x5c>)
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <_sbrk+0x60>)
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <_sbrk+0x64>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <_sbrk+0x64>)
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <_sbrk+0x68>)
 80041e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041e2:	4b10      	ldr	r3, [pc, #64]	; (8004224 <_sbrk+0x64>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d207      	bcs.n	8004200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041f0:	f009 fa9a 	bl	800d728 <__errno>
 80041f4:	4603      	mov	r3, r0
 80041f6:	220c      	movs	r2, #12
 80041f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041fa:	f04f 33ff 	mov.w	r3, #4294967295
 80041fe:	e009      	b.n	8004214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004200:	4b08      	ldr	r3, [pc, #32]	; (8004224 <_sbrk+0x64>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <_sbrk+0x64>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	4a05      	ldr	r2, [pc, #20]	; (8004224 <_sbrk+0x64>)
 8004210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20010000 	.word	0x20010000
 8004220:	00000400 	.word	0x00000400
 8004224:	20001390 	.word	0x20001390
 8004228:	200038a8 	.word	0x200038a8

0800422c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004238:	480c      	ldr	r0, [pc, #48]	; (800426c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800423a:	490d      	ldr	r1, [pc, #52]	; (8004270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800423c:	4a0d      	ldr	r2, [pc, #52]	; (8004274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800423e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004240:	e002      	b.n	8004248 <LoopCopyDataInit>

08004242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004246:	3304      	adds	r3, #4

08004248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800424a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800424c:	d3f9      	bcc.n	8004242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800424e:	4a0a      	ldr	r2, [pc, #40]	; (8004278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004250:	4c0a      	ldr	r4, [pc, #40]	; (800427c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004254:	e001      	b.n	800425a <LoopFillZerobss>

08004256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004258:	3204      	adds	r2, #4

0800425a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800425a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800425c:	d3fb      	bcc.n	8004256 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800425e:	f7ff ffe5 	bl	800422c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004262:	f009 fa79 	bl	800d758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004266:	f7ff f9ed 	bl	8003644 <main>
  bx lr
 800426a:	4770      	bx	lr
  ldr r0, =_sdata
 800426c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004270:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 8004274:	08012820 	.word	0x08012820
  ldr r2, =_sbss
 8004278:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 800427c:	200038a8 	.word	0x200038a8

08004280 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004280:	e7fe      	b.n	8004280 <ADC1_2_IRQHandler>
	...

08004284 <UARTPROTOCOLDEC_Init>:

static void DropFrame(UARTPROTOCOLDEC_SHandle* psHandle, const char* szReason);
static void AcceptFrame(UARTPROTOCOLDEC_SHandle* psHandle);

void UARTPROTOCOLDEC_Init(UARTPROTOCOLDEC_SHandle* psHandle, const UARTPROTOCOLDEC_SConfig* psConfig)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
    assert(psHandle != NULL && psConfig != NULL && psConfig->u8PayloadBuffers != NULL);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d006      	beq.n	80042a2 <UARTPROTOCOLDEC_Init+0x1e>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <UARTPROTOCOLDEC_Init+0x1e>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d105      	bne.n	80042ae <UARTPROTOCOLDEC_Init+0x2a>
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <UARTPROTOCOLDEC_Init+0x38>)
 80042a4:	4a06      	ldr	r2, [pc, #24]	; (80042c0 <UARTPROTOCOLDEC_Init+0x3c>)
 80042a6:	210c      	movs	r1, #12
 80042a8:	4806      	ldr	r0, [pc, #24]	; (80042c4 <UARTPROTOCOLDEC_Init+0x40>)
 80042aa:	f009 fa1f 	bl	800d6ec <__assert_func>
    psHandle->psConfig = psConfig;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	619a      	str	r2, [r3, #24]
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	08011a20 	.word	0x08011a20
 80042c0:	080123b8 	.word	0x080123b8
 80042c4:	08011a6c 	.word	0x08011a6c

080042c8 <UARTPROTOCOLDEC_Reset>:

void UARTPROTOCOLDEC_Reset(UARTPROTOCOLDEC_SHandle* psHandle)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
    psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingForStartByte;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
    psHandle->u16PayloadCount = 0;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	805a      	strh	r2, [r3, #2]

    psHandle->s64StartTimeMS = 0;
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    psHandle->u8CurrentFrameID = 0;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	741a      	strb	r2, [r3, #16]

    psHandle->u8ChecksumCalculation = 0;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	751a      	strb	r2, [r3, #20]
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <UARTPROTOCOLDEC_HandleIn>:

void UARTPROTOCOLDEC_HandleIn(UARTPROTOCOLDEC_SHandle* psHandle, const uint8_t* u8Datas, uint16_t u16DataLen)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
    for(uint32_t i = 0; i < u16DataLen; i++)
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e00a      	b.n	800432a <UARTPROTOCOLDEC_HandleIn+0x2a>
        AddByte(psHandle, u8Datas[i]);
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	4413      	add	r3, r2
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	4619      	mov	r1, r3
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f80c 	bl	800433c <AddByte>
    for(uint32_t i = 0; i < u16DataLen; i++)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	3301      	adds	r3, #1
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	429a      	cmp	r2, r3
 8004330:	d3f0      	bcc.n	8004314 <UARTPROTOCOLDEC_HandleIn+0x14>
}
 8004332:	bf00      	nop
 8004334:	bf00      	nop
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <AddByte>:

static void AddByte(UARTPROTOCOLDEC_SHandle* psHandle, uint8_t u8)
{
 800433c:	b5b0      	push	{r4, r5, r7, lr}
 800433e:	b098      	sub	sp, #96	; 0x60
 8004340:	af02      	add	r7, sp, #8
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	70fb      	strb	r3, [r7, #3]
    // Timeout is supported but optional ...
    if (psHandle->eStep != UARTPROTOCOLDEC_ESTEP_WaitingForStartByte)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d026      	beq.n	800439e <AddByte+0x62>
    {
        if (psHandle->psConfig->fnGetTimerCountMSCb != NULL &&
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d021      	beq.n	800439e <AddByte+0x62>
            psHandle->psConfig->u32FrameReceiveTimeOutMS > 0)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	689b      	ldr	r3, [r3, #8]
        if (psHandle->psConfig->fnGetTimerCountMSCb != NULL &&
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01c      	beq.n	800439e <AddByte+0x62>
        {       
            const int64_t s64TimeDiffMS = psHandle->psConfig->fnGetTimerCountMSCb(psHandle) - psHandle->s64StartTimeMS;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	4798      	blx	r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004374:	1a84      	subs	r4, r0, r2
 8004376:	eb61 0503 	sbc.w	r5, r1, r3
 800437a:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
            if (s64TimeDiffMS > psHandle->psConfig->u32FrameReceiveTimeOutMS)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4618      	mov	r0, r3
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800438e:	4290      	cmp	r0, r2
 8004390:	eb71 0303 	sbcs.w	r3, r1, r3
 8004394:	da03      	bge.n	800439e <AddByte+0x62>
            {
                // We don't break here on purpose, we give it a chance to start a new frame.
                DropFrame(psHandle, "Timeout");
 8004396:	4973      	ldr	r1, [pc, #460]	; (8004564 <AddByte+0x228>)
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f909 	bl	80045b0 <DropFrame>
            }
        }
    }

    switch(psHandle->eStep)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b06      	cmp	r3, #6
 80043a4:	f200 80d5 	bhi.w	8004552 <AddByte+0x216>
 80043a8:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <AddByte+0x74>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	080043cd 	.word	0x080043cd
 80043b4:	08004417 	.word	0x08004417
 80043b8:	08004433 	.word	0x08004433
 80043bc:	08004451 	.word	0x08004451
 80043c0:	080044b7 	.word	0x080044b7
 80043c4:	080044f5 	.word	0x080044f5
 80043c8:	08004535 	.word	0x08004535
    {
        case UARTPROTOCOLDEC_ESTEP_WaitingForStartByte:
        {
            // Wait until we get a start byte ...
            if (u8 == UARTPROTOCOLCOMMON_START_BYTE)
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	2bcc      	cmp	r3, #204	; 0xcc
 80043d0:	f040 80c1 	bne.w	8004556 <AddByte+0x21a>
            {
                psHandle->u16CurrentFramePayloadLen = 0;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	825a      	strh	r2, [r3, #18]
                psHandle->u8ChecksumCalculation = 0;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	751a      	strb	r2, [r3, #20]

                // IF we support timeout ...
                if (psHandle->psConfig->fnGetTimerCountMSCb != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <AddByte+0xc4>
                    psHandle->s64StartTimeMS = psHandle->psConfig->fnGetTimerCountMSCb(psHandle);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80043fe:	e006      	b.n	800440e <AddByte+0xd2>
                else
                    psHandle->s64StartTimeMS = 0;
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	e9c1 2302 	strd	r2, r3, [r1, #8]

                psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingFrameID;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]
            }
            break;
 8004414:	e09f      	b.n	8004556 <AddByte+0x21a>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingFrameID:
        {
            psHandle->u8ChecksumCalculation += u8;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7d1a      	ldrb	r2, [r3, #20]
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	4413      	add	r3, r2
 800441e:	b2da      	uxtb	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	751a      	strb	r2, [r3, #20]
            psHandle->u8CurrentFrameID = u8;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	741a      	strb	r2, [r3, #16]
            psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingPayloadLengthB0;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2202      	movs	r2, #2
 800442e:	701a      	strb	r2, [r3, #0]
            break;
 8004430:	e094      	b.n	800455c <AddByte+0x220>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingPayloadLengthB0:
        {
            psHandle->u8ChecksumCalculation += u8;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	7d1a      	ldrb	r2, [r3, #20]
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	4413      	add	r3, r2
 800443a:	b2da      	uxtb	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	751a      	strb	r2, [r3, #20]
            psHandle->u16CurrentFramePayloadLen = u8;
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	b29a      	uxth	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	825a      	strh	r2, [r3, #18]

            psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingPayloadLengthB1;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2203      	movs	r2, #3
 800444c:	701a      	strb	r2, [r3, #0]
            break;
 800444e:	e085      	b.n	800455c <AddByte+0x220>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingPayloadLengthB1:
        {
            psHandle->u8ChecksumCalculation += u8;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	7d1a      	ldrb	r2, [r3, #20]
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	4413      	add	r3, r2
 8004458:	b2da      	uxtb	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	751a      	strb	r2, [r3, #20]
            // Little endian ...
            psHandle->u16CurrentFramePayloadLen |= (uint16_t)((uint16_t)u8 << 8);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8a5a      	ldrh	r2, [r3, #18]
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	b29b      	uxth	r3, r3
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	b29b      	uxth	r3, r3
 800446a:	4313      	orrs	r3, r2
 800446c:	b29a      	uxth	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	825a      	strh	r2, [r3, #18]

            if (psHandle->u16CurrentFramePayloadLen > UARTPROTOCOLCOMMON_MAXPAYLOAD)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8a5b      	ldrh	r3, [r3, #18]
 8004476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447a:	d904      	bls.n	8004486 <AddByte+0x14a>
            {
                DropFrame(psHandle, "Payload is too big for the protocol");
 800447c:	493a      	ldr	r1, [pc, #232]	; (8004568 <AddByte+0x22c>)
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f896 	bl	80045b0 <DropFrame>
                break;
 8004484:	e06a      	b.n	800455c <AddByte+0x220>
            }
            
            if (psHandle->u16CurrentFramePayloadLen > psHandle->psConfig->u16PayloadBufferLen)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8a5a      	ldrh	r2, [r3, #18]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	889b      	ldrh	r3, [r3, #4]
 8004490:	429a      	cmp	r2, r3
 8004492:	d904      	bls.n	800449e <AddByte+0x162>
            {
                DropFrame(psHandle, "Payload is too big for the buffer");
 8004494:	4935      	ldr	r1, [pc, #212]	; (800456c <AddByte+0x230>)
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f88a 	bl	80045b0 <DropFrame>
                break;
 800449c:	e05e      	b.n	800455c <AddByte+0x220>
            }

            // 0 byte payload are supported
            if (psHandle->u16CurrentFramePayloadLen == 0)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8a5b      	ldrh	r3, [r3, #18]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d103      	bne.n	80044ae <AddByte+0x172>
            	psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingChecksum;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2205      	movs	r2, #5
 80044aa:	701a      	strb	r2, [r3, #0]
            else
            	psHandle->eStep = UARTPROTOCOLDEC_ESTEP_GettingPayload;
            break;
 80044ac:	e056      	b.n	800455c <AddByte+0x220>
            	psHandle->eStep = UARTPROTOCOLDEC_ESTEP_GettingPayload;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2204      	movs	r2, #4
 80044b2:	701a      	strb	r2, [r3, #0]
            break;
 80044b4:	e052      	b.n	800455c <AddByte+0x220>
        }
        case UARTPROTOCOLDEC_ESTEP_GettingPayload:
        {
            psHandle->psConfig->u8PayloadBuffers[psHandle->u16PayloadCount] = u8;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	8852      	ldrh	r2, [r2, #2]
 80044c0:	4413      	add	r3, r2
 80044c2:	78fa      	ldrb	r2, [r7, #3]
 80044c4:	701a      	strb	r2, [r3, #0]
            psHandle->u8ChecksumCalculation += u8;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	7d1a      	ldrb	r2, [r3, #20]
 80044ca:	78fb      	ldrb	r3, [r7, #3]
 80044cc:	4413      	add	r3, r2
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	751a      	strb	r2, [r3, #20]
            psHandle->u16PayloadCount++;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	885b      	ldrh	r3, [r3, #2]
 80044d8:	3301      	adds	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	805a      	strh	r2, [r3, #2]

            // Complete payload detected ...
            if (psHandle->u16PayloadCount >= (uint32_t)psHandle->u16CurrentFramePayloadLen)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	885a      	ldrh	r2, [r3, #2]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8a5b      	ldrh	r3, [r3, #18]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d336      	bcc.n	800455a <AddByte+0x21e>
                psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingChecksum;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2205      	movs	r2, #5
 80044f0:	701a      	strb	r2, [r3, #0]
            break;
 80044f2:	e032      	b.n	800455a <AddByte+0x21e>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingChecksum:
        {
            // Bitwise operation on calculated checksum ...
            // Checksum arrived ...
            const uint8_t u8CurrChecksum = ~psHandle->u8ChecksumCalculation;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7d1b      	ldrb	r3, [r3, #20]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (u8CurrChecksum != u8)
 80044fe:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	429a      	cmp	r2, r3
 8004506:	d011      	beq.n	800452c <AddByte+0x1f0>
            {
                char tmp[64+1];
                snprintf(tmp, sizeof(tmp), "Invalid checksum, expected: %2X, got: %2X", u8CurrChecksum, u8);
 8004508:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	f107 000c 	add.w	r0, r7, #12
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <AddByte+0x234>)
 8004518:	2141      	movs	r1, #65	; 0x41
 800451a:	f009 ff27 	bl	800e36c <sniprintf>
                DropFrame(psHandle, tmp);
 800451e:	f107 030c 	add.w	r3, r7, #12
 8004522:	4619      	mov	r1, r3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f843 	bl	80045b0 <DropFrame>
                break;
 800452a:	e017      	b.n	800455c <AddByte+0x220>
            }
            
            psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingStopByte;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2206      	movs	r2, #6
 8004530:	701a      	strb	r2, [r3, #0]
            break;
 8004532:	e013      	b.n	800455c <AddByte+0x220>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingStopByte:
        {
            // If we reach this point, the checksum passed
            if (u8 != UARTPROTOCOLCOMMON_STOP_BYTE)
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	2b99      	cmp	r3, #153	; 0x99
 8004538:	d004      	beq.n	8004544 <AddByte+0x208>
            {
                DropFrame(psHandle, "Not a stop byte");
 800453a:	490e      	ldr	r1, [pc, #56]	; (8004574 <AddByte+0x238>)
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f837 	bl	80045b0 <DropFrame>
                break;
 8004542:	e00b      	b.n	800455c <AddByte+0x220>
            }

            // If we reach this point it's good.
            AcceptFrame(psHandle);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f817 	bl	8004578 <AcceptFrame>
            UARTPROTOCOLDEC_Reset(psHandle);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff febc 	bl	80042c8 <UARTPROTOCOLDEC_Reset>
            break;
 8004550:	e004      	b.n	800455c <AddByte+0x220>
        }
        default:
        	break;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <AddByte+0x220>
            break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <AddByte+0x220>
            break;
 800455a:	bf00      	nop
    }
}
 800455c:	bf00      	nop
 800455e:	3758      	adds	r7, #88	; 0x58
 8004560:	46bd      	mov	sp, r7
 8004562:	bdb0      	pop	{r4, r5, r7, pc}
 8004564:	08011a9c 	.word	0x08011a9c
 8004568:	08011aa4 	.word	0x08011aa4
 800456c:	08011ac8 	.word	0x08011ac8
 8004570:	08011aec 	.word	0x08011aec
 8004574:	08011b18 	.word	0x08011b18

08004578 <AcceptFrame>:

static void AcceptFrame(UARTPROTOCOLDEC_SHandle* psHandle)
{
 8004578:	b590      	push	{r4, r7, lr}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
    if (psHandle->psConfig->fnAcceptFrameCb != NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00b      	beq.n	80045a2 <AcceptFrame+0x2a>
        psHandle->psConfig->fnAcceptFrameCb(psHandle, psHandle->u8CurrentFrameID, psHandle->psConfig->u8PayloadBuffers, psHandle->u16PayloadCount);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	68dc      	ldr	r4, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7c19      	ldrb	r1, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	885b      	ldrh	r3, [r3, #2]
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	47a0      	blx	r4
    UARTPROTOCOLDEC_Reset(psHandle);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff fe90 	bl	80042c8 <UARTPROTOCOLDEC_Reset>
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd90      	pop	{r4, r7, pc}

080045b0 <DropFrame>:

static void DropFrame(UARTPROTOCOLDEC_SHandle* psHandle, const char* szReason)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
    if (psHandle->psConfig->fnDropFrameCb != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <DropFrame+0x20>
        psHandle->psConfig->fnDropFrameCb(psHandle, szReason);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	6839      	ldr	r1, [r7, #0]
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4798      	blx	r3
    UARTPROTOCOLDEC_Reset(psHandle);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff fe79 	bl	80042c8 <UARTPROTOCOLDEC_Reset>
}
 80045d6:	bf00      	nop
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <UARTPROTOCOLENC_Init>:
#include <assert.h>
#include "uart_protocol_enc.h"

void UARTPROTOCOLENC_Init(UARTPROTOCOLENC_SHandle* psHandle, const UARTPROTOCOLENC_SConfig* psConfig)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
    assert(psHandle != NULL && psConfig != NULL);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <UARTPROTOCOLENC_Init+0x16>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <UARTPROTOCOLENC_Init+0x22>
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <UARTPROTOCOLENC_Init+0x44>)
 80045f8:	4a0b      	ldr	r2, [pc, #44]	; (8004628 <UARTPROTOCOLENC_Init+0x48>)
 80045fa:	2106      	movs	r1, #6
 80045fc:	480b      	ldr	r0, [pc, #44]	; (800462c <UARTPROTOCOLENC_Init+0x4c>)
 80045fe:	f009 f875 	bl	800d6ec <__assert_func>
    assert(psConfig->fnWriteCb != NULL);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d105      	bne.n	8004616 <UARTPROTOCOLENC_Init+0x36>
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <UARTPROTOCOLENC_Init+0x50>)
 800460c:	4a06      	ldr	r2, [pc, #24]	; (8004628 <UARTPROTOCOLENC_Init+0x48>)
 800460e:	2107      	movs	r1, #7
 8004610:	4806      	ldr	r0, [pc, #24]	; (800462c <UARTPROTOCOLENC_Init+0x4c>)
 8004612:	f009 f86b 	bl	800d6ec <__assert_func>

    psHandle->psConfig = psConfig;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	601a      	str	r2, [r3, #0]
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	08011b28 	.word	0x08011b28
 8004628:	080123d0 	.word	0x080123d0
 800462c:	08011b50 	.word	0x08011b50
 8004630:	08011b80 	.word	0x08011b80

08004634 <UARTPROTOCOLENC_Send>:

bool UARTPROTOCOLENC_Send(UARTPROTOCOLENC_SHandle* psHandle, uint8_t u8ID, const uint8_t u8Payloads[], uint16_t u16PayloadLen)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	607a      	str	r2, [r7, #4]
 800463e:	461a      	mov	r2, r3
 8004640:	460b      	mov	r3, r1
 8004642:	72fb      	strb	r3, [r7, #11]
 8004644:	4613      	mov	r3, r2
 8004646:	813b      	strh	r3, [r7, #8]
    if (u16PayloadLen > UARTPROTOCOLCOMMON_MAXPAYLOAD)
 8004648:	893b      	ldrh	r3, [r7, #8]
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464e:	d901      	bls.n	8004654 <UARTPROTOCOLENC_Send+0x20>
        return false;
 8004650:	2300      	movs	r3, #0
 8004652:	e070      	b.n	8004736 <UARTPROTOCOLENC_Send+0x102>

    uint8_t u8Checksum = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	76fb      	strb	r3, [r7, #27]
    const uint8_t u8STARTBYTE = UARTPROTOCOLCOMMON_START_BYTE;
 8004658:	23cc      	movs	r3, #204	; 0xcc
 800465a:	76bb      	strb	r3, [r7, #26]
    psHandle->psConfig->fnWriteCb(psHandle, &u8STARTBYTE, 1);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f107 011a 	add.w	r1, r7, #26
 8004666:	2201      	movs	r2, #1
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	4798      	blx	r3
    psHandle->psConfig->fnWriteCb(psHandle, &u8ID, 1);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f107 010b 	add.w	r1, r7, #11
 8004676:	2201      	movs	r2, #1
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	4798      	blx	r3
    u8Checksum += u8ID;
 800467c:	7efa      	ldrb	r2, [r7, #27]
 800467e:	7afb      	ldrb	r3, [r7, #11]
 8004680:	4413      	add	r3, r2
 8004682:	b2db      	uxtb	r3, r3
 8004684:	76fb      	strb	r3, [r7, #27]
    // Payload in LITTLE ENDIAN format
    const uint8_t u8LenB0 = (uint8_t)(u16PayloadLen & 0xFF);
 8004686:	893b      	ldrh	r3, [r7, #8]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	767b      	strb	r3, [r7, #25]
    psHandle->psConfig->fnWriteCb(psHandle, &u8LenB0, 1);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f107 0119 	add.w	r1, r7, #25
 8004696:	2201      	movs	r2, #1
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	4798      	blx	r3
    const uint8_t u8LenB1 = (uint8_t)((u16PayloadLen >> 8) & 0xFF);
 800469c:	893b      	ldrh	r3, [r7, #8]
 800469e:	0a1b      	lsrs	r3, r3, #8
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	763b      	strb	r3, [r7, #24]
    psHandle->psConfig->fnWriteCb(psHandle, &u8LenB1, 1);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f107 0118 	add.w	r1, r7, #24
 80046b0:	2201      	movs	r2, #1
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	4798      	blx	r3
    // Calculate checksum on the fly ...
    if (u8Payloads != NULL && u16PayloadLen > 0)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d025      	beq.n	8004708 <UARTPROTOCOLENC_Send+0xd4>
 80046bc:	893b      	ldrh	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d022      	beq.n	8004708 <UARTPROTOCOLENC_Send+0xd4>
    {
        u8Checksum += u8LenB0;
 80046c2:	7efa      	ldrb	r2, [r7, #27]
 80046c4:	7e7b      	ldrb	r3, [r7, #25]
 80046c6:	4413      	add	r3, r2
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	76fb      	strb	r3, [r7, #27]
        u8Checksum += u8LenB1;
 80046cc:	7efa      	ldrb	r2, [r7, #27]
 80046ce:	7e3b      	ldrb	r3, [r7, #24]
 80046d0:	4413      	add	r3, r2
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	76fb      	strb	r3, [r7, #27]
        for(int i = 0; i < u16PayloadLen; i++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	e00a      	b.n	80046f2 <UARTPROTOCOLENC_Send+0xbe>
            u8Checksum += u8Payloads[i];
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	7efb      	ldrb	r3, [r7, #27]
 80046e6:	4413      	add	r3, r2
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	76fb      	strb	r3, [r7, #27]
        for(int i = 0; i < u16PayloadLen; i++)
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	3301      	adds	r3, #1
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	893b      	ldrh	r3, [r7, #8]
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	dbf0      	blt.n	80046dc <UARTPROTOCOLENC_Send+0xa8>
        psHandle->psConfig->fnWriteCb(psHandle, u8Payloads, u16PayloadLen);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	893a      	ldrh	r2, [r7, #8]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	4798      	blx	r3
    }
    u8Checksum = ~u8Checksum;
 8004708:	7efb      	ldrb	r3, [r7, #27]
 800470a:	43db      	mvns	r3, r3
 800470c:	b2db      	uxtb	r3, r3
 800470e:	76fb      	strb	r3, [r7, #27]

    psHandle->psConfig->fnWriteCb(psHandle, &u8Checksum, 1);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f107 011b 	add.w	r1, r7, #27
 800471a:	2201      	movs	r2, #1
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	4798      	blx	r3
    const uint8_t u8STOPBYTE = UARTPROTOCOLCOMMON_STOP_BYTE;
 8004720:	2399      	movs	r3, #153	; 0x99
 8004722:	75fb      	strb	r3, [r7, #23]
    psHandle->psConfig->fnWriteCb(psHandle, &u8STOPBYTE, 1);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f107 0117 	add.w	r1, r7, #23
 800472e:	2201      	movs	r2, #1
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	4798      	blx	r3
    return true;
 8004734:	2301      	movs	r3, #1
}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <UFEC23ENDEC_A2AReqPingAliveEncode>:
{
    
}

int32_t UFEC23ENDEC_A2AReqPingAliveEncode(uint8_t u8Dst[], uint32_t u32DstLen, const UFEC23ENDEC_A2AReqPingAlive* pSrc)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
    if (u32DstLen < UFEC23ENDEC_A2AREQPINGALIVE_COUNT)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d801      	bhi.n	8004754 <UFEC23ENDEC_A2AReqPingAliveEncode+0x16>
        return 0;
 8004750:	2300      	movs	r3, #0
 8004752:	e005      	b.n	8004760 <UFEC23ENDEC_A2AReqPingAliveEncode+0x22>
    memcpy(u8Dst, &pSrc->u32Ping, sizeof(uint32_t));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	601a      	str	r2, [r3, #0]
    return sizeof(uint32_t);
 800475e:	2304      	movs	r3, #4
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr

0800476a <UFEC23ENDEC_A2AReqPingAliveDecode>:

bool UFEC23ENDEC_A2AReqPingAliveDecode(UFEC23ENDEC_A2AReqPingAlive* pDst, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 800476a:	b480      	push	{r7}
 800476c:	b085      	sub	sp, #20
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
    if (u32DataLen < UFEC23ENDEC_A2AREQPINGALIVE_COUNT)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d801      	bhi.n	8004780 <UFEC23ENDEC_A2AReqPingAliveDecode+0x16>
        return false;
 800477c:	2300      	movs	r3, #0
 800477e:	e004      	b.n	800478a <UFEC23ENDEC_A2AReqPingAliveDecode+0x20>
    memcpy(&pDst->u32Ping, u8Datas, sizeof(uint32_t));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	601a      	str	r2, [r3, #0]
    return true;
 8004788:	2301      	movs	r3, #1
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <UFEC23ENDEC_C2SGetParameterDecode>:
    u8Dst[n++] = (uint8_t)pSrc->eIterateOp;
    return n;
}

bool UFEC23ENDEC_C2SGetParameterDecode(UFEC23ENDEC_C2SGetParameter* pDst, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
    if (u32DataLen < UFEC23ENDEC_C2SGETPARAMETER_COUNT)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <UFEC23ENDEC_C2SGetParameterDecode+0x16>
        return false;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e00a      	b.n	80047c0 <UFEC23ENDEC_C2SGetParameterDecode+0x2c>
    pDst->eIterateOp = (UFEC23ENDEC_EITERATEOP)u8Datas[0];
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	781a      	ldrb	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	701a      	strb	r2, [r3, #0]
    if (pDst->eIterateOp >= UFEC23ENDEC_EITERATEOP_Count)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d901      	bls.n	80047be <UFEC23ENDEC_C2SGetParameterDecode+0x2a>
        return false;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e000      	b.n	80047c0 <UFEC23ENDEC_C2SGetParameterDecode+0x2c>
    return true;
 80047be:	2301      	movs	r3, #1
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr

080047ca <UFEC23ENDEC_S2CGetParameterRespEncode>:
    pDst->bIsFanModeAuto = (u8Datas[3] & 0x02) ? 0x01 : 0x00;
    return true;
}

int32_t UFEC23ENDEC_S2CGetParameterRespEncode(uint8_t u8Dst[], uint32_t u32DstLen, const UFEC23ENDEC_S2CReqParameterGetResp* pSrc)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b088      	sub	sp, #32
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
    if (u32DstLen < UFEC23ENDEC_S2CREQPARAMETERGETRESP_MAX_COUNT)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b4a      	cmp	r3, #74	; 0x4a
 80047da:	d801      	bhi.n	80047e0 <UFEC23ENDEC_S2CGetParameterRespEncode+0x16>
        return 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	e07f      	b.n	80048e0 <UFEC23ENDEC_S2CGetParameterRespEncode+0x116>
 
    const UFEC23ENDEC_SEntry* psEntry = &pSrc->sEntry;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	61fb      	str	r3, [r7, #28]
	int32_t n = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61bb      	str	r3, [r7, #24]
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <UFEC23ENDEC_S2CGetParameterRespEncode+0x2c>
 80047f2:	2201      	movs	r2, #1
 80047f4:	e000      	b.n	80047f8 <UFEC23ENDEC_S2CGetParameterRespEncode+0x2e>
 80047f6:	2200      	movs	r2, #0
                           (pSrc->bIsEOF ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_EOF : 0x00)) |
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <UFEC23ENDEC_S2CGetParameterRespEncode+0x3c>
 8004802:	2302      	movs	r3, #2
 8004804:	e000      	b.n	8004808 <UFEC23ENDEC_S2CGetParameterRespEncode+0x3e>
 8004806:	2300      	movs	r3, #0
 8004808:	4313      	orrs	r3, r2
 800480a:	b25b      	sxtb	r3, r3
                           (pSrc->bIsFirstRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_ISFIRSTRECORD : 0x00);
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
                           (pSrc->bIsEOF ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_EOF : 0x00)) |
 8004812:	2a00      	cmp	r2, #0
 8004814:	d001      	beq.n	800481a <UFEC23ENDEC_S2CGetParameterRespEncode+0x50>
 8004816:	2204      	movs	r2, #4
 8004818:	e000      	b.n	800481c <UFEC23ENDEC_S2CGetParameterRespEncode+0x52>
 800481a:	2200      	movs	r2, #0
 800481c:	4313      	orrs	r3, r2
 800481e:	b259      	sxtb	r1, r3
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	61ba      	str	r2, [r7, #24]
 8004826:	461a      	mov	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
                           (pSrc->bIsEOF ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_EOF : 0x00)) |
 800482c:	b2ca      	uxtb	r2, r1
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 800482e:	701a      	strb	r2, [r3, #0]
	u8Dst[n++] = (uint8_t)psEntry->eParamType;
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	61ba      	str	r2, [r7, #24]
 8004836:	461a      	mov	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	7fd2      	ldrb	r2, [r2, #31]
 8004840:	701a      	strb	r2, [r3, #0]
	const uint8_t u8KeyLen = (uint8_t)strnlen(psEntry->szKey, UFEC23ENDEC_PARAMETERITEM_KEY_LEN+1);
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	211f      	movs	r1, #31
 8004846:	4618      	mov	r0, r3
 8004848:	f009 fdcc 	bl	800e3e4 <strnlen>
 800484c:	4603      	mov	r3, r0
 800484e:	75fb      	strb	r3, [r7, #23]
	if (u8KeyLen > UFEC23ENDEC_PARAMETERITEM_KEY_LEN)
 8004850:	7dfb      	ldrb	r3, [r7, #23]
 8004852:	2b1e      	cmp	r3, #30
 8004854:	d901      	bls.n	800485a <UFEC23ENDEC_S2CGetParameterRespEncode+0x90>
		return 0;
 8004856:	2300      	movs	r3, #0
 8004858:	e042      	b.n	80048e0 <UFEC23ENDEC_S2CGetParameterRespEncode+0x116>
	u8Dst[n++] = (uint8_t)u8KeyLen;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	61ba      	str	r2, [r7, #24]
 8004860:	461a      	mov	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	7dfa      	ldrb	r2, [r7, #23]
 8004868:	701a      	strb	r2, [r3, #0]
    memcpy(u8Dst + n, psEntry->szKey, (size_t)u8KeyLen);
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	69f9      	ldr	r1, [r7, #28]
 8004872:	7dfa      	ldrb	r2, [r7, #23]
 8004874:	4618      	mov	r0, r3
 8004876:	f008 ff93 	bl	800d7a0 <memcpy>
    n += u8KeyLen;
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4413      	add	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
    if (psEntry->eParamType == UFEC23ENDEC_EPARAMTYPE_Int32)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	7fdb      	ldrb	r3, [r3, #31]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d129      	bne.n	80048de <UFEC23ENDEC_S2CGetParameterRespEncode+0x114>
    {
        memcpy(&u8Dst[n], &psEntry->uType.sInt32.s32Default, sizeof(int32_t));
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	3220      	adds	r2, #32
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	3304      	adds	r3, #4
 800489c:	61bb      	str	r3, [r7, #24]
        memcpy(&u8Dst[n], &psEntry->uType.sInt32.s32Min, sizeof(int32_t));
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	3224      	adds	r2, #36	; 0x24
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	3304      	adds	r3, #4
 80048b0:	61bb      	str	r3, [r7, #24]
        memcpy(&u8Dst[n], &psEntry->uType.sInt32.s32Max, sizeof(int32_t));
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	3228      	adds	r2, #40	; 0x28
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	3304      	adds	r3, #4
 80048c4:	61bb      	str	r3, [r7, #24]
        memcpy(&u8Dst[n], &pSrc->uValue.s32Value, sizeof(int32_t));
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	322c      	adds	r2, #44	; 0x2c
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	3304      	adds	r3, #4
 80048d8:	61bb      	str	r3, [r7, #24]
    else
    {
        // Not supported
        return 0;
    }
	return n;
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	e000      	b.n	80048e0 <UFEC23ENDEC_S2CGetParameterRespEncode+0x116>
        return 0;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <UFEC23ENDEC_C2SSetParameterDecode>:
    n += sizeof(UFEC23ENDEC_uValue);
    return n;
}

bool UFEC23ENDEC_C2SSetParameterDecode(UFEC23PROTOCOL_C2SSetParameter* pDst, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
    if (u32DataLen < 1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <UFEC23ENDEC_C2SSetParameterDecode+0x16>
        return false;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e033      	b.n	8004966 <UFEC23ENDEC_C2SSetParameterDecode+0x7e>
    int n = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
    const uint8_t u8KeyLen = u8Datas[n++];
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	617a      	str	r2, [r7, #20]
 8004908:	461a      	mov	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4413      	add	r3, r2
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	74fb      	strb	r3, [r7, #19]
    if (u32DataLen < 1 + u8KeyLen)
 8004912:	7cfb      	ldrb	r3, [r7, #19]
 8004914:	3301      	adds	r3, #1
 8004916:	461a      	mov	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4293      	cmp	r3, r2
 800491c:	d201      	bcs.n	8004922 <UFEC23ENDEC_C2SSetParameterDecode+0x3a>
        return false;
 800491e:	2300      	movs	r3, #0
 8004920:	e021      	b.n	8004966 <UFEC23ENDEC_C2SSetParameterDecode+0x7e>
    memcpy(pDst->szKey, &u8Datas[n], u8KeyLen);
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	4413      	add	r3, r2
 800492a:	7cfa      	ldrb	r2, [r7, #19]
 800492c:	4619      	mov	r1, r3
 800492e:	f008 ff37 	bl	800d7a0 <memcpy>
    pDst->szKey[u8KeyLen] = 0;
 8004932:	7cfb      	ldrb	r3, [r7, #19]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	2100      	movs	r1, #0
 8004938:	54d1      	strb	r1, [r2, r3]
    n += u8KeyLen;
 800493a:	7cfb      	ldrb	r3, [r7, #19]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4413      	add	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
    if (u32DataLen < 1 + u8KeyLen + sizeof(UFEC23ENDEC_uValue))
 8004942:	7cfb      	ldrb	r3, [r7, #19]
 8004944:	3305      	adds	r3, #5
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d201      	bcs.n	8004950 <UFEC23ENDEC_C2SSetParameterDecode+0x68>
        return false;
 800494c:	2300      	movs	r3, #0
 800494e:	e00a      	b.n	8004966 <UFEC23ENDEC_C2SSetParameterDecode+0x7e>
    memcpy(&pDst->uValue, &u8Datas[n], sizeof(UFEC23ENDEC_uValue));
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3320      	adds	r3, #32
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	440a      	add	r2, r1
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	601a      	str	r2, [r3, #0]
    n += sizeof(UFEC23ENDEC_uValue);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	3304      	adds	r3, #4
 8004962:	617b      	str	r3, [r7, #20]
    return true;
 8004964:	2301      	movs	r3, #1
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <UFEC23ENDEC_S2CSetParameterRespEncode>:

int32_t UFEC23ENDEC_S2CSetParameterRespEncode(uint8_t u8Dst[], uint32_t u32DstLen, const UFEC23PROTOCOL_S2CSetParameterResp* pSrc)
{
 800496e:	b480      	push	{r7}
 8004970:	b087      	sub	sp, #28
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
    if (u32DstLen < UFEC23ENDEC_S2CSETPARAMETERRESP_COUNT)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <UFEC23ENDEC_S2CSetParameterRespEncode+0x16>
        return 0;
 8004980:	2300      	movs	r3, #0
 8004982:	e00b      	b.n	800499c <UFEC23ENDEC_S2CSetParameterRespEncode+0x2e>
    int n = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
    u8Dst[n++] = (uint8_t)pSrc->eResult;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	617a      	str	r2, [r7, #20]
 800498e:	461a      	mov	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	7812      	ldrb	r2, [r2, #0]
 8004998:	701a      	strb	r2, [r3, #0]
    return n;
 800499a:	697b      	ldr	r3, [r7, #20]
}
 800499c:	4618      	mov	r0, r3
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr
	...

080049a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049ac:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <HAL_Init+0x28>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a07      	ldr	r2, [pc, #28]	; (80049d0 <HAL_Init+0x28>)
 80049b2:	f043 0310 	orr.w	r3, r3, #16
 80049b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049b8:	2003      	movs	r0, #3
 80049ba:	f000 f8d1 	bl	8004b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049be:	2000      	movs	r0, #0
 80049c0:	f7ff fac2 	bl	8003f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049c4:	f7ff f914 	bl	8003bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40022000 	.word	0x40022000

080049d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049d8:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_IncTick+0x1c>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <HAL_IncTick+0x20>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4413      	add	r3, r2
 80049e4:	4a03      	ldr	r2, [pc, #12]	; (80049f4 <HAL_IncTick+0x20>)
 80049e6:	6013      	str	r3, [r2, #0]
}
 80049e8:	bf00      	nop
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr
 80049f0:	20000150 	.word	0x20000150
 80049f4:	20003854 	.word	0x20003854

080049f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return uwTick;
 80049fc:	4b02      	ldr	r3, [pc, #8]	; (8004a08 <HAL_GetTick+0x10>)
 80049fe:	681b      	ldr	r3, [r3, #0]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr
 8004a08:	20003854 	.word	0x20003854

08004a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <__NVIC_SetPriorityGrouping+0x44>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a28:	4013      	ands	r3, r2
 8004a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a3e:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <__NVIC_SetPriorityGrouping+0x44>)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	60d3      	str	r3, [r2, #12]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	e000ed00 	.word	0xe000ed00

08004a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a58:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <__NVIC_GetPriorityGrouping+0x18>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	0a1b      	lsrs	r3, r3, #8
 8004a5e:	f003 0307 	and.w	r3, r3, #7
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	e000ed00 	.word	0xe000ed00

08004a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	db0b      	blt.n	8004a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	f003 021f 	and.w	r2, r3, #31
 8004a88:	4906      	ldr	r1, [pc, #24]	; (8004aa4 <__NVIC_EnableIRQ+0x34>)
 8004a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	2001      	movs	r0, #1
 8004a92:	fa00 f202 	lsl.w	r2, r0, r2
 8004a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr
 8004aa4:	e000e100 	.word	0xe000e100

08004aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	6039      	str	r1, [r7, #0]
 8004ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	db0a      	blt.n	8004ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	490c      	ldr	r1, [pc, #48]	; (8004af4 <__NVIC_SetPriority+0x4c>)
 8004ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac6:	0112      	lsls	r2, r2, #4
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	440b      	add	r3, r1
 8004acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ad0:	e00a      	b.n	8004ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	4908      	ldr	r1, [pc, #32]	; (8004af8 <__NVIC_SetPriority+0x50>)
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	3b04      	subs	r3, #4
 8004ae0:	0112      	lsls	r2, r2, #4
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	761a      	strb	r2, [r3, #24]
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	e000e100 	.word	0xe000e100
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b089      	sub	sp, #36	; 0x24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f1c3 0307 	rsb	r3, r3, #7
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	bf28      	it	cs
 8004b1a:	2304      	movcs	r3, #4
 8004b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	3304      	adds	r3, #4
 8004b22:	2b06      	cmp	r3, #6
 8004b24:	d902      	bls.n	8004b2c <NVIC_EncodePriority+0x30>
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	3b03      	subs	r3, #3
 8004b2a:	e000      	b.n	8004b2e <NVIC_EncodePriority+0x32>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b30:	f04f 32ff 	mov.w	r2, #4294967295
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43da      	mvns	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	401a      	ands	r2, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b44:	f04f 31ff 	mov.w	r1, #4294967295
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	43d9      	mvns	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b54:	4313      	orrs	r3, r2
         );
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3724      	adds	r7, #36	; 0x24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr

08004b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ff4f 	bl	8004a0c <__NVIC_SetPriorityGrouping>
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b086      	sub	sp, #24
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b88:	f7ff ff64 	bl	8004a54 <__NVIC_GetPriorityGrouping>
 8004b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	6978      	ldr	r0, [r7, #20]
 8004b94:	f7ff ffb2 	bl	8004afc <NVIC_EncodePriority>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff ff81 	bl	8004aa8 <__NVIC_SetPriority>
}
 8004ba6:	bf00      	nop
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff ff57 	bl	8004a70 <__NVIC_EnableIRQ>
}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e059      	b.n	8004c96 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	4b2d      	ldr	r3, [pc, #180]	; (8004ca0 <HAL_DMA_Init+0xd4>)
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d80f      	bhi.n	8004c0e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <HAL_DMA_Init+0xd8>)
 8004bf6:	4413      	add	r3, r2
 8004bf8:	4a2b      	ldr	r2, [pc, #172]	; (8004ca8 <HAL_DMA_Init+0xdc>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	091b      	lsrs	r3, r3, #4
 8004c00:	009a      	lsls	r2, r3, #2
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a28      	ldr	r2, [pc, #160]	; (8004cac <HAL_DMA_Init+0xe0>)
 8004c0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c0c:	e00e      	b.n	8004c2c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	4b26      	ldr	r3, [pc, #152]	; (8004cb0 <HAL_DMA_Init+0xe4>)
 8004c16:	4413      	add	r3, r2
 8004c18:	4a23      	ldr	r2, [pc, #140]	; (8004ca8 <HAL_DMA_Init+0xdc>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	091b      	lsrs	r3, r3, #4
 8004c20:	009a      	lsls	r2, r3, #2
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a22      	ldr	r2, [pc, #136]	; (8004cb4 <HAL_DMA_Init+0xe8>)
 8004c2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004c42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004c46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr
 8004ca0:	40020407 	.word	0x40020407
 8004ca4:	bffdfff8 	.word	0xbffdfff8
 8004ca8:	cccccccd 	.word	0xcccccccd
 8004cac:	40020000 	.word	0x40020000
 8004cb0:	bffdfbf8 	.word	0xbffdfbf8
 8004cb4:	40020400 	.word	0x40020400

08004cb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_DMA_Start_IT+0x20>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e04a      	b.n	8004d6e <HAL_DMA_Start_IT+0xb6>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d13a      	bne.n	8004d60 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2202      	movs	r2, #2
 8004cee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0201 	bic.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fbbc 	bl	800548c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 020e 	orr.w	r2, r2, #14
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	e00f      	b.n	8004d4e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0204 	bic.w	r2, r2, #4
 8004d3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 020a 	orr.w	r2, r2, #10
 8004d4c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	e005      	b.n	8004d6c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d008      	beq.n	8004d9e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2204      	movs	r2, #4
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e020      	b.n	8004de0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 020e 	bic.w	r2, r2, #14
 8004dac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dcc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr
	...

08004dec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d005      	beq.n	8004e0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2204      	movs	r2, #4
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
 8004e0c:	e0d6      	b.n	8004fbc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 020e 	bic.w	r2, r2, #14
 8004e1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	4b64      	ldr	r3, [pc, #400]	; (8004fc8 <HAL_DMA_Abort_IT+0x1dc>)
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d958      	bls.n	8004eec <HAL_DMA_Abort_IT+0x100>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a63      	ldr	r2, [pc, #396]	; (8004fcc <HAL_DMA_Abort_IT+0x1e0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d04f      	beq.n	8004ee4 <HAL_DMA_Abort_IT+0xf8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a61      	ldr	r2, [pc, #388]	; (8004fd0 <HAL_DMA_Abort_IT+0x1e4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d048      	beq.n	8004ee0 <HAL_DMA_Abort_IT+0xf4>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a60      	ldr	r2, [pc, #384]	; (8004fd4 <HAL_DMA_Abort_IT+0x1e8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d040      	beq.n	8004eda <HAL_DMA_Abort_IT+0xee>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a5e      	ldr	r2, [pc, #376]	; (8004fd8 <HAL_DMA_Abort_IT+0x1ec>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d038      	beq.n	8004ed4 <HAL_DMA_Abort_IT+0xe8>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a5d      	ldr	r2, [pc, #372]	; (8004fdc <HAL_DMA_Abort_IT+0x1f0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d030      	beq.n	8004ece <HAL_DMA_Abort_IT+0xe2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a5b      	ldr	r2, [pc, #364]	; (8004fe0 <HAL_DMA_Abort_IT+0x1f4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d028      	beq.n	8004ec8 <HAL_DMA_Abort_IT+0xdc>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a53      	ldr	r2, [pc, #332]	; (8004fc8 <HAL_DMA_Abort_IT+0x1dc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d020      	beq.n	8004ec2 <HAL_DMA_Abort_IT+0xd6>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a57      	ldr	r2, [pc, #348]	; (8004fe4 <HAL_DMA_Abort_IT+0x1f8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d019      	beq.n	8004ebe <HAL_DMA_Abort_IT+0xd2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a56      	ldr	r2, [pc, #344]	; (8004fe8 <HAL_DMA_Abort_IT+0x1fc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d012      	beq.n	8004eba <HAL_DMA_Abort_IT+0xce>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a54      	ldr	r2, [pc, #336]	; (8004fec <HAL_DMA_Abort_IT+0x200>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a53      	ldr	r2, [pc, #332]	; (8004ff0 <HAL_DMA_Abort_IT+0x204>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d102      	bne.n	8004eae <HAL_DMA_Abort_IT+0xc2>
 8004ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eac:	e01b      	b.n	8004ee6 <HAL_DMA_Abort_IT+0xfa>
 8004eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004eb2:	e018      	b.n	8004ee6 <HAL_DMA_Abort_IT+0xfa>
 8004eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004eb8:	e015      	b.n	8004ee6 <HAL_DMA_Abort_IT+0xfa>
 8004eba:	2310      	movs	r3, #16
 8004ebc:	e013      	b.n	8004ee6 <HAL_DMA_Abort_IT+0xfa>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e011      	b.n	8004ee6 <HAL_DMA_Abort_IT+0xfa>
 8004ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ec6:	e00e      	b.n	8004ee6 <HAL_DMA_Abort_IT+0xfa>
 8004ec8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ecc:	e00b      	b.n	8004ee6 <HAL_DMA_Abort_IT+0xfa>
 8004ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ed2:	e008      	b.n	8004ee6 <HAL_DMA_Abort_IT+0xfa>
 8004ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ed8:	e005      	b.n	8004ee6 <HAL_DMA_Abort_IT+0xfa>
 8004eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ede:	e002      	b.n	8004ee6 <HAL_DMA_Abort_IT+0xfa>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	e000      	b.n	8004ee6 <HAL_DMA_Abort_IT+0xfa>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	4a43      	ldr	r2, [pc, #268]	; (8004ff4 <HAL_DMA_Abort_IT+0x208>)
 8004ee8:	6053      	str	r3, [r2, #4]
 8004eea:	e057      	b.n	8004f9c <HAL_DMA_Abort_IT+0x1b0>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a36      	ldr	r2, [pc, #216]	; (8004fcc <HAL_DMA_Abort_IT+0x1e0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d04f      	beq.n	8004f96 <HAL_DMA_Abort_IT+0x1aa>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a35      	ldr	r2, [pc, #212]	; (8004fd0 <HAL_DMA_Abort_IT+0x1e4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d048      	beq.n	8004f92 <HAL_DMA_Abort_IT+0x1a6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a33      	ldr	r2, [pc, #204]	; (8004fd4 <HAL_DMA_Abort_IT+0x1e8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d040      	beq.n	8004f8c <HAL_DMA_Abort_IT+0x1a0>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a32      	ldr	r2, [pc, #200]	; (8004fd8 <HAL_DMA_Abort_IT+0x1ec>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d038      	beq.n	8004f86 <HAL_DMA_Abort_IT+0x19a>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a30      	ldr	r2, [pc, #192]	; (8004fdc <HAL_DMA_Abort_IT+0x1f0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d030      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x194>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2f      	ldr	r2, [pc, #188]	; (8004fe0 <HAL_DMA_Abort_IT+0x1f4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d028      	beq.n	8004f7a <HAL_DMA_Abort_IT+0x18e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a26      	ldr	r2, [pc, #152]	; (8004fc8 <HAL_DMA_Abort_IT+0x1dc>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d020      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x188>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a2b      	ldr	r2, [pc, #172]	; (8004fe4 <HAL_DMA_Abort_IT+0x1f8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d019      	beq.n	8004f70 <HAL_DMA_Abort_IT+0x184>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a29      	ldr	r2, [pc, #164]	; (8004fe8 <HAL_DMA_Abort_IT+0x1fc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d012      	beq.n	8004f6c <HAL_DMA_Abort_IT+0x180>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a28      	ldr	r2, [pc, #160]	; (8004fec <HAL_DMA_Abort_IT+0x200>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00a      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a26      	ldr	r2, [pc, #152]	; (8004ff0 <HAL_DMA_Abort_IT+0x204>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d102      	bne.n	8004f60 <HAL_DMA_Abort_IT+0x174>
 8004f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f5e:	e01b      	b.n	8004f98 <HAL_DMA_Abort_IT+0x1ac>
 8004f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f64:	e018      	b.n	8004f98 <HAL_DMA_Abort_IT+0x1ac>
 8004f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f6a:	e015      	b.n	8004f98 <HAL_DMA_Abort_IT+0x1ac>
 8004f6c:	2310      	movs	r3, #16
 8004f6e:	e013      	b.n	8004f98 <HAL_DMA_Abort_IT+0x1ac>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e011      	b.n	8004f98 <HAL_DMA_Abort_IT+0x1ac>
 8004f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f78:	e00e      	b.n	8004f98 <HAL_DMA_Abort_IT+0x1ac>
 8004f7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f7e:	e00b      	b.n	8004f98 <HAL_DMA_Abort_IT+0x1ac>
 8004f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f84:	e008      	b.n	8004f98 <HAL_DMA_Abort_IT+0x1ac>
 8004f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f8a:	e005      	b.n	8004f98 <HAL_DMA_Abort_IT+0x1ac>
 8004f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f90:	e002      	b.n	8004f98 <HAL_DMA_Abort_IT+0x1ac>
 8004f92:	2310      	movs	r3, #16
 8004f94:	e000      	b.n	8004f98 <HAL_DMA_Abort_IT+0x1ac>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4a17      	ldr	r2, [pc, #92]	; (8004ff8 <HAL_DMA_Abort_IT+0x20c>)
 8004f9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	4798      	blx	r3
    } 
  }
  return status;
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40020080 	.word	0x40020080
 8004fcc:	40020008 	.word	0x40020008
 8004fd0:	4002001c 	.word	0x4002001c
 8004fd4:	40020030 	.word	0x40020030
 8004fd8:	40020044 	.word	0x40020044
 8004fdc:	40020058 	.word	0x40020058
 8004fe0:	4002006c 	.word	0x4002006c
 8004fe4:	40020408 	.word	0x40020408
 8004fe8:	4002041c 	.word	0x4002041c
 8004fec:	40020430 	.word	0x40020430
 8004ff0:	40020444 	.word	0x40020444
 8004ff4:	40020400 	.word	0x40020400
 8004ff8:	40020000 	.word	0x40020000

08004ffc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	2204      	movs	r2, #4
 800501a:	409a      	lsls	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4013      	ands	r3, r2
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80d6 	beq.w	80051d2 <HAL_DMA_IRQHandler+0x1d6>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 80d0 	beq.w	80051d2 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d107      	bne.n	8005050 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0204 	bic.w	r2, r2, #4
 800504e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	4b9b      	ldr	r3, [pc, #620]	; (80052c4 <HAL_DMA_IRQHandler+0x2c8>)
 8005058:	429a      	cmp	r2, r3
 800505a:	d958      	bls.n	800510e <HAL_DMA_IRQHandler+0x112>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a99      	ldr	r2, [pc, #612]	; (80052c8 <HAL_DMA_IRQHandler+0x2cc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d04f      	beq.n	8005106 <HAL_DMA_IRQHandler+0x10a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a98      	ldr	r2, [pc, #608]	; (80052cc <HAL_DMA_IRQHandler+0x2d0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d048      	beq.n	8005102 <HAL_DMA_IRQHandler+0x106>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a96      	ldr	r2, [pc, #600]	; (80052d0 <HAL_DMA_IRQHandler+0x2d4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d040      	beq.n	80050fc <HAL_DMA_IRQHandler+0x100>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a95      	ldr	r2, [pc, #596]	; (80052d4 <HAL_DMA_IRQHandler+0x2d8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d038      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xfa>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a93      	ldr	r2, [pc, #588]	; (80052d8 <HAL_DMA_IRQHandler+0x2dc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d030      	beq.n	80050f0 <HAL_DMA_IRQHandler+0xf4>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a92      	ldr	r2, [pc, #584]	; (80052dc <HAL_DMA_IRQHandler+0x2e0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d028      	beq.n	80050ea <HAL_DMA_IRQHandler+0xee>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a89      	ldr	r2, [pc, #548]	; (80052c4 <HAL_DMA_IRQHandler+0x2c8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d020      	beq.n	80050e4 <HAL_DMA_IRQHandler+0xe8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a8e      	ldr	r2, [pc, #568]	; (80052e0 <HAL_DMA_IRQHandler+0x2e4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d019      	beq.n	80050e0 <HAL_DMA_IRQHandler+0xe4>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a8c      	ldr	r2, [pc, #560]	; (80052e4 <HAL_DMA_IRQHandler+0x2e8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d012      	beq.n	80050dc <HAL_DMA_IRQHandler+0xe0>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a8b      	ldr	r2, [pc, #556]	; (80052e8 <HAL_DMA_IRQHandler+0x2ec>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00a      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xda>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a89      	ldr	r2, [pc, #548]	; (80052ec <HAL_DMA_IRQHandler+0x2f0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d102      	bne.n	80050d0 <HAL_DMA_IRQHandler+0xd4>
 80050ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050ce:	e01b      	b.n	8005108 <HAL_DMA_IRQHandler+0x10c>
 80050d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050d4:	e018      	b.n	8005108 <HAL_DMA_IRQHandler+0x10c>
 80050d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050da:	e015      	b.n	8005108 <HAL_DMA_IRQHandler+0x10c>
 80050dc:	2340      	movs	r3, #64	; 0x40
 80050de:	e013      	b.n	8005108 <HAL_DMA_IRQHandler+0x10c>
 80050e0:	2304      	movs	r3, #4
 80050e2:	e011      	b.n	8005108 <HAL_DMA_IRQHandler+0x10c>
 80050e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80050e8:	e00e      	b.n	8005108 <HAL_DMA_IRQHandler+0x10c>
 80050ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050ee:	e00b      	b.n	8005108 <HAL_DMA_IRQHandler+0x10c>
 80050f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050f4:	e008      	b.n	8005108 <HAL_DMA_IRQHandler+0x10c>
 80050f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050fa:	e005      	b.n	8005108 <HAL_DMA_IRQHandler+0x10c>
 80050fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005100:	e002      	b.n	8005108 <HAL_DMA_IRQHandler+0x10c>
 8005102:	2340      	movs	r3, #64	; 0x40
 8005104:	e000      	b.n	8005108 <HAL_DMA_IRQHandler+0x10c>
 8005106:	2304      	movs	r3, #4
 8005108:	4a79      	ldr	r2, [pc, #484]	; (80052f0 <HAL_DMA_IRQHandler+0x2f4>)
 800510a:	6053      	str	r3, [r2, #4]
 800510c:	e057      	b.n	80051be <HAL_DMA_IRQHandler+0x1c2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a6d      	ldr	r2, [pc, #436]	; (80052c8 <HAL_DMA_IRQHandler+0x2cc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d04f      	beq.n	80051b8 <HAL_DMA_IRQHandler+0x1bc>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a6b      	ldr	r2, [pc, #428]	; (80052cc <HAL_DMA_IRQHandler+0x2d0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d048      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x1b8>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a6a      	ldr	r2, [pc, #424]	; (80052d0 <HAL_DMA_IRQHandler+0x2d4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d040      	beq.n	80051ae <HAL_DMA_IRQHandler+0x1b2>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a68      	ldr	r2, [pc, #416]	; (80052d4 <HAL_DMA_IRQHandler+0x2d8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d038      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x1ac>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a67      	ldr	r2, [pc, #412]	; (80052d8 <HAL_DMA_IRQHandler+0x2dc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d030      	beq.n	80051a2 <HAL_DMA_IRQHandler+0x1a6>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a65      	ldr	r2, [pc, #404]	; (80052dc <HAL_DMA_IRQHandler+0x2e0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d028      	beq.n	800519c <HAL_DMA_IRQHandler+0x1a0>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a5d      	ldr	r2, [pc, #372]	; (80052c4 <HAL_DMA_IRQHandler+0x2c8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d020      	beq.n	8005196 <HAL_DMA_IRQHandler+0x19a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a61      	ldr	r2, [pc, #388]	; (80052e0 <HAL_DMA_IRQHandler+0x2e4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d019      	beq.n	8005192 <HAL_DMA_IRQHandler+0x196>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a60      	ldr	r2, [pc, #384]	; (80052e4 <HAL_DMA_IRQHandler+0x2e8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d012      	beq.n	800518e <HAL_DMA_IRQHandler+0x192>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a5e      	ldr	r2, [pc, #376]	; (80052e8 <HAL_DMA_IRQHandler+0x2ec>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00a      	beq.n	8005188 <HAL_DMA_IRQHandler+0x18c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a5d      	ldr	r2, [pc, #372]	; (80052ec <HAL_DMA_IRQHandler+0x2f0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d102      	bne.n	8005182 <HAL_DMA_IRQHandler+0x186>
 800517c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005180:	e01b      	b.n	80051ba <HAL_DMA_IRQHandler+0x1be>
 8005182:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005186:	e018      	b.n	80051ba <HAL_DMA_IRQHandler+0x1be>
 8005188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800518c:	e015      	b.n	80051ba <HAL_DMA_IRQHandler+0x1be>
 800518e:	2340      	movs	r3, #64	; 0x40
 8005190:	e013      	b.n	80051ba <HAL_DMA_IRQHandler+0x1be>
 8005192:	2304      	movs	r3, #4
 8005194:	e011      	b.n	80051ba <HAL_DMA_IRQHandler+0x1be>
 8005196:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800519a:	e00e      	b.n	80051ba <HAL_DMA_IRQHandler+0x1be>
 800519c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051a0:	e00b      	b.n	80051ba <HAL_DMA_IRQHandler+0x1be>
 80051a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80051a6:	e008      	b.n	80051ba <HAL_DMA_IRQHandler+0x1be>
 80051a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051ac:	e005      	b.n	80051ba <HAL_DMA_IRQHandler+0x1be>
 80051ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b2:	e002      	b.n	80051ba <HAL_DMA_IRQHandler+0x1be>
 80051b4:	2340      	movs	r3, #64	; 0x40
 80051b6:	e000      	b.n	80051ba <HAL_DMA_IRQHandler+0x1be>
 80051b8:	2304      	movs	r3, #4
 80051ba:	4a4e      	ldr	r2, [pc, #312]	; (80052f4 <HAL_DMA_IRQHandler+0x2f8>)
 80051bc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 8136 	beq.w	8005434 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80051d0:	e130      	b.n	8005434 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	2202      	movs	r2, #2
 80051d8:	409a      	lsls	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4013      	ands	r3, r2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 80f8 	beq.w	80053d4 <HAL_DMA_IRQHandler+0x3d8>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 80f2 	beq.w	80053d4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 020a 	bic.w	r2, r2, #10
 800520c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <HAL_DMA_IRQHandler+0x2c8>)
 800521e:	429a      	cmp	r2, r3
 8005220:	d973      	bls.n	800530a <HAL_DMA_IRQHandler+0x30e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a28      	ldr	r2, [pc, #160]	; (80052c8 <HAL_DMA_IRQHandler+0x2cc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d06a      	beq.n	8005302 <HAL_DMA_IRQHandler+0x306>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a26      	ldr	r2, [pc, #152]	; (80052cc <HAL_DMA_IRQHandler+0x2d0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d063      	beq.n	80052fe <HAL_DMA_IRQHandler+0x302>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a25      	ldr	r2, [pc, #148]	; (80052d0 <HAL_DMA_IRQHandler+0x2d4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d05b      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x2fc>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a23      	ldr	r2, [pc, #140]	; (80052d4 <HAL_DMA_IRQHandler+0x2d8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d038      	beq.n	80052bc <HAL_DMA_IRQHandler+0x2c0>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a22      	ldr	r2, [pc, #136]	; (80052d8 <HAL_DMA_IRQHandler+0x2dc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d030      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ba>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a20      	ldr	r2, [pc, #128]	; (80052dc <HAL_DMA_IRQHandler+0x2e0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d028      	beq.n	80052b0 <HAL_DMA_IRQHandler+0x2b4>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <HAL_DMA_IRQHandler+0x2c8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d020      	beq.n	80052aa <HAL_DMA_IRQHandler+0x2ae>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1c      	ldr	r2, [pc, #112]	; (80052e0 <HAL_DMA_IRQHandler+0x2e4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d019      	beq.n	80052a6 <HAL_DMA_IRQHandler+0x2aa>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <HAL_DMA_IRQHandler+0x2e8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d012      	beq.n	80052a2 <HAL_DMA_IRQHandler+0x2a6>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a19      	ldr	r2, [pc, #100]	; (80052e8 <HAL_DMA_IRQHandler+0x2ec>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00a      	beq.n	800529c <HAL_DMA_IRQHandler+0x2a0>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a18      	ldr	r2, [pc, #96]	; (80052ec <HAL_DMA_IRQHandler+0x2f0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d102      	bne.n	8005296 <HAL_DMA_IRQHandler+0x29a>
 8005290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005294:	e036      	b.n	8005304 <HAL_DMA_IRQHandler+0x308>
 8005296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800529a:	e033      	b.n	8005304 <HAL_DMA_IRQHandler+0x308>
 800529c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052a0:	e030      	b.n	8005304 <HAL_DMA_IRQHandler+0x308>
 80052a2:	2320      	movs	r3, #32
 80052a4:	e02e      	b.n	8005304 <HAL_DMA_IRQHandler+0x308>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e02c      	b.n	8005304 <HAL_DMA_IRQHandler+0x308>
 80052aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052ae:	e029      	b.n	8005304 <HAL_DMA_IRQHandler+0x308>
 80052b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052b4:	e026      	b.n	8005304 <HAL_DMA_IRQHandler+0x308>
 80052b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ba:	e023      	b.n	8005304 <HAL_DMA_IRQHandler+0x308>
 80052bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052c0:	e020      	b.n	8005304 <HAL_DMA_IRQHandler+0x308>
 80052c2:	bf00      	nop
 80052c4:	40020080 	.word	0x40020080
 80052c8:	40020008 	.word	0x40020008
 80052cc:	4002001c 	.word	0x4002001c
 80052d0:	40020030 	.word	0x40020030
 80052d4:	40020044 	.word	0x40020044
 80052d8:	40020058 	.word	0x40020058
 80052dc:	4002006c 	.word	0x4002006c
 80052e0:	40020408 	.word	0x40020408
 80052e4:	4002041c 	.word	0x4002041c
 80052e8:	40020430 	.word	0x40020430
 80052ec:	40020444 	.word	0x40020444
 80052f0:	40020400 	.word	0x40020400
 80052f4:	40020000 	.word	0x40020000
 80052f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052fc:	e002      	b.n	8005304 <HAL_DMA_IRQHandler+0x308>
 80052fe:	2320      	movs	r3, #32
 8005300:	e000      	b.n	8005304 <HAL_DMA_IRQHandler+0x308>
 8005302:	2302      	movs	r3, #2
 8005304:	4a4e      	ldr	r2, [pc, #312]	; (8005440 <HAL_DMA_IRQHandler+0x444>)
 8005306:	6053      	str	r3, [r2, #4]
 8005308:	e057      	b.n	80053ba <HAL_DMA_IRQHandler+0x3be>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a4d      	ldr	r2, [pc, #308]	; (8005444 <HAL_DMA_IRQHandler+0x448>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d04f      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x3b8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a4b      	ldr	r2, [pc, #300]	; (8005448 <HAL_DMA_IRQHandler+0x44c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d048      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x3b4>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a4a      	ldr	r2, [pc, #296]	; (800544c <HAL_DMA_IRQHandler+0x450>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d040      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3ae>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a48      	ldr	r2, [pc, #288]	; (8005450 <HAL_DMA_IRQHandler+0x454>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d038      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x3a8>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a47      	ldr	r2, [pc, #284]	; (8005454 <HAL_DMA_IRQHandler+0x458>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d030      	beq.n	800539e <HAL_DMA_IRQHandler+0x3a2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a45      	ldr	r2, [pc, #276]	; (8005458 <HAL_DMA_IRQHandler+0x45c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d028      	beq.n	8005398 <HAL_DMA_IRQHandler+0x39c>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a44      	ldr	r2, [pc, #272]	; (800545c <HAL_DMA_IRQHandler+0x460>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d020      	beq.n	8005392 <HAL_DMA_IRQHandler+0x396>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a42      	ldr	r2, [pc, #264]	; (8005460 <HAL_DMA_IRQHandler+0x464>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d019      	beq.n	800538e <HAL_DMA_IRQHandler+0x392>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a41      	ldr	r2, [pc, #260]	; (8005464 <HAL_DMA_IRQHandler+0x468>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d012      	beq.n	800538a <HAL_DMA_IRQHandler+0x38e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a3f      	ldr	r2, [pc, #252]	; (8005468 <HAL_DMA_IRQHandler+0x46c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00a      	beq.n	8005384 <HAL_DMA_IRQHandler+0x388>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a3e      	ldr	r2, [pc, #248]	; (800546c <HAL_DMA_IRQHandler+0x470>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d102      	bne.n	800537e <HAL_DMA_IRQHandler+0x382>
 8005378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800537c:	e01b      	b.n	80053b6 <HAL_DMA_IRQHandler+0x3ba>
 800537e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005382:	e018      	b.n	80053b6 <HAL_DMA_IRQHandler+0x3ba>
 8005384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005388:	e015      	b.n	80053b6 <HAL_DMA_IRQHandler+0x3ba>
 800538a:	2320      	movs	r3, #32
 800538c:	e013      	b.n	80053b6 <HAL_DMA_IRQHandler+0x3ba>
 800538e:	2302      	movs	r3, #2
 8005390:	e011      	b.n	80053b6 <HAL_DMA_IRQHandler+0x3ba>
 8005392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005396:	e00e      	b.n	80053b6 <HAL_DMA_IRQHandler+0x3ba>
 8005398:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800539c:	e00b      	b.n	80053b6 <HAL_DMA_IRQHandler+0x3ba>
 800539e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053a2:	e008      	b.n	80053b6 <HAL_DMA_IRQHandler+0x3ba>
 80053a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053a8:	e005      	b.n	80053b6 <HAL_DMA_IRQHandler+0x3ba>
 80053aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053ae:	e002      	b.n	80053b6 <HAL_DMA_IRQHandler+0x3ba>
 80053b0:	2320      	movs	r3, #32
 80053b2:	e000      	b.n	80053b6 <HAL_DMA_IRQHandler+0x3ba>
 80053b4:	2302      	movs	r3, #2
 80053b6:	4a2e      	ldr	r2, [pc, #184]	; (8005470 <HAL_DMA_IRQHandler+0x474>)
 80053b8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d034      	beq.n	8005434 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80053d2:	e02f      	b.n	8005434 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	2208      	movs	r2, #8
 80053da:	409a      	lsls	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d028      	beq.n	8005436 <HAL_DMA_IRQHandler+0x43a>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d023      	beq.n	8005436 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 020e 	bic.w	r2, r2, #14
 80053fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005406:	2101      	movs	r1, #1
 8005408:	fa01 f202 	lsl.w	r2, r1, r2
 800540c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	2b00      	cmp	r3, #0
 800542a:	d004      	beq.n	8005436 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	4798      	blx	r3
    }
  }
  return;
 8005434:	bf00      	nop
 8005436:	bf00      	nop
}
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40020400 	.word	0x40020400
 8005444:	40020008 	.word	0x40020008
 8005448:	4002001c 	.word	0x4002001c
 800544c:	40020030 	.word	0x40020030
 8005450:	40020044 	.word	0x40020044
 8005454:	40020058 	.word	0x40020058
 8005458:	4002006c 	.word	0x4002006c
 800545c:	40020080 	.word	0x40020080
 8005460:	40020408 	.word	0x40020408
 8005464:	4002041c 	.word	0x4002041c
 8005468:	40020430 	.word	0x40020430
 800546c:	40020444 	.word	0x40020444
 8005470:	40020000 	.word	0x40020000

08005474 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr

0800548c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a2:	2101      	movs	r1, #1
 80054a4:	fa01 f202 	lsl.w	r2, r1, r2
 80054a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b10      	cmp	r3, #16
 80054b8:	d108      	bne.n	80054cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80054ca:	e007      	b.n	80054dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	60da      	str	r2, [r3, #12]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr
	...

080054e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b08b      	sub	sp, #44	; 0x2c
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054f2:	2300      	movs	r3, #0
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80054f6:	2300      	movs	r3, #0
 80054f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054fa:	e169      	b.n	80057d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80054fc:	2201      	movs	r2, #1
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	4013      	ands	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	429a      	cmp	r2, r3
 8005516:	f040 8158 	bne.w	80057ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4a9a      	ldr	r2, [pc, #616]	; (8005788 <HAL_GPIO_Init+0x2a0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d05e      	beq.n	80055e2 <HAL_GPIO_Init+0xfa>
 8005524:	4a98      	ldr	r2, [pc, #608]	; (8005788 <HAL_GPIO_Init+0x2a0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d875      	bhi.n	8005616 <HAL_GPIO_Init+0x12e>
 800552a:	4a98      	ldr	r2, [pc, #608]	; (800578c <HAL_GPIO_Init+0x2a4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d058      	beq.n	80055e2 <HAL_GPIO_Init+0xfa>
 8005530:	4a96      	ldr	r2, [pc, #600]	; (800578c <HAL_GPIO_Init+0x2a4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d86f      	bhi.n	8005616 <HAL_GPIO_Init+0x12e>
 8005536:	4a96      	ldr	r2, [pc, #600]	; (8005790 <HAL_GPIO_Init+0x2a8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d052      	beq.n	80055e2 <HAL_GPIO_Init+0xfa>
 800553c:	4a94      	ldr	r2, [pc, #592]	; (8005790 <HAL_GPIO_Init+0x2a8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d869      	bhi.n	8005616 <HAL_GPIO_Init+0x12e>
 8005542:	4a94      	ldr	r2, [pc, #592]	; (8005794 <HAL_GPIO_Init+0x2ac>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d04c      	beq.n	80055e2 <HAL_GPIO_Init+0xfa>
 8005548:	4a92      	ldr	r2, [pc, #584]	; (8005794 <HAL_GPIO_Init+0x2ac>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d863      	bhi.n	8005616 <HAL_GPIO_Init+0x12e>
 800554e:	4a92      	ldr	r2, [pc, #584]	; (8005798 <HAL_GPIO_Init+0x2b0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d046      	beq.n	80055e2 <HAL_GPIO_Init+0xfa>
 8005554:	4a90      	ldr	r2, [pc, #576]	; (8005798 <HAL_GPIO_Init+0x2b0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d85d      	bhi.n	8005616 <HAL_GPIO_Init+0x12e>
 800555a:	2b12      	cmp	r3, #18
 800555c:	d82a      	bhi.n	80055b4 <HAL_GPIO_Init+0xcc>
 800555e:	2b12      	cmp	r3, #18
 8005560:	d859      	bhi.n	8005616 <HAL_GPIO_Init+0x12e>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <HAL_GPIO_Init+0x80>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	080055e3 	.word	0x080055e3
 800556c:	080055bd 	.word	0x080055bd
 8005570:	080055cf 	.word	0x080055cf
 8005574:	08005611 	.word	0x08005611
 8005578:	08005617 	.word	0x08005617
 800557c:	08005617 	.word	0x08005617
 8005580:	08005617 	.word	0x08005617
 8005584:	08005617 	.word	0x08005617
 8005588:	08005617 	.word	0x08005617
 800558c:	08005617 	.word	0x08005617
 8005590:	08005617 	.word	0x08005617
 8005594:	08005617 	.word	0x08005617
 8005598:	08005617 	.word	0x08005617
 800559c:	08005617 	.word	0x08005617
 80055a0:	08005617 	.word	0x08005617
 80055a4:	08005617 	.word	0x08005617
 80055a8:	08005617 	.word	0x08005617
 80055ac:	080055c5 	.word	0x080055c5
 80055b0:	080055d9 	.word	0x080055d9
 80055b4:	4a79      	ldr	r2, [pc, #484]	; (800579c <HAL_GPIO_Init+0x2b4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80055ba:	e02c      	b.n	8005616 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	623b      	str	r3, [r7, #32]
          break;
 80055c2:	e029      	b.n	8005618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	3304      	adds	r3, #4
 80055ca:	623b      	str	r3, [r7, #32]
          break;
 80055cc:	e024      	b.n	8005618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	3308      	adds	r3, #8
 80055d4:	623b      	str	r3, [r7, #32]
          break;
 80055d6:	e01f      	b.n	8005618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	330c      	adds	r3, #12
 80055de:	623b      	str	r3, [r7, #32]
          break;
 80055e0:	e01a      	b.n	8005618 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80055ea:	2304      	movs	r3, #4
 80055ec:	623b      	str	r3, [r7, #32]
          break;
 80055ee:	e013      	b.n	8005618 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d105      	bne.n	8005604 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80055f8:	2308      	movs	r3, #8
 80055fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	611a      	str	r2, [r3, #16]
          break;
 8005602:	e009      	b.n	8005618 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005604:	2308      	movs	r3, #8
 8005606:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	615a      	str	r2, [r3, #20]
          break;
 800560e:	e003      	b.n	8005618 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005610:	2300      	movs	r3, #0
 8005612:	623b      	str	r3, [r7, #32]
          break;
 8005614:	e000      	b.n	8005618 <HAL_GPIO_Init+0x130>
          break;
 8005616:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2bff      	cmp	r3, #255	; 0xff
 800561c:	d801      	bhi.n	8005622 <HAL_GPIO_Init+0x13a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	e001      	b.n	8005626 <HAL_GPIO_Init+0x13e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3304      	adds	r3, #4
 8005626:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2bff      	cmp	r3, #255	; 0xff
 800562c:	d802      	bhi.n	8005634 <HAL_GPIO_Init+0x14c>
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	e002      	b.n	800563a <HAL_GPIO_Init+0x152>
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	3b08      	subs	r3, #8
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	210f      	movs	r1, #15
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	fa01 f303 	lsl.w	r3, r1, r3
 8005648:	43db      	mvns	r3, r3
 800564a:	401a      	ands	r2, r3
 800564c:	6a39      	ldr	r1, [r7, #32]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	fa01 f303 	lsl.w	r3, r1, r3
 8005654:	431a      	orrs	r2, r3
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80b1 	beq.w	80057ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005668:	4b4d      	ldr	r3, [pc, #308]	; (80057a0 <HAL_GPIO_Init+0x2b8>)
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	4a4c      	ldr	r2, [pc, #304]	; (80057a0 <HAL_GPIO_Init+0x2b8>)
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	6193      	str	r3, [r2, #24]
 8005674:	4b4a      	ldr	r3, [pc, #296]	; (80057a0 <HAL_GPIO_Init+0x2b8>)
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005680:	4a48      	ldr	r2, [pc, #288]	; (80057a4 <HAL_GPIO_Init+0x2bc>)
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	089b      	lsrs	r3, r3, #2
 8005686:	3302      	adds	r3, #2
 8005688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	220f      	movs	r2, #15
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	43db      	mvns	r3, r3
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4013      	ands	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a40      	ldr	r2, [pc, #256]	; (80057a8 <HAL_GPIO_Init+0x2c0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d013      	beq.n	80056d4 <HAL_GPIO_Init+0x1ec>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3f      	ldr	r2, [pc, #252]	; (80057ac <HAL_GPIO_Init+0x2c4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00d      	beq.n	80056d0 <HAL_GPIO_Init+0x1e8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a3e      	ldr	r2, [pc, #248]	; (80057b0 <HAL_GPIO_Init+0x2c8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <HAL_GPIO_Init+0x1e4>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a3d      	ldr	r2, [pc, #244]	; (80057b4 <HAL_GPIO_Init+0x2cc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d101      	bne.n	80056c8 <HAL_GPIO_Init+0x1e0>
 80056c4:	2303      	movs	r3, #3
 80056c6:	e006      	b.n	80056d6 <HAL_GPIO_Init+0x1ee>
 80056c8:	2304      	movs	r3, #4
 80056ca:	e004      	b.n	80056d6 <HAL_GPIO_Init+0x1ee>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e002      	b.n	80056d6 <HAL_GPIO_Init+0x1ee>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <HAL_GPIO_Init+0x1ee>
 80056d4:	2300      	movs	r3, #0
 80056d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d8:	f002 0203 	and.w	r2, r2, #3
 80056dc:	0092      	lsls	r2, r2, #2
 80056de:	4093      	lsls	r3, r2
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80056e6:	492f      	ldr	r1, [pc, #188]	; (80057a4 <HAL_GPIO_Init+0x2bc>)
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	089b      	lsrs	r3, r3, #2
 80056ec:	3302      	adds	r3, #2
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d006      	beq.n	800570e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005700:	4b2d      	ldr	r3, [pc, #180]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	492c      	ldr	r1, [pc, #176]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	4313      	orrs	r3, r2
 800570a:	600b      	str	r3, [r1, #0]
 800570c:	e006      	b.n	800571c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800570e:	4b2a      	ldr	r3, [pc, #168]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	43db      	mvns	r3, r3
 8005716:	4928      	ldr	r1, [pc, #160]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 8005718:	4013      	ands	r3, r2
 800571a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d006      	beq.n	8005736 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005728:	4b23      	ldr	r3, [pc, #140]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	4922      	ldr	r1, [pc, #136]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	4313      	orrs	r3, r2
 8005732:	604b      	str	r3, [r1, #4]
 8005734:	e006      	b.n	8005744 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005736:	4b20      	ldr	r3, [pc, #128]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	43db      	mvns	r3, r3
 800573e:	491e      	ldr	r1, [pc, #120]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 8005740:	4013      	ands	r3, r2
 8005742:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d006      	beq.n	800575e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005750:	4b19      	ldr	r3, [pc, #100]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	4918      	ldr	r1, [pc, #96]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	4313      	orrs	r3, r2
 800575a:	608b      	str	r3, [r1, #8]
 800575c:	e006      	b.n	800576c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800575e:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	43db      	mvns	r3, r3
 8005766:	4914      	ldr	r1, [pc, #80]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 8005768:	4013      	ands	r3, r2
 800576a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d021      	beq.n	80057bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005778:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	490e      	ldr	r1, [pc, #56]	; (80057b8 <HAL_GPIO_Init+0x2d0>)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	4313      	orrs	r3, r2
 8005782:	60cb      	str	r3, [r1, #12]
 8005784:	e021      	b.n	80057ca <HAL_GPIO_Init+0x2e2>
 8005786:	bf00      	nop
 8005788:	10320000 	.word	0x10320000
 800578c:	10310000 	.word	0x10310000
 8005790:	10220000 	.word	0x10220000
 8005794:	10210000 	.word	0x10210000
 8005798:	10120000 	.word	0x10120000
 800579c:	10110000 	.word	0x10110000
 80057a0:	40021000 	.word	0x40021000
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40010800 	.word	0x40010800
 80057ac:	40010c00 	.word	0x40010c00
 80057b0:	40011000 	.word	0x40011000
 80057b4:	40011400 	.word	0x40011400
 80057b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80057bc:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <HAL_GPIO_Init+0x304>)
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	43db      	mvns	r3, r3
 80057c4:	4909      	ldr	r1, [pc, #36]	; (80057ec <HAL_GPIO_Init+0x304>)
 80057c6:	4013      	ands	r3, r2
 80057c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	3301      	adds	r3, #1
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	fa22 f303 	lsr.w	r3, r2, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f47f ae8e 	bne.w	80054fc <HAL_GPIO_Init+0x14>
  }
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	372c      	adds	r7, #44	; 0x2c
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr
 80057ec:	40010400 	.word	0x40010400

080057f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	887b      	ldrh	r3, [r7, #2]
 8005802:	4013      	ands	r3, r2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005808:	2301      	movs	r3, #1
 800580a:	73fb      	strb	r3, [r7, #15]
 800580c:	e001      	b.n	8005812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800580e:	2300      	movs	r3, #0
 8005810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005812:	7bfb      	ldrb	r3, [r7, #15]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	bc80      	pop	{r7}
 800581c:	4770      	bx	lr

0800581e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	460b      	mov	r3, r1
 8005828:	807b      	strh	r3, [r7, #2]
 800582a:	4613      	mov	r3, r2
 800582c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800582e:	787b      	ldrb	r3, [r7, #1]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005834:	887a      	ldrh	r2, [r7, #2]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800583a:	e003      	b.n	8005844 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800583c:	887b      	ldrh	r3, [r7, #2]
 800583e:	041a      	lsls	r2, r3, #16
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	611a      	str	r2, [r3, #16]
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr
	...

08005850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e12b      	b.n	8005aba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fe f9f2 	bl	8003c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2224      	movs	r2, #36	; 0x24
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0201 	bic.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058b4:	f002 fc0a 	bl	80080cc <HAL_RCC_GetPCLK1Freq>
 80058b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4a81      	ldr	r2, [pc, #516]	; (8005ac4 <HAL_I2C_Init+0x274>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d807      	bhi.n	80058d4 <HAL_I2C_Init+0x84>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4a80      	ldr	r2, [pc, #512]	; (8005ac8 <HAL_I2C_Init+0x278>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	bf94      	ite	ls
 80058cc:	2301      	movls	r3, #1
 80058ce:	2300      	movhi	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	e006      	b.n	80058e2 <HAL_I2C_Init+0x92>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4a7d      	ldr	r2, [pc, #500]	; (8005acc <HAL_I2C_Init+0x27c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	bf94      	ite	ls
 80058dc:	2301      	movls	r3, #1
 80058de:	2300      	movhi	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e0e7      	b.n	8005aba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4a78      	ldr	r2, [pc, #480]	; (8005ad0 <HAL_I2C_Init+0x280>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	0c9b      	lsrs	r3, r3, #18
 80058f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	4a6a      	ldr	r2, [pc, #424]	; (8005ac4 <HAL_I2C_Init+0x274>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d802      	bhi.n	8005924 <HAL_I2C_Init+0xd4>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	3301      	adds	r3, #1
 8005922:	e009      	b.n	8005938 <HAL_I2C_Init+0xe8>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800592a:	fb02 f303 	mul.w	r3, r2, r3
 800592e:	4a69      	ldr	r2, [pc, #420]	; (8005ad4 <HAL_I2C_Init+0x284>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	099b      	lsrs	r3, r3, #6
 8005936:	3301      	adds	r3, #1
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6812      	ldr	r2, [r2, #0]
 800593c:	430b      	orrs	r3, r1
 800593e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800594a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	495c      	ldr	r1, [pc, #368]	; (8005ac4 <HAL_I2C_Init+0x274>)
 8005954:	428b      	cmp	r3, r1
 8005956:	d819      	bhi.n	800598c <HAL_I2C_Init+0x13c>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	1e59      	subs	r1, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	fbb1 f3f3 	udiv	r3, r1, r3
 8005966:	1c59      	adds	r1, r3, #1
 8005968:	f640 73fc 	movw	r3, #4092	; 0xffc
 800596c:	400b      	ands	r3, r1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <HAL_I2C_Init+0x138>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1e59      	subs	r1, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005980:	3301      	adds	r3, #1
 8005982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005986:	e051      	b.n	8005a2c <HAL_I2C_Init+0x1dc>
 8005988:	2304      	movs	r3, #4
 800598a:	e04f      	b.n	8005a2c <HAL_I2C_Init+0x1dc>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d111      	bne.n	80059b8 <HAL_I2C_Init+0x168>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	1e58      	subs	r0, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6859      	ldr	r1, [r3, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	440b      	add	r3, r1
 80059a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059a6:	3301      	adds	r3, #1
 80059a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bf0c      	ite	eq
 80059b0:	2301      	moveq	r3, #1
 80059b2:	2300      	movne	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	e012      	b.n	80059de <HAL_I2C_Init+0x18e>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	1e58      	subs	r0, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6859      	ldr	r1, [r3, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	0099      	lsls	r1, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ce:	3301      	adds	r3, #1
 80059d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bf0c      	ite	eq
 80059d8:	2301      	moveq	r3, #1
 80059da:	2300      	movne	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_I2C_Init+0x196>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e022      	b.n	8005a2c <HAL_I2C_Init+0x1dc>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10e      	bne.n	8005a0c <HAL_I2C_Init+0x1bc>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	1e58      	subs	r0, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6859      	ldr	r1, [r3, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	440b      	add	r3, r1
 80059fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a00:	3301      	adds	r3, #1
 8005a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0a:	e00f      	b.n	8005a2c <HAL_I2C_Init+0x1dc>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	1e58      	subs	r0, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6859      	ldr	r1, [r3, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	0099      	lsls	r1, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a22:	3301      	adds	r3, #1
 8005a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	6809      	ldr	r1, [r1, #0]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69da      	ldr	r2, [r3, #28]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6911      	ldr	r1, [r2, #16]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	68d2      	ldr	r2, [r2, #12]
 8005a66:	4311      	orrs	r1, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695a      	ldr	r2, [r3, #20]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	000186a0 	.word	0x000186a0
 8005ac8:	001e847f 	.word	0x001e847f
 8005acc:	003d08ff 	.word	0x003d08ff
 8005ad0:	431bde83 	.word	0x431bde83
 8005ad4:	10624dd3 	.word	0x10624dd3

08005ad8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	607a      	str	r2, [r7, #4]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	817b      	strh	r3, [r7, #10]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	f040 8085 	bne.w	8005c08 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005afe:	4b45      	ldr	r3, [pc, #276]	; (8005c14 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	08db      	lsrs	r3, r3, #3
 8005b04:	4a44      	ldr	r2, [pc, #272]	; (8005c18 <HAL_I2C_Master_Transmit_IT+0x140>)
 8005b06:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0a:	0a1a      	lsrs	r2, r3, #8
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	009a      	lsls	r2, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d116      	bne.n	8005b52 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	f043 0220 	orr.w	r2, r3, #32
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e05b      	b.n	8005c0a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d0db      	beq.n	8005b18 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d101      	bne.n	8005b6e <HAL_I2C_Master_Transmit_IT+0x96>
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e04d      	b.n	8005c0a <HAL_I2C_Master_Transmit_IT+0x132>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d007      	beq.n	8005b94 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ba2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2221      	movs	r2, #33	; 0x21
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2210      	movs	r2, #16
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	893a      	ldrh	r2, [r7, #8]
 8005bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4a12      	ldr	r2, [pc, #72]	; (8005c1c <HAL_I2C_Master_Transmit_IT+0x144>)
 8005bd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005bd6:	897a      	ldrh	r2, [r7, #10]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005bf2:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c02:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e000      	b.n	8005c0a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005c08:	2302      	movs	r3, #2
  }
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr
 8005c14:	20000148 	.word	0x20000148
 8005c18:	14f8b589 	.word	0x14f8b589
 8005c1c:	ffff0000 	.word	0xffff0000

08005c20 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	607a      	str	r2, [r7, #4]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	817b      	strh	r3, [r7, #10]
 8005c30:	4613      	mov	r3, r2
 8005c32:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	f040 808d 	bne.w	8005d60 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c46:	4b49      	ldr	r3, [pc, #292]	; (8005d6c <HAL_I2C_Master_Receive_IT+0x14c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	08db      	lsrs	r3, r3, #3
 8005c4c:	4a48      	ldr	r2, [pc, #288]	; (8005d70 <HAL_I2C_Master_Receive_IT+0x150>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	0a1a      	lsrs	r2, r3, #8
 8005c54:	4613      	mov	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	009a      	lsls	r2, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d116      	bne.n	8005c9a <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f043 0220 	orr.w	r2, r3, #32
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e063      	b.n	8005d62 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d0db      	beq.n	8005c60 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d101      	bne.n	8005cb6 <HAL_I2C_Master_Receive_IT+0x96>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e055      	b.n	8005d62 <HAL_I2C_Master_Receive_IT+0x142>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d007      	beq.n	8005cdc <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0201 	orr.w	r2, r2, #1
 8005cda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2222      	movs	r2, #34	; 0x22
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2210      	movs	r2, #16
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	893a      	ldrh	r2, [r7, #8]
 8005d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a16      	ldr	r2, [pc, #88]	; (8005d74 <HAL_I2C_Master_Receive_IT+0x154>)
 8005d1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005d1e:	897a      	ldrh	r2, [r7, #10]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005d3a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d4a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d5a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e000      	b.n	8005d62 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005d60:	2302      	movs	r3, #2
  }
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr
 8005d6c:	20000148 	.word	0x20000148
 8005d70:	14f8b589 	.word	0x14f8b589
 8005d74:	ffff0000 	.word	0xffff0000

08005d78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d003      	beq.n	8005db0 <HAL_I2C_EV_IRQHandler+0x38>
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	f040 80c1 	bne.w	8005f32 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10d      	bne.n	8005de6 <HAL_I2C_EV_IRQHandler+0x6e>
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005dd0:	d003      	beq.n	8005dda <HAL_I2C_EV_IRQHandler+0x62>
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005dd8:	d101      	bne.n	8005dde <HAL_I2C_EV_IRQHandler+0x66>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <HAL_I2C_EV_IRQHandler+0x68>
 8005dde:	2300      	movs	r3, #0
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	f000 8132 	beq.w	800604a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00c      	beq.n	8005e0a <HAL_I2C_EV_IRQHandler+0x92>
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	0a5b      	lsrs	r3, r3, #9
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d006      	beq.n	8005e0a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f001 fc51 	bl	80076a4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fd53 	bl	80068ae <I2C_Master_SB>
 8005e08:	e092      	b.n	8005f30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	08db      	lsrs	r3, r3, #3
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <HAL_I2C_EV_IRQHandler+0xb2>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	0a5b      	lsrs	r3, r3, #9
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fdc8 	bl	80069b8 <I2C_Master_ADD10>
 8005e28:	e082      	b.n	8005f30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	085b      	lsrs	r3, r3, #1
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <HAL_I2C_EV_IRQHandler+0xd2>
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	0a5b      	lsrs	r3, r3, #9
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fde1 	bl	8006a0a <I2C_Master_ADDR>
 8005e48:	e072      	b.n	8005f30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	089b      	lsrs	r3, r3, #2
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d03b      	beq.n	8005ece <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e64:	f000 80f3 	beq.w	800604e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	09db      	lsrs	r3, r3, #7
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00f      	beq.n	8005e94 <HAL_I2C_EV_IRQHandler+0x11c>
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	0a9b      	lsrs	r3, r3, #10
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d009      	beq.n	8005e94 <HAL_I2C_EV_IRQHandler+0x11c>
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d103      	bne.n	8005e94 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f9cd 	bl	800622c <I2C_MasterTransmit_TXE>
 8005e92:	e04d      	b.n	8005f30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	089b      	lsrs	r3, r3, #2
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 80d6 	beq.w	800604e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	0a5b      	lsrs	r3, r3, #9
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80cf 	beq.w	800604e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005eb0:	7bbb      	ldrb	r3, [r7, #14]
 8005eb2:	2b21      	cmp	r3, #33	; 0x21
 8005eb4:	d103      	bne.n	8005ebe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fa54 	bl	8006364 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ebc:	e0c7      	b.n	800604e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	f040 80c4 	bne.w	800604e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fac2 	bl	8006450 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ecc:	e0bf      	b.n	800604e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005edc:	f000 80b7 	beq.w	800604e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	099b      	lsrs	r3, r3, #6
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00f      	beq.n	8005f0c <HAL_I2C_EV_IRQHandler+0x194>
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	0a9b      	lsrs	r3, r3, #10
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d009      	beq.n	8005f0c <HAL_I2C_EV_IRQHandler+0x194>
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	089b      	lsrs	r3, r3, #2
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d103      	bne.n	8005f0c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fb37 	bl	8006578 <I2C_MasterReceive_RXNE>
 8005f0a:	e011      	b.n	8005f30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	089b      	lsrs	r3, r3, #2
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 809a 	beq.w	800604e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	0a5b      	lsrs	r3, r3, #9
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 8093 	beq.w	800604e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fbd6 	bl	80066da <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f2e:	e08e      	b.n	800604e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005f30:	e08d      	b.n	800604e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d004      	beq.n	8005f44 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	e007      	b.n	8005f54 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	085b      	lsrs	r3, r3, #1
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d012      	beq.n	8005f86 <HAL_I2C_EV_IRQHandler+0x20e>
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	0a5b      	lsrs	r3, r3, #9
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00c      	beq.n	8005f86 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005f7c:	69b9      	ldr	r1, [r7, #24]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 ff9a 	bl	8006eb8 <I2C_Slave_ADDR>
 8005f84:	e066      	b.n	8006054 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	091b      	lsrs	r3, r3, #4
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <HAL_I2C_EV_IRQHandler+0x22e>
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	0a5b      	lsrs	r3, r3, #9
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 ffd4 	bl	8006f4c <I2C_Slave_STOPF>
 8005fa4:	e056      	b.n	8006054 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fa6:	7bbb      	ldrb	r3, [r7, #14]
 8005fa8:	2b21      	cmp	r3, #33	; 0x21
 8005faa:	d002      	beq.n	8005fb2 <HAL_I2C_EV_IRQHandler+0x23a>
 8005fac:	7bbb      	ldrb	r3, [r7, #14]
 8005fae:	2b29      	cmp	r3, #41	; 0x29
 8005fb0:	d125      	bne.n	8005ffe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	09db      	lsrs	r3, r3, #7
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00f      	beq.n	8005fde <HAL_I2C_EV_IRQHandler+0x266>
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	0a9b      	lsrs	r3, r3, #10
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d009      	beq.n	8005fde <HAL_I2C_EV_IRQHandler+0x266>
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	089b      	lsrs	r3, r3, #2
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d103      	bne.n	8005fde <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 feb2 	bl	8006d40 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fdc:	e039      	b.n	8006052 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	089b      	lsrs	r3, r3, #2
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d033      	beq.n	8006052 <HAL_I2C_EV_IRQHandler+0x2da>
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	0a5b      	lsrs	r3, r3, #9
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d02d      	beq.n	8006052 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fedf 	bl	8006dba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ffc:	e029      	b.n	8006052 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	099b      	lsrs	r3, r3, #6
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00f      	beq.n	800602a <HAL_I2C_EV_IRQHandler+0x2b2>
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	0a9b      	lsrs	r3, r3, #10
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <HAL_I2C_EV_IRQHandler+0x2b2>
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	089b      	lsrs	r3, r3, #2
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d103      	bne.n	800602a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fee9 	bl	8006dfa <I2C_SlaveReceive_RXNE>
 8006028:	e014      	b.n	8006054 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	089b      	lsrs	r3, r3, #2
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00e      	beq.n	8006054 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	0a5b      	lsrs	r3, r3, #9
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 ff17 	bl	8006e76 <I2C_SlaveReceive_BTF>
 8006048:	e004      	b.n	8006054 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800604a:	bf00      	nop
 800604c:	e002      	b.n	8006054 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800604e:	bf00      	nop
 8006050:	e000      	b.n	8006054 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006052:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006054:	3720      	adds	r7, #32
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b08a      	sub	sp, #40	; 0x28
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006072:	2300      	movs	r3, #0
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800607c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	0a1b      	lsrs	r3, r3, #8
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d016      	beq.n	80060b8 <HAL_I2C_ER_IRQHandler+0x5e>
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	0a1b      	lsrs	r3, r3, #8
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d010      	beq.n	80060b8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060a6:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060b6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	0a5b      	lsrs	r3, r3, #9
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00e      	beq.n	80060e2 <HAL_I2C_ER_IRQHandler+0x88>
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	0a1b      	lsrs	r3, r3, #8
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	f043 0302 	orr.w	r3, r3, #2
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80060e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	0a9b      	lsrs	r3, r3, #10
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d03f      	beq.n	800616e <HAL_I2C_ER_IRQHandler+0x114>
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	0a1b      	lsrs	r3, r3, #8
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d039      	beq.n	800616e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80060fa:	7efb      	ldrb	r3, [r7, #27]
 80060fc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006102:	b29b      	uxth	r3, r3
 8006104:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006114:	7ebb      	ldrb	r3, [r7, #26]
 8006116:	2b20      	cmp	r3, #32
 8006118:	d112      	bne.n	8006140 <HAL_I2C_ER_IRQHandler+0xe6>
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10f      	bne.n	8006140 <HAL_I2C_ER_IRQHandler+0xe6>
 8006120:	7cfb      	ldrb	r3, [r7, #19]
 8006122:	2b21      	cmp	r3, #33	; 0x21
 8006124:	d008      	beq.n	8006138 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006126:	7cfb      	ldrb	r3, [r7, #19]
 8006128:	2b29      	cmp	r3, #41	; 0x29
 800612a:	d005      	beq.n	8006138 <HAL_I2C_ER_IRQHandler+0xde>
 800612c:	7cfb      	ldrb	r3, [r7, #19]
 800612e:	2b28      	cmp	r3, #40	; 0x28
 8006130:	d106      	bne.n	8006140 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b21      	cmp	r3, #33	; 0x21
 8006136:	d103      	bne.n	8006140 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 f837 	bl	80071ac <I2C_Slave_AF>
 800613e:	e016      	b.n	800616e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006148:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	f043 0304 	orr.w	r3, r3, #4
 8006150:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006152:	7efb      	ldrb	r3, [r7, #27]
 8006154:	2b10      	cmp	r3, #16
 8006156:	d002      	beq.n	800615e <HAL_I2C_ER_IRQHandler+0x104>
 8006158:	7efb      	ldrb	r3, [r7, #27]
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d107      	bne.n	800616e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800616c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	0adb      	lsrs	r3, r3, #11
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00e      	beq.n	8006198 <HAL_I2C_ER_IRQHandler+0x13e>
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	0a1b      	lsrs	r3, r3, #8
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d008      	beq.n	8006198 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	f043 0308 	orr.w	r3, r3, #8
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006196:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	2b00      	cmp	r3, #0
 800619c:	d008      	beq.n	80061b0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 f86e 	bl	800728c <I2C_ITError>
  }
}
 80061b0:	bf00      	nop
 80061b2:	3728      	adds	r7, #40	; 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr

080061ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	70fb      	strb	r3, [r7, #3]
 80061e8:	4613      	mov	r3, r2
 80061ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr

080061f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr

08006208 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	bc80      	pop	{r7}
 8006218:	4770      	bx	lr

0800621a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006242:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624e:	2b00      	cmp	r3, #0
 8006250:	d150      	bne.n	80062f4 <I2C_MasterTransmit_TXE+0xc8>
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b21      	cmp	r3, #33	; 0x21
 8006256:	d14d      	bne.n	80062f4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b08      	cmp	r3, #8
 800625c:	d01d      	beq.n	800629a <I2C_MasterTransmit_TXE+0x6e>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b20      	cmp	r3, #32
 8006262:	d01a      	beq.n	800629a <I2C_MasterTransmit_TXE+0x6e>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800626a:	d016      	beq.n	800629a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800627a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2211      	movs	r2, #17
 8006280:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fc fdd4 	bl	8002e40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006298:	e060      	b.n	800635c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062a8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d107      	bne.n	80062e4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff ff93 	bl	8006208 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062e2:	e03b      	b.n	800635c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7fc fda7 	bl	8002e40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062f2:	e033      	b.n	800635c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	2b21      	cmp	r3, #33	; 0x21
 80062f8:	d005      	beq.n	8006306 <I2C_MasterTransmit_TXE+0xda>
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d12d      	bne.n	800635c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b22      	cmp	r3, #34	; 0x22
 8006304:	d12a      	bne.n	800635c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d108      	bne.n	8006322 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006320:	e01c      	b.n	800635c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b40      	cmp	r3, #64	; 0x40
 800632c:	d103      	bne.n	8006336 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f88e 	bl	8006450 <I2C_MemoryTransmit_TXE_BTF>
}
 8006334:	e012      	b.n	800635c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	781a      	ldrb	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800635a:	e7ff      	b.n	800635c <I2C_MasterTransmit_TXE+0x130>
 800635c:	bf00      	nop
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b21      	cmp	r3, #33	; 0x21
 800637c:	d164      	bne.n	8006448 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d012      	beq.n	80063ae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	781a      	ldrb	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80063ac:	e04c      	b.n	8006448 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d01d      	beq.n	80063f0 <I2C_MasterTransmit_BTF+0x8c>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d01a      	beq.n	80063f0 <I2C_MasterTransmit_BTF+0x8c>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063c0:	d016      	beq.n	80063f0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063d0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2211      	movs	r2, #17
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7fc fd29 	bl	8002e40 <HAL_I2C_MasterTxCpltCallback>
}
 80063ee:	e02b      	b.n	8006448 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063fe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800640e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2220      	movs	r2, #32
 800641a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b40      	cmp	r3, #64	; 0x40
 8006428:	d107      	bne.n	800643a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff fee8 	bl	8006208 <HAL_I2C_MemTxCpltCallback>
}
 8006438:	e006      	b.n	8006448 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fc fcfc 	bl	8002e40 <HAL_I2C_MasterTxCpltCallback>
}
 8006448:	bf00      	nop
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006464:	2b00      	cmp	r3, #0
 8006466:	d11d      	bne.n	80064a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800646c:	2b01      	cmp	r3, #1
 800646e:	d10b      	bne.n	8006488 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006474:	b2da      	uxtb	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006480:	1c9a      	adds	r2, r3, #2
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006486:	e073      	b.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800648c:	b29b      	uxth	r3, r3
 800648e:	121b      	asrs	r3, r3, #8
 8006490:	b2da      	uxtb	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80064a2:	e065      	b.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d10b      	bne.n	80064c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80064c2:	e055      	b.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d151      	bne.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	2b22      	cmp	r3, #34	; 0x22
 80064d0:	d10d      	bne.n	80064ee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064e0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80064ec:	e040      	b.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d015      	beq.n	8006524 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b21      	cmp	r3, #33	; 0x21
 80064fc:	d112      	bne.n	8006524 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	781a      	ldrb	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006522:	e025      	b.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d120      	bne.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b21      	cmp	r3, #33	; 0x21
 8006532:	d11d      	bne.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006542:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006552:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7ff fe4c 	bl	8006208 <HAL_I2C_MemTxCpltCallback>
}
 8006570:	bf00      	nop
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b22      	cmp	r3, #34	; 0x22
 800658a:	f040 80a2 	bne.w	80066d2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006592:	b29b      	uxth	r3, r3
 8006594:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b03      	cmp	r3, #3
 800659a:	d921      	bls.n	80065e0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691a      	ldr	r2, [r3, #16]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	f040 8082 	bne.w	80066d2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065dc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80065de:	e078      	b.n	80066d2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d074      	beq.n	80066d2 <I2C_MasterReceive_RXNE+0x15a>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d002      	beq.n	80065f4 <I2C_MasterReceive_RXNE+0x7c>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d16e      	bne.n	80066d2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 f823 	bl	8007640 <I2C_WaitOnSTOPRequestThroughIT>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d142      	bne.n	8006686 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800661e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691a      	ldr	r2, [r3, #16]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2220      	movs	r2, #32
 800664a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d10a      	bne.n	8006670 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff fdd6 	bl	800621a <HAL_I2C_MemRxCpltCallback>
}
 800666e:	e030      	b.n	80066d2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2212      	movs	r2, #18
 800667c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fc fbf2 	bl	8002e68 <HAL_I2C_MasterRxCpltCallback>
}
 8006684:	e025      	b.n	80066d2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006694:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7fc fbdf 	bl	8002e90 <HAL_I2C_ErrorCallback>
}
 80066d2:	bf00      	nop
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d11b      	bne.n	800672a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006700:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	691a      	ldr	r2, [r3, #16]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006728:	e0bd      	b.n	80068a6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b03      	cmp	r3, #3
 8006732:	d129      	bne.n	8006788 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006742:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b04      	cmp	r3, #4
 8006748:	d00a      	beq.n	8006760 <I2C_MasterReceive_BTF+0x86>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d007      	beq.n	8006760 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800675e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006786:	e08e      	b.n	80068a6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678c:	b29b      	uxth	r3, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d176      	bne.n	8006880 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d002      	beq.n	800679e <I2C_MasterReceive_BTF+0xc4>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b10      	cmp	r3, #16
 800679c:	d108      	bne.n	80067b0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	e019      	b.n	80067e4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d002      	beq.n	80067bc <I2C_MasterReceive_BTF+0xe2>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d108      	bne.n	80067ce <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	e00a      	b.n	80067e4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b10      	cmp	r3, #16
 80067d2:	d007      	beq.n	80067e4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067e2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006800:	b29b      	uxth	r3, r3
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800683e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b40      	cmp	r3, #64	; 0x40
 8006852:	d10a      	bne.n	800686a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff fcd9 	bl	800621a <HAL_I2C_MemRxCpltCallback>
}
 8006868:	e01d      	b.n	80068a6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2212      	movs	r2, #18
 8006876:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7fc faf5 	bl	8002e68 <HAL_I2C_MasterRxCpltCallback>
}
 800687e:	e012      	b.n	80068a6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691a      	ldr	r2, [r3, #16]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b40      	cmp	r3, #64	; 0x40
 80068c0:	d117      	bne.n	80068f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80068dc:	e067      	b.n	80069ae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	f043 0301 	orr.w	r3, r3, #1
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	611a      	str	r2, [r3, #16]
}
 80068f0:	e05d      	b.n	80069ae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068fa:	d133      	bne.n	8006964 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b21      	cmp	r3, #33	; 0x21
 8006906:	d109      	bne.n	800691c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690c:	b2db      	uxtb	r3, r3
 800690e:	461a      	mov	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006918:	611a      	str	r2, [r3, #16]
 800691a:	e008      	b.n	800692e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006920:	b2db      	uxtb	r3, r3
 8006922:	f043 0301 	orr.w	r3, r3, #1
 8006926:	b2da      	uxtb	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006932:	2b00      	cmp	r3, #0
 8006934:	d004      	beq.n	8006940 <I2C_Master_SB+0x92>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	2b00      	cmp	r3, #0
 800693e:	d108      	bne.n	8006952 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	2b00      	cmp	r3, #0
 8006946:	d032      	beq.n	80069ae <I2C_Master_SB+0x100>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d02d      	beq.n	80069ae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006960:	605a      	str	r2, [r3, #4]
}
 8006962:	e024      	b.n	80069ae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10e      	bne.n	800698a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006970:	b29b      	uxth	r3, r3
 8006972:	11db      	asrs	r3, r3, #7
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 0306 	and.w	r3, r3, #6
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f063 030f 	orn	r3, r3, #15
 8006980:	b2da      	uxtb	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	611a      	str	r2, [r3, #16]
}
 8006988:	e011      	b.n	80069ae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698e:	2b01      	cmp	r3, #1
 8006990:	d10d      	bne.n	80069ae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006996:	b29b      	uxth	r3, r3
 8006998:	11db      	asrs	r3, r3, #7
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f003 0306 	and.w	r3, r3, #6
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	f063 030e 	orn	r3, r3, #14
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	611a      	str	r2, [r3, #16]
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr

080069b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <I2C_Master_ADD10+0x26>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d108      	bne.n	80069f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00c      	beq.n	8006a00 <I2C_Master_ADD10+0x48>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d007      	beq.n	8006a00 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069fe:	605a      	str	r2, [r3, #4]
  }
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr

08006a0a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b091      	sub	sp, #68	; 0x44
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a20:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a26:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b22      	cmp	r3, #34	; 0x22
 8006a32:	f040 8174 	bne.w	8006d1e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10f      	bne.n	8006a5e <I2C_Master_ADDR+0x54>
 8006a3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a42:	2b40      	cmp	r3, #64	; 0x40
 8006a44:	d10b      	bne.n	8006a5e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a46:	2300      	movs	r3, #0
 8006a48:	633b      	str	r3, [r7, #48]	; 0x30
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	633b      	str	r3, [r7, #48]	; 0x30
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	e16b      	b.n	8006d36 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d11d      	bne.n	8006aa2 <I2C_Master_ADDR+0x98>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a6e:	d118      	bne.n	8006aa2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a70:	2300      	movs	r3, #0
 8006a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a94:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	651a      	str	r2, [r3, #80]	; 0x50
 8006aa0:	e149      	b.n	8006d36 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d113      	bne.n	8006ad4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aac:	2300      	movs	r3, #0
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	e120      	b.n	8006d16 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	f040 808a 	bne.w	8006bf4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ae6:	d137      	bne.n	8006b58 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b06:	d113      	bne.n	8006b30 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b16:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b18:	2300      	movs	r3, #0
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	e0f2      	b.n	8006d16 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b30:	2300      	movs	r3, #0
 8006b32:	623b      	str	r3, [r7, #32]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	623b      	str	r3, [r7, #32]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	623b      	str	r3, [r7, #32]
 8006b44:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	e0de      	b.n	8006d16 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d02e      	beq.n	8006bbc <I2C_Master_ADDR+0x1b2>
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d02b      	beq.n	8006bbc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b66:	2b12      	cmp	r3, #18
 8006b68:	d102      	bne.n	8006b70 <I2C_Master_ADDR+0x166>
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d125      	bne.n	8006bbc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d00e      	beq.n	8006b94 <I2C_Master_ADDR+0x18a>
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d00b      	beq.n	8006b94 <I2C_Master_ADDR+0x18a>
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	2b10      	cmp	r3, #16
 8006b80:	d008      	beq.n	8006b94 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	e007      	b.n	8006ba4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ba2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	61fb      	str	r3, [r7, #28]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	61fb      	str	r3, [r7, #28]
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	e0ac      	b.n	8006d16 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bcc:	2300      	movs	r3, #0
 8006bce:	61bb      	str	r3, [r7, #24]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	61bb      	str	r3, [r7, #24]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	61bb      	str	r3, [r7, #24]
 8006be0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e090      	b.n	8006d16 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d158      	bne.n	8006cb0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d021      	beq.n	8006c48 <I2C_Master_ADDR+0x23e>
 8006c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d01e      	beq.n	8006c48 <I2C_Master_ADDR+0x23e>
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	2b10      	cmp	r3, #16
 8006c0e:	d01b      	beq.n	8006c48 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c1e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	e012      	b.n	8006c6e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c56:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	613b      	str	r3, [r7, #16]
 8006c6c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c7c:	d14b      	bne.n	8006d16 <I2C_Master_ADDR+0x30c>
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c84:	d00b      	beq.n	8006c9e <I2C_Master_ADDR+0x294>
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d008      	beq.n	8006c9e <I2C_Master_ADDR+0x294>
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d005      	beq.n	8006c9e <I2C_Master_ADDR+0x294>
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d002      	beq.n	8006c9e <I2C_Master_ADDR+0x294>
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	d13b      	bne.n	8006d16 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cac:	605a      	str	r2, [r3, #4]
 8006cae:	e032      	b.n	8006d16 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cbe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cce:	d117      	bne.n	8006d00 <I2C_Master_ADDR+0x2f6>
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cd6:	d00b      	beq.n	8006cf0 <I2C_Master_ADDR+0x2e6>
 8006cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d008      	beq.n	8006cf0 <I2C_Master_ADDR+0x2e6>
 8006cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d005      	beq.n	8006cf0 <I2C_Master_ADDR+0x2e6>
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce6:	2b10      	cmp	r3, #16
 8006ce8:	d002      	beq.n	8006cf0 <I2C_Master_ADDR+0x2e6>
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d107      	bne.n	8006d00 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cfe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006d1c:	e00b      	b.n	8006d36 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60bb      	str	r3, [r7, #8]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	60bb      	str	r3, [r7, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	60bb      	str	r3, [r7, #8]
 8006d32:	68bb      	ldr	r3, [r7, #8]
}
 8006d34:	e7ff      	b.n	8006d36 <I2C_Master_ADDR+0x32c>
 8006d36:	bf00      	nop
 8006d38:	3744      	adds	r7, #68	; 0x44
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr

08006d40 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d02b      	beq.n	8006db2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	781a      	ldrb	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d114      	bne.n	8006db2 <I2C_SlaveTransmit_TXE+0x72>
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	2b29      	cmp	r3, #41	; 0x29
 8006d8c:	d111      	bne.n	8006db2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d9c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2221      	movs	r2, #33	; 0x21
 8006da2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2228      	movs	r2, #40	; 0x28
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff fa03 	bl	80061b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006db2:	bf00      	nop
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d011      	beq.n	8006df0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	781a      	ldrb	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bc80      	pop	{r7}
 8006df8:	4770      	bx	lr

08006dfa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e08:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d02c      	beq.n	8006e6e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691a      	ldr	r2, [r3, #16]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	1c5a      	adds	r2, r3, #1
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d114      	bne.n	8006e6e <I2C_SlaveReceive_RXNE+0x74>
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	2b2a      	cmp	r3, #42	; 0x2a
 8006e48:	d111      	bne.n	8006e6e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e58:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2222      	movs	r2, #34	; 0x22
 8006e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2228      	movs	r2, #40	; 0x28
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff f9ae 	bl	80061ca <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d012      	beq.n	8006eae <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006eae:	bf00      	nop
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bc80      	pop	{r7}
 8006eb6:	4770      	bx	lr

08006eb8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ed2:	2b28      	cmp	r3, #40	; 0x28
 8006ed4:	d127      	bne.n	8006f26 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	089b      	lsrs	r3, r3, #2
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	09db      	lsrs	r3, r3, #7
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d103      	bne.n	8006f0a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	81bb      	strh	r3, [r7, #12]
 8006f08:	e002      	b.n	8006f10 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006f18:	89ba      	ldrh	r2, [r7, #12]
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff f95c 	bl	80061dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f24:	e00e      	b.n	8006f44 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f26:	2300      	movs	r3, #0
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	60bb      	str	r3, [r7, #8]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	60bb      	str	r3, [r7, #8]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f6a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60bb      	str	r3, [r7, #8]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	60bb      	str	r3, [r7, #8]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0201 	orr.w	r2, r2, #1
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f98:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fa8:	d172      	bne.n	8007090 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	2b22      	cmp	r3, #34	; 0x22
 8006fae:	d002      	beq.n	8006fb6 <I2C_Slave_STOPF+0x6a>
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb4:	d135      	bne.n	8007022 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f043 0204 	orr.w	r2, r3, #4
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fe8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe fa40 	bl	8005474 <HAL_DMA_GetState>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d049      	beq.n	800708e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	4a69      	ldr	r2, [pc, #420]	; (80071a4 <I2C_Slave_STOPF+0x258>)
 8007000:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	4618      	mov	r0, r3
 8007008:	f7fd fef0 	bl	8004dec <HAL_DMA_Abort_IT>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d03d      	beq.n	800708e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800701c:	4610      	mov	r0, r2
 800701e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007020:	e035      	b.n	800708e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	b29a      	uxth	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d005      	beq.n	8007046 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	f043 0204 	orr.w	r2, r3, #4
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007054:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe fa0a 	bl	8005474 <HAL_DMA_GetState>
 8007060:	4603      	mov	r3, r0
 8007062:	2b01      	cmp	r3, #1
 8007064:	d014      	beq.n	8007090 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706a:	4a4e      	ldr	r2, [pc, #312]	; (80071a4 <I2C_Slave_STOPF+0x258>)
 800706c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007072:	4618      	mov	r0, r3
 8007074:	f7fd feba 	bl	8004dec <HAL_DMA_Abort_IT>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d008      	beq.n	8007090 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007088:	4610      	mov	r0, r2
 800708a:	4798      	blx	r3
 800708c:	e000      	b.n	8007090 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800708e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d03e      	beq.n	8007118 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d112      	bne.n	80070ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691a      	ldr	r2, [r3, #16]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d8:	2b40      	cmp	r3, #64	; 0x40
 80070da:	d112      	bne.n	8007102 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691a      	ldr	r2, [r3, #16]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007106:	b29b      	uxth	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	f043 0204 	orr.w	r2, r3, #4
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f8b3 	bl	800728c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007126:	e039      	b.n	800719c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	2b2a      	cmp	r3, #42	; 0x2a
 800712c:	d109      	bne.n	8007142 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2228      	movs	r2, #40	; 0x28
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff f844 	bl	80061ca <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b28      	cmp	r3, #40	; 0x28
 800714c:	d111      	bne.n	8007172 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a15      	ldr	r2, [pc, #84]	; (80071a8 <I2C_Slave_STOPF+0x25c>)
 8007152:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2220      	movs	r2, #32
 800715e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7ff f843 	bl	80061f6 <HAL_I2C_ListenCpltCallback>
}
 8007170:	e014      	b.n	800719c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	2b22      	cmp	r3, #34	; 0x22
 8007178:	d002      	beq.n	8007180 <I2C_Slave_STOPF+0x234>
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	2b22      	cmp	r3, #34	; 0x22
 800717e:	d10d      	bne.n	800719c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff f817 	bl	80061ca <HAL_I2C_SlaveRxCpltCallback>
}
 800719c:	bf00      	nop
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	080074f1 	.word	0x080074f1
 80071a8:	ffff0000 	.word	0xffff0000

080071ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d002      	beq.n	80071ce <I2C_Slave_AF+0x22>
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d129      	bne.n	8007222 <I2C_Slave_AF+0x76>
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	2b28      	cmp	r3, #40	; 0x28
 80071d2:	d126      	bne.n	8007222 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a2c      	ldr	r2, [pc, #176]	; (8007288 <I2C_Slave_AF+0xdc>)
 80071d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007202:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fe ffeb 	bl	80061f6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007220:	e02e      	b.n	8007280 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007222:	7bfb      	ldrb	r3, [r7, #15]
 8007224:	2b21      	cmp	r3, #33	; 0x21
 8007226:	d126      	bne.n	8007276 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a17      	ldr	r2, [pc, #92]	; (8007288 <I2C_Slave_AF+0xdc>)
 800722c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2221      	movs	r2, #33	; 0x21
 8007232:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2220      	movs	r2, #32
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007252:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800725c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800726c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7fe ffa2 	bl	80061b8 <HAL_I2C_SlaveTxCpltCallback>
}
 8007274:	e004      	b.n	8007280 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800727e:	615a      	str	r2, [r3, #20]
}
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	ffff0000 	.word	0xffff0000

0800728c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	2b10      	cmp	r3, #16
 80072a8:	d002      	beq.n	80072b0 <I2C_ITError+0x24>
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	2b40      	cmp	r3, #64	; 0x40
 80072ae:	d10a      	bne.n	80072c6 <I2C_ITError+0x3a>
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	2b22      	cmp	r3, #34	; 0x22
 80072b4:	d107      	bne.n	80072c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072cc:	2b28      	cmp	r3, #40	; 0x28
 80072ce:	d107      	bne.n	80072e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2228      	movs	r2, #40	; 0x28
 80072da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072de:	e015      	b.n	800730c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ee:	d00a      	beq.n	8007306 <I2C_ITError+0x7a>
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	2b60      	cmp	r3, #96	; 0x60
 80072f4:	d007      	beq.n	8007306 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800731a:	d161      	bne.n	80073e0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800732a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007330:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007334:	2b01      	cmp	r3, #1
 8007336:	d020      	beq.n	800737a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733c:	4a6a      	ldr	r2, [pc, #424]	; (80074e8 <I2C_ITError+0x25c>)
 800733e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007344:	4618      	mov	r0, r3
 8007346:	f7fd fd51 	bl	8004dec <HAL_DMA_Abort_IT>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8089 	beq.w	8007464 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0201 	bic.w	r2, r2, #1
 8007360:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3
 8007378:	e074      	b.n	8007464 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737e:	4a5a      	ldr	r2, [pc, #360]	; (80074e8 <I2C_ITError+0x25c>)
 8007380:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	4618      	mov	r0, r3
 8007388:	f7fd fd30 	bl	8004dec <HAL_DMA_Abort_IT>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d068      	beq.n	8007464 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	d10b      	bne.n	80073b8 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691a      	ldr	r2, [r3, #16]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0201 	bic.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073da:	4610      	mov	r0, r2
 80073dc:	4798      	blx	r3
 80073de:	e041      	b.n	8007464 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b60      	cmp	r3, #96	; 0x60
 80073ea:	d125      	bne.n	8007438 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007404:	2b40      	cmp	r3, #64	; 0x40
 8007406:	d10b      	bne.n	8007420 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691a      	ldr	r2, [r3, #16]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	b2d2      	uxtb	r2, r2
 8007414:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0201 	bic.w	r2, r2, #1
 800742e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7fb fd4d 	bl	8002ed0 <HAL_I2C_AbortCpltCallback>
 8007436:	e015      	b.n	8007464 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d10b      	bne.n	800745e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691a      	ldr	r2, [r3, #16]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fb fd16 	bl	8002e90 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007468:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10e      	bne.n	8007492 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007484:	2b00      	cmp	r3, #0
 8007486:	d104      	bne.n	8007492 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800748e:	2b00      	cmp	r3, #0
 8007490:	d007      	beq.n	80074a2 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074a0:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a8:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d113      	bne.n	80074de <I2C_ITError+0x252>
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	2b28      	cmp	r3, #40	; 0x28
 80074ba:	d110      	bne.n	80074de <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a0b      	ldr	r2, [pc, #44]	; (80074ec <I2C_ITError+0x260>)
 80074c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7fe fe8c 	bl	80061f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80074de:	bf00      	nop
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	080074f1 	.word	0x080074f1
 80074ec:	ffff0000 	.word	0xffff0000

080074f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007508:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800750a:	4b4b      	ldr	r3, [pc, #300]	; (8007638 <I2C_DMAAbort+0x148>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	08db      	lsrs	r3, r3, #3
 8007510:	4a4a      	ldr	r2, [pc, #296]	; (800763c <I2C_DMAAbort+0x14c>)
 8007512:	fba2 2303 	umull	r2, r3, r2, r3
 8007516:	0a1a      	lsrs	r2, r3, #8
 8007518:	4613      	mov	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	00da      	lsls	r2, r3, #3
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d106      	bne.n	8007538 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752e:	f043 0220 	orr.w	r2, r3, #32
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007536:	e00a      	b.n	800754e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3b01      	subs	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800754c:	d0ea      	beq.n	8007524 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755a:	2200      	movs	r2, #0
 800755c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756a:	2200      	movs	r2, #0
 800756c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800757c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2200      	movs	r2, #0
 8007582:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007590:	2200      	movs	r2, #0
 8007592:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a0:	2200      	movs	r2, #0
 80075a2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0201 	bic.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b60      	cmp	r3, #96	; 0x60
 80075be:	d10e      	bne.n	80075de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2200      	movs	r2, #0
 80075d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80075d6:	6978      	ldr	r0, [r7, #20]
 80075d8:	f7fb fc7a 	bl	8002ed0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075dc:	e027      	b.n	800762e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80075de:	7cfb      	ldrb	r3, [r7, #19]
 80075e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075e4:	2b28      	cmp	r3, #40	; 0x28
 80075e6:	d117      	bne.n	8007618 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0201 	orr.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007606:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	2200      	movs	r2, #0
 800760c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2228      	movs	r2, #40	; 0x28
 8007612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007616:	e007      	b.n	8007628 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2220      	movs	r2, #32
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007628:	6978      	ldr	r0, [r7, #20]
 800762a:	f7fb fc31 	bl	8002e90 <HAL_I2C_ErrorCallback>
}
 800762e:	bf00      	nop
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000148 	.word	0x20000148
 800763c:	14f8b589 	.word	0x14f8b589

08007640 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800764c:	4b13      	ldr	r3, [pc, #76]	; (800769c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	08db      	lsrs	r3, r3, #3
 8007652:	4a13      	ldr	r2, [pc, #76]	; (80076a0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007654:	fba2 2303 	umull	r2, r3, r2, r3
 8007658:	0a1a      	lsrs	r2, r3, #8
 800765a:	4613      	mov	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3b01      	subs	r3, #1
 8007666:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d107      	bne.n	800767e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	f043 0220 	orr.w	r2, r3, #32
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e008      	b.n	8007690 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800768c:	d0e9      	beq.n	8007662 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	20000148 	.word	0x20000148
 80076a0:	14f8b589 	.word	0x14f8b589

080076a4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80076b4:	d103      	bne.n	80076be <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80076bc:	e007      	b.n	80076ce <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80076c6:	d102      	bne.n	80076ce <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2208      	movs	r2, #8
 80076cc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bc80      	pop	{r7}
 80076d6:	4770      	bx	lr

080076d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80076dc:	4b03      	ldr	r3, [pc, #12]	; (80076ec <HAL_PWR_EnableBkUpAccess+0x14>)
 80076de:	2201      	movs	r2, #1
 80076e0:	601a      	str	r2, [r3, #0]
}
 80076e2:	bf00      	nop
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bc80      	pop	{r7}
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	420e0020 	.word	0x420e0020

080076f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e304      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 8087 	beq.w	800781e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007710:	4b92      	ldr	r3, [pc, #584]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f003 030c 	and.w	r3, r3, #12
 8007718:	2b04      	cmp	r3, #4
 800771a:	d00c      	beq.n	8007736 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800771c:	4b8f      	ldr	r3, [pc, #572]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f003 030c 	and.w	r3, r3, #12
 8007724:	2b08      	cmp	r3, #8
 8007726:	d112      	bne.n	800774e <HAL_RCC_OscConfig+0x5e>
 8007728:	4b8c      	ldr	r3, [pc, #560]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007734:	d10b      	bne.n	800774e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007736:	4b89      	ldr	r3, [pc, #548]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d06c      	beq.n	800781c <HAL_RCC_OscConfig+0x12c>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d168      	bne.n	800781c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e2de      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007756:	d106      	bne.n	8007766 <HAL_RCC_OscConfig+0x76>
 8007758:	4b80      	ldr	r3, [pc, #512]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a7f      	ldr	r2, [pc, #508]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 800775e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	e02e      	b.n	80077c4 <HAL_RCC_OscConfig+0xd4>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10c      	bne.n	8007788 <HAL_RCC_OscConfig+0x98>
 800776e:	4b7b      	ldr	r3, [pc, #492]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a7a      	ldr	r2, [pc, #488]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	4b78      	ldr	r3, [pc, #480]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a77      	ldr	r2, [pc, #476]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	e01d      	b.n	80077c4 <HAL_RCC_OscConfig+0xd4>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007790:	d10c      	bne.n	80077ac <HAL_RCC_OscConfig+0xbc>
 8007792:	4b72      	ldr	r3, [pc, #456]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a71      	ldr	r2, [pc, #452]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800779c:	6013      	str	r3, [r2, #0]
 800779e:	4b6f      	ldr	r3, [pc, #444]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a6e      	ldr	r2, [pc, #440]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 80077a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	e00b      	b.n	80077c4 <HAL_RCC_OscConfig+0xd4>
 80077ac:	4b6b      	ldr	r3, [pc, #428]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a6a      	ldr	r2, [pc, #424]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 80077b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	4b68      	ldr	r3, [pc, #416]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a67      	ldr	r2, [pc, #412]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 80077be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d013      	beq.n	80077f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077cc:	f7fd f914 	bl	80049f8 <HAL_GetTick>
 80077d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077d2:	e008      	b.n	80077e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077d4:	f7fd f910 	bl	80049f8 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b64      	cmp	r3, #100	; 0x64
 80077e0:	d901      	bls.n	80077e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e292      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077e6:	4b5d      	ldr	r3, [pc, #372]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0f0      	beq.n	80077d4 <HAL_RCC_OscConfig+0xe4>
 80077f2:	e014      	b.n	800781e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077f4:	f7fd f900 	bl	80049f8 <HAL_GetTick>
 80077f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077fa:	e008      	b.n	800780e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077fc:	f7fd f8fc 	bl	80049f8 <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b64      	cmp	r3, #100	; 0x64
 8007808:	d901      	bls.n	800780e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e27e      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800780e:	4b53      	ldr	r3, [pc, #332]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1f0      	bne.n	80077fc <HAL_RCC_OscConfig+0x10c>
 800781a:	e000      	b.n	800781e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800781c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d063      	beq.n	80078f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800782a:	4b4c      	ldr	r3, [pc, #304]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f003 030c 	and.w	r3, r3, #12
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00b      	beq.n	800784e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007836:	4b49      	ldr	r3, [pc, #292]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f003 030c 	and.w	r3, r3, #12
 800783e:	2b08      	cmp	r3, #8
 8007840:	d11c      	bne.n	800787c <HAL_RCC_OscConfig+0x18c>
 8007842:	4b46      	ldr	r3, [pc, #280]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d116      	bne.n	800787c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800784e:	4b43      	ldr	r3, [pc, #268]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <HAL_RCC_OscConfig+0x176>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d001      	beq.n	8007866 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e252      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007866:	4b3d      	ldr	r3, [pc, #244]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	4939      	ldr	r1, [pc, #228]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007876:	4313      	orrs	r3, r2
 8007878:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800787a:	e03a      	b.n	80078f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d020      	beq.n	80078c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007884:	4b36      	ldr	r3, [pc, #216]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007886:	2201      	movs	r2, #1
 8007888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800788a:	f7fd f8b5 	bl	80049f8 <HAL_GetTick>
 800788e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007890:	e008      	b.n	80078a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007892:	f7fd f8b1 	bl	80049f8 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	2b02      	cmp	r3, #2
 800789e:	d901      	bls.n	80078a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e233      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078a4:	4b2d      	ldr	r3, [pc, #180]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0302 	and.w	r3, r3, #2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0f0      	beq.n	8007892 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078b0:	4b2a      	ldr	r3, [pc, #168]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	00db      	lsls	r3, r3, #3
 80078be:	4927      	ldr	r1, [pc, #156]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	600b      	str	r3, [r1, #0]
 80078c4:	e015      	b.n	80078f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078c6:	4b26      	ldr	r3, [pc, #152]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078cc:	f7fd f894 	bl	80049f8 <HAL_GetTick>
 80078d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078d2:	e008      	b.n	80078e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078d4:	f7fd f890 	bl	80049f8 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e212      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078e6:	4b1d      	ldr	r3, [pc, #116]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1f0      	bne.n	80078d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0308 	and.w	r3, r3, #8
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d03a      	beq.n	8007974 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d019      	beq.n	800793a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007906:	4b17      	ldr	r3, [pc, #92]	; (8007964 <HAL_RCC_OscConfig+0x274>)
 8007908:	2201      	movs	r2, #1
 800790a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800790c:	f7fd f874 	bl	80049f8 <HAL_GetTick>
 8007910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007912:	e008      	b.n	8007926 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007914:	f7fd f870 	bl	80049f8 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b02      	cmp	r3, #2
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e1f2      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007926:	4b0d      	ldr	r3, [pc, #52]	; (800795c <HAL_RCC_OscConfig+0x26c>)
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0f0      	beq.n	8007914 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007932:	2001      	movs	r0, #1
 8007934:	f000 fc22 	bl	800817c <RCC_Delay>
 8007938:	e01c      	b.n	8007974 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800793a:	4b0a      	ldr	r3, [pc, #40]	; (8007964 <HAL_RCC_OscConfig+0x274>)
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007940:	f7fd f85a 	bl	80049f8 <HAL_GetTick>
 8007944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007946:	e00f      	b.n	8007968 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007948:	f7fd f856 	bl	80049f8 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b02      	cmp	r3, #2
 8007954:	d908      	bls.n	8007968 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e1d8      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
 800795a:	bf00      	nop
 800795c:	40021000 	.word	0x40021000
 8007960:	42420000 	.word	0x42420000
 8007964:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007968:	4b9b      	ldr	r3, [pc, #620]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e9      	bne.n	8007948 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0304 	and.w	r3, r3, #4
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 80a6 	beq.w	8007ace <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007982:	2300      	movs	r3, #0
 8007984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007986:	4b94      	ldr	r3, [pc, #592]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10d      	bne.n	80079ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007992:	4b91      	ldr	r3, [pc, #580]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	4a90      	ldr	r2, [pc, #576]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799c:	61d3      	str	r3, [r2, #28]
 800799e:	4b8e      	ldr	r3, [pc, #568]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a6:	60bb      	str	r3, [r7, #8]
 80079a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079aa:	2301      	movs	r3, #1
 80079ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ae:	4b8b      	ldr	r3, [pc, #556]	; (8007bdc <HAL_RCC_OscConfig+0x4ec>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d118      	bne.n	80079ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079ba:	4b88      	ldr	r3, [pc, #544]	; (8007bdc <HAL_RCC_OscConfig+0x4ec>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a87      	ldr	r2, [pc, #540]	; (8007bdc <HAL_RCC_OscConfig+0x4ec>)
 80079c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079c6:	f7fd f817 	bl	80049f8 <HAL_GetTick>
 80079ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079cc:	e008      	b.n	80079e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079ce:	f7fd f813 	bl	80049f8 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b64      	cmp	r3, #100	; 0x64
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e195      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079e0:	4b7e      	ldr	r3, [pc, #504]	; (8007bdc <HAL_RCC_OscConfig+0x4ec>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d0f0      	beq.n	80079ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d106      	bne.n	8007a02 <HAL_RCC_OscConfig+0x312>
 80079f4:	4b78      	ldr	r3, [pc, #480]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	4a77      	ldr	r2, [pc, #476]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 80079fa:	f043 0301 	orr.w	r3, r3, #1
 80079fe:	6213      	str	r3, [r2, #32]
 8007a00:	e02d      	b.n	8007a5e <HAL_RCC_OscConfig+0x36e>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10c      	bne.n	8007a24 <HAL_RCC_OscConfig+0x334>
 8007a0a:	4b73      	ldr	r3, [pc, #460]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	4a72      	ldr	r2, [pc, #456]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a10:	f023 0301 	bic.w	r3, r3, #1
 8007a14:	6213      	str	r3, [r2, #32]
 8007a16:	4b70      	ldr	r3, [pc, #448]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	4a6f      	ldr	r2, [pc, #444]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a1c:	f023 0304 	bic.w	r3, r3, #4
 8007a20:	6213      	str	r3, [r2, #32]
 8007a22:	e01c      	b.n	8007a5e <HAL_RCC_OscConfig+0x36e>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	2b05      	cmp	r3, #5
 8007a2a:	d10c      	bne.n	8007a46 <HAL_RCC_OscConfig+0x356>
 8007a2c:	4b6a      	ldr	r3, [pc, #424]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	4a69      	ldr	r2, [pc, #420]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a32:	f043 0304 	orr.w	r3, r3, #4
 8007a36:	6213      	str	r3, [r2, #32]
 8007a38:	4b67      	ldr	r3, [pc, #412]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	4a66      	ldr	r2, [pc, #408]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a3e:	f043 0301 	orr.w	r3, r3, #1
 8007a42:	6213      	str	r3, [r2, #32]
 8007a44:	e00b      	b.n	8007a5e <HAL_RCC_OscConfig+0x36e>
 8007a46:	4b64      	ldr	r3, [pc, #400]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	4a63      	ldr	r2, [pc, #396]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a4c:	f023 0301 	bic.w	r3, r3, #1
 8007a50:	6213      	str	r3, [r2, #32]
 8007a52:	4b61      	ldr	r3, [pc, #388]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	4a60      	ldr	r2, [pc, #384]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a58:	f023 0304 	bic.w	r3, r3, #4
 8007a5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d015      	beq.n	8007a92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a66:	f7fc ffc7 	bl	80049f8 <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a6c:	e00a      	b.n	8007a84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a6e:	f7fc ffc3 	bl	80049f8 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e143      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a84:	4b54      	ldr	r3, [pc, #336]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0ee      	beq.n	8007a6e <HAL_RCC_OscConfig+0x37e>
 8007a90:	e014      	b.n	8007abc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a92:	f7fc ffb1 	bl	80049f8 <HAL_GetTick>
 8007a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a98:	e00a      	b.n	8007ab0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a9a:	f7fc ffad 	bl	80049f8 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d901      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e12d      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ab0:	4b49      	ldr	r3, [pc, #292]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1ee      	bne.n	8007a9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d105      	bne.n	8007ace <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ac2:	4b45      	ldr	r3, [pc, #276]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	4a44      	ldr	r2, [pc, #272]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007acc:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 808c 	beq.w	8007bf0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007ad8:	4b3f      	ldr	r3, [pc, #252]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae4:	d10e      	bne.n	8007b04 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8007ae6:	4b3c      	ldr	r3, [pc, #240]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	d108      	bne.n	8007b04 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8007af2:	4b39      	ldr	r3, [pc, #228]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8007afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007afe:	d101      	bne.n	8007b04 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e103      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d14e      	bne.n	8007baa <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007b0c:	4b32      	ldr	r3, [pc, #200]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d009      	beq.n	8007b2c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8007b18:	4b2f      	ldr	r3, [pc, #188]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d001      	beq.n	8007b2c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e0ef      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007b2c:	4b2c      	ldr	r3, [pc, #176]	; (8007be0 <HAL_RCC_OscConfig+0x4f0>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b32:	f7fc ff61 	bl	80049f8 <HAL_GetTick>
 8007b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007b38:	e008      	b.n	8007b4c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b3a:	f7fc ff5d 	bl	80049f8 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	2b64      	cmp	r3, #100	; 0x64
 8007b46:	d901      	bls.n	8007b4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e0df      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007b4c:	4b22      	ldr	r3, [pc, #136]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1f0      	bne.n	8007b3a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8007b58:	4b1f      	ldr	r3, [pc, #124]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b64:	491c      	ldr	r1, [pc, #112]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8007b6a:	4b1b      	ldr	r3, [pc, #108]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b76:	4918      	ldr	r1, [pc, #96]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8007b7c:	4b18      	ldr	r3, [pc, #96]	; (8007be0 <HAL_RCC_OscConfig+0x4f0>)
 8007b7e:	2201      	movs	r2, #1
 8007b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b82:	f7fc ff39 	bl	80049f8 <HAL_GetTick>
 8007b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007b88:	e008      	b.n	8007b9c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b8a:	f7fc ff35 	bl	80049f8 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	2b64      	cmp	r3, #100	; 0x64
 8007b96:	d901      	bls.n	8007b9c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e0b7      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0f0      	beq.n	8007b8a <HAL_RCC_OscConfig+0x49a>
 8007ba8:	e022      	b.n	8007bf0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8007baa:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	4a0a      	ldr	r2, [pc, #40]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007bb6:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <HAL_RCC_OscConfig+0x4f0>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bbc:	f7fc ff1c 	bl	80049f8 <HAL_GetTick>
 8007bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8007bc2:	e00f      	b.n	8007be4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bc4:	f7fc ff18 	bl	80049f8 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b64      	cmp	r3, #100	; 0x64
 8007bd0:	d908      	bls.n	8007be4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e09a      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
 8007bd6:	bf00      	nop
 8007bd8:	40021000 	.word	0x40021000
 8007bdc:	40007000 	.word	0x40007000
 8007be0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8007be4:	4b4b      	ldr	r3, [pc, #300]	; (8007d14 <HAL_RCC_OscConfig+0x624>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e9      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 8088 	beq.w	8007d0a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bfa:	4b46      	ldr	r3, [pc, #280]	; (8007d14 <HAL_RCC_OscConfig+0x624>)
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f003 030c 	and.w	r3, r3, #12
 8007c02:	2b08      	cmp	r3, #8
 8007c04:	d068      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d14d      	bne.n	8007caa <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c0e:	4b42      	ldr	r3, [pc, #264]	; (8007d18 <HAL_RCC_OscConfig+0x628>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c14:	f7fc fef0 	bl	80049f8 <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c1c:	f7fc feec 	bl	80049f8 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e06e      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c2e:	4b39      	ldr	r3, [pc, #228]	; (8007d14 <HAL_RCC_OscConfig+0x624>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1f0      	bne.n	8007c1c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c42:	d10f      	bne.n	8007c64 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8007c44:	4b33      	ldr	r3, [pc, #204]	; (8007d14 <HAL_RCC_OscConfig+0x624>)
 8007c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	4931      	ldr	r1, [pc, #196]	; (8007d14 <HAL_RCC_OscConfig+0x624>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007c52:	4b30      	ldr	r3, [pc, #192]	; (8007d14 <HAL_RCC_OscConfig+0x624>)
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	f023 020f 	bic.w	r2, r3, #15
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	492d      	ldr	r1, [pc, #180]	; (8007d14 <HAL_RCC_OscConfig+0x624>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c64:	4b2b      	ldr	r3, [pc, #172]	; (8007d14 <HAL_RCC_OscConfig+0x624>)
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c74:	430b      	orrs	r3, r1
 8007c76:	4927      	ldr	r1, [pc, #156]	; (8007d14 <HAL_RCC_OscConfig+0x624>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c7c:	4b26      	ldr	r3, [pc, #152]	; (8007d18 <HAL_RCC_OscConfig+0x628>)
 8007c7e:	2201      	movs	r2, #1
 8007c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c82:	f7fc feb9 	bl	80049f8 <HAL_GetTick>
 8007c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c88:	e008      	b.n	8007c9c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c8a:	f7fc feb5 	bl	80049f8 <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d901      	bls.n	8007c9c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e037      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c9c:	4b1d      	ldr	r3, [pc, #116]	; (8007d14 <HAL_RCC_OscConfig+0x624>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d0f0      	beq.n	8007c8a <HAL_RCC_OscConfig+0x59a>
 8007ca8:	e02f      	b.n	8007d0a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007caa:	4b1b      	ldr	r3, [pc, #108]	; (8007d18 <HAL_RCC_OscConfig+0x628>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cb0:	f7fc fea2 	bl	80049f8 <HAL_GetTick>
 8007cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cb6:	e008      	b.n	8007cca <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cb8:	f7fc fe9e 	bl	80049f8 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e020      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cca:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <HAL_RCC_OscConfig+0x624>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1f0      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x5c8>
 8007cd6:	e018      	b.n	8007d0a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e013      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007ce4:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <HAL_RCC_OscConfig+0x624>)
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d106      	bne.n	8007d06 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d001      	beq.n	8007d0a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40021000 	.word	0x40021000
 8007d18:	42420060 	.word	0x42420060

08007d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e0d0      	b.n	8007ed2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d30:	4b6a      	ldr	r3, [pc, #424]	; (8007edc <HAL_RCC_ClockConfig+0x1c0>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0307 	and.w	r3, r3, #7
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d910      	bls.n	8007d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d3e:	4b67      	ldr	r3, [pc, #412]	; (8007edc <HAL_RCC_ClockConfig+0x1c0>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f023 0207 	bic.w	r2, r3, #7
 8007d46:	4965      	ldr	r1, [pc, #404]	; (8007edc <HAL_RCC_ClockConfig+0x1c0>)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d4e:	4b63      	ldr	r3, [pc, #396]	; (8007edc <HAL_RCC_ClockConfig+0x1c0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d001      	beq.n	8007d60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e0b8      	b.n	8007ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d020      	beq.n	8007dae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d78:	4b59      	ldr	r3, [pc, #356]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	4a58      	ldr	r2, [pc, #352]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007d82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0308 	and.w	r3, r3, #8
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d005      	beq.n	8007d9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d90:	4b53      	ldr	r3, [pc, #332]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	4a52      	ldr	r2, [pc, #328]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007d9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d9c:	4b50      	ldr	r3, [pc, #320]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	494d      	ldr	r1, [pc, #308]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d040      	beq.n	8007e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d107      	bne.n	8007dd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dc2:	4b47      	ldr	r3, [pc, #284]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d115      	bne.n	8007dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e07f      	b.n	8007ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d107      	bne.n	8007dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dda:	4b41      	ldr	r3, [pc, #260]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d109      	bne.n	8007dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e073      	b.n	8007ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dea:	4b3d      	ldr	r3, [pc, #244]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e06b      	b.n	8007ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dfa:	4b39      	ldr	r3, [pc, #228]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f023 0203 	bic.w	r2, r3, #3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	4936      	ldr	r1, [pc, #216]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e0c:	f7fc fdf4 	bl	80049f8 <HAL_GetTick>
 8007e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e12:	e00a      	b.n	8007e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e14:	f7fc fdf0 	bl	80049f8 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e053      	b.n	8007ed2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e2a:	4b2d      	ldr	r3, [pc, #180]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f003 020c 	and.w	r2, r3, #12
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d1eb      	bne.n	8007e14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e3c:	4b27      	ldr	r3, [pc, #156]	; (8007edc <HAL_RCC_ClockConfig+0x1c0>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d210      	bcs.n	8007e6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e4a:	4b24      	ldr	r3, [pc, #144]	; (8007edc <HAL_RCC_ClockConfig+0x1c0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f023 0207 	bic.w	r2, r3, #7
 8007e52:	4922      	ldr	r1, [pc, #136]	; (8007edc <HAL_RCC_ClockConfig+0x1c0>)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e5a:	4b20      	ldr	r3, [pc, #128]	; (8007edc <HAL_RCC_ClockConfig+0x1c0>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0307 	and.w	r3, r3, #7
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d001      	beq.n	8007e6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e032      	b.n	8007ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d008      	beq.n	8007e8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e78:	4b19      	ldr	r3, [pc, #100]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	4916      	ldr	r1, [pc, #88]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0308 	and.w	r3, r3, #8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d009      	beq.n	8007eaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e96:	4b12      	ldr	r3, [pc, #72]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	490e      	ldr	r1, [pc, #56]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007eaa:	f000 f821 	bl	8007ef0 <HAL_RCC_GetSysClockFreq>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	4b0b      	ldr	r3, [pc, #44]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	091b      	lsrs	r3, r3, #4
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	490a      	ldr	r1, [pc, #40]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ebc:	5ccb      	ldrb	r3, [r1, r3]
 8007ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec2:	4a09      	ldr	r2, [pc, #36]	; (8007ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8007ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007ec6:	4b09      	ldr	r3, [pc, #36]	; (8007eec <HAL_RCC_ClockConfig+0x1d0>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fc f83c 	bl	8003f48 <HAL_InitTick>

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	40022000 	.word	0x40022000
 8007ee0:	40021000 	.word	0x40021000
 8007ee4:	080123a0 	.word	0x080123a0
 8007ee8:	20000148 	.word	0x20000148
 8007eec:	2000014c 	.word	0x2000014c

08007ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ef4:	b091      	sub	sp, #68	; 0x44
 8007ef6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8007ef8:	4b6a      	ldr	r3, [pc, #424]	; (80080a4 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8007efa:	f107 0414 	add.w	r4, r7, #20
 8007efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007f00:	c407      	stmia	r4!, {r0, r1, r2}
 8007f02:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8007f04:	4b68      	ldr	r3, [pc, #416]	; (80080a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f06:	1d3c      	adds	r4, r7, #4
 8007f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007f0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	637b      	str	r3, [r7, #52]	; 0x34
 8007f12:	2300      	movs	r3, #0
 8007f14:	633b      	str	r3, [r7, #48]	; 0x30
 8007f16:	2300      	movs	r3, #0
 8007f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f26:	2300      	movs	r3, #0
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007f2a:	4b60      	ldr	r3, [pc, #384]	; (80080ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f32:	f003 030c 	and.w	r3, r3, #12
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d002      	beq.n	8007f40 <HAL_RCC_GetSysClockFreq+0x50>
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	d003      	beq.n	8007f46 <HAL_RCC_GetSysClockFreq+0x56>
 8007f3e:	e0a8      	b.n	8008092 <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007f40:	4b5b      	ldr	r3, [pc, #364]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007f42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f44:	e0a8      	b.n	8008098 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f48:	0c9b      	lsrs	r3, r3, #18
 8007f4a:	f003 030f 	and.w	r3, r3, #15
 8007f4e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007f52:	4413      	add	r3, r2
 8007f54:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 808e 	beq.w	8008082 <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8007f66:	4b51      	ldr	r3, [pc, #324]	; (80080ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007f72:	4413      	add	r3, r2
 8007f74:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8007f78:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8007f7a:	4b4c      	ldr	r3, [pc, #304]	; (80080ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d06b      	beq.n	800805e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8007f86:	4b49      	ldr	r3, [pc, #292]	; (80080ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8a:	091b      	lsrs	r3, r3, #4
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	3301      	adds	r3, #1
 8007f92:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8007f94:	4b45      	ldr	r3, [pc, #276]	; (80080ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f98:	0a1b      	lsrs	r3, r3, #8
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	3302      	adds	r3, #2
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f04f 0100 	mov.w	r1, #0
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	461a      	mov	r2, r3
 8007fae:	f04f 0300 	mov.w	r3, #0
 8007fb2:	fb02 f501 	mul.w	r5, r2, r1
 8007fb6:	fb00 f403 	mul.w	r4, r0, r3
 8007fba:	192e      	adds	r6, r5, r4
 8007fbc:	fba0 4502 	umull	r4, r5, r0, r2
 8007fc0:	1973      	adds	r3, r6, r5
 8007fc2:	461d      	mov	r5, r3
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	014b      	lsls	r3, r1, #5
 8007fd2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007fd6:	0142      	lsls	r2, r0, #5
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4619      	mov	r1, r3
 8007fdc:	1b00      	subs	r0, r0, r4
 8007fde:	eb61 0105 	sbc.w	r1, r1, r5
 8007fe2:	f04f 0200 	mov.w	r2, #0
 8007fe6:	f04f 0300 	mov.w	r3, #0
 8007fea:	018b      	lsls	r3, r1, #6
 8007fec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007ff0:	0182      	lsls	r2, r0, #6
 8007ff2:	1a12      	subs	r2, r2, r0
 8007ff4:	eb63 0301 	sbc.w	r3, r3, r1
 8007ff8:	f04f 0000 	mov.w	r0, #0
 8007ffc:	f04f 0100 	mov.w	r1, #0
 8008000:	00d9      	lsls	r1, r3, #3
 8008002:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008006:	00d0      	lsls	r0, r2, #3
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	1912      	adds	r2, r2, r4
 800800e:	eb45 0303 	adc.w	r3, r5, r3
 8008012:	f04f 0000 	mov.w	r0, #0
 8008016:	f04f 0100 	mov.w	r1, #0
 800801a:	0259      	lsls	r1, r3, #9
 800801c:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008020:	0250      	lsls	r0, r2, #9
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4690      	mov	r8, r2
 8008028:	4699      	mov	r9, r3
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	4618      	mov	r0, r3
 800802e:	f04f 0100 	mov.w	r1, #0
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	461a      	mov	r2, r3
 8008036:	f04f 0300 	mov.w	r3, #0
 800803a:	fb02 f501 	mul.w	r5, r2, r1
 800803e:	fb00 f403 	mul.w	r4, r0, r3
 8008042:	442c      	add	r4, r5
 8008044:	fba0 2302 	umull	r2, r3, r0, r2
 8008048:	18e1      	adds	r1, r4, r3
 800804a:	460b      	mov	r3, r1
 800804c:	4640      	mov	r0, r8
 800804e:	4649      	mov	r1, r9
 8008050:	f7f9 f8b8 	bl	80011c4 <__aeabi_uldivmod>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4613      	mov	r3, r2
 800805a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800805c:	e007      	b.n	800806e <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800805e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008060:	4a13      	ldr	r2, [pc, #76]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008062:	fb02 f203 	mul.w	r2, r2, r3
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	fbb2 f3f3 	udiv	r3, r2, r3
 800806c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800806e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008072:	461a      	mov	r2, r3
 8008074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008076:	4293      	cmp	r3, r2
 8008078:	d108      	bne.n	800808c <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 800807a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807c:	085b      	lsrs	r3, r3, #1
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008080:	e004      	b.n	800808c <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008084:	4a0b      	ldr	r2, [pc, #44]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8008086:	fb02 f303 	mul.w	r3, r2, r3
 800808a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 800808c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008090:	e002      	b.n	8008098 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008092:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008094:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008096:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800809a:	4618      	mov	r0, r3
 800809c:	3744      	adds	r7, #68	; 0x44
 800809e:	46bd      	mov	sp, r7
 80080a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080a4:	08011b9c 	.word	0x08011b9c
 80080a8:	08011bac 	.word	0x08011bac
 80080ac:	40021000 	.word	0x40021000
 80080b0:	007a1200 	.word	0x007a1200
 80080b4:	003d0900 	.word	0x003d0900

080080b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080bc:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80080be:	681b      	ldr	r3, [r3, #0]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr
 80080c8:	20000148 	.word	0x20000148

080080cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80080d0:	f7ff fff2 	bl	80080b8 <HAL_RCC_GetHCLKFreq>
 80080d4:	4602      	mov	r2, r0
 80080d6:	4b05      	ldr	r3, [pc, #20]	; (80080ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	0a1b      	lsrs	r3, r3, #8
 80080dc:	f003 0307 	and.w	r3, r3, #7
 80080e0:	4903      	ldr	r1, [pc, #12]	; (80080f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080e2:	5ccb      	ldrb	r3, [r1, r3]
 80080e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	40021000 	.word	0x40021000
 80080f0:	080123b0 	.word	0x080123b0

080080f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80080f8:	f7ff ffde 	bl	80080b8 <HAL_RCC_GetHCLKFreq>
 80080fc:	4602      	mov	r2, r0
 80080fe:	4b05      	ldr	r3, [pc, #20]	; (8008114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	0adb      	lsrs	r3, r3, #11
 8008104:	f003 0307 	and.w	r3, r3, #7
 8008108:	4903      	ldr	r1, [pc, #12]	; (8008118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800810a:	5ccb      	ldrb	r3, [r1, r3]
 800810c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008110:	4618      	mov	r0, r3
 8008112:	bd80      	pop	{r7, pc}
 8008114:	40021000 	.word	0x40021000
 8008118:	080123b0 	.word	0x080123b0

0800811c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	220f      	movs	r2, #15
 800812a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800812c:	4b11      	ldr	r3, [pc, #68]	; (8008174 <HAL_RCC_GetClockConfig+0x58>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f003 0203 	and.w	r2, r3, #3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008138:	4b0e      	ldr	r3, [pc, #56]	; (8008174 <HAL_RCC_GetClockConfig+0x58>)
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008144:	4b0b      	ldr	r3, [pc, #44]	; (8008174 <HAL_RCC_GetClockConfig+0x58>)
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008150:	4b08      	ldr	r3, [pc, #32]	; (8008174 <HAL_RCC_GetClockConfig+0x58>)
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	08db      	lsrs	r3, r3, #3
 8008156:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800815e:	4b06      	ldr	r3, [pc, #24]	; (8008178 <HAL_RCC_GetClockConfig+0x5c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0207 	and.w	r2, r3, #7
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800816a:	bf00      	nop
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr
 8008174:	40021000 	.word	0x40021000
 8008178:	40022000 	.word	0x40022000

0800817c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008184:	4b0a      	ldr	r3, [pc, #40]	; (80081b0 <RCC_Delay+0x34>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a0a      	ldr	r2, [pc, #40]	; (80081b4 <RCC_Delay+0x38>)
 800818a:	fba2 2303 	umull	r2, r3, r2, r3
 800818e:	0a5b      	lsrs	r3, r3, #9
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	fb02 f303 	mul.w	r3, r2, r3
 8008196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008198:	bf00      	nop
  }
  while (Delay --);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	1e5a      	subs	r2, r3, #1
 800819e:	60fa      	str	r2, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f9      	bne.n	8008198 <RCC_Delay+0x1c>
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bc80      	pop	{r7}
 80081ae:	4770      	bx	lr
 80081b0:	20000148 	.word	0x20000148
 80081b4:	10624dd3 	.word	0x10624dd3

080081b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	2300      	movs	r3, #0
 80081c6:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d07d      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80081d8:	2300      	movs	r3, #0
 80081da:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081dc:	4b8b      	ldr	r3, [pc, #556]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10d      	bne.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081e8:	4b88      	ldr	r3, [pc, #544]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	4a87      	ldr	r2, [pc, #540]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f2:	61d3      	str	r3, [r2, #28]
 80081f4:	4b85      	ldr	r3, [pc, #532]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008200:	2301      	movs	r3, #1
 8008202:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008204:	4b82      	ldr	r3, [pc, #520]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820c:	2b00      	cmp	r3, #0
 800820e:	d118      	bne.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008210:	4b7f      	ldr	r3, [pc, #508]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a7e      	ldr	r2, [pc, #504]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800821a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800821c:	f7fc fbec 	bl	80049f8 <HAL_GetTick>
 8008220:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008222:	e008      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008224:	f7fc fbe8 	bl	80049f8 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	2b64      	cmp	r3, #100	; 0x64
 8008230:	d901      	bls.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e0e5      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008236:	4b76      	ldr	r3, [pc, #472]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0f0      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008242:	4b72      	ldr	r3, [pc, #456]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800824a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d02e      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	429a      	cmp	r2, r3
 800825e:	d027      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008260:	4b6a      	ldr	r3, [pc, #424]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008268:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800826a:	4b6a      	ldr	r3, [pc, #424]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800826c:	2201      	movs	r2, #1
 800826e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008270:	4b68      	ldr	r3, [pc, #416]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008276:	4a65      	ldr	r2, [pc, #404]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d014      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008286:	f7fc fbb7 	bl	80049f8 <HAL_GetTick>
 800828a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800828c:	e00a      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800828e:	f7fc fbb3 	bl	80049f8 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	f241 3288 	movw	r2, #5000	; 0x1388
 800829c:	4293      	cmp	r3, r2
 800829e:	d901      	bls.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e0ae      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082a4:	4b59      	ldr	r3, [pc, #356]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	f003 0302 	and.w	r3, r3, #2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d0ee      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082b0:	4b56      	ldr	r3, [pc, #344]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	4953      	ldr	r1, [pc, #332]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80082c2:	7efb      	ldrb	r3, [r7, #27]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d105      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082c8:	4b50      	ldr	r3, [pc, #320]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082ca:	69db      	ldr	r3, [r3, #28]
 80082cc:	4a4f      	ldr	r2, [pc, #316]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d008      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082e0:	4b4a      	ldr	r3, [pc, #296]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	4947      	ldr	r1, [pc, #284]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0304 	and.w	r3, r3, #4
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d008      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80082fe:	4b43      	ldr	r3, [pc, #268]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	4940      	ldr	r1, [pc, #256]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800830c:	4313      	orrs	r3, r2
 800830e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0308 	and.w	r3, r3, #8
 8008318:	2b00      	cmp	r3, #0
 800831a:	d008      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 800831c:	4b3b      	ldr	r3, [pc, #236]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	4938      	ldr	r1, [pc, #224]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800832a:	4313      	orrs	r3, r2
 800832c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800832e:	4b37      	ldr	r3, [pc, #220]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d105      	bne.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800833a:	4b34      	ldr	r3, [pc, #208]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800833c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8008346:	2301      	movs	r3, #1
 8008348:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d148      	bne.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8008350:	4b2e      	ldr	r3, [pc, #184]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d138      	bne.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800835c:	4b2b      	ldr	r3, [pc, #172]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d009      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8008368:	4b28      	ldr	r3, [pc, #160]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800836a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8008374:	429a      	cmp	r2, r3
 8008376:	d001      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e042      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800837c:	4b23      	ldr	r3, [pc, #140]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	4920      	ldr	r1, [pc, #128]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800838a:	4313      	orrs	r3, r2
 800838c:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800838e:	4b1f      	ldr	r3, [pc, #124]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008392:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	491c      	ldr	r1, [pc, #112]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800839c:	4313      	orrs	r3, r2
 800839e:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80083a0:	4b1d      	ldr	r3, [pc, #116]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083a2:	2201      	movs	r2, #1
 80083a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083a6:	f7fc fb27 	bl	80049f8 <HAL_GetTick>
 80083aa:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083ac:	e008      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80083ae:	f7fc fb23 	bl	80049f8 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	2b64      	cmp	r3, #100	; 0x64
 80083ba:	d901      	bls.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e020      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083c0:	4b12      	ldr	r3, [pc, #72]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0f0      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80083cc:	e009      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80083ce:	4b0f      	ldr	r3, [pc, #60]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80083d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d001      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e00f      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0310 	and.w	r3, r3, #16
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d008      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083ee:	4b07      	ldr	r3, [pc, #28]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	4904      	ldr	r1, [pc, #16]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3720      	adds	r7, #32
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	40021000 	.word	0x40021000
 8008410:	40007000 	.word	0x40007000
 8008414:	42420440 	.word	0x42420440
 8008418:	42420070 	.word	0x42420070

0800841c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800841c:	b590      	push	{r4, r7, lr}
 800841e:	b093      	sub	sp, #76	; 0x4c
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8008424:	4ba9      	ldr	r3, [pc, #676]	; (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8008426:	f107 0418 	add.w	r4, r7, #24
 800842a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800842c:	c407      	stmia	r4!, {r0, r1, r2}
 800842e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8008430:	4ba7      	ldr	r3, [pc, #668]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008432:	f107 0408 	add.w	r4, r7, #8
 8008436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008438:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800843c:	2300      	movs	r3, #0
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008440:	2300      	movs	r3, #0
 8008442:	647b      	str	r3, [r7, #68]	; 0x44
 8008444:	2300      	movs	r3, #0
 8008446:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	637b      	str	r3, [r7, #52]	; 0x34
 800844c:	2300      	movs	r3, #0
 800844e:	633b      	str	r3, [r7, #48]	; 0x30
 8008450:	2300      	movs	r3, #0
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	62bb      	str	r3, [r7, #40]	; 0x28
 8008458:	2300      	movs	r3, #0
 800845a:	643b      	str	r3, [r7, #64]	; 0x40
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3b01      	subs	r3, #1
 8008460:	2b0f      	cmp	r3, #15
 8008462:	f200 8124 	bhi.w	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8008466:	a201      	add	r2, pc, #4	; (adr r2, 800846c <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	0800862d 	.word	0x0800862d
 8008470:	08008693 	.word	0x08008693
 8008474:	080086af 	.word	0x080086af
 8008478:	0800858b 	.word	0x0800858b
 800847c:	080086af 	.word	0x080086af
 8008480:	080086af 	.word	0x080086af
 8008484:	080086af 	.word	0x080086af
 8008488:	080085dd 	.word	0x080085dd
 800848c:	080086af 	.word	0x080086af
 8008490:	080086af 	.word	0x080086af
 8008494:	080086af 	.word	0x080086af
 8008498:	080086af 	.word	0x080086af
 800849c:	080086af 	.word	0x080086af
 80084a0:	080086af 	.word	0x080086af
 80084a4:	080086af 	.word	0x080086af
 80084a8:	080084ad 	.word	0x080084ad
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80084ac:	4b89      	ldr	r3, [pc, #548]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80084b2:	4b88      	ldr	r3, [pc, #544]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 80f9 	beq.w	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	0c9b      	lsrs	r3, r3, #18
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084cc:	4413      	add	r3, r2
 80084ce:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80084d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80084d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d03e      	beq.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80084de:	4b7d      	ldr	r3, [pc, #500]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80084e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e2:	f003 030f 	and.w	r3, r3, #15
 80084e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084ea:	4413      	add	r3, r2
 80084ec:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80084f0:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80084f2:	4b78      	ldr	r3, [pc, #480]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80084f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d01c      	beq.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80084fe:	4b75      	ldr	r3, [pc, #468]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008502:	091b      	lsrs	r3, r3, #4
 8008504:	f003 030f 	and.w	r3, r3, #15
 8008508:	3301      	adds	r3, #1
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800850c:	4b71      	ldr	r3, [pc, #452]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	0a1b      	lsrs	r3, r3, #8
 8008512:	f003 030f 	and.w	r3, r3, #15
 8008516:	3302      	adds	r3, #2
 8008518:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 800851a:	4a6f      	ldr	r2, [pc, #444]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008524:	fb02 f203 	mul.w	r2, r2, r3
 8008528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852a:	fbb2 f2f3 	udiv	r2, r2, r3
 800852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008530:	fb02 f303 	mul.w	r3, r2, r3
 8008534:	647b      	str	r3, [r7, #68]	; 0x44
 8008536:	e007      	b.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008538:	4a67      	ldr	r2, [pc, #412]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800853a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	fb02 f303 	mul.w	r3, r2, r3
 8008546:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8008548:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800854c:	461a      	mov	r2, r3
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	4293      	cmp	r3, r2
 8008552:	d108      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 8008554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008556:	085b      	lsrs	r3, r3, #1
 8008558:	647b      	str	r3, [r7, #68]	; 0x44
 800855a:	e004      	b.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855e:	4a5f      	ldr	r2, [pc, #380]	; (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008560:	fb02 f303 	mul.w	r3, r2, r3
 8008564:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8008566:	4b5b      	ldr	r3, [pc, #364]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800856e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008572:	d102      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8008574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008576:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8008578:	e09b      	b.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 800857a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	4a58      	ldr	r2, [pc, #352]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008580:	fba2 2303 	umull	r2, r3, r2, r3
 8008584:	085b      	lsrs	r3, r3, #1
 8008586:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008588:	e093      	b.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 800858a:	4b52      	ldr	r3, [pc, #328]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d103      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8008596:	f7ff fcab 	bl	8007ef0 <HAL_RCC_GetSysClockFreq>
 800859a:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800859c:	e08b      	b.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 800859e:	4b4d      	ldr	r3, [pc, #308]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 8085 	beq.w	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80085ac:	4b49      	ldr	r3, [pc, #292]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	091b      	lsrs	r3, r3, #4
 80085b2:	f003 030f 	and.w	r3, r3, #15
 80085b6:	3301      	adds	r3, #1
 80085b8:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80085ba:	4b46      	ldr	r3, [pc, #280]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80085bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085be:	0b1b      	lsrs	r3, r3, #12
 80085c0:	f003 030f 	and.w	r3, r3, #15
 80085c4:	3302      	adds	r3, #2
 80085c6:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80085c8:	4a43      	ldr	r2, [pc, #268]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80085ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d2:	fb02 f303 	mul.w	r3, r2, r3
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80085da:	e06c      	b.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 80085dc:	4b3d      	ldr	r3, [pc, #244]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80085de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d103      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 80085e8:	f7ff fc82 	bl	8007ef0 <HAL_RCC_GetSysClockFreq>
 80085ec:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80085ee:	e064      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80085f0:	4b38      	ldr	r3, [pc, #224]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d05e      	beq.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80085fc:	4b35      	ldr	r3, [pc, #212]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	091b      	lsrs	r3, r3, #4
 8008602:	f003 030f 	and.w	r3, r3, #15
 8008606:	3301      	adds	r3, #1
 8008608:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 800860a:	4b32      	ldr	r3, [pc, #200]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800860c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860e:	0b1b      	lsrs	r3, r3, #12
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	3302      	adds	r3, #2
 8008616:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8008618:	4a2f      	ldr	r2, [pc, #188]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008622:	fb02 f303 	mul.w	r3, r2, r3
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800862a:	e046      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800862c:	4b29      	ldr	r3, [pc, #164]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800863c:	d108      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 800863e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 8008648:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800864c:	643b      	str	r3, [r7, #64]	; 0x40
 800864e:	e01f      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800865a:	d109      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800865c:	4b1d      	ldr	r3, [pc, #116]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 8008668:	f649 4340 	movw	r3, #40000	; 0x9c40
 800866c:	643b      	str	r3, [r7, #64]	; 0x40
 800866e:	e00f      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800867a:	d120      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800867c:	4b15      	ldr	r3, [pc, #84]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01a      	beq.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 8008688:	f24f 4324 	movw	r3, #62500	; 0xf424
 800868c:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800868e:	e016      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8008690:	e015      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008692:	f7ff fd2f 	bl	80080f4 <HAL_RCC_GetPCLK2Freq>
 8008696:	4602      	mov	r2, r0
 8008698:	4b0e      	ldr	r3, [pc, #56]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	0b9b      	lsrs	r3, r3, #14
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	3301      	adds	r3, #1
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086aa:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80086ac:	e008      	b.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 80086ae:	bf00      	nop
 80086b0:	e006      	b.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 80086b2:	bf00      	nop
 80086b4:	e004      	b.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 80086b6:	bf00      	nop
 80086b8:	e002      	b.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 80086ba:	bf00      	nop
 80086bc:	e000      	b.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 80086be:	bf00      	nop
    }
  }
  return (frequency);
 80086c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	374c      	adds	r7, #76	; 0x4c
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd90      	pop	{r4, r7, pc}
 80086ca:	bf00      	nop
 80086cc:	08011bbc 	.word	0x08011bbc
 80086d0:	08011bcc 	.word	0x08011bcc
 80086d4:	40021000 	.word	0x40021000
 80086d8:	007a1200 	.word	0x007a1200
 80086dc:	003d0900 	.word	0x003d0900
 80086e0:	aaaaaaab 	.word	0xaaaaaaab

080086e4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e084      	b.n	8008804 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7c5b      	ldrb	r3, [r3, #17]
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	d105      	bne.n	8008710 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fb faf6 	bl	8003cfc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f9c8 	bl	8008aac <HAL_RTC_WaitForSynchro>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d004      	beq.n	800872c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2204      	movs	r2, #4
 8008726:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e06b      	b.n	8008804 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fa81 	bl	8008c34 <RTC_EnterInitMode>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d004      	beq.n	8008742 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2204      	movs	r2, #4
 800873c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e060      	b.n	8008804 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f022 0207 	bic.w	r2, r2, #7
 8008750:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d005      	beq.n	8008766 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800875a:	4b2c      	ldr	r3, [pc, #176]	; (800880c <HAL_RTC_Init+0x128>)
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	4a2b      	ldr	r2, [pc, #172]	; (800880c <HAL_RTC_Init+0x128>)
 8008760:	f023 0301 	bic.w	r3, r3, #1
 8008764:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8008766:	4b29      	ldr	r3, [pc, #164]	; (800880c <HAL_RTC_Init+0x128>)
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	4926      	ldr	r1, [pc, #152]	; (800880c <HAL_RTC_Init+0x128>)
 8008774:	4313      	orrs	r3, r2
 8008776:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008780:	d003      	beq.n	800878a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	60fb      	str	r3, [r7, #12]
 8008788:	e00e      	b.n	80087a8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800878a:	2001      	movs	r0, #1
 800878c:	f7ff fe46 	bl	800841c <HAL_RCCEx_GetPeriphCLKFreq>
 8008790:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d104      	bne.n	80087a2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2204      	movs	r2, #4
 800879c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e030      	b.n	8008804 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	f023 010f 	bic.w	r1, r3, #15
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	0c1a      	lsrs	r2, r3, #16
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	0c1b      	lsrs	r3, r3, #16
 80087c6:	041b      	lsls	r3, r3, #16
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	b291      	uxth	r1, r2
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	6812      	ldr	r2, [r2, #0]
 80087d0:	430b      	orrs	r3, r1
 80087d2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fa55 	bl	8008c84 <RTC_ExitInitMode>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d004      	beq.n	80087ea <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2204      	movs	r2, #4
 80087e4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e00c      	b.n	8008804 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8008802:	2300      	movs	r3, #0
  }
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	40006c00 	.word	0x40006c00

08008810 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008810:	b590      	push	{r4, r7, lr}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	2300      	movs	r3, #0
 8008822:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <HAL_RTC_SetTime+0x20>
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e080      	b.n	8008936 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	7c1b      	ldrb	r3, [r3, #16]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_RTC_SetTime+0x30>
 800883c:	2302      	movs	r3, #2
 800883e:	e07a      	b.n	8008936 <HAL_RTC_SetTime+0x126>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2201      	movs	r2, #1
 8008844:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2202      	movs	r2, #2
 800884a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d113      	bne.n	800887a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800885c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	4619      	mov	r1, r3
 8008866:	460b      	mov	r3, r1
 8008868:	011b      	lsls	r3, r3, #4
 800886a:	1a5b      	subs	r3, r3, r1
 800886c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800886e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008874:	4413      	add	r3, r2
 8008876:	617b      	str	r3, [r7, #20]
 8008878:	e01e      	b.n	80088b8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fa28 	bl	8008cd4 <RTC_Bcd2ToByte>
 8008884:	4603      	mov	r3, r0
 8008886:	461a      	mov	r2, r3
 8008888:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800888c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	785b      	ldrb	r3, [r3, #1]
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fa1d 	bl	8008cd4 <RTC_Bcd2ToByte>
 800889a:	4603      	mov	r3, r0
 800889c:	461a      	mov	r2, r3
 800889e:	4613      	mov	r3, r2
 80088a0:	011b      	lsls	r3, r3, #4
 80088a2:	1a9b      	subs	r3, r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80088a6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	789b      	ldrb	r3, [r3, #2]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 fa11 	bl	8008cd4 <RTC_Bcd2ToByte>
 80088b2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80088b4:	4423      	add	r3, r4
 80088b6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80088b8:	6979      	ldr	r1, [r7, #20]
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 f953 	bl	8008b66 <RTC_WriteTimeCounter>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d007      	beq.n	80088d6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2204      	movs	r2, #4
 80088ca:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e02f      	b.n	8008936 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0205 	bic.w	r2, r2, #5
 80088e4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 f964 	bl	8008bb4 <RTC_ReadAlarmCounter>
 80088ec:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f4:	d018      	beq.n	8008928 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d214      	bcs.n	8008928 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008904:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008908:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800890a:	6939      	ldr	r1, [r7, #16]
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f000 f96a 	bl	8008be6 <RTC_WriteAlarmCounter>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d007      	beq.n	8008928 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2204      	movs	r2, #4
 800891c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e006      	b.n	8008936 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2201      	movs	r2, #1
 800892c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8008934:	2300      	movs	r3, #0
  }
}
 8008936:	4618      	mov	r0, r3
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	bd90      	pop	{r4, r7, pc}
	...

08008940 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800894c:	2300      	movs	r3, #0
 800894e:	61fb      	str	r3, [r7, #28]
 8008950:	2300      	movs	r3, #0
 8008952:	61bb      	str	r3, [r7, #24]
 8008954:	2300      	movs	r3, #0
 8008956:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <HAL_RTC_SetDate+0x24>
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e097      	b.n	8008a98 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	7c1b      	ldrb	r3, [r3, #16]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_RTC_SetDate+0x34>
 8008970:	2302      	movs	r3, #2
 8008972:	e091      	b.n	8008a98 <HAL_RTC_SetDate+0x158>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2202      	movs	r2, #2
 800897e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10c      	bne.n	80089a0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	78da      	ldrb	r2, [r3, #3]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	785a      	ldrb	r2, [r3, #1]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	789a      	ldrb	r2, [r3, #2]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	739a      	strb	r2, [r3, #14]
 800899e:	e01a      	b.n	80089d6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	78db      	ldrb	r3, [r3, #3]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 f995 	bl	8008cd4 <RTC_Bcd2ToByte>
 80089aa:	4603      	mov	r3, r0
 80089ac:	461a      	mov	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	785b      	ldrb	r3, [r3, #1]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f98c 	bl	8008cd4 <RTC_Bcd2ToByte>
 80089bc:	4603      	mov	r3, r0
 80089be:	461a      	mov	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	789b      	ldrb	r3, [r3, #2]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 f983 	bl	8008cd4 <RTC_Bcd2ToByte>
 80089ce:	4603      	mov	r3, r0
 80089d0:	461a      	mov	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	7bdb      	ldrb	r3, [r3, #15]
 80089da:	4618      	mov	r0, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	7b59      	ldrb	r1, [r3, #13]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	7b9b      	ldrb	r3, [r3, #14]
 80089e4:	461a      	mov	r2, r3
 80089e6:	f000 f993 	bl	8008d10 <RTC_WeekDayNum>
 80089ea:	4603      	mov	r3, r0
 80089ec:	461a      	mov	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	7b1a      	ldrb	r2, [r3, #12]
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 f883 	bl	8008b06 <RTC_ReadTimeCounter>
 8008a00:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	4a26      	ldr	r2, [pc, #152]	; (8008aa0 <HAL_RTC_SetDate+0x160>)
 8008a06:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0a:	0adb      	lsrs	r3, r3, #11
 8008a0c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b18      	cmp	r3, #24
 8008a12:	d93a      	bls.n	8008a8a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	4a23      	ldr	r2, [pc, #140]	; (8008aa4 <HAL_RTC_SetDate+0x164>)
 8008a18:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1c:	091b      	lsrs	r3, r3, #4
 8008a1e:	4a22      	ldr	r2, [pc, #136]	; (8008aa8 <HAL_RTC_SetDate+0x168>)
 8008a20:	fb02 f303 	mul.w	r3, r2, r3
 8008a24:	69fa      	ldr	r2, [r7, #28]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008a2a:	69f9      	ldr	r1, [r7, #28]
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 f89a 	bl	8008b66 <RTC_WriteTimeCounter>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d007      	beq.n	8008a48 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2204      	movs	r2, #4
 8008a3c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e027      	b.n	8008a98 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f000 f8b3 	bl	8008bb4 <RTC_ReadAlarmCounter>
 8008a4e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a56:	d018      	beq.n	8008a8a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8008a58:	69ba      	ldr	r2, [r7, #24]
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d214      	bcs.n	8008a8a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008a66:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008a6a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008a6c:	69b9      	ldr	r1, [r7, #24]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 f8b9 	bl	8008be6 <RTC_WriteAlarmCounter>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d007      	beq.n	8008a8a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2204      	movs	r2, #4
 8008a7e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e006      	b.n	8008a98 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3720      	adds	r7, #32
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	91a2b3c5 	.word	0x91a2b3c5
 8008aa4:	aaaaaaab 	.word	0xaaaaaaab
 8008aa8:	00015180 	.word	0x00015180

08008aac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e01d      	b.n	8008afe <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f022 0208 	bic.w	r2, r2, #8
 8008ad0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008ad2:	f7fb ff91 	bl	80049f8 <HAL_GetTick>
 8008ad6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008ad8:	e009      	b.n	8008aee <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008ada:	f7fb ff8d 	bl	80049f8 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ae8:	d901      	bls.n	8008aee <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e007      	b.n	8008afe <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	f003 0308 	and.w	r3, r3, #8
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d0ee      	beq.n	8008ada <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b087      	sub	sp, #28
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	827b      	strh	r3, [r7, #18]
 8008b12:	2300      	movs	r3, #0
 8008b14:	823b      	strh	r3, [r7, #16]
 8008b16:	2300      	movs	r3, #0
 8008b18:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	69db      	ldr	r3, [r3, #28]
 8008b2c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8008b36:	8a7a      	ldrh	r2, [r7, #18]
 8008b38:	8a3b      	ldrh	r3, [r7, #16]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d008      	beq.n	8008b50 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8008b3e:	8a3b      	ldrh	r3, [r7, #16]
 8008b40:	041a      	lsls	r2, r3, #16
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	617b      	str	r3, [r7, #20]
 8008b4e:	e004      	b.n	8008b5a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8008b50:	8a7b      	ldrh	r3, [r7, #18]
 8008b52:	041a      	lsls	r2, r3, #16
 8008b54:	89fb      	ldrh	r3, [r7, #14]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8008b5a:	697b      	ldr	r3, [r7, #20]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	371c      	adds	r7, #28
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bc80      	pop	{r7}
 8008b64:	4770      	bx	lr

08008b66 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f85d 	bl	8008c34 <RTC_EnterInitMode>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	73fb      	strb	r3, [r7, #15]
 8008b84:	e011      	b.n	8008baa <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	0c12      	lsrs	r2, r2, #16
 8008b8e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	b292      	uxth	r2, r2
 8008b98:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f872 	bl	8008c84 <RTC_ExitInitMode>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	81fb      	strh	r3, [r7, #14]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8008bd4:	89fb      	ldrh	r3, [r7, #14]
 8008bd6:	041a      	lsls	r2, r3, #16
 8008bd8:	89bb      	ldrh	r3, [r7, #12]
 8008bda:	4313      	orrs	r3, r2
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bc80      	pop	{r7}
 8008be4:	4770      	bx	lr

08008be6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f81d 	bl	8008c34 <RTC_EnterInitMode>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	73fb      	strb	r3, [r7, #15]
 8008c04:	e011      	b.n	8008c2a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	0c12      	lsrs	r2, r2, #16
 8008c0e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	b292      	uxth	r2, r2
 8008c18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f832 	bl	8008c84 <RTC_ExitInitMode>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8008c40:	f7fb feda 	bl	80049f8 <HAL_GetTick>
 8008c44:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008c46:	e009      	b.n	8008c5c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008c48:	f7fb fed6 	bl	80049f8 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c56:	d901      	bls.n	8008c5c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e00f      	b.n	8008c7c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f003 0320 	and.w	r3, r3, #32
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0ee      	beq.n	8008c48 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f042 0210 	orr.w	r2, r2, #16
 8008c78:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0210 	bic.w	r2, r2, #16
 8008c9e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008ca0:	f7fb feaa 	bl	80049f8 <HAL_GetTick>
 8008ca4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008ca6:	e009      	b.n	8008cbc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008ca8:	f7fb fea6 	bl	80049f8 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cb6:	d901      	bls.n	8008cbc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e007      	b.n	8008ccc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0ee      	beq.n	8008ca8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8008ce2:	79fb      	ldrb	r3, [r7, #7]
 8008ce4:	091b      	lsrs	r3, r3, #4
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	461a      	mov	r2, r3
 8008cea:	4613      	mov	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	005b      	lsls	r3, r3, #1
 8008cf2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008cf4:	79fb      	ldrb	r3, [r7, #7]
 8008cf6:	f003 030f 	and.w	r3, r3, #15
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	4413      	add	r3, r2
 8008d02:	b2db      	uxtb	r3, r3
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr
	...

08008d10 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	60bb      	str	r3, [r7, #8]
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008d2e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8008d30:	78fb      	ldrb	r3, [r7, #3]
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d82d      	bhi.n	8008d92 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8008d36:	78fa      	ldrb	r2, [r7, #3]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	4413      	add	r3, r2
 8008d3e:	00db      	lsls	r3, r3, #3
 8008d40:	1a9b      	subs	r3, r3, r2
 8008d42:	4a2c      	ldr	r2, [pc, #176]	; (8008df4 <RTC_WeekDayNum+0xe4>)
 8008d44:	fba2 2303 	umull	r2, r3, r2, r3
 8008d48:	085a      	lsrs	r2, r3, #1
 8008d4a:	78bb      	ldrb	r3, [r7, #2]
 8008d4c:	441a      	add	r2, r3
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	441a      	add	r2, r3
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	089b      	lsrs	r3, r3, #2
 8008d58:	441a      	add	r2, r3
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	4926      	ldr	r1, [pc, #152]	; (8008df8 <RTC_WeekDayNum+0xe8>)
 8008d60:	fba1 1303 	umull	r1, r3, r1, r3
 8008d64:	095b      	lsrs	r3, r3, #5
 8008d66:	1ad2      	subs	r2, r2, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	4922      	ldr	r1, [pc, #136]	; (8008df8 <RTC_WeekDayNum+0xe8>)
 8008d6e:	fba1 1303 	umull	r1, r3, r1, r3
 8008d72:	09db      	lsrs	r3, r3, #7
 8008d74:	4413      	add	r3, r2
 8008d76:	1d1a      	adds	r2, r3, #4
 8008d78:	4b20      	ldr	r3, [pc, #128]	; (8008dfc <RTC_WeekDayNum+0xec>)
 8008d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8008d7e:	1ad1      	subs	r1, r2, r3
 8008d80:	0849      	lsrs	r1, r1, #1
 8008d82:	440b      	add	r3, r1
 8008d84:	0899      	lsrs	r1, r3, #2
 8008d86:	460b      	mov	r3, r1
 8008d88:	00db      	lsls	r3, r3, #3
 8008d8a:	1a5b      	subs	r3, r3, r1
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	e029      	b.n	8008de6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8008d92:	78fa      	ldrb	r2, [r7, #3]
 8008d94:	4613      	mov	r3, r2
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	4413      	add	r3, r2
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	1a9b      	subs	r3, r3, r2
 8008d9e:	4a15      	ldr	r2, [pc, #84]	; (8008df4 <RTC_WeekDayNum+0xe4>)
 8008da0:	fba2 2303 	umull	r2, r3, r2, r3
 8008da4:	085a      	lsrs	r2, r3, #1
 8008da6:	78bb      	ldrb	r3, [r7, #2]
 8008da8:	441a      	add	r2, r3
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	441a      	add	r2, r3
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	089b      	lsrs	r3, r3, #2
 8008db2:	441a      	add	r2, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	4910      	ldr	r1, [pc, #64]	; (8008df8 <RTC_WeekDayNum+0xe8>)
 8008db8:	fba1 1303 	umull	r1, r3, r1, r3
 8008dbc:	095b      	lsrs	r3, r3, #5
 8008dbe:	1ad2      	subs	r2, r2, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	490d      	ldr	r1, [pc, #52]	; (8008df8 <RTC_WeekDayNum+0xe8>)
 8008dc4:	fba1 1303 	umull	r1, r3, r1, r3
 8008dc8:	09db      	lsrs	r3, r3, #7
 8008dca:	4413      	add	r3, r2
 8008dcc:	1c9a      	adds	r2, r3, #2
 8008dce:	4b0b      	ldr	r3, [pc, #44]	; (8008dfc <RTC_WeekDayNum+0xec>)
 8008dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8008dd4:	1ad1      	subs	r1, r2, r3
 8008dd6:	0849      	lsrs	r1, r1, #1
 8008dd8:	440b      	add	r3, r1
 8008dda:	0899      	lsrs	r1, r3, #2
 8008ddc:	460b      	mov	r3, r1
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	1a5b      	subs	r3, r3, r1
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	b2db      	uxtb	r3, r3
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bc80      	pop	{r7}
 8008df2:	4770      	bx	lr
 8008df4:	38e38e39 	.word	0x38e38e39
 8008df8:	51eb851f 	.word	0x51eb851f
 8008dfc:	24924925 	.word	0x24924925

08008e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e041      	b.n	8008e96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d106      	bne.n	8008e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f839 	bl	8008e9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f000 f9bc 	bl	80091bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b083      	sub	sp, #12
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008ea6:	bf00      	nop
 8008ea8:	370c      	adds	r7, #12
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bc80      	pop	{r7}
 8008eae:	4770      	bx	lr

08008eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d001      	beq.n	8008ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e03f      	b.n	8008f48 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f042 0201 	orr.w	r2, r2, #1
 8008ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a1b      	ldr	r2, [pc, #108]	; (8008f54 <HAL_TIM_Base_Start_IT+0xa4>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d013      	beq.n	8008f12 <HAL_TIM_Base_Start_IT+0x62>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef2:	d00e      	beq.n	8008f12 <HAL_TIM_Base_Start_IT+0x62>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a17      	ldr	r2, [pc, #92]	; (8008f58 <HAL_TIM_Base_Start_IT+0xa8>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d009      	beq.n	8008f12 <HAL_TIM_Base_Start_IT+0x62>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a16      	ldr	r2, [pc, #88]	; (8008f5c <HAL_TIM_Base_Start_IT+0xac>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d004      	beq.n	8008f12 <HAL_TIM_Base_Start_IT+0x62>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a14      	ldr	r2, [pc, #80]	; (8008f60 <HAL_TIM_Base_Start_IT+0xb0>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d111      	bne.n	8008f36 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f003 0307 	and.w	r3, r3, #7
 8008f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b06      	cmp	r3, #6
 8008f22:	d010      	beq.n	8008f46 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0201 	orr.w	r2, r2, #1
 8008f32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f34:	e007      	b.n	8008f46 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f042 0201 	orr.w	r2, r2, #1
 8008f44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bc80      	pop	{r7}
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	40012c00 	.word	0x40012c00
 8008f58:	40000400 	.word	0x40000400
 8008f5c:	40000800 	.word	0x40000800
 8008f60:	40000c00 	.word	0x40000c00

08008f64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	f003 0302 	and.w	r3, r3, #2
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d122      	bne.n	8008fc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d11b      	bne.n	8008fc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f06f 0202 	mvn.w	r2, #2
 8008f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	f003 0303 	and.w	r3, r3, #3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d003      	beq.n	8008fae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f8ed 	bl	8009186 <HAL_TIM_IC_CaptureCallback>
 8008fac:	e005      	b.n	8008fba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f8e0 	bl	8009174 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f8ef 	bl	8009198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f003 0304 	and.w	r3, r3, #4
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	d122      	bne.n	8009014 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f003 0304 	and.w	r3, r3, #4
 8008fd8:	2b04      	cmp	r3, #4
 8008fda:	d11b      	bne.n	8009014 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f06f 0204 	mvn.w	r2, #4
 8008fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2202      	movs	r2, #2
 8008fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f8c3 	bl	8009186 <HAL_TIM_IC_CaptureCallback>
 8009000:	e005      	b.n	800900e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f8b6 	bl	8009174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f8c5 	bl	8009198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	f003 0308 	and.w	r3, r3, #8
 800901e:	2b08      	cmp	r3, #8
 8009020:	d122      	bne.n	8009068 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f003 0308 	and.w	r3, r3, #8
 800902c:	2b08      	cmp	r3, #8
 800902e:	d11b      	bne.n	8009068 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f06f 0208 	mvn.w	r2, #8
 8009038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2204      	movs	r2, #4
 800903e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f899 	bl	8009186 <HAL_TIM_IC_CaptureCallback>
 8009054:	e005      	b.n	8009062 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f88c 	bl	8009174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f89b 	bl	8009198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	f003 0310 	and.w	r3, r3, #16
 8009072:	2b10      	cmp	r3, #16
 8009074:	d122      	bne.n	80090bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f003 0310 	and.w	r3, r3, #16
 8009080:	2b10      	cmp	r3, #16
 8009082:	d11b      	bne.n	80090bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f06f 0210 	mvn.w	r2, #16
 800908c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2208      	movs	r2, #8
 8009092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f86f 	bl	8009186 <HAL_TIM_IC_CaptureCallback>
 80090a8:	e005      	b.n	80090b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f862 	bl	8009174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f871 	bl	8009198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d10e      	bne.n	80090e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d107      	bne.n	80090e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f06f 0201 	mvn.w	r2, #1
 80090e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7fa fd6c 	bl	8003bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f2:	2b80      	cmp	r3, #128	; 0x80
 80090f4:	d10e      	bne.n	8009114 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009100:	2b80      	cmp	r3, #128	; 0x80
 8009102:	d107      	bne.n	8009114 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800910c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f8c9 	bl	80092a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911e:	2b40      	cmp	r3, #64	; 0x40
 8009120:	d10e      	bne.n	8009140 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912c:	2b40      	cmp	r3, #64	; 0x40
 800912e:	d107      	bne.n	8009140 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f835 	bl	80091aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f003 0320 	and.w	r3, r3, #32
 800914a:	2b20      	cmp	r3, #32
 800914c:	d10e      	bne.n	800916c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f003 0320 	and.w	r3, r3, #32
 8009158:	2b20      	cmp	r3, #32
 800915a:	d107      	bne.n	800916c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f06f 0220 	mvn.w	r2, #32
 8009164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f894 	bl	8009294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	bc80      	pop	{r7}
 8009184:	4770      	bx	lr

08009186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800918e:	bf00      	nop
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	bc80      	pop	{r7}
 8009196:	4770      	bx	lr

08009198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bc80      	pop	{r7}
 80091a8:	4770      	bx	lr

080091aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bc80      	pop	{r7}
 80091ba:	4770      	bx	lr

080091bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a2d      	ldr	r2, [pc, #180]	; (8009284 <TIM_Base_SetConfig+0xc8>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d00f      	beq.n	80091f4 <TIM_Base_SetConfig+0x38>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091da:	d00b      	beq.n	80091f4 <TIM_Base_SetConfig+0x38>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a2a      	ldr	r2, [pc, #168]	; (8009288 <TIM_Base_SetConfig+0xcc>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d007      	beq.n	80091f4 <TIM_Base_SetConfig+0x38>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a29      	ldr	r2, [pc, #164]	; (800928c <TIM_Base_SetConfig+0xd0>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d003      	beq.n	80091f4 <TIM_Base_SetConfig+0x38>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a28      	ldr	r2, [pc, #160]	; (8009290 <TIM_Base_SetConfig+0xd4>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d108      	bne.n	8009206 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	4313      	orrs	r3, r2
 8009204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a1e      	ldr	r2, [pc, #120]	; (8009284 <TIM_Base_SetConfig+0xc8>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d00f      	beq.n	800922e <TIM_Base_SetConfig+0x72>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009214:	d00b      	beq.n	800922e <TIM_Base_SetConfig+0x72>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a1b      	ldr	r2, [pc, #108]	; (8009288 <TIM_Base_SetConfig+0xcc>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d007      	beq.n	800922e <TIM_Base_SetConfig+0x72>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a1a      	ldr	r2, [pc, #104]	; (800928c <TIM_Base_SetConfig+0xd0>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d003      	beq.n	800922e <TIM_Base_SetConfig+0x72>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a19      	ldr	r2, [pc, #100]	; (8009290 <TIM_Base_SetConfig+0xd4>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d108      	bne.n	8009240 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	4313      	orrs	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	4313      	orrs	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	689a      	ldr	r2, [r3, #8]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a07      	ldr	r2, [pc, #28]	; (8009284 <TIM_Base_SetConfig+0xc8>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d103      	bne.n	8009274 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	691a      	ldr	r2, [r3, #16]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	615a      	str	r2, [r3, #20]
}
 800927a:	bf00      	nop
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	bc80      	pop	{r7}
 8009282:	4770      	bx	lr
 8009284:	40012c00 	.word	0x40012c00
 8009288:	40000400 	.word	0x40000400
 800928c:	40000800 	.word	0x40000800
 8009290:	40000c00 	.word	0x40000c00

08009294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bc80      	pop	{r7}
 80092a4:	4770      	bx	lr

080092a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b083      	sub	sp, #12
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092ae:	bf00      	nop
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bc80      	pop	{r7}
 80092b6:	4770      	bx	lr

080092b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e04a      	b.n	8009360 <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d111      	bne.n	80092fa <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fc62 	bl	8009ba8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d102      	bne.n	80092f2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a1e      	ldr	r2, [pc, #120]	; (8009368 <HAL_UART_Init+0xb0>)
 80092f0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2224      	movs	r2, #36	; 0x24
 80092fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68da      	ldr	r2, [r3, #12]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009310:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 ff84 	bl	800a220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	691a      	ldr	r2, [r3, #16]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009326:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	695a      	ldr	r2, [r3, #20]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009336:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009346:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2220      	movs	r2, #32
 8009352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2220      	movs	r2, #32
 800935a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	08003d45 	.word	0x08003d45

0800936c <HAL_UART_RegisterCallback>:
  *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID, pUART_CallbackTypeDef pCallback)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	460b      	mov	r3, r1
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d107      	bne.n	8009394 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009388:	f043 0220 	orr.w	r2, r3, #32
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e08c      	b.n	80094ae <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800939a:	2b01      	cmp	r3, #1
 800939c:	d101      	bne.n	80093a2 <HAL_UART_RegisterCallback+0x36>
 800939e:	2302      	movs	r3, #2
 80093a0:	e085      	b.n	80094ae <HAL_UART_RegisterCallback+0x142>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b20      	cmp	r3, #32
 80093b4:	d151      	bne.n	800945a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 80093b6:	7afb      	ldrb	r3, [r7, #11]
 80093b8:	2b0c      	cmp	r3, #12
 80093ba:	d845      	bhi.n	8009448 <HAL_UART_RegisterCallback+0xdc>
 80093bc:	a201      	add	r2, pc, #4	; (adr r2, 80093c4 <HAL_UART_RegisterCallback+0x58>)
 80093be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c2:	bf00      	nop
 80093c4:	080093f9 	.word	0x080093f9
 80093c8:	08009401 	.word	0x08009401
 80093cc:	08009409 	.word	0x08009409
 80093d0:	08009411 	.word	0x08009411
 80093d4:	08009419 	.word	0x08009419
 80093d8:	08009421 	.word	0x08009421
 80093dc:	08009429 	.word	0x08009429
 80093e0:	08009431 	.word	0x08009431
 80093e4:	08009449 	.word	0x08009449
 80093e8:	08009449 	.word	0x08009449
 80093ec:	08009449 	.word	0x08009449
 80093f0:	08009439 	.word	0x08009439
 80093f4:	08009441 	.word	0x08009441
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80093fe:	e051      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009406:	e04d      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800940e:	e049      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009416:	e045      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800941e:	e041      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009426:	e03d      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800942e:	e039      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009436:	e035      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800943e:	e031      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009446:	e02d      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944c:	f043 0220 	orr.w	r2, r3, #32
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	75fb      	strb	r3, [r7, #23]
        break;
 8009458:	e024      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d116      	bne.n	8009494 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8009466:	7afb      	ldrb	r3, [r7, #11]
 8009468:	2b0b      	cmp	r3, #11
 800946a:	d002      	beq.n	8009472 <HAL_UART_RegisterCallback+0x106>
 800946c:	2b0c      	cmp	r3, #12
 800946e:	d004      	beq.n	800947a <HAL_UART_RegisterCallback+0x10e>
 8009470:	e007      	b.n	8009482 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009478:	e014      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009480:	e010      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009486:	f043 0220 	orr.w	r2, r3, #32
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	75fb      	strb	r3, [r7, #23]
        break;
 8009492:	e007      	b.n	80094a4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009498:	f043 0220 	orr.w	r2, r3, #32
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bc80      	pop	{r7}
 80094b6:	4770      	bx	lr

080094b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08a      	sub	sp, #40	; 0x28
 80094bc:	af02      	add	r7, sp, #8
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	603b      	str	r3, [r7, #0]
 80094c4:	4613      	mov	r3, r2
 80094c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b20      	cmp	r3, #32
 80094d6:	d17c      	bne.n	80095d2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d002      	beq.n	80094e4 <HAL_UART_Transmit+0x2c>
 80094de:	88fb      	ldrh	r3, [r7, #6]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e075      	b.n	80095d4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d101      	bne.n	80094f6 <HAL_UART_Transmit+0x3e>
 80094f2:	2302      	movs	r3, #2
 80094f4:	e06e      	b.n	80095d4 <HAL_UART_Transmit+0x11c>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2221      	movs	r2, #33	; 0x21
 8009508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800950c:	f7fb fa74 	bl	80049f8 <HAL_GetTick>
 8009510:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	88fa      	ldrh	r2, [r7, #6]
 8009516:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	88fa      	ldrh	r2, [r7, #6]
 800951c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009526:	d108      	bne.n	800953a <HAL_UART_Transmit+0x82>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d104      	bne.n	800953a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009530:	2300      	movs	r3, #0
 8009532:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	61bb      	str	r3, [r7, #24]
 8009538:	e003      	b.n	8009542 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800953e:	2300      	movs	r3, #0
 8009540:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800954a:	e02a      	b.n	80095a2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	2200      	movs	r2, #0
 8009554:	2180      	movs	r1, #128	; 0x80
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 fc11 	bl	8009d7e <UART_WaitOnFlagUntilTimeout>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e036      	b.n	80095d4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10b      	bne.n	8009584 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800957a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	3302      	adds	r3, #2
 8009580:	61bb      	str	r3, [r7, #24]
 8009582:	e007      	b.n	8009594 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	781a      	ldrb	r2, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	3301      	adds	r3, #1
 8009592:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009598:	b29b      	uxth	r3, r3
 800959a:	3b01      	subs	r3, #1
 800959c:	b29a      	uxth	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1cf      	bne.n	800954c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2200      	movs	r2, #0
 80095b4:	2140      	movs	r1, #64	; 0x40
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 fbe1 	bl	8009d7e <UART_WaitOnFlagUntilTimeout>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e006      	b.n	80095d4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	e000      	b.n	80095d4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80095d2:	2302      	movs	r3, #2
  }
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3720      	adds	r7, #32
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	4613      	mov	r3, r2
 80095e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	2b20      	cmp	r3, #32
 80095f4:	d130      	bne.n	8009658 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <HAL_UART_Transmit_IT+0x26>
 80095fc:	88fb      	ldrh	r3, [r7, #6]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e029      	b.n	800965a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800960c:	2b01      	cmp	r3, #1
 800960e:	d101      	bne.n	8009614 <HAL_UART_Transmit_IT+0x38>
 8009610:	2302      	movs	r3, #2
 8009612:	e022      	b.n	800965a <HAL_UART_Transmit_IT+0x7e>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	88fa      	ldrh	r2, [r7, #6]
 8009626:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	88fa      	ldrh	r2, [r7, #6]
 800962c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2221      	movs	r2, #33	; 0x21
 8009638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68da      	ldr	r2, [r3, #12]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009652:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	e000      	b.n	800965a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009658:	2302      	movs	r3, #2
  }
}
 800965a:	4618      	mov	r0, r3
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	bc80      	pop	{r7}
 8009662:	4770      	bx	lr

08009664 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	4613      	mov	r3, r2
 8009670:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b20      	cmp	r3, #32
 800967c:	d13c      	bne.n	80096f8 <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8009684:	88fb      	ldrh	r3, [r7, #6]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d101      	bne.n	800968e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	e035      	b.n	80096fa <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009694:	2b01      	cmp	r3, #1
 8009696:	d101      	bne.n	800969c <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8009698:	2302      	movs	r3, #2
 800969a:	e02e      	b.n	80096fa <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2201      	movs	r2, #1
 80096a8:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80096aa:	88fb      	ldrh	r3, [r7, #6]
 80096ac:	461a      	mov	r2, r3
 80096ae:	68b9      	ldr	r1, [r7, #8]
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f000 fbae 	bl	8009e12 <UART_Start_Receive_IT>
 80096b6:	4603      	mov	r3, r0
 80096b8:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d119      	bne.n	80096f4 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d113      	bne.n	80096f0 <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096c8:	2300      	movs	r3, #0
 80096ca:	613b      	str	r3, [r7, #16]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	613b      	str	r3, [r7, #16]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	613b      	str	r3, [r7, #16]
 80096dc:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68da      	ldr	r2, [r3, #12]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f042 0210 	orr.w	r2, r2, #16
 80096ec:	60da      	str	r2, [r3, #12]
 80096ee:	e001      	b.n	80096f4 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
 80096f6:	e000      	b.n	80096fa <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 80096f8:	2302      	movs	r3, #2
  }
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3718      	adds	r7, #24
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b086      	sub	sp, #24
 8009706:	af00      	add	r7, sp, #0
 8009708:	60f8      	str	r0, [r7, #12]
 800970a:	60b9      	str	r1, [r7, #8]
 800970c:	4613      	mov	r3, r2
 800970e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b20      	cmp	r3, #32
 800971a:	d13c      	bne.n	8009796 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009722:	88fb      	ldrh	r3, [r7, #6]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e035      	b.n	8009798 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009732:	2b01      	cmp	r3, #1
 8009734:	d101      	bne.n	800973a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009736:	2302      	movs	r3, #2
 8009738:	e02e      	b.n	8009798 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2201      	movs	r2, #1
 8009746:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009748:	88fb      	ldrh	r3, [r7, #6]
 800974a:	461a      	mov	r2, r3
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 fb98 	bl	8009e84 <UART_Start_Receive_DMA>
 8009754:	4603      	mov	r3, r0
 8009756:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009758:	7dfb      	ldrb	r3, [r7, #23]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d119      	bne.n	8009792 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009762:	2b01      	cmp	r3, #1
 8009764:	d113      	bne.n	800978e <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009766:	2300      	movs	r3, #0
 8009768:	613b      	str	r3, [r7, #16]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	613b      	str	r3, [r7, #16]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	613b      	str	r3, [r7, #16]
 800977a:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68da      	ldr	r2, [r3, #12]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0210 	orr.w	r2, r2, #16
 800978a:	60da      	str	r2, [r3, #12]
 800978c:	e001      	b.n	8009792 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	e000      	b.n	8009798 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8009796:	2302      	movs	r3, #2
  }
}
 8009798:	4618      	mov	r0, r3
 800979a:	3718      	adds	r7, #24
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08a      	sub	sp, #40	; 0x28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80097c0:	2300      	movs	r3, #0
 80097c2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	f003 030f 	and.w	r3, r3, #15
 80097ce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10d      	bne.n	80097f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	f003 0320 	and.w	r3, r3, #32
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d008      	beq.n	80097f2 <HAL_UART_IRQHandler+0x52>
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	f003 0320 	and.w	r3, r3, #32
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fc6c 	bl	800a0c8 <UART_Receive_IT>
      return;
 80097f0:	e180      	b.n	8009af4 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 80b4 	beq.w	8009962 <HAL_UART_IRQHandler+0x1c2>
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b00      	cmp	r3, #0
 8009802:	d105      	bne.n	8009810 <HAL_UART_IRQHandler+0x70>
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 80a9 	beq.w	8009962 <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00a      	beq.n	8009830 <HAL_UART_IRQHandler+0x90>
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009820:	2b00      	cmp	r3, #0
 8009822:	d005      	beq.n	8009830 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009828:	f043 0201 	orr.w	r2, r3, #1
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	f003 0304 	and.w	r3, r3, #4
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00a      	beq.n	8009850 <HAL_UART_IRQHandler+0xb0>
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b00      	cmp	r3, #0
 8009842:	d005      	beq.n	8009850 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009848:	f043 0202 	orr.w	r2, r3, #2
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	f003 0302 	and.w	r3, r3, #2
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00a      	beq.n	8009870 <HAL_UART_IRQHandler+0xd0>
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	2b00      	cmp	r3, #0
 8009862:	d005      	beq.n	8009870 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009868:	f043 0204 	orr.w	r2, r3, #4
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	f003 0308 	and.w	r3, r3, #8
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00f      	beq.n	800989a <HAL_UART_IRQHandler+0xfa>
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	f003 0320 	and.w	r3, r3, #32
 8009880:	2b00      	cmp	r3, #0
 8009882:	d104      	bne.n	800988e <HAL_UART_IRQHandler+0xee>
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	f003 0301 	and.w	r3, r3, #1
 800988a:	2b00      	cmp	r3, #0
 800988c:	d005      	beq.n	800989a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009892:	f043 0208 	orr.w	r2, r3, #8
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 8123 	beq.w	8009aea <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	f003 0320 	and.w	r3, r3, #32
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d007      	beq.n	80098be <HAL_UART_IRQHandler+0x11e>
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	f003 0320 	and.w	r3, r3, #32
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fc05 	bl	800a0c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	bf14      	ite	ne
 80098cc:	2301      	movne	r3, #1
 80098ce:	2300      	moveq	r3, #0
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d8:	f003 0308 	and.w	r3, r3, #8
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d102      	bne.n	80098e6 <HAL_UART_IRQHandler+0x146>
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d033      	beq.n	800994e <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fb45 	bl	8009f76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d024      	beq.n	8009944 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	695a      	ldr	r2, [r3, #20]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009908:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990e:	2b00      	cmp	r3, #0
 8009910:	d013      	beq.n	800993a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009916:	4a79      	ldr	r2, [pc, #484]	; (8009afc <HAL_UART_IRQHandler+0x35c>)
 8009918:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991e:	4618      	mov	r0, r3
 8009920:	f7fb fa64 	bl	8004dec <HAL_DMA_Abort_IT>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d019      	beq.n	800995e <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009934:	4610      	mov	r0, r2
 8009936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009938:	e011      	b.n	800995e <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009942:	e00c      	b.n	800995e <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800994c:	e007      	b.n	800995e <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800995c:	e0c5      	b.n	8009aea <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800995e:	bf00      	nop
    return;
 8009960:	e0c3      	b.n	8009aea <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009966:	2b01      	cmp	r3, #1
 8009968:	f040 80a3 	bne.w	8009ab2 <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	f003 0310 	and.w	r3, r3, #16
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 809d 	beq.w	8009ab2 <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	f003 0310 	and.w	r3, r3, #16
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 8097 	beq.w	8009ab2 <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009984:	2300      	movs	r3, #0
 8009986:	60fb      	str	r3, [r7, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d04f      	beq.n	8009a48 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80099b2:	8a3b      	ldrh	r3, [r7, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 809a 	beq.w	8009aee <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80099be:	8a3a      	ldrh	r2, [r7, #16]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	f080 8094 	bcs.w	8009aee <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	8a3a      	ldrh	r2, [r7, #16]
 80099ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	2b20      	cmp	r3, #32
 80099d4:	d02b      	beq.n	8009a2e <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68da      	ldr	r2, [r3, #12]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099e4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	695a      	ldr	r2, [r3, #20]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f022 0201 	bic.w	r2, r2, #1
 80099f4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	695a      	ldr	r2, [r3, #20]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a04:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68da      	ldr	r2, [r3, #12]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f022 0210 	bic.w	r2, r2, #16
 8009a22:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fb f9a4 	bl	8004d76 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8009a3a:	b292      	uxth	r2, r2
 8009a3c:	1a8a      	subs	r2, r1, r2
 8009a3e:	b292      	uxth	r2, r2
 8009a40:	4611      	mov	r1, r2
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8009a46:	e052      	b.n	8009aee <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d048      	beq.n	8009af2 <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8009a60:	8a7b      	ldrh	r3, [r7, #18]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d045      	beq.n	8009af2 <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68da      	ldr	r2, [r3, #12]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a74:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	695a      	ldr	r2, [r3, #20]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0201 	bic.w	r2, r2, #1
 8009a84:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2220      	movs	r2, #32
 8009a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68da      	ldr	r2, [r3, #12]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f022 0210 	bic.w	r2, r2, #16
 8009aa2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aa8:	8a7a      	ldrh	r2, [r7, #18]
 8009aaa:	4611      	mov	r1, r2
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8009ab0:	e01f      	b.n	8009af2 <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d008      	beq.n	8009ace <HAL_UART_IRQHandler+0x32e>
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d003      	beq.n	8009ace <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa96 	bl	8009ff8 <UART_Transmit_IT>
    return;
 8009acc:	e012      	b.n	8009af4 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00d      	beq.n	8009af4 <HAL_UART_IRQHandler+0x354>
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d008      	beq.n	8009af4 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fad7 	bl	800a096 <UART_EndTransmit_IT>
    return;
 8009ae8:	e004      	b.n	8009af4 <HAL_UART_IRQHandler+0x354>
    return;
 8009aea:	bf00      	nop
 8009aec:	e002      	b.n	8009af4 <HAL_UART_IRQHandler+0x354>
      return;
 8009aee:	bf00      	nop
 8009af0:	e000      	b.n	8009af4 <HAL_UART_IRQHandler+0x354>
      return;
 8009af2:	bf00      	nop
  }
}
 8009af4:	3728      	adds	r7, #40	; 0x28
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	08009fcf 	.word	0x08009fcf

08009b00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bc80      	pop	{r7}
 8009b10:	4770      	bx	lr

08009b12 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b083      	sub	sp, #12
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009b1a:	bf00      	nop
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bc80      	pop	{r7}
 8009b22:	4770      	bx	lr

08009b24 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bc80      	pop	{r7}
 8009b34:	4770      	bx	lr

08009b36 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b083      	sub	sp, #12
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009b3e:	bf00      	nop
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bc80      	pop	{r7}
 8009b46:	4770      	bx	lr

08009b48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bc80      	pop	{r7}
 8009b58:	4770      	bx	lr

08009b5a <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b083      	sub	sp, #12
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009b62:	bf00      	nop
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bc80      	pop	{r7}
 8009b6a:	4770      	bx	lr

08009b6c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bc80      	pop	{r7}
 8009b7c:	4770      	bx	lr

08009b7e <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b083      	sub	sp, #12
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bc80      	pop	{r7}
 8009b8e:	4770      	bx	lr

08009b90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bc80      	pop	{r7}
 8009ba4:	4770      	bx	lr
	...

08009ba8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a0f      	ldr	r2, [pc, #60]	; (8009bf0 <UART_InitCallbacksToDefault+0x48>)
 8009bb4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a0e      	ldr	r2, [pc, #56]	; (8009bf4 <UART_InitCallbacksToDefault+0x4c>)
 8009bba:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a0e      	ldr	r2, [pc, #56]	; (8009bf8 <UART_InitCallbacksToDefault+0x50>)
 8009bc0:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a0d      	ldr	r2, [pc, #52]	; (8009bfc <UART_InitCallbacksToDefault+0x54>)
 8009bc6:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a0d      	ldr	r2, [pc, #52]	; (8009c00 <UART_InitCallbacksToDefault+0x58>)
 8009bcc:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a0c      	ldr	r2, [pc, #48]	; (8009c04 <UART_InitCallbacksToDefault+0x5c>)
 8009bd2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a0c      	ldr	r2, [pc, #48]	; (8009c08 <UART_InitCallbacksToDefault+0x60>)
 8009bd8:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a0b      	ldr	r2, [pc, #44]	; (8009c0c <UART_InitCallbacksToDefault+0x64>)
 8009bde:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a0b      	ldr	r2, [pc, #44]	; (8009c10 <UART_InitCallbacksToDefault+0x68>)
 8009be4:	669a      	str	r2, [r3, #104]	; 0x68

}
 8009be6:	bf00      	nop
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bc80      	pop	{r7}
 8009bee:	4770      	bx	lr
 8009bf0:	08009b13 	.word	0x08009b13
 8009bf4:	08009b01 	.word	0x08009b01
 8009bf8:	08009b37 	.word	0x08009b37
 8009bfc:	08009b25 	.word	0x08009b25
 8009c00:	08009b49 	.word	0x08009b49
 8009c04:	08009b5b 	.word	0x08009b5b
 8009c08:	08009b6d 	.word	0x08009b6d
 8009c0c:	08009b7f 	.word	0x08009b7f
 8009c10:	08009b91 	.word	0x08009b91

08009c14 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0320 	and.w	r3, r3, #32
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d12a      	bne.n	8009c86 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68da      	ldr	r2, [r3, #12]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c44:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	695a      	ldr	r2, [r3, #20]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f022 0201 	bic.w	r2, r2, #1
 8009c54:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	695a      	ldr	r2, [r3, #20]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c64:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d107      	bne.n	8009c86 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68da      	ldr	r2, [r3, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f022 0210 	bic.w	r2, r2, #16
 8009c84:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d107      	bne.n	8009c9e <UART_DMAReceiveCplt+0x8a>
  {  
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009c96:	4611      	mov	r1, r2
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c9c:	e003      	b.n	8009ca6 <UART_DMAReceiveCplt+0x92>
    huart->RxCpltCallback(huart);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	4798      	blx	r3
}
 8009ca6:	bf00      	nop
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d109      	bne.n	8009cd8 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009ccc:	0852      	lsrs	r2, r2, #1
 8009cce:	b292      	uxth	r2, r2
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009cd6:	e003      	b.n	8009ce0 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	4798      	blx	r3
}
 8009ce0:	bf00      	nop
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	695b      	ldr	r3, [r3, #20]
 8009d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	bf14      	ite	ne
 8009d08:	2301      	movne	r3, #1
 8009d0a:	2300      	moveq	r3, #0
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	2b21      	cmp	r3, #33	; 0x21
 8009d1a:	d108      	bne.n	8009d2e <UART_DMAError+0x46>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d005      	beq.n	8009d2e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2200      	movs	r2, #0
 8009d26:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009d28:	68b8      	ldr	r0, [r7, #8]
 8009d2a:	f000 f90f 	bl	8009f4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bf14      	ite	ne
 8009d3c:	2301      	movne	r3, #1
 8009d3e:	2300      	moveq	r3, #0
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b22      	cmp	r3, #34	; 0x22
 8009d4e:	d108      	bne.n	8009d62 <UART_DMAError+0x7a>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d005      	beq.n	8009d62 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009d5c:	68b8      	ldr	r0, [r7, #8]
 8009d5e:	f000 f90a 	bl	8009f76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d66:	f043 0210 	orr.w	r2, r3, #16
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d72:	68b8      	ldr	r0, [r7, #8]
 8009d74:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d76:	bf00      	nop
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	60f8      	str	r0, [r7, #12]
 8009d86:	60b9      	str	r1, [r7, #8]
 8009d88:	603b      	str	r3, [r7, #0]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d8e:	e02c      	b.n	8009dea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d96:	d028      	beq.n	8009dea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d007      	beq.n	8009dae <UART_WaitOnFlagUntilTimeout+0x30>
 8009d9e:	f7fa fe2b 	bl	80049f8 <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d21d      	bcs.n	8009dea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68da      	ldr	r2, [r3, #12]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009dbc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	695a      	ldr	r2, [r3, #20]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f022 0201 	bic.w	r2, r2, #1
 8009dcc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2220      	movs	r2, #32
 8009dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2220      	movs	r2, #32
 8009dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e00f      	b.n	8009e0a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	4013      	ands	r3, r2
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	bf0c      	ite	eq
 8009dfa:	2301      	moveq	r3, #1
 8009dfc:	2300      	movne	r3, #0
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	461a      	mov	r2, r3
 8009e02:	79fb      	ldrb	r3, [r7, #7]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d0c3      	beq.n	8009d90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b085      	sub	sp, #20
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	60f8      	str	r0, [r7, #12]
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	88fa      	ldrh	r2, [r7, #6]
 8009e2a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	88fa      	ldrh	r2, [r7, #6]
 8009e30:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2222      	movs	r2, #34	; 0x22
 8009e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68da      	ldr	r2, [r3, #12]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e56:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	695a      	ldr	r2, [r3, #20]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f042 0201 	orr.w	r2, r2, #1
 8009e66:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68da      	ldr	r2, [r3, #12]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f042 0220 	orr.w	r2, r2, #32
 8009e76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bc80      	pop	{r7}
 8009e82:	4770      	bx	lr

08009e84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	88fa      	ldrh	r2, [r7, #6]
 8009e9c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2222      	movs	r2, #34	; 0x22
 8009ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb0:	4a23      	ldr	r2, [pc, #140]	; (8009f40 <UART_Start_Receive_DMA+0xbc>)
 8009eb2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb8:	4a22      	ldr	r2, [pc, #136]	; (8009f44 <UART_Start_Receive_DMA+0xc0>)
 8009eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec0:	4a21      	ldr	r2, [pc, #132]	; (8009f48 <UART_Start_Receive_DMA+0xc4>)
 8009ec2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec8:	2200      	movs	r2, #0
 8009eca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009ecc:	f107 0308 	add.w	r3, r7, #8
 8009ed0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3304      	adds	r3, #4
 8009edc:	4619      	mov	r1, r3
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	88fb      	ldrh	r3, [r7, #6]
 8009ee4:	f7fa fee8 	bl	8004cb8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009ee8:	2300      	movs	r3, #0
 8009eea:	613b      	str	r3, [r7, #16]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	613b      	str	r3, [r7, #16]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	613b      	str	r3, [r7, #16]
 8009efc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68da      	ldr	r2, [r3, #12]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f14:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	695a      	ldr	r2, [r3, #20]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f042 0201 	orr.w	r2, r2, #1
 8009f24:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	695a      	ldr	r2, [r3, #20]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f34:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3718      	adds	r7, #24
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	08009c15 	.word	0x08009c15
 8009f44:	08009caf 	.word	0x08009caf
 8009f48:	08009ce9 	.word	0x08009ce9

08009f4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68da      	ldr	r2, [r3, #12]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009f62:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2220      	movs	r2, #32
 8009f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bc80      	pop	{r7}
 8009f74:	4770      	bx	lr

08009f76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b083      	sub	sp, #12
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68da      	ldr	r2, [r3, #12]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009f8c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	695a      	ldr	r2, [r3, #20]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f022 0201 	bic.w	r2, r2, #1
 8009f9c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d107      	bne.n	8009fb6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68da      	ldr	r2, [r3, #12]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f022 0210 	bic.w	r2, r2, #16
 8009fb4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bc80      	pop	{r7}
 8009fcc:	4770      	bx	lr

08009fce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ff0:	bf00      	nop
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b21      	cmp	r3, #33	; 0x21
 800a00a:	d13e      	bne.n	800a08a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a014:	d114      	bne.n	800a040 <UART_Transmit_IT+0x48>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d110      	bne.n	800a040 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a1b      	ldr	r3, [r3, #32]
 800a022:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	461a      	mov	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a032:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a1b      	ldr	r3, [r3, #32]
 800a038:	1c9a      	adds	r2, r3, #2
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	621a      	str	r2, [r3, #32]
 800a03e:	e008      	b.n	800a052 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a1b      	ldr	r3, [r3, #32]
 800a044:	1c59      	adds	r1, r3, #1
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	6211      	str	r1, [r2, #32]
 800a04a:	781a      	ldrb	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a056:	b29b      	uxth	r3, r3
 800a058:	3b01      	subs	r3, #1
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	4619      	mov	r1, r3
 800a060:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10f      	bne.n	800a086 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68da      	ldr	r2, [r3, #12]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a074:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68da      	ldr	r2, [r3, #12]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a084:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	e000      	b.n	800a08c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a08a:	2302      	movs	r3, #2
  }
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	bc80      	pop	{r7}
 800a094:	4770      	bx	lr

0800a096 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68da      	ldr	r2, [r3, #12]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	2b22      	cmp	r3, #34	; 0x22
 800a0da:	f040 809b 	bne.w	800a214 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e6:	d117      	bne.n	800a118 <UART_Receive_IT+0x50>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d113      	bne.n	800a118 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	b29b      	uxth	r3, r3
 800a102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a106:	b29a      	uxth	r2, r3
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a110:	1c9a      	adds	r2, r3, #2
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	629a      	str	r2, [r3, #40]	; 0x28
 800a116:	e026      	b.n	800a166 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a12a:	d007      	beq.n	800a13c <UART_Receive_IT+0x74>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10a      	bne.n	800a14a <UART_Receive_IT+0x82>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d106      	bne.n	800a14a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	b2da      	uxtb	r2, r3
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	701a      	strb	r2, [r3, #0]
 800a148:	e008      	b.n	800a15c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a156:	b2da      	uxtb	r2, r3
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	3b01      	subs	r3, #1
 800a16e:	b29b      	uxth	r3, r3
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	4619      	mov	r1, r3
 800a174:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a176:	2b00      	cmp	r3, #0
 800a178:	d14a      	bne.n	800a210 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68da      	ldr	r2, [r3, #12]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 0220 	bic.w	r2, r2, #32
 800a188:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68da      	ldr	r2, [r3, #12]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a198:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	695a      	ldr	r2, [r3, #20]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f022 0201 	bic.w	r2, r2, #1
 800a1a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2220      	movs	r2, #32
 800a1ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d124      	bne.n	800a204 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68da      	ldr	r2, [r3, #12]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f022 0210 	bic.w	r2, r2, #16
 800a1ce:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0310 	and.w	r3, r3, #16
 800a1da:	2b10      	cmp	r3, #16
 800a1dc:	d10a      	bne.n	800a1f4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1de:	2300      	movs	r3, #0
 800a1e0:	60fb      	str	r3, [r7, #12]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	60fb      	str	r3, [r7, #12]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	4798      	blx	r3
 800a202:	e003      	b.n	800a20c <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	e002      	b.n	800a216 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	e000      	b.n	800a216 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800a214:	2302      	movs	r3, #2
  }
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
	...

0800a220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	430a      	orrs	r2, r1
 800a23c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	689a      	ldr	r2, [r3, #8]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	431a      	orrs	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	695b      	ldr	r3, [r3, #20]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a25a:	f023 030c 	bic.w	r3, r3, #12
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	6812      	ldr	r2, [r2, #0]
 800a262:	68b9      	ldr	r1, [r7, #8]
 800a264:	430b      	orrs	r3, r1
 800a266:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	695b      	ldr	r3, [r3, #20]
 800a26e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	699a      	ldr	r2, [r3, #24]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a2c      	ldr	r2, [pc, #176]	; (800a334 <UART_SetConfig+0x114>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d103      	bne.n	800a290 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a288:	f7fd ff34 	bl	80080f4 <HAL_RCC_GetPCLK2Freq>
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	e002      	b.n	800a296 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a290:	f7fd ff1c 	bl	80080cc <HAL_RCC_GetPCLK1Freq>
 800a294:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	4613      	mov	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	009a      	lsls	r2, r3, #2
 800a2a0:	441a      	add	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ac:	4a22      	ldr	r2, [pc, #136]	; (800a338 <UART_SetConfig+0x118>)
 800a2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b2:	095b      	lsrs	r3, r3, #5
 800a2b4:	0119      	lsls	r1, r3, #4
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	009a      	lsls	r2, r3, #2
 800a2c0:	441a      	add	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2cc:	4b1a      	ldr	r3, [pc, #104]	; (800a338 <UART_SetConfig+0x118>)
 800a2ce:	fba3 0302 	umull	r0, r3, r3, r2
 800a2d2:	095b      	lsrs	r3, r3, #5
 800a2d4:	2064      	movs	r0, #100	; 0x64
 800a2d6:	fb00 f303 	mul.w	r3, r0, r3
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	011b      	lsls	r3, r3, #4
 800a2de:	3332      	adds	r3, #50	; 0x32
 800a2e0:	4a15      	ldr	r2, [pc, #84]	; (800a338 <UART_SetConfig+0x118>)
 800a2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e6:	095b      	lsrs	r3, r3, #5
 800a2e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2ec:	4419      	add	r1, r3
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	009a      	lsls	r2, r3, #2
 800a2f8:	441a      	add	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	fbb2 f2f3 	udiv	r2, r2, r3
 800a304:	4b0c      	ldr	r3, [pc, #48]	; (800a338 <UART_SetConfig+0x118>)
 800a306:	fba3 0302 	umull	r0, r3, r3, r2
 800a30a:	095b      	lsrs	r3, r3, #5
 800a30c:	2064      	movs	r0, #100	; 0x64
 800a30e:	fb00 f303 	mul.w	r3, r0, r3
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	011b      	lsls	r3, r3, #4
 800a316:	3332      	adds	r3, #50	; 0x32
 800a318:	4a07      	ldr	r2, [pc, #28]	; (800a338 <UART_SetConfig+0x118>)
 800a31a:	fba2 2303 	umull	r2, r3, r2, r3
 800a31e:	095b      	lsrs	r3, r3, #5
 800a320:	f003 020f 	and.w	r2, r3, #15
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	440a      	add	r2, r1
 800a32a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a32c:	bf00      	nop
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	40013800 	.word	0x40013800
 800a338:	51eb851f 	.word	0x51eb851f

0800a33c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	4603      	mov	r3, r0
 800a344:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a346:	2300      	movs	r3, #0
 800a348:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a34a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a34e:	2b84      	cmp	r3, #132	; 0x84
 800a350:	d005      	beq.n	800a35e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a352:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	4413      	add	r3, r2
 800a35a:	3303      	adds	r3, #3
 800a35c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a35e:	68fb      	ldr	r3, [r7, #12]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3714      	adds	r7, #20
 800a364:	46bd      	mov	sp, r7
 800a366:	bc80      	pop	{r7}
 800a368:	4770      	bx	lr

0800a36a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a370:	f3ef 8305 	mrs	r3, IPSR
 800a374:	607b      	str	r3, [r7, #4]
  return(result);
 800a376:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a378:	2b00      	cmp	r3, #0
 800a37a:	bf14      	ite	ne
 800a37c:	2301      	movne	r3, #1
 800a37e:	2300      	moveq	r3, #0
 800a380:	b2db      	uxtb	r3, r3
}
 800a382:	4618      	mov	r0, r3
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	bc80      	pop	{r7}
 800a38a:	4770      	bx	lr

0800a38c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a390:	f001 fba0 	bl	800bad4 <vTaskStartScheduler>
  
  return osOK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	bd80      	pop	{r7, pc}

0800a39a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a39e:	f7ff ffe4 	bl	800a36a <inHandlerMode>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d003      	beq.n	800a3b0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a3a8:	f001 fcb2 	bl	800bd10 <xTaskGetTickCountFromISR>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	e002      	b.n	800a3b6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a3b0:	f001 fca0 	bl	800bcf4 <xTaskGetTickCount>
 800a3b4:	4603      	mov	r3, r0
  }
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a3ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3bc:	b089      	sub	sp, #36	; 0x24
 800a3be:	af04      	add	r7, sp, #16
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d020      	beq.n	800a40e <osThreadCreate+0x54>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d01c      	beq.n	800a40e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685c      	ldr	r4, [r3, #4]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681d      	ldr	r5, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	691e      	ldr	r6, [r3, #16]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7ff ffa8 	bl	800a33c <makeFreeRtosPriority>
 800a3ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3f6:	9202      	str	r2, [sp, #8]
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	9100      	str	r1, [sp, #0]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	4632      	mov	r2, r6
 800a400:	4629      	mov	r1, r5
 800a402:	4620      	mov	r0, r4
 800a404:	f001 f99f 	bl	800b746 <xTaskCreateStatic>
 800a408:	4603      	mov	r3, r0
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	e01c      	b.n	800a448 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	685c      	ldr	r4, [r3, #4]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a41a:	b29e      	uxth	r6, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a422:	4618      	mov	r0, r3
 800a424:	f7ff ff8a 	bl	800a33c <makeFreeRtosPriority>
 800a428:	4602      	mov	r2, r0
 800a42a:	f107 030c 	add.w	r3, r7, #12
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	9200      	str	r2, [sp, #0]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	4632      	mov	r2, r6
 800a436:	4629      	mov	r1, r5
 800a438:	4620      	mov	r0, r4
 800a43a:	f001 f9e0 	bl	800b7fe <xTaskCreate>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b01      	cmp	r3, #1
 800a442:	d001      	beq.n	800a448 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a444:	2300      	movs	r3, #0
 800a446:	e000      	b.n	800a44a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a448:	68fb      	ldr	r3, [r7, #12]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a452 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b084      	sub	sp, #16
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <osDelay+0x16>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	e000      	b.n	800a46a <osDelay+0x18>
 800a468:	2301      	movs	r3, #1
 800a46a:	4618      	mov	r0, r3
 800a46c:	f001 fafe 	bl	800ba6c <vTaskDelay>
  
  return osOK;
 800a470:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
	...

0800a47c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af02      	add	r7, sp, #8
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	460b      	mov	r3, r1
 800a486:	607a      	str	r2, [r7, #4]
 800a488:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d013      	beq.n	800a4ba <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800a492:	7afb      	ldrb	r3, [r7, #11]
 800a494:	2b01      	cmp	r3, #1
 800a496:	d101      	bne.n	800a49c <osTimerCreate+0x20>
 800a498:	2101      	movs	r1, #1
 800a49a:	e000      	b.n	800a49e <osTimerCreate+0x22>
 800a49c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800a4a6:	9201      	str	r2, [sp, #4]
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	460a      	mov	r2, r1
 800a4ae:	2101      	movs	r1, #1
 800a4b0:	480b      	ldr	r0, [pc, #44]	; (800a4e0 <osTimerCreate+0x64>)
 800a4b2:	f002 fa32 	bl	800c91a <xTimerCreateStatic>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	e00e      	b.n	800a4d8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800a4ba:	7afb      	ldrb	r3, [r7, #11]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d101      	bne.n	800a4c4 <osTimerCreate+0x48>
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	e000      	b.n	800a4c6 <osTimerCreate+0x4a>
 800a4c4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	4803      	ldr	r0, [pc, #12]	; (800a4e0 <osTimerCreate+0x64>)
 800a4d2:	f002 fa01 	bl	800c8d8 <xTimerCreate>
 800a4d6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	08011bdc 	.word	0x08011bdc

0800a4e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f103 0208 	add.w	r2, r3, #8
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f103 0208 	add.w	r2, r3, #8
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f103 0208 	add.w	r2, r3, #8
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bc80      	pop	{r7}
 800a520:	4770      	bx	lr

0800a522 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	bc80      	pop	{r7}
 800a538:	4770      	bx	lr

0800a53a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a53a:	b480      	push	{r7}
 800a53c:	b085      	sub	sp, #20
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	1c5a      	adds	r2, r3, #1
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	601a      	str	r2, [r3, #0]
}
 800a576:	bf00      	nop
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bc80      	pop	{r7}
 800a57e:	4770      	bx	lr

0800a580 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a596:	d103      	bne.n	800a5a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	60fb      	str	r3, [r7, #12]
 800a59e:	e00c      	b.n	800a5ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	60fb      	str	r3, [r7, #12]
 800a5a6:	e002      	b.n	800a5ae <vListInsert+0x2e>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	60fb      	str	r3, [r7, #12]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d2f6      	bcs.n	800a5a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	601a      	str	r2, [r3, #0]
}
 800a5e6:	bf00      	nop
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bc80      	pop	{r7}
 800a5ee:	4770      	bx	lr

0800a5f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	6892      	ldr	r2, [r2, #8]
 800a606:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	6852      	ldr	r2, [r2, #4]
 800a610:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d103      	bne.n	800a624 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	689a      	ldr	r2, [r3, #8]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	1e5a      	subs	r2, r3, #1
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bc80      	pop	{r7}
 800a640:	4770      	bx	lr
	...

0800a644 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10a      	bne.n	800a66e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a66a:	bf00      	nop
 800a66c:	e7fe      	b.n	800a66c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a66e:	f002 fd65 	bl	800d13c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a67a:	68f9      	ldr	r1, [r7, #12]
 800a67c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a67e:	fb01 f303 	mul.w	r3, r1, r3
 800a682:	441a      	add	r2, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	68f9      	ldr	r1, [r7, #12]
 800a6a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a6a4:	fb01 f303 	mul.w	r3, r1, r3
 800a6a8:	441a      	add	r2, r3
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	22ff      	movs	r2, #255	; 0xff
 800a6b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	22ff      	movs	r2, #255	; 0xff
 800a6ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d114      	bne.n	800a6ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d01a      	beq.n	800a702 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	3310      	adds	r3, #16
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f001 fc97 	bl	800c004 <xTaskRemoveFromEventList>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d012      	beq.n	800a702 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a6dc:	4b0c      	ldr	r3, [pc, #48]	; (800a710 <xQueueGenericReset+0xcc>)
 800a6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	e009      	b.n	800a702 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3310      	adds	r3, #16
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7ff fef6 	bl	800a4e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3324      	adds	r3, #36	; 0x24
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff fef1 	bl	800a4e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a702:	f002 fd4b 	bl	800d19c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a706:	2301      	movs	r3, #1
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	e000ed04 	.word	0xe000ed04

0800a714 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08e      	sub	sp, #56	; 0x38
 800a718:	af02      	add	r7, sp, #8
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10a      	bne.n	800a73e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a73a:	bf00      	nop
 800a73c:	e7fe      	b.n	800a73c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10a      	bne.n	800a75a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a756:	bf00      	nop
 800a758:	e7fe      	b.n	800a758 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <xQueueGenericCreateStatic+0x52>
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <xQueueGenericCreateStatic+0x56>
 800a766:	2301      	movs	r3, #1
 800a768:	e000      	b.n	800a76c <xQueueGenericCreateStatic+0x58>
 800a76a:	2300      	movs	r3, #0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10a      	bne.n	800a786 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	623b      	str	r3, [r7, #32]
}
 800a782:	bf00      	nop
 800a784:	e7fe      	b.n	800a784 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d102      	bne.n	800a792 <xQueueGenericCreateStatic+0x7e>
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <xQueueGenericCreateStatic+0x82>
 800a792:	2301      	movs	r3, #1
 800a794:	e000      	b.n	800a798 <xQueueGenericCreateStatic+0x84>
 800a796:	2300      	movs	r3, #0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10a      	bne.n	800a7b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	61fb      	str	r3, [r7, #28]
}
 800a7ae:	bf00      	nop
 800a7b0:	e7fe      	b.n	800a7b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a7b2:	2348      	movs	r3, #72	; 0x48
 800a7b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	2b48      	cmp	r3, #72	; 0x48
 800a7ba:	d00a      	beq.n	800a7d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c0:	f383 8811 	msr	BASEPRI, r3
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	61bb      	str	r3, [r7, #24]
}
 800a7ce:	bf00      	nop
 800a7d0:	e7fe      	b.n	800a7d0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00d      	beq.n	800a7f8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7e4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	68b9      	ldr	r1, [r7, #8]
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 f843 	bl	800a87e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3730      	adds	r7, #48	; 0x30
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a802:	b580      	push	{r7, lr}
 800a804:	b08a      	sub	sp, #40	; 0x28
 800a806:	af02      	add	r7, sp, #8
 800a808:	60f8      	str	r0, [r7, #12]
 800a80a:	60b9      	str	r1, [r7, #8]
 800a80c:	4613      	mov	r3, r2
 800a80e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10a      	bne.n	800a82c <xQueueGenericCreate+0x2a>
	__asm volatile
 800a816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	613b      	str	r3, [r7, #16]
}
 800a828:	bf00      	nop
 800a82a:	e7fe      	b.n	800a82a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d102      	bne.n	800a838 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a832:	2300      	movs	r3, #0
 800a834:	61fb      	str	r3, [r7, #28]
 800a836:	e004      	b.n	800a842 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	fb02 f303 	mul.w	r3, r2, r3
 800a840:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	3348      	adds	r3, #72	; 0x48
 800a846:	4618      	mov	r0, r3
 800a848:	f002 fd78 	bl	800d33c <pvPortMalloc>
 800a84c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00f      	beq.n	800a874 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	3348      	adds	r3, #72	; 0x48
 800a858:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a862:	79fa      	ldrb	r2, [r7, #7]
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	4613      	mov	r3, r2
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	68b9      	ldr	r1, [r7, #8]
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 f805 	bl	800a87e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a874:	69bb      	ldr	r3, [r7, #24]
	}
 800a876:	4618      	mov	r0, r3
 800a878:	3720      	adds	r7, #32
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	60f8      	str	r0, [r7, #12]
 800a886:	60b9      	str	r1, [r7, #8]
 800a888:	607a      	str	r2, [r7, #4]
 800a88a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d103      	bne.n	800a89a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	69ba      	ldr	r2, [r7, #24]
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	e002      	b.n	800a8a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	69b8      	ldr	r0, [r7, #24]
 800a8b0:	f7ff fec8 	bl	800a644 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a8b4:	bf00      	nop
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b08e      	sub	sp, #56	; 0x38
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10a      	bne.n	800a8ee <xQueueGenericSend+0x32>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8ea:	bf00      	nop
 800a8ec:	e7fe      	b.n	800a8ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d103      	bne.n	800a8fc <xQueueGenericSend+0x40>
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d101      	bne.n	800a900 <xQueueGenericSend+0x44>
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e000      	b.n	800a902 <xQueueGenericSend+0x46>
 800a900:	2300      	movs	r3, #0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10a      	bne.n	800a91c <xQueueGenericSend+0x60>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a918:	bf00      	nop
 800a91a:	e7fe      	b.n	800a91a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d103      	bne.n	800a92a <xQueueGenericSend+0x6e>
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a926:	2b01      	cmp	r3, #1
 800a928:	d101      	bne.n	800a92e <xQueueGenericSend+0x72>
 800a92a:	2301      	movs	r3, #1
 800a92c:	e000      	b.n	800a930 <xQueueGenericSend+0x74>
 800a92e:	2300      	movs	r3, #0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10a      	bne.n	800a94a <xQueueGenericSend+0x8e>
	__asm volatile
 800a934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	623b      	str	r3, [r7, #32]
}
 800a946:	bf00      	nop
 800a948:	e7fe      	b.n	800a948 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a94a:	f001 fd4f 	bl	800c3ec <xTaskGetSchedulerState>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d102      	bne.n	800a95a <xQueueGenericSend+0x9e>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <xQueueGenericSend+0xa2>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e000      	b.n	800a960 <xQueueGenericSend+0xa4>
 800a95e:	2300      	movs	r3, #0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10a      	bne.n	800a97a <xQueueGenericSend+0xbe>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	61fb      	str	r3, [r7, #28]
}
 800a976:	bf00      	nop
 800a978:	e7fe      	b.n	800a978 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a97a:	f002 fbdf 	bl	800d13c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a986:	429a      	cmp	r2, r3
 800a988:	d302      	bcc.n	800a990 <xQueueGenericSend+0xd4>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d129      	bne.n	800a9e4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	68b9      	ldr	r1, [r7, #8]
 800a994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a996:	f000 fa07 	bl	800ada8 <prvCopyDataToQueue>
 800a99a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d010      	beq.n	800a9c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a6:	3324      	adds	r3, #36	; 0x24
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f001 fb2b 	bl	800c004 <xTaskRemoveFromEventList>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d013      	beq.n	800a9dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a9b4:	4b3f      	ldr	r3, [pc, #252]	; (800aab4 <xQueueGenericSend+0x1f8>)
 800a9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ba:	601a      	str	r2, [r3, #0]
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	e00a      	b.n	800a9dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d007      	beq.n	800a9dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a9cc:	4b39      	ldr	r3, [pc, #228]	; (800aab4 <xQueueGenericSend+0x1f8>)
 800a9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a9dc:	f002 fbde 	bl	800d19c <vPortExitCritical>
				return pdPASS;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e063      	b.n	800aaac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d103      	bne.n	800a9f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9ea:	f002 fbd7 	bl	800d19c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	e05c      	b.n	800aaac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d106      	bne.n	800aa06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9f8:	f107 0314 	add.w	r3, r7, #20
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f001 fb89 	bl	800c114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa02:	2301      	movs	r3, #1
 800aa04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa06:	f002 fbc9 	bl	800d19c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa0a:	f001 f8c9 	bl	800bba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa0e:	f002 fb95 	bl	800d13c <vPortEnterCritical>
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa18:	b25b      	sxtb	r3, r3
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1e:	d103      	bne.n	800aa28 <xQueueGenericSend+0x16c>
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa2e:	b25b      	sxtb	r3, r3
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa34:	d103      	bne.n	800aa3e <xQueueGenericSend+0x182>
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa3e:	f002 fbad 	bl	800d19c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa42:	1d3a      	adds	r2, r7, #4
 800aa44:	f107 0314 	add.w	r3, r7, #20
 800aa48:	4611      	mov	r1, r2
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f001 fb78 	bl	800c140 <xTaskCheckForTimeOut>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d124      	bne.n	800aaa0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa58:	f000 fa9e 	bl	800af98 <prvIsQueueFull>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d018      	beq.n	800aa94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa64:	3310      	adds	r3, #16
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	4611      	mov	r1, r2
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f001 fa7a 	bl	800bf64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa72:	f000 fa29 	bl	800aec8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa76:	f001 f8a1 	bl	800bbbc <xTaskResumeAll>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f47f af7c 	bne.w	800a97a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa82:	4b0c      	ldr	r3, [pc, #48]	; (800aab4 <xQueueGenericSend+0x1f8>)
 800aa84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa88:	601a      	str	r2, [r3, #0]
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	e772      	b.n	800a97a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa96:	f000 fa17 	bl	800aec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa9a:	f001 f88f 	bl	800bbbc <xTaskResumeAll>
 800aa9e:	e76c      	b.n	800a97a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aaa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaa2:	f000 fa11 	bl	800aec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aaa6:	f001 f889 	bl	800bbbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aaaa:	2300      	movs	r3, #0
		}
	}
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3738      	adds	r7, #56	; 0x38
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	e000ed04 	.word	0xe000ed04

0800aab8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b08e      	sub	sp, #56	; 0x38
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
 800aac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10a      	bne.n	800aae6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aae2:	bf00      	nop
 800aae4:	e7fe      	b.n	800aae4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d103      	bne.n	800aaf4 <xQueueGenericSendFromISR+0x3c>
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d101      	bne.n	800aaf8 <xQueueGenericSendFromISR+0x40>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e000      	b.n	800aafa <xQueueGenericSendFromISR+0x42>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10a      	bne.n	800ab14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	623b      	str	r3, [r7, #32]
}
 800ab10:	bf00      	nop
 800ab12:	e7fe      	b.n	800ab12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d103      	bne.n	800ab22 <xQueueGenericSendFromISR+0x6a>
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d101      	bne.n	800ab26 <xQueueGenericSendFromISR+0x6e>
 800ab22:	2301      	movs	r3, #1
 800ab24:	e000      	b.n	800ab28 <xQueueGenericSendFromISR+0x70>
 800ab26:	2300      	movs	r3, #0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10a      	bne.n	800ab42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ab2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	61fb      	str	r3, [r7, #28]
}
 800ab3e:	bf00      	nop
 800ab40:	e7fe      	b.n	800ab40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab42:	f002 fbbd 	bl	800d2c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab46:	f3ef 8211 	mrs	r2, BASEPRI
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	61ba      	str	r2, [r7, #24]
 800ab5c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab5e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d302      	bcc.n	800ab74 <xQueueGenericSendFromISR+0xbc>
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d12c      	bne.n	800abce <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	68b9      	ldr	r1, [r7, #8]
 800ab82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab84:	f000 f910 	bl	800ada8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab88:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ab8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab90:	d112      	bne.n	800abb8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d016      	beq.n	800abc8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	3324      	adds	r3, #36	; 0x24
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f001 fa30 	bl	800c004 <xTaskRemoveFromEventList>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00e      	beq.n	800abc8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00b      	beq.n	800abc8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	601a      	str	r2, [r3, #0]
 800abb6:	e007      	b.n	800abc8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800abb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abbc:	3301      	adds	r3, #1
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	b25a      	sxtb	r2, r3
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800abc8:	2301      	movs	r3, #1
 800abca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800abcc:	e001      	b.n	800abd2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800abce:	2300      	movs	r3, #0
 800abd0:	637b      	str	r3, [r7, #52]	; 0x34
 800abd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800abdc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3738      	adds	r7, #56	; 0x38
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b08c      	sub	sp, #48	; 0x30
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800abf4:	2300      	movs	r3, #0
 800abf6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10a      	bne.n	800ac18 <xQueueReceive+0x30>
	__asm volatile
 800ac02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	623b      	str	r3, [r7, #32]
}
 800ac14:	bf00      	nop
 800ac16:	e7fe      	b.n	800ac16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d103      	bne.n	800ac26 <xQueueReceive+0x3e>
 800ac1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <xQueueReceive+0x42>
 800ac26:	2301      	movs	r3, #1
 800ac28:	e000      	b.n	800ac2c <xQueueReceive+0x44>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <xQueueReceive+0x5e>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	61fb      	str	r3, [r7, #28]
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac46:	f001 fbd1 	bl	800c3ec <xTaskGetSchedulerState>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d102      	bne.n	800ac56 <xQueueReceive+0x6e>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d101      	bne.n	800ac5a <xQueueReceive+0x72>
 800ac56:	2301      	movs	r3, #1
 800ac58:	e000      	b.n	800ac5c <xQueueReceive+0x74>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10a      	bne.n	800ac76 <xQueueReceive+0x8e>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	61bb      	str	r3, [r7, #24]
}
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac76:	f002 fa61 	bl	800d13c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d01f      	beq.n	800acc6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac86:	68b9      	ldr	r1, [r7, #8]
 800ac88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac8a:	f000 f8f7 	bl	800ae7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac90:	1e5a      	subs	r2, r3, #1
 800ac92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00f      	beq.n	800acbe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca0:	3310      	adds	r3, #16
 800aca2:	4618      	mov	r0, r3
 800aca4:	f001 f9ae 	bl	800c004 <xTaskRemoveFromEventList>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d007      	beq.n	800acbe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acae:	4b3d      	ldr	r3, [pc, #244]	; (800ada4 <xQueueReceive+0x1bc>)
 800acb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb4:	601a      	str	r2, [r3, #0]
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800acbe:	f002 fa6d 	bl	800d19c <vPortExitCritical>
				return pdPASS;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e069      	b.n	800ad9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d103      	bne.n	800acd4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800accc:	f002 fa66 	bl	800d19c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800acd0:	2300      	movs	r3, #0
 800acd2:	e062      	b.n	800ad9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d106      	bne.n	800ace8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acda:	f107 0310 	add.w	r3, r7, #16
 800acde:	4618      	mov	r0, r3
 800ace0:	f001 fa18 	bl	800c114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ace4:	2301      	movs	r3, #1
 800ace6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ace8:	f002 fa58 	bl	800d19c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acec:	f000 ff58 	bl	800bba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acf0:	f002 fa24 	bl	800d13c <vPortEnterCritical>
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acfa:	b25b      	sxtb	r3, r3
 800acfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad00:	d103      	bne.n	800ad0a <xQueueReceive+0x122>
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad10:	b25b      	sxtb	r3, r3
 800ad12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad16:	d103      	bne.n	800ad20 <xQueueReceive+0x138>
 800ad18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad20:	f002 fa3c 	bl	800d19c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad24:	1d3a      	adds	r2, r7, #4
 800ad26:	f107 0310 	add.w	r3, r7, #16
 800ad2a:	4611      	mov	r1, r2
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f001 fa07 	bl	800c140 <xTaskCheckForTimeOut>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d123      	bne.n	800ad80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad3a:	f000 f917 	bl	800af6c <prvIsQueueEmpty>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d017      	beq.n	800ad74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad46:	3324      	adds	r3, #36	; 0x24
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f001 f909 	bl	800bf64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad54:	f000 f8b8 	bl	800aec8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad58:	f000 ff30 	bl	800bbbc <xTaskResumeAll>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d189      	bne.n	800ac76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ad62:	4b10      	ldr	r3, [pc, #64]	; (800ada4 <xQueueReceive+0x1bc>)
 800ad64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	e780      	b.n	800ac76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad76:	f000 f8a7 	bl	800aec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad7a:	f000 ff1f 	bl	800bbbc <xTaskResumeAll>
 800ad7e:	e77a      	b.n	800ac76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad82:	f000 f8a1 	bl	800aec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad86:	f000 ff19 	bl	800bbbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad8c:	f000 f8ee 	bl	800af6c <prvIsQueueEmpty>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f43f af6f 	beq.w	800ac76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3730      	adds	r7, #48	; 0x30
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	e000ed04 	.word	0xe000ed04

0800ada8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800adb4:	2300      	movs	r3, #0
 800adb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d10d      	bne.n	800ade2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d14d      	bne.n	800ae6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	4618      	mov	r0, r3
 800add4:	f001 fb28 	bl	800c428 <xTaskPriorityDisinherit>
 800add8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	605a      	str	r2, [r3, #4]
 800ade0:	e043      	b.n	800ae6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d119      	bne.n	800ae1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6898      	ldr	r0, [r3, #8]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf0:	461a      	mov	r2, r3
 800adf2:	68b9      	ldr	r1, [r7, #8]
 800adf4:	f002 fcd4 	bl	800d7a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	689a      	ldr	r2, [r3, #8]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae00:	441a      	add	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	689a      	ldr	r2, [r3, #8]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d32b      	bcc.n	800ae6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	609a      	str	r2, [r3, #8]
 800ae1a:	e026      	b.n	800ae6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	68d8      	ldr	r0, [r3, #12]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae24:	461a      	mov	r2, r3
 800ae26:	68b9      	ldr	r1, [r7, #8]
 800ae28:	f002 fcba 	bl	800d7a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	68da      	ldr	r2, [r3, #12]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae34:	425b      	negs	r3, r3
 800ae36:	441a      	add	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	68da      	ldr	r2, [r3, #12]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d207      	bcs.n	800ae58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	685a      	ldr	r2, [r3, #4]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae50:	425b      	negs	r3, r3
 800ae52:	441a      	add	r2, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	d105      	bne.n	800ae6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	3b01      	subs	r3, #1
 800ae68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	1c5a      	adds	r2, r3, #1
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae72:	697b      	ldr	r3, [r7, #20]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3718      	adds	r7, #24
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d018      	beq.n	800aec0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	68da      	ldr	r2, [r3, #12]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae96:	441a      	add	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68da      	ldr	r2, [r3, #12]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d303      	bcc.n	800aeb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	68d9      	ldr	r1, [r3, #12]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb8:	461a      	mov	r2, r3
 800aeba:	6838      	ldr	r0, [r7, #0]
 800aebc:	f002 fc70 	bl	800d7a0 <memcpy>
	}
}
 800aec0:	bf00      	nop
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aed0:	f002 f934 	bl	800d13c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aedc:	e011      	b.n	800af02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d012      	beq.n	800af0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	3324      	adds	r3, #36	; 0x24
 800aeea:	4618      	mov	r0, r3
 800aeec:	f001 f88a 	bl	800c004 <xTaskRemoveFromEventList>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d001      	beq.n	800aefa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aef6:	f001 f985 	bl	800c204 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aefa:	7bfb      	ldrb	r3, [r7, #15]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af06:	2b00      	cmp	r3, #0
 800af08:	dce9      	bgt.n	800aede <prvUnlockQueue+0x16>
 800af0a:	e000      	b.n	800af0e <prvUnlockQueue+0x46>
					break;
 800af0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	22ff      	movs	r2, #255	; 0xff
 800af12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af16:	f002 f941 	bl	800d19c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af1a:	f002 f90f 	bl	800d13c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af26:	e011      	b.n	800af4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d012      	beq.n	800af56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3310      	adds	r3, #16
 800af34:	4618      	mov	r0, r3
 800af36:	f001 f865 	bl	800c004 <xTaskRemoveFromEventList>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af40:	f001 f960 	bl	800c204 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af44:	7bbb      	ldrb	r3, [r7, #14]
 800af46:	3b01      	subs	r3, #1
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af50:	2b00      	cmp	r3, #0
 800af52:	dce9      	bgt.n	800af28 <prvUnlockQueue+0x60>
 800af54:	e000      	b.n	800af58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	22ff      	movs	r2, #255	; 0xff
 800af5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af60:	f002 f91c 	bl	800d19c <vPortExitCritical>
}
 800af64:	bf00      	nop
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af74:	f002 f8e2 	bl	800d13c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d102      	bne.n	800af86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af80:	2301      	movs	r3, #1
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	e001      	b.n	800af8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af86:	2300      	movs	r3, #0
 800af88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af8a:	f002 f907 	bl	800d19c <vPortExitCritical>

	return xReturn;
 800af8e:	68fb      	ldr	r3, [r7, #12]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afa0:	f002 f8cc 	bl	800d13c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afac:	429a      	cmp	r2, r3
 800afae:	d102      	bne.n	800afb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800afb0:	2301      	movs	r3, #1
 800afb2:	60fb      	str	r3, [r7, #12]
 800afb4:	e001      	b.n	800afba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800afb6:	2300      	movs	r3, #0
 800afb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afba:	f002 f8ef 	bl	800d19c <vPortExitCritical>

	return xReturn;
 800afbe:	68fb      	ldr	r3, [r7, #12]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afd2:	2300      	movs	r3, #0
 800afd4:	60fb      	str	r3, [r7, #12]
 800afd6:	e014      	b.n	800b002 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800afd8:	4a0e      	ldr	r2, [pc, #56]	; (800b014 <vQueueAddToRegistry+0x4c>)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10b      	bne.n	800affc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800afe4:	490b      	ldr	r1, [pc, #44]	; (800b014 <vQueueAddToRegistry+0x4c>)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800afee:	4a09      	ldr	r2, [pc, #36]	; (800b014 <vQueueAddToRegistry+0x4c>)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	00db      	lsls	r3, r3, #3
 800aff4:	4413      	add	r3, r2
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800affa:	e006      	b.n	800b00a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3301      	adds	r3, #1
 800b000:	60fb      	str	r3, [r7, #12]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2b07      	cmp	r3, #7
 800b006:	d9e7      	bls.n	800afd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b008:	bf00      	nop
 800b00a:	bf00      	nop
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	bc80      	pop	{r7}
 800b012:	4770      	bx	lr
 800b014:	20003858 	.word	0x20003858

0800b018 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b086      	sub	sp, #24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b028:	f002 f888 	bl	800d13c <vPortEnterCritical>
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b032:	b25b      	sxtb	r3, r3
 800b034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b038:	d103      	bne.n	800b042 <vQueueWaitForMessageRestricted+0x2a>
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b048:	b25b      	sxtb	r3, r3
 800b04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04e:	d103      	bne.n	800b058 <vQueueWaitForMessageRestricted+0x40>
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b058:	f002 f8a0 	bl	800d19c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b060:	2b00      	cmp	r3, #0
 800b062:	d106      	bne.n	800b072 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	3324      	adds	r3, #36	; 0x24
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 ff9d 	bl	800bfac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b072:	6978      	ldr	r0, [r7, #20]
 800b074:	f7ff ff28 	bl	800aec8 <prvUnlockQueue>
	}
 800b078:	bf00      	nop
 800b07a:	3718      	adds	r7, #24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800b080:	b580      	push	{r7, lr}
 800b082:	b08a      	sub	sp, #40	; 0x28
 800b084:	af02      	add	r7, sp, #8
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2b04      	cmp	r3, #4
 800b090:	d80a      	bhi.n	800b0a8 <xStreamBufferGenericCreate+0x28>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	61bb      	str	r3, [r7, #24]
}
 800b0a4:	bf00      	nop
 800b0a6:	e7fe      	b.n	800b0a6 <xStreamBufferGenericCreate+0x26>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d90a      	bls.n	800b0c6 <xStreamBufferGenericCreate+0x46>
	__asm volatile
 800b0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b4:	f383 8811 	msr	BASEPRI, r3
 800b0b8:	f3bf 8f6f 	isb	sy
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	617b      	str	r3, [r7, #20]
}
 800b0c2:	bf00      	nop
 800b0c4:	e7fe      	b.n	800b0c4 <xStreamBufferGenericCreate+0x44>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d101      	bne.n	800b0d0 <xStreamBufferGenericCreate+0x50>
		{
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	3320      	adds	r3, #32
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f002 f92e 	bl	800d33c <pvPortMalloc>
 800b0e0:	61f8      	str	r0, [r7, #28]

		if( pucAllocatedMemory != NULL )
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d009      	beq.n	800b0fc <xStreamBufferGenericCreate+0x7c>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	f103 0120 	add.w	r1, r3, #32
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	69f8      	ldr	r0, [r7, #28]
 800b0f8:	f000 faec 	bl	800b6d4 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t * ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800b0fc:	69fb      	ldr	r3, [r7, #28]
	}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3720      	adds	r7, #32
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800b106:	b480      	push	{r7}
 800b108:	b087      	sub	sp, #28
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10a      	bne.n	800b12e <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800b118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11c:	f383 8811 	msr	BASEPRI, r3
 800b120:	f3bf 8f6f 	isb	sy
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	60fb      	str	r3, [r7, #12]
}
 800b12a:	bf00      	nop
 800b12c:	e7fe      	b.n	800b12c <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	689a      	ldr	r2, [r3, #8]
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4413      	add	r3, r2
 800b138:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	697a      	ldr	r2, [r7, #20]
 800b140:	1ad3      	subs	r3, r2, r3
 800b142:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	3b01      	subs	r3, #1
 800b148:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	429a      	cmp	r2, r3
 800b152:	d304      	bcc.n	800b15e <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	697a      	ldr	r2, [r7, #20]
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800b15e:	697b      	ldr	r3, [r7, #20]
}
 800b160:	4618      	mov	r0, r3
 800b162:	371c      	adds	r7, #28
 800b164:	46bd      	mov	sp, r7
 800b166:	bc80      	pop	{r7}
 800b168:	4770      	bx	lr

0800b16a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b090      	sub	sp, #64	; 0x40
 800b16e:	af02      	add	r7, sp, #8
 800b170:	60f8      	str	r0, [r7, #12]
 800b172:	60b9      	str	r1, [r7, #8]
 800b174:	607a      	str	r2, [r7, #4]
 800b176:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800b17c:	2300      	movs	r3, #0
 800b17e:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10a      	bne.n	800b1a0 <xStreamBufferSend+0x36>
	__asm volatile
 800b18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b19c:	bf00      	nop
 800b19e:	e7fe      	b.n	800b19e <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800b1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d10a      	bne.n	800b1bc <xStreamBufferSend+0x52>
	__asm volatile
 800b1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1aa:	f383 8811 	msr	BASEPRI, r3
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	f3bf 8f4f 	dsb	sy
 800b1b6:	623b      	str	r3, [r7, #32]
}
 800b1b8:	bf00      	nop
 800b1ba:	e7fe      	b.n	800b1ba <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800b1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1be:	7f1b      	ldrb	r3, [r3, #28]
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <xStreamBufferSend+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	633b      	str	r3, [r7, #48]	; 0x30
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d03f      	beq.n	800b254 <xStreamBufferSend+0xea>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800b1d4:	f107 0314 	add.w	r3, r7, #20
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 ff75 	bl	800c0c8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800b1de:	f001 ffad 	bl	800d13c <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800b1e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1e4:	f7ff ff8f 	bl	800b106 <xStreamBufferSpacesAvailable>
 800b1e8:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800b1ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d217      	bcs.n	800b222 <xStreamBufferSend+0xb8>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	f001 fa9c 	bl	800c730 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800b1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00a      	beq.n	800b216 <xStreamBufferSend+0xac>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	61fb      	str	r3, [r7, #28]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xStreamBufferSend+0xaa>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800b216:	f001 f8db 	bl	800c3d0 <xTaskGetCurrentTaskHandle>
 800b21a:	4602      	mov	r2, r0
 800b21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21e:	615a      	str	r2, [r3, #20]
 800b220:	e002      	b.n	800b228 <xStreamBufferSend+0xbe>
				}
				else
				{
					taskEXIT_CRITICAL();
 800b222:	f001 ffbb 	bl	800d19c <vPortExitCritical>
					break;
 800b226:	e015      	b.n	800b254 <xStreamBufferSend+0xea>
				}
			}
			taskEXIT_CRITICAL();
 800b228:	f001 ffb8 	bl	800d19c <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2200      	movs	r2, #0
 800b230:	f04f 31ff 	mov.w	r1, #4294967295
 800b234:	2000      	movs	r0, #0
 800b236:	f001 f97d 	bl	800c534 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800b23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23c:	2200      	movs	r2, #0
 800b23e:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800b240:	463a      	mov	r2, r7
 800b242:	f107 0314 	add.w	r3, r7, #20
 800b246:	4611      	mov	r1, r2
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 ff79 	bl	800c140 <xTaskCheckForTimeOut>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d0c4      	beq.n	800b1de <xStreamBufferSend+0x74>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800b254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b256:	2b00      	cmp	r3, #0
 800b258:	d103      	bne.n	800b262 <xStreamBufferSend+0xf8>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800b25a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b25c:	f7ff ff53 	bl	800b106 <xStreamBufferSpacesAvailable>
 800b260:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	68b9      	ldr	r1, [r7, #8]
 800b26c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b26e:	f000 f823 	bl	800b2b8 <prvWriteMessageToBuffer>
 800b272:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b276:	2b00      	cmp	r3, #0
 800b278:	d019      	beq.n	800b2ae <xStreamBufferSend+0x144>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800b27a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b27c:	f000 fa0b 	bl	800b696 <prvBytesInBuffer>
 800b280:	4602      	mov	r2, r0
 800b282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	429a      	cmp	r2, r3
 800b288:	d311      	bcc.n	800b2ae <xStreamBufferSend+0x144>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800b28a:	f000 fc89 	bl	800bba0 <vTaskSuspendAll>
 800b28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d009      	beq.n	800b2aa <xStreamBufferSend+0x140>
 800b296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b298:	6918      	ldr	r0, [r3, #16]
 800b29a:	2300      	movs	r3, #0
 800b29c:	2200      	movs	r2, #0
 800b29e:	2100      	movs	r1, #0
 800b2a0:	f001 f9a2 	bl	800c5e8 <xTaskGenericNotify>
 800b2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	611a      	str	r2, [r3, #16]
 800b2aa:	f000 fc87 	bl	800bbbc <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3738      	adds	r7, #56	; 0x38
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
 800b2c4:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d102      	bne.n	800b2d2 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	617b      	str	r3, [r7, #20]
 800b2d0:	e01d      	b.n	800b30e <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	7f1b      	ldrb	r3, [r3, #28]
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d108      	bne.n	800b2f0 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	bf28      	it	cs
 800b2ea:	4613      	movcs	r3, r2
 800b2ec:	607b      	str	r3, [r7, #4]
 800b2ee:	e00e      	b.n	800b30e <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d308      	bcc.n	800b30a <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800b2fc:	1d3b      	adds	r3, r7, #4
 800b2fe:	2204      	movs	r2, #4
 800b300:	4619      	mov	r1, r3
 800b302:	68f8      	ldr	r0, [r7, #12]
 800b304:	f000 f8db 	bl	800b4be <prvWriteBytesToBuffer>
 800b308:	e001      	b.n	800b30e <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800b30a:	2300      	movs	r3, #0
 800b30c:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d007      	beq.n	800b324 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	461a      	mov	r2, r3
 800b318:	68b9      	ldr	r1, [r7, #8]
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f000 f8cf 	bl	800b4be <prvWriteBytesToBuffer>
 800b320:	6138      	str	r0, [r7, #16]
 800b322:	e001      	b.n	800b328 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800b324:	2300      	movs	r3, #0
 800b326:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800b328:	693b      	ldr	r3, [r7, #16]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b08e      	sub	sp, #56	; 0x38
 800b336:	af02      	add	r7, sp, #8
 800b338:	60f8      	str	r0, [r7, #12]
 800b33a:	60b9      	str	r1, [r7, #8]
 800b33c:	607a      	str	r2, [r7, #4]
 800b33e:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800b344:	2300      	movs	r3, #0
 800b346:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10a      	bne.n	800b364 <xStreamBufferReceive+0x32>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	61fb      	str	r3, [r7, #28]
}
 800b360:	bf00      	nop
 800b362:	e7fe      	b.n	800b362 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800b364:	6a3b      	ldr	r3, [r7, #32]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10a      	bne.n	800b380 <xStreamBufferReceive+0x4e>
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	61bb      	str	r3, [r7, #24]
}
 800b37c:	bf00      	nop
 800b37e:	e7fe      	b.n	800b37e <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800b380:	6a3b      	ldr	r3, [r7, #32]
 800b382:	7f1b      	ldrb	r3, [r3, #28]
 800b384:	f003 0301 	and.w	r3, r3, #1
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800b38c:	2304      	movs	r3, #4
 800b38e:	627b      	str	r3, [r7, #36]	; 0x24
 800b390:	e001      	b.n	800b396 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d035      	beq.n	800b408 <xStreamBufferReceive+0xd6>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800b39c:	f001 fece 	bl	800d13c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800b3a0:	6a38      	ldr	r0, [r7, #32]
 800b3a2:	f000 f978 	bl	800b696 <prvBytesInBuffer>
 800b3a6:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800b3a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d816      	bhi.n	800b3de <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	f001 f9bd 	bl	800c730 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800b3b6:	6a3b      	ldr	r3, [r7, #32]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00a      	beq.n	800b3d4 <xStreamBufferReceive+0xa2>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	617b      	str	r3, [r7, #20]
}
 800b3d0:	bf00      	nop
 800b3d2:	e7fe      	b.n	800b3d2 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800b3d4:	f000 fffc 	bl	800c3d0 <xTaskGetCurrentTaskHandle>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	6a3b      	ldr	r3, [r7, #32]
 800b3dc:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b3de:	f001 fedd 	bl	800d19c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800b3e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d812      	bhi.n	800b410 <xStreamBufferReceive+0xde>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f04f 31ff 	mov.w	r1, #4294967295
 800b3f2:	2000      	movs	r0, #0
 800b3f4:	f001 f89e 	bl	800c534 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800b3f8:	6a3b      	ldr	r3, [r7, #32]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800b3fe:	6a38      	ldr	r0, [r7, #32]
 800b400:	f000 f949 	bl	800b696 <prvBytesInBuffer>
 800b404:	62b8      	str	r0, [r7, #40]	; 0x28
 800b406:	e003      	b.n	800b410 <xStreamBufferReceive+0xde>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800b408:	6a38      	ldr	r0, [r7, #32]
 800b40a:	f000 f944 	bl	800b696 <prvBytesInBuffer>
 800b40e:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800b410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	429a      	cmp	r2, r3
 800b416:	d91d      	bls.n	800b454 <xStreamBufferReceive+0x122>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800b418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	68b9      	ldr	r1, [r7, #8]
 800b422:	6a38      	ldr	r0, [r7, #32]
 800b424:	f000 f81b 	bl	800b45e <prvReadMessageFromBuffer>
 800b428:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800b42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d011      	beq.n	800b454 <xStreamBufferReceive+0x122>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800b430:	f000 fbb6 	bl	800bba0 <vTaskSuspendAll>
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	695b      	ldr	r3, [r3, #20]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d009      	beq.n	800b450 <xStreamBufferReceive+0x11e>
 800b43c:	6a3b      	ldr	r3, [r7, #32]
 800b43e:	6958      	ldr	r0, [r3, #20]
 800b440:	2300      	movs	r3, #0
 800b442:	2200      	movs	r2, #0
 800b444:	2100      	movs	r1, #0
 800b446:	f001 f8cf 	bl	800c5e8 <xTaskGenericNotify>
 800b44a:	6a3b      	ldr	r3, [r7, #32]
 800b44c:	2200      	movs	r2, #0
 800b44e:	615a      	str	r2, [r3, #20]
 800b450:	f000 fbb4 	bl	800bbbc <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800b454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b456:	4618      	mov	r0, r3
 800b458:	3730      	adds	r7, #48	; 0x30
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b088      	sub	sp, #32
 800b462:	af00      	add	r7, sp, #0
 800b464:	60f8      	str	r0, [r7, #12]
 800b466:	60b9      	str	r1, [r7, #8]
 800b468:	607a      	str	r2, [r7, #4]
 800b46a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800b46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d017      	beq.n	800b4a2 <prvReadMessageFromBuffer+0x44>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	61fb      	str	r3, [r7, #28]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800b478:	f107 0114 	add.w	r1, r7, #20
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f000 f88e 	bl	800b5a2 <prvReadBytesFromBuffer>

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	429a      	cmp	r2, r3
 800b494:	d207      	bcs.n	800b4a6 <prvReadMessageFromBuffer+0x48>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	69fa      	ldr	r2, [r7, #28]
 800b49a:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800b49c:	2300      	movs	r3, #0
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	e001      	b.n	800b4a6 <prvReadMessageFromBuffer+0x48>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	617b      	str	r3, [r7, #20]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800b4a6:	697a      	ldr	r2, [r7, #20]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	68b9      	ldr	r1, [r7, #8]
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f000 f878 	bl	800b5a2 <prvReadBytesFromBuffer>
 800b4b2:	61b8      	str	r0, [r7, #24]

	return xReceivedLength;
 800b4b4:	69bb      	ldr	r3, [r7, #24]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3720      	adds	r7, #32
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b08a      	sub	sp, #40	; 0x28
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	60f8      	str	r0, [r7, #12]
 800b4c6:	60b9      	str	r1, [r7, #8]
 800b4c8:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d10a      	bne.n	800b4e6 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	61fb      	str	r3, [r7, #28]
}
 800b4e2:	bf00      	nop
 800b4e4:	e7fe      	b.n	800b4e4 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	689a      	ldr	r2, [r3, #8]
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	bf28      	it	cs
 800b4fa:	4613      	movcs	r3, r2
 800b4fc:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800b4fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	441a      	add	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d90a      	bls.n	800b522 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	61bb      	str	r3, [r7, #24]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <prvWriteBytesToBuffer+0x62>
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	699a      	ldr	r2, [r3, #24]
 800b526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b528:	4413      	add	r3, r2
 800b52a:	6a3a      	ldr	r2, [r7, #32]
 800b52c:	68b9      	ldr	r1, [r7, #8]
 800b52e:	4618      	mov	r0, r3
 800b530:	f002 f936 	bl	800d7a0 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	6a3b      	ldr	r3, [r7, #32]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d91c      	bls.n	800b576 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	6a3b      	ldr	r3, [r7, #32]
 800b540:	1ad2      	subs	r2, r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	429a      	cmp	r2, r3
 800b548:	d90a      	bls.n	800b560 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	617b      	str	r3, [r7, #20]
}
 800b55c:	bf00      	nop
 800b55e:	e7fe      	b.n	800b55e <prvWriteBytesToBuffer+0xa0>
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6998      	ldr	r0, [r3, #24]
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	6a3b      	ldr	r3, [r7, #32]
 800b568:	18d1      	adds	r1, r2, r3
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	6a3b      	ldr	r3, [r7, #32]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	461a      	mov	r2, r3
 800b572:	f002 f915 	bl	800d7a0 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800b576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4413      	add	r3, r2
 800b57c:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b584:	429a      	cmp	r2, r3
 800b586:	d304      	bcc.n	800b592 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b596:	605a      	str	r2, [r3, #4]

	return xCount;
 800b598:	687b      	ldr	r3, [r7, #4]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3728      	adds	r7, #40	; 0x28
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b08a      	sub	sp, #40	; 0x28
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	60f8      	str	r0, [r7, #12]
 800b5aa:	60b9      	str	r1, [r7, #8]
 800b5ac:	607a      	str	r2, [r7, #4]
 800b5ae:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	bf28      	it	cs
 800b5b8:	4613      	movcs	r3, r2
 800b5ba:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d064      	beq.n	800b68c <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	689a      	ldr	r2, [r3, #8]
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ce:	1ad3      	subs	r3, r2, r3
 800b5d0:	6a3a      	ldr	r2, [r7, #32]
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	bf28      	it	cs
 800b5d6:	4613      	movcs	r3, r2
 800b5d8:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800b5da:	69fa      	ldr	r2, [r7, #28]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d90a      	bls.n	800b5f8 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	61bb      	str	r3, [r7, #24]
}
 800b5f4:	bf00      	nop
 800b5f6:	e7fe      	b.n	800b5f6 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800b5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	441a      	add	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	429a      	cmp	r2, r3
 800b604:	d90a      	bls.n	800b61c <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800b606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	617b      	str	r3, [r7, #20]
}
 800b618:	bf00      	nop
 800b61a:	e7fe      	b.n	800b61a <prvReadBytesFromBuffer+0x78>
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	699a      	ldr	r2, [r3, #24]
 800b620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b622:	4413      	add	r3, r2
 800b624:	69fa      	ldr	r2, [r7, #28]
 800b626:	4619      	mov	r1, r3
 800b628:	68b8      	ldr	r0, [r7, #8]
 800b62a:	f002 f8b9 	bl	800d7a0 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800b62e:	6a3a      	ldr	r2, [r7, #32]
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	429a      	cmp	r2, r3
 800b634:	d919      	bls.n	800b66a <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800b636:	6a3a      	ldr	r2, [r7, #32]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d90a      	bls.n	800b654 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800b63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b642:	f383 8811 	msr	BASEPRI, r3
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	613b      	str	r3, [r7, #16]
}
 800b650:	bf00      	nop
 800b652:	e7fe      	b.n	800b652 <prvReadBytesFromBuffer+0xb0>
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	18d0      	adds	r0, r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6999      	ldr	r1, [r3, #24]
 800b65e:	6a3a      	ldr	r2, [r7, #32]
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	461a      	mov	r2, r3
 800b666:	f002 f89b 	bl	800d7a0 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800b66a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b66c:	6a3b      	ldr	r3, [r7, #32]
 800b66e:	4413      	add	r3, r2
 800b670:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b678:	429a      	cmp	r2, r3
 800b67a:	d304      	bcc.n	800b686 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b68a:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800b68c:	6a3b      	ldr	r3, [r7, #32]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3728      	adds	r7, #40	; 0x28
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800b696:	b480      	push	{r7}
 800b698:	b085      	sub	sp, #20
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	689a      	ldr	r2, [r3, #8]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d304      	bcc.n	800b6c8 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3714      	adds	r7, #20
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bc80      	pop	{r7}
 800b6d2:	4770      	bx	lr

0800b6d4 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  BaseType_t xIsMessageBuffer )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
 800b6e0:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800b6e2:	2355      	movs	r3, #85	; 0x55
 800b6e4:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	6979      	ldr	r1, [r7, #20]
 800b6ea:	68b8      	ldr	r0, [r7, #8]
 800b6ec:	f002 f866 	bl	800d7bc <memset>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d00a      	beq.n	800b70e <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800b6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fc:	f383 8811 	msr	BASEPRI, r3
 800b700:	f3bf 8f6f 	isb	sy
 800b704:	f3bf 8f4f 	dsb	sy
 800b708:	613b      	str	r3, [r7, #16]
}
 800b70a:	bf00      	nop
 800b70c:	e7fe      	b.n	800b70c <prvInitialiseNewStreamBuffer+0x38>
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800b70e:	2220      	movs	r2, #32
 800b710:	2100      	movs	r1, #0
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f002 f852 	bl	800d7bc <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	60da      	str	r2, [r3, #12]

	if( xIsMessageBuffer != pdFALSE )
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d006      	beq.n	800b73e <prvInitialiseNewStreamBuffer+0x6a>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	7f1b      	ldrb	r3, [r3, #28]
 800b734:	f043 0301 	orr.w	r3, r3, #1
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	771a      	strb	r2, [r3, #28]
	}
}
 800b73e:	bf00      	nop
 800b740:	3718      	adds	r7, #24
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b746:	b580      	push	{r7, lr}
 800b748:	b08e      	sub	sp, #56	; 0x38
 800b74a:	af04      	add	r7, sp, #16
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	607a      	str	r2, [r7, #4]
 800b752:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b756:	2b00      	cmp	r3, #0
 800b758:	d10a      	bne.n	800b770 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	623b      	str	r3, [r7, #32]
}
 800b76c:	bf00      	nop
 800b76e:	e7fe      	b.n	800b76e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10a      	bne.n	800b78c <xTaskCreateStatic+0x46>
	__asm volatile
 800b776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	61fb      	str	r3, [r7, #28]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b78c:	2354      	movs	r3, #84	; 0x54
 800b78e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	2b54      	cmp	r3, #84	; 0x54
 800b794:	d00a      	beq.n	800b7ac <xTaskCreateStatic+0x66>
	__asm volatile
 800b796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	61bb      	str	r3, [r7, #24]
}
 800b7a8:	bf00      	nop
 800b7aa:	e7fe      	b.n	800b7aa <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d01e      	beq.n	800b7f0 <xTaskCreateStatic+0xaa>
 800b7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d01b      	beq.n	800b7f0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	9303      	str	r3, [sp, #12]
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d0:	9302      	str	r3, [sp, #8]
 800b7d2:	f107 0314 	add.w	r3, r7, #20
 800b7d6:	9301      	str	r3, [sp, #4]
 800b7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	68b9      	ldr	r1, [r7, #8]
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f000 f850 	bl	800b888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7ea:	f000 f8d5 	bl	800b998 <prvAddNewTaskToReadyList>
 800b7ee:	e001      	b.n	800b7f4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b7f4:	697b      	ldr	r3, [r7, #20]
	}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3728      	adds	r7, #40	; 0x28
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b08c      	sub	sp, #48	; 0x30
 800b802:	af04      	add	r7, sp, #16
 800b804:	60f8      	str	r0, [r7, #12]
 800b806:	60b9      	str	r1, [r7, #8]
 800b808:	603b      	str	r3, [r7, #0]
 800b80a:	4613      	mov	r3, r2
 800b80c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b80e:	88fb      	ldrh	r3, [r7, #6]
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4618      	mov	r0, r3
 800b814:	f001 fd92 	bl	800d33c <pvPortMalloc>
 800b818:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00e      	beq.n	800b83e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b820:	2054      	movs	r0, #84	; 0x54
 800b822:	f001 fd8b 	bl	800d33c <pvPortMalloc>
 800b826:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d003      	beq.n	800b836 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	697a      	ldr	r2, [r7, #20]
 800b832:	631a      	str	r2, [r3, #48]	; 0x30
 800b834:	e005      	b.n	800b842 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b836:	6978      	ldr	r0, [r7, #20]
 800b838:	f001 fe44 	bl	800d4c4 <vPortFree>
 800b83c:	e001      	b.n	800b842 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b83e:	2300      	movs	r3, #0
 800b840:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d017      	beq.n	800b878 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	2200      	movs	r2, #0
 800b84c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b850:	88fa      	ldrh	r2, [r7, #6]
 800b852:	2300      	movs	r3, #0
 800b854:	9303      	str	r3, [sp, #12]
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	9302      	str	r3, [sp, #8]
 800b85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85c:	9301      	str	r3, [sp, #4]
 800b85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	68b9      	ldr	r1, [r7, #8]
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f000 f80e 	bl	800b888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b86c:	69f8      	ldr	r0, [r7, #28]
 800b86e:	f000 f893 	bl	800b998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b872:	2301      	movs	r3, #1
 800b874:	61bb      	str	r3, [r7, #24]
 800b876:	e002      	b.n	800b87e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b878:	f04f 33ff 	mov.w	r3, #4294967295
 800b87c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b87e:	69bb      	ldr	r3, [r7, #24]
	}
 800b880:	4618      	mov	r0, r3
 800b882:	3720      	adds	r7, #32
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b088      	sub	sp, #32
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
 800b894:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b898:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	461a      	mov	r2, r3
 800b8a0:	21a5      	movs	r1, #165	; 0xa5
 800b8a2:	f001 ff8b 	bl	800d7bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4413      	add	r3, r2
 800b8b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	f023 0307 	bic.w	r3, r3, #7
 800b8be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	f003 0307 	and.w	r3, r3, #7
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00a      	beq.n	800b8e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	617b      	str	r3, [r7, #20]
}
 800b8dc:	bf00      	nop
 800b8de:	e7fe      	b.n	800b8de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	61fb      	str	r3, [r7, #28]
 800b8e4:	e012      	b.n	800b90c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b8e6:	68ba      	ldr	r2, [r7, #8]
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	7819      	ldrb	r1, [r3, #0]
 800b8ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	3334      	adds	r3, #52	; 0x34
 800b8f6:	460a      	mov	r2, r1
 800b8f8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	4413      	add	r3, r2
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d006      	beq.n	800b914 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	3301      	adds	r3, #1
 800b90a:	61fb      	str	r3, [r7, #28]
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	2b0f      	cmp	r3, #15
 800b910:	d9e9      	bls.n	800b8e6 <prvInitialiseNewTask+0x5e>
 800b912:	e000      	b.n	800b916 <prvInitialiseNewTask+0x8e>
		{
			break;
 800b914:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	2200      	movs	r2, #0
 800b91a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b920:	2b06      	cmp	r3, #6
 800b922:	d901      	bls.n	800b928 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b924:	2306      	movs	r3, #6
 800b926:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b92c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b932:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b936:	2200      	movs	r2, #0
 800b938:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93c:	3304      	adds	r3, #4
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fe fdef 	bl	800a522 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b946:	3318      	adds	r3, #24
 800b948:	4618      	mov	r0, r3
 800b94a:	f7fe fdea 	bl	800a522 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b952:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	f1c3 0207 	rsb	r2, r3, #7
 800b95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b962:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	2200      	movs	r2, #0
 800b968:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96c:	2200      	movs	r2, #0
 800b96e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	68f9      	ldr	r1, [r7, #12]
 800b976:	69b8      	ldr	r0, [r7, #24]
 800b978:	f001 faee 	bl	800cf58 <pxPortInitialiseStack>
 800b97c:	4602      	mov	r2, r0
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b98c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b98e:	bf00      	nop
 800b990:	3720      	adds	r7, #32
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
	...

0800b998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b9a0:	f001 fbcc 	bl	800d13c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b9a4:	4b2a      	ldr	r3, [pc, #168]	; (800ba50 <prvAddNewTaskToReadyList+0xb8>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	4a29      	ldr	r2, [pc, #164]	; (800ba50 <prvAddNewTaskToReadyList+0xb8>)
 800b9ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b9ae:	4b29      	ldr	r3, [pc, #164]	; (800ba54 <prvAddNewTaskToReadyList+0xbc>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d109      	bne.n	800b9ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b9b6:	4a27      	ldr	r2, [pc, #156]	; (800ba54 <prvAddNewTaskToReadyList+0xbc>)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b9bc:	4b24      	ldr	r3, [pc, #144]	; (800ba50 <prvAddNewTaskToReadyList+0xb8>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d110      	bne.n	800b9e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b9c4:	f000 fc42 	bl	800c24c <prvInitialiseTaskLists>
 800b9c8:	e00d      	b.n	800b9e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b9ca:	4b23      	ldr	r3, [pc, #140]	; (800ba58 <prvAddNewTaskToReadyList+0xc0>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d109      	bne.n	800b9e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b9d2:	4b20      	ldr	r3, [pc, #128]	; (800ba54 <prvAddNewTaskToReadyList+0xbc>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d802      	bhi.n	800b9e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b9e0:	4a1c      	ldr	r2, [pc, #112]	; (800ba54 <prvAddNewTaskToReadyList+0xbc>)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b9e6:	4b1d      	ldr	r3, [pc, #116]	; (800ba5c <prvAddNewTaskToReadyList+0xc4>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	4a1b      	ldr	r2, [pc, #108]	; (800ba5c <prvAddNewTaskToReadyList+0xc4>)
 800b9ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	409a      	lsls	r2, r3
 800b9f8:	4b19      	ldr	r3, [pc, #100]	; (800ba60 <prvAddNewTaskToReadyList+0xc8>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	4a18      	ldr	r2, [pc, #96]	; (800ba60 <prvAddNewTaskToReadyList+0xc8>)
 800ba00:	6013      	str	r3, [r2, #0]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba06:	4613      	mov	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4413      	add	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4a15      	ldr	r2, [pc, #84]	; (800ba64 <prvAddNewTaskToReadyList+0xcc>)
 800ba10:	441a      	add	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	3304      	adds	r3, #4
 800ba16:	4619      	mov	r1, r3
 800ba18:	4610      	mov	r0, r2
 800ba1a:	f7fe fd8e 	bl	800a53a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba1e:	f001 fbbd 	bl	800d19c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba22:	4b0d      	ldr	r3, [pc, #52]	; (800ba58 <prvAddNewTaskToReadyList+0xc0>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00e      	beq.n	800ba48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba2a:	4b0a      	ldr	r3, [pc, #40]	; (800ba54 <prvAddNewTaskToReadyList+0xbc>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d207      	bcs.n	800ba48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba38:	4b0b      	ldr	r3, [pc, #44]	; (800ba68 <prvAddNewTaskToReadyList+0xd0>)
 800ba3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba48:	bf00      	nop
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	20001494 	.word	0x20001494
 800ba54:	20001394 	.word	0x20001394
 800ba58:	200014a0 	.word	0x200014a0
 800ba5c:	200014b0 	.word	0x200014b0
 800ba60:	2000149c 	.word	0x2000149c
 800ba64:	20001398 	.word	0x20001398
 800ba68:	e000ed04 	.word	0xe000ed04

0800ba6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba74:	2300      	movs	r3, #0
 800ba76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d017      	beq.n	800baae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba7e:	4b13      	ldr	r3, [pc, #76]	; (800bacc <vTaskDelay+0x60>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00a      	beq.n	800ba9c <vTaskDelay+0x30>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	60bb      	str	r3, [r7, #8]
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba9c:	f000 f880 	bl	800bba0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800baa0:	2100      	movs	r1, #0
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 fe6a 	bl	800c77c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800baa8:	f000 f888 	bl	800bbbc <xTaskResumeAll>
 800baac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d107      	bne.n	800bac4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bab4:	4b06      	ldr	r3, [pc, #24]	; (800bad0 <vTaskDelay+0x64>)
 800bab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baba:	601a      	str	r2, [r3, #0]
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bac4:	bf00      	nop
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	200014bc 	.word	0x200014bc
 800bad0:	e000ed04 	.word	0xe000ed04

0800bad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b08a      	sub	sp, #40	; 0x28
 800bad8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bada:	2300      	movs	r3, #0
 800badc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bade:	2300      	movs	r3, #0
 800bae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bae2:	463a      	mov	r2, r7
 800bae4:	1d39      	adds	r1, r7, #4
 800bae6:	f107 0308 	add.w	r3, r7, #8
 800baea:	4618      	mov	r0, r3
 800baec:	f7f7 fd78 	bl	80035e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800baf0:	6839      	ldr	r1, [r7, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	9202      	str	r2, [sp, #8]
 800baf8:	9301      	str	r3, [sp, #4]
 800bafa:	2300      	movs	r3, #0
 800bafc:	9300      	str	r3, [sp, #0]
 800bafe:	2300      	movs	r3, #0
 800bb00:	460a      	mov	r2, r1
 800bb02:	4921      	ldr	r1, [pc, #132]	; (800bb88 <vTaskStartScheduler+0xb4>)
 800bb04:	4821      	ldr	r0, [pc, #132]	; (800bb8c <vTaskStartScheduler+0xb8>)
 800bb06:	f7ff fe1e 	bl	800b746 <xTaskCreateStatic>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	4a20      	ldr	r2, [pc, #128]	; (800bb90 <vTaskStartScheduler+0xbc>)
 800bb0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb10:	4b1f      	ldr	r3, [pc, #124]	; (800bb90 <vTaskStartScheduler+0xbc>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	617b      	str	r3, [r7, #20]
 800bb1c:	e001      	b.n	800bb22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d102      	bne.n	800bb2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bb28:	f000 fe8e 	bl	800c848 <xTimerCreateTimerTask>
 800bb2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d116      	bne.n	800bb62 <vTaskStartScheduler+0x8e>
	__asm volatile
 800bb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb38:	f383 8811 	msr	BASEPRI, r3
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	613b      	str	r3, [r7, #16]
}
 800bb46:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb48:	4b12      	ldr	r3, [pc, #72]	; (800bb94 <vTaskStartScheduler+0xc0>)
 800bb4a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb50:	4b11      	ldr	r3, [pc, #68]	; (800bb98 <vTaskStartScheduler+0xc4>)
 800bb52:	2201      	movs	r2, #1
 800bb54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800bb56:	4b11      	ldr	r3, [pc, #68]	; (800bb9c <vTaskStartScheduler+0xc8>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bb5c:	f001 fa7c 	bl	800d058 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb60:	e00e      	b.n	800bb80 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb68:	d10a      	bne.n	800bb80 <vTaskStartScheduler+0xac>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	60fb      	str	r3, [r7, #12]
}
 800bb7c:	bf00      	nop
 800bb7e:	e7fe      	b.n	800bb7e <vTaskStartScheduler+0xaa>
}
 800bb80:	bf00      	nop
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	08011be0 	.word	0x08011be0
 800bb8c:	0800c21d 	.word	0x0800c21d
 800bb90:	200014b8 	.word	0x200014b8
 800bb94:	200014b4 	.word	0x200014b4
 800bb98:	200014a0 	.word	0x200014a0
 800bb9c:	20001498 	.word	0x20001498

0800bba0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bba0:	b480      	push	{r7}
 800bba2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bba4:	4b04      	ldr	r3, [pc, #16]	; (800bbb8 <vTaskSuspendAll+0x18>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	4a03      	ldr	r2, [pc, #12]	; (800bbb8 <vTaskSuspendAll+0x18>)
 800bbac:	6013      	str	r3, [r2, #0]
}
 800bbae:	bf00      	nop
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bc80      	pop	{r7}
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	200014bc 	.word	0x200014bc

0800bbbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bbca:	4b41      	ldr	r3, [pc, #260]	; (800bcd0 <xTaskResumeAll+0x114>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10a      	bne.n	800bbe8 <xTaskResumeAll+0x2c>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	603b      	str	r3, [r7, #0]
}
 800bbe4:	bf00      	nop
 800bbe6:	e7fe      	b.n	800bbe6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bbe8:	f001 faa8 	bl	800d13c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bbec:	4b38      	ldr	r3, [pc, #224]	; (800bcd0 <xTaskResumeAll+0x114>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	4a37      	ldr	r2, [pc, #220]	; (800bcd0 <xTaskResumeAll+0x114>)
 800bbf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbf6:	4b36      	ldr	r3, [pc, #216]	; (800bcd0 <xTaskResumeAll+0x114>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d161      	bne.n	800bcc2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bbfe:	4b35      	ldr	r3, [pc, #212]	; (800bcd4 <xTaskResumeAll+0x118>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d05d      	beq.n	800bcc2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc06:	e02e      	b.n	800bc66 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bc08:	4b33      	ldr	r3, [pc, #204]	; (800bcd8 <xTaskResumeAll+0x11c>)
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	3318      	adds	r3, #24
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fe fceb 	bl	800a5f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe fce6 	bl	800a5f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc28:	2201      	movs	r2, #1
 800bc2a:	409a      	lsls	r2, r3
 800bc2c:	4b2b      	ldr	r3, [pc, #172]	; (800bcdc <xTaskResumeAll+0x120>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	4a2a      	ldr	r2, [pc, #168]	; (800bcdc <xTaskResumeAll+0x120>)
 800bc34:	6013      	str	r3, [r2, #0]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4a27      	ldr	r2, [pc, #156]	; (800bce0 <xTaskResumeAll+0x124>)
 800bc44:	441a      	add	r2, r3
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	3304      	adds	r3, #4
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	4610      	mov	r0, r2
 800bc4e:	f7fe fc74 	bl	800a53a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc56:	4b23      	ldr	r3, [pc, #140]	; (800bce4 <xTaskResumeAll+0x128>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d302      	bcc.n	800bc66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bc60:	4b21      	ldr	r3, [pc, #132]	; (800bce8 <xTaskResumeAll+0x12c>)
 800bc62:	2201      	movs	r2, #1
 800bc64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc66:	4b1c      	ldr	r3, [pc, #112]	; (800bcd8 <xTaskResumeAll+0x11c>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1cc      	bne.n	800bc08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d001      	beq.n	800bc78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc74:	f000 fb88 	bl	800c388 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bc78:	4b1c      	ldr	r3, [pc, #112]	; (800bcec <xTaskResumeAll+0x130>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d010      	beq.n	800bca6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc84:	f000 f856 	bl	800bd34 <xTaskIncrementTick>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d002      	beq.n	800bc94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bc8e:	4b16      	ldr	r3, [pc, #88]	; (800bce8 <xTaskResumeAll+0x12c>)
 800bc90:	2201      	movs	r2, #1
 800bc92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1f1      	bne.n	800bc84 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800bca0:	4b12      	ldr	r3, [pc, #72]	; (800bcec <xTaskResumeAll+0x130>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bca6:	4b10      	ldr	r3, [pc, #64]	; (800bce8 <xTaskResumeAll+0x12c>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d009      	beq.n	800bcc2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bcb2:	4b0f      	ldr	r3, [pc, #60]	; (800bcf0 <xTaskResumeAll+0x134>)
 800bcb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcb8:	601a      	str	r2, [r3, #0]
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bcc2:	f001 fa6b 	bl	800d19c <vPortExitCritical>

	return xAlreadyYielded;
 800bcc6:	68bb      	ldr	r3, [r7, #8]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	200014bc 	.word	0x200014bc
 800bcd4:	20001494 	.word	0x20001494
 800bcd8:	20001454 	.word	0x20001454
 800bcdc:	2000149c 	.word	0x2000149c
 800bce0:	20001398 	.word	0x20001398
 800bce4:	20001394 	.word	0x20001394
 800bce8:	200014a8 	.word	0x200014a8
 800bcec:	200014a4 	.word	0x200014a4
 800bcf0:	e000ed04 	.word	0xe000ed04

0800bcf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bcfa:	4b04      	ldr	r3, [pc, #16]	; (800bd0c <xTaskGetTickCount+0x18>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bd00:	687b      	ldr	r3, [r7, #4]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	370c      	adds	r7, #12
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bc80      	pop	{r7}
 800bd0a:	4770      	bx	lr
 800bd0c:	20001498 	.word	0x20001498

0800bd10 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd16:	f001 fad3 	bl	800d2c0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bd1e:	4b04      	ldr	r3, [pc, #16]	; (800bd30 <xTaskGetTickCountFromISR+0x20>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd24:	683b      	ldr	r3, [r7, #0]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	20001498 	.word	0x20001498

0800bd34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd3e:	4b51      	ldr	r3, [pc, #324]	; (800be84 <xTaskIncrementTick+0x150>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f040 808d 	bne.w	800be62 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd48:	4b4f      	ldr	r3, [pc, #316]	; (800be88 <xTaskIncrementTick+0x154>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd50:	4a4d      	ldr	r2, [pc, #308]	; (800be88 <xTaskIncrementTick+0x154>)
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d120      	bne.n	800bd9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd5c:	4b4b      	ldr	r3, [pc, #300]	; (800be8c <xTaskIncrementTick+0x158>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00a      	beq.n	800bd7c <xTaskIncrementTick+0x48>
	__asm volatile
 800bd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	603b      	str	r3, [r7, #0]
}
 800bd78:	bf00      	nop
 800bd7a:	e7fe      	b.n	800bd7a <xTaskIncrementTick+0x46>
 800bd7c:	4b43      	ldr	r3, [pc, #268]	; (800be8c <xTaskIncrementTick+0x158>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	60fb      	str	r3, [r7, #12]
 800bd82:	4b43      	ldr	r3, [pc, #268]	; (800be90 <xTaskIncrementTick+0x15c>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a41      	ldr	r2, [pc, #260]	; (800be8c <xTaskIncrementTick+0x158>)
 800bd88:	6013      	str	r3, [r2, #0]
 800bd8a:	4a41      	ldr	r2, [pc, #260]	; (800be90 <xTaskIncrementTick+0x15c>)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6013      	str	r3, [r2, #0]
 800bd90:	4b40      	ldr	r3, [pc, #256]	; (800be94 <xTaskIncrementTick+0x160>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	3301      	adds	r3, #1
 800bd96:	4a3f      	ldr	r2, [pc, #252]	; (800be94 <xTaskIncrementTick+0x160>)
 800bd98:	6013      	str	r3, [r2, #0]
 800bd9a:	f000 faf5 	bl	800c388 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd9e:	4b3e      	ldr	r3, [pc, #248]	; (800be98 <xTaskIncrementTick+0x164>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d34d      	bcc.n	800be44 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bda8:	4b38      	ldr	r3, [pc, #224]	; (800be8c <xTaskIncrementTick+0x158>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d101      	bne.n	800bdb6 <xTaskIncrementTick+0x82>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e000      	b.n	800bdb8 <xTaskIncrementTick+0x84>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d004      	beq.n	800bdc6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdbc:	4b36      	ldr	r3, [pc, #216]	; (800be98 <xTaskIncrementTick+0x164>)
 800bdbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc2:	601a      	str	r2, [r3, #0]
					break;
 800bdc4:	e03e      	b.n	800be44 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bdc6:	4b31      	ldr	r3, [pc, #196]	; (800be8c <xTaskIncrementTick+0x158>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bdd6:	693a      	ldr	r2, [r7, #16]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d203      	bcs.n	800bde6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bdde:	4a2e      	ldr	r2, [pc, #184]	; (800be98 <xTaskIncrementTick+0x164>)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6013      	str	r3, [r2, #0]
						break;
 800bde4:	e02e      	b.n	800be44 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	3304      	adds	r3, #4
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7fe fc00 	bl	800a5f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d004      	beq.n	800be02 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	3318      	adds	r3, #24
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7fe fbf7 	bl	800a5f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be06:	2201      	movs	r2, #1
 800be08:	409a      	lsls	r2, r3
 800be0a:	4b24      	ldr	r3, [pc, #144]	; (800be9c <xTaskIncrementTick+0x168>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4313      	orrs	r3, r2
 800be10:	4a22      	ldr	r2, [pc, #136]	; (800be9c <xTaskIncrementTick+0x168>)
 800be12:	6013      	str	r3, [r2, #0]
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be18:	4613      	mov	r3, r2
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	4413      	add	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4a1f      	ldr	r2, [pc, #124]	; (800bea0 <xTaskIncrementTick+0x16c>)
 800be22:	441a      	add	r2, r3
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	3304      	adds	r3, #4
 800be28:	4619      	mov	r1, r3
 800be2a:	4610      	mov	r0, r2
 800be2c:	f7fe fb85 	bl	800a53a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be34:	4b1b      	ldr	r3, [pc, #108]	; (800bea4 <xTaskIncrementTick+0x170>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d3b4      	bcc.n	800bda8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800be3e:	2301      	movs	r3, #1
 800be40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be42:	e7b1      	b.n	800bda8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be44:	4b17      	ldr	r3, [pc, #92]	; (800bea4 <xTaskIncrementTick+0x170>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4a:	4915      	ldr	r1, [pc, #84]	; (800bea0 <xTaskIncrementTick+0x16c>)
 800be4c:	4613      	mov	r3, r2
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	4413      	add	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	440b      	add	r3, r1
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d907      	bls.n	800be6c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800be5c:	2301      	movs	r3, #1
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	e004      	b.n	800be6c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800be62:	4b11      	ldr	r3, [pc, #68]	; (800bea8 <xTaskIncrementTick+0x174>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3301      	adds	r3, #1
 800be68:	4a0f      	ldr	r2, [pc, #60]	; (800bea8 <xTaskIncrementTick+0x174>)
 800be6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800be6c:	4b0f      	ldr	r3, [pc, #60]	; (800beac <xTaskIncrementTick+0x178>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d001      	beq.n	800be78 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800be74:	2301      	movs	r3, #1
 800be76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800be78:	697b      	ldr	r3, [r7, #20]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3718      	adds	r7, #24
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	200014bc 	.word	0x200014bc
 800be88:	20001498 	.word	0x20001498
 800be8c:	2000144c 	.word	0x2000144c
 800be90:	20001450 	.word	0x20001450
 800be94:	200014ac 	.word	0x200014ac
 800be98:	200014b4 	.word	0x200014b4
 800be9c:	2000149c 	.word	0x2000149c
 800bea0:	20001398 	.word	0x20001398
 800bea4:	20001394 	.word	0x20001394
 800bea8:	200014a4 	.word	0x200014a4
 800beac:	200014a8 	.word	0x200014a8

0800beb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800beb0:	b480      	push	{r7}
 800beb2:	b087      	sub	sp, #28
 800beb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800beb6:	4b26      	ldr	r3, [pc, #152]	; (800bf50 <vTaskSwitchContext+0xa0>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d003      	beq.n	800bec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bebe:	4b25      	ldr	r3, [pc, #148]	; (800bf54 <vTaskSwitchContext+0xa4>)
 800bec0:	2201      	movs	r2, #1
 800bec2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bec4:	e03f      	b.n	800bf46 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800bec6:	4b23      	ldr	r3, [pc, #140]	; (800bf54 <vTaskSwitchContext+0xa4>)
 800bec8:	2200      	movs	r2, #0
 800beca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800becc:	4b22      	ldr	r3, [pc, #136]	; (800bf58 <vTaskSwitchContext+0xa8>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	fab3 f383 	clz	r3, r3
 800bed8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800beda:	7afb      	ldrb	r3, [r7, #11]
 800bedc:	f1c3 031f 	rsb	r3, r3, #31
 800bee0:	617b      	str	r3, [r7, #20]
 800bee2:	491e      	ldr	r1, [pc, #120]	; (800bf5c <vTaskSwitchContext+0xac>)
 800bee4:	697a      	ldr	r2, [r7, #20]
 800bee6:	4613      	mov	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	440b      	add	r3, r1
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d10a      	bne.n	800bf0c <vTaskSwitchContext+0x5c>
	__asm volatile
 800bef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befa:	f383 8811 	msr	BASEPRI, r3
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	f3bf 8f4f 	dsb	sy
 800bf06:	607b      	str	r3, [r7, #4]
}
 800bf08:	bf00      	nop
 800bf0a:	e7fe      	b.n	800bf0a <vTaskSwitchContext+0x5a>
 800bf0c:	697a      	ldr	r2, [r7, #20]
 800bf0e:	4613      	mov	r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	4413      	add	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4a11      	ldr	r2, [pc, #68]	; (800bf5c <vTaskSwitchContext+0xac>)
 800bf18:	4413      	add	r3, r2
 800bf1a:	613b      	str	r3, [r7, #16]
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	605a      	str	r2, [r3, #4]
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	685a      	ldr	r2, [r3, #4]
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d104      	bne.n	800bf3c <vTaskSwitchContext+0x8c>
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	605a      	str	r2, [r3, #4]
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	4a07      	ldr	r2, [pc, #28]	; (800bf60 <vTaskSwitchContext+0xb0>)
 800bf44:	6013      	str	r3, [r2, #0]
}
 800bf46:	bf00      	nop
 800bf48:	371c      	adds	r7, #28
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bc80      	pop	{r7}
 800bf4e:	4770      	bx	lr
 800bf50:	200014bc 	.word	0x200014bc
 800bf54:	200014a8 	.word	0x200014a8
 800bf58:	2000149c 	.word	0x2000149c
 800bf5c:	20001398 	.word	0x20001398
 800bf60:	20001394 	.word	0x20001394

0800bf64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d10a      	bne.n	800bf8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf78:	f383 8811 	msr	BASEPRI, r3
 800bf7c:	f3bf 8f6f 	isb	sy
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	60fb      	str	r3, [r7, #12]
}
 800bf86:	bf00      	nop
 800bf88:	e7fe      	b.n	800bf88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf8a:	4b07      	ldr	r3, [pc, #28]	; (800bfa8 <vTaskPlaceOnEventList+0x44>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3318      	adds	r3, #24
 800bf90:	4619      	mov	r1, r3
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f7fe faf4 	bl	800a580 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf98:	2101      	movs	r1, #1
 800bf9a:	6838      	ldr	r0, [r7, #0]
 800bf9c:	f000 fbee 	bl	800c77c <prvAddCurrentTaskToDelayedList>
}
 800bfa0:	bf00      	nop
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	20001394 	.word	0x20001394

0800bfac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d10a      	bne.n	800bfd4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	617b      	str	r3, [r7, #20]
}
 800bfd0:	bf00      	nop
 800bfd2:	e7fe      	b.n	800bfd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfd4:	4b0a      	ldr	r3, [pc, #40]	; (800c000 <vTaskPlaceOnEventListRestricted+0x54>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3318      	adds	r3, #24
 800bfda:	4619      	mov	r1, r3
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f7fe faac 	bl	800a53a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d002      	beq.n	800bfee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bfe8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bfee:	6879      	ldr	r1, [r7, #4]
 800bff0:	68b8      	ldr	r0, [r7, #8]
 800bff2:	f000 fbc3 	bl	800c77c <prvAddCurrentTaskToDelayedList>
	}
 800bff6:	bf00      	nop
 800bff8:	3718      	adds	r7, #24
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	20001394 	.word	0x20001394

0800c004 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b086      	sub	sp, #24
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d10a      	bne.n	800c030 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01e:	f383 8811 	msr	BASEPRI, r3
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	60fb      	str	r3, [r7, #12]
}
 800c02c:	bf00      	nop
 800c02e:	e7fe      	b.n	800c02e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	3318      	adds	r3, #24
 800c034:	4618      	mov	r0, r3
 800c036:	f7fe fadb 	bl	800a5f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c03a:	4b1d      	ldr	r3, [pc, #116]	; (800c0b0 <xTaskRemoveFromEventList+0xac>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d11c      	bne.n	800c07c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	3304      	adds	r3, #4
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe fad2 	bl	800a5f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c050:	2201      	movs	r2, #1
 800c052:	409a      	lsls	r2, r3
 800c054:	4b17      	ldr	r3, [pc, #92]	; (800c0b4 <xTaskRemoveFromEventList+0xb0>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4313      	orrs	r3, r2
 800c05a:	4a16      	ldr	r2, [pc, #88]	; (800c0b4 <xTaskRemoveFromEventList+0xb0>)
 800c05c:	6013      	str	r3, [r2, #0]
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c062:	4613      	mov	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	4a13      	ldr	r2, [pc, #76]	; (800c0b8 <xTaskRemoveFromEventList+0xb4>)
 800c06c:	441a      	add	r2, r3
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	3304      	adds	r3, #4
 800c072:	4619      	mov	r1, r3
 800c074:	4610      	mov	r0, r2
 800c076:	f7fe fa60 	bl	800a53a <vListInsertEnd>
 800c07a:	e005      	b.n	800c088 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	3318      	adds	r3, #24
 800c080:	4619      	mov	r1, r3
 800c082:	480e      	ldr	r0, [pc, #56]	; (800c0bc <xTaskRemoveFromEventList+0xb8>)
 800c084:	f7fe fa59 	bl	800a53a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08c:	4b0c      	ldr	r3, [pc, #48]	; (800c0c0 <xTaskRemoveFromEventList+0xbc>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c092:	429a      	cmp	r2, r3
 800c094:	d905      	bls.n	800c0a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c096:	2301      	movs	r3, #1
 800c098:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c09a:	4b0a      	ldr	r3, [pc, #40]	; (800c0c4 <xTaskRemoveFromEventList+0xc0>)
 800c09c:	2201      	movs	r2, #1
 800c09e:	601a      	str	r2, [r3, #0]
 800c0a0:	e001      	b.n	800c0a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800c0a6:	697b      	ldr	r3, [r7, #20]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3718      	adds	r7, #24
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	200014bc 	.word	0x200014bc
 800c0b4:	2000149c 	.word	0x2000149c
 800c0b8:	20001398 	.word	0x20001398
 800c0bc:	20001454 	.word	0x20001454
 800c0c0:	20001394 	.word	0x20001394
 800c0c4:	200014a8 	.word	0x200014a8

0800c0c8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10a      	bne.n	800c0ec <vTaskSetTimeOutState+0x24>
	__asm volatile
 800c0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0da:	f383 8811 	msr	BASEPRI, r3
 800c0de:	f3bf 8f6f 	isb	sy
 800c0e2:	f3bf 8f4f 	dsb	sy
 800c0e6:	60fb      	str	r3, [r7, #12]
}
 800c0e8:	bf00      	nop
 800c0ea:	e7fe      	b.n	800c0ea <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c0ec:	f001 f826 	bl	800d13c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c0f0:	4b06      	ldr	r3, [pc, #24]	; (800c10c <vTaskSetTimeOutState+0x44>)
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c0f8:	4b05      	ldr	r3, [pc, #20]	; (800c110 <vTaskSetTimeOutState+0x48>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c100:	f001 f84c 	bl	800d19c <vPortExitCritical>
}
 800c104:	bf00      	nop
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	200014ac 	.word	0x200014ac
 800c110:	20001498 	.word	0x20001498

0800c114 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c11c:	4b06      	ldr	r3, [pc, #24]	; (800c138 <vTaskInternalSetTimeOutState+0x24>)
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c124:	4b05      	ldr	r3, [pc, #20]	; (800c13c <vTaskInternalSetTimeOutState+0x28>)
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	605a      	str	r2, [r3, #4]
}
 800c12c:	bf00      	nop
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	bc80      	pop	{r7}
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	200014ac 	.word	0x200014ac
 800c13c:	20001498 	.word	0x20001498

0800c140 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b088      	sub	sp, #32
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10a      	bne.n	800c166 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	613b      	str	r3, [r7, #16]
}
 800c162:	bf00      	nop
 800c164:	e7fe      	b.n	800c164 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d10a      	bne.n	800c182 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c170:	f383 8811 	msr	BASEPRI, r3
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	f3bf 8f4f 	dsb	sy
 800c17c:	60fb      	str	r3, [r7, #12]
}
 800c17e:	bf00      	nop
 800c180:	e7fe      	b.n	800c180 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c182:	f000 ffdb 	bl	800d13c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c186:	4b1d      	ldr	r3, [pc, #116]	; (800c1fc <xTaskCheckForTimeOut+0xbc>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	69ba      	ldr	r2, [r7, #24]
 800c192:	1ad3      	subs	r3, r2, r3
 800c194:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19e:	d102      	bne.n	800c1a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	61fb      	str	r3, [r7, #28]
 800c1a4:	e023      	b.n	800c1ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	4b15      	ldr	r3, [pc, #84]	; (800c200 <xTaskCheckForTimeOut+0xc0>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d007      	beq.n	800c1c2 <xTaskCheckForTimeOut+0x82>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	69ba      	ldr	r2, [r7, #24]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d302      	bcc.n	800c1c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	61fb      	str	r3, [r7, #28]
 800c1c0:	e015      	b.n	800c1ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	697a      	ldr	r2, [r7, #20]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d20b      	bcs.n	800c1e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	1ad2      	subs	r2, r2, r3
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff ff9b 	bl	800c114 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	61fb      	str	r3, [r7, #28]
 800c1e2:	e004      	b.n	800c1ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c1ee:	f000 ffd5 	bl	800d19c <vPortExitCritical>

	return xReturn;
 800c1f2:	69fb      	ldr	r3, [r7, #28]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3720      	adds	r7, #32
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	20001498 	.word	0x20001498
 800c200:	200014ac 	.word	0x200014ac

0800c204 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c204:	b480      	push	{r7}
 800c206:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c208:	4b03      	ldr	r3, [pc, #12]	; (800c218 <vTaskMissedYield+0x14>)
 800c20a:	2201      	movs	r2, #1
 800c20c:	601a      	str	r2, [r3, #0]
}
 800c20e:	bf00      	nop
 800c210:	46bd      	mov	sp, r7
 800c212:	bc80      	pop	{r7}
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	200014a8 	.word	0x200014a8

0800c21c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c224:	f000 f852 	bl	800c2cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c228:	4b06      	ldr	r3, [pc, #24]	; (800c244 <prvIdleTask+0x28>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d9f9      	bls.n	800c224 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c230:	4b05      	ldr	r3, [pc, #20]	; (800c248 <prvIdleTask+0x2c>)
 800c232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c236:	601a      	str	r2, [r3, #0]
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c240:	e7f0      	b.n	800c224 <prvIdleTask+0x8>
 800c242:	bf00      	nop
 800c244:	20001398 	.word	0x20001398
 800c248:	e000ed04 	.word	0xe000ed04

0800c24c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c252:	2300      	movs	r3, #0
 800c254:	607b      	str	r3, [r7, #4]
 800c256:	e00c      	b.n	800c272 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	4613      	mov	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4a12      	ldr	r2, [pc, #72]	; (800c2ac <prvInitialiseTaskLists+0x60>)
 800c264:	4413      	add	r3, r2
 800c266:	4618      	mov	r0, r3
 800c268:	f7fe f93c 	bl	800a4e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3301      	adds	r3, #1
 800c270:	607b      	str	r3, [r7, #4]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b06      	cmp	r3, #6
 800c276:	d9ef      	bls.n	800c258 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c278:	480d      	ldr	r0, [pc, #52]	; (800c2b0 <prvInitialiseTaskLists+0x64>)
 800c27a:	f7fe f933 	bl	800a4e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c27e:	480d      	ldr	r0, [pc, #52]	; (800c2b4 <prvInitialiseTaskLists+0x68>)
 800c280:	f7fe f930 	bl	800a4e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c284:	480c      	ldr	r0, [pc, #48]	; (800c2b8 <prvInitialiseTaskLists+0x6c>)
 800c286:	f7fe f92d 	bl	800a4e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c28a:	480c      	ldr	r0, [pc, #48]	; (800c2bc <prvInitialiseTaskLists+0x70>)
 800c28c:	f7fe f92a 	bl	800a4e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c290:	480b      	ldr	r0, [pc, #44]	; (800c2c0 <prvInitialiseTaskLists+0x74>)
 800c292:	f7fe f927 	bl	800a4e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c296:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <prvInitialiseTaskLists+0x78>)
 800c298:	4a05      	ldr	r2, [pc, #20]	; (800c2b0 <prvInitialiseTaskLists+0x64>)
 800c29a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c29c:	4b0a      	ldr	r3, [pc, #40]	; (800c2c8 <prvInitialiseTaskLists+0x7c>)
 800c29e:	4a05      	ldr	r2, [pc, #20]	; (800c2b4 <prvInitialiseTaskLists+0x68>)
 800c2a0:	601a      	str	r2, [r3, #0]
}
 800c2a2:	bf00      	nop
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	20001398 	.word	0x20001398
 800c2b0:	20001424 	.word	0x20001424
 800c2b4:	20001438 	.word	0x20001438
 800c2b8:	20001454 	.word	0x20001454
 800c2bc:	20001468 	.word	0x20001468
 800c2c0:	20001480 	.word	0x20001480
 800c2c4:	2000144c 	.word	0x2000144c
 800c2c8:	20001450 	.word	0x20001450

0800c2cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2d2:	e019      	b.n	800c308 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c2d4:	f000 ff32 	bl	800d13c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c2d8:	4b10      	ldr	r3, [pc, #64]	; (800c31c <prvCheckTasksWaitingTermination+0x50>)
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fe f983 	bl	800a5f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c2ea:	4b0d      	ldr	r3, [pc, #52]	; (800c320 <prvCheckTasksWaitingTermination+0x54>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	4a0b      	ldr	r2, [pc, #44]	; (800c320 <prvCheckTasksWaitingTermination+0x54>)
 800c2f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c2f4:	4b0b      	ldr	r3, [pc, #44]	; (800c324 <prvCheckTasksWaitingTermination+0x58>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	4a0a      	ldr	r2, [pc, #40]	; (800c324 <prvCheckTasksWaitingTermination+0x58>)
 800c2fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c2fe:	f000 ff4d 	bl	800d19c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 f810 	bl	800c328 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c308:	4b06      	ldr	r3, [pc, #24]	; (800c324 <prvCheckTasksWaitingTermination+0x58>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1e1      	bne.n	800c2d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c310:	bf00      	nop
 800c312:	bf00      	nop
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	20001468 	.word	0x20001468
 800c320:	20001494 	.word	0x20001494
 800c324:	2000147c 	.word	0x2000147c

0800c328 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c336:	2b00      	cmp	r3, #0
 800c338:	d108      	bne.n	800c34c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c33e:	4618      	mov	r0, r3
 800c340:	f001 f8c0 	bl	800d4c4 <vPortFree>
				vPortFree( pxTCB );
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f001 f8bd 	bl	800d4c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c34a:	e018      	b.n	800c37e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c352:	2b01      	cmp	r3, #1
 800c354:	d103      	bne.n	800c35e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f001 f8b4 	bl	800d4c4 <vPortFree>
	}
 800c35c:	e00f      	b.n	800c37e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c364:	2b02      	cmp	r3, #2
 800c366:	d00a      	beq.n	800c37e <prvDeleteTCB+0x56>
	__asm volatile
 800c368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36c:	f383 8811 	msr	BASEPRI, r3
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	60fb      	str	r3, [r7, #12]
}
 800c37a:	bf00      	nop
 800c37c:	e7fe      	b.n	800c37c <prvDeleteTCB+0x54>
	}
 800c37e:	bf00      	nop
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
	...

0800c388 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c38e:	4b0e      	ldr	r3, [pc, #56]	; (800c3c8 <prvResetNextTaskUnblockTime+0x40>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d101      	bne.n	800c39c <prvResetNextTaskUnblockTime+0x14>
 800c398:	2301      	movs	r3, #1
 800c39a:	e000      	b.n	800c39e <prvResetNextTaskUnblockTime+0x16>
 800c39c:	2300      	movs	r3, #0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d004      	beq.n	800c3ac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c3a2:	4b0a      	ldr	r3, [pc, #40]	; (800c3cc <prvResetNextTaskUnblockTime+0x44>)
 800c3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c3aa:	e008      	b.n	800c3be <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c3ac:	4b06      	ldr	r3, [pc, #24]	; (800c3c8 <prvResetNextTaskUnblockTime+0x40>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	4a04      	ldr	r2, [pc, #16]	; (800c3cc <prvResetNextTaskUnblockTime+0x44>)
 800c3bc:	6013      	str	r3, [r2, #0]
}
 800c3be:	bf00      	nop
 800c3c0:	370c      	adds	r7, #12
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bc80      	pop	{r7}
 800c3c6:	4770      	bx	lr
 800c3c8:	2000144c 	.word	0x2000144c
 800c3cc:	200014b4 	.word	0x200014b4

0800c3d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c3d6:	4b04      	ldr	r3, [pc, #16]	; (800c3e8 <xTaskGetCurrentTaskHandle+0x18>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c3dc:	687b      	ldr	r3, [r7, #4]
	}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	370c      	adds	r7, #12
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bc80      	pop	{r7}
 800c3e6:	4770      	bx	lr
 800c3e8:	20001394 	.word	0x20001394

0800c3ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c3f2:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <xTaskGetSchedulerState+0x34>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d102      	bne.n	800c400 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	607b      	str	r3, [r7, #4]
 800c3fe:	e008      	b.n	800c412 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c400:	4b08      	ldr	r3, [pc, #32]	; (800c424 <xTaskGetSchedulerState+0x38>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d102      	bne.n	800c40e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c408:	2302      	movs	r3, #2
 800c40a:	607b      	str	r3, [r7, #4]
 800c40c:	e001      	b.n	800c412 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c40e:	2300      	movs	r3, #0
 800c410:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c412:	687b      	ldr	r3, [r7, #4]
	}
 800c414:	4618      	mov	r0, r3
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	bc80      	pop	{r7}
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	200014a0 	.word	0x200014a0
 800c424:	200014bc 	.word	0x200014bc

0800c428 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c434:	2300      	movs	r3, #0
 800c436:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d06e      	beq.n	800c51c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c43e:	4b3a      	ldr	r3, [pc, #232]	; (800c528 <xTaskPriorityDisinherit+0x100>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	693a      	ldr	r2, [r7, #16]
 800c444:	429a      	cmp	r2, r3
 800c446:	d00a      	beq.n	800c45e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	60fb      	str	r3, [r7, #12]
}
 800c45a:	bf00      	nop
 800c45c:	e7fe      	b.n	800c45c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10a      	bne.n	800c47c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	60bb      	str	r3, [r7, #8]
}
 800c478:	bf00      	nop
 800c47a:	e7fe      	b.n	800c47a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c480:	1e5a      	subs	r2, r3, #1
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c48e:	429a      	cmp	r2, r3
 800c490:	d044      	beq.n	800c51c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c496:	2b00      	cmp	r3, #0
 800c498:	d140      	bne.n	800c51c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	3304      	adds	r3, #4
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7fe f8a6 	bl	800a5f0 <uxListRemove>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d115      	bne.n	800c4d6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ae:	491f      	ldr	r1, [pc, #124]	; (800c52c <xTaskPriorityDisinherit+0x104>)
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	4413      	add	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	440b      	add	r3, r1
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10a      	bne.n	800c4d6 <xTaskPriorityDisinherit+0xae>
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ca:	43da      	mvns	r2, r3
 800c4cc:	4b18      	ldr	r3, [pc, #96]	; (800c530 <xTaskPriorityDisinherit+0x108>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	4a17      	ldr	r2, [pc, #92]	; (800c530 <xTaskPriorityDisinherit+0x108>)
 800c4d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e2:	f1c3 0207 	rsb	r2, r3, #7
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	409a      	lsls	r2, r3
 800c4f2:	4b0f      	ldr	r3, [pc, #60]	; (800c530 <xTaskPriorityDisinherit+0x108>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	4a0d      	ldr	r2, [pc, #52]	; (800c530 <xTaskPriorityDisinherit+0x108>)
 800c4fa:	6013      	str	r3, [r2, #0]
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c500:	4613      	mov	r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4413      	add	r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	4a08      	ldr	r2, [pc, #32]	; (800c52c <xTaskPriorityDisinherit+0x104>)
 800c50a:	441a      	add	r2, r3
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	3304      	adds	r3, #4
 800c510:	4619      	mov	r1, r3
 800c512:	4610      	mov	r0, r2
 800c514:	f7fe f811 	bl	800a53a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c518:	2301      	movs	r3, #1
 800c51a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c51c:	697b      	ldr	r3, [r7, #20]
	}
 800c51e:	4618      	mov	r0, r3
 800c520:	3718      	adds	r7, #24
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	20001394 	.word	0x20001394
 800c52c:	20001398 	.word	0x20001398
 800c530:	2000149c 	.word	0x2000149c

0800c534 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c534:	b580      	push	{r7, lr}
 800c536:	b086      	sub	sp, #24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c542:	f000 fdfb 	bl	800d13c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c546:	4b26      	ldr	r3, [pc, #152]	; (800c5e0 <xTaskNotifyWait+0xac>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	2b02      	cmp	r3, #2
 800c552:	d01a      	beq.n	800c58a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c554:	4b22      	ldr	r3, [pc, #136]	; (800c5e0 <xTaskNotifyWait+0xac>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	43d2      	mvns	r2, r2
 800c55e:	400a      	ands	r2, r1
 800c560:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c562:	4b1f      	ldr	r3, [pc, #124]	; (800c5e0 <xTaskNotifyWait+0xac>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00b      	beq.n	800c58a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c572:	2101      	movs	r1, #1
 800c574:	6838      	ldr	r0, [r7, #0]
 800c576:	f000 f901 	bl	800c77c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c57a:	4b1a      	ldr	r3, [pc, #104]	; (800c5e4 <xTaskNotifyWait+0xb0>)
 800c57c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c580:	601a      	str	r2, [r3, #0]
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c58a:	f000 fe07 	bl	800d19c <vPortExitCritical>

		taskENTER_CRITICAL();
 800c58e:	f000 fdd5 	bl	800d13c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d004      	beq.n	800c5a2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c598:	4b11      	ldr	r3, [pc, #68]	; (800c5e0 <xTaskNotifyWait+0xac>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c5a2:	4b0f      	ldr	r3, [pc, #60]	; (800c5e0 <xTaskNotifyWait+0xac>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	d002      	beq.n	800c5b6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	617b      	str	r3, [r7, #20]
 800c5b4:	e008      	b.n	800c5c8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c5b6:	4b0a      	ldr	r3, [pc, #40]	; (800c5e0 <xTaskNotifyWait+0xac>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	43d2      	mvns	r2, r2
 800c5c0:	400a      	ands	r2, r1
 800c5c2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c5c8:	4b05      	ldr	r3, [pc, #20]	; (800c5e0 <xTaskNotifyWait+0xac>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800c5d2:	f000 fde3 	bl	800d19c <vPortExitCritical>

		return xReturn;
 800c5d6:	697b      	ldr	r3, [r7, #20]
	}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3718      	adds	r7, #24
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20001394 	.word	0x20001394
 800c5e4:	e000ed04 	.word	0xe000ed04

0800c5e8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b08a      	sub	sp, #40	; 0x28
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	603b      	str	r3, [r7, #0]
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10a      	bne.n	800c618 <xTaskGenericNotify+0x30>
	__asm volatile
 800c602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	61bb      	str	r3, [r7, #24]
}
 800c614:	bf00      	nop
 800c616:	e7fe      	b.n	800c616 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c61c:	f000 fd8e 	bl	800d13c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d003      	beq.n	800c62e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c626:	6a3b      	ldr	r3, [r7, #32]
 800c628:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c62e:	6a3b      	ldr	r3, [r7, #32]
 800c630:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c634:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c636:	6a3b      	ldr	r3, [r7, #32]
 800c638:	2202      	movs	r2, #2
 800c63a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800c63e:	79fb      	ldrb	r3, [r7, #7]
 800c640:	2b04      	cmp	r3, #4
 800c642:	d828      	bhi.n	800c696 <xTaskGenericNotify+0xae>
 800c644:	a201      	add	r2, pc, #4	; (adr r2, 800c64c <xTaskGenericNotify+0x64>)
 800c646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c64a:	bf00      	nop
 800c64c:	0800c697 	.word	0x0800c697
 800c650:	0800c661 	.word	0x0800c661
 800c654:	0800c66f 	.word	0x0800c66f
 800c658:	0800c67b 	.word	0x0800c67b
 800c65c:	0800c683 	.word	0x0800c683
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c660:	6a3b      	ldr	r3, [r7, #32]
 800c662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	431a      	orrs	r2, r3
 800c668:	6a3b      	ldr	r3, [r7, #32]
 800c66a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c66c:	e013      	b.n	800c696 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c66e:	6a3b      	ldr	r3, [r7, #32]
 800c670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c672:	1c5a      	adds	r2, r3, #1
 800c674:	6a3b      	ldr	r3, [r7, #32]
 800c676:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c678:	e00d      	b.n	800c696 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c67a:	6a3b      	ldr	r3, [r7, #32]
 800c67c:	68ba      	ldr	r2, [r7, #8]
 800c67e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c680:	e009      	b.n	800c696 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c682:	7ffb      	ldrb	r3, [r7, #31]
 800c684:	2b02      	cmp	r3, #2
 800c686:	d003      	beq.n	800c690 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c688:	6a3b      	ldr	r3, [r7, #32]
 800c68a:	68ba      	ldr	r2, [r7, #8]
 800c68c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c68e:	e001      	b.n	800c694 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 800c690:	2300      	movs	r3, #0
 800c692:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c694:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c696:	7ffb      	ldrb	r3, [r7, #31]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d139      	bne.n	800c710 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c69c:	6a3b      	ldr	r3, [r7, #32]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7fd ffa5 	bl	800a5f0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c6a6:	6a3b      	ldr	r3, [r7, #32]
 800c6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	409a      	lsls	r2, r3
 800c6ae:	4b1c      	ldr	r3, [pc, #112]	; (800c720 <xTaskGenericNotify+0x138>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	4a1a      	ldr	r2, [pc, #104]	; (800c720 <xTaskGenericNotify+0x138>)
 800c6b6:	6013      	str	r3, [r2, #0]
 800c6b8:	6a3b      	ldr	r3, [r7, #32]
 800c6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6bc:	4613      	mov	r3, r2
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	4413      	add	r3, r2
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	4a17      	ldr	r2, [pc, #92]	; (800c724 <xTaskGenericNotify+0x13c>)
 800c6c6:	441a      	add	r2, r3
 800c6c8:	6a3b      	ldr	r3, [r7, #32]
 800c6ca:	3304      	adds	r3, #4
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	4610      	mov	r0, r2
 800c6d0:	f7fd ff33 	bl	800a53a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00a      	beq.n	800c6f2 <xTaskGenericNotify+0x10a>
	__asm volatile
 800c6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e0:	f383 8811 	msr	BASEPRI, r3
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	617b      	str	r3, [r7, #20]
}
 800c6ee:	bf00      	nop
 800c6f0:	e7fe      	b.n	800c6f0 <xTaskGenericNotify+0x108>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6f6:	4b0c      	ldr	r3, [pc, #48]	; (800c728 <xTaskGenericNotify+0x140>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d907      	bls.n	800c710 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c700:	4b0a      	ldr	r3, [pc, #40]	; (800c72c <xTaskGenericNotify+0x144>)
 800c702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c706:	601a      	str	r2, [r3, #0]
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c710:	f000 fd44 	bl	800d19c <vPortExitCritical>

		return xReturn;
 800c714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c716:	4618      	mov	r0, r3
 800c718:	3728      	adds	r7, #40	; 0x28
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	2000149c 	.word	0x2000149c
 800c724:	20001398 	.word	0x20001398
 800c728:	20001394 	.word	0x20001394
 800c72c:	e000ed04 	.word	0xe000ed04

0800c730 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d102      	bne.n	800c744 <xTaskNotifyStateClear+0x14>
 800c73e:	4b0e      	ldr	r3, [pc, #56]	; (800c778 <xTaskNotifyStateClear+0x48>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	e000      	b.n	800c746 <xTaskNotifyStateClear+0x16>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800c748:	f000 fcf8 	bl	800d13c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c752:	b2db      	uxtb	r3, r3
 800c754:	2b02      	cmp	r3, #2
 800c756:	d106      	bne.n	800c766 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				xReturn = pdPASS;
 800c760:	2301      	movs	r3, #1
 800c762:	60fb      	str	r3, [r7, #12]
 800c764:	e001      	b.n	800c76a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800c766:	2300      	movs	r3, #0
 800c768:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800c76a:	f000 fd17 	bl	800d19c <vPortExitCritical>

		return xReturn;
 800c76e:	68fb      	ldr	r3, [r7, #12]
	}
 800c770:	4618      	mov	r0, r3
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	20001394 	.word	0x20001394

0800c77c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c786:	4b29      	ldr	r3, [pc, #164]	; (800c82c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c78c:	4b28      	ldr	r3, [pc, #160]	; (800c830 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	3304      	adds	r3, #4
 800c792:	4618      	mov	r0, r3
 800c794:	f7fd ff2c 	bl	800a5f0 <uxListRemove>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10b      	bne.n	800c7b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c79e:	4b24      	ldr	r3, [pc, #144]	; (800c830 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c7aa:	43da      	mvns	r2, r3
 800c7ac:	4b21      	ldr	r3, [pc, #132]	; (800c834 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	4a20      	ldr	r2, [pc, #128]	; (800c834 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c7b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7bc:	d10a      	bne.n	800c7d4 <prvAddCurrentTaskToDelayedList+0x58>
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d007      	beq.n	800c7d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7c4:	4b1a      	ldr	r3, [pc, #104]	; (800c830 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	481a      	ldr	r0, [pc, #104]	; (800c838 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c7ce:	f7fd feb4 	bl	800a53a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c7d2:	e026      	b.n	800c822 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4413      	add	r3, r2
 800c7da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c7dc:	4b14      	ldr	r3, [pc, #80]	; (800c830 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c7e4:	68ba      	ldr	r2, [r7, #8]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d209      	bcs.n	800c800 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7ec:	4b13      	ldr	r3, [pc, #76]	; (800c83c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	4b0f      	ldr	r3, [pc, #60]	; (800c830 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3304      	adds	r3, #4
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	f7fd fec1 	bl	800a580 <vListInsert>
}
 800c7fe:	e010      	b.n	800c822 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c800:	4b0f      	ldr	r3, [pc, #60]	; (800c840 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	4b0a      	ldr	r3, [pc, #40]	; (800c830 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	3304      	adds	r3, #4
 800c80a:	4619      	mov	r1, r3
 800c80c:	4610      	mov	r0, r2
 800c80e:	f7fd feb7 	bl	800a580 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c812:	4b0c      	ldr	r3, [pc, #48]	; (800c844 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d202      	bcs.n	800c822 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c81c:	4a09      	ldr	r2, [pc, #36]	; (800c844 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	6013      	str	r3, [r2, #0]
}
 800c822:	bf00      	nop
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	20001498 	.word	0x20001498
 800c830:	20001394 	.word	0x20001394
 800c834:	2000149c 	.word	0x2000149c
 800c838:	20001480 	.word	0x20001480
 800c83c:	20001450 	.word	0x20001450
 800c840:	2000144c 	.word	0x2000144c
 800c844:	200014b4 	.word	0x200014b4

0800c848 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08a      	sub	sp, #40	; 0x28
 800c84c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c84e:	2300      	movs	r3, #0
 800c850:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c852:	f000 fb41 	bl	800ced8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c856:	4b1c      	ldr	r3, [pc, #112]	; (800c8c8 <xTimerCreateTimerTask+0x80>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d021      	beq.n	800c8a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c862:	2300      	movs	r3, #0
 800c864:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c866:	1d3a      	adds	r2, r7, #4
 800c868:	f107 0108 	add.w	r1, r7, #8
 800c86c:	f107 030c 	add.w	r3, r7, #12
 800c870:	4618      	mov	r0, r3
 800c872:	f7f6 fecd 	bl	8003610 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c876:	6879      	ldr	r1, [r7, #4]
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	9202      	str	r2, [sp, #8]
 800c87e:	9301      	str	r3, [sp, #4]
 800c880:	2302      	movs	r3, #2
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	2300      	movs	r3, #0
 800c886:	460a      	mov	r2, r1
 800c888:	4910      	ldr	r1, [pc, #64]	; (800c8cc <xTimerCreateTimerTask+0x84>)
 800c88a:	4811      	ldr	r0, [pc, #68]	; (800c8d0 <xTimerCreateTimerTask+0x88>)
 800c88c:	f7fe ff5b 	bl	800b746 <xTaskCreateStatic>
 800c890:	4603      	mov	r3, r0
 800c892:	4a10      	ldr	r2, [pc, #64]	; (800c8d4 <xTimerCreateTimerTask+0x8c>)
 800c894:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c896:	4b0f      	ldr	r3, [pc, #60]	; (800c8d4 <xTimerCreateTimerTask+0x8c>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d001      	beq.n	800c8a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d10a      	bne.n	800c8be <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ac:	f383 8811 	msr	BASEPRI, r3
 800c8b0:	f3bf 8f6f 	isb	sy
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	613b      	str	r3, [r7, #16]
}
 800c8ba:	bf00      	nop
 800c8bc:	e7fe      	b.n	800c8bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c8be:	697b      	ldr	r3, [r7, #20]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3718      	adds	r7, #24
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	200014f0 	.word	0x200014f0
 800c8cc:	08011be8 	.word	0x08011be8
 800c8d0:	0800cb15 	.word	0x0800cb15
 800c8d4:	200014f4 	.word	0x200014f4

0800c8d8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b088      	sub	sp, #32
 800c8dc:	af02      	add	r7, sp, #8
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
 800c8e4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800c8e6:	202c      	movs	r0, #44	; 0x2c
 800c8e8:	f000 fd28 	bl	800d33c <pvPortMalloc>
 800c8ec:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00d      	beq.n	800c910 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	9301      	str	r3, [sp, #4]
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	9300      	str	r3, [sp, #0]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	68b9      	ldr	r1, [r7, #8]
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f000 f846 	bl	800c994 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800c910:	697b      	ldr	r3, [r7, #20]
	}
 800c912:	4618      	mov	r0, r3
 800c914:	3718      	adds	r7, #24
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b08a      	sub	sp, #40	; 0x28
 800c91e:	af02      	add	r7, sp, #8
 800c920:	60f8      	str	r0, [r7, #12]
 800c922:	60b9      	str	r1, [r7, #8]
 800c924:	607a      	str	r2, [r7, #4]
 800c926:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c928:	232c      	movs	r3, #44	; 0x2c
 800c92a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	2b2c      	cmp	r3, #44	; 0x2c
 800c930:	d00a      	beq.n	800c948 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c936:	f383 8811 	msr	BASEPRI, r3
 800c93a:	f3bf 8f6f 	isb	sy
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	61bb      	str	r3, [r7, #24]
}
 800c944:	bf00      	nop
 800c946:	e7fe      	b.n	800c946 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10a      	bne.n	800c964 <xTimerCreateStatic+0x4a>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	617b      	str	r3, [r7, #20]
}
 800c960:	bf00      	nop
 800c962:	e7fe      	b.n	800c962 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c966:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00d      	beq.n	800c98a <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	9301      	str	r3, [sp, #4]
 800c972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	68b9      	ldr	r1, [r7, #8]
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f000 f809 	bl	800c994 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	2201      	movs	r2, #1
 800c986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800c98a:	69fb      	ldr	r3, [r7, #28]
	}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3720      	adds	r7, #32
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b086      	sub	sp, #24
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]
 800c9a0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10a      	bne.n	800c9be <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ac:	f383 8811 	msr	BASEPRI, r3
 800c9b0:	f3bf 8f6f 	isb	sy
 800c9b4:	f3bf 8f4f 	dsb	sy
 800c9b8:	617b      	str	r3, [r7, #20]
}
 800c9ba:	bf00      	nop
 800c9bc:	e7fe      	b.n	800c9bc <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d015      	beq.n	800c9f0 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c9c4:	f000 fa88 	bl	800ced8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9dc:	683a      	ldr	r2, [r7, #0]
 800c9de:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e2:	6a3a      	ldr	r2, [r7, #32]
 800c9e4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e8:	3304      	adds	r3, #4
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7fd fd99 	bl	800a522 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c9f0:	bf00      	nop
 800c9f2:	3718      	adds	r7, #24
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b08a      	sub	sp, #40	; 0x28
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
 800ca04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca06:	2300      	movs	r3, #0
 800ca08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d10a      	bne.n	800ca26 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca14:	f383 8811 	msr	BASEPRI, r3
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	623b      	str	r3, [r7, #32]
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca26:	4b1a      	ldr	r3, [pc, #104]	; (800ca90 <xTimerGenericCommand+0x98>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d02a      	beq.n	800ca84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	2b05      	cmp	r3, #5
 800ca3e:	dc18      	bgt.n	800ca72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca40:	f7ff fcd4 	bl	800c3ec <xTaskGetSchedulerState>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d109      	bne.n	800ca5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca4a:	4b11      	ldr	r3, [pc, #68]	; (800ca90 <xTimerGenericCommand+0x98>)
 800ca4c:	6818      	ldr	r0, [r3, #0]
 800ca4e:	f107 0114 	add.w	r1, r7, #20
 800ca52:	2300      	movs	r3, #0
 800ca54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca56:	f7fd ff31 	bl	800a8bc <xQueueGenericSend>
 800ca5a:	6278      	str	r0, [r7, #36]	; 0x24
 800ca5c:	e012      	b.n	800ca84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca5e:	4b0c      	ldr	r3, [pc, #48]	; (800ca90 <xTimerGenericCommand+0x98>)
 800ca60:	6818      	ldr	r0, [r3, #0]
 800ca62:	f107 0114 	add.w	r1, r7, #20
 800ca66:	2300      	movs	r3, #0
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f7fd ff27 	bl	800a8bc <xQueueGenericSend>
 800ca6e:	6278      	str	r0, [r7, #36]	; 0x24
 800ca70:	e008      	b.n	800ca84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ca72:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <xTimerGenericCommand+0x98>)
 800ca74:	6818      	ldr	r0, [r3, #0]
 800ca76:	f107 0114 	add.w	r1, r7, #20
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	f7fe f81b 	bl	800aab8 <xQueueGenericSendFromISR>
 800ca82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3728      	adds	r7, #40	; 0x28
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	200014f0 	.word	0x200014f0

0800ca94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b088      	sub	sp, #32
 800ca98:	af02      	add	r7, sp, #8
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca9e:	4b1c      	ldr	r3, [pc, #112]	; (800cb10 <prvProcessExpiredTimer+0x7c>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	3304      	adds	r3, #4
 800caac:	4618      	mov	r0, r3
 800caae:	f7fd fd9f 	bl	800a5f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	69db      	ldr	r3, [r3, #28]
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d122      	bne.n	800cb00 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	699a      	ldr	r2, [r3, #24]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	18d1      	adds	r1, r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	683a      	ldr	r2, [r7, #0]
 800cac6:	6978      	ldr	r0, [r7, #20]
 800cac8:	f000 f8c8 	bl	800cc5c <prvInsertTimerInActiveList>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d016      	beq.n	800cb00 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cad2:	2300      	movs	r3, #0
 800cad4:	9300      	str	r3, [sp, #0]
 800cad6:	2300      	movs	r3, #0
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	2100      	movs	r1, #0
 800cadc:	6978      	ldr	r0, [r7, #20]
 800cade:	f7ff ff8b 	bl	800c9f8 <xTimerGenericCommand>
 800cae2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d10a      	bne.n	800cb00 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800caea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caee:	f383 8811 	msr	BASEPRI, r3
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	f3bf 8f4f 	dsb	sy
 800cafa:	60fb      	str	r3, [r7, #12]
}
 800cafc:	bf00      	nop
 800cafe:	e7fe      	b.n	800cafe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb04:	6978      	ldr	r0, [r7, #20]
 800cb06:	4798      	blx	r3
}
 800cb08:	bf00      	nop
 800cb0a:	3718      	adds	r7, #24
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	200014e8 	.word	0x200014e8

0800cb14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb1c:	f107 0308 	add.w	r3, r7, #8
 800cb20:	4618      	mov	r0, r3
 800cb22:	f000 f857 	bl	800cbd4 <prvGetNextExpireTime>
 800cb26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f000 f803 	bl	800cb38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb32:	f000 f8d5 	bl	800cce0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb36:	e7f1      	b.n	800cb1c <prvTimerTask+0x8>

0800cb38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cb42:	f7ff f82d 	bl	800bba0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb46:	f107 0308 	add.w	r3, r7, #8
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f000 f866 	bl	800cc1c <prvSampleTimeNow>
 800cb50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d130      	bne.n	800cbba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d10a      	bne.n	800cb74 <prvProcessTimerOrBlockTask+0x3c>
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d806      	bhi.n	800cb74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cb66:	f7ff f829 	bl	800bbbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cb6a:	68f9      	ldr	r1, [r7, #12]
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7ff ff91 	bl	800ca94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cb72:	e024      	b.n	800cbbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d008      	beq.n	800cb8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb7a:	4b13      	ldr	r3, [pc, #76]	; (800cbc8 <prvProcessTimerOrBlockTask+0x90>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	bf0c      	ite	eq
 800cb84:	2301      	moveq	r3, #1
 800cb86:	2300      	movne	r3, #0
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cb8c:	4b0f      	ldr	r3, [pc, #60]	; (800cbcc <prvProcessTimerOrBlockTask+0x94>)
 800cb8e:	6818      	ldr	r0, [r3, #0]
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	683a      	ldr	r2, [r7, #0]
 800cb98:	4619      	mov	r1, r3
 800cb9a:	f7fe fa3d 	bl	800b018 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cb9e:	f7ff f80d 	bl	800bbbc <xTaskResumeAll>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10a      	bne.n	800cbbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cba8:	4b09      	ldr	r3, [pc, #36]	; (800cbd0 <prvProcessTimerOrBlockTask+0x98>)
 800cbaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbae:	601a      	str	r2, [r3, #0]
 800cbb0:	f3bf 8f4f 	dsb	sy
 800cbb4:	f3bf 8f6f 	isb	sy
}
 800cbb8:	e001      	b.n	800cbbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cbba:	f7fe ffff 	bl	800bbbc <xTaskResumeAll>
}
 800cbbe:	bf00      	nop
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	200014ec 	.word	0x200014ec
 800cbcc:	200014f0 	.word	0x200014f0
 800cbd0:	e000ed04 	.word	0xe000ed04

0800cbd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cbdc:	4b0e      	ldr	r3, [pc, #56]	; (800cc18 <prvGetNextExpireTime+0x44>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	bf0c      	ite	eq
 800cbe6:	2301      	moveq	r3, #1
 800cbe8:	2300      	movne	r3, #0
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	461a      	mov	r2, r3
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d105      	bne.n	800cc06 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cbfa:	4b07      	ldr	r3, [pc, #28]	; (800cc18 <prvGetNextExpireTime+0x44>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	60fb      	str	r3, [r7, #12]
 800cc04:	e001      	b.n	800cc0a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc06:	2300      	movs	r3, #0
 800cc08:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3714      	adds	r7, #20
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bc80      	pop	{r7}
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	200014e8 	.word	0x200014e8

0800cc1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc24:	f7ff f866 	bl	800bcf4 <xTaskGetTickCount>
 800cc28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc2a:	4b0b      	ldr	r3, [pc, #44]	; (800cc58 <prvSampleTimeNow+0x3c>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d205      	bcs.n	800cc40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc34:	f000 f8ee 	bl	800ce14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	e002      	b.n	800cc46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cc46:	4a04      	ldr	r2, [pc, #16]	; (800cc58 <prvSampleTimeNow+0x3c>)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	200014f8 	.word	0x200014f8

0800cc5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b086      	sub	sp, #24
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	607a      	str	r2, [r7, #4]
 800cc68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	68ba      	ldr	r2, [r7, #8]
 800cc72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d812      	bhi.n	800cca8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	1ad2      	subs	r2, r2, r3
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d302      	bcc.n	800cc96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cc90:	2301      	movs	r3, #1
 800cc92:	617b      	str	r3, [r7, #20]
 800cc94:	e01b      	b.n	800ccce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cc96:	4b10      	ldr	r3, [pc, #64]	; (800ccd8 <prvInsertTimerInActiveList+0x7c>)
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	3304      	adds	r3, #4
 800cc9e:	4619      	mov	r1, r3
 800cca0:	4610      	mov	r0, r2
 800cca2:	f7fd fc6d 	bl	800a580 <vListInsert>
 800cca6:	e012      	b.n	800ccce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d206      	bcs.n	800ccbe <prvInsertTimerInActiveList+0x62>
 800ccb0:	68ba      	ldr	r2, [r7, #8]
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d302      	bcc.n	800ccbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	617b      	str	r3, [r7, #20]
 800ccbc:	e007      	b.n	800ccce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ccbe:	4b07      	ldr	r3, [pc, #28]	; (800ccdc <prvInsertTimerInActiveList+0x80>)
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	4610      	mov	r0, r2
 800ccca:	f7fd fc59 	bl	800a580 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ccce:	697b      	ldr	r3, [r7, #20]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3718      	adds	r7, #24
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	200014ec 	.word	0x200014ec
 800ccdc:	200014e8 	.word	0x200014e8

0800cce0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b08c      	sub	sp, #48	; 0x30
 800cce4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cce6:	e081      	b.n	800cdec <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	db7d      	blt.n	800cdea <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf4:	695b      	ldr	r3, [r3, #20]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d004      	beq.n	800cd04 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ccfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fd fc76 	bl	800a5f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd04:	1d3b      	adds	r3, r7, #4
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7ff ff88 	bl	800cc1c <prvSampleTimeNow>
 800cd0c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	2b09      	cmp	r3, #9
 800cd12:	d86b      	bhi.n	800cdec <prvProcessReceivedCommands+0x10c>
 800cd14:	a201      	add	r2, pc, #4	; (adr r2, 800cd1c <prvProcessReceivedCommands+0x3c>)
 800cd16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd1a:	bf00      	nop
 800cd1c:	0800cd45 	.word	0x0800cd45
 800cd20:	0800cd45 	.word	0x0800cd45
 800cd24:	0800cd45 	.word	0x0800cd45
 800cd28:	0800cded 	.word	0x0800cded
 800cd2c:	0800cda1 	.word	0x0800cda1
 800cd30:	0800cdd9 	.word	0x0800cdd9
 800cd34:	0800cd45 	.word	0x0800cd45
 800cd38:	0800cd45 	.word	0x0800cd45
 800cd3c:	0800cded 	.word	0x0800cded
 800cd40:	0800cda1 	.word	0x0800cda1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	699b      	ldr	r3, [r3, #24]
 800cd4a:	18d1      	adds	r1, r2, r3
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6a3a      	ldr	r2, [r7, #32]
 800cd50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd52:	f7ff ff83 	bl	800cc5c <prvInsertTimerInActiveList>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d047      	beq.n	800cdec <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd62:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd66:	69db      	ldr	r3, [r3, #28]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d13f      	bne.n	800cdec <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd70:	699b      	ldr	r3, [r3, #24]
 800cd72:	441a      	add	r2, r3
 800cd74:	2300      	movs	r3, #0
 800cd76:	9300      	str	r3, [sp, #0]
 800cd78:	2300      	movs	r3, #0
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd7e:	f7ff fe3b 	bl	800c9f8 <xTimerGenericCommand>
 800cd82:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d130      	bne.n	800cdec <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800cd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8e:	f383 8811 	msr	BASEPRI, r3
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	61bb      	str	r3, [r7, #24]
}
 800cd9c:	bf00      	nop
 800cd9e:	e7fe      	b.n	800cd9e <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda8:	699b      	ldr	r3, [r3, #24]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10a      	bne.n	800cdc4 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	617b      	str	r3, [r7, #20]
}
 800cdc0:	bf00      	nop
 800cdc2:	e7fe      	b.n	800cdc2 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc6:	699a      	ldr	r2, [r3, #24]
 800cdc8:	6a3b      	ldr	r3, [r7, #32]
 800cdca:	18d1      	adds	r1, r2, r3
 800cdcc:	6a3b      	ldr	r3, [r7, #32]
 800cdce:	6a3a      	ldr	r2, [r7, #32]
 800cdd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdd2:	f7ff ff43 	bl	800cc5c <prvInsertTimerInActiveList>
					break;
 800cdd6:	e009      	b.n	800cdec <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d104      	bne.n	800cdec <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800cde2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cde4:	f000 fb6e 	bl	800d4c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cde8:	e000      	b.n	800cdec <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cdea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cdec:	4b08      	ldr	r3, [pc, #32]	; (800ce10 <prvProcessReceivedCommands+0x130>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f107 0108 	add.w	r1, r7, #8
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fd fef6 	bl	800abe8 <xQueueReceive>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	f47f af72 	bne.w	800cce8 <prvProcessReceivedCommands+0x8>
	}
}
 800ce04:	bf00      	nop
 800ce06:	bf00      	nop
 800ce08:	3728      	adds	r7, #40	; 0x28
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	200014f0 	.word	0x200014f0

0800ce14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b088      	sub	sp, #32
 800ce18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce1a:	e045      	b.n	800cea8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce1c:	4b2c      	ldr	r3, [pc, #176]	; (800ced0 <prvSwitchTimerLists+0xbc>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce26:	4b2a      	ldr	r3, [pc, #168]	; (800ced0 <prvSwitchTimerLists+0xbc>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	3304      	adds	r3, #4
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7fd fbdb 	bl	800a5f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d12e      	bne.n	800cea8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	699b      	ldr	r3, [r3, #24]
 800ce4e:	693a      	ldr	r2, [r7, #16]
 800ce50:	4413      	add	r3, r2
 800ce52:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ce54:	68ba      	ldr	r2, [r7, #8]
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d90e      	bls.n	800ce7a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	68ba      	ldr	r2, [r7, #8]
 800ce60:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce68:	4b19      	ldr	r3, [pc, #100]	; (800ced0 <prvSwitchTimerLists+0xbc>)
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	3304      	adds	r3, #4
 800ce70:	4619      	mov	r1, r3
 800ce72:	4610      	mov	r0, r2
 800ce74:	f7fd fb84 	bl	800a580 <vListInsert>
 800ce78:	e016      	b.n	800cea8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	9300      	str	r3, [sp, #0]
 800ce7e:	2300      	movs	r3, #0
 800ce80:	693a      	ldr	r2, [r7, #16]
 800ce82:	2100      	movs	r1, #0
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff fdb7 	bl	800c9f8 <xTimerGenericCommand>
 800ce8a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10a      	bne.n	800cea8 <prvSwitchTimerLists+0x94>
	__asm volatile
 800ce92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	603b      	str	r3, [r7, #0]
}
 800cea4:	bf00      	nop
 800cea6:	e7fe      	b.n	800cea6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cea8:	4b09      	ldr	r3, [pc, #36]	; (800ced0 <prvSwitchTimerLists+0xbc>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1b4      	bne.n	800ce1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ceb2:	4b07      	ldr	r3, [pc, #28]	; (800ced0 <prvSwitchTimerLists+0xbc>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ceb8:	4b06      	ldr	r3, [pc, #24]	; (800ced4 <prvSwitchTimerLists+0xc0>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a04      	ldr	r2, [pc, #16]	; (800ced0 <prvSwitchTimerLists+0xbc>)
 800cebe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cec0:	4a04      	ldr	r2, [pc, #16]	; (800ced4 <prvSwitchTimerLists+0xc0>)
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	6013      	str	r3, [r2, #0]
}
 800cec6:	bf00      	nop
 800cec8:	3718      	adds	r7, #24
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	200014e8 	.word	0x200014e8
 800ced4:	200014ec 	.word	0x200014ec

0800ced8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cede:	f000 f92d 	bl	800d13c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cee2:	4b15      	ldr	r3, [pc, #84]	; (800cf38 <prvCheckForValidListAndQueue+0x60>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d120      	bne.n	800cf2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ceea:	4814      	ldr	r0, [pc, #80]	; (800cf3c <prvCheckForValidListAndQueue+0x64>)
 800ceec:	f7fd fafa 	bl	800a4e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cef0:	4813      	ldr	r0, [pc, #76]	; (800cf40 <prvCheckForValidListAndQueue+0x68>)
 800cef2:	f7fd faf7 	bl	800a4e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cef6:	4b13      	ldr	r3, [pc, #76]	; (800cf44 <prvCheckForValidListAndQueue+0x6c>)
 800cef8:	4a10      	ldr	r2, [pc, #64]	; (800cf3c <prvCheckForValidListAndQueue+0x64>)
 800cefa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cefc:	4b12      	ldr	r3, [pc, #72]	; (800cf48 <prvCheckForValidListAndQueue+0x70>)
 800cefe:	4a10      	ldr	r2, [pc, #64]	; (800cf40 <prvCheckForValidListAndQueue+0x68>)
 800cf00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cf02:	2300      	movs	r3, #0
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	4b11      	ldr	r3, [pc, #68]	; (800cf4c <prvCheckForValidListAndQueue+0x74>)
 800cf08:	4a11      	ldr	r2, [pc, #68]	; (800cf50 <prvCheckForValidListAndQueue+0x78>)
 800cf0a:	210c      	movs	r1, #12
 800cf0c:	200a      	movs	r0, #10
 800cf0e:	f7fd fc01 	bl	800a714 <xQueueGenericCreateStatic>
 800cf12:	4603      	mov	r3, r0
 800cf14:	4a08      	ldr	r2, [pc, #32]	; (800cf38 <prvCheckForValidListAndQueue+0x60>)
 800cf16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cf18:	4b07      	ldr	r3, [pc, #28]	; (800cf38 <prvCheckForValidListAndQueue+0x60>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d005      	beq.n	800cf2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cf20:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <prvCheckForValidListAndQueue+0x60>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	490b      	ldr	r1, [pc, #44]	; (800cf54 <prvCheckForValidListAndQueue+0x7c>)
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fe f84e 	bl	800afc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf2c:	f000 f936 	bl	800d19c <vPortExitCritical>
}
 800cf30:	bf00      	nop
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	200014f0 	.word	0x200014f0
 800cf3c:	200014c0 	.word	0x200014c0
 800cf40:	200014d4 	.word	0x200014d4
 800cf44:	200014e8 	.word	0x200014e8
 800cf48:	200014ec 	.word	0x200014ec
 800cf4c:	20001574 	.word	0x20001574
 800cf50:	200014fc 	.word	0x200014fc
 800cf54:	08011bf0 	.word	0x08011bf0

0800cf58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	3b04      	subs	r3, #4
 800cf68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cf70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3b04      	subs	r3, #4
 800cf76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	f023 0201 	bic.w	r2, r3, #1
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	3b04      	subs	r3, #4
 800cf86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf88:	4a08      	ldr	r2, [pc, #32]	; (800cfac <pxPortInitialiseStack+0x54>)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	3b14      	subs	r3, #20
 800cf92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	3b20      	subs	r3, #32
 800cf9e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3714      	adds	r7, #20
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bc80      	pop	{r7}
 800cfaa:	4770      	bx	lr
 800cfac:	0800cfb1 	.word	0x0800cfb1

0800cfb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b085      	sub	sp, #20
 800cfb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cfba:	4b12      	ldr	r3, [pc, #72]	; (800d004 <prvTaskExitError+0x54>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc2:	d00a      	beq.n	800cfda <prvTaskExitError+0x2a>
	__asm volatile
 800cfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc8:	f383 8811 	msr	BASEPRI, r3
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	60fb      	str	r3, [r7, #12]
}
 800cfd6:	bf00      	nop
 800cfd8:	e7fe      	b.n	800cfd8 <prvTaskExitError+0x28>
	__asm volatile
 800cfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	60bb      	str	r3, [r7, #8]
}
 800cfec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cfee:	bf00      	nop
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d0fc      	beq.n	800cff0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cff6:	bf00      	nop
 800cff8:	bf00      	nop
 800cffa:	3714      	adds	r7, #20
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bc80      	pop	{r7}
 800d000:	4770      	bx	lr
 800d002:	bf00      	nop
 800d004:	20000154 	.word	0x20000154
	...

0800d010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d010:	4b07      	ldr	r3, [pc, #28]	; (800d030 <pxCurrentTCBConst2>)
 800d012:	6819      	ldr	r1, [r3, #0]
 800d014:	6808      	ldr	r0, [r1, #0]
 800d016:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d01a:	f380 8809 	msr	PSP, r0
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f04f 0000 	mov.w	r0, #0
 800d026:	f380 8811 	msr	BASEPRI, r0
 800d02a:	f04e 0e0d 	orr.w	lr, lr, #13
 800d02e:	4770      	bx	lr

0800d030 <pxCurrentTCBConst2>:
 800d030:	20001394 	.word	0x20001394
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d034:	bf00      	nop
 800d036:	bf00      	nop

0800d038 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800d038:	4806      	ldr	r0, [pc, #24]	; (800d054 <prvPortStartFirstTask+0x1c>)
 800d03a:	6800      	ldr	r0, [r0, #0]
 800d03c:	6800      	ldr	r0, [r0, #0]
 800d03e:	f380 8808 	msr	MSP, r0
 800d042:	b662      	cpsie	i
 800d044:	b661      	cpsie	f
 800d046:	f3bf 8f4f 	dsb	sy
 800d04a:	f3bf 8f6f 	isb	sy
 800d04e:	df00      	svc	0
 800d050:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d052:	bf00      	nop
 800d054:	e000ed08 	.word	0xe000ed08

0800d058 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d05e:	4b32      	ldr	r3, [pc, #200]	; (800d128 <xPortStartScheduler+0xd0>)
 800d060:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	b2db      	uxtb	r3, r3
 800d068:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	22ff      	movs	r2, #255	; 0xff
 800d06e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	b2db      	uxtb	r3, r3
 800d076:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d078:	78fb      	ldrb	r3, [r7, #3]
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d080:	b2da      	uxtb	r2, r3
 800d082:	4b2a      	ldr	r3, [pc, #168]	; (800d12c <xPortStartScheduler+0xd4>)
 800d084:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d086:	4b2a      	ldr	r3, [pc, #168]	; (800d130 <xPortStartScheduler+0xd8>)
 800d088:	2207      	movs	r2, #7
 800d08a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d08c:	e009      	b.n	800d0a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d08e:	4b28      	ldr	r3, [pc, #160]	; (800d130 <xPortStartScheduler+0xd8>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	3b01      	subs	r3, #1
 800d094:	4a26      	ldr	r2, [pc, #152]	; (800d130 <xPortStartScheduler+0xd8>)
 800d096:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d098:	78fb      	ldrb	r3, [r7, #3]
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	005b      	lsls	r3, r3, #1
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0a2:	78fb      	ldrb	r3, [r7, #3]
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0aa:	2b80      	cmp	r3, #128	; 0x80
 800d0ac:	d0ef      	beq.n	800d08e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d0ae:	4b20      	ldr	r3, [pc, #128]	; (800d130 <xPortStartScheduler+0xd8>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f1c3 0307 	rsb	r3, r3, #7
 800d0b6:	2b04      	cmp	r3, #4
 800d0b8:	d00a      	beq.n	800d0d0 <xPortStartScheduler+0x78>
	__asm volatile
 800d0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	60bb      	str	r3, [r7, #8]
}
 800d0cc:	bf00      	nop
 800d0ce:	e7fe      	b.n	800d0ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d0d0:	4b17      	ldr	r3, [pc, #92]	; (800d130 <xPortStartScheduler+0xd8>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	021b      	lsls	r3, r3, #8
 800d0d6:	4a16      	ldr	r2, [pc, #88]	; (800d130 <xPortStartScheduler+0xd8>)
 800d0d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d0da:	4b15      	ldr	r3, [pc, #84]	; (800d130 <xPortStartScheduler+0xd8>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d0e2:	4a13      	ldr	r2, [pc, #76]	; (800d130 <xPortStartScheduler+0xd8>)
 800d0e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	b2da      	uxtb	r2, r3
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d0ee:	4b11      	ldr	r3, [pc, #68]	; (800d134 <xPortStartScheduler+0xdc>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a10      	ldr	r2, [pc, #64]	; (800d134 <xPortStartScheduler+0xdc>)
 800d0f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d0f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d0fa:	4b0e      	ldr	r3, [pc, #56]	; (800d134 <xPortStartScheduler+0xdc>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a0d      	ldr	r2, [pc, #52]	; (800d134 <xPortStartScheduler+0xdc>)
 800d100:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d104:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d106:	f000 f8b9 	bl	800d27c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d10a:	4b0b      	ldr	r3, [pc, #44]	; (800d138 <xPortStartScheduler+0xe0>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d110:	f7ff ff92 	bl	800d038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d114:	f7fe fecc 	bl	800beb0 <vTaskSwitchContext>
	prvTaskExitError();
 800d118:	f7ff ff4a 	bl	800cfb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3710      	adds	r7, #16
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	e000e400 	.word	0xe000e400
 800d12c:	200015bc 	.word	0x200015bc
 800d130:	200015c0 	.word	0x200015c0
 800d134:	e000ed20 	.word	0xe000ed20
 800d138:	20000154 	.word	0x20000154

0800d13c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
	__asm volatile
 800d142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d146:	f383 8811 	msr	BASEPRI, r3
 800d14a:	f3bf 8f6f 	isb	sy
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	607b      	str	r3, [r7, #4]
}
 800d154:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d156:	4b0f      	ldr	r3, [pc, #60]	; (800d194 <vPortEnterCritical+0x58>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	3301      	adds	r3, #1
 800d15c:	4a0d      	ldr	r2, [pc, #52]	; (800d194 <vPortEnterCritical+0x58>)
 800d15e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d160:	4b0c      	ldr	r3, [pc, #48]	; (800d194 <vPortEnterCritical+0x58>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d10f      	bne.n	800d188 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d168:	4b0b      	ldr	r3, [pc, #44]	; (800d198 <vPortEnterCritical+0x5c>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00a      	beq.n	800d188 <vPortEnterCritical+0x4c>
	__asm volatile
 800d172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d176:	f383 8811 	msr	BASEPRI, r3
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	603b      	str	r3, [r7, #0]
}
 800d184:	bf00      	nop
 800d186:	e7fe      	b.n	800d186 <vPortEnterCritical+0x4a>
	}
}
 800d188:	bf00      	nop
 800d18a:	370c      	adds	r7, #12
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bc80      	pop	{r7}
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	20000154 	.word	0x20000154
 800d198:	e000ed04 	.word	0xe000ed04

0800d19c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d1a2:	4b11      	ldr	r3, [pc, #68]	; (800d1e8 <vPortExitCritical+0x4c>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10a      	bne.n	800d1c0 <vPortExitCritical+0x24>
	__asm volatile
 800d1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	607b      	str	r3, [r7, #4]
}
 800d1bc:	bf00      	nop
 800d1be:	e7fe      	b.n	800d1be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d1c0:	4b09      	ldr	r3, [pc, #36]	; (800d1e8 <vPortExitCritical+0x4c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	4a08      	ldr	r2, [pc, #32]	; (800d1e8 <vPortExitCritical+0x4c>)
 800d1c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d1ca:	4b07      	ldr	r3, [pc, #28]	; (800d1e8 <vPortExitCritical+0x4c>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d105      	bne.n	800d1de <vPortExitCritical+0x42>
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	f383 8811 	msr	BASEPRI, r3
}
 800d1dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d1de:	bf00      	nop
 800d1e0:	370c      	adds	r7, #12
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bc80      	pop	{r7}
 800d1e6:	4770      	bx	lr
 800d1e8:	20000154 	.word	0x20000154
 800d1ec:	00000000 	.word	0x00000000

0800d1f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d1f0:	f3ef 8009 	mrs	r0, PSP
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	4b0d      	ldr	r3, [pc, #52]	; (800d230 <pxCurrentTCBConst>)
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d200:	6010      	str	r0, [r2, #0]
 800d202:	e92d 4008 	stmdb	sp!, {r3, lr}
 800d206:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d20a:	f380 8811 	msr	BASEPRI, r0
 800d20e:	f7fe fe4f 	bl	800beb0 <vTaskSwitchContext>
 800d212:	f04f 0000 	mov.w	r0, #0
 800d216:	f380 8811 	msr	BASEPRI, r0
 800d21a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d21e:	6819      	ldr	r1, [r3, #0]
 800d220:	6808      	ldr	r0, [r1, #0]
 800d222:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d226:	f380 8809 	msr	PSP, r0
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	4770      	bx	lr

0800d230 <pxCurrentTCBConst>:
 800d230:	20001394 	.word	0x20001394
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d234:	bf00      	nop
 800d236:	bf00      	nop

0800d238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
	__asm volatile
 800d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
 800d24e:	607b      	str	r3, [r7, #4]
}
 800d250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d252:	f7fe fd6f 	bl	800bd34 <xTaskIncrementTick>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d003      	beq.n	800d264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d25c:	4b06      	ldr	r3, [pc, #24]	; (800d278 <SysTick_Handler+0x40>)
 800d25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d262:	601a      	str	r2, [r3, #0]
 800d264:	2300      	movs	r3, #0
 800d266:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	f383 8811 	msr	BASEPRI, r3
}
 800d26e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d270:	bf00      	nop
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	e000ed04 	.word	0xe000ed04

0800d27c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d27c:	b480      	push	{r7}
 800d27e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d280:	4b0a      	ldr	r3, [pc, #40]	; (800d2ac <vPortSetupTimerInterrupt+0x30>)
 800d282:	2200      	movs	r2, #0
 800d284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d286:	4b0a      	ldr	r3, [pc, #40]	; (800d2b0 <vPortSetupTimerInterrupt+0x34>)
 800d288:	2200      	movs	r2, #0
 800d28a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d28c:	4b09      	ldr	r3, [pc, #36]	; (800d2b4 <vPortSetupTimerInterrupt+0x38>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a09      	ldr	r2, [pc, #36]	; (800d2b8 <vPortSetupTimerInterrupt+0x3c>)
 800d292:	fba2 2303 	umull	r2, r3, r2, r3
 800d296:	099b      	lsrs	r3, r3, #6
 800d298:	4a08      	ldr	r2, [pc, #32]	; (800d2bc <vPortSetupTimerInterrupt+0x40>)
 800d29a:	3b01      	subs	r3, #1
 800d29c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d29e:	4b03      	ldr	r3, [pc, #12]	; (800d2ac <vPortSetupTimerInterrupt+0x30>)
 800d2a0:	2207      	movs	r2, #7
 800d2a2:	601a      	str	r2, [r3, #0]
}
 800d2a4:	bf00      	nop
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bc80      	pop	{r7}
 800d2aa:	4770      	bx	lr
 800d2ac:	e000e010 	.word	0xe000e010
 800d2b0:	e000e018 	.word	0xe000e018
 800d2b4:	20000148 	.word	0x20000148
 800d2b8:	10624dd3 	.word	0x10624dd3
 800d2bc:	e000e014 	.word	0xe000e014

0800d2c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b085      	sub	sp, #20
 800d2c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d2c6:	f3ef 8305 	mrs	r3, IPSR
 800d2ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2b0f      	cmp	r3, #15
 800d2d0:	d914      	bls.n	800d2fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d2d2:	4a16      	ldr	r2, [pc, #88]	; (800d32c <vPortValidateInterruptPriority+0x6c>)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d2dc:	4b14      	ldr	r3, [pc, #80]	; (800d330 <vPortValidateInterruptPriority+0x70>)
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	7afa      	ldrb	r2, [r7, #11]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d20a      	bcs.n	800d2fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ea:	f383 8811 	msr	BASEPRI, r3
 800d2ee:	f3bf 8f6f 	isb	sy
 800d2f2:	f3bf 8f4f 	dsb	sy
 800d2f6:	607b      	str	r3, [r7, #4]
}
 800d2f8:	bf00      	nop
 800d2fa:	e7fe      	b.n	800d2fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d2fc:	4b0d      	ldr	r3, [pc, #52]	; (800d334 <vPortValidateInterruptPriority+0x74>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d304:	4b0c      	ldr	r3, [pc, #48]	; (800d338 <vPortValidateInterruptPriority+0x78>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	429a      	cmp	r2, r3
 800d30a:	d90a      	bls.n	800d322 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d310:	f383 8811 	msr	BASEPRI, r3
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	603b      	str	r3, [r7, #0]
}
 800d31e:	bf00      	nop
 800d320:	e7fe      	b.n	800d320 <vPortValidateInterruptPriority+0x60>
	}
 800d322:	bf00      	nop
 800d324:	3714      	adds	r7, #20
 800d326:	46bd      	mov	sp, r7
 800d328:	bc80      	pop	{r7}
 800d32a:	4770      	bx	lr
 800d32c:	e000e3f0 	.word	0xe000e3f0
 800d330:	200015bc 	.word	0x200015bc
 800d334:	e000ed0c 	.word	0xe000ed0c
 800d338:	200015c0 	.word	0x200015c0

0800d33c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b08a      	sub	sp, #40	; 0x28
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d344:	2300      	movs	r3, #0
 800d346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d348:	f7fe fc2a 	bl	800bba0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d34c:	4b58      	ldr	r3, [pc, #352]	; (800d4b0 <pvPortMalloc+0x174>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d101      	bne.n	800d358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d354:	f000 f910 	bl	800d578 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d358:	4b56      	ldr	r3, [pc, #344]	; (800d4b4 <pvPortMalloc+0x178>)
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4013      	ands	r3, r2
 800d360:	2b00      	cmp	r3, #0
 800d362:	f040 808e 	bne.w	800d482 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d01d      	beq.n	800d3a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d36c:	2208      	movs	r2, #8
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	4413      	add	r3, r2
 800d372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f003 0307 	and.w	r3, r3, #7
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d014      	beq.n	800d3a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f023 0307 	bic.w	r3, r3, #7
 800d384:	3308      	adds	r3, #8
 800d386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f003 0307 	and.w	r3, r3, #7
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00a      	beq.n	800d3a8 <pvPortMalloc+0x6c>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	617b      	str	r3, [r7, #20]
}
 800d3a4:	bf00      	nop
 800d3a6:	e7fe      	b.n	800d3a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d069      	beq.n	800d482 <pvPortMalloc+0x146>
 800d3ae:	4b42      	ldr	r3, [pc, #264]	; (800d4b8 <pvPortMalloc+0x17c>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d864      	bhi.n	800d482 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d3b8:	4b40      	ldr	r3, [pc, #256]	; (800d4bc <pvPortMalloc+0x180>)
 800d3ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d3bc:	4b3f      	ldr	r3, [pc, #252]	; (800d4bc <pvPortMalloc+0x180>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3c2:	e004      	b.n	800d3ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d903      	bls.n	800d3e0 <pvPortMalloc+0xa4>
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1f1      	bne.n	800d3c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d3e0:	4b33      	ldr	r3, [pc, #204]	; (800d4b0 <pvPortMalloc+0x174>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d04b      	beq.n	800d482 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d3ea:	6a3b      	ldr	r3, [r7, #32]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2208      	movs	r2, #8
 800d3f0:	4413      	add	r3, r2
 800d3f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	6a3b      	ldr	r3, [r7, #32]
 800d3fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fe:	685a      	ldr	r2, [r3, #4]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	1ad2      	subs	r2, r2, r3
 800d404:	2308      	movs	r3, #8
 800d406:	005b      	lsls	r3, r3, #1
 800d408:	429a      	cmp	r2, r3
 800d40a:	d91f      	bls.n	800d44c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d40c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4413      	add	r3, r2
 800d412:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	f003 0307 	and.w	r3, r3, #7
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d00a      	beq.n	800d434 <pvPortMalloc+0xf8>
	__asm volatile
 800d41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	613b      	str	r3, [r7, #16]
}
 800d430:	bf00      	nop
 800d432:	e7fe      	b.n	800d432 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d436:	685a      	ldr	r2, [r3, #4]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	1ad2      	subs	r2, r2, r3
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d446:	69b8      	ldr	r0, [r7, #24]
 800d448:	f000 f8f8 	bl	800d63c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d44c:	4b1a      	ldr	r3, [pc, #104]	; (800d4b8 <pvPortMalloc+0x17c>)
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	1ad3      	subs	r3, r2, r3
 800d456:	4a18      	ldr	r2, [pc, #96]	; (800d4b8 <pvPortMalloc+0x17c>)
 800d458:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d45a:	4b17      	ldr	r3, [pc, #92]	; (800d4b8 <pvPortMalloc+0x17c>)
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	4b18      	ldr	r3, [pc, #96]	; (800d4c0 <pvPortMalloc+0x184>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	429a      	cmp	r2, r3
 800d464:	d203      	bcs.n	800d46e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d466:	4b14      	ldr	r3, [pc, #80]	; (800d4b8 <pvPortMalloc+0x17c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a15      	ldr	r2, [pc, #84]	; (800d4c0 <pvPortMalloc+0x184>)
 800d46c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d470:	685a      	ldr	r2, [r3, #4]
 800d472:	4b10      	ldr	r3, [pc, #64]	; (800d4b4 <pvPortMalloc+0x178>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	431a      	orrs	r2, r3
 800d478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47e:	2200      	movs	r2, #0
 800d480:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d482:	f7fe fb9b 	bl	800bbbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	f003 0307 	and.w	r3, r3, #7
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00a      	beq.n	800d4a6 <pvPortMalloc+0x16a>
	__asm volatile
 800d490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d494:	f383 8811 	msr	BASEPRI, r3
 800d498:	f3bf 8f6f 	isb	sy
 800d49c:	f3bf 8f4f 	dsb	sy
 800d4a0:	60fb      	str	r3, [r7, #12]
}
 800d4a2:	bf00      	nop
 800d4a4:	e7fe      	b.n	800d4a4 <pvPortMalloc+0x168>
	return pvReturn;
 800d4a6:	69fb      	ldr	r3, [r7, #28]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3728      	adds	r7, #40	; 0x28
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	200035cc 	.word	0x200035cc
 800d4b4:	200035d8 	.word	0x200035d8
 800d4b8:	200035d0 	.word	0x200035d0
 800d4bc:	200035c4 	.word	0x200035c4
 800d4c0:	200035d4 	.word	0x200035d4

0800d4c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d048      	beq.n	800d568 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d4d6:	2308      	movs	r3, #8
 800d4d8:	425b      	negs	r3, r3
 800d4da:	697a      	ldr	r2, [r7, #20]
 800d4dc:	4413      	add	r3, r2
 800d4de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	685a      	ldr	r2, [r3, #4]
 800d4e8:	4b21      	ldr	r3, [pc, #132]	; (800d570 <vPortFree+0xac>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4013      	ands	r3, r2
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10a      	bne.n	800d508 <vPortFree+0x44>
	__asm volatile
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	60fb      	str	r3, [r7, #12]
}
 800d504:	bf00      	nop
 800d506:	e7fe      	b.n	800d506 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00a      	beq.n	800d526 <vPortFree+0x62>
	__asm volatile
 800d510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	60bb      	str	r3, [r7, #8]
}
 800d522:	bf00      	nop
 800d524:	e7fe      	b.n	800d524 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	4b11      	ldr	r3, [pc, #68]	; (800d570 <vPortFree+0xac>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4013      	ands	r3, r2
 800d530:	2b00      	cmp	r3, #0
 800d532:	d019      	beq.n	800d568 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d115      	bne.n	800d568 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	685a      	ldr	r2, [r3, #4]
 800d540:	4b0b      	ldr	r3, [pc, #44]	; (800d570 <vPortFree+0xac>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	43db      	mvns	r3, r3
 800d546:	401a      	ands	r2, r3
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d54c:	f7fe fb28 	bl	800bba0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	685a      	ldr	r2, [r3, #4]
 800d554:	4b07      	ldr	r3, [pc, #28]	; (800d574 <vPortFree+0xb0>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4413      	add	r3, r2
 800d55a:	4a06      	ldr	r2, [pc, #24]	; (800d574 <vPortFree+0xb0>)
 800d55c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d55e:	6938      	ldr	r0, [r7, #16]
 800d560:	f000 f86c 	bl	800d63c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d564:	f7fe fb2a 	bl	800bbbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d568:	bf00      	nop
 800d56a:	3718      	adds	r7, #24
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	200035d8 	.word	0x200035d8
 800d574:	200035d0 	.word	0x200035d0

0800d578 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d578:	b480      	push	{r7}
 800d57a:	b085      	sub	sp, #20
 800d57c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d57e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d582:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d584:	4b27      	ldr	r3, [pc, #156]	; (800d624 <prvHeapInit+0xac>)
 800d586:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f003 0307 	and.w	r3, r3, #7
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d00c      	beq.n	800d5ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	3307      	adds	r3, #7
 800d596:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f023 0307 	bic.w	r3, r3, #7
 800d59e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d5a0:	68ba      	ldr	r2, [r7, #8]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	1ad3      	subs	r3, r2, r3
 800d5a6:	4a1f      	ldr	r2, [pc, #124]	; (800d624 <prvHeapInit+0xac>)
 800d5a8:	4413      	add	r3, r2
 800d5aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d5b0:	4a1d      	ldr	r2, [pc, #116]	; (800d628 <prvHeapInit+0xb0>)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d5b6:	4b1c      	ldr	r3, [pc, #112]	; (800d628 <prvHeapInit+0xb0>)
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d5c4:	2208      	movs	r2, #8
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	1a9b      	subs	r3, r3, r2
 800d5ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f023 0307 	bic.w	r3, r3, #7
 800d5d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	4a15      	ldr	r2, [pc, #84]	; (800d62c <prvHeapInit+0xb4>)
 800d5d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d5da:	4b14      	ldr	r3, [pc, #80]	; (800d62c <prvHeapInit+0xb4>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d5e2:	4b12      	ldr	r3, [pc, #72]	; (800d62c <prvHeapInit+0xb4>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	68fa      	ldr	r2, [r7, #12]
 800d5f2:	1ad2      	subs	r2, r2, r3
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d5f8:	4b0c      	ldr	r3, [pc, #48]	; (800d62c <prvHeapInit+0xb4>)
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	4a0a      	ldr	r2, [pc, #40]	; (800d630 <prvHeapInit+0xb8>)
 800d606:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	4a09      	ldr	r2, [pc, #36]	; (800d634 <prvHeapInit+0xbc>)
 800d60e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d610:	4b09      	ldr	r3, [pc, #36]	; (800d638 <prvHeapInit+0xc0>)
 800d612:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d616:	601a      	str	r2, [r3, #0]
}
 800d618:	bf00      	nop
 800d61a:	3714      	adds	r7, #20
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bc80      	pop	{r7}
 800d620:	4770      	bx	lr
 800d622:	bf00      	nop
 800d624:	200015c4 	.word	0x200015c4
 800d628:	200035c4 	.word	0x200035c4
 800d62c:	200035cc 	.word	0x200035cc
 800d630:	200035d4 	.word	0x200035d4
 800d634:	200035d0 	.word	0x200035d0
 800d638:	200035d8 	.word	0x200035d8

0800d63c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d644:	4b27      	ldr	r3, [pc, #156]	; (800d6e4 <prvInsertBlockIntoFreeList+0xa8>)
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	e002      	b.n	800d650 <prvInsertBlockIntoFreeList+0x14>
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	60fb      	str	r3, [r7, #12]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	429a      	cmp	r2, r3
 800d658:	d8f7      	bhi.n	800d64a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	4413      	add	r3, r2
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d108      	bne.n	800d67e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	685a      	ldr	r2, [r3, #4]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	441a      	add	r2, r3
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	68ba      	ldr	r2, [r7, #8]
 800d688:	441a      	add	r2, r3
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d118      	bne.n	800d6c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	4b14      	ldr	r3, [pc, #80]	; (800d6e8 <prvInsertBlockIntoFreeList+0xac>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d00d      	beq.n	800d6ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	685a      	ldr	r2, [r3, #4]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	441a      	add	r2, r3
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	601a      	str	r2, [r3, #0]
 800d6b8:	e008      	b.n	800d6cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d6ba:	4b0b      	ldr	r3, [pc, #44]	; (800d6e8 <prvInsertBlockIntoFreeList+0xac>)
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	601a      	str	r2, [r3, #0]
 800d6c2:	e003      	b.n	800d6cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d002      	beq.n	800d6da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6da:	bf00      	nop
 800d6dc:	3714      	adds	r7, #20
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bc80      	pop	{r7}
 800d6e2:	4770      	bx	lr
 800d6e4:	200035c4 	.word	0x200035c4
 800d6e8:	200035cc 	.word	0x200035cc

0800d6ec <__assert_func>:
 800d6ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6ee:	4614      	mov	r4, r2
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	4b09      	ldr	r3, [pc, #36]	; (800d718 <__assert_func+0x2c>)
 800d6f4:	4605      	mov	r5, r0
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	68d8      	ldr	r0, [r3, #12]
 800d6fa:	b14c      	cbz	r4, 800d710 <__assert_func+0x24>
 800d6fc:	4b07      	ldr	r3, [pc, #28]	; (800d71c <__assert_func+0x30>)
 800d6fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d702:	9100      	str	r1, [sp, #0]
 800d704:	462b      	mov	r3, r5
 800d706:	4906      	ldr	r1, [pc, #24]	; (800d720 <__assert_func+0x34>)
 800d708:	f000 f814 	bl	800d734 <fiprintf>
 800d70c:	f000 ff38 	bl	800e580 <abort>
 800d710:	4b04      	ldr	r3, [pc, #16]	; (800d724 <__assert_func+0x38>)
 800d712:	461c      	mov	r4, r3
 800d714:	e7f3      	b.n	800d6fe <__assert_func+0x12>
 800d716:	bf00      	nop
 800d718:	20000158 	.word	0x20000158
 800d71c:	080123e5 	.word	0x080123e5
 800d720:	080123f2 	.word	0x080123f2
 800d724:	08012420 	.word	0x08012420

0800d728 <__errno>:
 800d728:	4b01      	ldr	r3, [pc, #4]	; (800d730 <__errno+0x8>)
 800d72a:	6818      	ldr	r0, [r3, #0]
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	20000158 	.word	0x20000158

0800d734 <fiprintf>:
 800d734:	b40e      	push	{r1, r2, r3}
 800d736:	b503      	push	{r0, r1, lr}
 800d738:	4601      	mov	r1, r0
 800d73a:	ab03      	add	r3, sp, #12
 800d73c:	4805      	ldr	r0, [pc, #20]	; (800d754 <fiprintf+0x20>)
 800d73e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d742:	6800      	ldr	r0, [r0, #0]
 800d744:	9301      	str	r3, [sp, #4]
 800d746:	f000 f869 	bl	800d81c <_vfiprintf_r>
 800d74a:	b002      	add	sp, #8
 800d74c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d750:	b003      	add	sp, #12
 800d752:	4770      	bx	lr
 800d754:	20000158 	.word	0x20000158

0800d758 <__libc_init_array>:
 800d758:	b570      	push	{r4, r5, r6, lr}
 800d75a:	2600      	movs	r6, #0
 800d75c:	4d0c      	ldr	r5, [pc, #48]	; (800d790 <__libc_init_array+0x38>)
 800d75e:	4c0d      	ldr	r4, [pc, #52]	; (800d794 <__libc_init_array+0x3c>)
 800d760:	1b64      	subs	r4, r4, r5
 800d762:	10a4      	asrs	r4, r4, #2
 800d764:	42a6      	cmp	r6, r4
 800d766:	d109      	bne.n	800d77c <__libc_init_array+0x24>
 800d768:	f003 fe5c 	bl	8011424 <_init>
 800d76c:	2600      	movs	r6, #0
 800d76e:	4d0a      	ldr	r5, [pc, #40]	; (800d798 <__libc_init_array+0x40>)
 800d770:	4c0a      	ldr	r4, [pc, #40]	; (800d79c <__libc_init_array+0x44>)
 800d772:	1b64      	subs	r4, r4, r5
 800d774:	10a4      	asrs	r4, r4, #2
 800d776:	42a6      	cmp	r6, r4
 800d778:	d105      	bne.n	800d786 <__libc_init_array+0x2e>
 800d77a:	bd70      	pop	{r4, r5, r6, pc}
 800d77c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d780:	4798      	blx	r3
 800d782:	3601      	adds	r6, #1
 800d784:	e7ee      	b.n	800d764 <__libc_init_array+0xc>
 800d786:	f855 3b04 	ldr.w	r3, [r5], #4
 800d78a:	4798      	blx	r3
 800d78c:	3601      	adds	r6, #1
 800d78e:	e7f2      	b.n	800d776 <__libc_init_array+0x1e>
 800d790:	08012818 	.word	0x08012818
 800d794:	08012818 	.word	0x08012818
 800d798:	08012818 	.word	0x08012818
 800d79c:	0801281c 	.word	0x0801281c

0800d7a0 <memcpy>:
 800d7a0:	440a      	add	r2, r1
 800d7a2:	4291      	cmp	r1, r2
 800d7a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7a8:	d100      	bne.n	800d7ac <memcpy+0xc>
 800d7aa:	4770      	bx	lr
 800d7ac:	b510      	push	{r4, lr}
 800d7ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7b2:	4291      	cmp	r1, r2
 800d7b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7b8:	d1f9      	bne.n	800d7ae <memcpy+0xe>
 800d7ba:	bd10      	pop	{r4, pc}

0800d7bc <memset>:
 800d7bc:	4603      	mov	r3, r0
 800d7be:	4402      	add	r2, r0
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d100      	bne.n	800d7c6 <memset+0xa>
 800d7c4:	4770      	bx	lr
 800d7c6:	f803 1b01 	strb.w	r1, [r3], #1
 800d7ca:	e7f9      	b.n	800d7c0 <memset+0x4>

0800d7cc <__sfputc_r>:
 800d7cc:	6893      	ldr	r3, [r2, #8]
 800d7ce:	b410      	push	{r4}
 800d7d0:	3b01      	subs	r3, #1
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	6093      	str	r3, [r2, #8]
 800d7d6:	da07      	bge.n	800d7e8 <__sfputc_r+0x1c>
 800d7d8:	6994      	ldr	r4, [r2, #24]
 800d7da:	42a3      	cmp	r3, r4
 800d7dc:	db01      	blt.n	800d7e2 <__sfputc_r+0x16>
 800d7de:	290a      	cmp	r1, #10
 800d7e0:	d102      	bne.n	800d7e8 <__sfputc_r+0x1c>
 800d7e2:	bc10      	pop	{r4}
 800d7e4:	f000 be0c 	b.w	800e400 <__swbuf_r>
 800d7e8:	6813      	ldr	r3, [r2, #0]
 800d7ea:	1c58      	adds	r0, r3, #1
 800d7ec:	6010      	str	r0, [r2, #0]
 800d7ee:	7019      	strb	r1, [r3, #0]
 800d7f0:	4608      	mov	r0, r1
 800d7f2:	bc10      	pop	{r4}
 800d7f4:	4770      	bx	lr

0800d7f6 <__sfputs_r>:
 800d7f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f8:	4606      	mov	r6, r0
 800d7fa:	460f      	mov	r7, r1
 800d7fc:	4614      	mov	r4, r2
 800d7fe:	18d5      	adds	r5, r2, r3
 800d800:	42ac      	cmp	r4, r5
 800d802:	d101      	bne.n	800d808 <__sfputs_r+0x12>
 800d804:	2000      	movs	r0, #0
 800d806:	e007      	b.n	800d818 <__sfputs_r+0x22>
 800d808:	463a      	mov	r2, r7
 800d80a:	4630      	mov	r0, r6
 800d80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d810:	f7ff ffdc 	bl	800d7cc <__sfputc_r>
 800d814:	1c43      	adds	r3, r0, #1
 800d816:	d1f3      	bne.n	800d800 <__sfputs_r+0xa>
 800d818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d81c <_vfiprintf_r>:
 800d81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d820:	460d      	mov	r5, r1
 800d822:	4614      	mov	r4, r2
 800d824:	4698      	mov	r8, r3
 800d826:	4606      	mov	r6, r0
 800d828:	b09d      	sub	sp, #116	; 0x74
 800d82a:	b118      	cbz	r0, 800d834 <_vfiprintf_r+0x18>
 800d82c:	6983      	ldr	r3, [r0, #24]
 800d82e:	b90b      	cbnz	r3, 800d834 <_vfiprintf_r+0x18>
 800d830:	f001 fe42 	bl	800f4b8 <__sinit>
 800d834:	4b89      	ldr	r3, [pc, #548]	; (800da5c <_vfiprintf_r+0x240>)
 800d836:	429d      	cmp	r5, r3
 800d838:	d11b      	bne.n	800d872 <_vfiprintf_r+0x56>
 800d83a:	6875      	ldr	r5, [r6, #4]
 800d83c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d83e:	07d9      	lsls	r1, r3, #31
 800d840:	d405      	bmi.n	800d84e <_vfiprintf_r+0x32>
 800d842:	89ab      	ldrh	r3, [r5, #12]
 800d844:	059a      	lsls	r2, r3, #22
 800d846:	d402      	bmi.n	800d84e <_vfiprintf_r+0x32>
 800d848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d84a:	f001 fed8 	bl	800f5fe <__retarget_lock_acquire_recursive>
 800d84e:	89ab      	ldrh	r3, [r5, #12]
 800d850:	071b      	lsls	r3, r3, #28
 800d852:	d501      	bpl.n	800d858 <_vfiprintf_r+0x3c>
 800d854:	692b      	ldr	r3, [r5, #16]
 800d856:	b9eb      	cbnz	r3, 800d894 <_vfiprintf_r+0x78>
 800d858:	4629      	mov	r1, r5
 800d85a:	4630      	mov	r0, r6
 800d85c:	f000 fe22 	bl	800e4a4 <__swsetup_r>
 800d860:	b1c0      	cbz	r0, 800d894 <_vfiprintf_r+0x78>
 800d862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d864:	07dc      	lsls	r4, r3, #31
 800d866:	d50e      	bpl.n	800d886 <_vfiprintf_r+0x6a>
 800d868:	f04f 30ff 	mov.w	r0, #4294967295
 800d86c:	b01d      	add	sp, #116	; 0x74
 800d86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d872:	4b7b      	ldr	r3, [pc, #492]	; (800da60 <_vfiprintf_r+0x244>)
 800d874:	429d      	cmp	r5, r3
 800d876:	d101      	bne.n	800d87c <_vfiprintf_r+0x60>
 800d878:	68b5      	ldr	r5, [r6, #8]
 800d87a:	e7df      	b.n	800d83c <_vfiprintf_r+0x20>
 800d87c:	4b79      	ldr	r3, [pc, #484]	; (800da64 <_vfiprintf_r+0x248>)
 800d87e:	429d      	cmp	r5, r3
 800d880:	bf08      	it	eq
 800d882:	68f5      	ldreq	r5, [r6, #12]
 800d884:	e7da      	b.n	800d83c <_vfiprintf_r+0x20>
 800d886:	89ab      	ldrh	r3, [r5, #12]
 800d888:	0598      	lsls	r0, r3, #22
 800d88a:	d4ed      	bmi.n	800d868 <_vfiprintf_r+0x4c>
 800d88c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d88e:	f001 feb7 	bl	800f600 <__retarget_lock_release_recursive>
 800d892:	e7e9      	b.n	800d868 <_vfiprintf_r+0x4c>
 800d894:	2300      	movs	r3, #0
 800d896:	9309      	str	r3, [sp, #36]	; 0x24
 800d898:	2320      	movs	r3, #32
 800d89a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d89e:	2330      	movs	r3, #48	; 0x30
 800d8a0:	f04f 0901 	mov.w	r9, #1
 800d8a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800da68 <_vfiprintf_r+0x24c>
 800d8ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8b0:	4623      	mov	r3, r4
 800d8b2:	469a      	mov	sl, r3
 800d8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8b8:	b10a      	cbz	r2, 800d8be <_vfiprintf_r+0xa2>
 800d8ba:	2a25      	cmp	r2, #37	; 0x25
 800d8bc:	d1f9      	bne.n	800d8b2 <_vfiprintf_r+0x96>
 800d8be:	ebba 0b04 	subs.w	fp, sl, r4
 800d8c2:	d00b      	beq.n	800d8dc <_vfiprintf_r+0xc0>
 800d8c4:	465b      	mov	r3, fp
 800d8c6:	4622      	mov	r2, r4
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	f7ff ff93 	bl	800d7f6 <__sfputs_r>
 800d8d0:	3001      	adds	r0, #1
 800d8d2:	f000 80aa 	beq.w	800da2a <_vfiprintf_r+0x20e>
 800d8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8d8:	445a      	add	r2, fp
 800d8da:	9209      	str	r2, [sp, #36]	; 0x24
 800d8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f000 80a2 	beq.w	800da2a <_vfiprintf_r+0x20e>
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8f0:	f10a 0a01 	add.w	sl, sl, #1
 800d8f4:	9304      	str	r3, [sp, #16]
 800d8f6:	9307      	str	r3, [sp, #28]
 800d8f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8fc:	931a      	str	r3, [sp, #104]	; 0x68
 800d8fe:	4654      	mov	r4, sl
 800d900:	2205      	movs	r2, #5
 800d902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d906:	4858      	ldr	r0, [pc, #352]	; (800da68 <_vfiprintf_r+0x24c>)
 800d908:	f001 fee8 	bl	800f6dc <memchr>
 800d90c:	9a04      	ldr	r2, [sp, #16]
 800d90e:	b9d8      	cbnz	r0, 800d948 <_vfiprintf_r+0x12c>
 800d910:	06d1      	lsls	r1, r2, #27
 800d912:	bf44      	itt	mi
 800d914:	2320      	movmi	r3, #32
 800d916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d91a:	0713      	lsls	r3, r2, #28
 800d91c:	bf44      	itt	mi
 800d91e:	232b      	movmi	r3, #43	; 0x2b
 800d920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d924:	f89a 3000 	ldrb.w	r3, [sl]
 800d928:	2b2a      	cmp	r3, #42	; 0x2a
 800d92a:	d015      	beq.n	800d958 <_vfiprintf_r+0x13c>
 800d92c:	4654      	mov	r4, sl
 800d92e:	2000      	movs	r0, #0
 800d930:	f04f 0c0a 	mov.w	ip, #10
 800d934:	9a07      	ldr	r2, [sp, #28]
 800d936:	4621      	mov	r1, r4
 800d938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d93c:	3b30      	subs	r3, #48	; 0x30
 800d93e:	2b09      	cmp	r3, #9
 800d940:	d94e      	bls.n	800d9e0 <_vfiprintf_r+0x1c4>
 800d942:	b1b0      	cbz	r0, 800d972 <_vfiprintf_r+0x156>
 800d944:	9207      	str	r2, [sp, #28]
 800d946:	e014      	b.n	800d972 <_vfiprintf_r+0x156>
 800d948:	eba0 0308 	sub.w	r3, r0, r8
 800d94c:	fa09 f303 	lsl.w	r3, r9, r3
 800d950:	4313      	orrs	r3, r2
 800d952:	46a2      	mov	sl, r4
 800d954:	9304      	str	r3, [sp, #16]
 800d956:	e7d2      	b.n	800d8fe <_vfiprintf_r+0xe2>
 800d958:	9b03      	ldr	r3, [sp, #12]
 800d95a:	1d19      	adds	r1, r3, #4
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	9103      	str	r1, [sp, #12]
 800d960:	2b00      	cmp	r3, #0
 800d962:	bfbb      	ittet	lt
 800d964:	425b      	neglt	r3, r3
 800d966:	f042 0202 	orrlt.w	r2, r2, #2
 800d96a:	9307      	strge	r3, [sp, #28]
 800d96c:	9307      	strlt	r3, [sp, #28]
 800d96e:	bfb8      	it	lt
 800d970:	9204      	strlt	r2, [sp, #16]
 800d972:	7823      	ldrb	r3, [r4, #0]
 800d974:	2b2e      	cmp	r3, #46	; 0x2e
 800d976:	d10c      	bne.n	800d992 <_vfiprintf_r+0x176>
 800d978:	7863      	ldrb	r3, [r4, #1]
 800d97a:	2b2a      	cmp	r3, #42	; 0x2a
 800d97c:	d135      	bne.n	800d9ea <_vfiprintf_r+0x1ce>
 800d97e:	9b03      	ldr	r3, [sp, #12]
 800d980:	3402      	adds	r4, #2
 800d982:	1d1a      	adds	r2, r3, #4
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	9203      	str	r2, [sp, #12]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	bfb8      	it	lt
 800d98c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d990:	9305      	str	r3, [sp, #20]
 800d992:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800da78 <_vfiprintf_r+0x25c>
 800d996:	2203      	movs	r2, #3
 800d998:	4650      	mov	r0, sl
 800d99a:	7821      	ldrb	r1, [r4, #0]
 800d99c:	f001 fe9e 	bl	800f6dc <memchr>
 800d9a0:	b140      	cbz	r0, 800d9b4 <_vfiprintf_r+0x198>
 800d9a2:	2340      	movs	r3, #64	; 0x40
 800d9a4:	eba0 000a 	sub.w	r0, r0, sl
 800d9a8:	fa03 f000 	lsl.w	r0, r3, r0
 800d9ac:	9b04      	ldr	r3, [sp, #16]
 800d9ae:	3401      	adds	r4, #1
 800d9b0:	4303      	orrs	r3, r0
 800d9b2:	9304      	str	r3, [sp, #16]
 800d9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9b8:	2206      	movs	r2, #6
 800d9ba:	482c      	ldr	r0, [pc, #176]	; (800da6c <_vfiprintf_r+0x250>)
 800d9bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9c0:	f001 fe8c 	bl	800f6dc <memchr>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d03f      	beq.n	800da48 <_vfiprintf_r+0x22c>
 800d9c8:	4b29      	ldr	r3, [pc, #164]	; (800da70 <_vfiprintf_r+0x254>)
 800d9ca:	bb1b      	cbnz	r3, 800da14 <_vfiprintf_r+0x1f8>
 800d9cc:	9b03      	ldr	r3, [sp, #12]
 800d9ce:	3307      	adds	r3, #7
 800d9d0:	f023 0307 	bic.w	r3, r3, #7
 800d9d4:	3308      	adds	r3, #8
 800d9d6:	9303      	str	r3, [sp, #12]
 800d9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9da:	443b      	add	r3, r7
 800d9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d9de:	e767      	b.n	800d8b0 <_vfiprintf_r+0x94>
 800d9e0:	460c      	mov	r4, r1
 800d9e2:	2001      	movs	r0, #1
 800d9e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9e8:	e7a5      	b.n	800d936 <_vfiprintf_r+0x11a>
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	f04f 0c0a 	mov.w	ip, #10
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	3401      	adds	r4, #1
 800d9f4:	9305      	str	r3, [sp, #20]
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9fc:	3a30      	subs	r2, #48	; 0x30
 800d9fe:	2a09      	cmp	r2, #9
 800da00:	d903      	bls.n	800da0a <_vfiprintf_r+0x1ee>
 800da02:	2b00      	cmp	r3, #0
 800da04:	d0c5      	beq.n	800d992 <_vfiprintf_r+0x176>
 800da06:	9105      	str	r1, [sp, #20]
 800da08:	e7c3      	b.n	800d992 <_vfiprintf_r+0x176>
 800da0a:	4604      	mov	r4, r0
 800da0c:	2301      	movs	r3, #1
 800da0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800da12:	e7f0      	b.n	800d9f6 <_vfiprintf_r+0x1da>
 800da14:	ab03      	add	r3, sp, #12
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	462a      	mov	r2, r5
 800da1a:	4630      	mov	r0, r6
 800da1c:	4b15      	ldr	r3, [pc, #84]	; (800da74 <_vfiprintf_r+0x258>)
 800da1e:	a904      	add	r1, sp, #16
 800da20:	f000 f8ca 	bl	800dbb8 <_printf_float>
 800da24:	4607      	mov	r7, r0
 800da26:	1c78      	adds	r0, r7, #1
 800da28:	d1d6      	bne.n	800d9d8 <_vfiprintf_r+0x1bc>
 800da2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da2c:	07d9      	lsls	r1, r3, #31
 800da2e:	d405      	bmi.n	800da3c <_vfiprintf_r+0x220>
 800da30:	89ab      	ldrh	r3, [r5, #12]
 800da32:	059a      	lsls	r2, r3, #22
 800da34:	d402      	bmi.n	800da3c <_vfiprintf_r+0x220>
 800da36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da38:	f001 fde2 	bl	800f600 <__retarget_lock_release_recursive>
 800da3c:	89ab      	ldrh	r3, [r5, #12]
 800da3e:	065b      	lsls	r3, r3, #25
 800da40:	f53f af12 	bmi.w	800d868 <_vfiprintf_r+0x4c>
 800da44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da46:	e711      	b.n	800d86c <_vfiprintf_r+0x50>
 800da48:	ab03      	add	r3, sp, #12
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	462a      	mov	r2, r5
 800da4e:	4630      	mov	r0, r6
 800da50:	4b08      	ldr	r3, [pc, #32]	; (800da74 <_vfiprintf_r+0x258>)
 800da52:	a904      	add	r1, sp, #16
 800da54:	f000 fb4c 	bl	800e0f0 <_printf_i>
 800da58:	e7e4      	b.n	800da24 <_vfiprintf_r+0x208>
 800da5a:	bf00      	nop
 800da5c:	08012524 	.word	0x08012524
 800da60:	08012544 	.word	0x08012544
 800da64:	08012504 	.word	0x08012504
 800da68:	08012428 	.word	0x08012428
 800da6c:	08012432 	.word	0x08012432
 800da70:	0800dbb9 	.word	0x0800dbb9
 800da74:	0800d7f7 	.word	0x0800d7f7
 800da78:	0801242e 	.word	0x0801242e

0800da7c <__cvt>:
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da82:	461f      	mov	r7, r3
 800da84:	bfbb      	ittet	lt
 800da86:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800da8a:	461f      	movlt	r7, r3
 800da8c:	2300      	movge	r3, #0
 800da8e:	232d      	movlt	r3, #45	; 0x2d
 800da90:	b088      	sub	sp, #32
 800da92:	4614      	mov	r4, r2
 800da94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800da96:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800da98:	7013      	strb	r3, [r2, #0]
 800da9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da9c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800daa0:	f023 0820 	bic.w	r8, r3, #32
 800daa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800daa8:	d005      	beq.n	800dab6 <__cvt+0x3a>
 800daaa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800daae:	d100      	bne.n	800dab2 <__cvt+0x36>
 800dab0:	3501      	adds	r5, #1
 800dab2:	2302      	movs	r3, #2
 800dab4:	e000      	b.n	800dab8 <__cvt+0x3c>
 800dab6:	2303      	movs	r3, #3
 800dab8:	aa07      	add	r2, sp, #28
 800daba:	9204      	str	r2, [sp, #16]
 800dabc:	aa06      	add	r2, sp, #24
 800dabe:	e9cd a202 	strd	sl, r2, [sp, #8]
 800dac2:	e9cd 3500 	strd	r3, r5, [sp]
 800dac6:	4622      	mov	r2, r4
 800dac8:	463b      	mov	r3, r7
 800daca:	f000 fded 	bl	800e6a8 <_dtoa_r>
 800dace:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dad2:	4606      	mov	r6, r0
 800dad4:	d102      	bne.n	800dadc <__cvt+0x60>
 800dad6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dad8:	07db      	lsls	r3, r3, #31
 800dada:	d522      	bpl.n	800db22 <__cvt+0xa6>
 800dadc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dae0:	eb06 0905 	add.w	r9, r6, r5
 800dae4:	d110      	bne.n	800db08 <__cvt+0x8c>
 800dae6:	7833      	ldrb	r3, [r6, #0]
 800dae8:	2b30      	cmp	r3, #48	; 0x30
 800daea:	d10a      	bne.n	800db02 <__cvt+0x86>
 800daec:	2200      	movs	r2, #0
 800daee:	2300      	movs	r3, #0
 800daf0:	4620      	mov	r0, r4
 800daf2:	4639      	mov	r1, r7
 800daf4:	f7f2 ffd2 	bl	8000a9c <__aeabi_dcmpeq>
 800daf8:	b918      	cbnz	r0, 800db02 <__cvt+0x86>
 800dafa:	f1c5 0501 	rsb	r5, r5, #1
 800dafe:	f8ca 5000 	str.w	r5, [sl]
 800db02:	f8da 3000 	ldr.w	r3, [sl]
 800db06:	4499      	add	r9, r3
 800db08:	2200      	movs	r2, #0
 800db0a:	2300      	movs	r3, #0
 800db0c:	4620      	mov	r0, r4
 800db0e:	4639      	mov	r1, r7
 800db10:	f7f2 ffc4 	bl	8000a9c <__aeabi_dcmpeq>
 800db14:	b108      	cbz	r0, 800db1a <__cvt+0x9e>
 800db16:	f8cd 901c 	str.w	r9, [sp, #28]
 800db1a:	2230      	movs	r2, #48	; 0x30
 800db1c:	9b07      	ldr	r3, [sp, #28]
 800db1e:	454b      	cmp	r3, r9
 800db20:	d307      	bcc.n	800db32 <__cvt+0xb6>
 800db22:	4630      	mov	r0, r6
 800db24:	9b07      	ldr	r3, [sp, #28]
 800db26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800db28:	1b9b      	subs	r3, r3, r6
 800db2a:	6013      	str	r3, [r2, #0]
 800db2c:	b008      	add	sp, #32
 800db2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db32:	1c59      	adds	r1, r3, #1
 800db34:	9107      	str	r1, [sp, #28]
 800db36:	701a      	strb	r2, [r3, #0]
 800db38:	e7f0      	b.n	800db1c <__cvt+0xa0>

0800db3a <__exponent>:
 800db3a:	4603      	mov	r3, r0
 800db3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db3e:	2900      	cmp	r1, #0
 800db40:	f803 2b02 	strb.w	r2, [r3], #2
 800db44:	bfb6      	itet	lt
 800db46:	222d      	movlt	r2, #45	; 0x2d
 800db48:	222b      	movge	r2, #43	; 0x2b
 800db4a:	4249      	neglt	r1, r1
 800db4c:	2909      	cmp	r1, #9
 800db4e:	7042      	strb	r2, [r0, #1]
 800db50:	dd2b      	ble.n	800dbaa <__exponent+0x70>
 800db52:	f10d 0407 	add.w	r4, sp, #7
 800db56:	46a4      	mov	ip, r4
 800db58:	270a      	movs	r7, #10
 800db5a:	fb91 f6f7 	sdiv	r6, r1, r7
 800db5e:	460a      	mov	r2, r1
 800db60:	46a6      	mov	lr, r4
 800db62:	fb07 1516 	mls	r5, r7, r6, r1
 800db66:	2a63      	cmp	r2, #99	; 0x63
 800db68:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800db6c:	4631      	mov	r1, r6
 800db6e:	f104 34ff 	add.w	r4, r4, #4294967295
 800db72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800db76:	dcf0      	bgt.n	800db5a <__exponent+0x20>
 800db78:	3130      	adds	r1, #48	; 0x30
 800db7a:	f1ae 0502 	sub.w	r5, lr, #2
 800db7e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800db82:	4629      	mov	r1, r5
 800db84:	1c44      	adds	r4, r0, #1
 800db86:	4561      	cmp	r1, ip
 800db88:	d30a      	bcc.n	800dba0 <__exponent+0x66>
 800db8a:	f10d 0209 	add.w	r2, sp, #9
 800db8e:	eba2 020e 	sub.w	r2, r2, lr
 800db92:	4565      	cmp	r5, ip
 800db94:	bf88      	it	hi
 800db96:	2200      	movhi	r2, #0
 800db98:	4413      	add	r3, r2
 800db9a:	1a18      	subs	r0, r3, r0
 800db9c:	b003      	add	sp, #12
 800db9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dba0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dba4:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dba8:	e7ed      	b.n	800db86 <__exponent+0x4c>
 800dbaa:	2330      	movs	r3, #48	; 0x30
 800dbac:	3130      	adds	r1, #48	; 0x30
 800dbae:	7083      	strb	r3, [r0, #2]
 800dbb0:	70c1      	strb	r1, [r0, #3]
 800dbb2:	1d03      	adds	r3, r0, #4
 800dbb4:	e7f1      	b.n	800db9a <__exponent+0x60>
	...

0800dbb8 <_printf_float>:
 800dbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbbc:	b091      	sub	sp, #68	; 0x44
 800dbbe:	460c      	mov	r4, r1
 800dbc0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800dbc4:	4616      	mov	r6, r2
 800dbc6:	461f      	mov	r7, r3
 800dbc8:	4605      	mov	r5, r0
 800dbca:	f001 fd13 	bl	800f5f4 <_localeconv_r>
 800dbce:	6803      	ldr	r3, [r0, #0]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	9309      	str	r3, [sp, #36]	; 0x24
 800dbd4:	f7f2 fb36 	bl	8000244 <strlen>
 800dbd8:	2300      	movs	r3, #0
 800dbda:	930e      	str	r3, [sp, #56]	; 0x38
 800dbdc:	f8d8 3000 	ldr.w	r3, [r8]
 800dbe0:	900a      	str	r0, [sp, #40]	; 0x28
 800dbe2:	3307      	adds	r3, #7
 800dbe4:	f023 0307 	bic.w	r3, r3, #7
 800dbe8:	f103 0208 	add.w	r2, r3, #8
 800dbec:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dbf0:	f8d4 b000 	ldr.w	fp, [r4]
 800dbf4:	f8c8 2000 	str.w	r2, [r8]
 800dbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dc00:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800dc04:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800dc08:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc0a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc0e:	4640      	mov	r0, r8
 800dc10:	4b9c      	ldr	r3, [pc, #624]	; (800de84 <_printf_float+0x2cc>)
 800dc12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc14:	f7f2 ff74 	bl	8000b00 <__aeabi_dcmpun>
 800dc18:	bb70      	cbnz	r0, 800dc78 <_printf_float+0xc0>
 800dc1a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc1e:	4640      	mov	r0, r8
 800dc20:	4b98      	ldr	r3, [pc, #608]	; (800de84 <_printf_float+0x2cc>)
 800dc22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc24:	f7f2 ff4e 	bl	8000ac4 <__aeabi_dcmple>
 800dc28:	bb30      	cbnz	r0, 800dc78 <_printf_float+0xc0>
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	4640      	mov	r0, r8
 800dc30:	4651      	mov	r1, sl
 800dc32:	f7f2 ff3d 	bl	8000ab0 <__aeabi_dcmplt>
 800dc36:	b110      	cbz	r0, 800dc3e <_printf_float+0x86>
 800dc38:	232d      	movs	r3, #45	; 0x2d
 800dc3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc3e:	4b92      	ldr	r3, [pc, #584]	; (800de88 <_printf_float+0x2d0>)
 800dc40:	4892      	ldr	r0, [pc, #584]	; (800de8c <_printf_float+0x2d4>)
 800dc42:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800dc46:	bf94      	ite	ls
 800dc48:	4698      	movls	r8, r3
 800dc4a:	4680      	movhi	r8, r0
 800dc4c:	2303      	movs	r3, #3
 800dc4e:	f04f 0a00 	mov.w	sl, #0
 800dc52:	6123      	str	r3, [r4, #16]
 800dc54:	f02b 0304 	bic.w	r3, fp, #4
 800dc58:	6023      	str	r3, [r4, #0]
 800dc5a:	4633      	mov	r3, r6
 800dc5c:	4621      	mov	r1, r4
 800dc5e:	4628      	mov	r0, r5
 800dc60:	9700      	str	r7, [sp, #0]
 800dc62:	aa0f      	add	r2, sp, #60	; 0x3c
 800dc64:	f000 f9d4 	bl	800e010 <_printf_common>
 800dc68:	3001      	adds	r0, #1
 800dc6a:	f040 8090 	bne.w	800dd8e <_printf_float+0x1d6>
 800dc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc72:	b011      	add	sp, #68	; 0x44
 800dc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc78:	4642      	mov	r2, r8
 800dc7a:	4653      	mov	r3, sl
 800dc7c:	4640      	mov	r0, r8
 800dc7e:	4651      	mov	r1, sl
 800dc80:	f7f2 ff3e 	bl	8000b00 <__aeabi_dcmpun>
 800dc84:	b148      	cbz	r0, 800dc9a <_printf_float+0xe2>
 800dc86:	f1ba 0f00 	cmp.w	sl, #0
 800dc8a:	bfb8      	it	lt
 800dc8c:	232d      	movlt	r3, #45	; 0x2d
 800dc8e:	4880      	ldr	r0, [pc, #512]	; (800de90 <_printf_float+0x2d8>)
 800dc90:	bfb8      	it	lt
 800dc92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dc96:	4b7f      	ldr	r3, [pc, #508]	; (800de94 <_printf_float+0x2dc>)
 800dc98:	e7d3      	b.n	800dc42 <_printf_float+0x8a>
 800dc9a:	6863      	ldr	r3, [r4, #4]
 800dc9c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800dca0:	1c5a      	adds	r2, r3, #1
 800dca2:	d142      	bne.n	800dd2a <_printf_float+0x172>
 800dca4:	2306      	movs	r3, #6
 800dca6:	6063      	str	r3, [r4, #4]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	9206      	str	r2, [sp, #24]
 800dcac:	aa0e      	add	r2, sp, #56	; 0x38
 800dcae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800dcb2:	aa0d      	add	r2, sp, #52	; 0x34
 800dcb4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800dcb8:	9203      	str	r2, [sp, #12]
 800dcba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800dcbe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dcc2:	6023      	str	r3, [r4, #0]
 800dcc4:	6863      	ldr	r3, [r4, #4]
 800dcc6:	4642      	mov	r2, r8
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	4628      	mov	r0, r5
 800dccc:	4653      	mov	r3, sl
 800dcce:	910b      	str	r1, [sp, #44]	; 0x2c
 800dcd0:	f7ff fed4 	bl	800da7c <__cvt>
 800dcd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcd6:	4680      	mov	r8, r0
 800dcd8:	2947      	cmp	r1, #71	; 0x47
 800dcda:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dcdc:	d108      	bne.n	800dcf0 <_printf_float+0x138>
 800dcde:	1cc8      	adds	r0, r1, #3
 800dce0:	db02      	blt.n	800dce8 <_printf_float+0x130>
 800dce2:	6863      	ldr	r3, [r4, #4]
 800dce4:	4299      	cmp	r1, r3
 800dce6:	dd40      	ble.n	800dd6a <_printf_float+0x1b2>
 800dce8:	f1a9 0902 	sub.w	r9, r9, #2
 800dcec:	fa5f f989 	uxtb.w	r9, r9
 800dcf0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dcf4:	d81f      	bhi.n	800dd36 <_printf_float+0x17e>
 800dcf6:	464a      	mov	r2, r9
 800dcf8:	3901      	subs	r1, #1
 800dcfa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dcfe:	910d      	str	r1, [sp, #52]	; 0x34
 800dd00:	f7ff ff1b 	bl	800db3a <__exponent>
 800dd04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd06:	4682      	mov	sl, r0
 800dd08:	1813      	adds	r3, r2, r0
 800dd0a:	2a01      	cmp	r2, #1
 800dd0c:	6123      	str	r3, [r4, #16]
 800dd0e:	dc02      	bgt.n	800dd16 <_printf_float+0x15e>
 800dd10:	6822      	ldr	r2, [r4, #0]
 800dd12:	07d2      	lsls	r2, r2, #31
 800dd14:	d501      	bpl.n	800dd1a <_printf_float+0x162>
 800dd16:	3301      	adds	r3, #1
 800dd18:	6123      	str	r3, [r4, #16]
 800dd1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d09b      	beq.n	800dc5a <_printf_float+0xa2>
 800dd22:	232d      	movs	r3, #45	; 0x2d
 800dd24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd28:	e797      	b.n	800dc5a <_printf_float+0xa2>
 800dd2a:	2947      	cmp	r1, #71	; 0x47
 800dd2c:	d1bc      	bne.n	800dca8 <_printf_float+0xf0>
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1ba      	bne.n	800dca8 <_printf_float+0xf0>
 800dd32:	2301      	movs	r3, #1
 800dd34:	e7b7      	b.n	800dca6 <_printf_float+0xee>
 800dd36:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800dd3a:	d118      	bne.n	800dd6e <_printf_float+0x1b6>
 800dd3c:	2900      	cmp	r1, #0
 800dd3e:	6863      	ldr	r3, [r4, #4]
 800dd40:	dd0b      	ble.n	800dd5a <_printf_float+0x1a2>
 800dd42:	6121      	str	r1, [r4, #16]
 800dd44:	b913      	cbnz	r3, 800dd4c <_printf_float+0x194>
 800dd46:	6822      	ldr	r2, [r4, #0]
 800dd48:	07d0      	lsls	r0, r2, #31
 800dd4a:	d502      	bpl.n	800dd52 <_printf_float+0x19a>
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	440b      	add	r3, r1
 800dd50:	6123      	str	r3, [r4, #16]
 800dd52:	f04f 0a00 	mov.w	sl, #0
 800dd56:	65a1      	str	r1, [r4, #88]	; 0x58
 800dd58:	e7df      	b.n	800dd1a <_printf_float+0x162>
 800dd5a:	b913      	cbnz	r3, 800dd62 <_printf_float+0x1aa>
 800dd5c:	6822      	ldr	r2, [r4, #0]
 800dd5e:	07d2      	lsls	r2, r2, #31
 800dd60:	d501      	bpl.n	800dd66 <_printf_float+0x1ae>
 800dd62:	3302      	adds	r3, #2
 800dd64:	e7f4      	b.n	800dd50 <_printf_float+0x198>
 800dd66:	2301      	movs	r3, #1
 800dd68:	e7f2      	b.n	800dd50 <_printf_float+0x198>
 800dd6a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800dd6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd70:	4299      	cmp	r1, r3
 800dd72:	db05      	blt.n	800dd80 <_printf_float+0x1c8>
 800dd74:	6823      	ldr	r3, [r4, #0]
 800dd76:	6121      	str	r1, [r4, #16]
 800dd78:	07d8      	lsls	r0, r3, #31
 800dd7a:	d5ea      	bpl.n	800dd52 <_printf_float+0x19a>
 800dd7c:	1c4b      	adds	r3, r1, #1
 800dd7e:	e7e7      	b.n	800dd50 <_printf_float+0x198>
 800dd80:	2900      	cmp	r1, #0
 800dd82:	bfcc      	ite	gt
 800dd84:	2201      	movgt	r2, #1
 800dd86:	f1c1 0202 	rsble	r2, r1, #2
 800dd8a:	4413      	add	r3, r2
 800dd8c:	e7e0      	b.n	800dd50 <_printf_float+0x198>
 800dd8e:	6823      	ldr	r3, [r4, #0]
 800dd90:	055a      	lsls	r2, r3, #21
 800dd92:	d407      	bmi.n	800dda4 <_printf_float+0x1ec>
 800dd94:	6923      	ldr	r3, [r4, #16]
 800dd96:	4642      	mov	r2, r8
 800dd98:	4631      	mov	r1, r6
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	47b8      	blx	r7
 800dd9e:	3001      	adds	r0, #1
 800dda0:	d12b      	bne.n	800ddfa <_printf_float+0x242>
 800dda2:	e764      	b.n	800dc6e <_printf_float+0xb6>
 800dda4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dda8:	f240 80dd 	bls.w	800df66 <_printf_float+0x3ae>
 800ddac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	f7f2 fe72 	bl	8000a9c <__aeabi_dcmpeq>
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	d033      	beq.n	800de24 <_printf_float+0x26c>
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	4631      	mov	r1, r6
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	4a35      	ldr	r2, [pc, #212]	; (800de98 <_printf_float+0x2e0>)
 800ddc4:	47b8      	blx	r7
 800ddc6:	3001      	adds	r0, #1
 800ddc8:	f43f af51 	beq.w	800dc6e <_printf_float+0xb6>
 800ddcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	db02      	blt.n	800ddda <_printf_float+0x222>
 800ddd4:	6823      	ldr	r3, [r4, #0]
 800ddd6:	07d8      	lsls	r0, r3, #31
 800ddd8:	d50f      	bpl.n	800ddfa <_printf_float+0x242>
 800ddda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ddde:	4631      	mov	r1, r6
 800dde0:	4628      	mov	r0, r5
 800dde2:	47b8      	blx	r7
 800dde4:	3001      	adds	r0, #1
 800dde6:	f43f af42 	beq.w	800dc6e <_printf_float+0xb6>
 800ddea:	f04f 0800 	mov.w	r8, #0
 800ddee:	f104 091a 	add.w	r9, r4, #26
 800ddf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	4543      	cmp	r3, r8
 800ddf8:	dc09      	bgt.n	800de0e <_printf_float+0x256>
 800ddfa:	6823      	ldr	r3, [r4, #0]
 800ddfc:	079b      	lsls	r3, r3, #30
 800ddfe:	f100 8102 	bmi.w	800e006 <_printf_float+0x44e>
 800de02:	68e0      	ldr	r0, [r4, #12]
 800de04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de06:	4298      	cmp	r0, r3
 800de08:	bfb8      	it	lt
 800de0a:	4618      	movlt	r0, r3
 800de0c:	e731      	b.n	800dc72 <_printf_float+0xba>
 800de0e:	2301      	movs	r3, #1
 800de10:	464a      	mov	r2, r9
 800de12:	4631      	mov	r1, r6
 800de14:	4628      	mov	r0, r5
 800de16:	47b8      	blx	r7
 800de18:	3001      	adds	r0, #1
 800de1a:	f43f af28 	beq.w	800dc6e <_printf_float+0xb6>
 800de1e:	f108 0801 	add.w	r8, r8, #1
 800de22:	e7e6      	b.n	800ddf2 <_printf_float+0x23a>
 800de24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de26:	2b00      	cmp	r3, #0
 800de28:	dc38      	bgt.n	800de9c <_printf_float+0x2e4>
 800de2a:	2301      	movs	r3, #1
 800de2c:	4631      	mov	r1, r6
 800de2e:	4628      	mov	r0, r5
 800de30:	4a19      	ldr	r2, [pc, #100]	; (800de98 <_printf_float+0x2e0>)
 800de32:	47b8      	blx	r7
 800de34:	3001      	adds	r0, #1
 800de36:	f43f af1a 	beq.w	800dc6e <_printf_float+0xb6>
 800de3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800de3e:	4313      	orrs	r3, r2
 800de40:	d102      	bne.n	800de48 <_printf_float+0x290>
 800de42:	6823      	ldr	r3, [r4, #0]
 800de44:	07d9      	lsls	r1, r3, #31
 800de46:	d5d8      	bpl.n	800ddfa <_printf_float+0x242>
 800de48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de4c:	4631      	mov	r1, r6
 800de4e:	4628      	mov	r0, r5
 800de50:	47b8      	blx	r7
 800de52:	3001      	adds	r0, #1
 800de54:	f43f af0b 	beq.w	800dc6e <_printf_float+0xb6>
 800de58:	f04f 0900 	mov.w	r9, #0
 800de5c:	f104 0a1a 	add.w	sl, r4, #26
 800de60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de62:	425b      	negs	r3, r3
 800de64:	454b      	cmp	r3, r9
 800de66:	dc01      	bgt.n	800de6c <_printf_float+0x2b4>
 800de68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de6a:	e794      	b.n	800dd96 <_printf_float+0x1de>
 800de6c:	2301      	movs	r3, #1
 800de6e:	4652      	mov	r2, sl
 800de70:	4631      	mov	r1, r6
 800de72:	4628      	mov	r0, r5
 800de74:	47b8      	blx	r7
 800de76:	3001      	adds	r0, #1
 800de78:	f43f aef9 	beq.w	800dc6e <_printf_float+0xb6>
 800de7c:	f109 0901 	add.w	r9, r9, #1
 800de80:	e7ee      	b.n	800de60 <_printf_float+0x2a8>
 800de82:	bf00      	nop
 800de84:	7fefffff 	.word	0x7fefffff
 800de88:	08012439 	.word	0x08012439
 800de8c:	0801243d 	.word	0x0801243d
 800de90:	08012445 	.word	0x08012445
 800de94:	08012441 	.word	0x08012441
 800de98:	08012449 	.word	0x08012449
 800de9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dea0:	429a      	cmp	r2, r3
 800dea2:	bfa8      	it	ge
 800dea4:	461a      	movge	r2, r3
 800dea6:	2a00      	cmp	r2, #0
 800dea8:	4691      	mov	r9, r2
 800deaa:	dc37      	bgt.n	800df1c <_printf_float+0x364>
 800deac:	f04f 0b00 	mov.w	fp, #0
 800deb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800deb4:	f104 021a 	add.w	r2, r4, #26
 800deb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800debc:	ebaa 0309 	sub.w	r3, sl, r9
 800dec0:	455b      	cmp	r3, fp
 800dec2:	dc33      	bgt.n	800df2c <_printf_float+0x374>
 800dec4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800dec8:	429a      	cmp	r2, r3
 800deca:	db3b      	blt.n	800df44 <_printf_float+0x38c>
 800decc:	6823      	ldr	r3, [r4, #0]
 800dece:	07da      	lsls	r2, r3, #31
 800ded0:	d438      	bmi.n	800df44 <_printf_float+0x38c>
 800ded2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ded4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ded6:	eba2 030a 	sub.w	r3, r2, sl
 800deda:	eba2 0901 	sub.w	r9, r2, r1
 800dede:	4599      	cmp	r9, r3
 800dee0:	bfa8      	it	ge
 800dee2:	4699      	movge	r9, r3
 800dee4:	f1b9 0f00 	cmp.w	r9, #0
 800dee8:	dc34      	bgt.n	800df54 <_printf_float+0x39c>
 800deea:	f04f 0800 	mov.w	r8, #0
 800deee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800def2:	f104 0a1a 	add.w	sl, r4, #26
 800def6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800defa:	1a9b      	subs	r3, r3, r2
 800defc:	eba3 0309 	sub.w	r3, r3, r9
 800df00:	4543      	cmp	r3, r8
 800df02:	f77f af7a 	ble.w	800ddfa <_printf_float+0x242>
 800df06:	2301      	movs	r3, #1
 800df08:	4652      	mov	r2, sl
 800df0a:	4631      	mov	r1, r6
 800df0c:	4628      	mov	r0, r5
 800df0e:	47b8      	blx	r7
 800df10:	3001      	adds	r0, #1
 800df12:	f43f aeac 	beq.w	800dc6e <_printf_float+0xb6>
 800df16:	f108 0801 	add.w	r8, r8, #1
 800df1a:	e7ec      	b.n	800def6 <_printf_float+0x33e>
 800df1c:	4613      	mov	r3, r2
 800df1e:	4631      	mov	r1, r6
 800df20:	4642      	mov	r2, r8
 800df22:	4628      	mov	r0, r5
 800df24:	47b8      	blx	r7
 800df26:	3001      	adds	r0, #1
 800df28:	d1c0      	bne.n	800deac <_printf_float+0x2f4>
 800df2a:	e6a0      	b.n	800dc6e <_printf_float+0xb6>
 800df2c:	2301      	movs	r3, #1
 800df2e:	4631      	mov	r1, r6
 800df30:	4628      	mov	r0, r5
 800df32:	920b      	str	r2, [sp, #44]	; 0x2c
 800df34:	47b8      	blx	r7
 800df36:	3001      	adds	r0, #1
 800df38:	f43f ae99 	beq.w	800dc6e <_printf_float+0xb6>
 800df3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df3e:	f10b 0b01 	add.w	fp, fp, #1
 800df42:	e7b9      	b.n	800deb8 <_printf_float+0x300>
 800df44:	4631      	mov	r1, r6
 800df46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df4a:	4628      	mov	r0, r5
 800df4c:	47b8      	blx	r7
 800df4e:	3001      	adds	r0, #1
 800df50:	d1bf      	bne.n	800ded2 <_printf_float+0x31a>
 800df52:	e68c      	b.n	800dc6e <_printf_float+0xb6>
 800df54:	464b      	mov	r3, r9
 800df56:	4631      	mov	r1, r6
 800df58:	4628      	mov	r0, r5
 800df5a:	eb08 020a 	add.w	r2, r8, sl
 800df5e:	47b8      	blx	r7
 800df60:	3001      	adds	r0, #1
 800df62:	d1c2      	bne.n	800deea <_printf_float+0x332>
 800df64:	e683      	b.n	800dc6e <_printf_float+0xb6>
 800df66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df68:	2a01      	cmp	r2, #1
 800df6a:	dc01      	bgt.n	800df70 <_printf_float+0x3b8>
 800df6c:	07db      	lsls	r3, r3, #31
 800df6e:	d537      	bpl.n	800dfe0 <_printf_float+0x428>
 800df70:	2301      	movs	r3, #1
 800df72:	4642      	mov	r2, r8
 800df74:	4631      	mov	r1, r6
 800df76:	4628      	mov	r0, r5
 800df78:	47b8      	blx	r7
 800df7a:	3001      	adds	r0, #1
 800df7c:	f43f ae77 	beq.w	800dc6e <_printf_float+0xb6>
 800df80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df84:	4631      	mov	r1, r6
 800df86:	4628      	mov	r0, r5
 800df88:	47b8      	blx	r7
 800df8a:	3001      	adds	r0, #1
 800df8c:	f43f ae6f 	beq.w	800dc6e <_printf_float+0xb6>
 800df90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df94:	2200      	movs	r2, #0
 800df96:	2300      	movs	r3, #0
 800df98:	f7f2 fd80 	bl	8000a9c <__aeabi_dcmpeq>
 800df9c:	b9d8      	cbnz	r0, 800dfd6 <_printf_float+0x41e>
 800df9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfa0:	f108 0201 	add.w	r2, r8, #1
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	4631      	mov	r1, r6
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	47b8      	blx	r7
 800dfac:	3001      	adds	r0, #1
 800dfae:	d10e      	bne.n	800dfce <_printf_float+0x416>
 800dfb0:	e65d      	b.n	800dc6e <_printf_float+0xb6>
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	464a      	mov	r2, r9
 800dfb6:	4631      	mov	r1, r6
 800dfb8:	4628      	mov	r0, r5
 800dfba:	47b8      	blx	r7
 800dfbc:	3001      	adds	r0, #1
 800dfbe:	f43f ae56 	beq.w	800dc6e <_printf_float+0xb6>
 800dfc2:	f108 0801 	add.w	r8, r8, #1
 800dfc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfc8:	3b01      	subs	r3, #1
 800dfca:	4543      	cmp	r3, r8
 800dfcc:	dcf1      	bgt.n	800dfb2 <_printf_float+0x3fa>
 800dfce:	4653      	mov	r3, sl
 800dfd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dfd4:	e6e0      	b.n	800dd98 <_printf_float+0x1e0>
 800dfd6:	f04f 0800 	mov.w	r8, #0
 800dfda:	f104 091a 	add.w	r9, r4, #26
 800dfde:	e7f2      	b.n	800dfc6 <_printf_float+0x40e>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	4642      	mov	r2, r8
 800dfe4:	e7df      	b.n	800dfa6 <_printf_float+0x3ee>
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	464a      	mov	r2, r9
 800dfea:	4631      	mov	r1, r6
 800dfec:	4628      	mov	r0, r5
 800dfee:	47b8      	blx	r7
 800dff0:	3001      	adds	r0, #1
 800dff2:	f43f ae3c 	beq.w	800dc6e <_printf_float+0xb6>
 800dff6:	f108 0801 	add.w	r8, r8, #1
 800dffa:	68e3      	ldr	r3, [r4, #12]
 800dffc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dffe:	1a5b      	subs	r3, r3, r1
 800e000:	4543      	cmp	r3, r8
 800e002:	dcf0      	bgt.n	800dfe6 <_printf_float+0x42e>
 800e004:	e6fd      	b.n	800de02 <_printf_float+0x24a>
 800e006:	f04f 0800 	mov.w	r8, #0
 800e00a:	f104 0919 	add.w	r9, r4, #25
 800e00e:	e7f4      	b.n	800dffa <_printf_float+0x442>

0800e010 <_printf_common>:
 800e010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e014:	4616      	mov	r6, r2
 800e016:	4699      	mov	r9, r3
 800e018:	688a      	ldr	r2, [r1, #8]
 800e01a:	690b      	ldr	r3, [r1, #16]
 800e01c:	4607      	mov	r7, r0
 800e01e:	4293      	cmp	r3, r2
 800e020:	bfb8      	it	lt
 800e022:	4613      	movlt	r3, r2
 800e024:	6033      	str	r3, [r6, #0]
 800e026:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e02a:	460c      	mov	r4, r1
 800e02c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e030:	b10a      	cbz	r2, 800e036 <_printf_common+0x26>
 800e032:	3301      	adds	r3, #1
 800e034:	6033      	str	r3, [r6, #0]
 800e036:	6823      	ldr	r3, [r4, #0]
 800e038:	0699      	lsls	r1, r3, #26
 800e03a:	bf42      	ittt	mi
 800e03c:	6833      	ldrmi	r3, [r6, #0]
 800e03e:	3302      	addmi	r3, #2
 800e040:	6033      	strmi	r3, [r6, #0]
 800e042:	6825      	ldr	r5, [r4, #0]
 800e044:	f015 0506 	ands.w	r5, r5, #6
 800e048:	d106      	bne.n	800e058 <_printf_common+0x48>
 800e04a:	f104 0a19 	add.w	sl, r4, #25
 800e04e:	68e3      	ldr	r3, [r4, #12]
 800e050:	6832      	ldr	r2, [r6, #0]
 800e052:	1a9b      	subs	r3, r3, r2
 800e054:	42ab      	cmp	r3, r5
 800e056:	dc28      	bgt.n	800e0aa <_printf_common+0x9a>
 800e058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e05c:	1e13      	subs	r3, r2, #0
 800e05e:	6822      	ldr	r2, [r4, #0]
 800e060:	bf18      	it	ne
 800e062:	2301      	movne	r3, #1
 800e064:	0692      	lsls	r2, r2, #26
 800e066:	d42d      	bmi.n	800e0c4 <_printf_common+0xb4>
 800e068:	4649      	mov	r1, r9
 800e06a:	4638      	mov	r0, r7
 800e06c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e070:	47c0      	blx	r8
 800e072:	3001      	adds	r0, #1
 800e074:	d020      	beq.n	800e0b8 <_printf_common+0xa8>
 800e076:	6823      	ldr	r3, [r4, #0]
 800e078:	68e5      	ldr	r5, [r4, #12]
 800e07a:	f003 0306 	and.w	r3, r3, #6
 800e07e:	2b04      	cmp	r3, #4
 800e080:	bf18      	it	ne
 800e082:	2500      	movne	r5, #0
 800e084:	6832      	ldr	r2, [r6, #0]
 800e086:	f04f 0600 	mov.w	r6, #0
 800e08a:	68a3      	ldr	r3, [r4, #8]
 800e08c:	bf08      	it	eq
 800e08e:	1aad      	subeq	r5, r5, r2
 800e090:	6922      	ldr	r2, [r4, #16]
 800e092:	bf08      	it	eq
 800e094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e098:	4293      	cmp	r3, r2
 800e09a:	bfc4      	itt	gt
 800e09c:	1a9b      	subgt	r3, r3, r2
 800e09e:	18ed      	addgt	r5, r5, r3
 800e0a0:	341a      	adds	r4, #26
 800e0a2:	42b5      	cmp	r5, r6
 800e0a4:	d11a      	bne.n	800e0dc <_printf_common+0xcc>
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	e008      	b.n	800e0bc <_printf_common+0xac>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	4652      	mov	r2, sl
 800e0ae:	4649      	mov	r1, r9
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	47c0      	blx	r8
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	d103      	bne.n	800e0c0 <_printf_common+0xb0>
 800e0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0c0:	3501      	adds	r5, #1
 800e0c2:	e7c4      	b.n	800e04e <_printf_common+0x3e>
 800e0c4:	2030      	movs	r0, #48	; 0x30
 800e0c6:	18e1      	adds	r1, r4, r3
 800e0c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e0cc:	1c5a      	adds	r2, r3, #1
 800e0ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e0d2:	4422      	add	r2, r4
 800e0d4:	3302      	adds	r3, #2
 800e0d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e0da:	e7c5      	b.n	800e068 <_printf_common+0x58>
 800e0dc:	2301      	movs	r3, #1
 800e0de:	4622      	mov	r2, r4
 800e0e0:	4649      	mov	r1, r9
 800e0e2:	4638      	mov	r0, r7
 800e0e4:	47c0      	blx	r8
 800e0e6:	3001      	adds	r0, #1
 800e0e8:	d0e6      	beq.n	800e0b8 <_printf_common+0xa8>
 800e0ea:	3601      	adds	r6, #1
 800e0ec:	e7d9      	b.n	800e0a2 <_printf_common+0x92>
	...

0800e0f0 <_printf_i>:
 800e0f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f4:	460c      	mov	r4, r1
 800e0f6:	7e27      	ldrb	r7, [r4, #24]
 800e0f8:	4691      	mov	r9, r2
 800e0fa:	2f78      	cmp	r7, #120	; 0x78
 800e0fc:	4680      	mov	r8, r0
 800e0fe:	469a      	mov	sl, r3
 800e100:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e102:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e106:	d807      	bhi.n	800e118 <_printf_i+0x28>
 800e108:	2f62      	cmp	r7, #98	; 0x62
 800e10a:	d80a      	bhi.n	800e122 <_printf_i+0x32>
 800e10c:	2f00      	cmp	r7, #0
 800e10e:	f000 80d9 	beq.w	800e2c4 <_printf_i+0x1d4>
 800e112:	2f58      	cmp	r7, #88	; 0x58
 800e114:	f000 80a4 	beq.w	800e260 <_printf_i+0x170>
 800e118:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e11c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e120:	e03a      	b.n	800e198 <_printf_i+0xa8>
 800e122:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e126:	2b15      	cmp	r3, #21
 800e128:	d8f6      	bhi.n	800e118 <_printf_i+0x28>
 800e12a:	a001      	add	r0, pc, #4	; (adr r0, 800e130 <_printf_i+0x40>)
 800e12c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e130:	0800e189 	.word	0x0800e189
 800e134:	0800e19d 	.word	0x0800e19d
 800e138:	0800e119 	.word	0x0800e119
 800e13c:	0800e119 	.word	0x0800e119
 800e140:	0800e119 	.word	0x0800e119
 800e144:	0800e119 	.word	0x0800e119
 800e148:	0800e19d 	.word	0x0800e19d
 800e14c:	0800e119 	.word	0x0800e119
 800e150:	0800e119 	.word	0x0800e119
 800e154:	0800e119 	.word	0x0800e119
 800e158:	0800e119 	.word	0x0800e119
 800e15c:	0800e2ab 	.word	0x0800e2ab
 800e160:	0800e1cd 	.word	0x0800e1cd
 800e164:	0800e28d 	.word	0x0800e28d
 800e168:	0800e119 	.word	0x0800e119
 800e16c:	0800e119 	.word	0x0800e119
 800e170:	0800e2cd 	.word	0x0800e2cd
 800e174:	0800e119 	.word	0x0800e119
 800e178:	0800e1cd 	.word	0x0800e1cd
 800e17c:	0800e119 	.word	0x0800e119
 800e180:	0800e119 	.word	0x0800e119
 800e184:	0800e295 	.word	0x0800e295
 800e188:	680b      	ldr	r3, [r1, #0]
 800e18a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e18e:	1d1a      	adds	r2, r3, #4
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	600a      	str	r2, [r1, #0]
 800e194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e198:	2301      	movs	r3, #1
 800e19a:	e0a4      	b.n	800e2e6 <_printf_i+0x1f6>
 800e19c:	6825      	ldr	r5, [r4, #0]
 800e19e:	6808      	ldr	r0, [r1, #0]
 800e1a0:	062e      	lsls	r6, r5, #24
 800e1a2:	f100 0304 	add.w	r3, r0, #4
 800e1a6:	d50a      	bpl.n	800e1be <_printf_i+0xce>
 800e1a8:	6805      	ldr	r5, [r0, #0]
 800e1aa:	600b      	str	r3, [r1, #0]
 800e1ac:	2d00      	cmp	r5, #0
 800e1ae:	da03      	bge.n	800e1b8 <_printf_i+0xc8>
 800e1b0:	232d      	movs	r3, #45	; 0x2d
 800e1b2:	426d      	negs	r5, r5
 800e1b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1b8:	230a      	movs	r3, #10
 800e1ba:	485e      	ldr	r0, [pc, #376]	; (800e334 <_printf_i+0x244>)
 800e1bc:	e019      	b.n	800e1f2 <_printf_i+0x102>
 800e1be:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e1c2:	6805      	ldr	r5, [r0, #0]
 800e1c4:	600b      	str	r3, [r1, #0]
 800e1c6:	bf18      	it	ne
 800e1c8:	b22d      	sxthne	r5, r5
 800e1ca:	e7ef      	b.n	800e1ac <_printf_i+0xbc>
 800e1cc:	680b      	ldr	r3, [r1, #0]
 800e1ce:	6825      	ldr	r5, [r4, #0]
 800e1d0:	1d18      	adds	r0, r3, #4
 800e1d2:	6008      	str	r0, [r1, #0]
 800e1d4:	0628      	lsls	r0, r5, #24
 800e1d6:	d501      	bpl.n	800e1dc <_printf_i+0xec>
 800e1d8:	681d      	ldr	r5, [r3, #0]
 800e1da:	e002      	b.n	800e1e2 <_printf_i+0xf2>
 800e1dc:	0669      	lsls	r1, r5, #25
 800e1de:	d5fb      	bpl.n	800e1d8 <_printf_i+0xe8>
 800e1e0:	881d      	ldrh	r5, [r3, #0]
 800e1e2:	2f6f      	cmp	r7, #111	; 0x6f
 800e1e4:	bf0c      	ite	eq
 800e1e6:	2308      	moveq	r3, #8
 800e1e8:	230a      	movne	r3, #10
 800e1ea:	4852      	ldr	r0, [pc, #328]	; (800e334 <_printf_i+0x244>)
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e1f2:	6866      	ldr	r6, [r4, #4]
 800e1f4:	2e00      	cmp	r6, #0
 800e1f6:	bfa8      	it	ge
 800e1f8:	6821      	ldrge	r1, [r4, #0]
 800e1fa:	60a6      	str	r6, [r4, #8]
 800e1fc:	bfa4      	itt	ge
 800e1fe:	f021 0104 	bicge.w	r1, r1, #4
 800e202:	6021      	strge	r1, [r4, #0]
 800e204:	b90d      	cbnz	r5, 800e20a <_printf_i+0x11a>
 800e206:	2e00      	cmp	r6, #0
 800e208:	d04d      	beq.n	800e2a6 <_printf_i+0x1b6>
 800e20a:	4616      	mov	r6, r2
 800e20c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e210:	fb03 5711 	mls	r7, r3, r1, r5
 800e214:	5dc7      	ldrb	r7, [r0, r7]
 800e216:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e21a:	462f      	mov	r7, r5
 800e21c:	42bb      	cmp	r3, r7
 800e21e:	460d      	mov	r5, r1
 800e220:	d9f4      	bls.n	800e20c <_printf_i+0x11c>
 800e222:	2b08      	cmp	r3, #8
 800e224:	d10b      	bne.n	800e23e <_printf_i+0x14e>
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	07df      	lsls	r7, r3, #31
 800e22a:	d508      	bpl.n	800e23e <_printf_i+0x14e>
 800e22c:	6923      	ldr	r3, [r4, #16]
 800e22e:	6861      	ldr	r1, [r4, #4]
 800e230:	4299      	cmp	r1, r3
 800e232:	bfde      	ittt	le
 800e234:	2330      	movle	r3, #48	; 0x30
 800e236:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e23a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e23e:	1b92      	subs	r2, r2, r6
 800e240:	6122      	str	r2, [r4, #16]
 800e242:	464b      	mov	r3, r9
 800e244:	4621      	mov	r1, r4
 800e246:	4640      	mov	r0, r8
 800e248:	f8cd a000 	str.w	sl, [sp]
 800e24c:	aa03      	add	r2, sp, #12
 800e24e:	f7ff fedf 	bl	800e010 <_printf_common>
 800e252:	3001      	adds	r0, #1
 800e254:	d14c      	bne.n	800e2f0 <_printf_i+0x200>
 800e256:	f04f 30ff 	mov.w	r0, #4294967295
 800e25a:	b004      	add	sp, #16
 800e25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e260:	4834      	ldr	r0, [pc, #208]	; (800e334 <_printf_i+0x244>)
 800e262:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e266:	680e      	ldr	r6, [r1, #0]
 800e268:	6823      	ldr	r3, [r4, #0]
 800e26a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e26e:	061f      	lsls	r7, r3, #24
 800e270:	600e      	str	r6, [r1, #0]
 800e272:	d514      	bpl.n	800e29e <_printf_i+0x1ae>
 800e274:	07d9      	lsls	r1, r3, #31
 800e276:	bf44      	itt	mi
 800e278:	f043 0320 	orrmi.w	r3, r3, #32
 800e27c:	6023      	strmi	r3, [r4, #0]
 800e27e:	b91d      	cbnz	r5, 800e288 <_printf_i+0x198>
 800e280:	6823      	ldr	r3, [r4, #0]
 800e282:	f023 0320 	bic.w	r3, r3, #32
 800e286:	6023      	str	r3, [r4, #0]
 800e288:	2310      	movs	r3, #16
 800e28a:	e7af      	b.n	800e1ec <_printf_i+0xfc>
 800e28c:	6823      	ldr	r3, [r4, #0]
 800e28e:	f043 0320 	orr.w	r3, r3, #32
 800e292:	6023      	str	r3, [r4, #0]
 800e294:	2378      	movs	r3, #120	; 0x78
 800e296:	4828      	ldr	r0, [pc, #160]	; (800e338 <_printf_i+0x248>)
 800e298:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e29c:	e7e3      	b.n	800e266 <_printf_i+0x176>
 800e29e:	065e      	lsls	r6, r3, #25
 800e2a0:	bf48      	it	mi
 800e2a2:	b2ad      	uxthmi	r5, r5
 800e2a4:	e7e6      	b.n	800e274 <_printf_i+0x184>
 800e2a6:	4616      	mov	r6, r2
 800e2a8:	e7bb      	b.n	800e222 <_printf_i+0x132>
 800e2aa:	680b      	ldr	r3, [r1, #0]
 800e2ac:	6826      	ldr	r6, [r4, #0]
 800e2ae:	1d1d      	adds	r5, r3, #4
 800e2b0:	6960      	ldr	r0, [r4, #20]
 800e2b2:	600d      	str	r5, [r1, #0]
 800e2b4:	0635      	lsls	r5, r6, #24
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	d501      	bpl.n	800e2be <_printf_i+0x1ce>
 800e2ba:	6018      	str	r0, [r3, #0]
 800e2bc:	e002      	b.n	800e2c4 <_printf_i+0x1d4>
 800e2be:	0671      	lsls	r1, r6, #25
 800e2c0:	d5fb      	bpl.n	800e2ba <_printf_i+0x1ca>
 800e2c2:	8018      	strh	r0, [r3, #0]
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	4616      	mov	r6, r2
 800e2c8:	6123      	str	r3, [r4, #16]
 800e2ca:	e7ba      	b.n	800e242 <_printf_i+0x152>
 800e2cc:	680b      	ldr	r3, [r1, #0]
 800e2ce:	1d1a      	adds	r2, r3, #4
 800e2d0:	600a      	str	r2, [r1, #0]
 800e2d2:	681e      	ldr	r6, [r3, #0]
 800e2d4:	2100      	movs	r1, #0
 800e2d6:	4630      	mov	r0, r6
 800e2d8:	6862      	ldr	r2, [r4, #4]
 800e2da:	f001 f9ff 	bl	800f6dc <memchr>
 800e2de:	b108      	cbz	r0, 800e2e4 <_printf_i+0x1f4>
 800e2e0:	1b80      	subs	r0, r0, r6
 800e2e2:	6060      	str	r0, [r4, #4]
 800e2e4:	6863      	ldr	r3, [r4, #4]
 800e2e6:	6123      	str	r3, [r4, #16]
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2ee:	e7a8      	b.n	800e242 <_printf_i+0x152>
 800e2f0:	4632      	mov	r2, r6
 800e2f2:	4649      	mov	r1, r9
 800e2f4:	4640      	mov	r0, r8
 800e2f6:	6923      	ldr	r3, [r4, #16]
 800e2f8:	47d0      	blx	sl
 800e2fa:	3001      	adds	r0, #1
 800e2fc:	d0ab      	beq.n	800e256 <_printf_i+0x166>
 800e2fe:	6823      	ldr	r3, [r4, #0]
 800e300:	079b      	lsls	r3, r3, #30
 800e302:	d413      	bmi.n	800e32c <_printf_i+0x23c>
 800e304:	68e0      	ldr	r0, [r4, #12]
 800e306:	9b03      	ldr	r3, [sp, #12]
 800e308:	4298      	cmp	r0, r3
 800e30a:	bfb8      	it	lt
 800e30c:	4618      	movlt	r0, r3
 800e30e:	e7a4      	b.n	800e25a <_printf_i+0x16a>
 800e310:	2301      	movs	r3, #1
 800e312:	4632      	mov	r2, r6
 800e314:	4649      	mov	r1, r9
 800e316:	4640      	mov	r0, r8
 800e318:	47d0      	blx	sl
 800e31a:	3001      	adds	r0, #1
 800e31c:	d09b      	beq.n	800e256 <_printf_i+0x166>
 800e31e:	3501      	adds	r5, #1
 800e320:	68e3      	ldr	r3, [r4, #12]
 800e322:	9903      	ldr	r1, [sp, #12]
 800e324:	1a5b      	subs	r3, r3, r1
 800e326:	42ab      	cmp	r3, r5
 800e328:	dcf2      	bgt.n	800e310 <_printf_i+0x220>
 800e32a:	e7eb      	b.n	800e304 <_printf_i+0x214>
 800e32c:	2500      	movs	r5, #0
 800e32e:	f104 0619 	add.w	r6, r4, #25
 800e332:	e7f5      	b.n	800e320 <_printf_i+0x230>
 800e334:	0801244b 	.word	0x0801244b
 800e338:	0801245c 	.word	0x0801245c

0800e33c <iprintf>:
 800e33c:	b40f      	push	{r0, r1, r2, r3}
 800e33e:	4b0a      	ldr	r3, [pc, #40]	; (800e368 <iprintf+0x2c>)
 800e340:	b513      	push	{r0, r1, r4, lr}
 800e342:	681c      	ldr	r4, [r3, #0]
 800e344:	b124      	cbz	r4, 800e350 <iprintf+0x14>
 800e346:	69a3      	ldr	r3, [r4, #24]
 800e348:	b913      	cbnz	r3, 800e350 <iprintf+0x14>
 800e34a:	4620      	mov	r0, r4
 800e34c:	f001 f8b4 	bl	800f4b8 <__sinit>
 800e350:	ab05      	add	r3, sp, #20
 800e352:	4620      	mov	r0, r4
 800e354:	9a04      	ldr	r2, [sp, #16]
 800e356:	68a1      	ldr	r1, [r4, #8]
 800e358:	9301      	str	r3, [sp, #4]
 800e35a:	f7ff fa5f 	bl	800d81c <_vfiprintf_r>
 800e35e:	b002      	add	sp, #8
 800e360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e364:	b004      	add	sp, #16
 800e366:	4770      	bx	lr
 800e368:	20000158 	.word	0x20000158

0800e36c <sniprintf>:
 800e36c:	b40c      	push	{r2, r3}
 800e36e:	b530      	push	{r4, r5, lr}
 800e370:	4b17      	ldr	r3, [pc, #92]	; (800e3d0 <sniprintf+0x64>)
 800e372:	1e0c      	subs	r4, r1, #0
 800e374:	681d      	ldr	r5, [r3, #0]
 800e376:	b09d      	sub	sp, #116	; 0x74
 800e378:	da08      	bge.n	800e38c <sniprintf+0x20>
 800e37a:	238b      	movs	r3, #139	; 0x8b
 800e37c:	f04f 30ff 	mov.w	r0, #4294967295
 800e380:	602b      	str	r3, [r5, #0]
 800e382:	b01d      	add	sp, #116	; 0x74
 800e384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e388:	b002      	add	sp, #8
 800e38a:	4770      	bx	lr
 800e38c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e390:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e394:	bf0c      	ite	eq
 800e396:	4623      	moveq	r3, r4
 800e398:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e39c:	9304      	str	r3, [sp, #16]
 800e39e:	9307      	str	r3, [sp, #28]
 800e3a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3a4:	9002      	str	r0, [sp, #8]
 800e3a6:	9006      	str	r0, [sp, #24]
 800e3a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	ab21      	add	r3, sp, #132	; 0x84
 800e3b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e3b2:	a902      	add	r1, sp, #8
 800e3b4:	9301      	str	r3, [sp, #4]
 800e3b6:	f001 fe71 	bl	801009c <_svfiprintf_r>
 800e3ba:	1c43      	adds	r3, r0, #1
 800e3bc:	bfbc      	itt	lt
 800e3be:	238b      	movlt	r3, #139	; 0x8b
 800e3c0:	602b      	strlt	r3, [r5, #0]
 800e3c2:	2c00      	cmp	r4, #0
 800e3c4:	d0dd      	beq.n	800e382 <sniprintf+0x16>
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	9b02      	ldr	r3, [sp, #8]
 800e3ca:	701a      	strb	r2, [r3, #0]
 800e3cc:	e7d9      	b.n	800e382 <sniprintf+0x16>
 800e3ce:	bf00      	nop
 800e3d0:	20000158 	.word	0x20000158

0800e3d4 <strcpy>:
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3da:	f803 2b01 	strb.w	r2, [r3], #1
 800e3de:	2a00      	cmp	r2, #0
 800e3e0:	d1f9      	bne.n	800e3d6 <strcpy+0x2>
 800e3e2:	4770      	bx	lr

0800e3e4 <strnlen>:
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	b510      	push	{r4, lr}
 800e3e8:	4401      	add	r1, r0
 800e3ea:	428a      	cmp	r2, r1
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	d101      	bne.n	800e3f4 <strnlen+0x10>
 800e3f0:	1a18      	subs	r0, r3, r0
 800e3f2:	bd10      	pop	{r4, pc}
 800e3f4:	781c      	ldrb	r4, [r3, #0]
 800e3f6:	3201      	adds	r2, #1
 800e3f8:	2c00      	cmp	r4, #0
 800e3fa:	d1f6      	bne.n	800e3ea <strnlen+0x6>
 800e3fc:	e7f8      	b.n	800e3f0 <strnlen+0xc>
	...

0800e400 <__swbuf_r>:
 800e400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e402:	460e      	mov	r6, r1
 800e404:	4614      	mov	r4, r2
 800e406:	4605      	mov	r5, r0
 800e408:	b118      	cbz	r0, 800e412 <__swbuf_r+0x12>
 800e40a:	6983      	ldr	r3, [r0, #24]
 800e40c:	b90b      	cbnz	r3, 800e412 <__swbuf_r+0x12>
 800e40e:	f001 f853 	bl	800f4b8 <__sinit>
 800e412:	4b21      	ldr	r3, [pc, #132]	; (800e498 <__swbuf_r+0x98>)
 800e414:	429c      	cmp	r4, r3
 800e416:	d12b      	bne.n	800e470 <__swbuf_r+0x70>
 800e418:	686c      	ldr	r4, [r5, #4]
 800e41a:	69a3      	ldr	r3, [r4, #24]
 800e41c:	60a3      	str	r3, [r4, #8]
 800e41e:	89a3      	ldrh	r3, [r4, #12]
 800e420:	071a      	lsls	r2, r3, #28
 800e422:	d52f      	bpl.n	800e484 <__swbuf_r+0x84>
 800e424:	6923      	ldr	r3, [r4, #16]
 800e426:	b36b      	cbz	r3, 800e484 <__swbuf_r+0x84>
 800e428:	6923      	ldr	r3, [r4, #16]
 800e42a:	6820      	ldr	r0, [r4, #0]
 800e42c:	b2f6      	uxtb	r6, r6
 800e42e:	1ac0      	subs	r0, r0, r3
 800e430:	6963      	ldr	r3, [r4, #20]
 800e432:	4637      	mov	r7, r6
 800e434:	4283      	cmp	r3, r0
 800e436:	dc04      	bgt.n	800e442 <__swbuf_r+0x42>
 800e438:	4621      	mov	r1, r4
 800e43a:	4628      	mov	r0, r5
 800e43c:	f000 ffa8 	bl	800f390 <_fflush_r>
 800e440:	bb30      	cbnz	r0, 800e490 <__swbuf_r+0x90>
 800e442:	68a3      	ldr	r3, [r4, #8]
 800e444:	3001      	adds	r0, #1
 800e446:	3b01      	subs	r3, #1
 800e448:	60a3      	str	r3, [r4, #8]
 800e44a:	6823      	ldr	r3, [r4, #0]
 800e44c:	1c5a      	adds	r2, r3, #1
 800e44e:	6022      	str	r2, [r4, #0]
 800e450:	701e      	strb	r6, [r3, #0]
 800e452:	6963      	ldr	r3, [r4, #20]
 800e454:	4283      	cmp	r3, r0
 800e456:	d004      	beq.n	800e462 <__swbuf_r+0x62>
 800e458:	89a3      	ldrh	r3, [r4, #12]
 800e45a:	07db      	lsls	r3, r3, #31
 800e45c:	d506      	bpl.n	800e46c <__swbuf_r+0x6c>
 800e45e:	2e0a      	cmp	r6, #10
 800e460:	d104      	bne.n	800e46c <__swbuf_r+0x6c>
 800e462:	4621      	mov	r1, r4
 800e464:	4628      	mov	r0, r5
 800e466:	f000 ff93 	bl	800f390 <_fflush_r>
 800e46a:	b988      	cbnz	r0, 800e490 <__swbuf_r+0x90>
 800e46c:	4638      	mov	r0, r7
 800e46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e470:	4b0a      	ldr	r3, [pc, #40]	; (800e49c <__swbuf_r+0x9c>)
 800e472:	429c      	cmp	r4, r3
 800e474:	d101      	bne.n	800e47a <__swbuf_r+0x7a>
 800e476:	68ac      	ldr	r4, [r5, #8]
 800e478:	e7cf      	b.n	800e41a <__swbuf_r+0x1a>
 800e47a:	4b09      	ldr	r3, [pc, #36]	; (800e4a0 <__swbuf_r+0xa0>)
 800e47c:	429c      	cmp	r4, r3
 800e47e:	bf08      	it	eq
 800e480:	68ec      	ldreq	r4, [r5, #12]
 800e482:	e7ca      	b.n	800e41a <__swbuf_r+0x1a>
 800e484:	4621      	mov	r1, r4
 800e486:	4628      	mov	r0, r5
 800e488:	f000 f80c 	bl	800e4a4 <__swsetup_r>
 800e48c:	2800      	cmp	r0, #0
 800e48e:	d0cb      	beq.n	800e428 <__swbuf_r+0x28>
 800e490:	f04f 37ff 	mov.w	r7, #4294967295
 800e494:	e7ea      	b.n	800e46c <__swbuf_r+0x6c>
 800e496:	bf00      	nop
 800e498:	08012524 	.word	0x08012524
 800e49c:	08012544 	.word	0x08012544
 800e4a0:	08012504 	.word	0x08012504

0800e4a4 <__swsetup_r>:
 800e4a4:	4b32      	ldr	r3, [pc, #200]	; (800e570 <__swsetup_r+0xcc>)
 800e4a6:	b570      	push	{r4, r5, r6, lr}
 800e4a8:	681d      	ldr	r5, [r3, #0]
 800e4aa:	4606      	mov	r6, r0
 800e4ac:	460c      	mov	r4, r1
 800e4ae:	b125      	cbz	r5, 800e4ba <__swsetup_r+0x16>
 800e4b0:	69ab      	ldr	r3, [r5, #24]
 800e4b2:	b913      	cbnz	r3, 800e4ba <__swsetup_r+0x16>
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	f000 ffff 	bl	800f4b8 <__sinit>
 800e4ba:	4b2e      	ldr	r3, [pc, #184]	; (800e574 <__swsetup_r+0xd0>)
 800e4bc:	429c      	cmp	r4, r3
 800e4be:	d10f      	bne.n	800e4e0 <__swsetup_r+0x3c>
 800e4c0:	686c      	ldr	r4, [r5, #4]
 800e4c2:	89a3      	ldrh	r3, [r4, #12]
 800e4c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4c8:	0719      	lsls	r1, r3, #28
 800e4ca:	d42c      	bmi.n	800e526 <__swsetup_r+0x82>
 800e4cc:	06dd      	lsls	r5, r3, #27
 800e4ce:	d411      	bmi.n	800e4f4 <__swsetup_r+0x50>
 800e4d0:	2309      	movs	r3, #9
 800e4d2:	6033      	str	r3, [r6, #0]
 800e4d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4dc:	81a3      	strh	r3, [r4, #12]
 800e4de:	e03e      	b.n	800e55e <__swsetup_r+0xba>
 800e4e0:	4b25      	ldr	r3, [pc, #148]	; (800e578 <__swsetup_r+0xd4>)
 800e4e2:	429c      	cmp	r4, r3
 800e4e4:	d101      	bne.n	800e4ea <__swsetup_r+0x46>
 800e4e6:	68ac      	ldr	r4, [r5, #8]
 800e4e8:	e7eb      	b.n	800e4c2 <__swsetup_r+0x1e>
 800e4ea:	4b24      	ldr	r3, [pc, #144]	; (800e57c <__swsetup_r+0xd8>)
 800e4ec:	429c      	cmp	r4, r3
 800e4ee:	bf08      	it	eq
 800e4f0:	68ec      	ldreq	r4, [r5, #12]
 800e4f2:	e7e6      	b.n	800e4c2 <__swsetup_r+0x1e>
 800e4f4:	0758      	lsls	r0, r3, #29
 800e4f6:	d512      	bpl.n	800e51e <__swsetup_r+0x7a>
 800e4f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4fa:	b141      	cbz	r1, 800e50e <__swsetup_r+0x6a>
 800e4fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e500:	4299      	cmp	r1, r3
 800e502:	d002      	beq.n	800e50a <__swsetup_r+0x66>
 800e504:	4630      	mov	r0, r6
 800e506:	f001 fca1 	bl	800fe4c <_free_r>
 800e50a:	2300      	movs	r3, #0
 800e50c:	6363      	str	r3, [r4, #52]	; 0x34
 800e50e:	89a3      	ldrh	r3, [r4, #12]
 800e510:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e514:	81a3      	strh	r3, [r4, #12]
 800e516:	2300      	movs	r3, #0
 800e518:	6063      	str	r3, [r4, #4]
 800e51a:	6923      	ldr	r3, [r4, #16]
 800e51c:	6023      	str	r3, [r4, #0]
 800e51e:	89a3      	ldrh	r3, [r4, #12]
 800e520:	f043 0308 	orr.w	r3, r3, #8
 800e524:	81a3      	strh	r3, [r4, #12]
 800e526:	6923      	ldr	r3, [r4, #16]
 800e528:	b94b      	cbnz	r3, 800e53e <__swsetup_r+0x9a>
 800e52a:	89a3      	ldrh	r3, [r4, #12]
 800e52c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e534:	d003      	beq.n	800e53e <__swsetup_r+0x9a>
 800e536:	4621      	mov	r1, r4
 800e538:	4630      	mov	r0, r6
 800e53a:	f001 f887 	bl	800f64c <__smakebuf_r>
 800e53e:	89a0      	ldrh	r0, [r4, #12]
 800e540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e544:	f010 0301 	ands.w	r3, r0, #1
 800e548:	d00a      	beq.n	800e560 <__swsetup_r+0xbc>
 800e54a:	2300      	movs	r3, #0
 800e54c:	60a3      	str	r3, [r4, #8]
 800e54e:	6963      	ldr	r3, [r4, #20]
 800e550:	425b      	negs	r3, r3
 800e552:	61a3      	str	r3, [r4, #24]
 800e554:	6923      	ldr	r3, [r4, #16]
 800e556:	b943      	cbnz	r3, 800e56a <__swsetup_r+0xc6>
 800e558:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e55c:	d1ba      	bne.n	800e4d4 <__swsetup_r+0x30>
 800e55e:	bd70      	pop	{r4, r5, r6, pc}
 800e560:	0781      	lsls	r1, r0, #30
 800e562:	bf58      	it	pl
 800e564:	6963      	ldrpl	r3, [r4, #20]
 800e566:	60a3      	str	r3, [r4, #8]
 800e568:	e7f4      	b.n	800e554 <__swsetup_r+0xb0>
 800e56a:	2000      	movs	r0, #0
 800e56c:	e7f7      	b.n	800e55e <__swsetup_r+0xba>
 800e56e:	bf00      	nop
 800e570:	20000158 	.word	0x20000158
 800e574:	08012524 	.word	0x08012524
 800e578:	08012544 	.word	0x08012544
 800e57c:	08012504 	.word	0x08012504

0800e580 <abort>:
 800e580:	2006      	movs	r0, #6
 800e582:	b508      	push	{r3, lr}
 800e584:	f001 fec2 	bl	801030c <raise>
 800e588:	2001      	movs	r0, #1
 800e58a:	f7f5 fda6 	bl	80040da <_exit>

0800e58e <quorem>:
 800e58e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e592:	6903      	ldr	r3, [r0, #16]
 800e594:	690c      	ldr	r4, [r1, #16]
 800e596:	4607      	mov	r7, r0
 800e598:	42a3      	cmp	r3, r4
 800e59a:	f2c0 8083 	blt.w	800e6a4 <quorem+0x116>
 800e59e:	3c01      	subs	r4, #1
 800e5a0:	f100 0514 	add.w	r5, r0, #20
 800e5a4:	f101 0814 	add.w	r8, r1, #20
 800e5a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e5ac:	9301      	str	r3, [sp, #4]
 800e5ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e5b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800e5be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e5c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e5c6:	d332      	bcc.n	800e62e <quorem+0xa0>
 800e5c8:	f04f 0e00 	mov.w	lr, #0
 800e5cc:	4640      	mov	r0, r8
 800e5ce:	46ac      	mov	ip, r5
 800e5d0:	46f2      	mov	sl, lr
 800e5d2:	f850 2b04 	ldr.w	r2, [r0], #4
 800e5d6:	b293      	uxth	r3, r2
 800e5d8:	fb06 e303 	mla	r3, r6, r3, lr
 800e5dc:	0c12      	lsrs	r2, r2, #16
 800e5de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e5e2:	fb06 e202 	mla	r2, r6, r2, lr
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	ebaa 0303 	sub.w	r3, sl, r3
 800e5ec:	f8dc a000 	ldr.w	sl, [ip]
 800e5f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e5f4:	fa1f fa8a 	uxth.w	sl, sl
 800e5f8:	4453      	add	r3, sl
 800e5fa:	fa1f fa82 	uxth.w	sl, r2
 800e5fe:	f8dc 2000 	ldr.w	r2, [ip]
 800e602:	4581      	cmp	r9, r0
 800e604:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e612:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e616:	f84c 3b04 	str.w	r3, [ip], #4
 800e61a:	d2da      	bcs.n	800e5d2 <quorem+0x44>
 800e61c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e620:	b92b      	cbnz	r3, 800e62e <quorem+0xa0>
 800e622:	9b01      	ldr	r3, [sp, #4]
 800e624:	3b04      	subs	r3, #4
 800e626:	429d      	cmp	r5, r3
 800e628:	461a      	mov	r2, r3
 800e62a:	d32f      	bcc.n	800e68c <quorem+0xfe>
 800e62c:	613c      	str	r4, [r7, #16]
 800e62e:	4638      	mov	r0, r7
 800e630:	f001 faf6 	bl	800fc20 <__mcmp>
 800e634:	2800      	cmp	r0, #0
 800e636:	db25      	blt.n	800e684 <quorem+0xf6>
 800e638:	4628      	mov	r0, r5
 800e63a:	f04f 0c00 	mov.w	ip, #0
 800e63e:	3601      	adds	r6, #1
 800e640:	f858 1b04 	ldr.w	r1, [r8], #4
 800e644:	f8d0 e000 	ldr.w	lr, [r0]
 800e648:	b28b      	uxth	r3, r1
 800e64a:	ebac 0303 	sub.w	r3, ip, r3
 800e64e:	fa1f f28e 	uxth.w	r2, lr
 800e652:	4413      	add	r3, r2
 800e654:	0c0a      	lsrs	r2, r1, #16
 800e656:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e65a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e65e:	b29b      	uxth	r3, r3
 800e660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e664:	45c1      	cmp	r9, r8
 800e666:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e66a:	f840 3b04 	str.w	r3, [r0], #4
 800e66e:	d2e7      	bcs.n	800e640 <quorem+0xb2>
 800e670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e674:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e678:	b922      	cbnz	r2, 800e684 <quorem+0xf6>
 800e67a:	3b04      	subs	r3, #4
 800e67c:	429d      	cmp	r5, r3
 800e67e:	461a      	mov	r2, r3
 800e680:	d30a      	bcc.n	800e698 <quorem+0x10a>
 800e682:	613c      	str	r4, [r7, #16]
 800e684:	4630      	mov	r0, r6
 800e686:	b003      	add	sp, #12
 800e688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68c:	6812      	ldr	r2, [r2, #0]
 800e68e:	3b04      	subs	r3, #4
 800e690:	2a00      	cmp	r2, #0
 800e692:	d1cb      	bne.n	800e62c <quorem+0x9e>
 800e694:	3c01      	subs	r4, #1
 800e696:	e7c6      	b.n	800e626 <quorem+0x98>
 800e698:	6812      	ldr	r2, [r2, #0]
 800e69a:	3b04      	subs	r3, #4
 800e69c:	2a00      	cmp	r2, #0
 800e69e:	d1f0      	bne.n	800e682 <quorem+0xf4>
 800e6a0:	3c01      	subs	r4, #1
 800e6a2:	e7eb      	b.n	800e67c <quorem+0xee>
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	e7ee      	b.n	800e686 <quorem+0xf8>

0800e6a8 <_dtoa_r>:
 800e6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ac:	4616      	mov	r6, r2
 800e6ae:	461f      	mov	r7, r3
 800e6b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e6b2:	b099      	sub	sp, #100	; 0x64
 800e6b4:	4605      	mov	r5, r0
 800e6b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e6ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800e6be:	b974      	cbnz	r4, 800e6de <_dtoa_r+0x36>
 800e6c0:	2010      	movs	r0, #16
 800e6c2:	f001 f803 	bl	800f6cc <malloc>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	6268      	str	r0, [r5, #36]	; 0x24
 800e6ca:	b920      	cbnz	r0, 800e6d6 <_dtoa_r+0x2e>
 800e6cc:	21ea      	movs	r1, #234	; 0xea
 800e6ce:	4bae      	ldr	r3, [pc, #696]	; (800e988 <_dtoa_r+0x2e0>)
 800e6d0:	48ae      	ldr	r0, [pc, #696]	; (800e98c <_dtoa_r+0x2e4>)
 800e6d2:	f7ff f80b 	bl	800d6ec <__assert_func>
 800e6d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6da:	6004      	str	r4, [r0, #0]
 800e6dc:	60c4      	str	r4, [r0, #12]
 800e6de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e6e0:	6819      	ldr	r1, [r3, #0]
 800e6e2:	b151      	cbz	r1, 800e6fa <_dtoa_r+0x52>
 800e6e4:	685a      	ldr	r2, [r3, #4]
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	4093      	lsls	r3, r2
 800e6ea:	604a      	str	r2, [r1, #4]
 800e6ec:	608b      	str	r3, [r1, #8]
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f001 f85c 	bl	800f7ac <_Bfree>
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e6f8:	601a      	str	r2, [r3, #0]
 800e6fa:	1e3b      	subs	r3, r7, #0
 800e6fc:	bfaf      	iteee	ge
 800e6fe:	2300      	movge	r3, #0
 800e700:	2201      	movlt	r2, #1
 800e702:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e706:	9305      	strlt	r3, [sp, #20]
 800e708:	bfa8      	it	ge
 800e70a:	f8c8 3000 	strge.w	r3, [r8]
 800e70e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800e712:	4b9f      	ldr	r3, [pc, #636]	; (800e990 <_dtoa_r+0x2e8>)
 800e714:	bfb8      	it	lt
 800e716:	f8c8 2000 	strlt.w	r2, [r8]
 800e71a:	ea33 0309 	bics.w	r3, r3, r9
 800e71e:	d119      	bne.n	800e754 <_dtoa_r+0xac>
 800e720:	f242 730f 	movw	r3, #9999	; 0x270f
 800e724:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e726:	6013      	str	r3, [r2, #0]
 800e728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e72c:	4333      	orrs	r3, r6
 800e72e:	f000 8580 	beq.w	800f232 <_dtoa_r+0xb8a>
 800e732:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e734:	b953      	cbnz	r3, 800e74c <_dtoa_r+0xa4>
 800e736:	4b97      	ldr	r3, [pc, #604]	; (800e994 <_dtoa_r+0x2ec>)
 800e738:	e022      	b.n	800e780 <_dtoa_r+0xd8>
 800e73a:	4b97      	ldr	r3, [pc, #604]	; (800e998 <_dtoa_r+0x2f0>)
 800e73c:	9308      	str	r3, [sp, #32]
 800e73e:	3308      	adds	r3, #8
 800e740:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e742:	6013      	str	r3, [r2, #0]
 800e744:	9808      	ldr	r0, [sp, #32]
 800e746:	b019      	add	sp, #100	; 0x64
 800e748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e74c:	4b91      	ldr	r3, [pc, #580]	; (800e994 <_dtoa_r+0x2ec>)
 800e74e:	9308      	str	r3, [sp, #32]
 800e750:	3303      	adds	r3, #3
 800e752:	e7f5      	b.n	800e740 <_dtoa_r+0x98>
 800e754:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e758:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800e75c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e760:	2200      	movs	r2, #0
 800e762:	2300      	movs	r3, #0
 800e764:	f7f2 f99a 	bl	8000a9c <__aeabi_dcmpeq>
 800e768:	4680      	mov	r8, r0
 800e76a:	b158      	cbz	r0, 800e784 <_dtoa_r+0xdc>
 800e76c:	2301      	movs	r3, #1
 800e76e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e770:	6013      	str	r3, [r2, #0]
 800e772:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e774:	2b00      	cmp	r3, #0
 800e776:	f000 8559 	beq.w	800f22c <_dtoa_r+0xb84>
 800e77a:	4888      	ldr	r0, [pc, #544]	; (800e99c <_dtoa_r+0x2f4>)
 800e77c:	6018      	str	r0, [r3, #0]
 800e77e:	1e43      	subs	r3, r0, #1
 800e780:	9308      	str	r3, [sp, #32]
 800e782:	e7df      	b.n	800e744 <_dtoa_r+0x9c>
 800e784:	ab16      	add	r3, sp, #88	; 0x58
 800e786:	9301      	str	r3, [sp, #4]
 800e788:	ab17      	add	r3, sp, #92	; 0x5c
 800e78a:	9300      	str	r3, [sp, #0]
 800e78c:	4628      	mov	r0, r5
 800e78e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e792:	f001 faf1 	bl	800fd78 <__d2b>
 800e796:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e79a:	4682      	mov	sl, r0
 800e79c:	2c00      	cmp	r4, #0
 800e79e:	d07e      	beq.n	800e89e <_dtoa_r+0x1f6>
 800e7a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e7a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e7aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e7ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800e7b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e7b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	4b78      	ldr	r3, [pc, #480]	; (800e9a0 <_dtoa_r+0x2f8>)
 800e7be:	f7f1 fd4d 	bl	800025c <__aeabi_dsub>
 800e7c2:	a36b      	add	r3, pc, #428	; (adr r3, 800e970 <_dtoa_r+0x2c8>)
 800e7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c8:	f7f1 ff00 	bl	80005cc <__aeabi_dmul>
 800e7cc:	a36a      	add	r3, pc, #424	; (adr r3, 800e978 <_dtoa_r+0x2d0>)
 800e7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d2:	f7f1 fd45 	bl	8000260 <__adddf3>
 800e7d6:	4606      	mov	r6, r0
 800e7d8:	4620      	mov	r0, r4
 800e7da:	460f      	mov	r7, r1
 800e7dc:	f7f1 fe8c 	bl	80004f8 <__aeabi_i2d>
 800e7e0:	a367      	add	r3, pc, #412	; (adr r3, 800e980 <_dtoa_r+0x2d8>)
 800e7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e6:	f7f1 fef1 	bl	80005cc <__aeabi_dmul>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	4639      	mov	r1, r7
 800e7f2:	f7f1 fd35 	bl	8000260 <__adddf3>
 800e7f6:	4606      	mov	r6, r0
 800e7f8:	460f      	mov	r7, r1
 800e7fa:	f7f2 f997 	bl	8000b2c <__aeabi_d2iz>
 800e7fe:	2200      	movs	r2, #0
 800e800:	4681      	mov	r9, r0
 800e802:	2300      	movs	r3, #0
 800e804:	4630      	mov	r0, r6
 800e806:	4639      	mov	r1, r7
 800e808:	f7f2 f952 	bl	8000ab0 <__aeabi_dcmplt>
 800e80c:	b148      	cbz	r0, 800e822 <_dtoa_r+0x17a>
 800e80e:	4648      	mov	r0, r9
 800e810:	f7f1 fe72 	bl	80004f8 <__aeabi_i2d>
 800e814:	4632      	mov	r2, r6
 800e816:	463b      	mov	r3, r7
 800e818:	f7f2 f940 	bl	8000a9c <__aeabi_dcmpeq>
 800e81c:	b908      	cbnz	r0, 800e822 <_dtoa_r+0x17a>
 800e81e:	f109 39ff 	add.w	r9, r9, #4294967295
 800e822:	f1b9 0f16 	cmp.w	r9, #22
 800e826:	d857      	bhi.n	800e8d8 <_dtoa_r+0x230>
 800e828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e82c:	4b5d      	ldr	r3, [pc, #372]	; (800e9a4 <_dtoa_r+0x2fc>)
 800e82e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e836:	f7f2 f93b 	bl	8000ab0 <__aeabi_dcmplt>
 800e83a:	2800      	cmp	r0, #0
 800e83c:	d04e      	beq.n	800e8dc <_dtoa_r+0x234>
 800e83e:	2300      	movs	r3, #0
 800e840:	f109 39ff 	add.w	r9, r9, #4294967295
 800e844:	930f      	str	r3, [sp, #60]	; 0x3c
 800e846:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e848:	1b1c      	subs	r4, r3, r4
 800e84a:	1e63      	subs	r3, r4, #1
 800e84c:	9309      	str	r3, [sp, #36]	; 0x24
 800e84e:	bf49      	itett	mi
 800e850:	f1c4 0301 	rsbmi	r3, r4, #1
 800e854:	2300      	movpl	r3, #0
 800e856:	9306      	strmi	r3, [sp, #24]
 800e858:	2300      	movmi	r3, #0
 800e85a:	bf54      	ite	pl
 800e85c:	9306      	strpl	r3, [sp, #24]
 800e85e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800e860:	f1b9 0f00 	cmp.w	r9, #0
 800e864:	db3c      	blt.n	800e8e0 <_dtoa_r+0x238>
 800e866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e868:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e86c:	444b      	add	r3, r9
 800e86e:	9309      	str	r3, [sp, #36]	; 0x24
 800e870:	2300      	movs	r3, #0
 800e872:	930a      	str	r3, [sp, #40]	; 0x28
 800e874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e876:	2b09      	cmp	r3, #9
 800e878:	d86c      	bhi.n	800e954 <_dtoa_r+0x2ac>
 800e87a:	2b05      	cmp	r3, #5
 800e87c:	bfc4      	itt	gt
 800e87e:	3b04      	subgt	r3, #4
 800e880:	9322      	strgt	r3, [sp, #136]	; 0x88
 800e882:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e884:	bfc8      	it	gt
 800e886:	2400      	movgt	r4, #0
 800e888:	f1a3 0302 	sub.w	r3, r3, #2
 800e88c:	bfd8      	it	le
 800e88e:	2401      	movle	r4, #1
 800e890:	2b03      	cmp	r3, #3
 800e892:	f200 808b 	bhi.w	800e9ac <_dtoa_r+0x304>
 800e896:	e8df f003 	tbb	[pc, r3]
 800e89a:	4f2d      	.short	0x4f2d
 800e89c:	5b4d      	.short	0x5b4d
 800e89e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800e8a2:	441c      	add	r4, r3
 800e8a4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800e8a8:	2b20      	cmp	r3, #32
 800e8aa:	bfc3      	ittte	gt
 800e8ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e8b0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800e8b4:	fa09 f303 	lslgt.w	r3, r9, r3
 800e8b8:	f1c3 0320 	rsble	r3, r3, #32
 800e8bc:	bfc6      	itte	gt
 800e8be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e8c2:	4318      	orrgt	r0, r3
 800e8c4:	fa06 f003 	lslle.w	r0, r6, r3
 800e8c8:	f7f1 fe06 	bl	80004d8 <__aeabi_ui2d>
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800e8d2:	3c01      	subs	r4, #1
 800e8d4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e8d6:	e770      	b.n	800e7ba <_dtoa_r+0x112>
 800e8d8:	2301      	movs	r3, #1
 800e8da:	e7b3      	b.n	800e844 <_dtoa_r+0x19c>
 800e8dc:	900f      	str	r0, [sp, #60]	; 0x3c
 800e8de:	e7b2      	b.n	800e846 <_dtoa_r+0x19e>
 800e8e0:	9b06      	ldr	r3, [sp, #24]
 800e8e2:	eba3 0309 	sub.w	r3, r3, r9
 800e8e6:	9306      	str	r3, [sp, #24]
 800e8e8:	f1c9 0300 	rsb	r3, r9, #0
 800e8ec:	930a      	str	r3, [sp, #40]	; 0x28
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	930e      	str	r3, [sp, #56]	; 0x38
 800e8f2:	e7bf      	b.n	800e874 <_dtoa_r+0x1cc>
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	dc59      	bgt.n	800e9b2 <_dtoa_r+0x30a>
 800e8fe:	f04f 0b01 	mov.w	fp, #1
 800e902:	465b      	mov	r3, fp
 800e904:	f8cd b008 	str.w	fp, [sp, #8]
 800e908:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800e90c:	2200      	movs	r2, #0
 800e90e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800e910:	6042      	str	r2, [r0, #4]
 800e912:	2204      	movs	r2, #4
 800e914:	f102 0614 	add.w	r6, r2, #20
 800e918:	429e      	cmp	r6, r3
 800e91a:	6841      	ldr	r1, [r0, #4]
 800e91c:	d94f      	bls.n	800e9be <_dtoa_r+0x316>
 800e91e:	4628      	mov	r0, r5
 800e920:	f000 ff04 	bl	800f72c <_Balloc>
 800e924:	9008      	str	r0, [sp, #32]
 800e926:	2800      	cmp	r0, #0
 800e928:	d14d      	bne.n	800e9c6 <_dtoa_r+0x31e>
 800e92a:	4602      	mov	r2, r0
 800e92c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e930:	4b1d      	ldr	r3, [pc, #116]	; (800e9a8 <_dtoa_r+0x300>)
 800e932:	e6cd      	b.n	800e6d0 <_dtoa_r+0x28>
 800e934:	2301      	movs	r3, #1
 800e936:	e7de      	b.n	800e8f6 <_dtoa_r+0x24e>
 800e938:	2300      	movs	r3, #0
 800e93a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e93c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e93e:	eb09 0b03 	add.w	fp, r9, r3
 800e942:	f10b 0301 	add.w	r3, fp, #1
 800e946:	2b01      	cmp	r3, #1
 800e948:	9302      	str	r3, [sp, #8]
 800e94a:	bfb8      	it	lt
 800e94c:	2301      	movlt	r3, #1
 800e94e:	e7dd      	b.n	800e90c <_dtoa_r+0x264>
 800e950:	2301      	movs	r3, #1
 800e952:	e7f2      	b.n	800e93a <_dtoa_r+0x292>
 800e954:	2401      	movs	r4, #1
 800e956:	2300      	movs	r3, #0
 800e958:	940b      	str	r4, [sp, #44]	; 0x2c
 800e95a:	9322      	str	r3, [sp, #136]	; 0x88
 800e95c:	f04f 3bff 	mov.w	fp, #4294967295
 800e960:	2200      	movs	r2, #0
 800e962:	2312      	movs	r3, #18
 800e964:	f8cd b008 	str.w	fp, [sp, #8]
 800e968:	9223      	str	r2, [sp, #140]	; 0x8c
 800e96a:	e7cf      	b.n	800e90c <_dtoa_r+0x264>
 800e96c:	f3af 8000 	nop.w
 800e970:	636f4361 	.word	0x636f4361
 800e974:	3fd287a7 	.word	0x3fd287a7
 800e978:	8b60c8b3 	.word	0x8b60c8b3
 800e97c:	3fc68a28 	.word	0x3fc68a28
 800e980:	509f79fb 	.word	0x509f79fb
 800e984:	3fd34413 	.word	0x3fd34413
 800e988:	0801247a 	.word	0x0801247a
 800e98c:	08012491 	.word	0x08012491
 800e990:	7ff00000 	.word	0x7ff00000
 800e994:	08012476 	.word	0x08012476
 800e998:	0801246d 	.word	0x0801246d
 800e99c:	0801244a 	.word	0x0801244a
 800e9a0:	3ff80000 	.word	0x3ff80000
 800e9a4:	080125f0 	.word	0x080125f0
 800e9a8:	080124f0 	.word	0x080124f0
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9b0:	e7d4      	b.n	800e95c <_dtoa_r+0x2b4>
 800e9b2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800e9b6:	465b      	mov	r3, fp
 800e9b8:	f8cd b008 	str.w	fp, [sp, #8]
 800e9bc:	e7a6      	b.n	800e90c <_dtoa_r+0x264>
 800e9be:	3101      	adds	r1, #1
 800e9c0:	6041      	str	r1, [r0, #4]
 800e9c2:	0052      	lsls	r2, r2, #1
 800e9c4:	e7a6      	b.n	800e914 <_dtoa_r+0x26c>
 800e9c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e9c8:	9a08      	ldr	r2, [sp, #32]
 800e9ca:	601a      	str	r2, [r3, #0]
 800e9cc:	9b02      	ldr	r3, [sp, #8]
 800e9ce:	2b0e      	cmp	r3, #14
 800e9d0:	f200 80a8 	bhi.w	800eb24 <_dtoa_r+0x47c>
 800e9d4:	2c00      	cmp	r4, #0
 800e9d6:	f000 80a5 	beq.w	800eb24 <_dtoa_r+0x47c>
 800e9da:	f1b9 0f00 	cmp.w	r9, #0
 800e9de:	dd34      	ble.n	800ea4a <_dtoa_r+0x3a2>
 800e9e0:	4a9a      	ldr	r2, [pc, #616]	; (800ec4c <_dtoa_r+0x5a4>)
 800e9e2:	f009 030f 	and.w	r3, r9, #15
 800e9e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e9ea:	f419 7f80 	tst.w	r9, #256	; 0x100
 800e9ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e9f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e9f6:	ea4f 1429 	mov.w	r4, r9, asr #4
 800e9fa:	d016      	beq.n	800ea2a <_dtoa_r+0x382>
 800e9fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ea00:	4b93      	ldr	r3, [pc, #588]	; (800ec50 <_dtoa_r+0x5a8>)
 800ea02:	2703      	movs	r7, #3
 800ea04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ea08:	f7f1 ff0a 	bl	8000820 <__aeabi_ddiv>
 800ea0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea10:	f004 040f 	and.w	r4, r4, #15
 800ea14:	4e8e      	ldr	r6, [pc, #568]	; (800ec50 <_dtoa_r+0x5a8>)
 800ea16:	b954      	cbnz	r4, 800ea2e <_dtoa_r+0x386>
 800ea18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ea1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea20:	f7f1 fefe 	bl	8000820 <__aeabi_ddiv>
 800ea24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea28:	e029      	b.n	800ea7e <_dtoa_r+0x3d6>
 800ea2a:	2702      	movs	r7, #2
 800ea2c:	e7f2      	b.n	800ea14 <_dtoa_r+0x36c>
 800ea2e:	07e1      	lsls	r1, r4, #31
 800ea30:	d508      	bpl.n	800ea44 <_dtoa_r+0x39c>
 800ea32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ea36:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ea3a:	f7f1 fdc7 	bl	80005cc <__aeabi_dmul>
 800ea3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ea42:	3701      	adds	r7, #1
 800ea44:	1064      	asrs	r4, r4, #1
 800ea46:	3608      	adds	r6, #8
 800ea48:	e7e5      	b.n	800ea16 <_dtoa_r+0x36e>
 800ea4a:	f000 80a5 	beq.w	800eb98 <_dtoa_r+0x4f0>
 800ea4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ea52:	f1c9 0400 	rsb	r4, r9, #0
 800ea56:	4b7d      	ldr	r3, [pc, #500]	; (800ec4c <_dtoa_r+0x5a4>)
 800ea58:	f004 020f 	and.w	r2, r4, #15
 800ea5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea64:	f7f1 fdb2 	bl	80005cc <__aeabi_dmul>
 800ea68:	2702      	movs	r7, #2
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea70:	4e77      	ldr	r6, [pc, #476]	; (800ec50 <_dtoa_r+0x5a8>)
 800ea72:	1124      	asrs	r4, r4, #4
 800ea74:	2c00      	cmp	r4, #0
 800ea76:	f040 8084 	bne.w	800eb82 <_dtoa_r+0x4da>
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d1d2      	bne.n	800ea24 <_dtoa_r+0x37c>
 800ea7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	f000 808b 	beq.w	800eb9c <_dtoa_r+0x4f4>
 800ea86:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ea8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ea8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ea92:	2200      	movs	r2, #0
 800ea94:	4b6f      	ldr	r3, [pc, #444]	; (800ec54 <_dtoa_r+0x5ac>)
 800ea96:	f7f2 f80b 	bl	8000ab0 <__aeabi_dcmplt>
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	d07e      	beq.n	800eb9c <_dtoa_r+0x4f4>
 800ea9e:	9b02      	ldr	r3, [sp, #8]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d07b      	beq.n	800eb9c <_dtoa_r+0x4f4>
 800eaa4:	f1bb 0f00 	cmp.w	fp, #0
 800eaa8:	dd38      	ble.n	800eb1c <_dtoa_r+0x474>
 800eaaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eaae:	2200      	movs	r2, #0
 800eab0:	4b69      	ldr	r3, [pc, #420]	; (800ec58 <_dtoa_r+0x5b0>)
 800eab2:	f7f1 fd8b 	bl	80005cc <__aeabi_dmul>
 800eab6:	465c      	mov	r4, fp
 800eab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eabc:	f109 38ff 	add.w	r8, r9, #4294967295
 800eac0:	3701      	adds	r7, #1
 800eac2:	4638      	mov	r0, r7
 800eac4:	f7f1 fd18 	bl	80004f8 <__aeabi_i2d>
 800eac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eacc:	f7f1 fd7e 	bl	80005cc <__aeabi_dmul>
 800ead0:	2200      	movs	r2, #0
 800ead2:	4b62      	ldr	r3, [pc, #392]	; (800ec5c <_dtoa_r+0x5b4>)
 800ead4:	f7f1 fbc4 	bl	8000260 <__adddf3>
 800ead8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800eadc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800eae0:	9611      	str	r6, [sp, #68]	; 0x44
 800eae2:	2c00      	cmp	r4, #0
 800eae4:	d15d      	bne.n	800eba2 <_dtoa_r+0x4fa>
 800eae6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eaea:	2200      	movs	r2, #0
 800eaec:	4b5c      	ldr	r3, [pc, #368]	; (800ec60 <_dtoa_r+0x5b8>)
 800eaee:	f7f1 fbb5 	bl	800025c <__aeabi_dsub>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eafa:	4633      	mov	r3, r6
 800eafc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eafe:	f7f1 fff5 	bl	8000aec <__aeabi_dcmpgt>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	f040 829e 	bne.w	800f044 <_dtoa_r+0x99c>
 800eb08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eb0e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800eb12:	f7f1 ffcd 	bl	8000ab0 <__aeabi_dcmplt>
 800eb16:	2800      	cmp	r0, #0
 800eb18:	f040 8292 	bne.w	800f040 <_dtoa_r+0x998>
 800eb1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800eb20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800eb24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f2c0 8153 	blt.w	800edd2 <_dtoa_r+0x72a>
 800eb2c:	f1b9 0f0e 	cmp.w	r9, #14
 800eb30:	f300 814f 	bgt.w	800edd2 <_dtoa_r+0x72a>
 800eb34:	4b45      	ldr	r3, [pc, #276]	; (800ec4c <_dtoa_r+0x5a4>)
 800eb36:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800eb3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eb3e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800eb42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	f280 80db 	bge.w	800ed00 <_dtoa_r+0x658>
 800eb4a:	9b02      	ldr	r3, [sp, #8]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	f300 80d7 	bgt.w	800ed00 <_dtoa_r+0x658>
 800eb52:	f040 8274 	bne.w	800f03e <_dtoa_r+0x996>
 800eb56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	4b40      	ldr	r3, [pc, #256]	; (800ec60 <_dtoa_r+0x5b8>)
 800eb5e:	f7f1 fd35 	bl	80005cc <__aeabi_dmul>
 800eb62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb66:	f7f1 ffb7 	bl	8000ad8 <__aeabi_dcmpge>
 800eb6a:	9c02      	ldr	r4, [sp, #8]
 800eb6c:	4626      	mov	r6, r4
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	f040 824a 	bne.w	800f008 <_dtoa_r+0x960>
 800eb74:	2331      	movs	r3, #49	; 0x31
 800eb76:	9f08      	ldr	r7, [sp, #32]
 800eb78:	f109 0901 	add.w	r9, r9, #1
 800eb7c:	f807 3b01 	strb.w	r3, [r7], #1
 800eb80:	e246      	b.n	800f010 <_dtoa_r+0x968>
 800eb82:	07e2      	lsls	r2, r4, #31
 800eb84:	d505      	bpl.n	800eb92 <_dtoa_r+0x4ea>
 800eb86:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eb8a:	f7f1 fd1f 	bl	80005cc <__aeabi_dmul>
 800eb8e:	2301      	movs	r3, #1
 800eb90:	3701      	adds	r7, #1
 800eb92:	1064      	asrs	r4, r4, #1
 800eb94:	3608      	adds	r6, #8
 800eb96:	e76d      	b.n	800ea74 <_dtoa_r+0x3cc>
 800eb98:	2702      	movs	r7, #2
 800eb9a:	e770      	b.n	800ea7e <_dtoa_r+0x3d6>
 800eb9c:	46c8      	mov	r8, r9
 800eb9e:	9c02      	ldr	r4, [sp, #8]
 800eba0:	e78f      	b.n	800eac2 <_dtoa_r+0x41a>
 800eba2:	9908      	ldr	r1, [sp, #32]
 800eba4:	4b29      	ldr	r3, [pc, #164]	; (800ec4c <_dtoa_r+0x5a4>)
 800eba6:	4421      	add	r1, r4
 800eba8:	9112      	str	r1, [sp, #72]	; 0x48
 800ebaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ebac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ebb0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ebb4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ebb8:	2900      	cmp	r1, #0
 800ebba:	d055      	beq.n	800ec68 <_dtoa_r+0x5c0>
 800ebbc:	2000      	movs	r0, #0
 800ebbe:	4929      	ldr	r1, [pc, #164]	; (800ec64 <_dtoa_r+0x5bc>)
 800ebc0:	f7f1 fe2e 	bl	8000820 <__aeabi_ddiv>
 800ebc4:	463b      	mov	r3, r7
 800ebc6:	4632      	mov	r2, r6
 800ebc8:	f7f1 fb48 	bl	800025c <__aeabi_dsub>
 800ebcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ebd0:	9f08      	ldr	r7, [sp, #32]
 800ebd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ebd6:	f7f1 ffa9 	bl	8000b2c <__aeabi_d2iz>
 800ebda:	4604      	mov	r4, r0
 800ebdc:	f7f1 fc8c 	bl	80004f8 <__aeabi_i2d>
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ebe8:	f7f1 fb38 	bl	800025c <__aeabi_dsub>
 800ebec:	4602      	mov	r2, r0
 800ebee:	460b      	mov	r3, r1
 800ebf0:	3430      	adds	r4, #48	; 0x30
 800ebf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ebf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ebfa:	f807 4b01 	strb.w	r4, [r7], #1
 800ebfe:	f7f1 ff57 	bl	8000ab0 <__aeabi_dcmplt>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	d174      	bne.n	800ecf0 <_dtoa_r+0x648>
 800ec06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec0a:	2000      	movs	r0, #0
 800ec0c:	4911      	ldr	r1, [pc, #68]	; (800ec54 <_dtoa_r+0x5ac>)
 800ec0e:	f7f1 fb25 	bl	800025c <__aeabi_dsub>
 800ec12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ec16:	f7f1 ff4b 	bl	8000ab0 <__aeabi_dcmplt>
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	f040 80b6 	bne.w	800ed8c <_dtoa_r+0x6e4>
 800ec20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec22:	429f      	cmp	r7, r3
 800ec24:	f43f af7a 	beq.w	800eb1c <_dtoa_r+0x474>
 800ec28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	4b0a      	ldr	r3, [pc, #40]	; (800ec58 <_dtoa_r+0x5b0>)
 800ec30:	f7f1 fccc 	bl	80005cc <__aeabi_dmul>
 800ec34:	2200      	movs	r2, #0
 800ec36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ec3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec3e:	4b06      	ldr	r3, [pc, #24]	; (800ec58 <_dtoa_r+0x5b0>)
 800ec40:	f7f1 fcc4 	bl	80005cc <__aeabi_dmul>
 800ec44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec48:	e7c3      	b.n	800ebd2 <_dtoa_r+0x52a>
 800ec4a:	bf00      	nop
 800ec4c:	080125f0 	.word	0x080125f0
 800ec50:	080125c8 	.word	0x080125c8
 800ec54:	3ff00000 	.word	0x3ff00000
 800ec58:	40240000 	.word	0x40240000
 800ec5c:	401c0000 	.word	0x401c0000
 800ec60:	40140000 	.word	0x40140000
 800ec64:	3fe00000 	.word	0x3fe00000
 800ec68:	4630      	mov	r0, r6
 800ec6a:	4639      	mov	r1, r7
 800ec6c:	f7f1 fcae 	bl	80005cc <__aeabi_dmul>
 800ec70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec72:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ec76:	9c08      	ldr	r4, [sp, #32]
 800ec78:	9314      	str	r3, [sp, #80]	; 0x50
 800ec7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec7e:	f7f1 ff55 	bl	8000b2c <__aeabi_d2iz>
 800ec82:	9015      	str	r0, [sp, #84]	; 0x54
 800ec84:	f7f1 fc38 	bl	80004f8 <__aeabi_i2d>
 800ec88:	4602      	mov	r2, r0
 800ec8a:	460b      	mov	r3, r1
 800ec8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec90:	f7f1 fae4 	bl	800025c <__aeabi_dsub>
 800ec94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec96:	4606      	mov	r6, r0
 800ec98:	3330      	adds	r3, #48	; 0x30
 800ec9a:	f804 3b01 	strb.w	r3, [r4], #1
 800ec9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eca0:	460f      	mov	r7, r1
 800eca2:	429c      	cmp	r4, r3
 800eca4:	f04f 0200 	mov.w	r2, #0
 800eca8:	d124      	bne.n	800ecf4 <_dtoa_r+0x64c>
 800ecaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ecae:	4bb3      	ldr	r3, [pc, #716]	; (800ef7c <_dtoa_r+0x8d4>)
 800ecb0:	f7f1 fad6 	bl	8000260 <__adddf3>
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	460b      	mov	r3, r1
 800ecb8:	4630      	mov	r0, r6
 800ecba:	4639      	mov	r1, r7
 800ecbc:	f7f1 ff16 	bl	8000aec <__aeabi_dcmpgt>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d162      	bne.n	800ed8a <_dtoa_r+0x6e2>
 800ecc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ecc8:	2000      	movs	r0, #0
 800ecca:	49ac      	ldr	r1, [pc, #688]	; (800ef7c <_dtoa_r+0x8d4>)
 800eccc:	f7f1 fac6 	bl	800025c <__aeabi_dsub>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	4639      	mov	r1, r7
 800ecd8:	f7f1 feea 	bl	8000ab0 <__aeabi_dcmplt>
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	f43f af1d 	beq.w	800eb1c <_dtoa_r+0x474>
 800ece2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ece4:	1e7b      	subs	r3, r7, #1
 800ece6:	9314      	str	r3, [sp, #80]	; 0x50
 800ece8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ecec:	2b30      	cmp	r3, #48	; 0x30
 800ecee:	d0f8      	beq.n	800ece2 <_dtoa_r+0x63a>
 800ecf0:	46c1      	mov	r9, r8
 800ecf2:	e03a      	b.n	800ed6a <_dtoa_r+0x6c2>
 800ecf4:	4ba2      	ldr	r3, [pc, #648]	; (800ef80 <_dtoa_r+0x8d8>)
 800ecf6:	f7f1 fc69 	bl	80005cc <__aeabi_dmul>
 800ecfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecfe:	e7bc      	b.n	800ec7a <_dtoa_r+0x5d2>
 800ed00:	9f08      	ldr	r7, [sp, #32]
 800ed02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed0a:	f7f1 fd89 	bl	8000820 <__aeabi_ddiv>
 800ed0e:	f7f1 ff0d 	bl	8000b2c <__aeabi_d2iz>
 800ed12:	4604      	mov	r4, r0
 800ed14:	f7f1 fbf0 	bl	80004f8 <__aeabi_i2d>
 800ed18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed1c:	f7f1 fc56 	bl	80005cc <__aeabi_dmul>
 800ed20:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ed24:	460b      	mov	r3, r1
 800ed26:	4602      	mov	r2, r0
 800ed28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed2c:	f7f1 fa96 	bl	800025c <__aeabi_dsub>
 800ed30:	f807 6b01 	strb.w	r6, [r7], #1
 800ed34:	9e08      	ldr	r6, [sp, #32]
 800ed36:	9b02      	ldr	r3, [sp, #8]
 800ed38:	1bbe      	subs	r6, r7, r6
 800ed3a:	42b3      	cmp	r3, r6
 800ed3c:	d13a      	bne.n	800edb4 <_dtoa_r+0x70c>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	460b      	mov	r3, r1
 800ed42:	f7f1 fa8d 	bl	8000260 <__adddf3>
 800ed46:	4602      	mov	r2, r0
 800ed48:	460b      	mov	r3, r1
 800ed4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ed4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed52:	f7f1 fecb 	bl	8000aec <__aeabi_dcmpgt>
 800ed56:	bb58      	cbnz	r0, 800edb0 <_dtoa_r+0x708>
 800ed58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed60:	f7f1 fe9c 	bl	8000a9c <__aeabi_dcmpeq>
 800ed64:	b108      	cbz	r0, 800ed6a <_dtoa_r+0x6c2>
 800ed66:	07e1      	lsls	r1, r4, #31
 800ed68:	d422      	bmi.n	800edb0 <_dtoa_r+0x708>
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	4651      	mov	r1, sl
 800ed6e:	f000 fd1d 	bl	800f7ac <_Bfree>
 800ed72:	2300      	movs	r3, #0
 800ed74:	703b      	strb	r3, [r7, #0]
 800ed76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ed78:	f109 0001 	add.w	r0, r9, #1
 800ed7c:	6018      	str	r0, [r3, #0]
 800ed7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f43f acdf 	beq.w	800e744 <_dtoa_r+0x9c>
 800ed86:	601f      	str	r7, [r3, #0]
 800ed88:	e4dc      	b.n	800e744 <_dtoa_r+0x9c>
 800ed8a:	4627      	mov	r7, r4
 800ed8c:	463b      	mov	r3, r7
 800ed8e:	461f      	mov	r7, r3
 800ed90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed94:	2a39      	cmp	r2, #57	; 0x39
 800ed96:	d107      	bne.n	800eda8 <_dtoa_r+0x700>
 800ed98:	9a08      	ldr	r2, [sp, #32]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d1f7      	bne.n	800ed8e <_dtoa_r+0x6e6>
 800ed9e:	2230      	movs	r2, #48	; 0x30
 800eda0:	9908      	ldr	r1, [sp, #32]
 800eda2:	f108 0801 	add.w	r8, r8, #1
 800eda6:	700a      	strb	r2, [r1, #0]
 800eda8:	781a      	ldrb	r2, [r3, #0]
 800edaa:	3201      	adds	r2, #1
 800edac:	701a      	strb	r2, [r3, #0]
 800edae:	e79f      	b.n	800ecf0 <_dtoa_r+0x648>
 800edb0:	46c8      	mov	r8, r9
 800edb2:	e7eb      	b.n	800ed8c <_dtoa_r+0x6e4>
 800edb4:	2200      	movs	r2, #0
 800edb6:	4b72      	ldr	r3, [pc, #456]	; (800ef80 <_dtoa_r+0x8d8>)
 800edb8:	f7f1 fc08 	bl	80005cc <__aeabi_dmul>
 800edbc:	4602      	mov	r2, r0
 800edbe:	460b      	mov	r3, r1
 800edc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800edc4:	2200      	movs	r2, #0
 800edc6:	2300      	movs	r3, #0
 800edc8:	f7f1 fe68 	bl	8000a9c <__aeabi_dcmpeq>
 800edcc:	2800      	cmp	r0, #0
 800edce:	d098      	beq.n	800ed02 <_dtoa_r+0x65a>
 800edd0:	e7cb      	b.n	800ed6a <_dtoa_r+0x6c2>
 800edd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800edd4:	2a00      	cmp	r2, #0
 800edd6:	f000 80cd 	beq.w	800ef74 <_dtoa_r+0x8cc>
 800edda:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800eddc:	2a01      	cmp	r2, #1
 800edde:	f300 80af 	bgt.w	800ef40 <_dtoa_r+0x898>
 800ede2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ede4:	2a00      	cmp	r2, #0
 800ede6:	f000 80a7 	beq.w	800ef38 <_dtoa_r+0x890>
 800edea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800edee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800edf0:	9f06      	ldr	r7, [sp, #24]
 800edf2:	9a06      	ldr	r2, [sp, #24]
 800edf4:	2101      	movs	r1, #1
 800edf6:	441a      	add	r2, r3
 800edf8:	9206      	str	r2, [sp, #24]
 800edfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edfc:	4628      	mov	r0, r5
 800edfe:	441a      	add	r2, r3
 800ee00:	9209      	str	r2, [sp, #36]	; 0x24
 800ee02:	f000 fd8d 	bl	800f920 <__i2b>
 800ee06:	4606      	mov	r6, r0
 800ee08:	2f00      	cmp	r7, #0
 800ee0a:	dd0c      	ble.n	800ee26 <_dtoa_r+0x77e>
 800ee0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	dd09      	ble.n	800ee26 <_dtoa_r+0x77e>
 800ee12:	42bb      	cmp	r3, r7
 800ee14:	bfa8      	it	ge
 800ee16:	463b      	movge	r3, r7
 800ee18:	9a06      	ldr	r2, [sp, #24]
 800ee1a:	1aff      	subs	r7, r7, r3
 800ee1c:	1ad2      	subs	r2, r2, r3
 800ee1e:	9206      	str	r2, [sp, #24]
 800ee20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee22:	1ad3      	subs	r3, r2, r3
 800ee24:	9309      	str	r3, [sp, #36]	; 0x24
 800ee26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee28:	b1f3      	cbz	r3, 800ee68 <_dtoa_r+0x7c0>
 800ee2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 80a9 	beq.w	800ef84 <_dtoa_r+0x8dc>
 800ee32:	2c00      	cmp	r4, #0
 800ee34:	dd10      	ble.n	800ee58 <_dtoa_r+0x7b0>
 800ee36:	4631      	mov	r1, r6
 800ee38:	4622      	mov	r2, r4
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	f000 fe2a 	bl	800fa94 <__pow5mult>
 800ee40:	4652      	mov	r2, sl
 800ee42:	4601      	mov	r1, r0
 800ee44:	4606      	mov	r6, r0
 800ee46:	4628      	mov	r0, r5
 800ee48:	f000 fd80 	bl	800f94c <__multiply>
 800ee4c:	4680      	mov	r8, r0
 800ee4e:	4651      	mov	r1, sl
 800ee50:	4628      	mov	r0, r5
 800ee52:	f000 fcab 	bl	800f7ac <_Bfree>
 800ee56:	46c2      	mov	sl, r8
 800ee58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee5a:	1b1a      	subs	r2, r3, r4
 800ee5c:	d004      	beq.n	800ee68 <_dtoa_r+0x7c0>
 800ee5e:	4651      	mov	r1, sl
 800ee60:	4628      	mov	r0, r5
 800ee62:	f000 fe17 	bl	800fa94 <__pow5mult>
 800ee66:	4682      	mov	sl, r0
 800ee68:	2101      	movs	r1, #1
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	f000 fd58 	bl	800f920 <__i2b>
 800ee70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee72:	4604      	mov	r4, r0
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f340 8087 	ble.w	800ef88 <_dtoa_r+0x8e0>
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	4601      	mov	r1, r0
 800ee7e:	4628      	mov	r0, r5
 800ee80:	f000 fe08 	bl	800fa94 <__pow5mult>
 800ee84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ee86:	4604      	mov	r4, r0
 800ee88:	2b01      	cmp	r3, #1
 800ee8a:	f340 8080 	ble.w	800ef8e <_dtoa_r+0x8e6>
 800ee8e:	f04f 0800 	mov.w	r8, #0
 800ee92:	6923      	ldr	r3, [r4, #16]
 800ee94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee98:	6918      	ldr	r0, [r3, #16]
 800ee9a:	f000 fcf3 	bl	800f884 <__hi0bits>
 800ee9e:	f1c0 0020 	rsb	r0, r0, #32
 800eea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eea4:	4418      	add	r0, r3
 800eea6:	f010 001f 	ands.w	r0, r0, #31
 800eeaa:	f000 8092 	beq.w	800efd2 <_dtoa_r+0x92a>
 800eeae:	f1c0 0320 	rsb	r3, r0, #32
 800eeb2:	2b04      	cmp	r3, #4
 800eeb4:	f340 808a 	ble.w	800efcc <_dtoa_r+0x924>
 800eeb8:	f1c0 001c 	rsb	r0, r0, #28
 800eebc:	9b06      	ldr	r3, [sp, #24]
 800eebe:	4407      	add	r7, r0
 800eec0:	4403      	add	r3, r0
 800eec2:	9306      	str	r3, [sp, #24]
 800eec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eec6:	4403      	add	r3, r0
 800eec8:	9309      	str	r3, [sp, #36]	; 0x24
 800eeca:	9b06      	ldr	r3, [sp, #24]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	dd05      	ble.n	800eedc <_dtoa_r+0x834>
 800eed0:	4651      	mov	r1, sl
 800eed2:	461a      	mov	r2, r3
 800eed4:	4628      	mov	r0, r5
 800eed6:	f000 fe37 	bl	800fb48 <__lshift>
 800eeda:	4682      	mov	sl, r0
 800eedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eede:	2b00      	cmp	r3, #0
 800eee0:	dd05      	ble.n	800eeee <_dtoa_r+0x846>
 800eee2:	4621      	mov	r1, r4
 800eee4:	461a      	mov	r2, r3
 800eee6:	4628      	mov	r0, r5
 800eee8:	f000 fe2e 	bl	800fb48 <__lshift>
 800eeec:	4604      	mov	r4, r0
 800eeee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d070      	beq.n	800efd6 <_dtoa_r+0x92e>
 800eef4:	4621      	mov	r1, r4
 800eef6:	4650      	mov	r0, sl
 800eef8:	f000 fe92 	bl	800fc20 <__mcmp>
 800eefc:	2800      	cmp	r0, #0
 800eefe:	da6a      	bge.n	800efd6 <_dtoa_r+0x92e>
 800ef00:	2300      	movs	r3, #0
 800ef02:	4651      	mov	r1, sl
 800ef04:	220a      	movs	r2, #10
 800ef06:	4628      	mov	r0, r5
 800ef08:	f000 fc72 	bl	800f7f0 <__multadd>
 800ef0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef0e:	4682      	mov	sl, r0
 800ef10:	f109 39ff 	add.w	r9, r9, #4294967295
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	f000 8193 	beq.w	800f240 <_dtoa_r+0xb98>
 800ef1a:	4631      	mov	r1, r6
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	220a      	movs	r2, #10
 800ef20:	4628      	mov	r0, r5
 800ef22:	f000 fc65 	bl	800f7f0 <__multadd>
 800ef26:	f1bb 0f00 	cmp.w	fp, #0
 800ef2a:	4606      	mov	r6, r0
 800ef2c:	f300 8093 	bgt.w	800f056 <_dtoa_r+0x9ae>
 800ef30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef32:	2b02      	cmp	r3, #2
 800ef34:	dc57      	bgt.n	800efe6 <_dtoa_r+0x93e>
 800ef36:	e08e      	b.n	800f056 <_dtoa_r+0x9ae>
 800ef38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ef3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ef3e:	e756      	b.n	800edee <_dtoa_r+0x746>
 800ef40:	9b02      	ldr	r3, [sp, #8]
 800ef42:	1e5c      	subs	r4, r3, #1
 800ef44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef46:	42a3      	cmp	r3, r4
 800ef48:	bfb7      	itett	lt
 800ef4a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ef4c:	1b1c      	subge	r4, r3, r4
 800ef4e:	1ae2      	sublt	r2, r4, r3
 800ef50:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ef52:	bfbe      	ittt	lt
 800ef54:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ef56:	189b      	addlt	r3, r3, r2
 800ef58:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ef5a:	9b02      	ldr	r3, [sp, #8]
 800ef5c:	bfb8      	it	lt
 800ef5e:	2400      	movlt	r4, #0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	bfbb      	ittet	lt
 800ef64:	9b06      	ldrlt	r3, [sp, #24]
 800ef66:	9a02      	ldrlt	r2, [sp, #8]
 800ef68:	9f06      	ldrge	r7, [sp, #24]
 800ef6a:	1a9f      	sublt	r7, r3, r2
 800ef6c:	bfac      	ite	ge
 800ef6e:	9b02      	ldrge	r3, [sp, #8]
 800ef70:	2300      	movlt	r3, #0
 800ef72:	e73e      	b.n	800edf2 <_dtoa_r+0x74a>
 800ef74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ef76:	9f06      	ldr	r7, [sp, #24]
 800ef78:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ef7a:	e745      	b.n	800ee08 <_dtoa_r+0x760>
 800ef7c:	3fe00000 	.word	0x3fe00000
 800ef80:	40240000 	.word	0x40240000
 800ef84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef86:	e76a      	b.n	800ee5e <_dtoa_r+0x7b6>
 800ef88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	dc19      	bgt.n	800efc2 <_dtoa_r+0x91a>
 800ef8e:	9b04      	ldr	r3, [sp, #16]
 800ef90:	b9bb      	cbnz	r3, 800efc2 <_dtoa_r+0x91a>
 800ef92:	9b05      	ldr	r3, [sp, #20]
 800ef94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef98:	b99b      	cbnz	r3, 800efc2 <_dtoa_r+0x91a>
 800ef9a:	9b05      	ldr	r3, [sp, #20]
 800ef9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800efa0:	0d1b      	lsrs	r3, r3, #20
 800efa2:	051b      	lsls	r3, r3, #20
 800efa4:	b183      	cbz	r3, 800efc8 <_dtoa_r+0x920>
 800efa6:	f04f 0801 	mov.w	r8, #1
 800efaa:	9b06      	ldr	r3, [sp, #24]
 800efac:	3301      	adds	r3, #1
 800efae:	9306      	str	r3, [sp, #24]
 800efb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efb2:	3301      	adds	r3, #1
 800efb4:	9309      	str	r3, [sp, #36]	; 0x24
 800efb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800efb8:	2b00      	cmp	r3, #0
 800efba:	f47f af6a 	bne.w	800ee92 <_dtoa_r+0x7ea>
 800efbe:	2001      	movs	r0, #1
 800efc0:	e76f      	b.n	800eea2 <_dtoa_r+0x7fa>
 800efc2:	f04f 0800 	mov.w	r8, #0
 800efc6:	e7f6      	b.n	800efb6 <_dtoa_r+0x90e>
 800efc8:	4698      	mov	r8, r3
 800efca:	e7f4      	b.n	800efb6 <_dtoa_r+0x90e>
 800efcc:	f43f af7d 	beq.w	800eeca <_dtoa_r+0x822>
 800efd0:	4618      	mov	r0, r3
 800efd2:	301c      	adds	r0, #28
 800efd4:	e772      	b.n	800eebc <_dtoa_r+0x814>
 800efd6:	9b02      	ldr	r3, [sp, #8]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	dc36      	bgt.n	800f04a <_dtoa_r+0x9a2>
 800efdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800efde:	2b02      	cmp	r3, #2
 800efe0:	dd33      	ble.n	800f04a <_dtoa_r+0x9a2>
 800efe2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800efe6:	f1bb 0f00 	cmp.w	fp, #0
 800efea:	d10d      	bne.n	800f008 <_dtoa_r+0x960>
 800efec:	4621      	mov	r1, r4
 800efee:	465b      	mov	r3, fp
 800eff0:	2205      	movs	r2, #5
 800eff2:	4628      	mov	r0, r5
 800eff4:	f000 fbfc 	bl	800f7f0 <__multadd>
 800eff8:	4601      	mov	r1, r0
 800effa:	4604      	mov	r4, r0
 800effc:	4650      	mov	r0, sl
 800effe:	f000 fe0f 	bl	800fc20 <__mcmp>
 800f002:	2800      	cmp	r0, #0
 800f004:	f73f adb6 	bgt.w	800eb74 <_dtoa_r+0x4cc>
 800f008:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f00a:	9f08      	ldr	r7, [sp, #32]
 800f00c:	ea6f 0903 	mvn.w	r9, r3
 800f010:	f04f 0800 	mov.w	r8, #0
 800f014:	4621      	mov	r1, r4
 800f016:	4628      	mov	r0, r5
 800f018:	f000 fbc8 	bl	800f7ac <_Bfree>
 800f01c:	2e00      	cmp	r6, #0
 800f01e:	f43f aea4 	beq.w	800ed6a <_dtoa_r+0x6c2>
 800f022:	f1b8 0f00 	cmp.w	r8, #0
 800f026:	d005      	beq.n	800f034 <_dtoa_r+0x98c>
 800f028:	45b0      	cmp	r8, r6
 800f02a:	d003      	beq.n	800f034 <_dtoa_r+0x98c>
 800f02c:	4641      	mov	r1, r8
 800f02e:	4628      	mov	r0, r5
 800f030:	f000 fbbc 	bl	800f7ac <_Bfree>
 800f034:	4631      	mov	r1, r6
 800f036:	4628      	mov	r0, r5
 800f038:	f000 fbb8 	bl	800f7ac <_Bfree>
 800f03c:	e695      	b.n	800ed6a <_dtoa_r+0x6c2>
 800f03e:	2400      	movs	r4, #0
 800f040:	4626      	mov	r6, r4
 800f042:	e7e1      	b.n	800f008 <_dtoa_r+0x960>
 800f044:	46c1      	mov	r9, r8
 800f046:	4626      	mov	r6, r4
 800f048:	e594      	b.n	800eb74 <_dtoa_r+0x4cc>
 800f04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f04c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f050:	2b00      	cmp	r3, #0
 800f052:	f000 80fc 	beq.w	800f24e <_dtoa_r+0xba6>
 800f056:	2f00      	cmp	r7, #0
 800f058:	dd05      	ble.n	800f066 <_dtoa_r+0x9be>
 800f05a:	4631      	mov	r1, r6
 800f05c:	463a      	mov	r2, r7
 800f05e:	4628      	mov	r0, r5
 800f060:	f000 fd72 	bl	800fb48 <__lshift>
 800f064:	4606      	mov	r6, r0
 800f066:	f1b8 0f00 	cmp.w	r8, #0
 800f06a:	d05c      	beq.n	800f126 <_dtoa_r+0xa7e>
 800f06c:	4628      	mov	r0, r5
 800f06e:	6871      	ldr	r1, [r6, #4]
 800f070:	f000 fb5c 	bl	800f72c <_Balloc>
 800f074:	4607      	mov	r7, r0
 800f076:	b928      	cbnz	r0, 800f084 <_dtoa_r+0x9dc>
 800f078:	4602      	mov	r2, r0
 800f07a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f07e:	4b7e      	ldr	r3, [pc, #504]	; (800f278 <_dtoa_r+0xbd0>)
 800f080:	f7ff bb26 	b.w	800e6d0 <_dtoa_r+0x28>
 800f084:	6932      	ldr	r2, [r6, #16]
 800f086:	f106 010c 	add.w	r1, r6, #12
 800f08a:	3202      	adds	r2, #2
 800f08c:	0092      	lsls	r2, r2, #2
 800f08e:	300c      	adds	r0, #12
 800f090:	f7fe fb86 	bl	800d7a0 <memcpy>
 800f094:	2201      	movs	r2, #1
 800f096:	4639      	mov	r1, r7
 800f098:	4628      	mov	r0, r5
 800f09a:	f000 fd55 	bl	800fb48 <__lshift>
 800f09e:	46b0      	mov	r8, r6
 800f0a0:	4606      	mov	r6, r0
 800f0a2:	9b08      	ldr	r3, [sp, #32]
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	9302      	str	r3, [sp, #8]
 800f0a8:	9b08      	ldr	r3, [sp, #32]
 800f0aa:	445b      	add	r3, fp
 800f0ac:	930a      	str	r3, [sp, #40]	; 0x28
 800f0ae:	9b04      	ldr	r3, [sp, #16]
 800f0b0:	f003 0301 	and.w	r3, r3, #1
 800f0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f0b6:	9b02      	ldr	r3, [sp, #8]
 800f0b8:	4621      	mov	r1, r4
 800f0ba:	4650      	mov	r0, sl
 800f0bc:	f103 3bff 	add.w	fp, r3, #4294967295
 800f0c0:	f7ff fa65 	bl	800e58e <quorem>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	4641      	mov	r1, r8
 800f0c8:	3330      	adds	r3, #48	; 0x30
 800f0ca:	9004      	str	r0, [sp, #16]
 800f0cc:	4650      	mov	r0, sl
 800f0ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0d0:	f000 fda6 	bl	800fc20 <__mcmp>
 800f0d4:	4632      	mov	r2, r6
 800f0d6:	9006      	str	r0, [sp, #24]
 800f0d8:	4621      	mov	r1, r4
 800f0da:	4628      	mov	r0, r5
 800f0dc:	f000 fdbc 	bl	800fc58 <__mdiff>
 800f0e0:	68c2      	ldr	r2, [r0, #12]
 800f0e2:	4607      	mov	r7, r0
 800f0e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0e6:	bb02      	cbnz	r2, 800f12a <_dtoa_r+0xa82>
 800f0e8:	4601      	mov	r1, r0
 800f0ea:	4650      	mov	r0, sl
 800f0ec:	f000 fd98 	bl	800fc20 <__mcmp>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0f4:	4639      	mov	r1, r7
 800f0f6:	4628      	mov	r0, r5
 800f0f8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800f0fc:	f000 fb56 	bl	800f7ac <_Bfree>
 800f100:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f102:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f104:	9f02      	ldr	r7, [sp, #8]
 800f106:	ea43 0102 	orr.w	r1, r3, r2
 800f10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f10c:	430b      	orrs	r3, r1
 800f10e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f110:	d10d      	bne.n	800f12e <_dtoa_r+0xa86>
 800f112:	2b39      	cmp	r3, #57	; 0x39
 800f114:	d027      	beq.n	800f166 <_dtoa_r+0xabe>
 800f116:	9a06      	ldr	r2, [sp, #24]
 800f118:	2a00      	cmp	r2, #0
 800f11a:	dd01      	ble.n	800f120 <_dtoa_r+0xa78>
 800f11c:	9b04      	ldr	r3, [sp, #16]
 800f11e:	3331      	adds	r3, #49	; 0x31
 800f120:	f88b 3000 	strb.w	r3, [fp]
 800f124:	e776      	b.n	800f014 <_dtoa_r+0x96c>
 800f126:	4630      	mov	r0, r6
 800f128:	e7b9      	b.n	800f09e <_dtoa_r+0x9f6>
 800f12a:	2201      	movs	r2, #1
 800f12c:	e7e2      	b.n	800f0f4 <_dtoa_r+0xa4c>
 800f12e:	9906      	ldr	r1, [sp, #24]
 800f130:	2900      	cmp	r1, #0
 800f132:	db04      	blt.n	800f13e <_dtoa_r+0xa96>
 800f134:	9822      	ldr	r0, [sp, #136]	; 0x88
 800f136:	4301      	orrs	r1, r0
 800f138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f13a:	4301      	orrs	r1, r0
 800f13c:	d120      	bne.n	800f180 <_dtoa_r+0xad8>
 800f13e:	2a00      	cmp	r2, #0
 800f140:	ddee      	ble.n	800f120 <_dtoa_r+0xa78>
 800f142:	4651      	mov	r1, sl
 800f144:	2201      	movs	r2, #1
 800f146:	4628      	mov	r0, r5
 800f148:	9302      	str	r3, [sp, #8]
 800f14a:	f000 fcfd 	bl	800fb48 <__lshift>
 800f14e:	4621      	mov	r1, r4
 800f150:	4682      	mov	sl, r0
 800f152:	f000 fd65 	bl	800fc20 <__mcmp>
 800f156:	2800      	cmp	r0, #0
 800f158:	9b02      	ldr	r3, [sp, #8]
 800f15a:	dc02      	bgt.n	800f162 <_dtoa_r+0xaba>
 800f15c:	d1e0      	bne.n	800f120 <_dtoa_r+0xa78>
 800f15e:	07da      	lsls	r2, r3, #31
 800f160:	d5de      	bpl.n	800f120 <_dtoa_r+0xa78>
 800f162:	2b39      	cmp	r3, #57	; 0x39
 800f164:	d1da      	bne.n	800f11c <_dtoa_r+0xa74>
 800f166:	2339      	movs	r3, #57	; 0x39
 800f168:	f88b 3000 	strb.w	r3, [fp]
 800f16c:	463b      	mov	r3, r7
 800f16e:	461f      	mov	r7, r3
 800f170:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800f174:	3b01      	subs	r3, #1
 800f176:	2a39      	cmp	r2, #57	; 0x39
 800f178:	d050      	beq.n	800f21c <_dtoa_r+0xb74>
 800f17a:	3201      	adds	r2, #1
 800f17c:	701a      	strb	r2, [r3, #0]
 800f17e:	e749      	b.n	800f014 <_dtoa_r+0x96c>
 800f180:	2a00      	cmp	r2, #0
 800f182:	dd03      	ble.n	800f18c <_dtoa_r+0xae4>
 800f184:	2b39      	cmp	r3, #57	; 0x39
 800f186:	d0ee      	beq.n	800f166 <_dtoa_r+0xabe>
 800f188:	3301      	adds	r3, #1
 800f18a:	e7c9      	b.n	800f120 <_dtoa_r+0xa78>
 800f18c:	9a02      	ldr	r2, [sp, #8]
 800f18e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f190:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f194:	428a      	cmp	r2, r1
 800f196:	d02a      	beq.n	800f1ee <_dtoa_r+0xb46>
 800f198:	4651      	mov	r1, sl
 800f19a:	2300      	movs	r3, #0
 800f19c:	220a      	movs	r2, #10
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f000 fb26 	bl	800f7f0 <__multadd>
 800f1a4:	45b0      	cmp	r8, r6
 800f1a6:	4682      	mov	sl, r0
 800f1a8:	f04f 0300 	mov.w	r3, #0
 800f1ac:	f04f 020a 	mov.w	r2, #10
 800f1b0:	4641      	mov	r1, r8
 800f1b2:	4628      	mov	r0, r5
 800f1b4:	d107      	bne.n	800f1c6 <_dtoa_r+0xb1e>
 800f1b6:	f000 fb1b 	bl	800f7f0 <__multadd>
 800f1ba:	4680      	mov	r8, r0
 800f1bc:	4606      	mov	r6, r0
 800f1be:	9b02      	ldr	r3, [sp, #8]
 800f1c0:	3301      	adds	r3, #1
 800f1c2:	9302      	str	r3, [sp, #8]
 800f1c4:	e777      	b.n	800f0b6 <_dtoa_r+0xa0e>
 800f1c6:	f000 fb13 	bl	800f7f0 <__multadd>
 800f1ca:	4631      	mov	r1, r6
 800f1cc:	4680      	mov	r8, r0
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	220a      	movs	r2, #10
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	f000 fb0c 	bl	800f7f0 <__multadd>
 800f1d8:	4606      	mov	r6, r0
 800f1da:	e7f0      	b.n	800f1be <_dtoa_r+0xb16>
 800f1dc:	f1bb 0f00 	cmp.w	fp, #0
 800f1e0:	bfcc      	ite	gt
 800f1e2:	465f      	movgt	r7, fp
 800f1e4:	2701      	movle	r7, #1
 800f1e6:	f04f 0800 	mov.w	r8, #0
 800f1ea:	9a08      	ldr	r2, [sp, #32]
 800f1ec:	4417      	add	r7, r2
 800f1ee:	4651      	mov	r1, sl
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	9302      	str	r3, [sp, #8]
 800f1f6:	f000 fca7 	bl	800fb48 <__lshift>
 800f1fa:	4621      	mov	r1, r4
 800f1fc:	4682      	mov	sl, r0
 800f1fe:	f000 fd0f 	bl	800fc20 <__mcmp>
 800f202:	2800      	cmp	r0, #0
 800f204:	dcb2      	bgt.n	800f16c <_dtoa_r+0xac4>
 800f206:	d102      	bne.n	800f20e <_dtoa_r+0xb66>
 800f208:	9b02      	ldr	r3, [sp, #8]
 800f20a:	07db      	lsls	r3, r3, #31
 800f20c:	d4ae      	bmi.n	800f16c <_dtoa_r+0xac4>
 800f20e:	463b      	mov	r3, r7
 800f210:	461f      	mov	r7, r3
 800f212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f216:	2a30      	cmp	r2, #48	; 0x30
 800f218:	d0fa      	beq.n	800f210 <_dtoa_r+0xb68>
 800f21a:	e6fb      	b.n	800f014 <_dtoa_r+0x96c>
 800f21c:	9a08      	ldr	r2, [sp, #32]
 800f21e:	429a      	cmp	r2, r3
 800f220:	d1a5      	bne.n	800f16e <_dtoa_r+0xac6>
 800f222:	2331      	movs	r3, #49	; 0x31
 800f224:	f109 0901 	add.w	r9, r9, #1
 800f228:	7013      	strb	r3, [r2, #0]
 800f22a:	e6f3      	b.n	800f014 <_dtoa_r+0x96c>
 800f22c:	4b13      	ldr	r3, [pc, #76]	; (800f27c <_dtoa_r+0xbd4>)
 800f22e:	f7ff baa7 	b.w	800e780 <_dtoa_r+0xd8>
 800f232:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f234:	2b00      	cmp	r3, #0
 800f236:	f47f aa80 	bne.w	800e73a <_dtoa_r+0x92>
 800f23a:	4b11      	ldr	r3, [pc, #68]	; (800f280 <_dtoa_r+0xbd8>)
 800f23c:	f7ff baa0 	b.w	800e780 <_dtoa_r+0xd8>
 800f240:	f1bb 0f00 	cmp.w	fp, #0
 800f244:	dc03      	bgt.n	800f24e <_dtoa_r+0xba6>
 800f246:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f248:	2b02      	cmp	r3, #2
 800f24a:	f73f aecc 	bgt.w	800efe6 <_dtoa_r+0x93e>
 800f24e:	9f08      	ldr	r7, [sp, #32]
 800f250:	4621      	mov	r1, r4
 800f252:	4650      	mov	r0, sl
 800f254:	f7ff f99b 	bl	800e58e <quorem>
 800f258:	9a08      	ldr	r2, [sp, #32]
 800f25a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f25e:	f807 3b01 	strb.w	r3, [r7], #1
 800f262:	1aba      	subs	r2, r7, r2
 800f264:	4593      	cmp	fp, r2
 800f266:	ddb9      	ble.n	800f1dc <_dtoa_r+0xb34>
 800f268:	4651      	mov	r1, sl
 800f26a:	2300      	movs	r3, #0
 800f26c:	220a      	movs	r2, #10
 800f26e:	4628      	mov	r0, r5
 800f270:	f000 fabe 	bl	800f7f0 <__multadd>
 800f274:	4682      	mov	sl, r0
 800f276:	e7eb      	b.n	800f250 <_dtoa_r+0xba8>
 800f278:	080124f0 	.word	0x080124f0
 800f27c:	08012449 	.word	0x08012449
 800f280:	0801246d 	.word	0x0801246d

0800f284 <__sflush_r>:
 800f284:	898a      	ldrh	r2, [r1, #12]
 800f286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f28a:	4605      	mov	r5, r0
 800f28c:	0710      	lsls	r0, r2, #28
 800f28e:	460c      	mov	r4, r1
 800f290:	d458      	bmi.n	800f344 <__sflush_r+0xc0>
 800f292:	684b      	ldr	r3, [r1, #4]
 800f294:	2b00      	cmp	r3, #0
 800f296:	dc05      	bgt.n	800f2a4 <__sflush_r+0x20>
 800f298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	dc02      	bgt.n	800f2a4 <__sflush_r+0x20>
 800f29e:	2000      	movs	r0, #0
 800f2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2a6:	2e00      	cmp	r6, #0
 800f2a8:	d0f9      	beq.n	800f29e <__sflush_r+0x1a>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2b0:	682f      	ldr	r7, [r5, #0]
 800f2b2:	602b      	str	r3, [r5, #0]
 800f2b4:	d032      	beq.n	800f31c <__sflush_r+0x98>
 800f2b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2b8:	89a3      	ldrh	r3, [r4, #12]
 800f2ba:	075a      	lsls	r2, r3, #29
 800f2bc:	d505      	bpl.n	800f2ca <__sflush_r+0x46>
 800f2be:	6863      	ldr	r3, [r4, #4]
 800f2c0:	1ac0      	subs	r0, r0, r3
 800f2c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f2c4:	b10b      	cbz	r3, 800f2ca <__sflush_r+0x46>
 800f2c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2c8:	1ac0      	subs	r0, r0, r3
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	6a21      	ldr	r1, [r4, #32]
 800f2d4:	47b0      	blx	r6
 800f2d6:	1c43      	adds	r3, r0, #1
 800f2d8:	89a3      	ldrh	r3, [r4, #12]
 800f2da:	d106      	bne.n	800f2ea <__sflush_r+0x66>
 800f2dc:	6829      	ldr	r1, [r5, #0]
 800f2de:	291d      	cmp	r1, #29
 800f2e0:	d82c      	bhi.n	800f33c <__sflush_r+0xb8>
 800f2e2:	4a2a      	ldr	r2, [pc, #168]	; (800f38c <__sflush_r+0x108>)
 800f2e4:	40ca      	lsrs	r2, r1
 800f2e6:	07d6      	lsls	r6, r2, #31
 800f2e8:	d528      	bpl.n	800f33c <__sflush_r+0xb8>
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	6062      	str	r2, [r4, #4]
 800f2ee:	6922      	ldr	r2, [r4, #16]
 800f2f0:	04d9      	lsls	r1, r3, #19
 800f2f2:	6022      	str	r2, [r4, #0]
 800f2f4:	d504      	bpl.n	800f300 <__sflush_r+0x7c>
 800f2f6:	1c42      	adds	r2, r0, #1
 800f2f8:	d101      	bne.n	800f2fe <__sflush_r+0x7a>
 800f2fa:	682b      	ldr	r3, [r5, #0]
 800f2fc:	b903      	cbnz	r3, 800f300 <__sflush_r+0x7c>
 800f2fe:	6560      	str	r0, [r4, #84]	; 0x54
 800f300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f302:	602f      	str	r7, [r5, #0]
 800f304:	2900      	cmp	r1, #0
 800f306:	d0ca      	beq.n	800f29e <__sflush_r+0x1a>
 800f308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f30c:	4299      	cmp	r1, r3
 800f30e:	d002      	beq.n	800f316 <__sflush_r+0x92>
 800f310:	4628      	mov	r0, r5
 800f312:	f000 fd9b 	bl	800fe4c <_free_r>
 800f316:	2000      	movs	r0, #0
 800f318:	6360      	str	r0, [r4, #52]	; 0x34
 800f31a:	e7c1      	b.n	800f2a0 <__sflush_r+0x1c>
 800f31c:	6a21      	ldr	r1, [r4, #32]
 800f31e:	2301      	movs	r3, #1
 800f320:	4628      	mov	r0, r5
 800f322:	47b0      	blx	r6
 800f324:	1c41      	adds	r1, r0, #1
 800f326:	d1c7      	bne.n	800f2b8 <__sflush_r+0x34>
 800f328:	682b      	ldr	r3, [r5, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d0c4      	beq.n	800f2b8 <__sflush_r+0x34>
 800f32e:	2b1d      	cmp	r3, #29
 800f330:	d001      	beq.n	800f336 <__sflush_r+0xb2>
 800f332:	2b16      	cmp	r3, #22
 800f334:	d101      	bne.n	800f33a <__sflush_r+0xb6>
 800f336:	602f      	str	r7, [r5, #0]
 800f338:	e7b1      	b.n	800f29e <__sflush_r+0x1a>
 800f33a:	89a3      	ldrh	r3, [r4, #12]
 800f33c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f340:	81a3      	strh	r3, [r4, #12]
 800f342:	e7ad      	b.n	800f2a0 <__sflush_r+0x1c>
 800f344:	690f      	ldr	r7, [r1, #16]
 800f346:	2f00      	cmp	r7, #0
 800f348:	d0a9      	beq.n	800f29e <__sflush_r+0x1a>
 800f34a:	0793      	lsls	r3, r2, #30
 800f34c:	bf18      	it	ne
 800f34e:	2300      	movne	r3, #0
 800f350:	680e      	ldr	r6, [r1, #0]
 800f352:	bf08      	it	eq
 800f354:	694b      	ldreq	r3, [r1, #20]
 800f356:	eba6 0807 	sub.w	r8, r6, r7
 800f35a:	600f      	str	r7, [r1, #0]
 800f35c:	608b      	str	r3, [r1, #8]
 800f35e:	f1b8 0f00 	cmp.w	r8, #0
 800f362:	dd9c      	ble.n	800f29e <__sflush_r+0x1a>
 800f364:	4643      	mov	r3, r8
 800f366:	463a      	mov	r2, r7
 800f368:	4628      	mov	r0, r5
 800f36a:	6a21      	ldr	r1, [r4, #32]
 800f36c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f36e:	47b0      	blx	r6
 800f370:	2800      	cmp	r0, #0
 800f372:	dc06      	bgt.n	800f382 <__sflush_r+0xfe>
 800f374:	89a3      	ldrh	r3, [r4, #12]
 800f376:	f04f 30ff 	mov.w	r0, #4294967295
 800f37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f37e:	81a3      	strh	r3, [r4, #12]
 800f380:	e78e      	b.n	800f2a0 <__sflush_r+0x1c>
 800f382:	4407      	add	r7, r0
 800f384:	eba8 0800 	sub.w	r8, r8, r0
 800f388:	e7e9      	b.n	800f35e <__sflush_r+0xda>
 800f38a:	bf00      	nop
 800f38c:	20400001 	.word	0x20400001

0800f390 <_fflush_r>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	690b      	ldr	r3, [r1, #16]
 800f394:	4605      	mov	r5, r0
 800f396:	460c      	mov	r4, r1
 800f398:	b913      	cbnz	r3, 800f3a0 <_fflush_r+0x10>
 800f39a:	2500      	movs	r5, #0
 800f39c:	4628      	mov	r0, r5
 800f39e:	bd38      	pop	{r3, r4, r5, pc}
 800f3a0:	b118      	cbz	r0, 800f3aa <_fflush_r+0x1a>
 800f3a2:	6983      	ldr	r3, [r0, #24]
 800f3a4:	b90b      	cbnz	r3, 800f3aa <_fflush_r+0x1a>
 800f3a6:	f000 f887 	bl	800f4b8 <__sinit>
 800f3aa:	4b14      	ldr	r3, [pc, #80]	; (800f3fc <_fflush_r+0x6c>)
 800f3ac:	429c      	cmp	r4, r3
 800f3ae:	d11b      	bne.n	800f3e8 <_fflush_r+0x58>
 800f3b0:	686c      	ldr	r4, [r5, #4]
 800f3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d0ef      	beq.n	800f39a <_fflush_r+0xa>
 800f3ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3bc:	07d0      	lsls	r0, r2, #31
 800f3be:	d404      	bmi.n	800f3ca <_fflush_r+0x3a>
 800f3c0:	0599      	lsls	r1, r3, #22
 800f3c2:	d402      	bmi.n	800f3ca <_fflush_r+0x3a>
 800f3c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3c6:	f000 f91a 	bl	800f5fe <__retarget_lock_acquire_recursive>
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	4621      	mov	r1, r4
 800f3ce:	f7ff ff59 	bl	800f284 <__sflush_r>
 800f3d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3d4:	4605      	mov	r5, r0
 800f3d6:	07da      	lsls	r2, r3, #31
 800f3d8:	d4e0      	bmi.n	800f39c <_fflush_r+0xc>
 800f3da:	89a3      	ldrh	r3, [r4, #12]
 800f3dc:	059b      	lsls	r3, r3, #22
 800f3de:	d4dd      	bmi.n	800f39c <_fflush_r+0xc>
 800f3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3e2:	f000 f90d 	bl	800f600 <__retarget_lock_release_recursive>
 800f3e6:	e7d9      	b.n	800f39c <_fflush_r+0xc>
 800f3e8:	4b05      	ldr	r3, [pc, #20]	; (800f400 <_fflush_r+0x70>)
 800f3ea:	429c      	cmp	r4, r3
 800f3ec:	d101      	bne.n	800f3f2 <_fflush_r+0x62>
 800f3ee:	68ac      	ldr	r4, [r5, #8]
 800f3f0:	e7df      	b.n	800f3b2 <_fflush_r+0x22>
 800f3f2:	4b04      	ldr	r3, [pc, #16]	; (800f404 <_fflush_r+0x74>)
 800f3f4:	429c      	cmp	r4, r3
 800f3f6:	bf08      	it	eq
 800f3f8:	68ec      	ldreq	r4, [r5, #12]
 800f3fa:	e7da      	b.n	800f3b2 <_fflush_r+0x22>
 800f3fc:	08012524 	.word	0x08012524
 800f400:	08012544 	.word	0x08012544
 800f404:	08012504 	.word	0x08012504

0800f408 <std>:
 800f408:	2300      	movs	r3, #0
 800f40a:	b510      	push	{r4, lr}
 800f40c:	4604      	mov	r4, r0
 800f40e:	e9c0 3300 	strd	r3, r3, [r0]
 800f412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f416:	6083      	str	r3, [r0, #8]
 800f418:	8181      	strh	r1, [r0, #12]
 800f41a:	6643      	str	r3, [r0, #100]	; 0x64
 800f41c:	81c2      	strh	r2, [r0, #14]
 800f41e:	6183      	str	r3, [r0, #24]
 800f420:	4619      	mov	r1, r3
 800f422:	2208      	movs	r2, #8
 800f424:	305c      	adds	r0, #92	; 0x5c
 800f426:	f7fe f9c9 	bl	800d7bc <memset>
 800f42a:	4b05      	ldr	r3, [pc, #20]	; (800f440 <std+0x38>)
 800f42c:	6224      	str	r4, [r4, #32]
 800f42e:	6263      	str	r3, [r4, #36]	; 0x24
 800f430:	4b04      	ldr	r3, [pc, #16]	; (800f444 <std+0x3c>)
 800f432:	62a3      	str	r3, [r4, #40]	; 0x28
 800f434:	4b04      	ldr	r3, [pc, #16]	; (800f448 <std+0x40>)
 800f436:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f438:	4b04      	ldr	r3, [pc, #16]	; (800f44c <std+0x44>)
 800f43a:	6323      	str	r3, [r4, #48]	; 0x30
 800f43c:	bd10      	pop	{r4, pc}
 800f43e:	bf00      	nop
 800f440:	08010345 	.word	0x08010345
 800f444:	08010367 	.word	0x08010367
 800f448:	0801039f 	.word	0x0801039f
 800f44c:	080103c3 	.word	0x080103c3

0800f450 <_cleanup_r>:
 800f450:	4901      	ldr	r1, [pc, #4]	; (800f458 <_cleanup_r+0x8>)
 800f452:	f000 b8af 	b.w	800f5b4 <_fwalk_reent>
 800f456:	bf00      	nop
 800f458:	0800f391 	.word	0x0800f391

0800f45c <__sfmoreglue>:
 800f45c:	b570      	push	{r4, r5, r6, lr}
 800f45e:	2568      	movs	r5, #104	; 0x68
 800f460:	1e4a      	subs	r2, r1, #1
 800f462:	4355      	muls	r5, r2
 800f464:	460e      	mov	r6, r1
 800f466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f46a:	f000 fd3b 	bl	800fee4 <_malloc_r>
 800f46e:	4604      	mov	r4, r0
 800f470:	b140      	cbz	r0, 800f484 <__sfmoreglue+0x28>
 800f472:	2100      	movs	r1, #0
 800f474:	e9c0 1600 	strd	r1, r6, [r0]
 800f478:	300c      	adds	r0, #12
 800f47a:	60a0      	str	r0, [r4, #8]
 800f47c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f480:	f7fe f99c 	bl	800d7bc <memset>
 800f484:	4620      	mov	r0, r4
 800f486:	bd70      	pop	{r4, r5, r6, pc}

0800f488 <__sfp_lock_acquire>:
 800f488:	4801      	ldr	r0, [pc, #4]	; (800f490 <__sfp_lock_acquire+0x8>)
 800f48a:	f000 b8b8 	b.w	800f5fe <__retarget_lock_acquire_recursive>
 800f48e:	bf00      	nop
 800f490:	200038a0 	.word	0x200038a0

0800f494 <__sfp_lock_release>:
 800f494:	4801      	ldr	r0, [pc, #4]	; (800f49c <__sfp_lock_release+0x8>)
 800f496:	f000 b8b3 	b.w	800f600 <__retarget_lock_release_recursive>
 800f49a:	bf00      	nop
 800f49c:	200038a0 	.word	0x200038a0

0800f4a0 <__sinit_lock_acquire>:
 800f4a0:	4801      	ldr	r0, [pc, #4]	; (800f4a8 <__sinit_lock_acquire+0x8>)
 800f4a2:	f000 b8ac 	b.w	800f5fe <__retarget_lock_acquire_recursive>
 800f4a6:	bf00      	nop
 800f4a8:	2000389b 	.word	0x2000389b

0800f4ac <__sinit_lock_release>:
 800f4ac:	4801      	ldr	r0, [pc, #4]	; (800f4b4 <__sinit_lock_release+0x8>)
 800f4ae:	f000 b8a7 	b.w	800f600 <__retarget_lock_release_recursive>
 800f4b2:	bf00      	nop
 800f4b4:	2000389b 	.word	0x2000389b

0800f4b8 <__sinit>:
 800f4b8:	b510      	push	{r4, lr}
 800f4ba:	4604      	mov	r4, r0
 800f4bc:	f7ff fff0 	bl	800f4a0 <__sinit_lock_acquire>
 800f4c0:	69a3      	ldr	r3, [r4, #24]
 800f4c2:	b11b      	cbz	r3, 800f4cc <__sinit+0x14>
 800f4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4c8:	f7ff bff0 	b.w	800f4ac <__sinit_lock_release>
 800f4cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f4d0:	6523      	str	r3, [r4, #80]	; 0x50
 800f4d2:	4b13      	ldr	r3, [pc, #76]	; (800f520 <__sinit+0x68>)
 800f4d4:	4a13      	ldr	r2, [pc, #76]	; (800f524 <__sinit+0x6c>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f4da:	42a3      	cmp	r3, r4
 800f4dc:	bf08      	it	eq
 800f4de:	2301      	moveq	r3, #1
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	bf08      	it	eq
 800f4e4:	61a3      	streq	r3, [r4, #24]
 800f4e6:	f000 f81f 	bl	800f528 <__sfp>
 800f4ea:	6060      	str	r0, [r4, #4]
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	f000 f81b 	bl	800f528 <__sfp>
 800f4f2:	60a0      	str	r0, [r4, #8]
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f000 f817 	bl	800f528 <__sfp>
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	2104      	movs	r1, #4
 800f4fe:	60e0      	str	r0, [r4, #12]
 800f500:	6860      	ldr	r0, [r4, #4]
 800f502:	f7ff ff81 	bl	800f408 <std>
 800f506:	2201      	movs	r2, #1
 800f508:	2109      	movs	r1, #9
 800f50a:	68a0      	ldr	r0, [r4, #8]
 800f50c:	f7ff ff7c 	bl	800f408 <std>
 800f510:	2202      	movs	r2, #2
 800f512:	2112      	movs	r1, #18
 800f514:	68e0      	ldr	r0, [r4, #12]
 800f516:	f7ff ff77 	bl	800f408 <std>
 800f51a:	2301      	movs	r3, #1
 800f51c:	61a3      	str	r3, [r4, #24]
 800f51e:	e7d1      	b.n	800f4c4 <__sinit+0xc>
 800f520:	08012424 	.word	0x08012424
 800f524:	0800f451 	.word	0x0800f451

0800f528 <__sfp>:
 800f528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52a:	4607      	mov	r7, r0
 800f52c:	f7ff ffac 	bl	800f488 <__sfp_lock_acquire>
 800f530:	4b1e      	ldr	r3, [pc, #120]	; (800f5ac <__sfp+0x84>)
 800f532:	681e      	ldr	r6, [r3, #0]
 800f534:	69b3      	ldr	r3, [r6, #24]
 800f536:	b913      	cbnz	r3, 800f53e <__sfp+0x16>
 800f538:	4630      	mov	r0, r6
 800f53a:	f7ff ffbd 	bl	800f4b8 <__sinit>
 800f53e:	3648      	adds	r6, #72	; 0x48
 800f540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f544:	3b01      	subs	r3, #1
 800f546:	d503      	bpl.n	800f550 <__sfp+0x28>
 800f548:	6833      	ldr	r3, [r6, #0]
 800f54a:	b30b      	cbz	r3, 800f590 <__sfp+0x68>
 800f54c:	6836      	ldr	r6, [r6, #0]
 800f54e:	e7f7      	b.n	800f540 <__sfp+0x18>
 800f550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f554:	b9d5      	cbnz	r5, 800f58c <__sfp+0x64>
 800f556:	4b16      	ldr	r3, [pc, #88]	; (800f5b0 <__sfp+0x88>)
 800f558:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f55c:	60e3      	str	r3, [r4, #12]
 800f55e:	6665      	str	r5, [r4, #100]	; 0x64
 800f560:	f000 f84c 	bl	800f5fc <__retarget_lock_init_recursive>
 800f564:	f7ff ff96 	bl	800f494 <__sfp_lock_release>
 800f568:	2208      	movs	r2, #8
 800f56a:	4629      	mov	r1, r5
 800f56c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f570:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f574:	6025      	str	r5, [r4, #0]
 800f576:	61a5      	str	r5, [r4, #24]
 800f578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f57c:	f7fe f91e 	bl	800d7bc <memset>
 800f580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f588:	4620      	mov	r0, r4
 800f58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f58c:	3468      	adds	r4, #104	; 0x68
 800f58e:	e7d9      	b.n	800f544 <__sfp+0x1c>
 800f590:	2104      	movs	r1, #4
 800f592:	4638      	mov	r0, r7
 800f594:	f7ff ff62 	bl	800f45c <__sfmoreglue>
 800f598:	4604      	mov	r4, r0
 800f59a:	6030      	str	r0, [r6, #0]
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d1d5      	bne.n	800f54c <__sfp+0x24>
 800f5a0:	f7ff ff78 	bl	800f494 <__sfp_lock_release>
 800f5a4:	230c      	movs	r3, #12
 800f5a6:	603b      	str	r3, [r7, #0]
 800f5a8:	e7ee      	b.n	800f588 <__sfp+0x60>
 800f5aa:	bf00      	nop
 800f5ac:	08012424 	.word	0x08012424
 800f5b0:	ffff0001 	.word	0xffff0001

0800f5b4 <_fwalk_reent>:
 800f5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5b8:	4606      	mov	r6, r0
 800f5ba:	4688      	mov	r8, r1
 800f5bc:	2700      	movs	r7, #0
 800f5be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f5c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5c6:	f1b9 0901 	subs.w	r9, r9, #1
 800f5ca:	d505      	bpl.n	800f5d8 <_fwalk_reent+0x24>
 800f5cc:	6824      	ldr	r4, [r4, #0]
 800f5ce:	2c00      	cmp	r4, #0
 800f5d0:	d1f7      	bne.n	800f5c2 <_fwalk_reent+0xe>
 800f5d2:	4638      	mov	r0, r7
 800f5d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5d8:	89ab      	ldrh	r3, [r5, #12]
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d907      	bls.n	800f5ee <_fwalk_reent+0x3a>
 800f5de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	d003      	beq.n	800f5ee <_fwalk_reent+0x3a>
 800f5e6:	4629      	mov	r1, r5
 800f5e8:	4630      	mov	r0, r6
 800f5ea:	47c0      	blx	r8
 800f5ec:	4307      	orrs	r7, r0
 800f5ee:	3568      	adds	r5, #104	; 0x68
 800f5f0:	e7e9      	b.n	800f5c6 <_fwalk_reent+0x12>
	...

0800f5f4 <_localeconv_r>:
 800f5f4:	4800      	ldr	r0, [pc, #0]	; (800f5f8 <_localeconv_r+0x4>)
 800f5f6:	4770      	bx	lr
 800f5f8:	200002ac 	.word	0x200002ac

0800f5fc <__retarget_lock_init_recursive>:
 800f5fc:	4770      	bx	lr

0800f5fe <__retarget_lock_acquire_recursive>:
 800f5fe:	4770      	bx	lr

0800f600 <__retarget_lock_release_recursive>:
 800f600:	4770      	bx	lr

0800f602 <__swhatbuf_r>:
 800f602:	b570      	push	{r4, r5, r6, lr}
 800f604:	460e      	mov	r6, r1
 800f606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f60a:	4614      	mov	r4, r2
 800f60c:	2900      	cmp	r1, #0
 800f60e:	461d      	mov	r5, r3
 800f610:	b096      	sub	sp, #88	; 0x58
 800f612:	da07      	bge.n	800f624 <__swhatbuf_r+0x22>
 800f614:	2300      	movs	r3, #0
 800f616:	602b      	str	r3, [r5, #0]
 800f618:	89b3      	ldrh	r3, [r6, #12]
 800f61a:	061a      	lsls	r2, r3, #24
 800f61c:	d410      	bmi.n	800f640 <__swhatbuf_r+0x3e>
 800f61e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f622:	e00e      	b.n	800f642 <__swhatbuf_r+0x40>
 800f624:	466a      	mov	r2, sp
 800f626:	f000 fef3 	bl	8010410 <_fstat_r>
 800f62a:	2800      	cmp	r0, #0
 800f62c:	dbf2      	blt.n	800f614 <__swhatbuf_r+0x12>
 800f62e:	9a01      	ldr	r2, [sp, #4]
 800f630:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f634:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f638:	425a      	negs	r2, r3
 800f63a:	415a      	adcs	r2, r3
 800f63c:	602a      	str	r2, [r5, #0]
 800f63e:	e7ee      	b.n	800f61e <__swhatbuf_r+0x1c>
 800f640:	2340      	movs	r3, #64	; 0x40
 800f642:	2000      	movs	r0, #0
 800f644:	6023      	str	r3, [r4, #0]
 800f646:	b016      	add	sp, #88	; 0x58
 800f648:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f64c <__smakebuf_r>:
 800f64c:	898b      	ldrh	r3, [r1, #12]
 800f64e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f650:	079d      	lsls	r5, r3, #30
 800f652:	4606      	mov	r6, r0
 800f654:	460c      	mov	r4, r1
 800f656:	d507      	bpl.n	800f668 <__smakebuf_r+0x1c>
 800f658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f65c:	6023      	str	r3, [r4, #0]
 800f65e:	6123      	str	r3, [r4, #16]
 800f660:	2301      	movs	r3, #1
 800f662:	6163      	str	r3, [r4, #20]
 800f664:	b002      	add	sp, #8
 800f666:	bd70      	pop	{r4, r5, r6, pc}
 800f668:	466a      	mov	r2, sp
 800f66a:	ab01      	add	r3, sp, #4
 800f66c:	f7ff ffc9 	bl	800f602 <__swhatbuf_r>
 800f670:	9900      	ldr	r1, [sp, #0]
 800f672:	4605      	mov	r5, r0
 800f674:	4630      	mov	r0, r6
 800f676:	f000 fc35 	bl	800fee4 <_malloc_r>
 800f67a:	b948      	cbnz	r0, 800f690 <__smakebuf_r+0x44>
 800f67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f680:	059a      	lsls	r2, r3, #22
 800f682:	d4ef      	bmi.n	800f664 <__smakebuf_r+0x18>
 800f684:	f023 0303 	bic.w	r3, r3, #3
 800f688:	f043 0302 	orr.w	r3, r3, #2
 800f68c:	81a3      	strh	r3, [r4, #12]
 800f68e:	e7e3      	b.n	800f658 <__smakebuf_r+0xc>
 800f690:	4b0d      	ldr	r3, [pc, #52]	; (800f6c8 <__smakebuf_r+0x7c>)
 800f692:	62b3      	str	r3, [r6, #40]	; 0x28
 800f694:	89a3      	ldrh	r3, [r4, #12]
 800f696:	6020      	str	r0, [r4, #0]
 800f698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f69c:	81a3      	strh	r3, [r4, #12]
 800f69e:	9b00      	ldr	r3, [sp, #0]
 800f6a0:	6120      	str	r0, [r4, #16]
 800f6a2:	6163      	str	r3, [r4, #20]
 800f6a4:	9b01      	ldr	r3, [sp, #4]
 800f6a6:	b15b      	cbz	r3, 800f6c0 <__smakebuf_r+0x74>
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6ae:	f000 fec1 	bl	8010434 <_isatty_r>
 800f6b2:	b128      	cbz	r0, 800f6c0 <__smakebuf_r+0x74>
 800f6b4:	89a3      	ldrh	r3, [r4, #12]
 800f6b6:	f023 0303 	bic.w	r3, r3, #3
 800f6ba:	f043 0301 	orr.w	r3, r3, #1
 800f6be:	81a3      	strh	r3, [r4, #12]
 800f6c0:	89a0      	ldrh	r0, [r4, #12]
 800f6c2:	4305      	orrs	r5, r0
 800f6c4:	81a5      	strh	r5, [r4, #12]
 800f6c6:	e7cd      	b.n	800f664 <__smakebuf_r+0x18>
 800f6c8:	0800f451 	.word	0x0800f451

0800f6cc <malloc>:
 800f6cc:	4b02      	ldr	r3, [pc, #8]	; (800f6d8 <malloc+0xc>)
 800f6ce:	4601      	mov	r1, r0
 800f6d0:	6818      	ldr	r0, [r3, #0]
 800f6d2:	f000 bc07 	b.w	800fee4 <_malloc_r>
 800f6d6:	bf00      	nop
 800f6d8:	20000158 	.word	0x20000158

0800f6dc <memchr>:
 800f6dc:	4603      	mov	r3, r0
 800f6de:	b510      	push	{r4, lr}
 800f6e0:	b2c9      	uxtb	r1, r1
 800f6e2:	4402      	add	r2, r0
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	d101      	bne.n	800f6ee <memchr+0x12>
 800f6ea:	2000      	movs	r0, #0
 800f6ec:	e003      	b.n	800f6f6 <memchr+0x1a>
 800f6ee:	7804      	ldrb	r4, [r0, #0]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	428c      	cmp	r4, r1
 800f6f4:	d1f6      	bne.n	800f6e4 <memchr+0x8>
 800f6f6:	bd10      	pop	{r4, pc}

0800f6f8 <memmove>:
 800f6f8:	4288      	cmp	r0, r1
 800f6fa:	b510      	push	{r4, lr}
 800f6fc:	eb01 0402 	add.w	r4, r1, r2
 800f700:	d902      	bls.n	800f708 <memmove+0x10>
 800f702:	4284      	cmp	r4, r0
 800f704:	4623      	mov	r3, r4
 800f706:	d807      	bhi.n	800f718 <memmove+0x20>
 800f708:	1e43      	subs	r3, r0, #1
 800f70a:	42a1      	cmp	r1, r4
 800f70c:	d008      	beq.n	800f720 <memmove+0x28>
 800f70e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f712:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f716:	e7f8      	b.n	800f70a <memmove+0x12>
 800f718:	4601      	mov	r1, r0
 800f71a:	4402      	add	r2, r0
 800f71c:	428a      	cmp	r2, r1
 800f71e:	d100      	bne.n	800f722 <memmove+0x2a>
 800f720:	bd10      	pop	{r4, pc}
 800f722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f72a:	e7f7      	b.n	800f71c <memmove+0x24>

0800f72c <_Balloc>:
 800f72c:	b570      	push	{r4, r5, r6, lr}
 800f72e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f730:	4604      	mov	r4, r0
 800f732:	460d      	mov	r5, r1
 800f734:	b976      	cbnz	r6, 800f754 <_Balloc+0x28>
 800f736:	2010      	movs	r0, #16
 800f738:	f7ff ffc8 	bl	800f6cc <malloc>
 800f73c:	4602      	mov	r2, r0
 800f73e:	6260      	str	r0, [r4, #36]	; 0x24
 800f740:	b920      	cbnz	r0, 800f74c <_Balloc+0x20>
 800f742:	2166      	movs	r1, #102	; 0x66
 800f744:	4b17      	ldr	r3, [pc, #92]	; (800f7a4 <_Balloc+0x78>)
 800f746:	4818      	ldr	r0, [pc, #96]	; (800f7a8 <_Balloc+0x7c>)
 800f748:	f7fd ffd0 	bl	800d6ec <__assert_func>
 800f74c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f750:	6006      	str	r6, [r0, #0]
 800f752:	60c6      	str	r6, [r0, #12]
 800f754:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f756:	68f3      	ldr	r3, [r6, #12]
 800f758:	b183      	cbz	r3, 800f77c <_Balloc+0x50>
 800f75a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f75c:	68db      	ldr	r3, [r3, #12]
 800f75e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f762:	b9b8      	cbnz	r0, 800f794 <_Balloc+0x68>
 800f764:	2101      	movs	r1, #1
 800f766:	fa01 f605 	lsl.w	r6, r1, r5
 800f76a:	1d72      	adds	r2, r6, #5
 800f76c:	4620      	mov	r0, r4
 800f76e:	0092      	lsls	r2, r2, #2
 800f770:	f000 fb5e 	bl	800fe30 <_calloc_r>
 800f774:	b160      	cbz	r0, 800f790 <_Balloc+0x64>
 800f776:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f77a:	e00e      	b.n	800f79a <_Balloc+0x6e>
 800f77c:	2221      	movs	r2, #33	; 0x21
 800f77e:	2104      	movs	r1, #4
 800f780:	4620      	mov	r0, r4
 800f782:	f000 fb55 	bl	800fe30 <_calloc_r>
 800f786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f788:	60f0      	str	r0, [r6, #12]
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d1e4      	bne.n	800f75a <_Balloc+0x2e>
 800f790:	2000      	movs	r0, #0
 800f792:	bd70      	pop	{r4, r5, r6, pc}
 800f794:	6802      	ldr	r2, [r0, #0]
 800f796:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f79a:	2300      	movs	r3, #0
 800f79c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f7a0:	e7f7      	b.n	800f792 <_Balloc+0x66>
 800f7a2:	bf00      	nop
 800f7a4:	0801247a 	.word	0x0801247a
 800f7a8:	08012564 	.word	0x08012564

0800f7ac <_Bfree>:
 800f7ac:	b570      	push	{r4, r5, r6, lr}
 800f7ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f7b0:	4605      	mov	r5, r0
 800f7b2:	460c      	mov	r4, r1
 800f7b4:	b976      	cbnz	r6, 800f7d4 <_Bfree+0x28>
 800f7b6:	2010      	movs	r0, #16
 800f7b8:	f7ff ff88 	bl	800f6cc <malloc>
 800f7bc:	4602      	mov	r2, r0
 800f7be:	6268      	str	r0, [r5, #36]	; 0x24
 800f7c0:	b920      	cbnz	r0, 800f7cc <_Bfree+0x20>
 800f7c2:	218a      	movs	r1, #138	; 0x8a
 800f7c4:	4b08      	ldr	r3, [pc, #32]	; (800f7e8 <_Bfree+0x3c>)
 800f7c6:	4809      	ldr	r0, [pc, #36]	; (800f7ec <_Bfree+0x40>)
 800f7c8:	f7fd ff90 	bl	800d6ec <__assert_func>
 800f7cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7d0:	6006      	str	r6, [r0, #0]
 800f7d2:	60c6      	str	r6, [r0, #12]
 800f7d4:	b13c      	cbz	r4, 800f7e6 <_Bfree+0x3a>
 800f7d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f7d8:	6862      	ldr	r2, [r4, #4]
 800f7da:	68db      	ldr	r3, [r3, #12]
 800f7dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7e0:	6021      	str	r1, [r4, #0]
 800f7e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7e6:	bd70      	pop	{r4, r5, r6, pc}
 800f7e8:	0801247a 	.word	0x0801247a
 800f7ec:	08012564 	.word	0x08012564

0800f7f0 <__multadd>:
 800f7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f4:	4698      	mov	r8, r3
 800f7f6:	460c      	mov	r4, r1
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	690e      	ldr	r6, [r1, #16]
 800f7fc:	4607      	mov	r7, r0
 800f7fe:	f101 0014 	add.w	r0, r1, #20
 800f802:	6805      	ldr	r5, [r0, #0]
 800f804:	3301      	adds	r3, #1
 800f806:	b2a9      	uxth	r1, r5
 800f808:	fb02 8101 	mla	r1, r2, r1, r8
 800f80c:	0c2d      	lsrs	r5, r5, #16
 800f80e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f812:	fb02 c505 	mla	r5, r2, r5, ip
 800f816:	b289      	uxth	r1, r1
 800f818:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f81c:	429e      	cmp	r6, r3
 800f81e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f822:	f840 1b04 	str.w	r1, [r0], #4
 800f826:	dcec      	bgt.n	800f802 <__multadd+0x12>
 800f828:	f1b8 0f00 	cmp.w	r8, #0
 800f82c:	d022      	beq.n	800f874 <__multadd+0x84>
 800f82e:	68a3      	ldr	r3, [r4, #8]
 800f830:	42b3      	cmp	r3, r6
 800f832:	dc19      	bgt.n	800f868 <__multadd+0x78>
 800f834:	6861      	ldr	r1, [r4, #4]
 800f836:	4638      	mov	r0, r7
 800f838:	3101      	adds	r1, #1
 800f83a:	f7ff ff77 	bl	800f72c <_Balloc>
 800f83e:	4605      	mov	r5, r0
 800f840:	b928      	cbnz	r0, 800f84e <__multadd+0x5e>
 800f842:	4602      	mov	r2, r0
 800f844:	21b5      	movs	r1, #181	; 0xb5
 800f846:	4b0d      	ldr	r3, [pc, #52]	; (800f87c <__multadd+0x8c>)
 800f848:	480d      	ldr	r0, [pc, #52]	; (800f880 <__multadd+0x90>)
 800f84a:	f7fd ff4f 	bl	800d6ec <__assert_func>
 800f84e:	6922      	ldr	r2, [r4, #16]
 800f850:	f104 010c 	add.w	r1, r4, #12
 800f854:	3202      	adds	r2, #2
 800f856:	0092      	lsls	r2, r2, #2
 800f858:	300c      	adds	r0, #12
 800f85a:	f7fd ffa1 	bl	800d7a0 <memcpy>
 800f85e:	4621      	mov	r1, r4
 800f860:	4638      	mov	r0, r7
 800f862:	f7ff ffa3 	bl	800f7ac <_Bfree>
 800f866:	462c      	mov	r4, r5
 800f868:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f86c:	3601      	adds	r6, #1
 800f86e:	f8c3 8014 	str.w	r8, [r3, #20]
 800f872:	6126      	str	r6, [r4, #16]
 800f874:	4620      	mov	r0, r4
 800f876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f87a:	bf00      	nop
 800f87c:	080124f0 	.word	0x080124f0
 800f880:	08012564 	.word	0x08012564

0800f884 <__hi0bits>:
 800f884:	0c02      	lsrs	r2, r0, #16
 800f886:	0412      	lsls	r2, r2, #16
 800f888:	4603      	mov	r3, r0
 800f88a:	b9ca      	cbnz	r2, 800f8c0 <__hi0bits+0x3c>
 800f88c:	0403      	lsls	r3, r0, #16
 800f88e:	2010      	movs	r0, #16
 800f890:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f894:	bf04      	itt	eq
 800f896:	021b      	lsleq	r3, r3, #8
 800f898:	3008      	addeq	r0, #8
 800f89a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f89e:	bf04      	itt	eq
 800f8a0:	011b      	lsleq	r3, r3, #4
 800f8a2:	3004      	addeq	r0, #4
 800f8a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f8a8:	bf04      	itt	eq
 800f8aa:	009b      	lsleq	r3, r3, #2
 800f8ac:	3002      	addeq	r0, #2
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	db05      	blt.n	800f8be <__hi0bits+0x3a>
 800f8b2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800f8b6:	f100 0001 	add.w	r0, r0, #1
 800f8ba:	bf08      	it	eq
 800f8bc:	2020      	moveq	r0, #32
 800f8be:	4770      	bx	lr
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	e7e5      	b.n	800f890 <__hi0bits+0xc>

0800f8c4 <__lo0bits>:
 800f8c4:	6803      	ldr	r3, [r0, #0]
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	f013 0007 	ands.w	r0, r3, #7
 800f8cc:	d00b      	beq.n	800f8e6 <__lo0bits+0x22>
 800f8ce:	07d9      	lsls	r1, r3, #31
 800f8d0:	d422      	bmi.n	800f918 <__lo0bits+0x54>
 800f8d2:	0798      	lsls	r0, r3, #30
 800f8d4:	bf49      	itett	mi
 800f8d6:	085b      	lsrmi	r3, r3, #1
 800f8d8:	089b      	lsrpl	r3, r3, #2
 800f8da:	2001      	movmi	r0, #1
 800f8dc:	6013      	strmi	r3, [r2, #0]
 800f8de:	bf5c      	itt	pl
 800f8e0:	2002      	movpl	r0, #2
 800f8e2:	6013      	strpl	r3, [r2, #0]
 800f8e4:	4770      	bx	lr
 800f8e6:	b299      	uxth	r1, r3
 800f8e8:	b909      	cbnz	r1, 800f8ee <__lo0bits+0x2a>
 800f8ea:	2010      	movs	r0, #16
 800f8ec:	0c1b      	lsrs	r3, r3, #16
 800f8ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f8f2:	bf04      	itt	eq
 800f8f4:	0a1b      	lsreq	r3, r3, #8
 800f8f6:	3008      	addeq	r0, #8
 800f8f8:	0719      	lsls	r1, r3, #28
 800f8fa:	bf04      	itt	eq
 800f8fc:	091b      	lsreq	r3, r3, #4
 800f8fe:	3004      	addeq	r0, #4
 800f900:	0799      	lsls	r1, r3, #30
 800f902:	bf04      	itt	eq
 800f904:	089b      	lsreq	r3, r3, #2
 800f906:	3002      	addeq	r0, #2
 800f908:	07d9      	lsls	r1, r3, #31
 800f90a:	d403      	bmi.n	800f914 <__lo0bits+0x50>
 800f90c:	085b      	lsrs	r3, r3, #1
 800f90e:	f100 0001 	add.w	r0, r0, #1
 800f912:	d003      	beq.n	800f91c <__lo0bits+0x58>
 800f914:	6013      	str	r3, [r2, #0]
 800f916:	4770      	bx	lr
 800f918:	2000      	movs	r0, #0
 800f91a:	4770      	bx	lr
 800f91c:	2020      	movs	r0, #32
 800f91e:	4770      	bx	lr

0800f920 <__i2b>:
 800f920:	b510      	push	{r4, lr}
 800f922:	460c      	mov	r4, r1
 800f924:	2101      	movs	r1, #1
 800f926:	f7ff ff01 	bl	800f72c <_Balloc>
 800f92a:	4602      	mov	r2, r0
 800f92c:	b928      	cbnz	r0, 800f93a <__i2b+0x1a>
 800f92e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f932:	4b04      	ldr	r3, [pc, #16]	; (800f944 <__i2b+0x24>)
 800f934:	4804      	ldr	r0, [pc, #16]	; (800f948 <__i2b+0x28>)
 800f936:	f7fd fed9 	bl	800d6ec <__assert_func>
 800f93a:	2301      	movs	r3, #1
 800f93c:	6144      	str	r4, [r0, #20]
 800f93e:	6103      	str	r3, [r0, #16]
 800f940:	bd10      	pop	{r4, pc}
 800f942:	bf00      	nop
 800f944:	080124f0 	.word	0x080124f0
 800f948:	08012564 	.word	0x08012564

0800f94c <__multiply>:
 800f94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f950:	4614      	mov	r4, r2
 800f952:	690a      	ldr	r2, [r1, #16]
 800f954:	6923      	ldr	r3, [r4, #16]
 800f956:	460d      	mov	r5, r1
 800f958:	429a      	cmp	r2, r3
 800f95a:	bfbe      	ittt	lt
 800f95c:	460b      	movlt	r3, r1
 800f95e:	4625      	movlt	r5, r4
 800f960:	461c      	movlt	r4, r3
 800f962:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f966:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f96a:	68ab      	ldr	r3, [r5, #8]
 800f96c:	6869      	ldr	r1, [r5, #4]
 800f96e:	eb0a 0709 	add.w	r7, sl, r9
 800f972:	42bb      	cmp	r3, r7
 800f974:	b085      	sub	sp, #20
 800f976:	bfb8      	it	lt
 800f978:	3101      	addlt	r1, #1
 800f97a:	f7ff fed7 	bl	800f72c <_Balloc>
 800f97e:	b930      	cbnz	r0, 800f98e <__multiply+0x42>
 800f980:	4602      	mov	r2, r0
 800f982:	f240 115d 	movw	r1, #349	; 0x15d
 800f986:	4b41      	ldr	r3, [pc, #260]	; (800fa8c <__multiply+0x140>)
 800f988:	4841      	ldr	r0, [pc, #260]	; (800fa90 <__multiply+0x144>)
 800f98a:	f7fd feaf 	bl	800d6ec <__assert_func>
 800f98e:	f100 0614 	add.w	r6, r0, #20
 800f992:	4633      	mov	r3, r6
 800f994:	2200      	movs	r2, #0
 800f996:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f99a:	4543      	cmp	r3, r8
 800f99c:	d31e      	bcc.n	800f9dc <__multiply+0x90>
 800f99e:	f105 0c14 	add.w	ip, r5, #20
 800f9a2:	f104 0314 	add.w	r3, r4, #20
 800f9a6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f9aa:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f9ae:	9202      	str	r2, [sp, #8]
 800f9b0:	ebac 0205 	sub.w	r2, ip, r5
 800f9b4:	3a15      	subs	r2, #21
 800f9b6:	f022 0203 	bic.w	r2, r2, #3
 800f9ba:	3204      	adds	r2, #4
 800f9bc:	f105 0115 	add.w	r1, r5, #21
 800f9c0:	458c      	cmp	ip, r1
 800f9c2:	bf38      	it	cc
 800f9c4:	2204      	movcc	r2, #4
 800f9c6:	9201      	str	r2, [sp, #4]
 800f9c8:	9a02      	ldr	r2, [sp, #8]
 800f9ca:	9303      	str	r3, [sp, #12]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d808      	bhi.n	800f9e2 <__multiply+0x96>
 800f9d0:	2f00      	cmp	r7, #0
 800f9d2:	dc55      	bgt.n	800fa80 <__multiply+0x134>
 800f9d4:	6107      	str	r7, [r0, #16]
 800f9d6:	b005      	add	sp, #20
 800f9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9dc:	f843 2b04 	str.w	r2, [r3], #4
 800f9e0:	e7db      	b.n	800f99a <__multiply+0x4e>
 800f9e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800f9e6:	f1ba 0f00 	cmp.w	sl, #0
 800f9ea:	d020      	beq.n	800fa2e <__multiply+0xe2>
 800f9ec:	46b1      	mov	r9, r6
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	f105 0e14 	add.w	lr, r5, #20
 800f9f4:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f9f8:	f8d9 b000 	ldr.w	fp, [r9]
 800f9fc:	b2a1      	uxth	r1, r4
 800f9fe:	fa1f fb8b 	uxth.w	fp, fp
 800fa02:	fb0a b101 	mla	r1, sl, r1, fp
 800fa06:	4411      	add	r1, r2
 800fa08:	f8d9 2000 	ldr.w	r2, [r9]
 800fa0c:	0c24      	lsrs	r4, r4, #16
 800fa0e:	0c12      	lsrs	r2, r2, #16
 800fa10:	fb0a 2404 	mla	r4, sl, r4, r2
 800fa14:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fa18:	b289      	uxth	r1, r1
 800fa1a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fa1e:	45f4      	cmp	ip, lr
 800fa20:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fa24:	f849 1b04 	str.w	r1, [r9], #4
 800fa28:	d8e4      	bhi.n	800f9f4 <__multiply+0xa8>
 800fa2a:	9901      	ldr	r1, [sp, #4]
 800fa2c:	5072      	str	r2, [r6, r1]
 800fa2e:	9a03      	ldr	r2, [sp, #12]
 800fa30:	3304      	adds	r3, #4
 800fa32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fa36:	f1b9 0f00 	cmp.w	r9, #0
 800fa3a:	d01f      	beq.n	800fa7c <__multiply+0x130>
 800fa3c:	46b6      	mov	lr, r6
 800fa3e:	f04f 0a00 	mov.w	sl, #0
 800fa42:	6834      	ldr	r4, [r6, #0]
 800fa44:	f105 0114 	add.w	r1, r5, #20
 800fa48:	880a      	ldrh	r2, [r1, #0]
 800fa4a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fa4e:	b2a4      	uxth	r4, r4
 800fa50:	fb09 b202 	mla	r2, r9, r2, fp
 800fa54:	4492      	add	sl, r2
 800fa56:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fa5a:	f84e 4b04 	str.w	r4, [lr], #4
 800fa5e:	f851 4b04 	ldr.w	r4, [r1], #4
 800fa62:	f8be 2000 	ldrh.w	r2, [lr]
 800fa66:	0c24      	lsrs	r4, r4, #16
 800fa68:	fb09 2404 	mla	r4, r9, r4, r2
 800fa6c:	458c      	cmp	ip, r1
 800fa6e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fa72:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fa76:	d8e7      	bhi.n	800fa48 <__multiply+0xfc>
 800fa78:	9a01      	ldr	r2, [sp, #4]
 800fa7a:	50b4      	str	r4, [r6, r2]
 800fa7c:	3604      	adds	r6, #4
 800fa7e:	e7a3      	b.n	800f9c8 <__multiply+0x7c>
 800fa80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d1a5      	bne.n	800f9d4 <__multiply+0x88>
 800fa88:	3f01      	subs	r7, #1
 800fa8a:	e7a1      	b.n	800f9d0 <__multiply+0x84>
 800fa8c:	080124f0 	.word	0x080124f0
 800fa90:	08012564 	.word	0x08012564

0800fa94 <__pow5mult>:
 800fa94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa98:	4615      	mov	r5, r2
 800fa9a:	f012 0203 	ands.w	r2, r2, #3
 800fa9e:	4606      	mov	r6, r0
 800faa0:	460f      	mov	r7, r1
 800faa2:	d007      	beq.n	800fab4 <__pow5mult+0x20>
 800faa4:	4c25      	ldr	r4, [pc, #148]	; (800fb3c <__pow5mult+0xa8>)
 800faa6:	3a01      	subs	r2, #1
 800faa8:	2300      	movs	r3, #0
 800faaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800faae:	f7ff fe9f 	bl	800f7f0 <__multadd>
 800fab2:	4607      	mov	r7, r0
 800fab4:	10ad      	asrs	r5, r5, #2
 800fab6:	d03d      	beq.n	800fb34 <__pow5mult+0xa0>
 800fab8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800faba:	b97c      	cbnz	r4, 800fadc <__pow5mult+0x48>
 800fabc:	2010      	movs	r0, #16
 800fabe:	f7ff fe05 	bl	800f6cc <malloc>
 800fac2:	4602      	mov	r2, r0
 800fac4:	6270      	str	r0, [r6, #36]	; 0x24
 800fac6:	b928      	cbnz	r0, 800fad4 <__pow5mult+0x40>
 800fac8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800facc:	4b1c      	ldr	r3, [pc, #112]	; (800fb40 <__pow5mult+0xac>)
 800face:	481d      	ldr	r0, [pc, #116]	; (800fb44 <__pow5mult+0xb0>)
 800fad0:	f7fd fe0c 	bl	800d6ec <__assert_func>
 800fad4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fad8:	6004      	str	r4, [r0, #0]
 800fada:	60c4      	str	r4, [r0, #12]
 800fadc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fae4:	b94c      	cbnz	r4, 800fafa <__pow5mult+0x66>
 800fae6:	f240 2171 	movw	r1, #625	; 0x271
 800faea:	4630      	mov	r0, r6
 800faec:	f7ff ff18 	bl	800f920 <__i2b>
 800faf0:	2300      	movs	r3, #0
 800faf2:	4604      	mov	r4, r0
 800faf4:	f8c8 0008 	str.w	r0, [r8, #8]
 800faf8:	6003      	str	r3, [r0, #0]
 800fafa:	f04f 0900 	mov.w	r9, #0
 800fafe:	07eb      	lsls	r3, r5, #31
 800fb00:	d50a      	bpl.n	800fb18 <__pow5mult+0x84>
 800fb02:	4639      	mov	r1, r7
 800fb04:	4622      	mov	r2, r4
 800fb06:	4630      	mov	r0, r6
 800fb08:	f7ff ff20 	bl	800f94c <__multiply>
 800fb0c:	4680      	mov	r8, r0
 800fb0e:	4639      	mov	r1, r7
 800fb10:	4630      	mov	r0, r6
 800fb12:	f7ff fe4b 	bl	800f7ac <_Bfree>
 800fb16:	4647      	mov	r7, r8
 800fb18:	106d      	asrs	r5, r5, #1
 800fb1a:	d00b      	beq.n	800fb34 <__pow5mult+0xa0>
 800fb1c:	6820      	ldr	r0, [r4, #0]
 800fb1e:	b938      	cbnz	r0, 800fb30 <__pow5mult+0x9c>
 800fb20:	4622      	mov	r2, r4
 800fb22:	4621      	mov	r1, r4
 800fb24:	4630      	mov	r0, r6
 800fb26:	f7ff ff11 	bl	800f94c <__multiply>
 800fb2a:	6020      	str	r0, [r4, #0]
 800fb2c:	f8c0 9000 	str.w	r9, [r0]
 800fb30:	4604      	mov	r4, r0
 800fb32:	e7e4      	b.n	800fafe <__pow5mult+0x6a>
 800fb34:	4638      	mov	r0, r7
 800fb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb3a:	bf00      	nop
 800fb3c:	080126b8 	.word	0x080126b8
 800fb40:	0801247a 	.word	0x0801247a
 800fb44:	08012564 	.word	0x08012564

0800fb48 <__lshift>:
 800fb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb4c:	460c      	mov	r4, r1
 800fb4e:	4607      	mov	r7, r0
 800fb50:	4691      	mov	r9, r2
 800fb52:	6923      	ldr	r3, [r4, #16]
 800fb54:	6849      	ldr	r1, [r1, #4]
 800fb56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb5a:	68a3      	ldr	r3, [r4, #8]
 800fb5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb60:	f108 0601 	add.w	r6, r8, #1
 800fb64:	42b3      	cmp	r3, r6
 800fb66:	db0b      	blt.n	800fb80 <__lshift+0x38>
 800fb68:	4638      	mov	r0, r7
 800fb6a:	f7ff fddf 	bl	800f72c <_Balloc>
 800fb6e:	4605      	mov	r5, r0
 800fb70:	b948      	cbnz	r0, 800fb86 <__lshift+0x3e>
 800fb72:	4602      	mov	r2, r0
 800fb74:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fb78:	4b27      	ldr	r3, [pc, #156]	; (800fc18 <__lshift+0xd0>)
 800fb7a:	4828      	ldr	r0, [pc, #160]	; (800fc1c <__lshift+0xd4>)
 800fb7c:	f7fd fdb6 	bl	800d6ec <__assert_func>
 800fb80:	3101      	adds	r1, #1
 800fb82:	005b      	lsls	r3, r3, #1
 800fb84:	e7ee      	b.n	800fb64 <__lshift+0x1c>
 800fb86:	2300      	movs	r3, #0
 800fb88:	f100 0114 	add.w	r1, r0, #20
 800fb8c:	f100 0210 	add.w	r2, r0, #16
 800fb90:	4618      	mov	r0, r3
 800fb92:	4553      	cmp	r3, sl
 800fb94:	db33      	blt.n	800fbfe <__lshift+0xb6>
 800fb96:	6920      	ldr	r0, [r4, #16]
 800fb98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb9c:	f104 0314 	add.w	r3, r4, #20
 800fba0:	f019 091f 	ands.w	r9, r9, #31
 800fba4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fba8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fbac:	d02b      	beq.n	800fc06 <__lshift+0xbe>
 800fbae:	468a      	mov	sl, r1
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	f1c9 0e20 	rsb	lr, r9, #32
 800fbb6:	6818      	ldr	r0, [r3, #0]
 800fbb8:	fa00 f009 	lsl.w	r0, r0, r9
 800fbbc:	4302      	orrs	r2, r0
 800fbbe:	f84a 2b04 	str.w	r2, [sl], #4
 800fbc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbc6:	459c      	cmp	ip, r3
 800fbc8:	fa22 f20e 	lsr.w	r2, r2, lr
 800fbcc:	d8f3      	bhi.n	800fbb6 <__lshift+0x6e>
 800fbce:	ebac 0304 	sub.w	r3, ip, r4
 800fbd2:	3b15      	subs	r3, #21
 800fbd4:	f023 0303 	bic.w	r3, r3, #3
 800fbd8:	3304      	adds	r3, #4
 800fbda:	f104 0015 	add.w	r0, r4, #21
 800fbde:	4584      	cmp	ip, r0
 800fbe0:	bf38      	it	cc
 800fbe2:	2304      	movcc	r3, #4
 800fbe4:	50ca      	str	r2, [r1, r3]
 800fbe6:	b10a      	cbz	r2, 800fbec <__lshift+0xa4>
 800fbe8:	f108 0602 	add.w	r6, r8, #2
 800fbec:	3e01      	subs	r6, #1
 800fbee:	4638      	mov	r0, r7
 800fbf0:	4621      	mov	r1, r4
 800fbf2:	612e      	str	r6, [r5, #16]
 800fbf4:	f7ff fdda 	bl	800f7ac <_Bfree>
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc02:	3301      	adds	r3, #1
 800fc04:	e7c5      	b.n	800fb92 <__lshift+0x4a>
 800fc06:	3904      	subs	r1, #4
 800fc08:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc0c:	459c      	cmp	ip, r3
 800fc0e:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc12:	d8f9      	bhi.n	800fc08 <__lshift+0xc0>
 800fc14:	e7ea      	b.n	800fbec <__lshift+0xa4>
 800fc16:	bf00      	nop
 800fc18:	080124f0 	.word	0x080124f0
 800fc1c:	08012564 	.word	0x08012564

0800fc20 <__mcmp>:
 800fc20:	4603      	mov	r3, r0
 800fc22:	690a      	ldr	r2, [r1, #16]
 800fc24:	6900      	ldr	r0, [r0, #16]
 800fc26:	b530      	push	{r4, r5, lr}
 800fc28:	1a80      	subs	r0, r0, r2
 800fc2a:	d10d      	bne.n	800fc48 <__mcmp+0x28>
 800fc2c:	3314      	adds	r3, #20
 800fc2e:	3114      	adds	r1, #20
 800fc30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fc34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fc38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fc3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fc40:	4295      	cmp	r5, r2
 800fc42:	d002      	beq.n	800fc4a <__mcmp+0x2a>
 800fc44:	d304      	bcc.n	800fc50 <__mcmp+0x30>
 800fc46:	2001      	movs	r0, #1
 800fc48:	bd30      	pop	{r4, r5, pc}
 800fc4a:	42a3      	cmp	r3, r4
 800fc4c:	d3f4      	bcc.n	800fc38 <__mcmp+0x18>
 800fc4e:	e7fb      	b.n	800fc48 <__mcmp+0x28>
 800fc50:	f04f 30ff 	mov.w	r0, #4294967295
 800fc54:	e7f8      	b.n	800fc48 <__mcmp+0x28>
	...

0800fc58 <__mdiff>:
 800fc58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc5c:	460c      	mov	r4, r1
 800fc5e:	4606      	mov	r6, r0
 800fc60:	4611      	mov	r1, r2
 800fc62:	4620      	mov	r0, r4
 800fc64:	4692      	mov	sl, r2
 800fc66:	f7ff ffdb 	bl	800fc20 <__mcmp>
 800fc6a:	1e05      	subs	r5, r0, #0
 800fc6c:	d111      	bne.n	800fc92 <__mdiff+0x3a>
 800fc6e:	4629      	mov	r1, r5
 800fc70:	4630      	mov	r0, r6
 800fc72:	f7ff fd5b 	bl	800f72c <_Balloc>
 800fc76:	4602      	mov	r2, r0
 800fc78:	b928      	cbnz	r0, 800fc86 <__mdiff+0x2e>
 800fc7a:	f240 2132 	movw	r1, #562	; 0x232
 800fc7e:	4b3c      	ldr	r3, [pc, #240]	; (800fd70 <__mdiff+0x118>)
 800fc80:	483c      	ldr	r0, [pc, #240]	; (800fd74 <__mdiff+0x11c>)
 800fc82:	f7fd fd33 	bl	800d6ec <__assert_func>
 800fc86:	2301      	movs	r3, #1
 800fc88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc8c:	4610      	mov	r0, r2
 800fc8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc92:	bfa4      	itt	ge
 800fc94:	4653      	movge	r3, sl
 800fc96:	46a2      	movge	sl, r4
 800fc98:	4630      	mov	r0, r6
 800fc9a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800fc9e:	bfa6      	itte	ge
 800fca0:	461c      	movge	r4, r3
 800fca2:	2500      	movge	r5, #0
 800fca4:	2501      	movlt	r5, #1
 800fca6:	f7ff fd41 	bl	800f72c <_Balloc>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	b918      	cbnz	r0, 800fcb6 <__mdiff+0x5e>
 800fcae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fcb2:	4b2f      	ldr	r3, [pc, #188]	; (800fd70 <__mdiff+0x118>)
 800fcb4:	e7e4      	b.n	800fc80 <__mdiff+0x28>
 800fcb6:	f100 0814 	add.w	r8, r0, #20
 800fcba:	f8da 7010 	ldr.w	r7, [sl, #16]
 800fcbe:	60c5      	str	r5, [r0, #12]
 800fcc0:	f04f 0c00 	mov.w	ip, #0
 800fcc4:	f10a 0514 	add.w	r5, sl, #20
 800fcc8:	f10a 0010 	add.w	r0, sl, #16
 800fccc:	46c2      	mov	sl, r8
 800fcce:	6926      	ldr	r6, [r4, #16]
 800fcd0:	f104 0914 	add.w	r9, r4, #20
 800fcd4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800fcd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fcdc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800fce0:	f859 3b04 	ldr.w	r3, [r9], #4
 800fce4:	fa1f f18b 	uxth.w	r1, fp
 800fce8:	4461      	add	r1, ip
 800fcea:	fa1f fc83 	uxth.w	ip, r3
 800fcee:	0c1b      	lsrs	r3, r3, #16
 800fcf0:	eba1 010c 	sub.w	r1, r1, ip
 800fcf4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fcf8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fcfc:	b289      	uxth	r1, r1
 800fcfe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800fd02:	454e      	cmp	r6, r9
 800fd04:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fd08:	f84a 3b04 	str.w	r3, [sl], #4
 800fd0c:	d8e6      	bhi.n	800fcdc <__mdiff+0x84>
 800fd0e:	1b33      	subs	r3, r6, r4
 800fd10:	3b15      	subs	r3, #21
 800fd12:	f023 0303 	bic.w	r3, r3, #3
 800fd16:	3415      	adds	r4, #21
 800fd18:	3304      	adds	r3, #4
 800fd1a:	42a6      	cmp	r6, r4
 800fd1c:	bf38      	it	cc
 800fd1e:	2304      	movcc	r3, #4
 800fd20:	441d      	add	r5, r3
 800fd22:	4443      	add	r3, r8
 800fd24:	461e      	mov	r6, r3
 800fd26:	462c      	mov	r4, r5
 800fd28:	4574      	cmp	r4, lr
 800fd2a:	d30e      	bcc.n	800fd4a <__mdiff+0xf2>
 800fd2c:	f10e 0103 	add.w	r1, lr, #3
 800fd30:	1b49      	subs	r1, r1, r5
 800fd32:	f021 0103 	bic.w	r1, r1, #3
 800fd36:	3d03      	subs	r5, #3
 800fd38:	45ae      	cmp	lr, r5
 800fd3a:	bf38      	it	cc
 800fd3c:	2100      	movcc	r1, #0
 800fd3e:	4419      	add	r1, r3
 800fd40:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800fd44:	b18b      	cbz	r3, 800fd6a <__mdiff+0x112>
 800fd46:	6117      	str	r7, [r2, #16]
 800fd48:	e7a0      	b.n	800fc8c <__mdiff+0x34>
 800fd4a:	f854 8b04 	ldr.w	r8, [r4], #4
 800fd4e:	fa1f f188 	uxth.w	r1, r8
 800fd52:	4461      	add	r1, ip
 800fd54:	1408      	asrs	r0, r1, #16
 800fd56:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800fd5a:	b289      	uxth	r1, r1
 800fd5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fd60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fd64:	f846 1b04 	str.w	r1, [r6], #4
 800fd68:	e7de      	b.n	800fd28 <__mdiff+0xd0>
 800fd6a:	3f01      	subs	r7, #1
 800fd6c:	e7e8      	b.n	800fd40 <__mdiff+0xe8>
 800fd6e:	bf00      	nop
 800fd70:	080124f0 	.word	0x080124f0
 800fd74:	08012564 	.word	0x08012564

0800fd78 <__d2b>:
 800fd78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fd7c:	2101      	movs	r1, #1
 800fd7e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800fd82:	4690      	mov	r8, r2
 800fd84:	461d      	mov	r5, r3
 800fd86:	f7ff fcd1 	bl	800f72c <_Balloc>
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	b930      	cbnz	r0, 800fd9c <__d2b+0x24>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	f240 310a 	movw	r1, #778	; 0x30a
 800fd94:	4b24      	ldr	r3, [pc, #144]	; (800fe28 <__d2b+0xb0>)
 800fd96:	4825      	ldr	r0, [pc, #148]	; (800fe2c <__d2b+0xb4>)
 800fd98:	f7fd fca8 	bl	800d6ec <__assert_func>
 800fd9c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800fda0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800fda4:	bb2d      	cbnz	r5, 800fdf2 <__d2b+0x7a>
 800fda6:	9301      	str	r3, [sp, #4]
 800fda8:	f1b8 0300 	subs.w	r3, r8, #0
 800fdac:	d026      	beq.n	800fdfc <__d2b+0x84>
 800fdae:	4668      	mov	r0, sp
 800fdb0:	9300      	str	r3, [sp, #0]
 800fdb2:	f7ff fd87 	bl	800f8c4 <__lo0bits>
 800fdb6:	9900      	ldr	r1, [sp, #0]
 800fdb8:	b1f0      	cbz	r0, 800fdf8 <__d2b+0x80>
 800fdba:	9a01      	ldr	r2, [sp, #4]
 800fdbc:	f1c0 0320 	rsb	r3, r0, #32
 800fdc0:	fa02 f303 	lsl.w	r3, r2, r3
 800fdc4:	430b      	orrs	r3, r1
 800fdc6:	40c2      	lsrs	r2, r0
 800fdc8:	6163      	str	r3, [r4, #20]
 800fdca:	9201      	str	r2, [sp, #4]
 800fdcc:	9b01      	ldr	r3, [sp, #4]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	bf14      	ite	ne
 800fdd2:	2102      	movne	r1, #2
 800fdd4:	2101      	moveq	r1, #1
 800fdd6:	61a3      	str	r3, [r4, #24]
 800fdd8:	6121      	str	r1, [r4, #16]
 800fdda:	b1c5      	cbz	r5, 800fe0e <__d2b+0x96>
 800fddc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fde0:	4405      	add	r5, r0
 800fde2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fde6:	603d      	str	r5, [r7, #0]
 800fde8:	6030      	str	r0, [r6, #0]
 800fdea:	4620      	mov	r0, r4
 800fdec:	b002      	add	sp, #8
 800fdee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fdf6:	e7d6      	b.n	800fda6 <__d2b+0x2e>
 800fdf8:	6161      	str	r1, [r4, #20]
 800fdfa:	e7e7      	b.n	800fdcc <__d2b+0x54>
 800fdfc:	a801      	add	r0, sp, #4
 800fdfe:	f7ff fd61 	bl	800f8c4 <__lo0bits>
 800fe02:	2101      	movs	r1, #1
 800fe04:	9b01      	ldr	r3, [sp, #4]
 800fe06:	6121      	str	r1, [r4, #16]
 800fe08:	6163      	str	r3, [r4, #20]
 800fe0a:	3020      	adds	r0, #32
 800fe0c:	e7e5      	b.n	800fdda <__d2b+0x62>
 800fe0e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800fe12:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe16:	6038      	str	r0, [r7, #0]
 800fe18:	6918      	ldr	r0, [r3, #16]
 800fe1a:	f7ff fd33 	bl	800f884 <__hi0bits>
 800fe1e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800fe22:	6031      	str	r1, [r6, #0]
 800fe24:	e7e1      	b.n	800fdea <__d2b+0x72>
 800fe26:	bf00      	nop
 800fe28:	080124f0 	.word	0x080124f0
 800fe2c:	08012564 	.word	0x08012564

0800fe30 <_calloc_r>:
 800fe30:	b538      	push	{r3, r4, r5, lr}
 800fe32:	fb02 f501 	mul.w	r5, r2, r1
 800fe36:	4629      	mov	r1, r5
 800fe38:	f000 f854 	bl	800fee4 <_malloc_r>
 800fe3c:	4604      	mov	r4, r0
 800fe3e:	b118      	cbz	r0, 800fe48 <_calloc_r+0x18>
 800fe40:	462a      	mov	r2, r5
 800fe42:	2100      	movs	r1, #0
 800fe44:	f7fd fcba 	bl	800d7bc <memset>
 800fe48:	4620      	mov	r0, r4
 800fe4a:	bd38      	pop	{r3, r4, r5, pc}

0800fe4c <_free_r>:
 800fe4c:	b538      	push	{r3, r4, r5, lr}
 800fe4e:	4605      	mov	r5, r0
 800fe50:	2900      	cmp	r1, #0
 800fe52:	d043      	beq.n	800fedc <_free_r+0x90>
 800fe54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe58:	1f0c      	subs	r4, r1, #4
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	bfb8      	it	lt
 800fe5e:	18e4      	addlt	r4, r4, r3
 800fe60:	f000 fb1c 	bl	801049c <__malloc_lock>
 800fe64:	4a1e      	ldr	r2, [pc, #120]	; (800fee0 <_free_r+0x94>)
 800fe66:	6813      	ldr	r3, [r2, #0]
 800fe68:	4610      	mov	r0, r2
 800fe6a:	b933      	cbnz	r3, 800fe7a <_free_r+0x2e>
 800fe6c:	6063      	str	r3, [r4, #4]
 800fe6e:	6014      	str	r4, [r2, #0]
 800fe70:	4628      	mov	r0, r5
 800fe72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe76:	f000 bb17 	b.w	80104a8 <__malloc_unlock>
 800fe7a:	42a3      	cmp	r3, r4
 800fe7c:	d90a      	bls.n	800fe94 <_free_r+0x48>
 800fe7e:	6821      	ldr	r1, [r4, #0]
 800fe80:	1862      	adds	r2, r4, r1
 800fe82:	4293      	cmp	r3, r2
 800fe84:	bf01      	itttt	eq
 800fe86:	681a      	ldreq	r2, [r3, #0]
 800fe88:	685b      	ldreq	r3, [r3, #4]
 800fe8a:	1852      	addeq	r2, r2, r1
 800fe8c:	6022      	streq	r2, [r4, #0]
 800fe8e:	6063      	str	r3, [r4, #4]
 800fe90:	6004      	str	r4, [r0, #0]
 800fe92:	e7ed      	b.n	800fe70 <_free_r+0x24>
 800fe94:	461a      	mov	r2, r3
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	b10b      	cbz	r3, 800fe9e <_free_r+0x52>
 800fe9a:	42a3      	cmp	r3, r4
 800fe9c:	d9fa      	bls.n	800fe94 <_free_r+0x48>
 800fe9e:	6811      	ldr	r1, [r2, #0]
 800fea0:	1850      	adds	r0, r2, r1
 800fea2:	42a0      	cmp	r0, r4
 800fea4:	d10b      	bne.n	800febe <_free_r+0x72>
 800fea6:	6820      	ldr	r0, [r4, #0]
 800fea8:	4401      	add	r1, r0
 800feaa:	1850      	adds	r0, r2, r1
 800feac:	4283      	cmp	r3, r0
 800feae:	6011      	str	r1, [r2, #0]
 800feb0:	d1de      	bne.n	800fe70 <_free_r+0x24>
 800feb2:	6818      	ldr	r0, [r3, #0]
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	4401      	add	r1, r0
 800feb8:	6011      	str	r1, [r2, #0]
 800feba:	6053      	str	r3, [r2, #4]
 800febc:	e7d8      	b.n	800fe70 <_free_r+0x24>
 800febe:	d902      	bls.n	800fec6 <_free_r+0x7a>
 800fec0:	230c      	movs	r3, #12
 800fec2:	602b      	str	r3, [r5, #0]
 800fec4:	e7d4      	b.n	800fe70 <_free_r+0x24>
 800fec6:	6820      	ldr	r0, [r4, #0]
 800fec8:	1821      	adds	r1, r4, r0
 800feca:	428b      	cmp	r3, r1
 800fecc:	bf01      	itttt	eq
 800fece:	6819      	ldreq	r1, [r3, #0]
 800fed0:	685b      	ldreq	r3, [r3, #4]
 800fed2:	1809      	addeq	r1, r1, r0
 800fed4:	6021      	streq	r1, [r4, #0]
 800fed6:	6063      	str	r3, [r4, #4]
 800fed8:	6054      	str	r4, [r2, #4]
 800feda:	e7c9      	b.n	800fe70 <_free_r+0x24>
 800fedc:	bd38      	pop	{r3, r4, r5, pc}
 800fede:	bf00      	nop
 800fee0:	200035dc 	.word	0x200035dc

0800fee4 <_malloc_r>:
 800fee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fee6:	1ccd      	adds	r5, r1, #3
 800fee8:	f025 0503 	bic.w	r5, r5, #3
 800feec:	3508      	adds	r5, #8
 800feee:	2d0c      	cmp	r5, #12
 800fef0:	bf38      	it	cc
 800fef2:	250c      	movcc	r5, #12
 800fef4:	2d00      	cmp	r5, #0
 800fef6:	4606      	mov	r6, r0
 800fef8:	db01      	blt.n	800fefe <_malloc_r+0x1a>
 800fefa:	42a9      	cmp	r1, r5
 800fefc:	d903      	bls.n	800ff06 <_malloc_r+0x22>
 800fefe:	230c      	movs	r3, #12
 800ff00:	6033      	str	r3, [r6, #0]
 800ff02:	2000      	movs	r0, #0
 800ff04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff06:	f000 fac9 	bl	801049c <__malloc_lock>
 800ff0a:	4921      	ldr	r1, [pc, #132]	; (800ff90 <_malloc_r+0xac>)
 800ff0c:	680a      	ldr	r2, [r1, #0]
 800ff0e:	4614      	mov	r4, r2
 800ff10:	b99c      	cbnz	r4, 800ff3a <_malloc_r+0x56>
 800ff12:	4f20      	ldr	r7, [pc, #128]	; (800ff94 <_malloc_r+0xb0>)
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	b923      	cbnz	r3, 800ff22 <_malloc_r+0x3e>
 800ff18:	4621      	mov	r1, r4
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	f000 f9be 	bl	801029c <_sbrk_r>
 800ff20:	6038      	str	r0, [r7, #0]
 800ff22:	4629      	mov	r1, r5
 800ff24:	4630      	mov	r0, r6
 800ff26:	f000 f9b9 	bl	801029c <_sbrk_r>
 800ff2a:	1c43      	adds	r3, r0, #1
 800ff2c:	d123      	bne.n	800ff76 <_malloc_r+0x92>
 800ff2e:	230c      	movs	r3, #12
 800ff30:	4630      	mov	r0, r6
 800ff32:	6033      	str	r3, [r6, #0]
 800ff34:	f000 fab8 	bl	80104a8 <__malloc_unlock>
 800ff38:	e7e3      	b.n	800ff02 <_malloc_r+0x1e>
 800ff3a:	6823      	ldr	r3, [r4, #0]
 800ff3c:	1b5b      	subs	r3, r3, r5
 800ff3e:	d417      	bmi.n	800ff70 <_malloc_r+0x8c>
 800ff40:	2b0b      	cmp	r3, #11
 800ff42:	d903      	bls.n	800ff4c <_malloc_r+0x68>
 800ff44:	6023      	str	r3, [r4, #0]
 800ff46:	441c      	add	r4, r3
 800ff48:	6025      	str	r5, [r4, #0]
 800ff4a:	e004      	b.n	800ff56 <_malloc_r+0x72>
 800ff4c:	6863      	ldr	r3, [r4, #4]
 800ff4e:	42a2      	cmp	r2, r4
 800ff50:	bf0c      	ite	eq
 800ff52:	600b      	streq	r3, [r1, #0]
 800ff54:	6053      	strne	r3, [r2, #4]
 800ff56:	4630      	mov	r0, r6
 800ff58:	f000 faa6 	bl	80104a8 <__malloc_unlock>
 800ff5c:	f104 000b 	add.w	r0, r4, #11
 800ff60:	1d23      	adds	r3, r4, #4
 800ff62:	f020 0007 	bic.w	r0, r0, #7
 800ff66:	1ac2      	subs	r2, r0, r3
 800ff68:	d0cc      	beq.n	800ff04 <_malloc_r+0x20>
 800ff6a:	1a1b      	subs	r3, r3, r0
 800ff6c:	50a3      	str	r3, [r4, r2]
 800ff6e:	e7c9      	b.n	800ff04 <_malloc_r+0x20>
 800ff70:	4622      	mov	r2, r4
 800ff72:	6864      	ldr	r4, [r4, #4]
 800ff74:	e7cc      	b.n	800ff10 <_malloc_r+0x2c>
 800ff76:	1cc4      	adds	r4, r0, #3
 800ff78:	f024 0403 	bic.w	r4, r4, #3
 800ff7c:	42a0      	cmp	r0, r4
 800ff7e:	d0e3      	beq.n	800ff48 <_malloc_r+0x64>
 800ff80:	1a21      	subs	r1, r4, r0
 800ff82:	4630      	mov	r0, r6
 800ff84:	f000 f98a 	bl	801029c <_sbrk_r>
 800ff88:	3001      	adds	r0, #1
 800ff8a:	d1dd      	bne.n	800ff48 <_malloc_r+0x64>
 800ff8c:	e7cf      	b.n	800ff2e <_malloc_r+0x4a>
 800ff8e:	bf00      	nop
 800ff90:	200035dc 	.word	0x200035dc
 800ff94:	200035e0 	.word	0x200035e0

0800ff98 <_realloc_r>:
 800ff98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff9a:	4607      	mov	r7, r0
 800ff9c:	4614      	mov	r4, r2
 800ff9e:	460e      	mov	r6, r1
 800ffa0:	b921      	cbnz	r1, 800ffac <_realloc_r+0x14>
 800ffa2:	4611      	mov	r1, r2
 800ffa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ffa8:	f7ff bf9c 	b.w	800fee4 <_malloc_r>
 800ffac:	b922      	cbnz	r2, 800ffb8 <_realloc_r+0x20>
 800ffae:	f7ff ff4d 	bl	800fe4c <_free_r>
 800ffb2:	4625      	mov	r5, r4
 800ffb4:	4628      	mov	r0, r5
 800ffb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffb8:	f000 fa7c 	bl	80104b4 <_malloc_usable_size_r>
 800ffbc:	42a0      	cmp	r0, r4
 800ffbe:	d20f      	bcs.n	800ffe0 <_realloc_r+0x48>
 800ffc0:	4621      	mov	r1, r4
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	f7ff ff8e 	bl	800fee4 <_malloc_r>
 800ffc8:	4605      	mov	r5, r0
 800ffca:	2800      	cmp	r0, #0
 800ffcc:	d0f2      	beq.n	800ffb4 <_realloc_r+0x1c>
 800ffce:	4631      	mov	r1, r6
 800ffd0:	4622      	mov	r2, r4
 800ffd2:	f7fd fbe5 	bl	800d7a0 <memcpy>
 800ffd6:	4631      	mov	r1, r6
 800ffd8:	4638      	mov	r0, r7
 800ffda:	f7ff ff37 	bl	800fe4c <_free_r>
 800ffde:	e7e9      	b.n	800ffb4 <_realloc_r+0x1c>
 800ffe0:	4635      	mov	r5, r6
 800ffe2:	e7e7      	b.n	800ffb4 <_realloc_r+0x1c>

0800ffe4 <__ssputs_r>:
 800ffe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffe8:	688e      	ldr	r6, [r1, #8]
 800ffea:	4682      	mov	sl, r0
 800ffec:	429e      	cmp	r6, r3
 800ffee:	460c      	mov	r4, r1
 800fff0:	4690      	mov	r8, r2
 800fff2:	461f      	mov	r7, r3
 800fff4:	d838      	bhi.n	8010068 <__ssputs_r+0x84>
 800fff6:	898a      	ldrh	r2, [r1, #12]
 800fff8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fffc:	d032      	beq.n	8010064 <__ssputs_r+0x80>
 800fffe:	6825      	ldr	r5, [r4, #0]
 8010000:	6909      	ldr	r1, [r1, #16]
 8010002:	3301      	adds	r3, #1
 8010004:	eba5 0901 	sub.w	r9, r5, r1
 8010008:	6965      	ldr	r5, [r4, #20]
 801000a:	444b      	add	r3, r9
 801000c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010010:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010014:	106d      	asrs	r5, r5, #1
 8010016:	429d      	cmp	r5, r3
 8010018:	bf38      	it	cc
 801001a:	461d      	movcc	r5, r3
 801001c:	0553      	lsls	r3, r2, #21
 801001e:	d531      	bpl.n	8010084 <__ssputs_r+0xa0>
 8010020:	4629      	mov	r1, r5
 8010022:	f7ff ff5f 	bl	800fee4 <_malloc_r>
 8010026:	4606      	mov	r6, r0
 8010028:	b950      	cbnz	r0, 8010040 <__ssputs_r+0x5c>
 801002a:	230c      	movs	r3, #12
 801002c:	f04f 30ff 	mov.w	r0, #4294967295
 8010030:	f8ca 3000 	str.w	r3, [sl]
 8010034:	89a3      	ldrh	r3, [r4, #12]
 8010036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801003a:	81a3      	strh	r3, [r4, #12]
 801003c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010040:	464a      	mov	r2, r9
 8010042:	6921      	ldr	r1, [r4, #16]
 8010044:	f7fd fbac 	bl	800d7a0 <memcpy>
 8010048:	89a3      	ldrh	r3, [r4, #12]
 801004a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801004e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010052:	81a3      	strh	r3, [r4, #12]
 8010054:	6126      	str	r6, [r4, #16]
 8010056:	444e      	add	r6, r9
 8010058:	6026      	str	r6, [r4, #0]
 801005a:	463e      	mov	r6, r7
 801005c:	6165      	str	r5, [r4, #20]
 801005e:	eba5 0509 	sub.w	r5, r5, r9
 8010062:	60a5      	str	r5, [r4, #8]
 8010064:	42be      	cmp	r6, r7
 8010066:	d900      	bls.n	801006a <__ssputs_r+0x86>
 8010068:	463e      	mov	r6, r7
 801006a:	4632      	mov	r2, r6
 801006c:	4641      	mov	r1, r8
 801006e:	6820      	ldr	r0, [r4, #0]
 8010070:	f7ff fb42 	bl	800f6f8 <memmove>
 8010074:	68a3      	ldr	r3, [r4, #8]
 8010076:	6822      	ldr	r2, [r4, #0]
 8010078:	1b9b      	subs	r3, r3, r6
 801007a:	4432      	add	r2, r6
 801007c:	2000      	movs	r0, #0
 801007e:	60a3      	str	r3, [r4, #8]
 8010080:	6022      	str	r2, [r4, #0]
 8010082:	e7db      	b.n	801003c <__ssputs_r+0x58>
 8010084:	462a      	mov	r2, r5
 8010086:	f7ff ff87 	bl	800ff98 <_realloc_r>
 801008a:	4606      	mov	r6, r0
 801008c:	2800      	cmp	r0, #0
 801008e:	d1e1      	bne.n	8010054 <__ssputs_r+0x70>
 8010090:	4650      	mov	r0, sl
 8010092:	6921      	ldr	r1, [r4, #16]
 8010094:	f7ff feda 	bl	800fe4c <_free_r>
 8010098:	e7c7      	b.n	801002a <__ssputs_r+0x46>
	...

0801009c <_svfiprintf_r>:
 801009c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100a0:	4698      	mov	r8, r3
 80100a2:	898b      	ldrh	r3, [r1, #12]
 80100a4:	4607      	mov	r7, r0
 80100a6:	061b      	lsls	r3, r3, #24
 80100a8:	460d      	mov	r5, r1
 80100aa:	4614      	mov	r4, r2
 80100ac:	b09d      	sub	sp, #116	; 0x74
 80100ae:	d50e      	bpl.n	80100ce <_svfiprintf_r+0x32>
 80100b0:	690b      	ldr	r3, [r1, #16]
 80100b2:	b963      	cbnz	r3, 80100ce <_svfiprintf_r+0x32>
 80100b4:	2140      	movs	r1, #64	; 0x40
 80100b6:	f7ff ff15 	bl	800fee4 <_malloc_r>
 80100ba:	6028      	str	r0, [r5, #0]
 80100bc:	6128      	str	r0, [r5, #16]
 80100be:	b920      	cbnz	r0, 80100ca <_svfiprintf_r+0x2e>
 80100c0:	230c      	movs	r3, #12
 80100c2:	603b      	str	r3, [r7, #0]
 80100c4:	f04f 30ff 	mov.w	r0, #4294967295
 80100c8:	e0d1      	b.n	801026e <_svfiprintf_r+0x1d2>
 80100ca:	2340      	movs	r3, #64	; 0x40
 80100cc:	616b      	str	r3, [r5, #20]
 80100ce:	2300      	movs	r3, #0
 80100d0:	9309      	str	r3, [sp, #36]	; 0x24
 80100d2:	2320      	movs	r3, #32
 80100d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100d8:	2330      	movs	r3, #48	; 0x30
 80100da:	f04f 0901 	mov.w	r9, #1
 80100de:	f8cd 800c 	str.w	r8, [sp, #12]
 80100e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010288 <_svfiprintf_r+0x1ec>
 80100e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80100ea:	4623      	mov	r3, r4
 80100ec:	469a      	mov	sl, r3
 80100ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100f2:	b10a      	cbz	r2, 80100f8 <_svfiprintf_r+0x5c>
 80100f4:	2a25      	cmp	r2, #37	; 0x25
 80100f6:	d1f9      	bne.n	80100ec <_svfiprintf_r+0x50>
 80100f8:	ebba 0b04 	subs.w	fp, sl, r4
 80100fc:	d00b      	beq.n	8010116 <_svfiprintf_r+0x7a>
 80100fe:	465b      	mov	r3, fp
 8010100:	4622      	mov	r2, r4
 8010102:	4629      	mov	r1, r5
 8010104:	4638      	mov	r0, r7
 8010106:	f7ff ff6d 	bl	800ffe4 <__ssputs_r>
 801010a:	3001      	adds	r0, #1
 801010c:	f000 80aa 	beq.w	8010264 <_svfiprintf_r+0x1c8>
 8010110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010112:	445a      	add	r2, fp
 8010114:	9209      	str	r2, [sp, #36]	; 0x24
 8010116:	f89a 3000 	ldrb.w	r3, [sl]
 801011a:	2b00      	cmp	r3, #0
 801011c:	f000 80a2 	beq.w	8010264 <_svfiprintf_r+0x1c8>
 8010120:	2300      	movs	r3, #0
 8010122:	f04f 32ff 	mov.w	r2, #4294967295
 8010126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801012a:	f10a 0a01 	add.w	sl, sl, #1
 801012e:	9304      	str	r3, [sp, #16]
 8010130:	9307      	str	r3, [sp, #28]
 8010132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010136:	931a      	str	r3, [sp, #104]	; 0x68
 8010138:	4654      	mov	r4, sl
 801013a:	2205      	movs	r2, #5
 801013c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010140:	4851      	ldr	r0, [pc, #324]	; (8010288 <_svfiprintf_r+0x1ec>)
 8010142:	f7ff facb 	bl	800f6dc <memchr>
 8010146:	9a04      	ldr	r2, [sp, #16]
 8010148:	b9d8      	cbnz	r0, 8010182 <_svfiprintf_r+0xe6>
 801014a:	06d0      	lsls	r0, r2, #27
 801014c:	bf44      	itt	mi
 801014e:	2320      	movmi	r3, #32
 8010150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010154:	0711      	lsls	r1, r2, #28
 8010156:	bf44      	itt	mi
 8010158:	232b      	movmi	r3, #43	; 0x2b
 801015a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801015e:	f89a 3000 	ldrb.w	r3, [sl]
 8010162:	2b2a      	cmp	r3, #42	; 0x2a
 8010164:	d015      	beq.n	8010192 <_svfiprintf_r+0xf6>
 8010166:	4654      	mov	r4, sl
 8010168:	2000      	movs	r0, #0
 801016a:	f04f 0c0a 	mov.w	ip, #10
 801016e:	9a07      	ldr	r2, [sp, #28]
 8010170:	4621      	mov	r1, r4
 8010172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010176:	3b30      	subs	r3, #48	; 0x30
 8010178:	2b09      	cmp	r3, #9
 801017a:	d94e      	bls.n	801021a <_svfiprintf_r+0x17e>
 801017c:	b1b0      	cbz	r0, 80101ac <_svfiprintf_r+0x110>
 801017e:	9207      	str	r2, [sp, #28]
 8010180:	e014      	b.n	80101ac <_svfiprintf_r+0x110>
 8010182:	eba0 0308 	sub.w	r3, r0, r8
 8010186:	fa09 f303 	lsl.w	r3, r9, r3
 801018a:	4313      	orrs	r3, r2
 801018c:	46a2      	mov	sl, r4
 801018e:	9304      	str	r3, [sp, #16]
 8010190:	e7d2      	b.n	8010138 <_svfiprintf_r+0x9c>
 8010192:	9b03      	ldr	r3, [sp, #12]
 8010194:	1d19      	adds	r1, r3, #4
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	9103      	str	r1, [sp, #12]
 801019a:	2b00      	cmp	r3, #0
 801019c:	bfbb      	ittet	lt
 801019e:	425b      	neglt	r3, r3
 80101a0:	f042 0202 	orrlt.w	r2, r2, #2
 80101a4:	9307      	strge	r3, [sp, #28]
 80101a6:	9307      	strlt	r3, [sp, #28]
 80101a8:	bfb8      	it	lt
 80101aa:	9204      	strlt	r2, [sp, #16]
 80101ac:	7823      	ldrb	r3, [r4, #0]
 80101ae:	2b2e      	cmp	r3, #46	; 0x2e
 80101b0:	d10c      	bne.n	80101cc <_svfiprintf_r+0x130>
 80101b2:	7863      	ldrb	r3, [r4, #1]
 80101b4:	2b2a      	cmp	r3, #42	; 0x2a
 80101b6:	d135      	bne.n	8010224 <_svfiprintf_r+0x188>
 80101b8:	9b03      	ldr	r3, [sp, #12]
 80101ba:	3402      	adds	r4, #2
 80101bc:	1d1a      	adds	r2, r3, #4
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	9203      	str	r2, [sp, #12]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	bfb8      	it	lt
 80101c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80101ca:	9305      	str	r3, [sp, #20]
 80101cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010298 <_svfiprintf_r+0x1fc>
 80101d0:	2203      	movs	r2, #3
 80101d2:	4650      	mov	r0, sl
 80101d4:	7821      	ldrb	r1, [r4, #0]
 80101d6:	f7ff fa81 	bl	800f6dc <memchr>
 80101da:	b140      	cbz	r0, 80101ee <_svfiprintf_r+0x152>
 80101dc:	2340      	movs	r3, #64	; 0x40
 80101de:	eba0 000a 	sub.w	r0, r0, sl
 80101e2:	fa03 f000 	lsl.w	r0, r3, r0
 80101e6:	9b04      	ldr	r3, [sp, #16]
 80101e8:	3401      	adds	r4, #1
 80101ea:	4303      	orrs	r3, r0
 80101ec:	9304      	str	r3, [sp, #16]
 80101ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101f2:	2206      	movs	r2, #6
 80101f4:	4825      	ldr	r0, [pc, #148]	; (801028c <_svfiprintf_r+0x1f0>)
 80101f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80101fa:	f7ff fa6f 	bl	800f6dc <memchr>
 80101fe:	2800      	cmp	r0, #0
 8010200:	d038      	beq.n	8010274 <_svfiprintf_r+0x1d8>
 8010202:	4b23      	ldr	r3, [pc, #140]	; (8010290 <_svfiprintf_r+0x1f4>)
 8010204:	bb1b      	cbnz	r3, 801024e <_svfiprintf_r+0x1b2>
 8010206:	9b03      	ldr	r3, [sp, #12]
 8010208:	3307      	adds	r3, #7
 801020a:	f023 0307 	bic.w	r3, r3, #7
 801020e:	3308      	adds	r3, #8
 8010210:	9303      	str	r3, [sp, #12]
 8010212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010214:	4433      	add	r3, r6
 8010216:	9309      	str	r3, [sp, #36]	; 0x24
 8010218:	e767      	b.n	80100ea <_svfiprintf_r+0x4e>
 801021a:	460c      	mov	r4, r1
 801021c:	2001      	movs	r0, #1
 801021e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010222:	e7a5      	b.n	8010170 <_svfiprintf_r+0xd4>
 8010224:	2300      	movs	r3, #0
 8010226:	f04f 0c0a 	mov.w	ip, #10
 801022a:	4619      	mov	r1, r3
 801022c:	3401      	adds	r4, #1
 801022e:	9305      	str	r3, [sp, #20]
 8010230:	4620      	mov	r0, r4
 8010232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010236:	3a30      	subs	r2, #48	; 0x30
 8010238:	2a09      	cmp	r2, #9
 801023a:	d903      	bls.n	8010244 <_svfiprintf_r+0x1a8>
 801023c:	2b00      	cmp	r3, #0
 801023e:	d0c5      	beq.n	80101cc <_svfiprintf_r+0x130>
 8010240:	9105      	str	r1, [sp, #20]
 8010242:	e7c3      	b.n	80101cc <_svfiprintf_r+0x130>
 8010244:	4604      	mov	r4, r0
 8010246:	2301      	movs	r3, #1
 8010248:	fb0c 2101 	mla	r1, ip, r1, r2
 801024c:	e7f0      	b.n	8010230 <_svfiprintf_r+0x194>
 801024e:	ab03      	add	r3, sp, #12
 8010250:	9300      	str	r3, [sp, #0]
 8010252:	462a      	mov	r2, r5
 8010254:	4638      	mov	r0, r7
 8010256:	4b0f      	ldr	r3, [pc, #60]	; (8010294 <_svfiprintf_r+0x1f8>)
 8010258:	a904      	add	r1, sp, #16
 801025a:	f7fd fcad 	bl	800dbb8 <_printf_float>
 801025e:	1c42      	adds	r2, r0, #1
 8010260:	4606      	mov	r6, r0
 8010262:	d1d6      	bne.n	8010212 <_svfiprintf_r+0x176>
 8010264:	89ab      	ldrh	r3, [r5, #12]
 8010266:	065b      	lsls	r3, r3, #25
 8010268:	f53f af2c 	bmi.w	80100c4 <_svfiprintf_r+0x28>
 801026c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801026e:	b01d      	add	sp, #116	; 0x74
 8010270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010274:	ab03      	add	r3, sp, #12
 8010276:	9300      	str	r3, [sp, #0]
 8010278:	462a      	mov	r2, r5
 801027a:	4638      	mov	r0, r7
 801027c:	4b05      	ldr	r3, [pc, #20]	; (8010294 <_svfiprintf_r+0x1f8>)
 801027e:	a904      	add	r1, sp, #16
 8010280:	f7fd ff36 	bl	800e0f0 <_printf_i>
 8010284:	e7eb      	b.n	801025e <_svfiprintf_r+0x1c2>
 8010286:	bf00      	nop
 8010288:	08012428 	.word	0x08012428
 801028c:	08012432 	.word	0x08012432
 8010290:	0800dbb9 	.word	0x0800dbb9
 8010294:	0800ffe5 	.word	0x0800ffe5
 8010298:	0801242e 	.word	0x0801242e

0801029c <_sbrk_r>:
 801029c:	b538      	push	{r3, r4, r5, lr}
 801029e:	2300      	movs	r3, #0
 80102a0:	4d05      	ldr	r5, [pc, #20]	; (80102b8 <_sbrk_r+0x1c>)
 80102a2:	4604      	mov	r4, r0
 80102a4:	4608      	mov	r0, r1
 80102a6:	602b      	str	r3, [r5, #0]
 80102a8:	f7f3 ff8a 	bl	80041c0 <_sbrk>
 80102ac:	1c43      	adds	r3, r0, #1
 80102ae:	d102      	bne.n	80102b6 <_sbrk_r+0x1a>
 80102b0:	682b      	ldr	r3, [r5, #0]
 80102b2:	b103      	cbz	r3, 80102b6 <_sbrk_r+0x1a>
 80102b4:	6023      	str	r3, [r4, #0]
 80102b6:	bd38      	pop	{r3, r4, r5, pc}
 80102b8:	200038a4 	.word	0x200038a4

080102bc <_raise_r>:
 80102bc:	291f      	cmp	r1, #31
 80102be:	b538      	push	{r3, r4, r5, lr}
 80102c0:	4604      	mov	r4, r0
 80102c2:	460d      	mov	r5, r1
 80102c4:	d904      	bls.n	80102d0 <_raise_r+0x14>
 80102c6:	2316      	movs	r3, #22
 80102c8:	6003      	str	r3, [r0, #0]
 80102ca:	f04f 30ff 	mov.w	r0, #4294967295
 80102ce:	bd38      	pop	{r3, r4, r5, pc}
 80102d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80102d2:	b112      	cbz	r2, 80102da <_raise_r+0x1e>
 80102d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80102d8:	b94b      	cbnz	r3, 80102ee <_raise_r+0x32>
 80102da:	4620      	mov	r0, r4
 80102dc:	f000 f830 	bl	8010340 <_getpid_r>
 80102e0:	462a      	mov	r2, r5
 80102e2:	4601      	mov	r1, r0
 80102e4:	4620      	mov	r0, r4
 80102e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102ea:	f000 b817 	b.w	801031c <_kill_r>
 80102ee:	2b01      	cmp	r3, #1
 80102f0:	d00a      	beq.n	8010308 <_raise_r+0x4c>
 80102f2:	1c59      	adds	r1, r3, #1
 80102f4:	d103      	bne.n	80102fe <_raise_r+0x42>
 80102f6:	2316      	movs	r3, #22
 80102f8:	6003      	str	r3, [r0, #0]
 80102fa:	2001      	movs	r0, #1
 80102fc:	e7e7      	b.n	80102ce <_raise_r+0x12>
 80102fe:	2400      	movs	r4, #0
 8010300:	4628      	mov	r0, r5
 8010302:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010306:	4798      	blx	r3
 8010308:	2000      	movs	r0, #0
 801030a:	e7e0      	b.n	80102ce <_raise_r+0x12>

0801030c <raise>:
 801030c:	4b02      	ldr	r3, [pc, #8]	; (8010318 <raise+0xc>)
 801030e:	4601      	mov	r1, r0
 8010310:	6818      	ldr	r0, [r3, #0]
 8010312:	f7ff bfd3 	b.w	80102bc <_raise_r>
 8010316:	bf00      	nop
 8010318:	20000158 	.word	0x20000158

0801031c <_kill_r>:
 801031c:	b538      	push	{r3, r4, r5, lr}
 801031e:	2300      	movs	r3, #0
 8010320:	4d06      	ldr	r5, [pc, #24]	; (801033c <_kill_r+0x20>)
 8010322:	4604      	mov	r4, r0
 8010324:	4608      	mov	r0, r1
 8010326:	4611      	mov	r1, r2
 8010328:	602b      	str	r3, [r5, #0]
 801032a:	f7f3 fec6 	bl	80040ba <_kill>
 801032e:	1c43      	adds	r3, r0, #1
 8010330:	d102      	bne.n	8010338 <_kill_r+0x1c>
 8010332:	682b      	ldr	r3, [r5, #0]
 8010334:	b103      	cbz	r3, 8010338 <_kill_r+0x1c>
 8010336:	6023      	str	r3, [r4, #0]
 8010338:	bd38      	pop	{r3, r4, r5, pc}
 801033a:	bf00      	nop
 801033c:	200038a4 	.word	0x200038a4

08010340 <_getpid_r>:
 8010340:	f7f3 beb4 	b.w	80040ac <_getpid>

08010344 <__sread>:
 8010344:	b510      	push	{r4, lr}
 8010346:	460c      	mov	r4, r1
 8010348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801034c:	f000 f8ba 	bl	80104c4 <_read_r>
 8010350:	2800      	cmp	r0, #0
 8010352:	bfab      	itete	ge
 8010354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010356:	89a3      	ldrhlt	r3, [r4, #12]
 8010358:	181b      	addge	r3, r3, r0
 801035a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801035e:	bfac      	ite	ge
 8010360:	6563      	strge	r3, [r4, #84]	; 0x54
 8010362:	81a3      	strhlt	r3, [r4, #12]
 8010364:	bd10      	pop	{r4, pc}

08010366 <__swrite>:
 8010366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801036a:	461f      	mov	r7, r3
 801036c:	898b      	ldrh	r3, [r1, #12]
 801036e:	4605      	mov	r5, r0
 8010370:	05db      	lsls	r3, r3, #23
 8010372:	460c      	mov	r4, r1
 8010374:	4616      	mov	r6, r2
 8010376:	d505      	bpl.n	8010384 <__swrite+0x1e>
 8010378:	2302      	movs	r3, #2
 801037a:	2200      	movs	r2, #0
 801037c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010380:	f000 f868 	bl	8010454 <_lseek_r>
 8010384:	89a3      	ldrh	r3, [r4, #12]
 8010386:	4632      	mov	r2, r6
 8010388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801038c:	81a3      	strh	r3, [r4, #12]
 801038e:	4628      	mov	r0, r5
 8010390:	463b      	mov	r3, r7
 8010392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801039a:	f000 b817 	b.w	80103cc <_write_r>

0801039e <__sseek>:
 801039e:	b510      	push	{r4, lr}
 80103a0:	460c      	mov	r4, r1
 80103a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103a6:	f000 f855 	bl	8010454 <_lseek_r>
 80103aa:	1c43      	adds	r3, r0, #1
 80103ac:	89a3      	ldrh	r3, [r4, #12]
 80103ae:	bf15      	itete	ne
 80103b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80103b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80103b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80103ba:	81a3      	strheq	r3, [r4, #12]
 80103bc:	bf18      	it	ne
 80103be:	81a3      	strhne	r3, [r4, #12]
 80103c0:	bd10      	pop	{r4, pc}

080103c2 <__sclose>:
 80103c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103c6:	f000 b813 	b.w	80103f0 <_close_r>
	...

080103cc <_write_r>:
 80103cc:	b538      	push	{r3, r4, r5, lr}
 80103ce:	4604      	mov	r4, r0
 80103d0:	4608      	mov	r0, r1
 80103d2:	4611      	mov	r1, r2
 80103d4:	2200      	movs	r2, #0
 80103d6:	4d05      	ldr	r5, [pc, #20]	; (80103ec <_write_r+0x20>)
 80103d8:	602a      	str	r2, [r5, #0]
 80103da:	461a      	mov	r2, r3
 80103dc:	f7f3 fea4 	bl	8004128 <_write>
 80103e0:	1c43      	adds	r3, r0, #1
 80103e2:	d102      	bne.n	80103ea <_write_r+0x1e>
 80103e4:	682b      	ldr	r3, [r5, #0]
 80103e6:	b103      	cbz	r3, 80103ea <_write_r+0x1e>
 80103e8:	6023      	str	r3, [r4, #0]
 80103ea:	bd38      	pop	{r3, r4, r5, pc}
 80103ec:	200038a4 	.word	0x200038a4

080103f0 <_close_r>:
 80103f0:	b538      	push	{r3, r4, r5, lr}
 80103f2:	2300      	movs	r3, #0
 80103f4:	4d05      	ldr	r5, [pc, #20]	; (801040c <_close_r+0x1c>)
 80103f6:	4604      	mov	r4, r0
 80103f8:	4608      	mov	r0, r1
 80103fa:	602b      	str	r3, [r5, #0]
 80103fc:	f7f3 feb0 	bl	8004160 <_close>
 8010400:	1c43      	adds	r3, r0, #1
 8010402:	d102      	bne.n	801040a <_close_r+0x1a>
 8010404:	682b      	ldr	r3, [r5, #0]
 8010406:	b103      	cbz	r3, 801040a <_close_r+0x1a>
 8010408:	6023      	str	r3, [r4, #0]
 801040a:	bd38      	pop	{r3, r4, r5, pc}
 801040c:	200038a4 	.word	0x200038a4

08010410 <_fstat_r>:
 8010410:	b538      	push	{r3, r4, r5, lr}
 8010412:	2300      	movs	r3, #0
 8010414:	4d06      	ldr	r5, [pc, #24]	; (8010430 <_fstat_r+0x20>)
 8010416:	4604      	mov	r4, r0
 8010418:	4608      	mov	r0, r1
 801041a:	4611      	mov	r1, r2
 801041c:	602b      	str	r3, [r5, #0]
 801041e:	f7f3 feaa 	bl	8004176 <_fstat>
 8010422:	1c43      	adds	r3, r0, #1
 8010424:	d102      	bne.n	801042c <_fstat_r+0x1c>
 8010426:	682b      	ldr	r3, [r5, #0]
 8010428:	b103      	cbz	r3, 801042c <_fstat_r+0x1c>
 801042a:	6023      	str	r3, [r4, #0]
 801042c:	bd38      	pop	{r3, r4, r5, pc}
 801042e:	bf00      	nop
 8010430:	200038a4 	.word	0x200038a4

08010434 <_isatty_r>:
 8010434:	b538      	push	{r3, r4, r5, lr}
 8010436:	2300      	movs	r3, #0
 8010438:	4d05      	ldr	r5, [pc, #20]	; (8010450 <_isatty_r+0x1c>)
 801043a:	4604      	mov	r4, r0
 801043c:	4608      	mov	r0, r1
 801043e:	602b      	str	r3, [r5, #0]
 8010440:	f7f3 fea8 	bl	8004194 <_isatty>
 8010444:	1c43      	adds	r3, r0, #1
 8010446:	d102      	bne.n	801044e <_isatty_r+0x1a>
 8010448:	682b      	ldr	r3, [r5, #0]
 801044a:	b103      	cbz	r3, 801044e <_isatty_r+0x1a>
 801044c:	6023      	str	r3, [r4, #0]
 801044e:	bd38      	pop	{r3, r4, r5, pc}
 8010450:	200038a4 	.word	0x200038a4

08010454 <_lseek_r>:
 8010454:	b538      	push	{r3, r4, r5, lr}
 8010456:	4604      	mov	r4, r0
 8010458:	4608      	mov	r0, r1
 801045a:	4611      	mov	r1, r2
 801045c:	2200      	movs	r2, #0
 801045e:	4d05      	ldr	r5, [pc, #20]	; (8010474 <_lseek_r+0x20>)
 8010460:	602a      	str	r2, [r5, #0]
 8010462:	461a      	mov	r2, r3
 8010464:	f7f3 fea0 	bl	80041a8 <_lseek>
 8010468:	1c43      	adds	r3, r0, #1
 801046a:	d102      	bne.n	8010472 <_lseek_r+0x1e>
 801046c:	682b      	ldr	r3, [r5, #0]
 801046e:	b103      	cbz	r3, 8010472 <_lseek_r+0x1e>
 8010470:	6023      	str	r3, [r4, #0]
 8010472:	bd38      	pop	{r3, r4, r5, pc}
 8010474:	200038a4 	.word	0x200038a4

08010478 <__ascii_mbtowc>:
 8010478:	b082      	sub	sp, #8
 801047a:	b901      	cbnz	r1, 801047e <__ascii_mbtowc+0x6>
 801047c:	a901      	add	r1, sp, #4
 801047e:	b142      	cbz	r2, 8010492 <__ascii_mbtowc+0x1a>
 8010480:	b14b      	cbz	r3, 8010496 <__ascii_mbtowc+0x1e>
 8010482:	7813      	ldrb	r3, [r2, #0]
 8010484:	600b      	str	r3, [r1, #0]
 8010486:	7812      	ldrb	r2, [r2, #0]
 8010488:	1e10      	subs	r0, r2, #0
 801048a:	bf18      	it	ne
 801048c:	2001      	movne	r0, #1
 801048e:	b002      	add	sp, #8
 8010490:	4770      	bx	lr
 8010492:	4610      	mov	r0, r2
 8010494:	e7fb      	b.n	801048e <__ascii_mbtowc+0x16>
 8010496:	f06f 0001 	mvn.w	r0, #1
 801049a:	e7f8      	b.n	801048e <__ascii_mbtowc+0x16>

0801049c <__malloc_lock>:
 801049c:	4801      	ldr	r0, [pc, #4]	; (80104a4 <__malloc_lock+0x8>)
 801049e:	f7ff b8ae 	b.w	800f5fe <__retarget_lock_acquire_recursive>
 80104a2:	bf00      	nop
 80104a4:	2000389c 	.word	0x2000389c

080104a8 <__malloc_unlock>:
 80104a8:	4801      	ldr	r0, [pc, #4]	; (80104b0 <__malloc_unlock+0x8>)
 80104aa:	f7ff b8a9 	b.w	800f600 <__retarget_lock_release_recursive>
 80104ae:	bf00      	nop
 80104b0:	2000389c 	.word	0x2000389c

080104b4 <_malloc_usable_size_r>:
 80104b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104b8:	1f18      	subs	r0, r3, #4
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	bfbc      	itt	lt
 80104be:	580b      	ldrlt	r3, [r1, r0]
 80104c0:	18c0      	addlt	r0, r0, r3
 80104c2:	4770      	bx	lr

080104c4 <_read_r>:
 80104c4:	b538      	push	{r3, r4, r5, lr}
 80104c6:	4604      	mov	r4, r0
 80104c8:	4608      	mov	r0, r1
 80104ca:	4611      	mov	r1, r2
 80104cc:	2200      	movs	r2, #0
 80104ce:	4d05      	ldr	r5, [pc, #20]	; (80104e4 <_read_r+0x20>)
 80104d0:	602a      	str	r2, [r5, #0]
 80104d2:	461a      	mov	r2, r3
 80104d4:	f7f3 fe0b 	bl	80040ee <_read>
 80104d8:	1c43      	adds	r3, r0, #1
 80104da:	d102      	bne.n	80104e2 <_read_r+0x1e>
 80104dc:	682b      	ldr	r3, [r5, #0]
 80104de:	b103      	cbz	r3, 80104e2 <_read_r+0x1e>
 80104e0:	6023      	str	r3, [r4, #0]
 80104e2:	bd38      	pop	{r3, r4, r5, pc}
 80104e4:	200038a4 	.word	0x200038a4

080104e8 <__ascii_wctomb>:
 80104e8:	4603      	mov	r3, r0
 80104ea:	4608      	mov	r0, r1
 80104ec:	b141      	cbz	r1, 8010500 <__ascii_wctomb+0x18>
 80104ee:	2aff      	cmp	r2, #255	; 0xff
 80104f0:	d904      	bls.n	80104fc <__ascii_wctomb+0x14>
 80104f2:	228a      	movs	r2, #138	; 0x8a
 80104f4:	f04f 30ff 	mov.w	r0, #4294967295
 80104f8:	601a      	str	r2, [r3, #0]
 80104fa:	4770      	bx	lr
 80104fc:	2001      	movs	r0, #1
 80104fe:	700a      	strb	r2, [r1, #0]
 8010500:	4770      	bx	lr
	...

08010504 <pow>:
 8010504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010508:	461f      	mov	r7, r3
 801050a:	4680      	mov	r8, r0
 801050c:	4689      	mov	r9, r1
 801050e:	4616      	mov	r6, r2
 8010510:	f000 f8a6 	bl	8010660 <__ieee754_pow>
 8010514:	4b4d      	ldr	r3, [pc, #308]	; (801064c <pow+0x148>)
 8010516:	4604      	mov	r4, r0
 8010518:	f993 3000 	ldrsb.w	r3, [r3]
 801051c:	460d      	mov	r5, r1
 801051e:	3301      	adds	r3, #1
 8010520:	d015      	beq.n	801054e <pow+0x4a>
 8010522:	4632      	mov	r2, r6
 8010524:	463b      	mov	r3, r7
 8010526:	4630      	mov	r0, r6
 8010528:	4639      	mov	r1, r7
 801052a:	f7f0 fae9 	bl	8000b00 <__aeabi_dcmpun>
 801052e:	b970      	cbnz	r0, 801054e <pow+0x4a>
 8010530:	4642      	mov	r2, r8
 8010532:	464b      	mov	r3, r9
 8010534:	4640      	mov	r0, r8
 8010536:	4649      	mov	r1, r9
 8010538:	f7f0 fae2 	bl	8000b00 <__aeabi_dcmpun>
 801053c:	2200      	movs	r2, #0
 801053e:	2300      	movs	r3, #0
 8010540:	b148      	cbz	r0, 8010556 <pow+0x52>
 8010542:	4630      	mov	r0, r6
 8010544:	4639      	mov	r1, r7
 8010546:	f7f0 faa9 	bl	8000a9c <__aeabi_dcmpeq>
 801054a:	2800      	cmp	r0, #0
 801054c:	d17b      	bne.n	8010646 <pow+0x142>
 801054e:	4620      	mov	r0, r4
 8010550:	4629      	mov	r1, r5
 8010552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010556:	4640      	mov	r0, r8
 8010558:	4649      	mov	r1, r9
 801055a:	f7f0 fa9f 	bl	8000a9c <__aeabi_dcmpeq>
 801055e:	b1e0      	cbz	r0, 801059a <pow+0x96>
 8010560:	2200      	movs	r2, #0
 8010562:	2300      	movs	r3, #0
 8010564:	4630      	mov	r0, r6
 8010566:	4639      	mov	r1, r7
 8010568:	f7f0 fa98 	bl	8000a9c <__aeabi_dcmpeq>
 801056c:	2800      	cmp	r0, #0
 801056e:	d16a      	bne.n	8010646 <pow+0x142>
 8010570:	4630      	mov	r0, r6
 8010572:	4639      	mov	r1, r7
 8010574:	f000 fe39 	bl	80111ea <finite>
 8010578:	2800      	cmp	r0, #0
 801057a:	d0e8      	beq.n	801054e <pow+0x4a>
 801057c:	2200      	movs	r2, #0
 801057e:	2300      	movs	r3, #0
 8010580:	4630      	mov	r0, r6
 8010582:	4639      	mov	r1, r7
 8010584:	f7f0 fa94 	bl	8000ab0 <__aeabi_dcmplt>
 8010588:	2800      	cmp	r0, #0
 801058a:	d0e0      	beq.n	801054e <pow+0x4a>
 801058c:	f7fd f8cc 	bl	800d728 <__errno>
 8010590:	2321      	movs	r3, #33	; 0x21
 8010592:	2400      	movs	r4, #0
 8010594:	6003      	str	r3, [r0, #0]
 8010596:	4d2e      	ldr	r5, [pc, #184]	; (8010650 <pow+0x14c>)
 8010598:	e7d9      	b.n	801054e <pow+0x4a>
 801059a:	4620      	mov	r0, r4
 801059c:	4629      	mov	r1, r5
 801059e:	f000 fe24 	bl	80111ea <finite>
 80105a2:	bba8      	cbnz	r0, 8010610 <pow+0x10c>
 80105a4:	4640      	mov	r0, r8
 80105a6:	4649      	mov	r1, r9
 80105a8:	f000 fe1f 	bl	80111ea <finite>
 80105ac:	b380      	cbz	r0, 8010610 <pow+0x10c>
 80105ae:	4630      	mov	r0, r6
 80105b0:	4639      	mov	r1, r7
 80105b2:	f000 fe1a 	bl	80111ea <finite>
 80105b6:	b358      	cbz	r0, 8010610 <pow+0x10c>
 80105b8:	4622      	mov	r2, r4
 80105ba:	462b      	mov	r3, r5
 80105bc:	4620      	mov	r0, r4
 80105be:	4629      	mov	r1, r5
 80105c0:	f7f0 fa9e 	bl	8000b00 <__aeabi_dcmpun>
 80105c4:	b160      	cbz	r0, 80105e0 <pow+0xdc>
 80105c6:	f7fd f8af 	bl	800d728 <__errno>
 80105ca:	2321      	movs	r3, #33	; 0x21
 80105cc:	2200      	movs	r2, #0
 80105ce:	6003      	str	r3, [r0, #0]
 80105d0:	2300      	movs	r3, #0
 80105d2:	4610      	mov	r0, r2
 80105d4:	4619      	mov	r1, r3
 80105d6:	f7f0 f923 	bl	8000820 <__aeabi_ddiv>
 80105da:	4604      	mov	r4, r0
 80105dc:	460d      	mov	r5, r1
 80105de:	e7b6      	b.n	801054e <pow+0x4a>
 80105e0:	f7fd f8a2 	bl	800d728 <__errno>
 80105e4:	2322      	movs	r3, #34	; 0x22
 80105e6:	2200      	movs	r2, #0
 80105e8:	6003      	str	r3, [r0, #0]
 80105ea:	4649      	mov	r1, r9
 80105ec:	2300      	movs	r3, #0
 80105ee:	4640      	mov	r0, r8
 80105f0:	f7f0 fa5e 	bl	8000ab0 <__aeabi_dcmplt>
 80105f4:	2400      	movs	r4, #0
 80105f6:	b148      	cbz	r0, 801060c <pow+0x108>
 80105f8:	4630      	mov	r0, r6
 80105fa:	4639      	mov	r1, r7
 80105fc:	f000 fe02 	bl	8011204 <rint>
 8010600:	4632      	mov	r2, r6
 8010602:	463b      	mov	r3, r7
 8010604:	f7f0 fa4a 	bl	8000a9c <__aeabi_dcmpeq>
 8010608:	2800      	cmp	r0, #0
 801060a:	d0c4      	beq.n	8010596 <pow+0x92>
 801060c:	4d11      	ldr	r5, [pc, #68]	; (8010654 <pow+0x150>)
 801060e:	e79e      	b.n	801054e <pow+0x4a>
 8010610:	2200      	movs	r2, #0
 8010612:	2300      	movs	r3, #0
 8010614:	4620      	mov	r0, r4
 8010616:	4629      	mov	r1, r5
 8010618:	f7f0 fa40 	bl	8000a9c <__aeabi_dcmpeq>
 801061c:	2800      	cmp	r0, #0
 801061e:	d096      	beq.n	801054e <pow+0x4a>
 8010620:	4640      	mov	r0, r8
 8010622:	4649      	mov	r1, r9
 8010624:	f000 fde1 	bl	80111ea <finite>
 8010628:	2800      	cmp	r0, #0
 801062a:	d090      	beq.n	801054e <pow+0x4a>
 801062c:	4630      	mov	r0, r6
 801062e:	4639      	mov	r1, r7
 8010630:	f000 fddb 	bl	80111ea <finite>
 8010634:	2800      	cmp	r0, #0
 8010636:	d08a      	beq.n	801054e <pow+0x4a>
 8010638:	f7fd f876 	bl	800d728 <__errno>
 801063c:	2322      	movs	r3, #34	; 0x22
 801063e:	2400      	movs	r4, #0
 8010640:	2500      	movs	r5, #0
 8010642:	6003      	str	r3, [r0, #0]
 8010644:	e783      	b.n	801054e <pow+0x4a>
 8010646:	2400      	movs	r4, #0
 8010648:	4d03      	ldr	r5, [pc, #12]	; (8010658 <pow+0x154>)
 801064a:	e780      	b.n	801054e <pow+0x4a>
 801064c:	20000328 	.word	0x20000328
 8010650:	fff00000 	.word	0xfff00000
 8010654:	7ff00000 	.word	0x7ff00000
 8010658:	3ff00000 	.word	0x3ff00000
 801065c:	00000000 	.word	0x00000000

08010660 <__ieee754_pow>:
 8010660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010664:	b093      	sub	sp, #76	; 0x4c
 8010666:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801066a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 801066e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8010672:	ea55 0302 	orrs.w	r3, r5, r2
 8010676:	4607      	mov	r7, r0
 8010678:	4688      	mov	r8, r1
 801067a:	f000 84bf 	beq.w	8010ffc <__ieee754_pow+0x99c>
 801067e:	4b7e      	ldr	r3, [pc, #504]	; (8010878 <__ieee754_pow+0x218>)
 8010680:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8010684:	429c      	cmp	r4, r3
 8010686:	4689      	mov	r9, r1
 8010688:	4682      	mov	sl, r0
 801068a:	dc09      	bgt.n	80106a0 <__ieee754_pow+0x40>
 801068c:	d103      	bne.n	8010696 <__ieee754_pow+0x36>
 801068e:	b978      	cbnz	r0, 80106b0 <__ieee754_pow+0x50>
 8010690:	42a5      	cmp	r5, r4
 8010692:	dd02      	ble.n	801069a <__ieee754_pow+0x3a>
 8010694:	e00c      	b.n	80106b0 <__ieee754_pow+0x50>
 8010696:	429d      	cmp	r5, r3
 8010698:	dc02      	bgt.n	80106a0 <__ieee754_pow+0x40>
 801069a:	429d      	cmp	r5, r3
 801069c:	d10e      	bne.n	80106bc <__ieee754_pow+0x5c>
 801069e:	b16a      	cbz	r2, 80106bc <__ieee754_pow+0x5c>
 80106a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80106a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80106a8:	ea54 030a 	orrs.w	r3, r4, sl
 80106ac:	f000 84a6 	beq.w	8010ffc <__ieee754_pow+0x99c>
 80106b0:	4872      	ldr	r0, [pc, #456]	; (801087c <__ieee754_pow+0x21c>)
 80106b2:	b013      	add	sp, #76	; 0x4c
 80106b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b8:	f000 bd9e 	b.w	80111f8 <nan>
 80106bc:	f1b9 0f00 	cmp.w	r9, #0
 80106c0:	da39      	bge.n	8010736 <__ieee754_pow+0xd6>
 80106c2:	4b6f      	ldr	r3, [pc, #444]	; (8010880 <__ieee754_pow+0x220>)
 80106c4:	429d      	cmp	r5, r3
 80106c6:	dc54      	bgt.n	8010772 <__ieee754_pow+0x112>
 80106c8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80106cc:	429d      	cmp	r5, r3
 80106ce:	f340 84a6 	ble.w	801101e <__ieee754_pow+0x9be>
 80106d2:	152b      	asrs	r3, r5, #20
 80106d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80106d8:	2b14      	cmp	r3, #20
 80106da:	dd0f      	ble.n	80106fc <__ieee754_pow+0x9c>
 80106dc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80106e0:	fa22 f103 	lsr.w	r1, r2, r3
 80106e4:	fa01 f303 	lsl.w	r3, r1, r3
 80106e8:	4293      	cmp	r3, r2
 80106ea:	f040 8498 	bne.w	801101e <__ieee754_pow+0x9be>
 80106ee:	f001 0101 	and.w	r1, r1, #1
 80106f2:	f1c1 0302 	rsb	r3, r1, #2
 80106f6:	9300      	str	r3, [sp, #0]
 80106f8:	b182      	cbz	r2, 801071c <__ieee754_pow+0xbc>
 80106fa:	e05e      	b.n	80107ba <__ieee754_pow+0x15a>
 80106fc:	2a00      	cmp	r2, #0
 80106fe:	d15a      	bne.n	80107b6 <__ieee754_pow+0x156>
 8010700:	f1c3 0314 	rsb	r3, r3, #20
 8010704:	fa45 f103 	asr.w	r1, r5, r3
 8010708:	fa01 f303 	lsl.w	r3, r1, r3
 801070c:	42ab      	cmp	r3, r5
 801070e:	f040 8483 	bne.w	8011018 <__ieee754_pow+0x9b8>
 8010712:	f001 0101 	and.w	r1, r1, #1
 8010716:	f1c1 0302 	rsb	r3, r1, #2
 801071a:	9300      	str	r3, [sp, #0]
 801071c:	4b59      	ldr	r3, [pc, #356]	; (8010884 <__ieee754_pow+0x224>)
 801071e:	429d      	cmp	r5, r3
 8010720:	d130      	bne.n	8010784 <__ieee754_pow+0x124>
 8010722:	2e00      	cmp	r6, #0
 8010724:	f280 8474 	bge.w	8011010 <__ieee754_pow+0x9b0>
 8010728:	463a      	mov	r2, r7
 801072a:	4643      	mov	r3, r8
 801072c:	2000      	movs	r0, #0
 801072e:	4955      	ldr	r1, [pc, #340]	; (8010884 <__ieee754_pow+0x224>)
 8010730:	f7f0 f876 	bl	8000820 <__aeabi_ddiv>
 8010734:	e02f      	b.n	8010796 <__ieee754_pow+0x136>
 8010736:	2300      	movs	r3, #0
 8010738:	9300      	str	r3, [sp, #0]
 801073a:	2a00      	cmp	r2, #0
 801073c:	d13d      	bne.n	80107ba <__ieee754_pow+0x15a>
 801073e:	4b4e      	ldr	r3, [pc, #312]	; (8010878 <__ieee754_pow+0x218>)
 8010740:	429d      	cmp	r5, r3
 8010742:	d1eb      	bne.n	801071c <__ieee754_pow+0xbc>
 8010744:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010748:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801074c:	ea53 030a 	orrs.w	r3, r3, sl
 8010750:	f000 8454 	beq.w	8010ffc <__ieee754_pow+0x99c>
 8010754:	4b4c      	ldr	r3, [pc, #304]	; (8010888 <__ieee754_pow+0x228>)
 8010756:	429c      	cmp	r4, r3
 8010758:	dd0d      	ble.n	8010776 <__ieee754_pow+0x116>
 801075a:	2e00      	cmp	r6, #0
 801075c:	f280 8454 	bge.w	8011008 <__ieee754_pow+0x9a8>
 8010760:	f04f 0b00 	mov.w	fp, #0
 8010764:	f04f 0c00 	mov.w	ip, #0
 8010768:	4658      	mov	r0, fp
 801076a:	4661      	mov	r1, ip
 801076c:	b013      	add	sp, #76	; 0x4c
 801076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010772:	2302      	movs	r3, #2
 8010774:	e7e0      	b.n	8010738 <__ieee754_pow+0xd8>
 8010776:	2e00      	cmp	r6, #0
 8010778:	daf2      	bge.n	8010760 <__ieee754_pow+0x100>
 801077a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801077e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8010782:	e7f1      	b.n	8010768 <__ieee754_pow+0x108>
 8010784:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8010788:	d108      	bne.n	801079c <__ieee754_pow+0x13c>
 801078a:	463a      	mov	r2, r7
 801078c:	4643      	mov	r3, r8
 801078e:	4638      	mov	r0, r7
 8010790:	4641      	mov	r1, r8
 8010792:	f7ef ff1b 	bl	80005cc <__aeabi_dmul>
 8010796:	4683      	mov	fp, r0
 8010798:	468c      	mov	ip, r1
 801079a:	e7e5      	b.n	8010768 <__ieee754_pow+0x108>
 801079c:	4b3b      	ldr	r3, [pc, #236]	; (801088c <__ieee754_pow+0x22c>)
 801079e:	429e      	cmp	r6, r3
 80107a0:	d10b      	bne.n	80107ba <__ieee754_pow+0x15a>
 80107a2:	f1b9 0f00 	cmp.w	r9, #0
 80107a6:	db08      	blt.n	80107ba <__ieee754_pow+0x15a>
 80107a8:	4638      	mov	r0, r7
 80107aa:	4641      	mov	r1, r8
 80107ac:	b013      	add	sp, #76	; 0x4c
 80107ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b2:	f000 bc6b 	b.w	801108c <__ieee754_sqrt>
 80107b6:	2300      	movs	r3, #0
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	4638      	mov	r0, r7
 80107bc:	4641      	mov	r1, r8
 80107be:	f000 fd11 	bl	80111e4 <fabs>
 80107c2:	4683      	mov	fp, r0
 80107c4:	468c      	mov	ip, r1
 80107c6:	f1ba 0f00 	cmp.w	sl, #0
 80107ca:	d129      	bne.n	8010820 <__ieee754_pow+0x1c0>
 80107cc:	b124      	cbz	r4, 80107d8 <__ieee754_pow+0x178>
 80107ce:	4b2d      	ldr	r3, [pc, #180]	; (8010884 <__ieee754_pow+0x224>)
 80107d0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d123      	bne.n	8010820 <__ieee754_pow+0x1c0>
 80107d8:	2e00      	cmp	r6, #0
 80107da:	da07      	bge.n	80107ec <__ieee754_pow+0x18c>
 80107dc:	465a      	mov	r2, fp
 80107de:	4663      	mov	r3, ip
 80107e0:	2000      	movs	r0, #0
 80107e2:	4928      	ldr	r1, [pc, #160]	; (8010884 <__ieee754_pow+0x224>)
 80107e4:	f7f0 f81c 	bl	8000820 <__aeabi_ddiv>
 80107e8:	4683      	mov	fp, r0
 80107ea:	468c      	mov	ip, r1
 80107ec:	f1b9 0f00 	cmp.w	r9, #0
 80107f0:	daba      	bge.n	8010768 <__ieee754_pow+0x108>
 80107f2:	9b00      	ldr	r3, [sp, #0]
 80107f4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80107f8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80107fc:	4323      	orrs	r3, r4
 80107fe:	d108      	bne.n	8010812 <__ieee754_pow+0x1b2>
 8010800:	465a      	mov	r2, fp
 8010802:	4663      	mov	r3, ip
 8010804:	4658      	mov	r0, fp
 8010806:	4661      	mov	r1, ip
 8010808:	f7ef fd28 	bl	800025c <__aeabi_dsub>
 801080c:	4602      	mov	r2, r0
 801080e:	460b      	mov	r3, r1
 8010810:	e78e      	b.n	8010730 <__ieee754_pow+0xd0>
 8010812:	9b00      	ldr	r3, [sp, #0]
 8010814:	2b01      	cmp	r3, #1
 8010816:	d1a7      	bne.n	8010768 <__ieee754_pow+0x108>
 8010818:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 801081c:	469c      	mov	ip, r3
 801081e:	e7a3      	b.n	8010768 <__ieee754_pow+0x108>
 8010820:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8010824:	3b01      	subs	r3, #1
 8010826:	930c      	str	r3, [sp, #48]	; 0x30
 8010828:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801082a:	9b00      	ldr	r3, [sp, #0]
 801082c:	4313      	orrs	r3, r2
 801082e:	d104      	bne.n	801083a <__ieee754_pow+0x1da>
 8010830:	463a      	mov	r2, r7
 8010832:	4643      	mov	r3, r8
 8010834:	4638      	mov	r0, r7
 8010836:	4641      	mov	r1, r8
 8010838:	e7e6      	b.n	8010808 <__ieee754_pow+0x1a8>
 801083a:	4b15      	ldr	r3, [pc, #84]	; (8010890 <__ieee754_pow+0x230>)
 801083c:	429d      	cmp	r5, r3
 801083e:	f340 80f9 	ble.w	8010a34 <__ieee754_pow+0x3d4>
 8010842:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010846:	429d      	cmp	r5, r3
 8010848:	4b0f      	ldr	r3, [pc, #60]	; (8010888 <__ieee754_pow+0x228>)
 801084a:	dd09      	ble.n	8010860 <__ieee754_pow+0x200>
 801084c:	429c      	cmp	r4, r3
 801084e:	dc0c      	bgt.n	801086a <__ieee754_pow+0x20a>
 8010850:	2e00      	cmp	r6, #0
 8010852:	da85      	bge.n	8010760 <__ieee754_pow+0x100>
 8010854:	a306      	add	r3, pc, #24	; (adr r3, 8010870 <__ieee754_pow+0x210>)
 8010856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085a:	4610      	mov	r0, r2
 801085c:	4619      	mov	r1, r3
 801085e:	e798      	b.n	8010792 <__ieee754_pow+0x132>
 8010860:	429c      	cmp	r4, r3
 8010862:	dbf5      	blt.n	8010850 <__ieee754_pow+0x1f0>
 8010864:	4b07      	ldr	r3, [pc, #28]	; (8010884 <__ieee754_pow+0x224>)
 8010866:	429c      	cmp	r4, r3
 8010868:	dd14      	ble.n	8010894 <__ieee754_pow+0x234>
 801086a:	2e00      	cmp	r6, #0
 801086c:	dcf2      	bgt.n	8010854 <__ieee754_pow+0x1f4>
 801086e:	e777      	b.n	8010760 <__ieee754_pow+0x100>
 8010870:	8800759c 	.word	0x8800759c
 8010874:	7e37e43c 	.word	0x7e37e43c
 8010878:	7ff00000 	.word	0x7ff00000
 801087c:	08012420 	.word	0x08012420
 8010880:	433fffff 	.word	0x433fffff
 8010884:	3ff00000 	.word	0x3ff00000
 8010888:	3fefffff 	.word	0x3fefffff
 801088c:	3fe00000 	.word	0x3fe00000
 8010890:	41e00000 	.word	0x41e00000
 8010894:	4661      	mov	r1, ip
 8010896:	2200      	movs	r2, #0
 8010898:	4658      	mov	r0, fp
 801089a:	4b61      	ldr	r3, [pc, #388]	; (8010a20 <__ieee754_pow+0x3c0>)
 801089c:	f7ef fcde 	bl	800025c <__aeabi_dsub>
 80108a0:	a355      	add	r3, pc, #340	; (adr r3, 80109f8 <__ieee754_pow+0x398>)
 80108a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a6:	4604      	mov	r4, r0
 80108a8:	460d      	mov	r5, r1
 80108aa:	f7ef fe8f 	bl	80005cc <__aeabi_dmul>
 80108ae:	a354      	add	r3, pc, #336	; (adr r3, 8010a00 <__ieee754_pow+0x3a0>)
 80108b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b4:	4606      	mov	r6, r0
 80108b6:	460f      	mov	r7, r1
 80108b8:	4620      	mov	r0, r4
 80108ba:	4629      	mov	r1, r5
 80108bc:	f7ef fe86 	bl	80005cc <__aeabi_dmul>
 80108c0:	2200      	movs	r2, #0
 80108c2:	4682      	mov	sl, r0
 80108c4:	468b      	mov	fp, r1
 80108c6:	4620      	mov	r0, r4
 80108c8:	4629      	mov	r1, r5
 80108ca:	4b56      	ldr	r3, [pc, #344]	; (8010a24 <__ieee754_pow+0x3c4>)
 80108cc:	f7ef fe7e 	bl	80005cc <__aeabi_dmul>
 80108d0:	4602      	mov	r2, r0
 80108d2:	460b      	mov	r3, r1
 80108d4:	a14c      	add	r1, pc, #304	; (adr r1, 8010a08 <__ieee754_pow+0x3a8>)
 80108d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108da:	f7ef fcbf 	bl	800025c <__aeabi_dsub>
 80108de:	4622      	mov	r2, r4
 80108e0:	462b      	mov	r3, r5
 80108e2:	f7ef fe73 	bl	80005cc <__aeabi_dmul>
 80108e6:	4602      	mov	r2, r0
 80108e8:	460b      	mov	r3, r1
 80108ea:	2000      	movs	r0, #0
 80108ec:	494e      	ldr	r1, [pc, #312]	; (8010a28 <__ieee754_pow+0x3c8>)
 80108ee:	f7ef fcb5 	bl	800025c <__aeabi_dsub>
 80108f2:	4622      	mov	r2, r4
 80108f4:	462b      	mov	r3, r5
 80108f6:	4680      	mov	r8, r0
 80108f8:	4689      	mov	r9, r1
 80108fa:	4620      	mov	r0, r4
 80108fc:	4629      	mov	r1, r5
 80108fe:	f7ef fe65 	bl	80005cc <__aeabi_dmul>
 8010902:	4602      	mov	r2, r0
 8010904:	460b      	mov	r3, r1
 8010906:	4640      	mov	r0, r8
 8010908:	4649      	mov	r1, r9
 801090a:	f7ef fe5f 	bl	80005cc <__aeabi_dmul>
 801090e:	a340      	add	r3, pc, #256	; (adr r3, 8010a10 <__ieee754_pow+0x3b0>)
 8010910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010914:	f7ef fe5a 	bl	80005cc <__aeabi_dmul>
 8010918:	4602      	mov	r2, r0
 801091a:	460b      	mov	r3, r1
 801091c:	4650      	mov	r0, sl
 801091e:	4659      	mov	r1, fp
 8010920:	f7ef fc9c 	bl	800025c <__aeabi_dsub>
 8010924:	f04f 0a00 	mov.w	sl, #0
 8010928:	4602      	mov	r2, r0
 801092a:	460b      	mov	r3, r1
 801092c:	4604      	mov	r4, r0
 801092e:	460d      	mov	r5, r1
 8010930:	4630      	mov	r0, r6
 8010932:	4639      	mov	r1, r7
 8010934:	f7ef fc94 	bl	8000260 <__adddf3>
 8010938:	4632      	mov	r2, r6
 801093a:	463b      	mov	r3, r7
 801093c:	4650      	mov	r0, sl
 801093e:	468b      	mov	fp, r1
 8010940:	f7ef fc8c 	bl	800025c <__aeabi_dsub>
 8010944:	4602      	mov	r2, r0
 8010946:	460b      	mov	r3, r1
 8010948:	4620      	mov	r0, r4
 801094a:	4629      	mov	r1, r5
 801094c:	f7ef fc86 	bl	800025c <__aeabi_dsub>
 8010950:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010954:	9b00      	ldr	r3, [sp, #0]
 8010956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010958:	3b01      	subs	r3, #1
 801095a:	4313      	orrs	r3, r2
 801095c:	f04f 0600 	mov.w	r6, #0
 8010960:	f04f 0200 	mov.w	r2, #0
 8010964:	bf0c      	ite	eq
 8010966:	4b31      	ldreq	r3, [pc, #196]	; (8010a2c <__ieee754_pow+0x3cc>)
 8010968:	4b2d      	ldrne	r3, [pc, #180]	; (8010a20 <__ieee754_pow+0x3c0>)
 801096a:	4604      	mov	r4, r0
 801096c:	460d      	mov	r5, r1
 801096e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010972:	e9cd 2300 	strd	r2, r3, [sp]
 8010976:	4632      	mov	r2, r6
 8010978:	463b      	mov	r3, r7
 801097a:	f7ef fc6f 	bl	800025c <__aeabi_dsub>
 801097e:	4652      	mov	r2, sl
 8010980:	465b      	mov	r3, fp
 8010982:	f7ef fe23 	bl	80005cc <__aeabi_dmul>
 8010986:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801098a:	4680      	mov	r8, r0
 801098c:	4689      	mov	r9, r1
 801098e:	4620      	mov	r0, r4
 8010990:	4629      	mov	r1, r5
 8010992:	f7ef fe1b 	bl	80005cc <__aeabi_dmul>
 8010996:	4602      	mov	r2, r0
 8010998:	460b      	mov	r3, r1
 801099a:	4640      	mov	r0, r8
 801099c:	4649      	mov	r1, r9
 801099e:	f7ef fc5f 	bl	8000260 <__adddf3>
 80109a2:	4632      	mov	r2, r6
 80109a4:	463b      	mov	r3, r7
 80109a6:	4680      	mov	r8, r0
 80109a8:	4689      	mov	r9, r1
 80109aa:	4650      	mov	r0, sl
 80109ac:	4659      	mov	r1, fp
 80109ae:	f7ef fe0d 	bl	80005cc <__aeabi_dmul>
 80109b2:	4604      	mov	r4, r0
 80109b4:	460d      	mov	r5, r1
 80109b6:	460b      	mov	r3, r1
 80109b8:	4602      	mov	r2, r0
 80109ba:	4649      	mov	r1, r9
 80109bc:	4640      	mov	r0, r8
 80109be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80109c2:	f7ef fc4d 	bl	8000260 <__adddf3>
 80109c6:	4b1a      	ldr	r3, [pc, #104]	; (8010a30 <__ieee754_pow+0x3d0>)
 80109c8:	4682      	mov	sl, r0
 80109ca:	4299      	cmp	r1, r3
 80109cc:	460f      	mov	r7, r1
 80109ce:	460e      	mov	r6, r1
 80109d0:	f340 82ed 	ble.w	8010fae <__ieee754_pow+0x94e>
 80109d4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80109d8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80109dc:	4303      	orrs	r3, r0
 80109de:	f000 81e7 	beq.w	8010db0 <__ieee754_pow+0x750>
 80109e2:	a30d      	add	r3, pc, #52	; (adr r3, 8010a18 <__ieee754_pow+0x3b8>)
 80109e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80109ec:	f7ef fdee 	bl	80005cc <__aeabi_dmul>
 80109f0:	a309      	add	r3, pc, #36	; (adr r3, 8010a18 <__ieee754_pow+0x3b8>)
 80109f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f6:	e6cc      	b.n	8010792 <__ieee754_pow+0x132>
 80109f8:	60000000 	.word	0x60000000
 80109fc:	3ff71547 	.word	0x3ff71547
 8010a00:	f85ddf44 	.word	0xf85ddf44
 8010a04:	3e54ae0b 	.word	0x3e54ae0b
 8010a08:	55555555 	.word	0x55555555
 8010a0c:	3fd55555 	.word	0x3fd55555
 8010a10:	652b82fe 	.word	0x652b82fe
 8010a14:	3ff71547 	.word	0x3ff71547
 8010a18:	8800759c 	.word	0x8800759c
 8010a1c:	7e37e43c 	.word	0x7e37e43c
 8010a20:	3ff00000 	.word	0x3ff00000
 8010a24:	3fd00000 	.word	0x3fd00000
 8010a28:	3fe00000 	.word	0x3fe00000
 8010a2c:	bff00000 	.word	0xbff00000
 8010a30:	408fffff 	.word	0x408fffff
 8010a34:	4bd4      	ldr	r3, [pc, #848]	; (8010d88 <__ieee754_pow+0x728>)
 8010a36:	2200      	movs	r2, #0
 8010a38:	ea09 0303 	and.w	r3, r9, r3
 8010a3c:	b943      	cbnz	r3, 8010a50 <__ieee754_pow+0x3f0>
 8010a3e:	4658      	mov	r0, fp
 8010a40:	4661      	mov	r1, ip
 8010a42:	4bd2      	ldr	r3, [pc, #840]	; (8010d8c <__ieee754_pow+0x72c>)
 8010a44:	f7ef fdc2 	bl	80005cc <__aeabi_dmul>
 8010a48:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010a4c:	4683      	mov	fp, r0
 8010a4e:	460c      	mov	r4, r1
 8010a50:	1523      	asrs	r3, r4, #20
 8010a52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010a56:	4413      	add	r3, r2
 8010a58:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a5a:	4bcd      	ldr	r3, [pc, #820]	; (8010d90 <__ieee754_pow+0x730>)
 8010a5c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010a60:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010a64:	429c      	cmp	r4, r3
 8010a66:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010a6a:	dd08      	ble.n	8010a7e <__ieee754_pow+0x41e>
 8010a6c:	4bc9      	ldr	r3, [pc, #804]	; (8010d94 <__ieee754_pow+0x734>)
 8010a6e:	429c      	cmp	r4, r3
 8010a70:	f340 819c 	ble.w	8010dac <__ieee754_pow+0x74c>
 8010a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a76:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a7e:	2600      	movs	r6, #0
 8010a80:	00f3      	lsls	r3, r6, #3
 8010a82:	930d      	str	r3, [sp, #52]	; 0x34
 8010a84:	4bc4      	ldr	r3, [pc, #784]	; (8010d98 <__ieee754_pow+0x738>)
 8010a86:	4658      	mov	r0, fp
 8010a88:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010a8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010a90:	4629      	mov	r1, r5
 8010a92:	461a      	mov	r2, r3
 8010a94:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8010a98:	4623      	mov	r3, r4
 8010a9a:	f7ef fbdf 	bl	800025c <__aeabi_dsub>
 8010a9e:	46da      	mov	sl, fp
 8010aa0:	462b      	mov	r3, r5
 8010aa2:	4652      	mov	r2, sl
 8010aa4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010aa8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010aac:	f7ef fbd8 	bl	8000260 <__adddf3>
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	460b      	mov	r3, r1
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	49b9      	ldr	r1, [pc, #740]	; (8010d9c <__ieee754_pow+0x73c>)
 8010ab8:	f7ef feb2 	bl	8000820 <__aeabi_ddiv>
 8010abc:	4602      	mov	r2, r0
 8010abe:	460b      	mov	r3, r1
 8010ac0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010ac4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010ac8:	f7ef fd80 	bl	80005cc <__aeabi_dmul>
 8010acc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010ad0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8010ad4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010ad8:	2300      	movs	r3, #0
 8010ada:	2200      	movs	r2, #0
 8010adc:	46ab      	mov	fp, r5
 8010ade:	106d      	asrs	r5, r5, #1
 8010ae0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010ae4:	9304      	str	r3, [sp, #16]
 8010ae6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010aea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010aee:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8010af2:	4640      	mov	r0, r8
 8010af4:	4649      	mov	r1, r9
 8010af6:	4614      	mov	r4, r2
 8010af8:	461d      	mov	r5, r3
 8010afa:	f7ef fd67 	bl	80005cc <__aeabi_dmul>
 8010afe:	4602      	mov	r2, r0
 8010b00:	460b      	mov	r3, r1
 8010b02:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010b06:	f7ef fba9 	bl	800025c <__aeabi_dsub>
 8010b0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010b0e:	4606      	mov	r6, r0
 8010b10:	460f      	mov	r7, r1
 8010b12:	4620      	mov	r0, r4
 8010b14:	4629      	mov	r1, r5
 8010b16:	f7ef fba1 	bl	800025c <__aeabi_dsub>
 8010b1a:	4602      	mov	r2, r0
 8010b1c:	460b      	mov	r3, r1
 8010b1e:	4650      	mov	r0, sl
 8010b20:	4659      	mov	r1, fp
 8010b22:	f7ef fb9b 	bl	800025c <__aeabi_dsub>
 8010b26:	4642      	mov	r2, r8
 8010b28:	464b      	mov	r3, r9
 8010b2a:	f7ef fd4f 	bl	80005cc <__aeabi_dmul>
 8010b2e:	4602      	mov	r2, r0
 8010b30:	460b      	mov	r3, r1
 8010b32:	4630      	mov	r0, r6
 8010b34:	4639      	mov	r1, r7
 8010b36:	f7ef fb91 	bl	800025c <__aeabi_dsub>
 8010b3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010b3e:	f7ef fd45 	bl	80005cc <__aeabi_dmul>
 8010b42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010b46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010b4a:	4610      	mov	r0, r2
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	f7ef fd3d 	bl	80005cc <__aeabi_dmul>
 8010b52:	a37b      	add	r3, pc, #492	; (adr r3, 8010d40 <__ieee754_pow+0x6e0>)
 8010b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b58:	4604      	mov	r4, r0
 8010b5a:	460d      	mov	r5, r1
 8010b5c:	f7ef fd36 	bl	80005cc <__aeabi_dmul>
 8010b60:	a379      	add	r3, pc, #484	; (adr r3, 8010d48 <__ieee754_pow+0x6e8>)
 8010b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b66:	f7ef fb7b 	bl	8000260 <__adddf3>
 8010b6a:	4622      	mov	r2, r4
 8010b6c:	462b      	mov	r3, r5
 8010b6e:	f7ef fd2d 	bl	80005cc <__aeabi_dmul>
 8010b72:	a377      	add	r3, pc, #476	; (adr r3, 8010d50 <__ieee754_pow+0x6f0>)
 8010b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b78:	f7ef fb72 	bl	8000260 <__adddf3>
 8010b7c:	4622      	mov	r2, r4
 8010b7e:	462b      	mov	r3, r5
 8010b80:	f7ef fd24 	bl	80005cc <__aeabi_dmul>
 8010b84:	a374      	add	r3, pc, #464	; (adr r3, 8010d58 <__ieee754_pow+0x6f8>)
 8010b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8a:	f7ef fb69 	bl	8000260 <__adddf3>
 8010b8e:	4622      	mov	r2, r4
 8010b90:	462b      	mov	r3, r5
 8010b92:	f7ef fd1b 	bl	80005cc <__aeabi_dmul>
 8010b96:	a372      	add	r3, pc, #456	; (adr r3, 8010d60 <__ieee754_pow+0x700>)
 8010b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9c:	f7ef fb60 	bl	8000260 <__adddf3>
 8010ba0:	4622      	mov	r2, r4
 8010ba2:	462b      	mov	r3, r5
 8010ba4:	f7ef fd12 	bl	80005cc <__aeabi_dmul>
 8010ba8:	a36f      	add	r3, pc, #444	; (adr r3, 8010d68 <__ieee754_pow+0x708>)
 8010baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bae:	f7ef fb57 	bl	8000260 <__adddf3>
 8010bb2:	4622      	mov	r2, r4
 8010bb4:	4606      	mov	r6, r0
 8010bb6:	460f      	mov	r7, r1
 8010bb8:	462b      	mov	r3, r5
 8010bba:	4620      	mov	r0, r4
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	f7ef fd05 	bl	80005cc <__aeabi_dmul>
 8010bc2:	4602      	mov	r2, r0
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	4639      	mov	r1, r7
 8010bca:	f7ef fcff 	bl	80005cc <__aeabi_dmul>
 8010bce:	4604      	mov	r4, r0
 8010bd0:	460d      	mov	r5, r1
 8010bd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010bd6:	4642      	mov	r2, r8
 8010bd8:	464b      	mov	r3, r9
 8010bda:	f7ef fb41 	bl	8000260 <__adddf3>
 8010bde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010be2:	f7ef fcf3 	bl	80005cc <__aeabi_dmul>
 8010be6:	4622      	mov	r2, r4
 8010be8:	462b      	mov	r3, r5
 8010bea:	f7ef fb39 	bl	8000260 <__adddf3>
 8010bee:	4642      	mov	r2, r8
 8010bf0:	4606      	mov	r6, r0
 8010bf2:	460f      	mov	r7, r1
 8010bf4:	464b      	mov	r3, r9
 8010bf6:	4640      	mov	r0, r8
 8010bf8:	4649      	mov	r1, r9
 8010bfa:	f7ef fce7 	bl	80005cc <__aeabi_dmul>
 8010bfe:	2200      	movs	r2, #0
 8010c00:	4b67      	ldr	r3, [pc, #412]	; (8010da0 <__ieee754_pow+0x740>)
 8010c02:	4682      	mov	sl, r0
 8010c04:	468b      	mov	fp, r1
 8010c06:	f7ef fb2b 	bl	8000260 <__adddf3>
 8010c0a:	4632      	mov	r2, r6
 8010c0c:	463b      	mov	r3, r7
 8010c0e:	f7ef fb27 	bl	8000260 <__adddf3>
 8010c12:	9c04      	ldr	r4, [sp, #16]
 8010c14:	460d      	mov	r5, r1
 8010c16:	4622      	mov	r2, r4
 8010c18:	460b      	mov	r3, r1
 8010c1a:	4640      	mov	r0, r8
 8010c1c:	4649      	mov	r1, r9
 8010c1e:	f7ef fcd5 	bl	80005cc <__aeabi_dmul>
 8010c22:	2200      	movs	r2, #0
 8010c24:	4680      	mov	r8, r0
 8010c26:	4689      	mov	r9, r1
 8010c28:	4620      	mov	r0, r4
 8010c2a:	4629      	mov	r1, r5
 8010c2c:	4b5c      	ldr	r3, [pc, #368]	; (8010da0 <__ieee754_pow+0x740>)
 8010c2e:	f7ef fb15 	bl	800025c <__aeabi_dsub>
 8010c32:	4652      	mov	r2, sl
 8010c34:	465b      	mov	r3, fp
 8010c36:	f7ef fb11 	bl	800025c <__aeabi_dsub>
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	4630      	mov	r0, r6
 8010c40:	4639      	mov	r1, r7
 8010c42:	f7ef fb0b 	bl	800025c <__aeabi_dsub>
 8010c46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c4a:	f7ef fcbf 	bl	80005cc <__aeabi_dmul>
 8010c4e:	4622      	mov	r2, r4
 8010c50:	4606      	mov	r6, r0
 8010c52:	460f      	mov	r7, r1
 8010c54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010c58:	462b      	mov	r3, r5
 8010c5a:	f7ef fcb7 	bl	80005cc <__aeabi_dmul>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	460b      	mov	r3, r1
 8010c62:	4630      	mov	r0, r6
 8010c64:	4639      	mov	r1, r7
 8010c66:	f7ef fafb 	bl	8000260 <__adddf3>
 8010c6a:	4606      	mov	r6, r0
 8010c6c:	460f      	mov	r7, r1
 8010c6e:	4602      	mov	r2, r0
 8010c70:	460b      	mov	r3, r1
 8010c72:	4640      	mov	r0, r8
 8010c74:	4649      	mov	r1, r9
 8010c76:	f7ef faf3 	bl	8000260 <__adddf3>
 8010c7a:	a33d      	add	r3, pc, #244	; (adr r3, 8010d70 <__ieee754_pow+0x710>)
 8010c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c80:	9c04      	ldr	r4, [sp, #16]
 8010c82:	460d      	mov	r5, r1
 8010c84:	4620      	mov	r0, r4
 8010c86:	f7ef fca1 	bl	80005cc <__aeabi_dmul>
 8010c8a:	4642      	mov	r2, r8
 8010c8c:	464b      	mov	r3, r9
 8010c8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010c92:	4620      	mov	r0, r4
 8010c94:	4629      	mov	r1, r5
 8010c96:	f7ef fae1 	bl	800025c <__aeabi_dsub>
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	460b      	mov	r3, r1
 8010c9e:	4630      	mov	r0, r6
 8010ca0:	4639      	mov	r1, r7
 8010ca2:	f7ef fadb 	bl	800025c <__aeabi_dsub>
 8010ca6:	a334      	add	r3, pc, #208	; (adr r3, 8010d78 <__ieee754_pow+0x718>)
 8010ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cac:	f7ef fc8e 	bl	80005cc <__aeabi_dmul>
 8010cb0:	a333      	add	r3, pc, #204	; (adr r3, 8010d80 <__ieee754_pow+0x720>)
 8010cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb6:	4606      	mov	r6, r0
 8010cb8:	460f      	mov	r7, r1
 8010cba:	4620      	mov	r0, r4
 8010cbc:	4629      	mov	r1, r5
 8010cbe:	f7ef fc85 	bl	80005cc <__aeabi_dmul>
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	4630      	mov	r0, r6
 8010cc8:	4639      	mov	r1, r7
 8010cca:	f7ef fac9 	bl	8000260 <__adddf3>
 8010cce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010cd0:	4b34      	ldr	r3, [pc, #208]	; (8010da4 <__ieee754_pow+0x744>)
 8010cd2:	4413      	add	r3, r2
 8010cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd8:	f7ef fac2 	bl	8000260 <__adddf3>
 8010cdc:	4680      	mov	r8, r0
 8010cde:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010ce0:	4689      	mov	r9, r1
 8010ce2:	f7ef fc09 	bl	80004f8 <__aeabi_i2d>
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	460d      	mov	r5, r1
 8010cea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010cec:	4b2e      	ldr	r3, [pc, #184]	; (8010da8 <__ieee754_pow+0x748>)
 8010cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010cf2:	4413      	add	r3, r2
 8010cf4:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010cf8:	4642      	mov	r2, r8
 8010cfa:	464b      	mov	r3, r9
 8010cfc:	f7ef fab0 	bl	8000260 <__adddf3>
 8010d00:	4632      	mov	r2, r6
 8010d02:	463b      	mov	r3, r7
 8010d04:	f7ef faac 	bl	8000260 <__adddf3>
 8010d08:	4622      	mov	r2, r4
 8010d0a:	462b      	mov	r3, r5
 8010d0c:	f7ef faa8 	bl	8000260 <__adddf3>
 8010d10:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010d14:	4622      	mov	r2, r4
 8010d16:	462b      	mov	r3, r5
 8010d18:	4650      	mov	r0, sl
 8010d1a:	468b      	mov	fp, r1
 8010d1c:	f7ef fa9e 	bl	800025c <__aeabi_dsub>
 8010d20:	4632      	mov	r2, r6
 8010d22:	463b      	mov	r3, r7
 8010d24:	f7ef fa9a 	bl	800025c <__aeabi_dsub>
 8010d28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d2c:	f7ef fa96 	bl	800025c <__aeabi_dsub>
 8010d30:	4602      	mov	r2, r0
 8010d32:	460b      	mov	r3, r1
 8010d34:	4640      	mov	r0, r8
 8010d36:	4649      	mov	r1, r9
 8010d38:	e608      	b.n	801094c <__ieee754_pow+0x2ec>
 8010d3a:	bf00      	nop
 8010d3c:	f3af 8000 	nop.w
 8010d40:	4a454eef 	.word	0x4a454eef
 8010d44:	3fca7e28 	.word	0x3fca7e28
 8010d48:	93c9db65 	.word	0x93c9db65
 8010d4c:	3fcd864a 	.word	0x3fcd864a
 8010d50:	a91d4101 	.word	0xa91d4101
 8010d54:	3fd17460 	.word	0x3fd17460
 8010d58:	518f264d 	.word	0x518f264d
 8010d5c:	3fd55555 	.word	0x3fd55555
 8010d60:	db6fabff 	.word	0xdb6fabff
 8010d64:	3fdb6db6 	.word	0x3fdb6db6
 8010d68:	33333303 	.word	0x33333303
 8010d6c:	3fe33333 	.word	0x3fe33333
 8010d70:	e0000000 	.word	0xe0000000
 8010d74:	3feec709 	.word	0x3feec709
 8010d78:	dc3a03fd 	.word	0xdc3a03fd
 8010d7c:	3feec709 	.word	0x3feec709
 8010d80:	145b01f5 	.word	0x145b01f5
 8010d84:	be3e2fe0 	.word	0xbe3e2fe0
 8010d88:	7ff00000 	.word	0x7ff00000
 8010d8c:	43400000 	.word	0x43400000
 8010d90:	0003988e 	.word	0x0003988e
 8010d94:	000bb679 	.word	0x000bb679
 8010d98:	080127d0 	.word	0x080127d0
 8010d9c:	3ff00000 	.word	0x3ff00000
 8010da0:	40080000 	.word	0x40080000
 8010da4:	080127f0 	.word	0x080127f0
 8010da8:	080127e0 	.word	0x080127e0
 8010dac:	2601      	movs	r6, #1
 8010dae:	e667      	b.n	8010a80 <__ieee754_pow+0x420>
 8010db0:	a39d      	add	r3, pc, #628	; (adr r3, 8011028 <__ieee754_pow+0x9c8>)
 8010db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db6:	4640      	mov	r0, r8
 8010db8:	4649      	mov	r1, r9
 8010dba:	f7ef fa51 	bl	8000260 <__adddf3>
 8010dbe:	4622      	mov	r2, r4
 8010dc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010dc4:	462b      	mov	r3, r5
 8010dc6:	4650      	mov	r0, sl
 8010dc8:	4639      	mov	r1, r7
 8010dca:	f7ef fa47 	bl	800025c <__aeabi_dsub>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010dd6:	f7ef fe89 	bl	8000aec <__aeabi_dcmpgt>
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	f47f ae01 	bne.w	80109e2 <__ieee754_pow+0x382>
 8010de0:	4aa5      	ldr	r2, [pc, #660]	; (8011078 <__ieee754_pow+0xa18>)
 8010de2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8010de6:	4293      	cmp	r3, r2
 8010de8:	f340 8103 	ble.w	8010ff2 <__ieee754_pow+0x992>
 8010dec:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010df0:	2000      	movs	r0, #0
 8010df2:	151b      	asrs	r3, r3, #20
 8010df4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010df8:	fa4a f303 	asr.w	r3, sl, r3
 8010dfc:	4433      	add	r3, r6
 8010dfe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010e02:	4f9e      	ldr	r7, [pc, #632]	; (801107c <__ieee754_pow+0xa1c>)
 8010e04:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010e08:	4117      	asrs	r7, r2
 8010e0a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010e0e:	ea23 0107 	bic.w	r1, r3, r7
 8010e12:	f1c2 0214 	rsb	r2, r2, #20
 8010e16:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010e1a:	460b      	mov	r3, r1
 8010e1c:	fa4a fa02 	asr.w	sl, sl, r2
 8010e20:	2e00      	cmp	r6, #0
 8010e22:	4602      	mov	r2, r0
 8010e24:	4629      	mov	r1, r5
 8010e26:	4620      	mov	r0, r4
 8010e28:	bfb8      	it	lt
 8010e2a:	f1ca 0a00 	rsblt	sl, sl, #0
 8010e2e:	f7ef fa15 	bl	800025c <__aeabi_dsub>
 8010e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e3a:	2400      	movs	r4, #0
 8010e3c:	4642      	mov	r2, r8
 8010e3e:	464b      	mov	r3, r9
 8010e40:	f7ef fa0e 	bl	8000260 <__adddf3>
 8010e44:	a37a      	add	r3, pc, #488	; (adr r3, 8011030 <__ieee754_pow+0x9d0>)
 8010e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	460d      	mov	r5, r1
 8010e4e:	f7ef fbbd 	bl	80005cc <__aeabi_dmul>
 8010e52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e56:	4606      	mov	r6, r0
 8010e58:	460f      	mov	r7, r1
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	4629      	mov	r1, r5
 8010e5e:	f7ef f9fd 	bl	800025c <__aeabi_dsub>
 8010e62:	4602      	mov	r2, r0
 8010e64:	460b      	mov	r3, r1
 8010e66:	4640      	mov	r0, r8
 8010e68:	4649      	mov	r1, r9
 8010e6a:	f7ef f9f7 	bl	800025c <__aeabi_dsub>
 8010e6e:	a372      	add	r3, pc, #456	; (adr r3, 8011038 <__ieee754_pow+0x9d8>)
 8010e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e74:	f7ef fbaa 	bl	80005cc <__aeabi_dmul>
 8010e78:	a371      	add	r3, pc, #452	; (adr r3, 8011040 <__ieee754_pow+0x9e0>)
 8010e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7e:	4680      	mov	r8, r0
 8010e80:	4689      	mov	r9, r1
 8010e82:	4620      	mov	r0, r4
 8010e84:	4629      	mov	r1, r5
 8010e86:	f7ef fba1 	bl	80005cc <__aeabi_dmul>
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	4640      	mov	r0, r8
 8010e90:	4649      	mov	r1, r9
 8010e92:	f7ef f9e5 	bl	8000260 <__adddf3>
 8010e96:	4604      	mov	r4, r0
 8010e98:	460d      	mov	r5, r1
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	4630      	mov	r0, r6
 8010ea0:	4639      	mov	r1, r7
 8010ea2:	f7ef f9dd 	bl	8000260 <__adddf3>
 8010ea6:	4632      	mov	r2, r6
 8010ea8:	463b      	mov	r3, r7
 8010eaa:	4680      	mov	r8, r0
 8010eac:	4689      	mov	r9, r1
 8010eae:	f7ef f9d5 	bl	800025c <__aeabi_dsub>
 8010eb2:	4602      	mov	r2, r0
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	4629      	mov	r1, r5
 8010eba:	f7ef f9cf 	bl	800025c <__aeabi_dsub>
 8010ebe:	4642      	mov	r2, r8
 8010ec0:	4606      	mov	r6, r0
 8010ec2:	460f      	mov	r7, r1
 8010ec4:	464b      	mov	r3, r9
 8010ec6:	4640      	mov	r0, r8
 8010ec8:	4649      	mov	r1, r9
 8010eca:	f7ef fb7f 	bl	80005cc <__aeabi_dmul>
 8010ece:	a35e      	add	r3, pc, #376	; (adr r3, 8011048 <__ieee754_pow+0x9e8>)
 8010ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed4:	4604      	mov	r4, r0
 8010ed6:	460d      	mov	r5, r1
 8010ed8:	f7ef fb78 	bl	80005cc <__aeabi_dmul>
 8010edc:	a35c      	add	r3, pc, #368	; (adr r3, 8011050 <__ieee754_pow+0x9f0>)
 8010ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee2:	f7ef f9bb 	bl	800025c <__aeabi_dsub>
 8010ee6:	4622      	mov	r2, r4
 8010ee8:	462b      	mov	r3, r5
 8010eea:	f7ef fb6f 	bl	80005cc <__aeabi_dmul>
 8010eee:	a35a      	add	r3, pc, #360	; (adr r3, 8011058 <__ieee754_pow+0x9f8>)
 8010ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef4:	f7ef f9b4 	bl	8000260 <__adddf3>
 8010ef8:	4622      	mov	r2, r4
 8010efa:	462b      	mov	r3, r5
 8010efc:	f7ef fb66 	bl	80005cc <__aeabi_dmul>
 8010f00:	a357      	add	r3, pc, #348	; (adr r3, 8011060 <__ieee754_pow+0xa00>)
 8010f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f06:	f7ef f9a9 	bl	800025c <__aeabi_dsub>
 8010f0a:	4622      	mov	r2, r4
 8010f0c:	462b      	mov	r3, r5
 8010f0e:	f7ef fb5d 	bl	80005cc <__aeabi_dmul>
 8010f12:	a355      	add	r3, pc, #340	; (adr r3, 8011068 <__ieee754_pow+0xa08>)
 8010f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f18:	f7ef f9a2 	bl	8000260 <__adddf3>
 8010f1c:	4622      	mov	r2, r4
 8010f1e:	462b      	mov	r3, r5
 8010f20:	f7ef fb54 	bl	80005cc <__aeabi_dmul>
 8010f24:	4602      	mov	r2, r0
 8010f26:	460b      	mov	r3, r1
 8010f28:	4640      	mov	r0, r8
 8010f2a:	4649      	mov	r1, r9
 8010f2c:	f7ef f996 	bl	800025c <__aeabi_dsub>
 8010f30:	4604      	mov	r4, r0
 8010f32:	460d      	mov	r5, r1
 8010f34:	4602      	mov	r2, r0
 8010f36:	460b      	mov	r3, r1
 8010f38:	4640      	mov	r0, r8
 8010f3a:	4649      	mov	r1, r9
 8010f3c:	f7ef fb46 	bl	80005cc <__aeabi_dmul>
 8010f40:	2200      	movs	r2, #0
 8010f42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	4629      	mov	r1, r5
 8010f4e:	f7ef f985 	bl	800025c <__aeabi_dsub>
 8010f52:	4602      	mov	r2, r0
 8010f54:	460b      	mov	r3, r1
 8010f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f5a:	f7ef fc61 	bl	8000820 <__aeabi_ddiv>
 8010f5e:	4632      	mov	r2, r6
 8010f60:	4604      	mov	r4, r0
 8010f62:	460d      	mov	r5, r1
 8010f64:	463b      	mov	r3, r7
 8010f66:	4640      	mov	r0, r8
 8010f68:	4649      	mov	r1, r9
 8010f6a:	f7ef fb2f 	bl	80005cc <__aeabi_dmul>
 8010f6e:	4632      	mov	r2, r6
 8010f70:	463b      	mov	r3, r7
 8010f72:	f7ef f975 	bl	8000260 <__adddf3>
 8010f76:	4602      	mov	r2, r0
 8010f78:	460b      	mov	r3, r1
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	4629      	mov	r1, r5
 8010f7e:	f7ef f96d 	bl	800025c <__aeabi_dsub>
 8010f82:	4642      	mov	r2, r8
 8010f84:	464b      	mov	r3, r9
 8010f86:	f7ef f969 	bl	800025c <__aeabi_dsub>
 8010f8a:	4602      	mov	r2, r0
 8010f8c:	460b      	mov	r3, r1
 8010f8e:	2000      	movs	r0, #0
 8010f90:	493b      	ldr	r1, [pc, #236]	; (8011080 <__ieee754_pow+0xa20>)
 8010f92:	f7ef f963 	bl	800025c <__aeabi_dsub>
 8010f96:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8010f9a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010f9e:	da2b      	bge.n	8010ff8 <__ieee754_pow+0x998>
 8010fa0:	4652      	mov	r2, sl
 8010fa2:	f000 f9b9 	bl	8011318 <scalbn>
 8010fa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010faa:	f7ff bbf2 	b.w	8010792 <__ieee754_pow+0x132>
 8010fae:	4b35      	ldr	r3, [pc, #212]	; (8011084 <__ieee754_pow+0xa24>)
 8010fb0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8010fb4:	429f      	cmp	r7, r3
 8010fb6:	f77f af13 	ble.w	8010de0 <__ieee754_pow+0x780>
 8010fba:	4b33      	ldr	r3, [pc, #204]	; (8011088 <__ieee754_pow+0xa28>)
 8010fbc:	440b      	add	r3, r1
 8010fbe:	4303      	orrs	r3, r0
 8010fc0:	d00b      	beq.n	8010fda <__ieee754_pow+0x97a>
 8010fc2:	a32b      	add	r3, pc, #172	; (adr r3, 8011070 <__ieee754_pow+0xa10>)
 8010fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fcc:	f7ef fafe 	bl	80005cc <__aeabi_dmul>
 8010fd0:	a327      	add	r3, pc, #156	; (adr r3, 8011070 <__ieee754_pow+0xa10>)
 8010fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd6:	f7ff bbdc 	b.w	8010792 <__ieee754_pow+0x132>
 8010fda:	4622      	mov	r2, r4
 8010fdc:	462b      	mov	r3, r5
 8010fde:	f7ef f93d 	bl	800025c <__aeabi_dsub>
 8010fe2:	4642      	mov	r2, r8
 8010fe4:	464b      	mov	r3, r9
 8010fe6:	f7ef fd77 	bl	8000ad8 <__aeabi_dcmpge>
 8010fea:	2800      	cmp	r0, #0
 8010fec:	f43f aef8 	beq.w	8010de0 <__ieee754_pow+0x780>
 8010ff0:	e7e7      	b.n	8010fc2 <__ieee754_pow+0x962>
 8010ff2:	f04f 0a00 	mov.w	sl, #0
 8010ff6:	e71e      	b.n	8010e36 <__ieee754_pow+0x7d6>
 8010ff8:	4621      	mov	r1, r4
 8010ffa:	e7d4      	b.n	8010fa6 <__ieee754_pow+0x946>
 8010ffc:	f04f 0b00 	mov.w	fp, #0
 8011000:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011080 <__ieee754_pow+0xa20>
 8011004:	f7ff bbb0 	b.w	8010768 <__ieee754_pow+0x108>
 8011008:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 801100c:	f7ff bbac 	b.w	8010768 <__ieee754_pow+0x108>
 8011010:	4638      	mov	r0, r7
 8011012:	4641      	mov	r1, r8
 8011014:	f7ff bbbf 	b.w	8010796 <__ieee754_pow+0x136>
 8011018:	9200      	str	r2, [sp, #0]
 801101a:	f7ff bb7f 	b.w	801071c <__ieee754_pow+0xbc>
 801101e:	2300      	movs	r3, #0
 8011020:	f7ff bb69 	b.w	80106f6 <__ieee754_pow+0x96>
 8011024:	f3af 8000 	nop.w
 8011028:	652b82fe 	.word	0x652b82fe
 801102c:	3c971547 	.word	0x3c971547
 8011030:	00000000 	.word	0x00000000
 8011034:	3fe62e43 	.word	0x3fe62e43
 8011038:	fefa39ef 	.word	0xfefa39ef
 801103c:	3fe62e42 	.word	0x3fe62e42
 8011040:	0ca86c39 	.word	0x0ca86c39
 8011044:	be205c61 	.word	0xbe205c61
 8011048:	72bea4d0 	.word	0x72bea4d0
 801104c:	3e663769 	.word	0x3e663769
 8011050:	c5d26bf1 	.word	0xc5d26bf1
 8011054:	3ebbbd41 	.word	0x3ebbbd41
 8011058:	af25de2c 	.word	0xaf25de2c
 801105c:	3f11566a 	.word	0x3f11566a
 8011060:	16bebd93 	.word	0x16bebd93
 8011064:	3f66c16c 	.word	0x3f66c16c
 8011068:	5555553e 	.word	0x5555553e
 801106c:	3fc55555 	.word	0x3fc55555
 8011070:	c2f8f359 	.word	0xc2f8f359
 8011074:	01a56e1f 	.word	0x01a56e1f
 8011078:	3fe00000 	.word	0x3fe00000
 801107c:	000fffff 	.word	0x000fffff
 8011080:	3ff00000 	.word	0x3ff00000
 8011084:	4090cbff 	.word	0x4090cbff
 8011088:	3f6f3400 	.word	0x3f6f3400

0801108c <__ieee754_sqrt>:
 801108c:	f8df c150 	ldr.w	ip, [pc, #336]	; 80111e0 <__ieee754_sqrt+0x154>
 8011090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011094:	ea3c 0c01 	bics.w	ip, ip, r1
 8011098:	460b      	mov	r3, r1
 801109a:	4606      	mov	r6, r0
 801109c:	460d      	mov	r5, r1
 801109e:	460a      	mov	r2, r1
 80110a0:	4607      	mov	r7, r0
 80110a2:	4604      	mov	r4, r0
 80110a4:	d10e      	bne.n	80110c4 <__ieee754_sqrt+0x38>
 80110a6:	4602      	mov	r2, r0
 80110a8:	f7ef fa90 	bl	80005cc <__aeabi_dmul>
 80110ac:	4602      	mov	r2, r0
 80110ae:	460b      	mov	r3, r1
 80110b0:	4630      	mov	r0, r6
 80110b2:	4629      	mov	r1, r5
 80110b4:	f7ef f8d4 	bl	8000260 <__adddf3>
 80110b8:	4606      	mov	r6, r0
 80110ba:	460d      	mov	r5, r1
 80110bc:	4630      	mov	r0, r6
 80110be:	4629      	mov	r1, r5
 80110c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110c4:	2900      	cmp	r1, #0
 80110c6:	dc0d      	bgt.n	80110e4 <__ieee754_sqrt+0x58>
 80110c8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80110cc:	ea5c 0707 	orrs.w	r7, ip, r7
 80110d0:	d0f4      	beq.n	80110bc <__ieee754_sqrt+0x30>
 80110d2:	b139      	cbz	r1, 80110e4 <__ieee754_sqrt+0x58>
 80110d4:	4602      	mov	r2, r0
 80110d6:	f7ef f8c1 	bl	800025c <__aeabi_dsub>
 80110da:	4602      	mov	r2, r0
 80110dc:	460b      	mov	r3, r1
 80110de:	f7ef fb9f 	bl	8000820 <__aeabi_ddiv>
 80110e2:	e7e9      	b.n	80110b8 <__ieee754_sqrt+0x2c>
 80110e4:	1512      	asrs	r2, r2, #20
 80110e6:	d074      	beq.n	80111d2 <__ieee754_sqrt+0x146>
 80110e8:	2000      	movs	r0, #0
 80110ea:	07d5      	lsls	r5, r2, #31
 80110ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80110f0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 80110f4:	bf5e      	ittt	pl
 80110f6:	0fe3      	lsrpl	r3, r4, #31
 80110f8:	0064      	lslpl	r4, r4, #1
 80110fa:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80110fe:	0fe3      	lsrs	r3, r4, #31
 8011100:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011104:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8011108:	2516      	movs	r5, #22
 801110a:	4601      	mov	r1, r0
 801110c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011110:	1076      	asrs	r6, r6, #1
 8011112:	0064      	lsls	r4, r4, #1
 8011114:	188f      	adds	r7, r1, r2
 8011116:	429f      	cmp	r7, r3
 8011118:	bfde      	ittt	le
 801111a:	1bdb      	suble	r3, r3, r7
 801111c:	18b9      	addle	r1, r7, r2
 801111e:	1880      	addle	r0, r0, r2
 8011120:	005b      	lsls	r3, r3, #1
 8011122:	3d01      	subs	r5, #1
 8011124:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8011128:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801112c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8011130:	d1f0      	bne.n	8011114 <__ieee754_sqrt+0x88>
 8011132:	462a      	mov	r2, r5
 8011134:	f04f 0e20 	mov.w	lr, #32
 8011138:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 801113c:	428b      	cmp	r3, r1
 801113e:	eb07 0c05 	add.w	ip, r7, r5
 8011142:	dc02      	bgt.n	801114a <__ieee754_sqrt+0xbe>
 8011144:	d113      	bne.n	801116e <__ieee754_sqrt+0xe2>
 8011146:	45a4      	cmp	ip, r4
 8011148:	d811      	bhi.n	801116e <__ieee754_sqrt+0xe2>
 801114a:	f1bc 0f00 	cmp.w	ip, #0
 801114e:	eb0c 0507 	add.w	r5, ip, r7
 8011152:	da43      	bge.n	80111dc <__ieee754_sqrt+0x150>
 8011154:	2d00      	cmp	r5, #0
 8011156:	db41      	blt.n	80111dc <__ieee754_sqrt+0x150>
 8011158:	f101 0801 	add.w	r8, r1, #1
 801115c:	1a5b      	subs	r3, r3, r1
 801115e:	4641      	mov	r1, r8
 8011160:	45a4      	cmp	ip, r4
 8011162:	bf88      	it	hi
 8011164:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011168:	eba4 040c 	sub.w	r4, r4, ip
 801116c:	443a      	add	r2, r7
 801116e:	005b      	lsls	r3, r3, #1
 8011170:	f1be 0e01 	subs.w	lr, lr, #1
 8011174:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8011178:	ea4f 0757 	mov.w	r7, r7, lsr #1
 801117c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8011180:	d1dc      	bne.n	801113c <__ieee754_sqrt+0xb0>
 8011182:	4323      	orrs	r3, r4
 8011184:	d006      	beq.n	8011194 <__ieee754_sqrt+0x108>
 8011186:	1c54      	adds	r4, r2, #1
 8011188:	bf0b      	itete	eq
 801118a:	4672      	moveq	r2, lr
 801118c:	3201      	addne	r2, #1
 801118e:	3001      	addeq	r0, #1
 8011190:	f022 0201 	bicne.w	r2, r2, #1
 8011194:	1043      	asrs	r3, r0, #1
 8011196:	07c1      	lsls	r1, r0, #31
 8011198:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801119c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80111a0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80111a4:	bf48      	it	mi
 80111a6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80111aa:	4610      	mov	r0, r2
 80111ac:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80111b0:	e782      	b.n	80110b8 <__ieee754_sqrt+0x2c>
 80111b2:	0ae3      	lsrs	r3, r4, #11
 80111b4:	3915      	subs	r1, #21
 80111b6:	0564      	lsls	r4, r4, #21
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d0fa      	beq.n	80111b2 <__ieee754_sqrt+0x126>
 80111bc:	02de      	lsls	r6, r3, #11
 80111be:	d50a      	bpl.n	80111d6 <__ieee754_sqrt+0x14a>
 80111c0:	f1c2 0020 	rsb	r0, r2, #32
 80111c4:	fa24 f000 	lsr.w	r0, r4, r0
 80111c8:	1e55      	subs	r5, r2, #1
 80111ca:	4094      	lsls	r4, r2
 80111cc:	4303      	orrs	r3, r0
 80111ce:	1b4a      	subs	r2, r1, r5
 80111d0:	e78a      	b.n	80110e8 <__ieee754_sqrt+0x5c>
 80111d2:	4611      	mov	r1, r2
 80111d4:	e7f0      	b.n	80111b8 <__ieee754_sqrt+0x12c>
 80111d6:	005b      	lsls	r3, r3, #1
 80111d8:	3201      	adds	r2, #1
 80111da:	e7ef      	b.n	80111bc <__ieee754_sqrt+0x130>
 80111dc:	4688      	mov	r8, r1
 80111de:	e7bd      	b.n	801115c <__ieee754_sqrt+0xd0>
 80111e0:	7ff00000 	.word	0x7ff00000

080111e4 <fabs>:
 80111e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80111e8:	4770      	bx	lr

080111ea <finite>:
 80111ea:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80111ee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80111f2:	0fc0      	lsrs	r0, r0, #31
 80111f4:	4770      	bx	lr
	...

080111f8 <nan>:
 80111f8:	2000      	movs	r0, #0
 80111fa:	4901      	ldr	r1, [pc, #4]	; (8011200 <nan+0x8>)
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop
 8011200:	7ff80000 	.word	0x7ff80000

08011204 <rint>:
 8011204:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8011208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801120a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 801120e:	2f13      	cmp	r7, #19
 8011210:	4602      	mov	r2, r0
 8011212:	460b      	mov	r3, r1
 8011214:	460c      	mov	r4, r1
 8011216:	4605      	mov	r5, r0
 8011218:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 801121c:	dc59      	bgt.n	80112d2 <rint+0xce>
 801121e:	2f00      	cmp	r7, #0
 8011220:	da2a      	bge.n	8011278 <rint+0x74>
 8011222:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011226:	4301      	orrs	r1, r0
 8011228:	d022      	beq.n	8011270 <rint+0x6c>
 801122a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 801122e:	4301      	orrs	r1, r0
 8011230:	424d      	negs	r5, r1
 8011232:	430d      	orrs	r5, r1
 8011234:	4936      	ldr	r1, [pc, #216]	; (8011310 <rint+0x10c>)
 8011236:	0c5c      	lsrs	r4, r3, #17
 8011238:	0b2d      	lsrs	r5, r5, #12
 801123a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 801123e:	0464      	lsls	r4, r4, #17
 8011240:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011244:	ea45 0304 	orr.w	r3, r5, r4
 8011248:	e9d1 4500 	ldrd	r4, r5, [r1]
 801124c:	4620      	mov	r0, r4
 801124e:	4629      	mov	r1, r5
 8011250:	f7ef f806 	bl	8000260 <__adddf3>
 8011254:	e9cd 0100 	strd	r0, r1, [sp]
 8011258:	e9dd 0100 	ldrd	r0, r1, [sp]
 801125c:	462b      	mov	r3, r5
 801125e:	4622      	mov	r2, r4
 8011260:	f7ee fffc 	bl	800025c <__aeabi_dsub>
 8011264:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011268:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 801126c:	4602      	mov	r2, r0
 801126e:	460b      	mov	r3, r1
 8011270:	4610      	mov	r0, r2
 8011272:	4619      	mov	r1, r3
 8011274:	b003      	add	sp, #12
 8011276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011278:	4926      	ldr	r1, [pc, #152]	; (8011314 <rint+0x110>)
 801127a:	4139      	asrs	r1, r7
 801127c:	ea03 0001 	and.w	r0, r3, r1
 8011280:	4310      	orrs	r0, r2
 8011282:	d0f5      	beq.n	8011270 <rint+0x6c>
 8011284:	084b      	lsrs	r3, r1, #1
 8011286:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 801128a:	ea52 0501 	orrs.w	r5, r2, r1
 801128e:	d00c      	beq.n	80112aa <rint+0xa6>
 8011290:	ea24 0303 	bic.w	r3, r4, r3
 8011294:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8011298:	2f13      	cmp	r7, #19
 801129a:	bf0c      	ite	eq
 801129c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80112a0:	2500      	movne	r5, #0
 80112a2:	fa44 f707 	asr.w	r7, r4, r7
 80112a6:	ea43 0407 	orr.w	r4, r3, r7
 80112aa:	4919      	ldr	r1, [pc, #100]	; (8011310 <rint+0x10c>)
 80112ac:	4623      	mov	r3, r4
 80112ae:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80112b2:	462a      	mov	r2, r5
 80112b4:	e9d6 4500 	ldrd	r4, r5, [r6]
 80112b8:	4620      	mov	r0, r4
 80112ba:	4629      	mov	r1, r5
 80112bc:	f7ee ffd0 	bl	8000260 <__adddf3>
 80112c0:	e9cd 0100 	strd	r0, r1, [sp]
 80112c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112c8:	4622      	mov	r2, r4
 80112ca:	462b      	mov	r3, r5
 80112cc:	f7ee ffc6 	bl	800025c <__aeabi_dsub>
 80112d0:	e7cc      	b.n	801126c <rint+0x68>
 80112d2:	2f33      	cmp	r7, #51	; 0x33
 80112d4:	dd05      	ble.n	80112e2 <rint+0xde>
 80112d6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80112da:	d1c9      	bne.n	8011270 <rint+0x6c>
 80112dc:	f7ee ffc0 	bl	8000260 <__adddf3>
 80112e0:	e7c4      	b.n	801126c <rint+0x68>
 80112e2:	f04f 31ff 	mov.w	r1, #4294967295
 80112e6:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80112ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80112ee:	4208      	tst	r0, r1
 80112f0:	d0be      	beq.n	8011270 <rint+0x6c>
 80112f2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80112f6:	bf18      	it	ne
 80112f8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80112fc:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8011300:	bf1e      	ittt	ne
 8011302:	ea20 0303 	bicne.w	r3, r0, r3
 8011306:	fa45 fc0c 	asrne.w	ip, r5, ip
 801130a:	ea43 050c 	orrne.w	r5, r3, ip
 801130e:	e7cc      	b.n	80112aa <rint+0xa6>
 8011310:	08012800 	.word	0x08012800
 8011314:	000fffff 	.word	0x000fffff

08011318 <scalbn>:
 8011318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801131a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 801131e:	4604      	mov	r4, r0
 8011320:	460d      	mov	r5, r1
 8011322:	4617      	mov	r7, r2
 8011324:	460b      	mov	r3, r1
 8011326:	b996      	cbnz	r6, 801134e <scalbn+0x36>
 8011328:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801132c:	4303      	orrs	r3, r0
 801132e:	d039      	beq.n	80113a4 <scalbn+0x8c>
 8011330:	4b35      	ldr	r3, [pc, #212]	; (8011408 <scalbn+0xf0>)
 8011332:	2200      	movs	r2, #0
 8011334:	f7ef f94a 	bl	80005cc <__aeabi_dmul>
 8011338:	4b34      	ldr	r3, [pc, #208]	; (801140c <scalbn+0xf4>)
 801133a:	4604      	mov	r4, r0
 801133c:	429f      	cmp	r7, r3
 801133e:	460d      	mov	r5, r1
 8011340:	da0f      	bge.n	8011362 <scalbn+0x4a>
 8011342:	a32d      	add	r3, pc, #180	; (adr r3, 80113f8 <scalbn+0xe0>)
 8011344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011348:	f7ef f940 	bl	80005cc <__aeabi_dmul>
 801134c:	e006      	b.n	801135c <scalbn+0x44>
 801134e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011352:	4296      	cmp	r6, r2
 8011354:	d10a      	bne.n	801136c <scalbn+0x54>
 8011356:	4602      	mov	r2, r0
 8011358:	f7ee ff82 	bl	8000260 <__adddf3>
 801135c:	4604      	mov	r4, r0
 801135e:	460d      	mov	r5, r1
 8011360:	e020      	b.n	80113a4 <scalbn+0x8c>
 8011362:	460b      	mov	r3, r1
 8011364:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011368:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 801136c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8011370:	19b9      	adds	r1, r7, r6
 8011372:	4291      	cmp	r1, r2
 8011374:	dd0e      	ble.n	8011394 <scalbn+0x7c>
 8011376:	a322      	add	r3, pc, #136	; (adr r3, 8011400 <scalbn+0xe8>)
 8011378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8011380:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8011384:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8011388:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 801138c:	4820      	ldr	r0, [pc, #128]	; (8011410 <scalbn+0xf8>)
 801138e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8011392:	e7d9      	b.n	8011348 <scalbn+0x30>
 8011394:	2900      	cmp	r1, #0
 8011396:	dd08      	ble.n	80113aa <scalbn+0x92>
 8011398:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801139c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80113a0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80113a4:	4620      	mov	r0, r4
 80113a6:	4629      	mov	r1, r5
 80113a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113aa:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80113ae:	da16      	bge.n	80113de <scalbn+0xc6>
 80113b0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80113b4:	429f      	cmp	r7, r3
 80113b6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80113ba:	dd08      	ble.n	80113ce <scalbn+0xb6>
 80113bc:	4c15      	ldr	r4, [pc, #84]	; (8011414 <scalbn+0xfc>)
 80113be:	4814      	ldr	r0, [pc, #80]	; (8011410 <scalbn+0xf8>)
 80113c0:	f363 74df 	bfi	r4, r3, #31, #1
 80113c4:	a30e      	add	r3, pc, #56	; (adr r3, 8011400 <scalbn+0xe8>)
 80113c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ca:	4621      	mov	r1, r4
 80113cc:	e7bc      	b.n	8011348 <scalbn+0x30>
 80113ce:	4c12      	ldr	r4, [pc, #72]	; (8011418 <scalbn+0x100>)
 80113d0:	4812      	ldr	r0, [pc, #72]	; (801141c <scalbn+0x104>)
 80113d2:	f363 74df 	bfi	r4, r3, #31, #1
 80113d6:	a308      	add	r3, pc, #32	; (adr r3, 80113f8 <scalbn+0xe0>)
 80113d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113dc:	e7f5      	b.n	80113ca <scalbn+0xb2>
 80113de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80113e2:	3136      	adds	r1, #54	; 0x36
 80113e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80113e8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80113ec:	4620      	mov	r0, r4
 80113ee:	4629      	mov	r1, r5
 80113f0:	2200      	movs	r2, #0
 80113f2:	4b0b      	ldr	r3, [pc, #44]	; (8011420 <scalbn+0x108>)
 80113f4:	e7a8      	b.n	8011348 <scalbn+0x30>
 80113f6:	bf00      	nop
 80113f8:	c2f8f359 	.word	0xc2f8f359
 80113fc:	01a56e1f 	.word	0x01a56e1f
 8011400:	8800759c 	.word	0x8800759c
 8011404:	7e37e43c 	.word	0x7e37e43c
 8011408:	43500000 	.word	0x43500000
 801140c:	ffff3cb0 	.word	0xffff3cb0
 8011410:	8800759c 	.word	0x8800759c
 8011414:	7e37e43c 	.word	0x7e37e43c
 8011418:	01a56e1f 	.word	0x01a56e1f
 801141c:	c2f8f359 	.word	0xc2f8f359
 8011420:	3c900000 	.word	0x3c900000

08011424 <_init>:
 8011424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011426:	bf00      	nop
 8011428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801142a:	bc08      	pop	{r3}
 801142c:	469e      	mov	lr, r3
 801142e:	4770      	bx	lr

08011430 <_fini>:
 8011430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011432:	bf00      	nop
 8011434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011436:	bc08      	pop	{r3}
 8011438:	469e      	mov	lr, r3
 801143a:	4770      	bx	lr
